ARM GAS  /tmp/ccvYD7zo.s 			page 1


   1              		.arch armv8.1-m.main
   2              		.fpu fpv5-d16
   3              		.arch_extension dsp
   4              		.arch_extension fp
   5              		.arch_extension fp.dp
   6              		.arch_extension mve
   7              		.arch_extension mve.fp
   8              		.eabi_attribute 5, "cortex-m55"
   9              		.eabi_attribute 28, 1
  10              		.eabi_attribute 20, 1
  11              		.eabi_attribute 21, 1
  12              		.eabi_attribute 23, 3
  13              		.eabi_attribute 24, 1
  14              		.eabi_attribute 25, 1
  15              		.eabi_attribute 26, 1
  16              		.eabi_attribute 30, 6
  17              		.eabi_attribute 34, 1
  18              		.eabi_attribute 38, 1
  19              		.eabi_attribute 18, 4
  20              		.file	"stm32n6xx_hal_gfxmmu.c"
  21              		.text
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.file 1 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c"
  25              		.section	.rodata
  26              		.align	2
  27              	.LC0:
  28 0000 53544D33 		.ascii	"STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/st"
  28      32437562 
  28      655F4657 
  28      5F4E362F 
  28      44726976 
  29 0033 6D33326E 		.ascii	"m32n6xx_hal_gfxmmu.c\000"
  29      3678785F 
  29      68616C5F 
  29      6766786D 
  29      6D752E63 
  30              		.section	.text.HAL_GFXMMU_Init,"ax",%progbits
  31              		.align	1
  32              		.global	HAL_GFXMMU_Init
  33              		.syntax unified
  34              		.thumb
  35              		.thumb_func
  37              	HAL_GFXMMU_Init:
  38              	.LFB835:
   1:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
   2:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ******************************************************************************
   3:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @file    stm32n6xx_hal_gfxmmu.c
   4:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @author  MCD Application Team
   5:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief   This file provides firmware functions to manage the following
   6:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *          functionalities of the Graphic MMU (GFXMMU) peripheral:
   7:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           + Initialization and De-initialization.
   8:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           + LUT configuration.
   9:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           + Modify physical buffer addresses.
  10:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           + Packing configuration.
  11:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           + Error management.
  12:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *
ARM GAS  /tmp/ccvYD7zo.s 			page 2


  13:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ******************************************************************************
  14:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @attention
  15:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *
  16:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * Copyright (c) 2023 STMicroelectronics.
  17:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * All rights reserved.
  18:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *
  19:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * This software is licensed under terms that can be found in the LICENSE file
  20:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * in the root directory of this software component.
  21:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  22:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *
  23:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ******************************************************************************
  24:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   @verbatim
  25:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ==============================================================================
  26:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                      ##### How to use this driver #####
  27:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ==============================================================================
  28:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   [..]
  29:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     *** Initialization ***
  30:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     ======================
  31:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  32:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (#) As prerequisite, fill in the HAL_GFXMMU_MspInit() :
  33:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         (++) Enable GFXMMU clock interface with __HAL_RCC_GFXMMU_CLK_ENABLE().
  34:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         (++) If interrupts are used, enable and configure GFXMMU global
  35:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****             interrupt with HAL_NVIC_SetPriority() and HAL_NVIC_EnableIRQ().
  36:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (#) Configure the number of blocks per line, default value, physical
  37:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           buffer addresses and interrupts using the HAL_GFXMMU_Init() function.
  38:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
  39:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     *** LUT configuration ***
  40:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     =========================
  41:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  42:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (#) Use HAL_GFXMMU_DisableLutLines() to deactivate all LUT lines (or a
  43:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           range of lines).
  44:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (#) Use HAL_GFXMMU_ConfigLut() to copy LUT from flash to look up RAM.
  45:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (#) Use HAL_GFXMMU_ConfigLutLine() to configure one line of LUT.
  46:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
  47:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     *** Modify physical buffer addresses ***
  48:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     ========================================
  49:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  50:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (#) Use HAL_GFXMMU_ModifyBuffers() to modify physical buffer addresses.
  51:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
  52:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     *** Packing configuration ***
  53:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     =============================
  54:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  55:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (#) Use HAL_GFXMMU_ConfigPacking() to configure packing.
  56:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
  57:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     *** Error management ***
  58:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     ========================
  59:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  60:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (#) If interrupts are used, HAL_GFXMMU_IRQHandler() will be called when
  61:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           an error occurs. This function will call HAL_GFXMMU_ErrorCallback().
  62:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           Use HAL_GFXMMU_GetError() to get the error code.
  63:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
  64:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     *** De-initialization ***
  65:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     =========================
  66:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  67:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (#) As prerequisite, fill in the HAL_GFXMMU_MspDeInit() :
  68:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         (++) Disable GFXMMU clock interface with __HAL_RCC_GFXMMU_CLK_ENABLE().
  69:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         (++) If interrupts has been used, disable GFXMMU global interrupt with
ARM GAS  /tmp/ccvYD7zo.s 			page 3


  70:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****              HAL_NVIC_DisableIRQ().
  71:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (#) De-initialize GFXMMU using the HAL_GFXMMU_DeInit() function.
  72:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
  73:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     *** Callback registration ***
  74:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     =============================
  75:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  76:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     The compilation define USE_HAL_GFXMMU_REGISTER_CALLBACKS when set to 1
  77:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     allows the user to configure dynamically the driver callbacks.
  78:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     Use functions HAL_GFXMMU_RegisterCallback() to register a user callback.
  79:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
  80:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  81:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     Function HAL_GFXMMU_RegisterCallback() allows to register following callbacks:
  82:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) ErrorCallback      : GFXMMU error.
  83:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) MspInitCallback    : GFXMMU MspInit.
  84:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) MspDeInitCallback  : GFXMMU MspDeInit.
  85:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  86:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     This function takes as parameters the HAL peripheral handle, the callback ID
  87:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     and a pointer to the user callback function.
  88:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
  89:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  90:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     Use function HAL_GFXMMU_UnRegisterCallback() to reset a callback to the default
  91:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     weak (overridden) function.
  92:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     HAL_GFXMMU_UnRegisterCallback() takes as parameters the HAL peripheral handle,
  93:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     and the callback ID.
  94:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  95:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     This function allows to reset following callbacks:
  96:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) ErrorCallback      : GFXMMU error.
  97:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) MspInitCallback    : GFXMMU MspInit.
  98:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) MspDeInitCallback  : GFXMMU MspDeInit.
  99:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 100:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
 101:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     By default, after the HAL_GFXMMU_Init and if the state is HAL_GFXMMU_STATE_RESET
 102:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     all callbacks are reset to the corresponding legacy weak (overridden) functions:
 103:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     examples HAL_GFXMMU_ErrorCallback().
 104:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     Exception done for MspInit and MspDeInit callbacks that are respectively
 105:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     reset to the legacy weak (overridden) functions in the HAL_GFXMMU_Init
 106:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     and HAL_GFXMMU_DeInit only when these callbacks are null (not registered beforehand).
 107:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     If not, MspInit or MspDeInit are not null, the HAL_GFXMMU_Init and HAL_GFXMMU_DeInit
 108:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
 109:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 110:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
 111:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     Callbacks can be registered/unregistered in READY state only.
 112:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     Exception done for MspInit/MspDeInit callbacks that can be registered/unregistered
 113:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     in READY or RESET state, thus registered (user) MspInit/DeInit callbacks can be used
 114:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     during the Init/DeInit.
 115:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     In that case first register the MspInit/MspDeInit user callbacks
 116:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     using HAL_GFXMMU_RegisterCallback before calling HAL_GFXMMU_DeInit
 117:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     or HAL_GFXMMU_Init function.
 118:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 119:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
 120:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     When the compilation define USE_HAL_GFXMMU_REGISTER_CALLBACKS is set to 0 or
 121:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     not defined, the callback registering feature is not available
 122:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     and weak (overridden) callbacks are used.
 123:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 124:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   @endverbatim
 125:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ******************************************************************************
 126:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
ARM GAS  /tmp/ccvYD7zo.s 			page 4


 127:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 128:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /* Includes ------------------------------------------------------------------*/
 129:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #include "stm32n6xx_hal.h"
 130:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 131:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /** @addtogroup STM32N6xx_HAL_Driver
 132:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @{
 133:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 134:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #ifdef HAL_GFXMMU_MODULE_ENABLED
 135:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #if defined(GFXMMU)
 136:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /** @defgroup GFXMMU GFXMMU
 137:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief GFXMMU HAL driver module
 138:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @{
 139:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 140:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 141:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /* Private typedef -----------------------------------------------------------*/
 142:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /* Private define ------------------------------------------------------------*/
 143:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /** @defgroup GFXMMU_Private_Constants GFXMMU Private Constants
 144:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @{
 145:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 146:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #define GFXMMU_LUTXL_FVB_OFFSET     8U
 147:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #define GFXMMU_LUTXL_LVB_OFFSET     16U
 148:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #define GFXMMU_CR_ITS_MASK          0x1FU
 149:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 150:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @}
 151:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 152:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /* Private macro -------------------------------------------------------------*/
 153:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /* Private variables ---------------------------------------------------------*/
 154:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /* Private function prototypes -----------------------------------------------*/
 155:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /* Exported functions --------------------------------------------------------*/
 156:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /** @defgroup GFXMMU_Exported_Functions GFXMMU Exported Functions
 157:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @{
 158:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 159:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 160:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /** @defgroup GFXMMU_Exported_Functions_Group1 Initialization and de-initialization functions
 161:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *  @brief    Initialization and de-initialization functions
 162:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *
 163:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** @verbatim
 164:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ==============================================================================
 165:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           ##### Initialization and de-initialization functions #####
 166:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ==============================================================================
 167:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]  This section provides functions allowing to:
 168:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) Initialize the GFXMMU.
 169:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) De-initialize the GFXMMU.
 170:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** @endverbatim
 171:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @{
 172:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 173:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 174:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 175:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  Initialize the GFXMMU according to the specified parameters in the
 176:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *         GFXMMU_InitTypeDef structure and initialize the associated handle.
 177:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 178:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval HAL status.
 179:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 180:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** HAL_StatusTypeDef HAL_GFXMMU_Init(GFXMMU_HandleTypeDef *hgfxmmu)
 181:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
  39              		.loc 1 181 1
  40              		.cfi_startproc
ARM GAS  /tmp/ccvYD7zo.s 			page 5


  41              		@ args = 0, pretend = 0, frame = 16
  42              		@ frame_needed = 1, uses_anonymous_args = 0
  43 0000 80B5     		push	{r7, lr}
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 84B0     		sub	sp, sp, #16
  48              		.cfi_def_cfa_offset 24
  49 0004 00AF     		add	r7, sp, #0
  50              		.cfi_def_cfa_register 7
  51 0006 7860     		str	r0, [r7, #4]
 182:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
  52              		.loc 1 182 21
  53 0008 0023     		movs	r3, #0
  54 000a FB73     		strb	r3, [r7, #15]
 183:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 184:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check GFXMMU handle */
 185:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   if (hgfxmmu == NULL)
  55              		.loc 1 185 6
  56 000c 7B68     		ldr	r3, [r7, #4]
  57 000e 002B     		cmp	r3, #0
  58 0010 02D1     		bne	.L2
 186:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 187:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
  59              		.loc 1 187 12
  60 0012 0123     		movs	r3, #1
  61 0014 FB73     		strb	r3, [r7, #15]
  62 0016 AFE0     		b	.L3
  63              	.L2:
 188:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 189:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else
 190:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 191:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Check parameters */
 192:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
  64              		.loc 1 192 5
  65 0018 7B68     		ldr	r3, [r7, #4]
  66 001a 1B68     		ldr	r3, [r3]
  67 001c 594A     		ldr	r2, .L16
  68 001e 9342     		cmp	r3, r2
  69 0020 08D0     		beq	.L4
  70              		.loc 1 192 5 is_stmt 0 discriminator 1
  71 0022 7B68     		ldr	r3, [r7, #4]
  72 0024 1B68     		ldr	r3, [r3]
  73 0026 584A     		ldr	r2, .L16+4
  74 0028 9342     		cmp	r3, r2
  75 002a 03D0     		beq	.L4
  76              		.loc 1 192 5 discriminator 2
  77 002c C021     		movs	r1, #192
  78 002e 5748     		ldr	r0, .L16+8
  79 0030 FFF7FEFF 		bl	assert_failed
  80              	.L4:
 193:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BLOCK_SIZE(hgfxmmu->Init.BlockSize));
  81              		.loc 1 193 5 is_stmt 1
  82 0034 7B68     		ldr	r3, [r7, #4]
  83 0036 5B68     		ldr	r3, [r3, #4]
  84 0038 402B     		cmp	r3, #64
  85 003a 07D0     		beq	.L5
ARM GAS  /tmp/ccvYD7zo.s 			page 6


  86              		.loc 1 193 5 is_stmt 0 discriminator 1
  87 003c 7B68     		ldr	r3, [r7, #4]
  88 003e 5B68     		ldr	r3, [r3, #4]
  89 0040 002B     		cmp	r3, #0
  90 0042 03D0     		beq	.L5
  91              		.loc 1 193 5 discriminator 2
  92 0044 C121     		movs	r1, #193
  93 0046 5148     		ldr	r0, .L16+8
  94 0048 FFF7FEFF 		bl	assert_failed
  95              	.L5:
 194:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_FUNCTIONAL_STATE(hgfxmmu->Init.AddressTranslation));
  96              		.loc 1 194 5 is_stmt 1
  97 004c 7B68     		ldr	r3, [r7, #4]
  98 004e 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
  99 0050 002B     		cmp	r3, #0
 100 0052 07D0     		beq	.L6
 101              		.loc 1 194 5 is_stmt 0 discriminator 1
 102 0054 7B68     		ldr	r3, [r7, #4]
 103 0056 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 104 0058 012B     		cmp	r3, #1
 105 005a 03D0     		beq	.L6
 106              		.loc 1 194 5 discriminator 2
 107 005c C221     		movs	r1, #194
 108 005e 4B48     		ldr	r0, .L16+8
 109 0060 FFF7FEFF 		bl	assert_failed
 110              	.L6:
 195:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BUFFER_ADDRESS(hgfxmmu->Init.Buffers.Buf0Address));
 111              		.loc 1 195 5 is_stmt 1
 112 0064 7B68     		ldr	r3, [r7, #4]
 113 0066 1B69     		ldr	r3, [r3, #16]
 114 0068 03F00F03 		and	r3, r3, #15
 115 006c 002B     		cmp	r3, #0
 116 006e 03D0     		beq	.L7
 117              		.loc 1 195 5 is_stmt 0 discriminator 1
 118 0070 C321     		movs	r1, #195
 119 0072 4648     		ldr	r0, .L16+8
 120 0074 FFF7FEFF 		bl	assert_failed
 121              	.L7:
 196:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BUFFER_ADDRESS(hgfxmmu->Init.Buffers.Buf1Address));
 122              		.loc 1 196 5 is_stmt 1
 123 0078 7B68     		ldr	r3, [r7, #4]
 124 007a 5B69     		ldr	r3, [r3, #20]
 125 007c 03F00F03 		and	r3, r3, #15
 126 0080 002B     		cmp	r3, #0
 127 0082 03D0     		beq	.L8
 128              		.loc 1 196 5 is_stmt 0 discriminator 1
 129 0084 C421     		movs	r1, #196
 130 0086 4148     		ldr	r0, .L16+8
 131 0088 FFF7FEFF 		bl	assert_failed
 132              	.L8:
 197:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BUFFER_ADDRESS(hgfxmmu->Init.Buffers.Buf2Address));
 133              		.loc 1 197 5 is_stmt 1
 134 008c 7B68     		ldr	r3, [r7, #4]
 135 008e 9B69     		ldr	r3, [r3, #24]
 136 0090 03F00F03 		and	r3, r3, #15
 137 0094 002B     		cmp	r3, #0
 138 0096 03D0     		beq	.L9
ARM GAS  /tmp/ccvYD7zo.s 			page 7


 139              		.loc 1 197 5 is_stmt 0 discriminator 1
 140 0098 C521     		movs	r1, #197
 141 009a 3C48     		ldr	r0, .L16+8
 142 009c FFF7FEFF 		bl	assert_failed
 143              	.L9:
 198:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BUFFER_ADDRESS(hgfxmmu->Init.Buffers.Buf3Address));
 144              		.loc 1 198 5 is_stmt 1
 145 00a0 7B68     		ldr	r3, [r7, #4]
 146 00a2 DB69     		ldr	r3, [r3, #28]
 147 00a4 03F00F03 		and	r3, r3, #15
 148 00a8 002B     		cmp	r3, #0
 149 00aa 03D0     		beq	.L10
 150              		.loc 1 198 5 is_stmt 0 discriminator 1
 151 00ac C621     		movs	r1, #198
 152 00ae 3748     		ldr	r0, .L16+8
 153 00b0 FFF7FEFF 		bl	assert_failed
 154              	.L10:
 199:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_FUNCTIONAL_STATE(hgfxmmu->Init.Interrupts.Activation));
 155              		.loc 1 199 5 is_stmt 1
 156 00b4 7B68     		ldr	r3, [r7, #4]
 157 00b6 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 158 00ba 002B     		cmp	r3, #0
 159 00bc 08D0     		beq	.L11
 160              		.loc 1 199 5 is_stmt 0 discriminator 1
 161 00be 7B68     		ldr	r3, [r7, #4]
 162 00c0 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 163 00c4 012B     		cmp	r3, #1
 164 00c6 03D0     		beq	.L11
 165              		.loc 1 199 5 discriminator 2
 166 00c8 C721     		movs	r1, #199
 167 00ca 3048     		ldr	r0, .L16+8
 168 00cc FFF7FEFF 		bl	assert_failed
 169              	.L11:
 200:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 201:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
 202:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Reset callback pointers to the weak predefined callbacks */
 203:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->ErrorCallback = HAL_GFXMMU_ErrorCallback;
 204:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 205:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Call GFXMMU MSP init function */
 206:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (hgfxmmu->MspInitCallback == NULL)
 207:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 208:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       hgfxmmu->MspInitCallback = HAL_GFXMMU_MspInit;
 209:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 210:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->MspInitCallback(hgfxmmu);
 211:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #else
 212:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Call GFXMMU MSP init function */
 213:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     HAL_GFXMMU_MspInit(hgfxmmu);
 170              		.loc 1 213 5 is_stmt 1
 171 00d0 7868     		ldr	r0, [r7, #4]
 172 00d2 FFF7FEFF 		bl	HAL_GFXMMU_MspInit
 214:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
 215:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 216:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Configure GFXMMU_CR register */
 217:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->CR = 0U;
 173              		.loc 1 217 12
 174 00d6 7B68     		ldr	r3, [r7, #4]
 175 00d8 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccvYD7zo.s 			page 8


 176              		.loc 1 217 27
 177 00da 0022     		movs	r2, #0
 178 00dc 1A60     		str	r2, [r3]
 218:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlockSize);
 179              		.loc 1 218 12
 180 00de 7B68     		ldr	r3, [r7, #4]
 181 00e0 1B68     		ldr	r3, [r3]
 182              		.loc 1 218 22
 183 00e2 1968     		ldr	r1, [r3]
 184              		.loc 1 218 44
 185 00e4 7B68     		ldr	r3, [r7, #4]
 186 00e6 5A68     		ldr	r2, [r3, #4]
 187              		.loc 1 218 12
 188 00e8 7B68     		ldr	r3, [r7, #4]
 189 00ea 1B68     		ldr	r3, [r3]
 190              		.loc 1 218 27
 191 00ec 0A43     		orrs	r2, r2, r1
 192 00ee 1A60     		str	r2, [r3]
 219:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (hgfxmmu->Init.AddressTranslation == ENABLE)
 193              		.loc 1 219 22
 194 00f0 7B68     		ldr	r3, [r7, #4]
 195 00f2 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 196              		.loc 1 219 8
 197 00f4 012B     		cmp	r3, #1
 198 00f6 07D1     		bne	.L12
 220:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 221:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       hgfxmmu->Instance->CR |= GFXMMU_CR_ATE;
 199              		.loc 1 221 14
 200 00f8 7B68     		ldr	r3, [r7, #4]
 201 00fa 1B68     		ldr	r3, [r3]
 202              		.loc 1 221 24
 203 00fc 1A68     		ldr	r2, [r3]
 204              		.loc 1 221 14
 205 00fe 7B68     		ldr	r3, [r7, #4]
 206 0100 1B68     		ldr	r3, [r3]
 207              		.loc 1 221 29
 208 0102 42F40042 		orr	r2, r2, #32768
 209 0106 1A60     		str	r2, [r3]
 210              	.L12:
 222:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 223:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (hgfxmmu->Init.Interrupts.Activation == ENABLE)
 211              		.loc 1 223 33
 212 0108 7B68     		ldr	r3, [r7, #4]
 213 010a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 214              		.loc 1 223 8
 215 010e 012B     		cmp	r3, #1
 216 0110 12D1     		bne	.L13
 224:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 225:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       assert_param(IS_GFXMMU_INTERRUPTS(hgfxmmu->Init.Interrupts.UsedInterrupts));
 217              		.loc 1 225 7
 218 0112 7B68     		ldr	r3, [r7, #4]
 219 0114 5B6A     		ldr	r3, [r3, #36]
 220 0116 03F01F03 		and	r3, r3, #31
 221 011a 002B     		cmp	r3, #0
 222 011c 03D1     		bne	.L14
 223              		.loc 1 225 7 is_stmt 0 discriminator 1
 224 011e E121     		movs	r1, #225
ARM GAS  /tmp/ccvYD7zo.s 			page 9


 225 0120 1A48     		ldr	r0, .L16+8
 226 0122 FFF7FEFF 		bl	assert_failed
 227              	.L14:
 226:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       hgfxmmu->Instance->CR |= hgfxmmu->Init.Interrupts.UsedInterrupts;
 228              		.loc 1 226 14 is_stmt 1
 229 0126 7B68     		ldr	r3, [r7, #4]
 230 0128 1B68     		ldr	r3, [r3]
 231              		.loc 1 226 24
 232 012a 1968     		ldr	r1, [r3]
 233              		.loc 1 226 56
 234 012c 7B68     		ldr	r3, [r7, #4]
 235 012e 5A6A     		ldr	r2, [r3, #36]
 236              		.loc 1 226 14
 237 0130 7B68     		ldr	r3, [r7, #4]
 238 0132 1B68     		ldr	r3, [r3]
 239              		.loc 1 226 29
 240 0134 0A43     		orrs	r2, r2, r1
 241 0136 1A60     		str	r2, [r3]
 242              	.L13:
 227:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 228:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 229:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Configure default value on GFXMMU_DVR register */
 230:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->DVR = hgfxmmu->Init.DefaultValue;
 243              		.loc 1 230 12
 244 0138 7B68     		ldr	r3, [r7, #4]
 245 013a 1B68     		ldr	r3, [r3]
 246              		.loc 1 230 43
 247 013c 7A68     		ldr	r2, [r7, #4]
 248 013e 9268     		ldr	r2, [r2, #8]
 249              		.loc 1 230 28
 250 0140 1A61     		str	r2, [r3, #16]
 231:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 232:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Configure physical buffer addresses on GFXMMU_BxCR registers */
 233:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B0CR = hgfxmmu->Init.Buffers.Buf0Address;
 251              		.loc 1 233 12
 252 0142 7B68     		ldr	r3, [r7, #4]
 253 0144 1B68     		ldr	r3, [r3]
 254              		.loc 1 233 52
 255 0146 7A68     		ldr	r2, [r7, #4]
 256 0148 1269     		ldr	r2, [r2, #16]
 257              		.loc 1 233 29
 258 014a 1A62     		str	r2, [r3, #32]
 234:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B1CR = hgfxmmu->Init.Buffers.Buf1Address;
 259              		.loc 1 234 12
 260 014c 7B68     		ldr	r3, [r7, #4]
 261 014e 1B68     		ldr	r3, [r3]
 262              		.loc 1 234 52
 263 0150 7A68     		ldr	r2, [r7, #4]
 264 0152 5269     		ldr	r2, [r2, #20]
 265              		.loc 1 234 29
 266 0154 5A62     		str	r2, [r3, #36]
 235:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B2CR = hgfxmmu->Init.Buffers.Buf2Address;
 267              		.loc 1 235 12
 268 0156 7B68     		ldr	r3, [r7, #4]
 269 0158 1B68     		ldr	r3, [r3]
 270              		.loc 1 235 52
 271 015a 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/ccvYD7zo.s 			page 10


 272 015c 9269     		ldr	r2, [r2, #24]
 273              		.loc 1 235 29
 274 015e 9A62     		str	r2, [r3, #40]
 236:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B3CR = hgfxmmu->Init.Buffers.Buf3Address;
 275              		.loc 1 236 12
 276 0160 7B68     		ldr	r3, [r7, #4]
 277 0162 1B68     		ldr	r3, [r3]
 278              		.loc 1 236 52
 279 0164 7A68     		ldr	r2, [r7, #4]
 280 0166 D269     		ldr	r2, [r2, #28]
 281              		.loc 1 236 29
 282 0168 DA62     		str	r2, [r3, #44]
 237:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 238:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Reset GFXMMU error code */
 239:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->ErrorCode = GFXMMU_ERROR_NONE;
 283              		.loc 1 239 24
 284 016a 7B68     		ldr	r3, [r7, #4]
 285 016c 0022     		movs	r2, #0
 286 016e DA62     		str	r2, [r3, #44]
 240:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 241:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Set GFXMMU to ready state */
 242:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->State = HAL_GFXMMU_STATE_READY;
 287              		.loc 1 242 20
 288 0170 7B68     		ldr	r3, [r7, #4]
 289 0172 0122     		movs	r2, #1
 290 0174 83F82820 		strb	r2, [r3, #40]
 291              	.L3:
 243:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 244:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Return function status */
 245:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return status;
 292              		.loc 1 245 10
 293 0178 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 246:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 294              		.loc 1 246 1
 295 017a 1846     		mov	r0, r3
 296 017c 1037     		adds	r7, r7, #16
 297              		.cfi_def_cfa_offset 8
 298 017e BD46     		mov	sp, r7
 299              		.cfi_def_cfa_register 13
 300              		@ sp needed
 301 0180 80BD     		pop	{r7, pc}
 302              	.L17:
 303 0182 00BF     		.align	2
 304              	.L16:
 305 0184 00000358 		.word	1476591616
 306 0188 00000348 		.word	1208156160
 307 018c 00000000 		.word	.LC0
 308              		.cfi_endproc
 309              	.LFE835:
 311              		.section	.text.HAL_GFXMMU_DeInit,"ax",%progbits
 312              		.align	1
 313              		.global	HAL_GFXMMU_DeInit
 314              		.syntax unified
 315              		.thumb
 316              		.thumb_func
 318              	HAL_GFXMMU_DeInit:
 319              	.LFB836:
ARM GAS  /tmp/ccvYD7zo.s 			page 11


 247:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 248:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 249:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  De-initialize the GFXMMU.
 250:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 251:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval HAL status.
 252:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 253:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** HAL_StatusTypeDef HAL_GFXMMU_DeInit(GFXMMU_HandleTypeDef *hgfxmmu)
 254:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 320              		.loc 1 254 1
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 16
 323              		@ frame_needed = 1, uses_anonymous_args = 0
 324 0000 80B5     		push	{r7, lr}
 325              		.cfi_def_cfa_offset 8
 326              		.cfi_offset 7, -8
 327              		.cfi_offset 14, -4
 328 0002 84B0     		sub	sp, sp, #16
 329              		.cfi_def_cfa_offset 24
 330 0004 00AF     		add	r7, sp, #0
 331              		.cfi_def_cfa_register 7
 332 0006 7860     		str	r0, [r7, #4]
 255:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 333              		.loc 1 255 21
 334 0008 0023     		movs	r3, #0
 335 000a FB73     		strb	r3, [r7, #15]
 256:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 257:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check GFXMMU handle */
 258:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   if (hgfxmmu == NULL)
 336              		.loc 1 258 6
 337 000c 7B68     		ldr	r3, [r7, #4]
 338 000e 002B     		cmp	r3, #0
 339 0010 02D1     		bne	.L19
 259:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 260:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 340              		.loc 1 260 12
 341 0012 0123     		movs	r3, #1
 342 0014 FB73     		strb	r3, [r7, #15]
 343 0016 1DE0     		b	.L20
 344              	.L19:
 261:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 262:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else
 263:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 264:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Check parameters */
 265:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
 345              		.loc 1 265 5
 346 0018 7B68     		ldr	r3, [r7, #4]
 347 001a 1B68     		ldr	r3, [r3]
 348 001c 104A     		ldr	r2, .L23
 349 001e 9342     		cmp	r3, r2
 350 0020 09D0     		beq	.L21
 351              		.loc 1 265 5 is_stmt 0 discriminator 1
 352 0022 7B68     		ldr	r3, [r7, #4]
 353 0024 1B68     		ldr	r3, [r3]
 354 0026 0F4A     		ldr	r2, .L23+4
 355 0028 9342     		cmp	r3, r2
 356 002a 04D0     		beq	.L21
 357              		.loc 1 265 5 discriminator 2
ARM GAS  /tmp/ccvYD7zo.s 			page 12


 358 002c 40F20911 		movw	r1, #265
 359 0030 0D48     		ldr	r0, .L23+8
 360 0032 FFF7FEFF 		bl	assert_failed
 361              	.L21:
 266:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 267:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Disable all interrupts on GFXMMU_CR register */
 268:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->CR &= ~(GFXMMU_CR_B0OIE | GFXMMU_CR_B1OIE | GFXMMU_CR_B2OIE | GFXMMU_CR_B3OI
 362              		.loc 1 268 12 is_stmt 1
 363 0036 7B68     		ldr	r3, [r7, #4]
 364 0038 1B68     		ldr	r3, [r3]
 365              		.loc 1 268 22
 366 003a 1A68     		ldr	r2, [r3]
 367              		.loc 1 268 12
 368 003c 7B68     		ldr	r3, [r7, #4]
 369 003e 1B68     		ldr	r3, [r3]
 370              		.loc 1 268 27
 371 0040 22F01F02 		bic	r2, r2, #31
 372 0044 1A60     		str	r2, [r3]
 269:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                GFXMMU_CR_AMEIE);
 270:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 271:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Call GFXMMU MSP de-init function */
 272:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
 273:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (hgfxmmu->MspDeInitCallback == NULL)
 274:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 275:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       hgfxmmu->MspDeInitCallback = HAL_GFXMMU_MspDeInit;
 276:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 277:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->MspDeInitCallback(hgfxmmu);
 278:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #else
 279:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     HAL_GFXMMU_MspDeInit(hgfxmmu);
 373              		.loc 1 279 5
 374 0046 7868     		ldr	r0, [r7, #4]
 375 0048 FFF7FEFF 		bl	HAL_GFXMMU_MspDeInit
 280:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
 281:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 282:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Set GFXMMU to reset state */
 283:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->State = HAL_GFXMMU_STATE_RESET;
 376              		.loc 1 283 20
 377 004c 7B68     		ldr	r3, [r7, #4]
 378 004e 0022     		movs	r2, #0
 379 0050 83F82820 		strb	r2, [r3, #40]
 380              	.L20:
 284:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 285:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Return function status */
 286:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return status;
 381              		.loc 1 286 10
 382 0054 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 287:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 383              		.loc 1 287 1
 384 0056 1846     		mov	r0, r3
 385 0058 1037     		adds	r7, r7, #16
 386              		.cfi_def_cfa_offset 8
 387 005a BD46     		mov	sp, r7
 388              		.cfi_def_cfa_register 13
 389              		@ sp needed
 390 005c 80BD     		pop	{r7, pc}
 391              	.L24:
 392 005e 00BF     		.align	2
ARM GAS  /tmp/ccvYD7zo.s 			page 13


 393              	.L23:
 394 0060 00000358 		.word	1476591616
 395 0064 00000348 		.word	1208156160
 396 0068 00000000 		.word	.LC0
 397              		.cfi_endproc
 398              	.LFE836:
 400              		.section	.text.HAL_GFXMMU_MspInit,"ax",%progbits
 401              		.align	1
 402              		.weak	HAL_GFXMMU_MspInit
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 407              	HAL_GFXMMU_MspInit:
 408              	.LFB837:
 288:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 289:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 290:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  Initialize the GFXMMU MSP.
 291:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 292:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval None.
 293:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 294:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** __weak void HAL_GFXMMU_MspInit(GFXMMU_HandleTypeDef *hgfxmmu)
 295:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 409              		.loc 1 295 1
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 8
 412              		@ frame_needed = 1, uses_anonymous_args = 0
 413              		@ link register save eliminated.
 414 0000 80B4     		push	{r7}
 415              		.cfi_def_cfa_offset 4
 416              		.cfi_offset 7, -4
 417 0002 83B0     		sub	sp, sp, #12
 418              		.cfi_def_cfa_offset 16
 419 0004 00AF     		add	r7, sp, #0
 420              		.cfi_def_cfa_register 7
 421 0006 7860     		str	r0, [r7, #4]
 296:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Prevent unused argument(s) compilation warning */
 297:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   UNUSED(hgfxmmu);
 298:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 299:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* NOTE : This function should not be modified, when the function is needed,
 300:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****             the HAL_GFXMMU_MspInit could be implemented in the user file.
 301:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****    */
 302:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 422              		.loc 1 302 1
 423 0008 00BF     		nop
 424 000a 0C37     		adds	r7, r7, #12
 425              		.cfi_def_cfa_offset 4
 426 000c BD46     		mov	sp, r7
 427              		.cfi_def_cfa_register 13
 428              		@ sp needed
 429 000e 5DF8047B 		ldr	r7, [sp], #4
 430              		.cfi_restore 7
 431              		.cfi_def_cfa_offset 0
 432 0012 7047     		bx	lr
 433              		.cfi_endproc
 434              	.LFE837:
 436              		.section	.text.HAL_GFXMMU_MspDeInit,"ax",%progbits
 437              		.align	1
ARM GAS  /tmp/ccvYD7zo.s 			page 14


 438              		.weak	HAL_GFXMMU_MspDeInit
 439              		.syntax unified
 440              		.thumb
 441              		.thumb_func
 443              	HAL_GFXMMU_MspDeInit:
 444              	.LFB838:
 303:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 304:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 305:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  De-initialize the GFXMMU MSP.
 306:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 307:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval None.
 308:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 309:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** __weak void HAL_GFXMMU_MspDeInit(GFXMMU_HandleTypeDef *hgfxmmu)
 310:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 445              		.loc 1 310 1
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 8
 448              		@ frame_needed = 1, uses_anonymous_args = 0
 449              		@ link register save eliminated.
 450 0000 80B4     		push	{r7}
 451              		.cfi_def_cfa_offset 4
 452              		.cfi_offset 7, -4
 453 0002 83B0     		sub	sp, sp, #12
 454              		.cfi_def_cfa_offset 16
 455 0004 00AF     		add	r7, sp, #0
 456              		.cfi_def_cfa_register 7
 457 0006 7860     		str	r0, [r7, #4]
 311:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Prevent unused argument(s) compilation warning */
 312:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   UNUSED(hgfxmmu);
 313:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 314:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* NOTE : This function should not be modified, when the function is needed,
 315:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****             the HAL_GFXMMU_MspDeInit could be implemented in the user file.
 316:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****    */
 317:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 458              		.loc 1 317 1
 459 0008 00BF     		nop
 460 000a 0C37     		adds	r7, r7, #12
 461              		.cfi_def_cfa_offset 4
 462 000c BD46     		mov	sp, r7
 463              		.cfi_def_cfa_register 13
 464              		@ sp needed
 465 000e 5DF8047B 		ldr	r7, [sp], #4
 466              		.cfi_restore 7
 467              		.cfi_def_cfa_offset 0
 468 0012 7047     		bx	lr
 469              		.cfi_endproc
 470              	.LFE838:
 472              		.section	.text.HAL_GFXMMU_ConfigLut,"ax",%progbits
 473              		.align	1
 474              		.global	HAL_GFXMMU_ConfigLut
 475              		.syntax unified
 476              		.thumb
 477              		.thumb_func
 479              	HAL_GFXMMU_ConfigLut:
 480              	.LFB839:
 318:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 319:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
ARM GAS  /tmp/ccvYD7zo.s 			page 15


 320:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 321:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  Register a user GFXMMU callback
 322:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *         to be used instead of the weak predefined callback.
 323:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 324:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  CallbackID ID of the callback to be registered.
 325:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *         This parameter can be one of the following values:
 326:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           @arg @ref HAL_GFXMMU_ERROR_CB_ID error callback ID.
 327:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           @arg @ref HAL_GFXMMU_MSPINIT_CB_ID MSP init callback ID.
 328:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           @arg @ref HAL_GFXMMU_MSPDEINIT_CB_ID MSP de-init callback ID.
 329:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  pCallback pointer to the callback function.
 330:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval HAL status.
 331:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 332:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** HAL_StatusTypeDef HAL_GFXMMU_RegisterCallback(GFXMMU_HandleTypeDef        *hgfxmmu,
 333:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                               HAL_GFXMMU_CallbackIDTypeDef CallbackID,
 334:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                               pGFXMMU_CallbackTypeDef      pCallback)
 335:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 336:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 337:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 338:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   if (pCallback == NULL)
 339:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 340:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* update the error code */
 341:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->ErrorCode |= GFXMMU_ERROR_INVALID_CALLBACK;
 342:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* update return status */
 343:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 344:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 345:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else
 346:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 347:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (HAL_GFXMMU_STATE_READY == hgfxmmu->State)
 348:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 349:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       switch (CallbackID)
 350:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       {
 351:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         case HAL_GFXMMU_ERROR_CB_ID :
 352:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           hgfxmmu->ErrorCallback = pCallback;
 353:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           break;
 354:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         case HAL_GFXMMU_MSPINIT_CB_ID :
 355:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           hgfxmmu->MspInitCallback = pCallback;
 356:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           break;
 357:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         case HAL_GFXMMU_MSPDEINIT_CB_ID :
 358:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           hgfxmmu->MspDeInitCallback = pCallback;
 359:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           break;
 360:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         default :
 361:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           /* update the error code */
 362:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           hgfxmmu->ErrorCode |= GFXMMU_ERROR_INVALID_CALLBACK;
 363:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           /* update return status */
 364:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           status = HAL_ERROR;
 365:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           break;
 366:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       }
 367:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 368:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     else if (HAL_GFXMMU_STATE_RESET == hgfxmmu->State)
 369:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 370:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       switch (CallbackID)
 371:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       {
 372:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         case HAL_GFXMMU_MSPINIT_CB_ID :
 373:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           hgfxmmu->MspInitCallback = pCallback;
 374:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           break;
 375:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         case HAL_GFXMMU_MSPDEINIT_CB_ID :
 376:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           hgfxmmu->MspDeInitCallback = pCallback;
ARM GAS  /tmp/ccvYD7zo.s 			page 16


 377:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           break;
 378:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         default :
 379:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           /* update the error code */
 380:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           hgfxmmu->ErrorCode |= GFXMMU_ERROR_INVALID_CALLBACK;
 381:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           /* update return status */
 382:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           status = HAL_ERROR;
 383:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           break;
 384:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       }
 385:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 386:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     else
 387:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 388:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       /* update the error code */
 389:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       hgfxmmu->ErrorCode |= GFXMMU_ERROR_INVALID_CALLBACK;
 390:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       /* update return status */
 391:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       status = HAL_ERROR;
 392:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 393:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 394:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return status;
 395:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 396:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 397:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 398:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  Unregister a user GFXMMU callback.
 399:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *         GFXMMU callback is redirected to the weak predefined callback.
 400:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 401:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  CallbackID ID of the callback to be unregistered.
 402:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *         This parameter can be one of the following values:
 403:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           @arg @ref HAL_GFXMMU_ERROR_CB_ID error callback ID.
 404:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           @arg @ref HAL_GFXMMU_MSPINIT_CB_ID MSP init callback ID.
 405:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           @arg @ref HAL_GFXMMU_MSPDEINIT_CB_ID MSP de-init callback ID.
 406:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval HAL status.
 407:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 408:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** HAL_StatusTypeDef HAL_GFXMMU_UnRegisterCallback(GFXMMU_HandleTypeDef        *hgfxmmu,
 409:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                                 HAL_GFXMMU_CallbackIDTypeDef CallbackID)
 410:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 411:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 412:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 413:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   if (HAL_GFXMMU_STATE_READY == hgfxmmu->State)
 414:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 415:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     switch (CallbackID)
 416:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 417:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       case HAL_GFXMMU_ERROR_CB_ID :
 418:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         hgfxmmu->ErrorCallback = HAL_GFXMMU_ErrorCallback;
 419:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         break;
 420:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       case HAL_GFXMMU_MSPINIT_CB_ID :
 421:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         hgfxmmu->MspInitCallback = HAL_GFXMMU_MspInit;
 422:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         break;
 423:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       case HAL_GFXMMU_MSPDEINIT_CB_ID :
 424:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         hgfxmmu->MspDeInitCallback = HAL_GFXMMU_MspDeInit;
 425:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         break;
 426:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       default :
 427:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         /* update the error code */
 428:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         hgfxmmu->ErrorCode |= GFXMMU_ERROR_INVALID_CALLBACK;
 429:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         /* update return status */
 430:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         status = HAL_ERROR;
 431:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         break;
 432:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 433:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
ARM GAS  /tmp/ccvYD7zo.s 			page 17


 434:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else if (HAL_GFXMMU_STATE_RESET == hgfxmmu->State)
 435:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 436:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     switch (CallbackID)
 437:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 438:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       case HAL_GFXMMU_MSPINIT_CB_ID :
 439:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         hgfxmmu->MspInitCallback = HAL_GFXMMU_MspInit;
 440:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         break;
 441:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       case HAL_GFXMMU_MSPDEINIT_CB_ID :
 442:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         hgfxmmu->MspDeInitCallback = HAL_GFXMMU_MspDeInit;
 443:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         break;
 444:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       default :
 445:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         /* update the error code */
 446:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         hgfxmmu->ErrorCode |= GFXMMU_ERROR_INVALID_CALLBACK;
 447:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         /* update return status */
 448:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         status = HAL_ERROR;
 449:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         break;
 450:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 451:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 452:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else
 453:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 454:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* update the error code */
 455:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->ErrorCode |= GFXMMU_ERROR_INVALID_CALLBACK;
 456:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* update return status */
 457:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 458:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 459:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return status;
 460:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 461:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS */
 462:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 463:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 464:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @}
 465:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 466:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 467:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /** @defgroup GFXMMU_Exported_Functions_Group2 Operations functions
 468:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *  @brief    GFXMMU operation functions
 469:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *
 470:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** @verbatim
 471:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ==============================================================================
 472:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                       ##### Operation functions #####
 473:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ==============================================================================
 474:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]  This section provides functions allowing to:
 475:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) Configure LUT.
 476:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) Modify physical buffer addresses.
 477:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) Configure packing.
 478:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) Manage error.
 479:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** @endverbatim
 480:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @{
 481:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 482:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 483:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 484:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  This function allows to copy LUT from flash to look up RAM.
 485:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 486:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  FirstLine First line enabled on LUT.
 487:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *         This parameter must be a number between Min_Data = 0 and Max_Data = 1023.
 488:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  LinesNumber Number of lines enabled on LUT.
 489:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *         This parameter must be a number between Min_Data = 1 and Max_Data = 1024.
 490:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  Address Start address of LUT in flash.
ARM GAS  /tmp/ccvYD7zo.s 			page 18


 491:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval HAL status.
 492:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 493:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** HAL_StatusTypeDef HAL_GFXMMU_ConfigLut(const GFXMMU_HandleTypeDef *hgfxmmu,
 494:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                        uint32_t FirstLine,
 495:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                        uint32_t LinesNumber,
 496:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                        uint32_t Address)
 497:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 481              		.loc 1 497 1
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 40
 484              		@ frame_needed = 1, uses_anonymous_args = 0
 485 0000 80B5     		push	{r7, lr}
 486              		.cfi_def_cfa_offset 8
 487              		.cfi_offset 7, -8
 488              		.cfi_offset 14, -4
 489 0002 8AB0     		sub	sp, sp, #40
 490              		.cfi_def_cfa_offset 48
 491 0004 00AF     		add	r7, sp, #0
 492              		.cfi_def_cfa_register 7
 493 0006 F860     		str	r0, [r7, #12]
 494 0008 B960     		str	r1, [r7, #8]
 495 000a 7A60     		str	r2, [r7, #4]
 496 000c 3B60     		str	r3, [r7]
 498:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 497              		.loc 1 498 21
 498 000e 0023     		movs	r3, #0
 499 0010 87F82730 		strb	r3, [r7, #39]
 499:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 500:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check parameters */
 501:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
 500              		.loc 1 501 3
 501 0014 FB68     		ldr	r3, [r7, #12]
 502 0016 1B68     		ldr	r3, [r3]
 503 0018 3A4A     		ldr	r2, .L39
 504 001a 9342     		cmp	r3, r2
 505 001c 09D0     		beq	.L28
 506              		.loc 1 501 3 is_stmt 0 discriminator 1
 507 001e FB68     		ldr	r3, [r7, #12]
 508 0020 1B68     		ldr	r3, [r3]
 509 0022 394A     		ldr	r2, .L39+4
 510 0024 9342     		cmp	r3, r2
 511 0026 04D0     		beq	.L28
 512              		.loc 1 501 3 discriminator 2
 513 0028 40F2F511 		movw	r1, #501
 514 002c 3748     		ldr	r0, .L39+8
 515 002e FFF7FEFF 		bl	assert_failed
 516              	.L28:
 502:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_LUT_LINE(FirstLine));
 517              		.loc 1 502 3 is_stmt 1
 518 0032 BB68     		ldr	r3, [r7, #8]
 519 0034 B3F5806F 		cmp	r3, #1024
 520 0038 04D3     		bcc	.L29
 521              		.loc 1 502 3 is_stmt 0 discriminator 1
 522 003a 4FF4FB71 		mov	r1, #502
 523 003e 3348     		ldr	r0, .L39+8
 524 0040 FFF7FEFF 		bl	assert_failed
 525              	.L29:
ARM GAS  /tmp/ccvYD7zo.s 			page 19


 503:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_LUT_LINES_NUMBER(LinesNumber));
 526              		.loc 1 503 3 is_stmt 1
 527 0044 7B68     		ldr	r3, [r7, #4]
 528 0046 002B     		cmp	r3, #0
 529 0048 03D0     		beq	.L30
 530              		.loc 1 503 3 is_stmt 0 discriminator 2
 531 004a 7B68     		ldr	r3, [r7, #4]
 532 004c B3F5806F 		cmp	r3, #1024
 533 0050 04D9     		bls	.L31
 534              	.L30:
 535              		.loc 1 503 3 discriminator 3
 536 0052 40F2F711 		movw	r1, #503
 537 0056 2D48     		ldr	r0, .L39+8
 538 0058 FFF7FEFF 		bl	assert_failed
 539              	.L31:
 504:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 505:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check GFXMMU state and coherent parameters */
 506:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   if ((hgfxmmu->State != HAL_GFXMMU_STATE_READY) || ((FirstLine + LinesNumber) > 1024U))
 540              		.loc 1 506 15 is_stmt 1
 541 005c FB68     		ldr	r3, [r7, #12]
 542 005e 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 543              		.loc 1 506 6
 544 0062 012B     		cmp	r3, #1
 545 0064 05D1     		bne	.L32
 546              		.loc 1 506 65 discriminator 1
 547 0066 BA68     		ldr	r2, [r7, #8]
 548 0068 7B68     		ldr	r3, [r7, #4]
 549 006a 1344     		add	r3, r3, r2
 550              		.loc 1 506 50 discriminator 1
 551 006c B3F5806F 		cmp	r3, #1024
 552 0070 03D9     		bls	.L33
 553              	.L32:
 507:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 508:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 554              		.loc 1 508 12
 555 0072 0123     		movs	r3, #1
 556 0074 87F82730 		strb	r3, [r7, #39]
 557 0078 3DE0     		b	.L34
 558              	.L33:
 509:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 510:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check address translation status */
 511:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else if ((hgfxmmu->Instance->CR & GFXMMU_CR_ATE) == 0U)
 559              		.loc 1 511 20
 560 007a FB68     		ldr	r3, [r7, #12]
 561 007c 1B68     		ldr	r3, [r3]
 562              		.loc 1 511 30
 563 007e 1B68     		ldr	r3, [r3]
 564              		.loc 1 511 35
 565 0080 03F40043 		and	r3, r3, #32768
 566              		.loc 1 511 11
 567 0084 002B     		cmp	r3, #0
 568 0086 03D1     		bne	.L35
 512:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 513:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 569              		.loc 1 513 12
 570 0088 0123     		movs	r3, #1
 571 008a 87F82730 		strb	r3, [r7, #39]
ARM GAS  /tmp/ccvYD7zo.s 			page 20


 572 008e 32E0     		b	.L34
 573              	.L35:
 574              	.LBB6:
 514:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 515:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else
 516:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 517:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     uint32_t current_address;
 518:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     uint32_t current_line;
 519:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     uint32_t lutxl_address;
 520:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     uint32_t lutxh_address;
 521:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 522:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Initialize local variables */
 523:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     current_address = Address;
 575              		.loc 1 523 21
 576 0090 3B68     		ldr	r3, [r7]
 577 0092 3B62     		str	r3, [r7, #32]
 524:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     current_line    = 0U;
 578              		.loc 1 524 21
 579 0094 0023     		movs	r3, #0
 580 0096 FB61     		str	r3, [r7, #28]
 525:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * FirstLine]);
 581              		.loc 1 525 43
 582 0098 FB68     		ldr	r3, [r7, #12]
 583 009a 1A68     		ldr	r2, [r3]
 584              		.loc 1 525 62
 585 009c BB68     		ldr	r3, [r7, #8]
 586 009e 5B00     		lsls	r3, r3, #1
 587              		.loc 1 525 34
 588 00a0 03F58063 		add	r3, r3, #1024
 589 00a4 9B00     		lsls	r3, r3, #2
 590 00a6 1344     		add	r3, r3, r2
 591              		.loc 1 525 21
 592 00a8 BB61     		str	r3, [r7, #24]
 526:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     lutxh_address   = (uint32_t) &(hgfxmmu->Instance->LUT[(2U * FirstLine) + 1U]);
 593              		.loc 1 526 43
 594 00aa FB68     		ldr	r3, [r7, #12]
 595 00ac 1A68     		ldr	r2, [r3]
 596              		.loc 1 526 63
 597 00ae BB68     		ldr	r3, [r7, #8]
 598 00b0 5B00     		lsls	r3, r3, #1
 599              		.loc 1 526 76
 600 00b2 0133     		adds	r3, r3, #1
 601              		.loc 1 526 34
 602 00b4 03F58063 		add	r3, r3, #1024
 603 00b8 9B00     		lsls	r3, r3, #2
 604 00ba 1344     		add	r3, r3, r2
 605              		.loc 1 526 21
 606 00bc 7B61     		str	r3, [r7, #20]
 527:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 528:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Copy LUT from flash to look up RAM */
 529:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     while (current_line < LinesNumber)
 607              		.loc 1 529 11
 608 00be 16E0     		b	.L36
 609              	.L37:
 530:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 531:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxl_address) = *((uint32_t *)current_address);
 610              		.loc 1 531 40
ARM GAS  /tmp/ccvYD7zo.s 			page 21


 611 00c0 3A6A     		ldr	r2, [r7, #32]
 612              		.loc 1 531 9
 613 00c2 BB69     		ldr	r3, [r7, #24]
 614              		.loc 1 531 38
 615 00c4 1268     		ldr	r2, [r2]
 616              		.loc 1 531 36
 617 00c6 1A60     		str	r2, [r3]
 532:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       current_address += 4U;
 618              		.loc 1 532 23
 619 00c8 3B6A     		ldr	r3, [r7, #32]
 620 00ca 0433     		adds	r3, r3, #4
 621 00cc 3B62     		str	r3, [r7, #32]
 533:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxh_address) = *((uint32_t *)current_address);
 622              		.loc 1 533 40
 623 00ce 3A6A     		ldr	r2, [r7, #32]
 624              		.loc 1 533 9
 625 00d0 7B69     		ldr	r3, [r7, #20]
 626              		.loc 1 533 38
 627 00d2 1268     		ldr	r2, [r2]
 628              		.loc 1 533 36
 629 00d4 1A60     		str	r2, [r3]
 534:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       current_address += 4U;
 630              		.loc 1 534 23
 631 00d6 3B6A     		ldr	r3, [r7, #32]
 632 00d8 0433     		adds	r3, r3, #4
 633 00da 3B62     		str	r3, [r7, #32]
 535:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       lutxl_address += 8U;
 634              		.loc 1 535 21
 635 00dc BB69     		ldr	r3, [r7, #24]
 636 00de 0833     		adds	r3, r3, #8
 637 00e0 BB61     		str	r3, [r7, #24]
 536:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       lutxh_address += 8U;
 638              		.loc 1 536 21
 639 00e2 7B69     		ldr	r3, [r7, #20]
 640 00e4 0833     		adds	r3, r3, #8
 641 00e6 7B61     		str	r3, [r7, #20]
 537:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       current_line++;
 642              		.loc 1 537 19
 643 00e8 FB69     		ldr	r3, [r7, #28]
 644 00ea 0133     		adds	r3, r3, #1
 645 00ec FB61     		str	r3, [r7, #28]
 646              	.L36:
 529:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 647              		.loc 1 529 25
 648 00ee FA69     		ldr	r2, [r7, #28]
 649 00f0 7B68     		ldr	r3, [r7, #4]
 650 00f2 9A42     		cmp	r2, r3
 651 00f4 E4D3     		bcc	.L37
 652              	.L34:
 653              	.LBE6:
 538:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 539:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 540:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Return function status */
 541:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return status;
 654              		.loc 1 541 10
 655 00f6 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 542:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
ARM GAS  /tmp/ccvYD7zo.s 			page 22


 656              		.loc 1 542 1
 657 00fa 1846     		mov	r0, r3
 658 00fc 2837     		adds	r7, r7, #40
 659              		.cfi_def_cfa_offset 8
 660 00fe BD46     		mov	sp, r7
 661              		.cfi_def_cfa_register 13
 662              		@ sp needed
 663 0100 80BD     		pop	{r7, pc}
 664              	.L40:
 665 0102 00BF     		.align	2
 666              	.L39:
 667 0104 00000358 		.word	1476591616
 668 0108 00000348 		.word	1208156160
 669 010c 00000000 		.word	.LC0
 670              		.cfi_endproc
 671              	.LFE839:
 673              		.section	.text.HAL_GFXMMU_DisableLutLines,"ax",%progbits
 674              		.align	1
 675              		.global	HAL_GFXMMU_DisableLutLines
 676              		.syntax unified
 677              		.thumb
 678              		.thumb_func
 680              	HAL_GFXMMU_DisableLutLines:
 681              	.LFB840:
 543:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 544:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 545:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  This function allows to disable a range of LUT lines.
 546:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 547:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  FirstLine First line to disable on LUT.
 548:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *         This parameter must be a number between Min_Data = 0 and Max_Data = 1023.
 549:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  LinesNumber Number of lines to disable on LUT.
 550:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *         This parameter must be a number between Min_Data = 1 and Max_Data = 1024.
 551:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval HAL status.
 552:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 553:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** HAL_StatusTypeDef HAL_GFXMMU_DisableLutLines(const GFXMMU_HandleTypeDef *hgfxmmu,
 554:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                              uint32_t FirstLine,
 555:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                              uint32_t LinesNumber)
 556:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 682              		.loc 1 556 1
 683              		.cfi_startproc
 684              		@ args = 0, pretend = 0, frame = 32
 685              		@ frame_needed = 1, uses_anonymous_args = 0
 686 0000 80B5     		push	{r7, lr}
 687              		.cfi_def_cfa_offset 8
 688              		.cfi_offset 7, -8
 689              		.cfi_offset 14, -4
 690 0002 88B0     		sub	sp, sp, #32
 691              		.cfi_def_cfa_offset 40
 692 0004 00AF     		add	r7, sp, #0
 693              		.cfi_def_cfa_register 7
 694 0006 F860     		str	r0, [r7, #12]
 695 0008 B960     		str	r1, [r7, #8]
 696 000a 7A60     		str	r2, [r7, #4]
 557:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 697              		.loc 1 557 21
 698 000c 0023     		movs	r3, #0
 699 000e FB77     		strb	r3, [r7, #31]
ARM GAS  /tmp/ccvYD7zo.s 			page 23


 558:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 559:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check parameters */
 560:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
 700              		.loc 1 560 3
 701 0010 FB68     		ldr	r3, [r7, #12]
 702 0012 1B68     		ldr	r3, [r3]
 703 0014 334A     		ldr	r2, .L53
 704 0016 9342     		cmp	r3, r2
 705 0018 09D0     		beq	.L42
 706              		.loc 1 560 3 is_stmt 0 discriminator 1
 707 001a FB68     		ldr	r3, [r7, #12]
 708 001c 1B68     		ldr	r3, [r3]
 709 001e 324A     		ldr	r2, .L53+4
 710 0020 9342     		cmp	r3, r2
 711 0022 04D0     		beq	.L42
 712              		.loc 1 560 3 discriminator 2
 713 0024 4FF40C71 		mov	r1, #560
 714 0028 3048     		ldr	r0, .L53+8
 715 002a FFF7FEFF 		bl	assert_failed
 716              	.L42:
 561:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_LUT_LINE(FirstLine));
 717              		.loc 1 561 3 is_stmt 1
 718 002e BB68     		ldr	r3, [r7, #8]
 719 0030 B3F5806F 		cmp	r3, #1024
 720 0034 04D3     		bcc	.L43
 721              		.loc 1 561 3 is_stmt 0 discriminator 1
 722 0036 40F23121 		movw	r1, #561
 723 003a 2C48     		ldr	r0, .L53+8
 724 003c FFF7FEFF 		bl	assert_failed
 725              	.L43:
 562:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_LUT_LINES_NUMBER(LinesNumber));
 726              		.loc 1 562 3 is_stmt 1
 727 0040 7B68     		ldr	r3, [r7, #4]
 728 0042 002B     		cmp	r3, #0
 729 0044 03D0     		beq	.L44
 730              		.loc 1 562 3 is_stmt 0 discriminator 2
 731 0046 7B68     		ldr	r3, [r7, #4]
 732 0048 B3F5806F 		cmp	r3, #1024
 733 004c 04D9     		bls	.L45
 734              	.L44:
 735              		.loc 1 562 3 discriminator 3
 736 004e 40F23221 		movw	r1, #562
 737 0052 2648     		ldr	r0, .L53+8
 738 0054 FFF7FEFF 		bl	assert_failed
 739              	.L45:
 563:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 564:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check GFXMMU state and coherent parameters */
 565:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   if ((hgfxmmu->State != HAL_GFXMMU_STATE_READY) || ((FirstLine + LinesNumber) > 1024U))
 740              		.loc 1 565 15 is_stmt 1
 741 0058 FB68     		ldr	r3, [r7, #12]
 742 005a 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 743              		.loc 1 565 6
 744 005e 012B     		cmp	r3, #1
 745 0060 05D1     		bne	.L46
 746              		.loc 1 565 65 discriminator 1
 747 0062 BA68     		ldr	r2, [r7, #8]
 748 0064 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccvYD7zo.s 			page 24


 749 0066 1344     		add	r3, r3, r2
 750              		.loc 1 565 50 discriminator 1
 751 0068 B3F5806F 		cmp	r3, #1024
 752 006c 02D9     		bls	.L47
 753              	.L46:
 566:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 567:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 754              		.loc 1 567 12
 755 006e 0123     		movs	r3, #1
 756 0070 FB77     		strb	r3, [r7, #31]
 757 0072 32E0     		b	.L48
 758              	.L47:
 568:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 569:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check address translation status */
 570:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else if ((hgfxmmu->Instance->CR & GFXMMU_CR_ATE) == 0U)
 759              		.loc 1 570 20
 760 0074 FB68     		ldr	r3, [r7, #12]
 761 0076 1B68     		ldr	r3, [r3]
 762              		.loc 1 570 30
 763 0078 1B68     		ldr	r3, [r3]
 764              		.loc 1 570 35
 765 007a 03F40043 		and	r3, r3, #32768
 766              		.loc 1 570 11
 767 007e 002B     		cmp	r3, #0
 768 0080 02D1     		bne	.L49
 571:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 572:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 769              		.loc 1 572 12
 770 0082 0123     		movs	r3, #1
 771 0084 FB77     		strb	r3, [r7, #31]
 772 0086 28E0     		b	.L48
 773              	.L49:
 774              	.LBB7:
 573:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 574:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else
 575:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 576:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     uint32_t current_line;
 577:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     uint32_t lutxl_address;
 578:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     uint32_t lutxh_address;
 579:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 580:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Initialize local variables */
 581:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     current_line    = 0U;
 775              		.loc 1 581 21
 776 0088 0023     		movs	r3, #0
 777 008a BB61     		str	r3, [r7, #24]
 582:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * FirstLine]);
 778              		.loc 1 582 43
 779 008c FB68     		ldr	r3, [r7, #12]
 780 008e 1A68     		ldr	r2, [r3]
 781              		.loc 1 582 62
 782 0090 BB68     		ldr	r3, [r7, #8]
 783 0092 5B00     		lsls	r3, r3, #1
 784              		.loc 1 582 34
 785 0094 03F58063 		add	r3, r3, #1024
 786 0098 9B00     		lsls	r3, r3, #2
 787 009a 1344     		add	r3, r3, r2
 788              		.loc 1 582 21
ARM GAS  /tmp/ccvYD7zo.s 			page 25


 789 009c 7B61     		str	r3, [r7, #20]
 583:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     lutxh_address   = (uint32_t) &(hgfxmmu->Instance->LUT[(2U * FirstLine) + 1U]);
 790              		.loc 1 583 43
 791 009e FB68     		ldr	r3, [r7, #12]
 792 00a0 1A68     		ldr	r2, [r3]
 793              		.loc 1 583 63
 794 00a2 BB68     		ldr	r3, [r7, #8]
 795 00a4 5B00     		lsls	r3, r3, #1
 796              		.loc 1 583 76
 797 00a6 0133     		adds	r3, r3, #1
 798              		.loc 1 583 34
 799 00a8 03F58063 		add	r3, r3, #1024
 800 00ac 9B00     		lsls	r3, r3, #2
 801 00ae 1344     		add	r3, r3, r2
 802              		.loc 1 583 21
 803 00b0 3B61     		str	r3, [r7, #16]
 584:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 585:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Disable LUT lines */
 586:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     while (current_line < LinesNumber)
 804              		.loc 1 586 11
 805 00b2 0EE0     		b	.L50
 806              	.L51:
 587:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 588:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxl_address) = 0U;
 807              		.loc 1 588 9
 808 00b4 7B69     		ldr	r3, [r7, #20]
 809              		.loc 1 588 36
 810 00b6 0022     		movs	r2, #0
 811 00b8 1A60     		str	r2, [r3]
 589:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxh_address) = 0U;
 812              		.loc 1 589 9
 813 00ba 3B69     		ldr	r3, [r7, #16]
 814              		.loc 1 589 36
 815 00bc 0022     		movs	r2, #0
 816 00be 1A60     		str	r2, [r3]
 590:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       lutxl_address += 8U;
 817              		.loc 1 590 21
 818 00c0 7B69     		ldr	r3, [r7, #20]
 819 00c2 0833     		adds	r3, r3, #8
 820 00c4 7B61     		str	r3, [r7, #20]
 591:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       lutxh_address += 8U;
 821              		.loc 1 591 21
 822 00c6 3B69     		ldr	r3, [r7, #16]
 823 00c8 0833     		adds	r3, r3, #8
 824 00ca 3B61     		str	r3, [r7, #16]
 592:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       current_line++;
 825              		.loc 1 592 19
 826 00cc BB69     		ldr	r3, [r7, #24]
 827 00ce 0133     		adds	r3, r3, #1
 828 00d0 BB61     		str	r3, [r7, #24]
 829              	.L50:
 586:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 830              		.loc 1 586 25
 831 00d2 BA69     		ldr	r2, [r7, #24]
 832 00d4 7B68     		ldr	r3, [r7, #4]
 833 00d6 9A42     		cmp	r2, r3
 834 00d8 ECD3     		bcc	.L51
ARM GAS  /tmp/ccvYD7zo.s 			page 26


 835              	.L48:
 836              	.LBE7:
 593:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 594:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 595:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Return function status */
 596:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return status;
 837              		.loc 1 596 10
 838 00da FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 597:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 839              		.loc 1 597 1
 840 00dc 1846     		mov	r0, r3
 841 00de 2037     		adds	r7, r7, #32
 842              		.cfi_def_cfa_offset 8
 843 00e0 BD46     		mov	sp, r7
 844              		.cfi_def_cfa_register 13
 845              		@ sp needed
 846 00e2 80BD     		pop	{r7, pc}
 847              	.L54:
 848              		.align	2
 849              	.L53:
 850 00e4 00000358 		.word	1476591616
 851 00e8 00000348 		.word	1208156160
 852 00ec 00000000 		.word	.LC0
 853              		.cfi_endproc
 854              	.LFE840:
 856              		.section	.text.HAL_GFXMMU_ConfigLutLine,"ax",%progbits
 857              		.align	1
 858              		.global	HAL_GFXMMU_ConfigLutLine
 859              		.syntax unified
 860              		.thumb
 861              		.thumb_func
 863              	HAL_GFXMMU_ConfigLutLine:
 864              	.LFB841:
 598:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 599:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 600:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  This function allows to configure one line of LUT.
 601:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 602:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  lutLine LUT line parameters.
 603:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval HAL status.
 604:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 605:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** HAL_StatusTypeDef HAL_GFXMMU_ConfigLutLine(const GFXMMU_HandleTypeDef *hgfxmmu, const GFXMMU_LutLin
 606:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 865              		.loc 1 606 1
 866              		.cfi_startproc
 867              		@ args = 0, pretend = 0, frame = 24
 868              		@ frame_needed = 1, uses_anonymous_args = 0
 869 0000 80B5     		push	{r7, lr}
 870              		.cfi_def_cfa_offset 8
 871              		.cfi_offset 7, -8
 872              		.cfi_offset 14, -4
 873 0002 86B0     		sub	sp, sp, #24
 874              		.cfi_def_cfa_offset 32
 875 0004 00AF     		add	r7, sp, #0
 876              		.cfi_def_cfa_register 7
 877 0006 7860     		str	r0, [r7, #4]
 878 0008 3960     		str	r1, [r7]
 607:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
ARM GAS  /tmp/ccvYD7zo.s 			page 27


 879              		.loc 1 607 21
 880 000a 0023     		movs	r3, #0
 881 000c FB75     		strb	r3, [r7, #23]
 608:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 609:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check parameters */
 610:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
 882              		.loc 1 610 3
 883 000e 7B68     		ldr	r3, [r7, #4]
 884 0010 1B68     		ldr	r3, [r3]
 885 0012 464A     		ldr	r2, .L68
 886 0014 9342     		cmp	r3, r2
 887 0016 09D0     		beq	.L56
 888              		.loc 1 610 3 is_stmt 0 discriminator 1
 889 0018 7B68     		ldr	r3, [r7, #4]
 890 001a 1B68     		ldr	r3, [r3]
 891 001c 444A     		ldr	r2, .L68+4
 892 001e 9342     		cmp	r3, r2
 893 0020 04D0     		beq	.L56
 894              		.loc 1 610 3 discriminator 2
 895 0022 40F26221 		movw	r1, #610
 896 0026 4348     		ldr	r0, .L68+8
 897 0028 FFF7FEFF 		bl	assert_failed
 898              	.L56:
 611:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_LUT_LINE(lutLine->LineNumber));
 899              		.loc 1 611 3 is_stmt 1
 900 002c 3B68     		ldr	r3, [r7]
 901 002e 1B68     		ldr	r3, [r3]
 902 0030 B3F5806F 		cmp	r3, #1024
 903 0034 04D3     		bcc	.L57
 904              		.loc 1 611 3 is_stmt 0 discriminator 1
 905 0036 40F26321 		movw	r1, #611
 906 003a 3E48     		ldr	r0, .L68+8
 907 003c FFF7FEFF 		bl	assert_failed
 908              	.L57:
 612:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_LUT_LINE_STATUS(lutLine->LineStatus));
 909              		.loc 1 612 3 is_stmt 1
 910 0040 3B68     		ldr	r3, [r7]
 911 0042 5B68     		ldr	r3, [r3, #4]
 912 0044 002B     		cmp	r3, #0
 913 0046 08D0     		beq	.L58
 914              		.loc 1 612 3 is_stmt 0 discriminator 1
 915 0048 3B68     		ldr	r3, [r7]
 916 004a 5B68     		ldr	r3, [r3, #4]
 917 004c 012B     		cmp	r3, #1
 918 004e 04D0     		beq	.L58
 919              		.loc 1 612 3 discriminator 2
 920 0050 4FF41971 		mov	r1, #612
 921 0054 3748     		ldr	r0, .L68+8
 922 0056 FFF7FEFF 		bl	assert_failed
 923              	.L58:
 613:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_LUT_BLOCK(lutLine->FirstVisibleBlock));
 924              		.loc 1 613 3 is_stmt 1
 925 005a 3B68     		ldr	r3, [r7]
 926 005c 9B68     		ldr	r3, [r3, #8]
 927 005e FF2B     		cmp	r3, #255
 928 0060 04D9     		bls	.L59
 929              		.loc 1 613 3 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccvYD7zo.s 			page 28


 930 0062 40F26521 		movw	r1, #613
 931 0066 3348     		ldr	r0, .L68+8
 932 0068 FFF7FEFF 		bl	assert_failed
 933              	.L59:
 614:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_LUT_BLOCK(lutLine->LastVisibleBlock));
 934              		.loc 1 614 3 is_stmt 1
 935 006c 3B68     		ldr	r3, [r7]
 936 006e DB68     		ldr	r3, [r3, #12]
 937 0070 FF2B     		cmp	r3, #255
 938 0072 04D9     		bls	.L60
 939              		.loc 1 614 3 is_stmt 0 discriminator 1
 940 0074 40F26621 		movw	r1, #614
 941 0078 2E48     		ldr	r0, .L68+8
 942 007a FFF7FEFF 		bl	assert_failed
 943              	.L60:
 615:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_LUT_LINE_OFFSET(lutLine->LineOffset));
 944              		.loc 1 615 3 is_stmt 1
 945 007e 3B68     		ldr	r3, [r7]
 946 0080 1B69     		ldr	r3, [r3, #16]
 947 0082 13F1FF0F 		cmn	r3, #255
 948 0086 04DB     		blt	.L61
 949              		.loc 1 615 3 is_stmt 0 discriminator 2
 950 0088 3B68     		ldr	r3, [r7]
 951 008a 1B69     		ldr	r3, [r3, #16]
 952 008c 2A4A     		ldr	r2, .L68+12
 953 008e 9342     		cmp	r3, r2
 954 0090 04DD     		ble	.L62
 955              	.L61:
 956              		.loc 1 615 3 discriminator 3
 957 0092 40F26721 		movw	r1, #615
 958 0096 2748     		ldr	r0, .L68+8
 959 0098 FFF7FEFF 		bl	assert_failed
 960              	.L62:
 616:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 617:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check GFXMMU state */
 618:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   if (hgfxmmu->State != HAL_GFXMMU_STATE_READY)
 961              		.loc 1 618 14 is_stmt 1
 962 009c 7B68     		ldr	r3, [r7, #4]
 963 009e 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 964              		.loc 1 618 6
 965 00a2 012B     		cmp	r3, #1
 966 00a4 02D0     		beq	.L63
 619:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 620:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 967              		.loc 1 620 12
 968 00a6 0123     		movs	r3, #1
 969 00a8 FB75     		strb	r3, [r7, #23]
 970 00aa 3AE0     		b	.L64
 971              	.L63:
 621:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 622:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check address translation status */
 623:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else if ((hgfxmmu->Instance->CR & GFXMMU_CR_ATE) == 0U)
 972              		.loc 1 623 20
 973 00ac 7B68     		ldr	r3, [r7, #4]
 974 00ae 1B68     		ldr	r3, [r3]
 975              		.loc 1 623 30
 976 00b0 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccvYD7zo.s 			page 29


 977              		.loc 1 623 35
 978 00b2 03F40043 		and	r3, r3, #32768
 979              		.loc 1 623 11
 980 00b6 002B     		cmp	r3, #0
 981 00b8 02D1     		bne	.L65
 624:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 625:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 982              		.loc 1 625 12
 983 00ba 0123     		movs	r3, #1
 984 00bc FB75     		strb	r3, [r7, #23]
 985 00be 30E0     		b	.L64
 986              	.L65:
 987              	.LBB8:
 626:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 627:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else
 628:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 629:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     uint32_t lutxl_address;
 630:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     uint32_t lutxh_address;
 631:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 632:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Initialize local variables */
 633:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * lutLine->LineNumber]);
 988              		.loc 1 633 43
 989 00c0 7B68     		ldr	r3, [r7, #4]
 990 00c2 1A68     		ldr	r2, [r3]
 991              		.loc 1 633 71
 992 00c4 3B68     		ldr	r3, [r7]
 993 00c6 1B68     		ldr	r3, [r3]
 994              		.loc 1 633 62
 995 00c8 5B00     		lsls	r3, r3, #1
 996              		.loc 1 633 34
 997 00ca 03F58063 		add	r3, r3, #1024
 998 00ce 9B00     		lsls	r3, r3, #2
 999 00d0 1344     		add	r3, r3, r2
 1000              		.loc 1 633 21
 1001 00d2 3B61     		str	r3, [r7, #16]
 634:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     lutxh_address   = (uint32_t) &(hgfxmmu->Instance->LUT[(2U * lutLine->LineNumber) + 1U]);
 1002              		.loc 1 634 43
 1003 00d4 7B68     		ldr	r3, [r7, #4]
 1004 00d6 1A68     		ldr	r2, [r3]
 1005              		.loc 1 634 72
 1006 00d8 3B68     		ldr	r3, [r7]
 1007 00da 1B68     		ldr	r3, [r3]
 1008              		.loc 1 634 63
 1009 00dc 5B00     		lsls	r3, r3, #1
 1010              		.loc 1 634 86
 1011 00de 0133     		adds	r3, r3, #1
 1012              		.loc 1 634 34
 1013 00e0 03F58063 		add	r3, r3, #1024
 1014 00e4 9B00     		lsls	r3, r3, #2
 1015 00e6 1344     		add	r3, r3, r2
 1016              		.loc 1 634 21
 1017 00e8 FB60     		str	r3, [r7, #12]
 635:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 636:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Configure LUT line */
 637:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (lutLine->LineStatus == GFXMMU_LUT_LINE_ENABLE)
 1018              		.loc 1 637 16
 1019 00ea 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccvYD7zo.s 			page 30


 1020 00ec 5B68     		ldr	r3, [r3, #4]
 1021              		.loc 1 637 8
 1022 00ee 012B     		cmp	r3, #1
 1023 00f0 11D1     		bne	.L66
 638:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 639:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       /* Enable and configure LUT line */
 640:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxl_address) = (lutLine->LineStatus |
 1024              		.loc 1 640 46
 1025 00f2 3B68     		ldr	r3, [r7]
 1026 00f4 5A68     		ldr	r2, [r3, #4]
 641:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                       (lutLine->FirstVisibleBlock << GFXMMU_LUTXL_FVB_OFFSET) |
 1027              		.loc 1 641 47
 1028 00f6 3B68     		ldr	r3, [r7]
 1029 00f8 9B68     		ldr	r3, [r3, #8]
 1030              		.loc 1 641 67
 1031 00fa 1B02     		lsls	r3, r3, #8
 640:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                       (lutLine->FirstVisibleBlock << GFXMMU_LUTXL_FVB_OFFSET) |
 1032              		.loc 1 640 59
 1033 00fc 42EA0301 		orr	r1, r2, r3
 642:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                       (lutLine->LastVisibleBlock << GFXMMU_LUTXL_LVB_OFFSET));
 1034              		.loc 1 642 47
 1035 0100 3B68     		ldr	r3, [r7]
 1036 0102 DB68     		ldr	r3, [r3, #12]
 1037              		.loc 1 642 66
 1038 0104 1A04     		lsls	r2, r3, #16
 640:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                       (lutLine->FirstVisibleBlock << GFXMMU_LUTXL_FVB_OFFSET) |
 1039              		.loc 1 640 9
 1040 0106 3B69     		ldr	r3, [r7, #16]
 641:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                       (lutLine->FirstVisibleBlock << GFXMMU_LUTXL_FVB_OFFSET) |
 1041              		.loc 1 641 95
 1042 0108 0A43     		orrs	r2, r2, r1
 640:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                       (lutLine->FirstVisibleBlock << GFXMMU_LUTXL_FVB_OFFSET) |
 1043              		.loc 1 640 36
 1044 010a 1A60     		str	r2, [r3]
 643:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxh_address) = (uint32_t) lutLine->LineOffset;
 1045              		.loc 1 643 56
 1046 010c 3B68     		ldr	r3, [r7]
 1047 010e 1A69     		ldr	r2, [r3, #16]
 1048              		.loc 1 643 9
 1049 0110 FB68     		ldr	r3, [r7, #12]
 1050              		.loc 1 643 36
 1051 0112 1A60     		str	r2, [r3]
 1052 0114 05E0     		b	.L64
 1053              	.L66:
 644:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 645:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     else
 646:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 647:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       /* Disable LUT line */
 648:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxl_address) = 0U;
 1054              		.loc 1 648 9
 1055 0116 3B69     		ldr	r3, [r7, #16]
 1056              		.loc 1 648 36
 1057 0118 0022     		movs	r2, #0
 1058 011a 1A60     		str	r2, [r3]
 649:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxh_address) = 0U;
 1059              		.loc 1 649 9
 1060 011c FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccvYD7zo.s 			page 31


 1061              		.loc 1 649 36
 1062 011e 0022     		movs	r2, #0
 1063 0120 1A60     		str	r2, [r3]
 1064              	.L64:
 1065              	.LBE8:
 650:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 651:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 652:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Return function status */
 653:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return status;
 1066              		.loc 1 653 10
 1067 0122 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 654:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 1068              		.loc 1 654 1
 1069 0124 1846     		mov	r0, r3
 1070 0126 1837     		adds	r7, r7, #24
 1071              		.cfi_def_cfa_offset 8
 1072 0128 BD46     		mov	sp, r7
 1073              		.cfi_def_cfa_register 13
 1074              		@ sp needed
 1075 012a 80BD     		pop	{r7, pc}
 1076              	.L69:
 1077              		.align	2
 1078              	.L68:
 1079 012c 00000358 		.word	1476591616
 1080 0130 00000348 		.word	1208156160
 1081 0134 00000000 		.word	.LC0
 1082 0138 00FF0300 		.word	261888
 1083              		.cfi_endproc
 1084              	.LFE841:
 1086              		.section	.text.HAL_GFXMMU_ModifyBuffers,"ax",%progbits
 1087              		.align	1
 1088              		.global	HAL_GFXMMU_ModifyBuffers
 1089              		.syntax unified
 1090              		.thumb
 1091              		.thumb_func
 1093              	HAL_GFXMMU_ModifyBuffers:
 1094              	.LFB842:
 655:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 656:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 657:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  This function allows to modify physical buffer addresses.
 658:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 659:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  Buffers Buffers parameters.
 660:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval HAL status.
 661:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 662:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** HAL_StatusTypeDef HAL_GFXMMU_ModifyBuffers(GFXMMU_HandleTypeDef *hgfxmmu, const GFXMMU_BuffersTypeD
 663:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 1095              		.loc 1 663 1
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 16
 1098              		@ frame_needed = 1, uses_anonymous_args = 0
 1099 0000 80B5     		push	{r7, lr}
 1100              		.cfi_def_cfa_offset 8
 1101              		.cfi_offset 7, -8
 1102              		.cfi_offset 14, -4
 1103 0002 84B0     		sub	sp, sp, #16
 1104              		.cfi_def_cfa_offset 24
 1105 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccvYD7zo.s 			page 32


 1106              		.cfi_def_cfa_register 7
 1107 0006 7860     		str	r0, [r7, #4]
 1108 0008 3960     		str	r1, [r7]
 664:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 1109              		.loc 1 664 21
 1110 000a 0023     		movs	r3, #0
 1111 000c FB73     		strb	r3, [r7, #15]
 665:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 666:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check parameters */
 667:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
 1112              		.loc 1 667 3
 1113 000e 7B68     		ldr	r3, [r7, #4]
 1114 0010 1B68     		ldr	r3, [r3]
 1115 0012 2D4A     		ldr	r2, .L79
 1116 0014 9342     		cmp	r3, r2
 1117 0016 09D0     		beq	.L71
 1118              		.loc 1 667 3 is_stmt 0 discriminator 1
 1119 0018 7B68     		ldr	r3, [r7, #4]
 1120 001a 1B68     		ldr	r3, [r3]
 1121 001c 2B4A     		ldr	r2, .L79+4
 1122 001e 9342     		cmp	r3, r2
 1123 0020 04D0     		beq	.L71
 1124              		.loc 1 667 3 discriminator 2
 1125 0022 40F29B21 		movw	r1, #667
 1126 0026 2A48     		ldr	r0, .L79+8
 1127 0028 FFF7FEFF 		bl	assert_failed
 1128              	.L71:
 668:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_BUFFER_ADDRESS(Buffers->Buf0Address));
 1129              		.loc 1 668 3 is_stmt 1
 1130 002c 3B68     		ldr	r3, [r7]
 1131 002e 1B68     		ldr	r3, [r3]
 1132 0030 03F00F03 		and	r3, r3, #15
 1133 0034 002B     		cmp	r3, #0
 1134 0036 04D0     		beq	.L72
 1135              		.loc 1 668 3 is_stmt 0 discriminator 1
 1136 0038 4FF42771 		mov	r1, #668
 1137 003c 2448     		ldr	r0, .L79+8
 1138 003e FFF7FEFF 		bl	assert_failed
 1139              	.L72:
 669:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_BUFFER_ADDRESS(Buffers->Buf1Address));
 1140              		.loc 1 669 3 is_stmt 1
 1141 0042 3B68     		ldr	r3, [r7]
 1142 0044 5B68     		ldr	r3, [r3, #4]
 1143 0046 03F00F03 		and	r3, r3, #15
 1144 004a 002B     		cmp	r3, #0
 1145 004c 04D0     		beq	.L73
 1146              		.loc 1 669 3 is_stmt 0 discriminator 1
 1147 004e 40F29D21 		movw	r1, #669
 1148 0052 1F48     		ldr	r0, .L79+8
 1149 0054 FFF7FEFF 		bl	assert_failed
 1150              	.L73:
 670:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_BUFFER_ADDRESS(Buffers->Buf2Address));
 1151              		.loc 1 670 3 is_stmt 1
 1152 0058 3B68     		ldr	r3, [r7]
 1153 005a 9B68     		ldr	r3, [r3, #8]
 1154 005c 03F00F03 		and	r3, r3, #15
 1155 0060 002B     		cmp	r3, #0
ARM GAS  /tmp/ccvYD7zo.s 			page 33


 1156 0062 04D0     		beq	.L74
 1157              		.loc 1 670 3 is_stmt 0 discriminator 1
 1158 0064 40F29E21 		movw	r1, #670
 1159 0068 1948     		ldr	r0, .L79+8
 1160 006a FFF7FEFF 		bl	assert_failed
 1161              	.L74:
 671:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_BUFFER_ADDRESS(Buffers->Buf3Address));
 1162              		.loc 1 671 3 is_stmt 1
 1163 006e 3B68     		ldr	r3, [r7]
 1164 0070 DB68     		ldr	r3, [r3, #12]
 1165 0072 03F00F03 		and	r3, r3, #15
 1166 0076 002B     		cmp	r3, #0
 1167 0078 04D0     		beq	.L75
 1168              		.loc 1 671 3 is_stmt 0 discriminator 1
 1169 007a 40F29F21 		movw	r1, #671
 1170 007e 1448     		ldr	r0, .L79+8
 1171 0080 FFF7FEFF 		bl	assert_failed
 1172              	.L75:
 672:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 673:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check GFXMMU state */
 674:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   if (hgfxmmu->State != HAL_GFXMMU_STATE_READY)
 1173              		.loc 1 674 14 is_stmt 1
 1174 0084 7B68     		ldr	r3, [r7, #4]
 1175 0086 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1176              		.loc 1 674 6
 1177 008a 012B     		cmp	r3, #1
 1178 008c 02D0     		beq	.L76
 675:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 676:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 1179              		.loc 1 676 12
 1180 008e 0123     		movs	r3, #1
 1181 0090 FB73     		strb	r3, [r7, #15]
 1182 0092 13E0     		b	.L77
 1183              	.L76:
 677:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 678:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else
 679:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 680:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Modify physical buffer addresses on GFXMMU_BxCR registers */
 681:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B0CR = Buffers->Buf0Address;
 1184              		.loc 1 681 12
 1185 0094 7B68     		ldr	r3, [r7, #4]
 1186 0096 1B68     		ldr	r3, [r3]
 1187              		.loc 1 681 38
 1188 0098 3A68     		ldr	r2, [r7]
 1189 009a 1268     		ldr	r2, [r2]
 1190              		.loc 1 681 29
 1191 009c 1A62     		str	r2, [r3, #32]
 682:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B1CR = Buffers->Buf1Address;
 1192              		.loc 1 682 12
 1193 009e 7B68     		ldr	r3, [r7, #4]
 1194 00a0 1B68     		ldr	r3, [r3]
 1195              		.loc 1 682 38
 1196 00a2 3A68     		ldr	r2, [r7]
 1197 00a4 5268     		ldr	r2, [r2, #4]
 1198              		.loc 1 682 29
 1199 00a6 5A62     		str	r2, [r3, #36]
 683:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B2CR = Buffers->Buf2Address;
ARM GAS  /tmp/ccvYD7zo.s 			page 34


 1200              		.loc 1 683 12
 1201 00a8 7B68     		ldr	r3, [r7, #4]
 1202 00aa 1B68     		ldr	r3, [r3]
 1203              		.loc 1 683 38
 1204 00ac 3A68     		ldr	r2, [r7]
 1205 00ae 9268     		ldr	r2, [r2, #8]
 1206              		.loc 1 683 29
 1207 00b0 9A62     		str	r2, [r3, #40]
 684:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B3CR = Buffers->Buf3Address;
 1208              		.loc 1 684 12
 1209 00b2 7B68     		ldr	r3, [r7, #4]
 1210 00b4 1B68     		ldr	r3, [r3]
 1211              		.loc 1 684 38
 1212 00b6 3A68     		ldr	r2, [r7]
 1213 00b8 D268     		ldr	r2, [r2, #12]
 1214              		.loc 1 684 29
 1215 00ba DA62     		str	r2, [r3, #44]
 1216              	.L77:
 685:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 686:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Return function status */
 687:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return status;
 1217              		.loc 1 687 10
 1218 00bc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 688:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 1219              		.loc 1 688 1
 1220 00be 1846     		mov	r0, r3
 1221 00c0 1037     		adds	r7, r7, #16
 1222              		.cfi_def_cfa_offset 8
 1223 00c2 BD46     		mov	sp, r7
 1224              		.cfi_def_cfa_register 13
 1225              		@ sp needed
 1226 00c4 80BD     		pop	{r7, pc}
 1227              	.L80:
 1228 00c6 00BF     		.align	2
 1229              	.L79:
 1230 00c8 00000358 		.word	1476591616
 1231 00cc 00000348 		.word	1208156160
 1232 00d0 00000000 		.word	.LC0
 1233              		.cfi_endproc
 1234              	.LFE842:
 1236              		.section	.text.HAL_GFXMMU_ConfigPacking,"ax",%progbits
 1237              		.align	1
 1238              		.global	HAL_GFXMMU_ConfigPacking
 1239              		.syntax unified
 1240              		.thumb
 1241              		.thumb_func
 1243              	HAL_GFXMMU_ConfigPacking:
 1244              	.LFB843:
 689:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 690:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 691:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  This function allows to configure packing.
 692:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 693:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  pPacking Packing parameters.
 694:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval HAL status.
 695:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 696:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** HAL_StatusTypeDef HAL_GFXMMU_ConfigPacking(GFXMMU_HandleTypeDef *hgfxmmu, const GFXMMU_PackingTypeD
 697:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
ARM GAS  /tmp/ccvYD7zo.s 			page 35


 1245              		.loc 1 697 1
 1246              		.cfi_startproc
 1247              		@ args = 0, pretend = 0, frame = 16
 1248              		@ frame_needed = 1, uses_anonymous_args = 0
 1249 0000 80B5     		push	{r7, lr}
 1250              		.cfi_def_cfa_offset 8
 1251              		.cfi_offset 7, -8
 1252              		.cfi_offset 14, -4
 1253 0002 84B0     		sub	sp, sp, #16
 1254              		.cfi_def_cfa_offset 24
 1255 0004 00AF     		add	r7, sp, #0
 1256              		.cfi_def_cfa_register 7
 1257 0006 7860     		str	r0, [r7, #4]
 1258 0008 3960     		str	r1, [r7]
 698:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 1259              		.loc 1 698 21
 1260 000a 0023     		movs	r3, #0
 1261 000c FB73     		strb	r3, [r7, #15]
 699:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 700:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check parameters */
 701:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
 1262              		.loc 1 701 3
 1263 000e 7B68     		ldr	r3, [r7, #4]
 1264 0010 1B68     		ldr	r3, [r3]
 1265 0012 6E4A     		ldr	r2, .L100
 1266 0014 9342     		cmp	r3, r2
 1267 0016 09D0     		beq	.L82
 1268              		.loc 1 701 3 is_stmt 0 discriminator 1
 1269 0018 7B68     		ldr	r3, [r7, #4]
 1270 001a 1B68     		ldr	r3, [r3]
 1271 001c 6C4A     		ldr	r2, .L100+4
 1272 001e 9342     		cmp	r3, r2
 1273 0020 04D0     		beq	.L82
 1274              		.loc 1 701 3 discriminator 2
 1275 0022 40F2BD21 		movw	r1, #701
 1276 0026 6B48     		ldr	r0, .L100+8
 1277 0028 FFF7FEFF 		bl	assert_failed
 1278              	.L82:
 702:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_FUNCTIONAL_STATE(pPacking->Buffer0Activation));
 1279              		.loc 1 702 3 is_stmt 1
 1280 002c 3B68     		ldr	r3, [r7]
 1281 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1282 0030 002B     		cmp	r3, #0
 1283 0032 08D0     		beq	.L83
 1284              		.loc 1 702 3 is_stmt 0 discriminator 1
 1285 0034 3B68     		ldr	r3, [r7]
 1286 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1287 0038 012B     		cmp	r3, #1
 1288 003a 04D0     		beq	.L83
 1289              		.loc 1 702 3 discriminator 2
 1290 003c 40F2BE21 		movw	r1, #702
 1291 0040 6448     		ldr	r0, .L100+8
 1292 0042 FFF7FEFF 		bl	assert_failed
 1293              	.L83:
 703:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_FUNCTIONAL_STATE(pPacking->Buffer1Activation));
 1294              		.loc 1 703 3 is_stmt 1
 1295 0046 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccvYD7zo.s 			page 36


 1296 0048 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1297 004a 002B     		cmp	r3, #0
 1298 004c 08D0     		beq	.L84
 1299              		.loc 1 703 3 is_stmt 0 discriminator 1
 1300 004e 3B68     		ldr	r3, [r7]
 1301 0050 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1302 0052 012B     		cmp	r3, #1
 1303 0054 04D0     		beq	.L84
 1304              		.loc 1 703 3 discriminator 2
 1305 0056 40F2BF21 		movw	r1, #703
 1306 005a 5E48     		ldr	r0, .L100+8
 1307 005c FFF7FEFF 		bl	assert_failed
 1308              	.L84:
 704:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_FUNCTIONAL_STATE(pPacking->Buffer2Activation));
 1309              		.loc 1 704 3 is_stmt 1
 1310 0060 3B68     		ldr	r3, [r7]
 1311 0062 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1312 0064 002B     		cmp	r3, #0
 1313 0066 08D0     		beq	.L85
 1314              		.loc 1 704 3 is_stmt 0 discriminator 1
 1315 0068 3B68     		ldr	r3, [r7]
 1316 006a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1317 006c 012B     		cmp	r3, #1
 1318 006e 04D0     		beq	.L85
 1319              		.loc 1 704 3 discriminator 2
 1320 0070 4FF43071 		mov	r1, #704
 1321 0074 5748     		ldr	r0, .L100+8
 1322 0076 FFF7FEFF 		bl	assert_failed
 1323              	.L85:
 705:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_FUNCTIONAL_STATE(pPacking->Buffer3Activation));
 1324              		.loc 1 705 3 is_stmt 1
 1325 007a 3B68     		ldr	r3, [r7]
 1326 007c 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 1327 007e 002B     		cmp	r3, #0
 1328 0080 08D0     		beq	.L86
 1329              		.loc 1 705 3 is_stmt 0 discriminator 1
 1330 0082 3B68     		ldr	r3, [r7]
 1331 0084 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 1332 0086 012B     		cmp	r3, #1
 1333 0088 04D0     		beq	.L86
 1334              		.loc 1 705 3 discriminator 2
 1335 008a 40F2C121 		movw	r1, #705
 1336 008e 5148     		ldr	r0, .L100+8
 1337 0090 FFF7FEFF 		bl	assert_failed
 1338              	.L86:
 706:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_PACKING_MODE(pPacking->Buffer0Mode));
 1339              		.loc 1 706 3 is_stmt 1
 1340 0094 3B68     		ldr	r3, [r7]
 1341 0096 5B68     		ldr	r3, [r3, #4]
 1342 0098 002B     		cmp	r3, #0
 1343 009a 08D0     		beq	.L87
 1344              		.loc 1 706 3 is_stmt 0 discriminator 1
 1345 009c 3B68     		ldr	r3, [r7]
 1346 009e 5B68     		ldr	r3, [r3, #4]
 1347 00a0 012B     		cmp	r3, #1
 1348 00a2 04D0     		beq	.L87
 1349              		.loc 1 706 3 discriminator 2
ARM GAS  /tmp/ccvYD7zo.s 			page 37


 1350 00a4 40F2C221 		movw	r1, #706
 1351 00a8 4A48     		ldr	r0, .L100+8
 1352 00aa FFF7FEFF 		bl	assert_failed
 1353              	.L87:
 707:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_PACKING_MODE(pPacking->Buffer1Mode));
 1354              		.loc 1 707 3 is_stmt 1
 1355 00ae 3B68     		ldr	r3, [r7]
 1356 00b0 DB68     		ldr	r3, [r3, #12]
 1357 00b2 002B     		cmp	r3, #0
 1358 00b4 08D0     		beq	.L88
 1359              		.loc 1 707 3 is_stmt 0 discriminator 1
 1360 00b6 3B68     		ldr	r3, [r7]
 1361 00b8 DB68     		ldr	r3, [r3, #12]
 1362 00ba 012B     		cmp	r3, #1
 1363 00bc 04D0     		beq	.L88
 1364              		.loc 1 707 3 discriminator 2
 1365 00be 40F2C321 		movw	r1, #707
 1366 00c2 4448     		ldr	r0, .L100+8
 1367 00c4 FFF7FEFF 		bl	assert_failed
 1368              	.L88:
 708:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_PACKING_MODE(pPacking->Buffer2Mode));
 1369              		.loc 1 708 3 is_stmt 1
 1370 00c8 3B68     		ldr	r3, [r7]
 1371 00ca 5B69     		ldr	r3, [r3, #20]
 1372 00cc 002B     		cmp	r3, #0
 1373 00ce 08D0     		beq	.L89
 1374              		.loc 1 708 3 is_stmt 0 discriminator 1
 1375 00d0 3B68     		ldr	r3, [r7]
 1376 00d2 5B69     		ldr	r3, [r3, #20]
 1377 00d4 012B     		cmp	r3, #1
 1378 00d6 04D0     		beq	.L89
 1379              		.loc 1 708 3 discriminator 2
 1380 00d8 4FF43171 		mov	r1, #708
 1381 00dc 3D48     		ldr	r0, .L100+8
 1382 00de FFF7FEFF 		bl	assert_failed
 1383              	.L89:
 709:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_PACKING_MODE(pPacking->Buffer3Mode));
 1384              		.loc 1 709 3 is_stmt 1
 1385 00e2 3B68     		ldr	r3, [r7]
 1386 00e4 DB69     		ldr	r3, [r3, #28]
 1387 00e6 002B     		cmp	r3, #0
 1388 00e8 08D0     		beq	.L90
 1389              		.loc 1 709 3 is_stmt 0 discriminator 1
 1390 00ea 3B68     		ldr	r3, [r7]
 1391 00ec DB69     		ldr	r3, [r3, #28]
 1392 00ee 012B     		cmp	r3, #1
 1393 00f0 04D0     		beq	.L90
 1394              		.loc 1 709 3 discriminator 2
 1395 00f2 40F2C521 		movw	r1, #709
 1396 00f6 3748     		ldr	r0, .L100+8
 1397 00f8 FFF7FEFF 		bl	assert_failed
 1398              	.L90:
 710:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_DEFAULT_ALPHA_VALUE(pPacking->DefaultAlpha));
 1399              		.loc 1 710 3 is_stmt 1
 1400 00fc 3B68     		ldr	r3, [r7]
 1401 00fe 1B6A     		ldr	r3, [r3, #32]
 1402 0100 FF2B     		cmp	r3, #255
ARM GAS  /tmp/ccvYD7zo.s 			page 38


 1403 0102 04D9     		bls	.L91
 1404              		.loc 1 710 3 is_stmt 0 discriminator 1
 1405 0104 40F2C621 		movw	r1, #710
 1406 0108 3248     		ldr	r0, .L100+8
 1407 010a FFF7FEFF 		bl	assert_failed
 1408              	.L91:
 711:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 712:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check GFXMMU state */
 713:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   if (hgfxmmu->State != HAL_GFXMMU_STATE_READY)
 1409              		.loc 1 713 14 is_stmt 1
 1410 010e 7B68     		ldr	r3, [r7, #4]
 1411 0110 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1412              		.loc 1 713 6
 1413 0114 012B     		cmp	r3, #1
 1414 0116 02D0     		beq	.L92
 714:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 715:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 1415              		.loc 1 715 12
 1416 0118 0123     		movs	r3, #1
 1417 011a FB73     		strb	r3, [r7, #15]
 1418 011c 50E0     		b	.L93
 1419              	.L92:
 716:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 717:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check block size is set to 12-byte*/
 718:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else if ((hgfxmmu->Instance->CR & GFXMMU_CR_BS) == 0U)
 1420              		.loc 1 718 20
 1421 011e 7B68     		ldr	r3, [r7, #4]
 1422 0120 1B68     		ldr	r3, [r3]
 1423              		.loc 1 718 30
 1424 0122 1B68     		ldr	r3, [r3]
 1425              		.loc 1 718 35
 1426 0124 03F04003 		and	r3, r3, #64
 1427              		.loc 1 718 11
 1428 0128 002B     		cmp	r3, #0
 1429 012a 02D1     		bne	.L94
 719:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 720:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 1430              		.loc 1 720 12
 1431 012c 0123     		movs	r3, #1
 1432 012e FB73     		strb	r3, [r7, #15]
 1433 0130 46E0     		b	.L93
 1434              	.L94:
 1435              	.LBB9:
 721:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 722:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else
 723:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 724:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     uint32_t reg_value = 0U;
 1436              		.loc 1 724 14
 1437 0132 0023     		movs	r3, #0
 1438 0134 BB60     		str	r3, [r7, #8]
 725:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 726:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Configure packing for all buffers on GFXMMU_CR register */
 727:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (pPacking->Buffer0Activation == ENABLE)
 1439              		.loc 1 727 17
 1440 0136 3B68     		ldr	r3, [r7]
 1441 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1442              		.loc 1 727 8
ARM GAS  /tmp/ccvYD7zo.s 			page 39


 1443 013a 012B     		cmp	r3, #1
 1444 013c 07D1     		bne	.L95
 728:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 729:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       reg_value |= ((pPacking->Buffer0Mode << GFXMMU_CR_B0PM_Pos) | GFXMMU_CR_B0PE);
 1445              		.loc 1 729 30
 1446 013e 3B68     		ldr	r3, [r7]
 1447 0140 5B68     		ldr	r3, [r3, #4]
 1448              		.loc 1 729 44
 1449 0142 5A06     		lsls	r2, r3, #25
 1450              		.loc 1 729 17
 1451 0144 BB68     		ldr	r3, [r7, #8]
 1452 0146 1343     		orrs	r3, r3, r2
 1453 0148 43F08073 		orr	r3, r3, #16777216
 1454 014c BB60     		str	r3, [r7, #8]
 1455              	.L95:
 730:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 731:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (pPacking->Buffer1Activation == ENABLE)
 1456              		.loc 1 731 17
 1457 014e 3B68     		ldr	r3, [r7]
 1458 0150 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1459              		.loc 1 731 8
 1460 0152 012B     		cmp	r3, #1
 1461 0154 07D1     		bne	.L96
 732:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 733:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       reg_value |= ((pPacking->Buffer1Mode << GFXMMU_CR_B1PM_Pos) | GFXMMU_CR_B1PE);
 1462              		.loc 1 733 30
 1463 0156 3B68     		ldr	r3, [r7]
 1464 0158 DB68     		ldr	r3, [r3, #12]
 1465              		.loc 1 733 44
 1466 015a DA06     		lsls	r2, r3, #27
 1467              		.loc 1 733 17
 1468 015c BB68     		ldr	r3, [r7, #8]
 1469 015e 1343     		orrs	r3, r3, r2
 1470 0160 43F08063 		orr	r3, r3, #67108864
 1471 0164 BB60     		str	r3, [r7, #8]
 1472              	.L96:
 734:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 735:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (pPacking->Buffer2Activation == ENABLE)
 1473              		.loc 1 735 17
 1474 0166 3B68     		ldr	r3, [r7]
 1475 0168 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1476              		.loc 1 735 8
 1477 016a 012B     		cmp	r3, #1
 1478 016c 07D1     		bne	.L97
 736:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 737:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       reg_value |= ((pPacking->Buffer2Mode << GFXMMU_CR_B2PM_Pos) | GFXMMU_CR_B2PE);
 1479              		.loc 1 737 30
 1480 016e 3B68     		ldr	r3, [r7]
 1481 0170 5B69     		ldr	r3, [r3, #20]
 1482              		.loc 1 737 44
 1483 0172 5A07     		lsls	r2, r3, #29
 1484              		.loc 1 737 17
 1485 0174 BB68     		ldr	r3, [r7, #8]
 1486 0176 1343     		orrs	r3, r3, r2
 1487 0178 43F08053 		orr	r3, r3, #268435456
 1488 017c BB60     		str	r3, [r7, #8]
 1489              	.L97:
ARM GAS  /tmp/ccvYD7zo.s 			page 40


 738:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 739:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (pPacking->Buffer3Activation == ENABLE)
 1490              		.loc 1 739 17
 1491 017e 3B68     		ldr	r3, [r7]
 1492 0180 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 1493              		.loc 1 739 8
 1494 0182 012B     		cmp	r3, #1
 1495 0184 07D1     		bne	.L98
 740:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 741:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       reg_value |= ((pPacking->Buffer3Mode << GFXMMU_CR_B3PM_Pos) | GFXMMU_CR_B3PE);
 1496              		.loc 1 741 30
 1497 0186 3B68     		ldr	r3, [r7]
 1498 0188 DB69     		ldr	r3, [r3, #28]
 1499              		.loc 1 741 44
 1500 018a DA07     		lsls	r2, r3, #31
 1501              		.loc 1 741 17
 1502 018c BB68     		ldr	r3, [r7, #8]
 1503 018e 1343     		orrs	r3, r3, r2
 1504 0190 43F08043 		orr	r3, r3, #1073741824
 1505 0194 BB60     		str	r3, [r7, #8]
 1506              	.L98:
 742:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 743:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->CR &= ~(GFXMMU_CR_B0PE_Msk | GFXMMU_CR_B0PM_Msk |
 1507              		.loc 1 743 12
 1508 0196 7B68     		ldr	r3, [r7, #4]
 1509 0198 1B68     		ldr	r3, [r3]
 1510              		.loc 1 743 22
 1511 019a 1A68     		ldr	r2, [r3]
 1512              		.loc 1 743 12
 1513 019c 7B68     		ldr	r3, [r7, #4]
 1514 019e 1B68     		ldr	r3, [r3]
 1515              		.loc 1 743 27
 1516 01a0 22F07F42 		bic	r2, r2, #-16777216
 1517 01a4 1A60     		str	r2, [r3]
 744:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                GFXMMU_CR_B1PE_Msk | GFXMMU_CR_B1PM_Msk |
 745:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                GFXMMU_CR_B2PE_Msk | GFXMMU_CR_B2PM_Msk |
 746:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                GFXMMU_CR_B3PE_Msk | GFXMMU_CR_B3PM_Msk);
 747:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->CR |= reg_value;
 1518              		.loc 1 747 12
 1519 01a6 7B68     		ldr	r3, [r7, #4]
 1520 01a8 1B68     		ldr	r3, [r3]
 1521              		.loc 1 747 22
 1522 01aa 1968     		ldr	r1, [r3]
 1523              		.loc 1 747 12
 1524 01ac 7B68     		ldr	r3, [r7, #4]
 1525 01ae 1B68     		ldr	r3, [r3]
 1526              		.loc 1 747 27
 1527 01b0 BA68     		ldr	r2, [r7, #8]
 1528 01b2 0A43     		orrs	r2, r2, r1
 1529 01b4 1A60     		str	r2, [r3]
 748:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 749:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Configure default alpha value on GFXMMU_DAR register */
 750:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->DAR = pPacking->DefaultAlpha;
 1530              		.loc 1 750 12
 1531 01b6 7B68     		ldr	r3, [r7, #4]
 1532 01b8 1B68     		ldr	r3, [r3]
 1533              		.loc 1 750 38
ARM GAS  /tmp/ccvYD7zo.s 			page 41


 1534 01ba 3A68     		ldr	r2, [r7]
 1535 01bc 126A     		ldr	r2, [r2, #32]
 1536              		.loc 1 750 28
 1537 01be 5A61     		str	r2, [r3, #20]
 1538              	.L93:
 1539              	.LBE9:
 751:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 752:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Return function status */
 753:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return status;
 1540              		.loc 1 753 10
 1541 01c0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 754:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 1542              		.loc 1 754 1
 1543 01c2 1846     		mov	r0, r3
 1544 01c4 1037     		adds	r7, r7, #16
 1545              		.cfi_def_cfa_offset 8
 1546 01c6 BD46     		mov	sp, r7
 1547              		.cfi_def_cfa_register 13
 1548              		@ sp needed
 1549 01c8 80BD     		pop	{r7, pc}
 1550              	.L101:
 1551 01ca 00BF     		.align	2
 1552              	.L100:
 1553 01cc 00000358 		.word	1476591616
 1554 01d0 00000348 		.word	1208156160
 1555 01d4 00000000 		.word	.LC0
 1556              		.cfi_endproc
 1557              	.LFE843:
 1559              		.section	.text.HAL_GFXMMU_IRQHandler,"ax",%progbits
 1560              		.align	1
 1561              		.global	HAL_GFXMMU_IRQHandler
 1562              		.syntax unified
 1563              		.thumb
 1564              		.thumb_func
 1566              	HAL_GFXMMU_IRQHandler:
 1567              	.LFB844:
 755:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 756:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 757:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  This function handles the GFXMMU interrupts.
 758:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 759:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval None.
 760:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 761:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** void HAL_GFXMMU_IRQHandler(GFXMMU_HandleTypeDef *hgfxmmu)
 762:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 1568              		.loc 1 762 1
 1569              		.cfi_startproc
 1570              		@ args = 0, pretend = 0, frame = 24
 1571              		@ frame_needed = 1, uses_anonymous_args = 0
 1572 0000 80B5     		push	{r7, lr}
 1573              		.cfi_def_cfa_offset 8
 1574              		.cfi_offset 7, -8
 1575              		.cfi_offset 14, -4
 1576 0002 86B0     		sub	sp, sp, #24
 1577              		.cfi_def_cfa_offset 32
 1578 0004 00AF     		add	r7, sp, #0
 1579              		.cfi_def_cfa_register 7
 1580 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccvYD7zo.s 			page 42


 763:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   uint32_t flags, interrupts, error;
 764:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 765:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Read current flags and interrupts and determine which error occurs */
 766:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   flags = hgfxmmu->Instance->SR;
 1581              		.loc 1 766 18
 1582 0008 7B68     		ldr	r3, [r7, #4]
 1583 000a 1B68     		ldr	r3, [r3]
 1584              		.loc 1 766 9
 1585 000c 5B68     		ldr	r3, [r3, #4]
 1586 000e 7B61     		str	r3, [r7, #20]
 767:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   interrupts = (hgfxmmu->Instance->CR & GFXMMU_CR_ITS_MASK);
 1587              		.loc 1 767 24
 1588 0010 7B68     		ldr	r3, [r7, #4]
 1589 0012 1B68     		ldr	r3, [r3]
 1590              		.loc 1 767 34
 1591 0014 1B68     		ldr	r3, [r3]
 1592              		.loc 1 767 14
 1593 0016 03F01F03 		and	r3, r3, #31
 1594 001a 3B61     		str	r3, [r7, #16]
 768:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   error = (flags & interrupts);
 1595              		.loc 1 768 9
 1596 001c 7A69     		ldr	r2, [r7, #20]
 1597 001e 3B69     		ldr	r3, [r7, #16]
 1598 0020 1340     		ands	r3, r3, r2
 1599 0022 FB60     		str	r3, [r7, #12]
 769:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 770:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   if (error != 0U)
 1600              		.loc 1 770 6
 1601 0024 FB68     		ldr	r3, [r7, #12]
 1602 0026 002B     		cmp	r3, #0
 1603 0028 0CD0     		beq	.L104
 771:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 772:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Clear flags on GFXMMU_FCR register */
 773:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->FCR = error;
 1604              		.loc 1 773 12
 1605 002a 7B68     		ldr	r3, [r7, #4]
 1606 002c 1B68     		ldr	r3, [r3]
 1607              		.loc 1 773 28
 1608 002e FA68     		ldr	r2, [r7, #12]
 1609 0030 9A60     		str	r2, [r3, #8]
 774:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 775:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Update GFXMMU error code */
 776:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->ErrorCode |= error;
 1610              		.loc 1 776 12
 1611 0032 7B68     		ldr	r3, [r7, #4]
 1612 0034 DA6A     		ldr	r2, [r3, #44]
 1613              		.loc 1 776 24
 1614 0036 FB68     		ldr	r3, [r7, #12]
 1615 0038 1A43     		orrs	r2, r2, r3
 1616 003a 7B68     		ldr	r3, [r7, #4]
 1617 003c DA62     		str	r2, [r3, #44]
 777:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 778:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Call GFXMMU error callback */
 779:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
 780:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->ErrorCallback(hgfxmmu);
 781:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #else
 782:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     HAL_GFXMMU_ErrorCallback(hgfxmmu);
ARM GAS  /tmp/ccvYD7zo.s 			page 43


 1618              		.loc 1 782 5
 1619 003e 7868     		ldr	r0, [r7, #4]
 1620 0040 FFF7FEFF 		bl	HAL_GFXMMU_ErrorCallback
 1621              	.L104:
 783:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
 784:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 785:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 1622              		.loc 1 785 1
 1623 0044 00BF     		nop
 1624 0046 1837     		adds	r7, r7, #24
 1625              		.cfi_def_cfa_offset 8
 1626 0048 BD46     		mov	sp, r7
 1627              		.cfi_def_cfa_register 13
 1628              		@ sp needed
 1629 004a 80BD     		pop	{r7, pc}
 1630              		.cfi_endproc
 1631              	.LFE844:
 1633              		.section	.text.HAL_GFXMMU_ErrorCallback,"ax",%progbits
 1634              		.align	1
 1635              		.weak	HAL_GFXMMU_ErrorCallback
 1636              		.syntax unified
 1637              		.thumb
 1638              		.thumb_func
 1640              	HAL_GFXMMU_ErrorCallback:
 1641              	.LFB845:
 786:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 787:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 788:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  Error callback.
 789:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 790:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval None.
 791:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 792:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** __weak void HAL_GFXMMU_ErrorCallback(GFXMMU_HandleTypeDef *hgfxmmu)
 793:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 1642              		.loc 1 793 1
 1643              		.cfi_startproc
 1644              		@ args = 0, pretend = 0, frame = 8
 1645              		@ frame_needed = 1, uses_anonymous_args = 0
 1646              		@ link register save eliminated.
 1647 0000 80B4     		push	{r7}
 1648              		.cfi_def_cfa_offset 4
 1649              		.cfi_offset 7, -4
 1650 0002 83B0     		sub	sp, sp, #12
 1651              		.cfi_def_cfa_offset 16
 1652 0004 00AF     		add	r7, sp, #0
 1653              		.cfi_def_cfa_register 7
 1654 0006 7860     		str	r0, [r7, #4]
 794:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Prevent unused argument(s) compilation warning */
 795:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   UNUSED(hgfxmmu);
 796:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 797:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 798:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****             the HAL_GFXMMU_ErrorCallback could be implemented in the user file.
 799:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****    */
 800:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 1655              		.loc 1 800 1
 1656 0008 00BF     		nop
 1657 000a 0C37     		adds	r7, r7, #12
 1658              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccvYD7zo.s 			page 44


 1659 000c BD46     		mov	sp, r7
 1660              		.cfi_def_cfa_register 13
 1661              		@ sp needed
 1662 000e 5DF8047B 		ldr	r7, [sp], #4
 1663              		.cfi_restore 7
 1664              		.cfi_def_cfa_offset 0
 1665 0012 7047     		bx	lr
 1666              		.cfi_endproc
 1667              	.LFE845:
 1669              		.section	.text.HAL_GFXMMU_GetState,"ax",%progbits
 1670              		.align	1
 1671              		.global	HAL_GFXMMU_GetState
 1672              		.syntax unified
 1673              		.thumb
 1674              		.thumb_func
 1676              	HAL_GFXMMU_GetState:
 1677              	.LFB846:
 801:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 802:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 803:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @}
 804:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 805:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 806:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /** @defgroup GFXMMU_Exported_Functions_Group3 State functions
 807:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *  @brief    GFXMMU state functions
 808:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *
 809:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** @verbatim
 810:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ==============================================================================
 811:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                          ##### State functions #####
 812:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ==============================================================================
 813:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]  This section provides functions allowing to:
 814:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) Get GFXMMU handle state.
 815:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) Get GFXMMU error code.
 816:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** @endverbatim
 817:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @{
 818:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 819:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 820:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 821:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  This function allows to get the current GFXMMU handle state.
 822:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 823:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval GFXMMU state.
 824:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 825:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** HAL_GFXMMU_StateTypeDef HAL_GFXMMU_GetState(const GFXMMU_HandleTypeDef *hgfxmmu)
 826:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 1678              		.loc 1 826 1
 1679              		.cfi_startproc
 1680              		@ args = 0, pretend = 0, frame = 8
 1681              		@ frame_needed = 1, uses_anonymous_args = 0
 1682              		@ link register save eliminated.
 1683 0000 80B4     		push	{r7}
 1684              		.cfi_def_cfa_offset 4
 1685              		.cfi_offset 7, -4
 1686 0002 83B0     		sub	sp, sp, #12
 1687              		.cfi_def_cfa_offset 16
 1688 0004 00AF     		add	r7, sp, #0
 1689              		.cfi_def_cfa_register 7
 1690 0006 7860     		str	r0, [r7, #4]
 827:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Return GFXMMU handle state */
ARM GAS  /tmp/ccvYD7zo.s 			page 45


 828:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return hgfxmmu->State;
 1691              		.loc 1 828 17
 1692 0008 7B68     		ldr	r3, [r7, #4]
 1693 000a 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 829:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 1694              		.loc 1 829 1
 1695 000e 1846     		mov	r0, r3
 1696 0010 0C37     		adds	r7, r7, #12
 1697              		.cfi_def_cfa_offset 4
 1698 0012 BD46     		mov	sp, r7
 1699              		.cfi_def_cfa_register 13
 1700              		@ sp needed
 1701 0014 5DF8047B 		ldr	r7, [sp], #4
 1702              		.cfi_restore 7
 1703              		.cfi_def_cfa_offset 0
 1704 0018 7047     		bx	lr
 1705              		.cfi_endproc
 1706              	.LFE846:
 1708              		.section	.text.HAL_GFXMMU_GetError,"ax",%progbits
 1709              		.align	1
 1710              		.global	HAL_GFXMMU_GetError
 1711              		.syntax unified
 1712              		.thumb
 1713              		.thumb_func
 1715              	HAL_GFXMMU_GetError:
 1716              	.LFB847:
 830:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 831:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 832:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  This function allows to get the current GFXMMU error code.
 833:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 834:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval GFXMMU error code.
 835:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 836:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** uint32_t HAL_GFXMMU_GetError(GFXMMU_HandleTypeDef *hgfxmmu)
 837:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 1717              		.loc 1 837 1
 1718              		.cfi_startproc
 1719              		@ args = 0, pretend = 0, frame = 16
 1720              		@ frame_needed = 1, uses_anonymous_args = 0
 1721              		@ link register save eliminated.
 1722 0000 80B4     		push	{r7}
 1723              		.cfi_def_cfa_offset 4
 1724              		.cfi_offset 7, -4
 1725 0002 85B0     		sub	sp, sp, #20
 1726              		.cfi_def_cfa_offset 24
 1727 0004 00AF     		add	r7, sp, #0
 1728              		.cfi_def_cfa_register 7
 1729 0006 7860     		str	r0, [r7, #4]
 1730              	.LBB10:
 1731              	.LBB11:
 1732              		.file 2 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h"
   1:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /*
ARM GAS  /tmp/ccvYD7zo.s 			page 46


   8:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
ARM GAS  /tmp/ccvYD7zo.s 			page 47


  65:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccvYD7zo.s 			page 48


 122:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
ARM GAS  /tmp/ccvYD7zo.s 			page 49


 179:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccvYD7zo.s 			page 50


 236:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
ARM GAS  /tmp/ccvYD7zo.s 			page 51


 293:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
ARM GAS  /tmp/ccvYD7zo.s 			page 52


 350:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
ARM GAS  /tmp/ccvYD7zo.s 			page 53


 407:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     */
ARM GAS  /tmp/ccvYD7zo.s 			page 54


 464:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
ARM GAS  /tmp/ccvYD7zo.s 			page 55


 521:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
ARM GAS  /tmp/ccvYD7zo.s 			page 56


 578:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
ARM GAS  /tmp/ccvYD7zo.s 			page 57


 635:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
ARM GAS  /tmp/ccvYD7zo.s 			page 58


 692:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccvYD7zo.s 			page 59


 749:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  /tmp/ccvYD7zo.s 			page 60


 806:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
ARM GAS  /tmp/ccvYD7zo.s 			page 61


 863:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  /tmp/ccvYD7zo.s 			page 62


 920:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 961:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1733              		.loc 2 962 3
 1734              		.syntax unified
 1735              	@ 962 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1736 0008 72B6     		cpsid i
 1737              	@ 0 "" 2
 963:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1738              		.loc 2 963 1
 1739              		.thumb
 1740              		.syntax unified
 1741 000a 00BF     		nop
 1742              	.LBE11:
 1743              	.LBE10:
 838:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   uint32_t error_code;
 839:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
ARM GAS  /tmp/ccvYD7zo.s 			page 63


 840:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Enter in critical section */
 841:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   __disable_irq();
 842:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 843:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Store and reset GFXMMU error code */
 844:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   error_code = hgfxmmu->ErrorCode;
 1744              		.loc 1 844 14
 1745 000c 7B68     		ldr	r3, [r7, #4]
 1746 000e DB6A     		ldr	r3, [r3, #44]
 1747 0010 FB60     		str	r3, [r7, #12]
 845:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   hgfxmmu->ErrorCode = GFXMMU_ERROR_NONE;
 1748              		.loc 1 845 22
 1749 0012 7B68     		ldr	r3, [r7, #4]
 1750 0014 0022     		movs	r2, #0
 1751 0016 DA62     		str	r2, [r3, #44]
 1752              	.LBB12:
 1753              	.LBB13:
 951:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1754              		.loc 2 951 3
 1755              		.syntax unified
 1756              	@ 951 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1757 0018 62B6     		cpsie i
 1758              	@ 0 "" 2
 952:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 1759              		.loc 2 952 1
 1760              		.thumb
 1761              		.syntax unified
 1762 001a 00BF     		nop
 1763              	.LBE13:
 1764              	.LBE12:
 846:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 847:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Exit from critical section */
 848:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   __enable_irq();
 849:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 850:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Return GFXMMU error code */
 851:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return error_code;
 1765              		.loc 1 851 10
 1766 001c FB68     		ldr	r3, [r7, #12]
 852:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 1767              		.loc 1 852 1
 1768 001e 1846     		mov	r0, r3
 1769 0020 1437     		adds	r7, r7, #20
 1770              		.cfi_def_cfa_offset 4
 1771 0022 BD46     		mov	sp, r7
 1772              		.cfi_def_cfa_register 13
 1773              		@ sp needed
 1774 0024 5DF8047B 		ldr	r7, [sp], #4
 1775              		.cfi_restore 7
 1776              		.cfi_def_cfa_offset 0
 1777 0028 7047     		bx	lr
 1778              		.cfi_endproc
 1779              	.LFE847:
 1781              		.text
 1782              	.Letext0:
 1783              		.file 3 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 1784              		.file 4 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 1785              		.file 5 "STM32Cube_FW_N6/Drivers/CMSIS/Device/ST/STM32N6xx/Include/stm32n657xx.h"
 1786              		.file 6 "STM32Cube_FW_N6/Drivers/CMSIS/Device/ST/STM32N6xx/Include/stm32n6xx.h"
ARM GAS  /tmp/ccvYD7zo.s 			page 64


 1787              		.file 7 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_def.h"
 1788              		.file 8 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_gfxmmu.h"
 1789              		.file 9 "Inc/stm32n6xx_hal_conf.h"
ARM GAS  /tmp/ccvYD7zo.s 			page 65


DEFINED SYMBOLS
                            *ABS*:00000000 stm32n6xx_hal_gfxmmu.c
     /tmp/ccvYD7zo.s:26     .rodata:00000000 $d
     /tmp/ccvYD7zo.s:31     .text.HAL_GFXMMU_Init:00000000 $t
     /tmp/ccvYD7zo.s:37     .text.HAL_GFXMMU_Init:00000000 HAL_GFXMMU_Init
     /tmp/ccvYD7zo.s:407    .text.HAL_GFXMMU_MspInit:00000000 HAL_GFXMMU_MspInit
     /tmp/ccvYD7zo.s:305    .text.HAL_GFXMMU_Init:00000184 $d
     /tmp/ccvYD7zo.s:312    .text.HAL_GFXMMU_DeInit:00000000 $t
     /tmp/ccvYD7zo.s:318    .text.HAL_GFXMMU_DeInit:00000000 HAL_GFXMMU_DeInit
     /tmp/ccvYD7zo.s:443    .text.HAL_GFXMMU_MspDeInit:00000000 HAL_GFXMMU_MspDeInit
     /tmp/ccvYD7zo.s:394    .text.HAL_GFXMMU_DeInit:00000060 $d
     /tmp/ccvYD7zo.s:401    .text.HAL_GFXMMU_MspInit:00000000 $t
     /tmp/ccvYD7zo.s:437    .text.HAL_GFXMMU_MspDeInit:00000000 $t
     /tmp/ccvYD7zo.s:473    .text.HAL_GFXMMU_ConfigLut:00000000 $t
     /tmp/ccvYD7zo.s:479    .text.HAL_GFXMMU_ConfigLut:00000000 HAL_GFXMMU_ConfigLut
     /tmp/ccvYD7zo.s:667    .text.HAL_GFXMMU_ConfigLut:00000104 $d
     /tmp/ccvYD7zo.s:674    .text.HAL_GFXMMU_DisableLutLines:00000000 $t
     /tmp/ccvYD7zo.s:680    .text.HAL_GFXMMU_DisableLutLines:00000000 HAL_GFXMMU_DisableLutLines
     /tmp/ccvYD7zo.s:850    .text.HAL_GFXMMU_DisableLutLines:000000e4 $d
     /tmp/ccvYD7zo.s:857    .text.HAL_GFXMMU_ConfigLutLine:00000000 $t
     /tmp/ccvYD7zo.s:863    .text.HAL_GFXMMU_ConfigLutLine:00000000 HAL_GFXMMU_ConfigLutLine
     /tmp/ccvYD7zo.s:1079   .text.HAL_GFXMMU_ConfigLutLine:0000012c $d
     /tmp/ccvYD7zo.s:1087   .text.HAL_GFXMMU_ModifyBuffers:00000000 $t
     /tmp/ccvYD7zo.s:1093   .text.HAL_GFXMMU_ModifyBuffers:00000000 HAL_GFXMMU_ModifyBuffers
     /tmp/ccvYD7zo.s:1230   .text.HAL_GFXMMU_ModifyBuffers:000000c8 $d
     /tmp/ccvYD7zo.s:1237   .text.HAL_GFXMMU_ConfigPacking:00000000 $t
     /tmp/ccvYD7zo.s:1243   .text.HAL_GFXMMU_ConfigPacking:00000000 HAL_GFXMMU_ConfigPacking
     /tmp/ccvYD7zo.s:1553   .text.HAL_GFXMMU_ConfigPacking:000001cc $d
     /tmp/ccvYD7zo.s:1560   .text.HAL_GFXMMU_IRQHandler:00000000 $t
     /tmp/ccvYD7zo.s:1566   .text.HAL_GFXMMU_IRQHandler:00000000 HAL_GFXMMU_IRQHandler
     /tmp/ccvYD7zo.s:1640   .text.HAL_GFXMMU_ErrorCallback:00000000 HAL_GFXMMU_ErrorCallback
     /tmp/ccvYD7zo.s:1634   .text.HAL_GFXMMU_ErrorCallback:00000000 $t
     /tmp/ccvYD7zo.s:1670   .text.HAL_GFXMMU_GetState:00000000 $t
     /tmp/ccvYD7zo.s:1676   .text.HAL_GFXMMU_GetState:00000000 HAL_GFXMMU_GetState
     /tmp/ccvYD7zo.s:1709   .text.HAL_GFXMMU_GetError:00000000 $t
     /tmp/ccvYD7zo.s:1715   .text.HAL_GFXMMU_GetError:00000000 HAL_GFXMMU_GetError
                           .group:00000000 wm4.0.2a10773746a5c5ebb5552f50e466f80b
                           .group:00000000 wm4.stm32n6xx_hal_conf.h.21.004a06df6e15ac197e03f723792da58a
                           .group:00000000 wm4.stddef.h.39.0dc9006b34572d4d9cae4c8b422c4971
                           .group:00000000 wm4.arm_cmse.h.103.a0d15a79c4c9a67da8d5831704d7248e
                           .group:00000000 wm4.stm32n6xx.h.34.80585dd08aa426c932f6311fdb7386da
                           .group:00000000 wm4.stm32n657xx.h.26.acd272cb67318cc1a4791ce2f0720ca6
                           .group:00000000 wm4._newlib_version.h.4.411db44ea2338a62eca2f0777f81481b
                           .group:00000000 wm4.features.h.33.e0c9f337c65cb9f22ed5f23d082bc78b
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.cmsis_version.h.32.0ac195c83bb4537824e6ad1c47474b79
                           .group:00000000 wm4.core_cm55.h.68.832d5cf835639cc0d28219c3d2867330
                           .group:00000000 wm4.cmsis_gcc.h.26.7a5fd1a99dbedde687044a4433ab3e15
                           .group:00000000 wm4.core_cm55.h.196.52e437a270752da561676e507b35baeb
                           .group:00000000 wm4.mpu_armv8.h.32.9d72426c8e2b47753456dcb84802c5b3
                           .group:00000000 wm4.pmu_armv8.h.32.eaa95f88a71b29390b135fd81c071b6b
                           .group:00000000 wm4.core_cm55.h.4411.860dad8650880893dd57b815844f7186
                           .group:00000000 wm4.cachel1_armv7.h.32.abd77761a989e008b0c60891114a33c7
                           .group:00000000 wm4.stm32n657xx.h.575.1c2a5e6bedffc6f9083dcc857bc6d09d
ARM GAS  /tmp/ccvYD7zo.s 			page 66


                           .group:00000000 wm4.stm32n6xx.h.114.5cf793d8af485e14f110e3e24bde1aa5
                           .group:00000000 wm4.stm32_hal_legacy.h.22.87fb12bf5a1a1e00fc134f22bc9aa8c4
                           .group:00000000 wm4.newlib.h.7.591ac1bd65c1f5b34864757667a05252
                           .group:00000000 wm4.ieeefp.h.77.bd5feb87d9990dd328793ced294f6a87
                           .group:00000000 wm4.config.h.224.10ee1ad185d877c6e334e6581faab44d
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.cdefs.h.49.70fc7af612f78ddcace70fdd90b5623b
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.158.6f8e08a347b1cff664332fa350bfceb3
                           .group:00000000 wm4._types.h.127.3bdfe3ff8ea2d0985b03d9cbe93480e3
                           .group:00000000 wm4.reent.h.18.25503cdc8b7e55dd0d6ea7b3e5af7a03
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.78.6b87466b04591b1f1cb88c14fdf2ba9e
                           .group:00000000 wm4.math.h.13.47cfc34cae8a1153323939c4d32cf7c2
                           .group:00000000 wm4.stm32n6xx_hal_def.h.63.3a8f01490e8852464e9fcb69092e9c75
                           .group:00000000 wm4.stm32n6xx_ll_bus.h.38.2366a295ee4cdb04833997d3787fcd2d
                           .group:00000000 wm4.stm32n6xx_ll_rcc.h.21.002e22a16fd7f67dde6dce41e8ba9620
                           .group:00000000 wm4.stm32n6xx_hal_rcc.h.194.1cb1283e40f9bebcd3fba2a9a961838e
                           .group:00000000 wm4.stm32n6xx_hal_rcc_ex.h.21.79aa32178dfef625fbd20d362449acfa
                           .group:00000000 wm4.stm32n6xx_hal_rcc.h.4359.3f0b7ad33826d95438602c9aebc08af9
                           .group:00000000 wm4.stm32n6xx_hal_gpio.h.21.89d54af663b98eb8fc098192053f7eeb
                           .group:00000000 wm4.stm32n6xx_hal_gpio_ex.h.22.4acb2e3511a98bb48b81cfc8e09fd59e
                           .group:00000000 wm4.stm32n6xx_hal_rif.h.21.424d0bafb874a777dee3742a22e13037
                           .group:00000000 wm4.stm32n6xx_hal_dma.h.21.61e48c5c2e8d25d22177834b232fe45c
                           .group:00000000 wm4.stm32n6xx_hal_dma_ex.h.21.66e597beb090a165329d6ccf665e41bc
                           .group:00000000 wm4.stm32n6xx_hal_dma.h.1020.87e2180c009560b617c1f8208140c950
                           .group:00000000 wm4.stm32n6xx_hal_cortex.h.21.f493623cc58f9454ab4eae41e395c5cc
                           .group:00000000 wm4.stm32n6xx_hal_bsec.h.21.61b309e67dd810e28897a01b1b21a97f
                           .group:00000000 wm4.stm32n6xx_hal_dcmipp.h.21.f538bfd785c6469670251ac9bc7af55d
                           .group:00000000 wm4.stm32n6xx_hal_dma2d.h.21.75c8d46cdbb72970123b3f34ae2043d7
                           .group:00000000 wm4.stm32n6xx_hal_exti.h.21.fda87e715ea6b98239ec30171d1df594
                           .group:00000000 wm4.stm32n6xx_hal_gfxmmu.h.21.9784a9103143d48bd3c37389d0e0b8e6
                           .group:00000000 wm4.stm32n6xx_hal_i2c.h.21.3f483626ff64c5bf027265bb2e1d1331
                           .group:00000000 wm4.stm32n6xx_hal_i2c_ex.h.21.79e9196c22282cdaf6b4047893638c45
                           .group:00000000 wm4.stm32n6xx_hal_i2c.h.741.1084702632703acc669e4282b3043372
                           .group:00000000 wm4.stm32n6xx_hal_icache.h.21.194b4ec6e76f32b14f65c85616854850
                           .group:00000000 wm4.stm32n6xx_hal_ltdc.h.21.ae1eb09930e7e550e48e418ac5849e4d
                           .group:00000000 wm4.stm32n6xx_hal_ltdc.h.1002.b13ede7fc94ed5ad1c6768a157d2149a
                           .group:00000000 wm4.stm32n6xx_ll_usb.h.21.d518a5d97876c2ff49040c20a2c4a120
                           .group:00000000 wm4.stm32n6xx_hal_pcd.h.155.27040aac6844effe2af8c180caf1dd2e
                           .group:00000000 wm4.stm32n6xx_hal_pwr.h.21.cdb73e4869c3fed3fc84f901ec0e5f0a
                           .group:00000000 wm4.stm32n6xx_hal_pwr_ex.h.21.1a673224a58b0c1e5fad8eeda6514208
                           .group:00000000 wm4.stm32n6xx_hal_ramcfg.h.21.a62dfbb4d2c14e9a8c634a215e37bd3d
                           .group:00000000 wm4.stm32n6xx_hal_spi.h.21.9f810303326e2d91749800e9911f8e4d
                           .group:00000000 wm4.stm32n6xx_hal_spi.h.906.93ec0695066db4253cdbcb7d84358a0b
                           .group:00000000 wm4.stm32n6xx_hal_tim.h.21.839dd2b2a70382fb2c44f8f293a84d5f
                           .group:00000000 wm4.stm32n6xx_hal_tim_ex.h.21.e372d5ac63c13441211ea4ecbd353150
                           .group:00000000 wm4.stm32n6xx_hal_uart.h.21.230f549bfa0d5ebfd77bfb311b2aca15
                           .group:00000000 wm4.stm32n6xx_hal_uart_ex.h.21.a0d5511e1d0703b7b5278c8f5472b96d
                           .group:00000000 wm4.stm32n6xx_hal_xspi.h.21.e17898be2073b6b6b19faf30b4e304e9
                           .group:00000000 wm4.stm32n6xx_hal_cacheaxi.h.21.7c3375b7903ec42376e4883320997f74
                           .group:00000000 wm4.stm32n6xx_hal_gpu2d.h.21.48d0249122abad294a630c39cc4ebaed
                           .group:00000000 wm4.stm32n6xx_hal.h.81.5e59143eba07faca3e9aeaa5470826c8

UNDEFINED SYMBOLS
assert_failed
