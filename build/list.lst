ARM GAS  /tmp/ccmewmtc.s 			page 1


   1              		.arch armv8.1-m.main
   2              		.fpu fpv5-d16
   3              		.arch_extension dsp
   4              		.arch_extension fp
   5              		.arch_extension fp.dp
   6              		.arch_extension mve
   7              		.arch_extension mve.fp
   8              		.eabi_attribute 5, "cortex-m55"
   9              		.eabi_attribute 28, 1
  10              		.eabi_attribute 20, 1
  11              		.eabi_attribute 21, 1
  12              		.eabi_attribute 23, 3
  13              		.eabi_attribute 24, 1
  14              		.eabi_attribute 25, 1
  15              		.eabi_attribute 26, 1
  16              		.eabi_attribute 30, 6
  17              		.eabi_attribute 34, 1
  18              		.eabi_attribute 38, 1
  19              		.eabi_attribute 18, 4
  20              		.file	"list.c"
  21              		.text
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.file 1 "Lib/FreeRTOS/Source/list.c"
  25              		.section	.text.vListInitialise,"ax",%progbits
  26              		.align	1
  27              		.global	vListInitialise
  28              		.syntax unified
  29              		.thumb
  30              		.thumb_func
  32              	vListInitialise:
  33              	.LFB0:
   1:Lib/FreeRTOS/Source/list.c **** /*
   2:Lib/FreeRTOS/Source/list.c ****  * FreeRTOS Kernel V10.6.2
   3:Lib/FreeRTOS/Source/list.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Lib/FreeRTOS/Source/list.c ****  *
   5:Lib/FreeRTOS/Source/list.c ****  * SPDX-License-Identifier: MIT
   6:Lib/FreeRTOS/Source/list.c ****  *
   7:Lib/FreeRTOS/Source/list.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:Lib/FreeRTOS/Source/list.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:Lib/FreeRTOS/Source/list.c ****  * the Software without restriction, including without limitation the rights to
  10:Lib/FreeRTOS/Source/list.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:Lib/FreeRTOS/Source/list.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:Lib/FreeRTOS/Source/list.c ****  * subject to the following conditions:
  13:Lib/FreeRTOS/Source/list.c ****  *
  14:Lib/FreeRTOS/Source/list.c ****  * The above copyright notice and this permission notice shall be included in all
  15:Lib/FreeRTOS/Source/list.c ****  * copies or substantial portions of the Software.
  16:Lib/FreeRTOS/Source/list.c ****  *
  17:Lib/FreeRTOS/Source/list.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:Lib/FreeRTOS/Source/list.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:Lib/FreeRTOS/Source/list.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:Lib/FreeRTOS/Source/list.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:Lib/FreeRTOS/Source/list.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:Lib/FreeRTOS/Source/list.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:Lib/FreeRTOS/Source/list.c ****  *
  24:Lib/FreeRTOS/Source/list.c ****  * https://www.FreeRTOS.org
  25:Lib/FreeRTOS/Source/list.c ****  * https://github.com/FreeRTOS
ARM GAS  /tmp/ccmewmtc.s 			page 2


  26:Lib/FreeRTOS/Source/list.c ****  *
  27:Lib/FreeRTOS/Source/list.c ****  */
  28:Lib/FreeRTOS/Source/list.c **** 
  29:Lib/FreeRTOS/Source/list.c **** 
  30:Lib/FreeRTOS/Source/list.c **** #include <stdlib.h>
  31:Lib/FreeRTOS/Source/list.c **** 
  32:Lib/FreeRTOS/Source/list.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Lib/FreeRTOS/Source/list.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:Lib/FreeRTOS/Source/list.c ****  * task.h is included from an application file. */
  35:Lib/FreeRTOS/Source/list.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Lib/FreeRTOS/Source/list.c **** 
  37:Lib/FreeRTOS/Source/list.c **** #include "FreeRTOS.h"
  38:Lib/FreeRTOS/Source/list.c **** #include "list.h"
  39:Lib/FreeRTOS/Source/list.c **** 
  40:Lib/FreeRTOS/Source/list.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  41:Lib/FreeRTOS/Source/list.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be
  42:Lib/FreeRTOS/Source/list.c ****  * defined for the header files above, but not in this file, in order to
  43:Lib/FreeRTOS/Source/list.c ****  * generate the correct privileged Vs unprivileged linkage and placement. */
  44:Lib/FreeRTOS/Source/list.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  45:Lib/FreeRTOS/Source/list.c **** 
  46:Lib/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------
  47:Lib/FreeRTOS/Source/list.c **** * PUBLIC LIST API documented in list.h
  48:Lib/FreeRTOS/Source/list.c **** *----------------------------------------------------------*/
  49:Lib/FreeRTOS/Source/list.c **** 
  50:Lib/FreeRTOS/Source/list.c **** void vListInitialise( List_t * const pxList )
  51:Lib/FreeRTOS/Source/list.c **** {
  34              		.loc 1 51 1
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 8
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38              		@ link register save eliminated.
  39 0000 80B4     		push	{r7}
  40              		.cfi_def_cfa_offset 4
  41              		.cfi_offset 7, -4
  42 0002 83B0     		sub	sp, sp, #12
  43              		.cfi_def_cfa_offset 16
  44 0004 00AF     		add	r7, sp, #0
  45              		.cfi_def_cfa_register 7
  46 0006 7860     		str	r0, [r7, #4]
  52:Lib/FreeRTOS/Source/list.c ****     /* The list structure contains a list item which is used to mark the
  53:Lib/FreeRTOS/Source/list.c ****      * end of the list.  To initialise the list the list end is inserted
  54:Lib/FreeRTOS/Source/list.c ****      * as the only list entry. */
  55:Lib/FreeRTOS/Source/list.c ****     pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini li
  47              		.loc 1 55 40
  48 0008 7B68     		ldr	r3, [r7, #4]
  49 000a 03F10802 		add	r2, r3, #8
  50              		.loc 1 55 21
  51 000e 7B68     		ldr	r3, [r7, #4]
  52 0010 5A60     		str	r2, [r3, #4]
  56:Lib/FreeRTOS/Source/list.c **** 
  57:Lib/FreeRTOS/Source/list.c ****     listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
  58:Lib/FreeRTOS/Source/list.c **** 
  59:Lib/FreeRTOS/Source/list.c ****     /* The list end value is the highest possible value in the list to
  60:Lib/FreeRTOS/Source/list.c ****      * ensure it remains at the end of the list. */
  61:Lib/FreeRTOS/Source/list.c ****     pxList->xListEnd.xItemValue = portMAX_DELAY;
  53              		.loc 1 61 33
  54 0012 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccmewmtc.s 			page 3


  55 0014 4FF0FF32 		mov	r2, #-1
  56 0018 9A60     		str	r2, [r3, #8]
  62:Lib/FreeRTOS/Source/list.c **** 
  63:Lib/FreeRTOS/Source/list.c ****     /* The list end next and previous pointers point to itself so we know
  64:Lib/FreeRTOS/Source/list.c ****      * when the list is empty. */
  65:Lib/FreeRTOS/Source/list.c ****     pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087
  57              		.loc 1 65 48
  58 001a 7B68     		ldr	r3, [r7, #4]
  59 001c 03F10802 		add	r2, r3, #8
  60              		.loc 1 65 29
  61 0020 7B68     		ldr	r3, [r7, #4]
  62 0022 DA60     		str	r2, [r3, #12]
  66:Lib/FreeRTOS/Source/list.c ****     pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087
  63              		.loc 1 66 52
  64 0024 7B68     		ldr	r3, [r7, #4]
  65 0026 03F10802 		add	r2, r3, #8
  66              		.loc 1 66 33
  67 002a 7B68     		ldr	r3, [r7, #4]
  68 002c 1A61     		str	r2, [r3, #16]
  67:Lib/FreeRTOS/Source/list.c **** 
  68:Lib/FreeRTOS/Source/list.c ****     /* Initialize the remaining fields of xListEnd when it is a proper ListItem_t */
  69:Lib/FreeRTOS/Source/list.c ****     #if ( configUSE_MINI_LIST_ITEM == 0 )
  70:Lib/FreeRTOS/Source/list.c ****     {
  71:Lib/FreeRTOS/Source/list.c ****         pxList->xListEnd.pvOwner = NULL;
  72:Lib/FreeRTOS/Source/list.c ****         pxList->xListEnd.pxContainer = NULL;
  73:Lib/FreeRTOS/Source/list.c ****         listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
  74:Lib/FreeRTOS/Source/list.c ****     }
  75:Lib/FreeRTOS/Source/list.c ****     #endif
  76:Lib/FreeRTOS/Source/list.c **** 
  77:Lib/FreeRTOS/Source/list.c ****     pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  69              		.loc 1 77 29
  70 002e 7B68     		ldr	r3, [r7, #4]
  71 0030 0022     		movs	r2, #0
  72 0032 1A60     		str	r2, [r3]
  78:Lib/FreeRTOS/Source/list.c **** 
  79:Lib/FreeRTOS/Source/list.c ****     /* Write known values into the list if
  80:Lib/FreeRTOS/Source/list.c ****      * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  81:Lib/FreeRTOS/Source/list.c ****     listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
  82:Lib/FreeRTOS/Source/list.c ****     listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
  83:Lib/FreeRTOS/Source/list.c **** }
  73              		.loc 1 83 1
  74 0034 00BF     		nop
  75 0036 0C37     		adds	r7, r7, #12
  76              		.cfi_def_cfa_offset 4
  77 0038 BD46     		mov	sp, r7
  78              		.cfi_def_cfa_register 13
  79              		@ sp needed
  80 003a 5DF8047B 		ldr	r7, [sp], #4
  81              		.cfi_restore 7
  82              		.cfi_def_cfa_offset 0
  83 003e 7047     		bx	lr
  84              		.cfi_endproc
  85              	.LFE0:
  87              		.section	.text.vListInitialiseItem,"ax",%progbits
  88              		.align	1
  89              		.global	vListInitialiseItem
  90              		.syntax unified
ARM GAS  /tmp/ccmewmtc.s 			page 4


  91              		.thumb
  92              		.thumb_func
  94              	vListInitialiseItem:
  95              	.LFB1:
  84:Lib/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
  85:Lib/FreeRTOS/Source/list.c **** 
  86:Lib/FreeRTOS/Source/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
  87:Lib/FreeRTOS/Source/list.c **** {
  96              		.loc 1 87 1
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 8
  99              		@ frame_needed = 1, uses_anonymous_args = 0
 100              		@ link register save eliminated.
 101 0000 80B4     		push	{r7}
 102              		.cfi_def_cfa_offset 4
 103              		.cfi_offset 7, -4
 104 0002 83B0     		sub	sp, sp, #12
 105              		.cfi_def_cfa_offset 16
 106 0004 00AF     		add	r7, sp, #0
 107              		.cfi_def_cfa_register 7
 108 0006 7860     		str	r0, [r7, #4]
  88:Lib/FreeRTOS/Source/list.c ****     /* Make sure the list item is not recorded as being on a list. */
  89:Lib/FreeRTOS/Source/list.c ****     pxItem->pxContainer = NULL;
 109              		.loc 1 89 25
 110 0008 7B68     		ldr	r3, [r7, #4]
 111 000a 0022     		movs	r2, #0
 112 000c 1A61     		str	r2, [r3, #16]
  90:Lib/FreeRTOS/Source/list.c **** 
  91:Lib/FreeRTOS/Source/list.c ****     /* Write known values into the list item if
  92:Lib/FreeRTOS/Source/list.c ****      * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  93:Lib/FreeRTOS/Source/list.c ****     listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  94:Lib/FreeRTOS/Source/list.c ****     listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  95:Lib/FreeRTOS/Source/list.c **** }
 113              		.loc 1 95 1
 114 000e 00BF     		nop
 115 0010 0C37     		adds	r7, r7, #12
 116              		.cfi_def_cfa_offset 4
 117 0012 BD46     		mov	sp, r7
 118              		.cfi_def_cfa_register 13
 119              		@ sp needed
 120 0014 5DF8047B 		ldr	r7, [sp], #4
 121              		.cfi_restore 7
 122              		.cfi_def_cfa_offset 0
 123 0018 7047     		bx	lr
 124              		.cfi_endproc
 125              	.LFE1:
 127              		.section	.text.vListInsertEnd,"ax",%progbits
 128              		.align	1
 129              		.global	vListInsertEnd
 130              		.syntax unified
 131              		.thumb
 132              		.thumb_func
 134              	vListInsertEnd:
 135              	.LFB2:
  96:Lib/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
  97:Lib/FreeRTOS/Source/list.c **** 
  98:Lib/FreeRTOS/Source/list.c **** void vListInsertEnd( List_t * const pxList,
ARM GAS  /tmp/ccmewmtc.s 			page 5


  99:Lib/FreeRTOS/Source/list.c ****                      ListItem_t * const pxNewListItem )
 100:Lib/FreeRTOS/Source/list.c **** {
 136              		.loc 1 100 1
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 16
 139              		@ frame_needed = 1, uses_anonymous_args = 0
 140              		@ link register save eliminated.
 141 0000 80B4     		push	{r7}
 142              		.cfi_def_cfa_offset 4
 143              		.cfi_offset 7, -4
 144 0002 85B0     		sub	sp, sp, #20
 145              		.cfi_def_cfa_offset 24
 146 0004 00AF     		add	r7, sp, #0
 147              		.cfi_def_cfa_register 7
 148 0006 7860     		str	r0, [r7, #4]
 149 0008 3960     		str	r1, [r7]
 101:Lib/FreeRTOS/Source/list.c ****     ListItem_t * const pxIndex = pxList->pxIndex;
 150              		.loc 1 101 24
 151 000a 7B68     		ldr	r3, [r7, #4]
 152 000c 5B68     		ldr	r3, [r3, #4]
 153 000e FB60     		str	r3, [r7, #12]
 102:Lib/FreeRTOS/Source/list.c **** 
 103:Lib/FreeRTOS/Source/list.c ****     /* Only effective when configASSERT() is also defined, these tests may catch
 104:Lib/FreeRTOS/Source/list.c ****      * the list data structures being overwritten in memory.  They will not catch
 105:Lib/FreeRTOS/Source/list.c ****      * data errors caused by incorrect configuration or use of FreeRTOS. */
 106:Lib/FreeRTOS/Source/list.c ****     listTEST_LIST_INTEGRITY( pxList );
 107:Lib/FreeRTOS/Source/list.c ****     listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 108:Lib/FreeRTOS/Source/list.c **** 
 109:Lib/FreeRTOS/Source/list.c ****     /* Insert a new list item into pxList, but rather than sort the list,
 110:Lib/FreeRTOS/Source/list.c ****      * makes the new list item the last item to be removed by a call to
 111:Lib/FreeRTOS/Source/list.c ****      * listGET_OWNER_OF_NEXT_ENTRY(). */
 112:Lib/FreeRTOS/Source/list.c ****     pxNewListItem->pxNext = pxIndex;
 154              		.loc 1 112 27
 155 0010 3B68     		ldr	r3, [r7]
 156 0012 FA68     		ldr	r2, [r7, #12]
 157 0014 5A60     		str	r2, [r3, #4]
 113:Lib/FreeRTOS/Source/list.c ****     pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 158              		.loc 1 113 40
 159 0016 FB68     		ldr	r3, [r7, #12]
 160 0018 9A68     		ldr	r2, [r3, #8]
 161              		.loc 1 113 31
 162 001a 3B68     		ldr	r3, [r7]
 163 001c 9A60     		str	r2, [r3, #8]
 114:Lib/FreeRTOS/Source/list.c **** 
 115:Lib/FreeRTOS/Source/list.c ****     /* Only used during decision coverage testing. */
 116:Lib/FreeRTOS/Source/list.c ****     mtCOVERAGE_TEST_DELAY();
 117:Lib/FreeRTOS/Source/list.c **** 
 118:Lib/FreeRTOS/Source/list.c ****     pxIndex->pxPrevious->pxNext = pxNewListItem;
 164              		.loc 1 118 12
 165 001e FB68     		ldr	r3, [r7, #12]
 166 0020 9B68     		ldr	r3, [r3, #8]
 167              		.loc 1 118 33
 168 0022 3A68     		ldr	r2, [r7]
 169 0024 5A60     		str	r2, [r3, #4]
 119:Lib/FreeRTOS/Source/list.c ****     pxIndex->pxPrevious = pxNewListItem;
 170              		.loc 1 119 25
 171 0026 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccmewmtc.s 			page 6


 172 0028 3A68     		ldr	r2, [r7]
 173 002a 9A60     		str	r2, [r3, #8]
 120:Lib/FreeRTOS/Source/list.c **** 
 121:Lib/FreeRTOS/Source/list.c ****     /* Remember which list the item is in. */
 122:Lib/FreeRTOS/Source/list.c ****     pxNewListItem->pxContainer = pxList;
 174              		.loc 1 122 32
 175 002c 3B68     		ldr	r3, [r7]
 176 002e 7A68     		ldr	r2, [r7, #4]
 177 0030 1A61     		str	r2, [r3, #16]
 123:Lib/FreeRTOS/Source/list.c **** 
 124:Lib/FreeRTOS/Source/list.c ****     ( pxList->uxNumberOfItems )++;
 178              		.loc 1 124 13
 179 0032 7B68     		ldr	r3, [r7, #4]
 180 0034 1B68     		ldr	r3, [r3]
 181              		.loc 1 124 32
 182 0036 5A1C     		adds	r2, r3, #1
 183 0038 7B68     		ldr	r3, [r7, #4]
 184 003a 1A60     		str	r2, [r3]
 125:Lib/FreeRTOS/Source/list.c **** }
 185              		.loc 1 125 1
 186 003c 00BF     		nop
 187 003e 1437     		adds	r7, r7, #20
 188              		.cfi_def_cfa_offset 4
 189 0040 BD46     		mov	sp, r7
 190              		.cfi_def_cfa_register 13
 191              		@ sp needed
 192 0042 5DF8047B 		ldr	r7, [sp], #4
 193              		.cfi_restore 7
 194              		.cfi_def_cfa_offset 0
 195 0046 7047     		bx	lr
 196              		.cfi_endproc
 197              	.LFE2:
 199              		.section	.text.vListInsert,"ax",%progbits
 200              		.align	1
 201              		.global	vListInsert
 202              		.syntax unified
 203              		.thumb
 204              		.thumb_func
 206              	vListInsert:
 207              	.LFB3:
 126:Lib/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 127:Lib/FreeRTOS/Source/list.c **** 
 128:Lib/FreeRTOS/Source/list.c **** void vListInsert( List_t * const pxList,
 129:Lib/FreeRTOS/Source/list.c ****                   ListItem_t * const pxNewListItem )
 130:Lib/FreeRTOS/Source/list.c **** {
 208              		.loc 1 130 1
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 16
 211              		@ frame_needed = 1, uses_anonymous_args = 0
 212              		@ link register save eliminated.
 213 0000 80B4     		push	{r7}
 214              		.cfi_def_cfa_offset 4
 215              		.cfi_offset 7, -4
 216 0002 85B0     		sub	sp, sp, #20
 217              		.cfi_def_cfa_offset 24
 218 0004 00AF     		add	r7, sp, #0
 219              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccmewmtc.s 			page 7


 220 0006 7860     		str	r0, [r7, #4]
 221 0008 3960     		str	r1, [r7]
 131:Lib/FreeRTOS/Source/list.c ****     ListItem_t * pxIterator;
 132:Lib/FreeRTOS/Source/list.c ****     const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 222              		.loc 1 132 22
 223 000a 3B68     		ldr	r3, [r7]
 224 000c 1B68     		ldr	r3, [r3]
 225 000e BB60     		str	r3, [r7, #8]
 133:Lib/FreeRTOS/Source/list.c **** 
 134:Lib/FreeRTOS/Source/list.c ****     /* Only effective when configASSERT() is also defined, these tests may catch
 135:Lib/FreeRTOS/Source/list.c ****      * the list data structures being overwritten in memory.  They will not catch
 136:Lib/FreeRTOS/Source/list.c ****      * data errors caused by incorrect configuration or use of FreeRTOS. */
 137:Lib/FreeRTOS/Source/list.c ****     listTEST_LIST_INTEGRITY( pxList );
 138:Lib/FreeRTOS/Source/list.c ****     listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 139:Lib/FreeRTOS/Source/list.c **** 
 140:Lib/FreeRTOS/Source/list.c ****     /* Insert the new list item into the list, sorted in xItemValue order.
 141:Lib/FreeRTOS/Source/list.c ****      *
 142:Lib/FreeRTOS/Source/list.c ****      * If the list already contains a list item with the same item value then the
 143:Lib/FreeRTOS/Source/list.c ****      * new list item should be placed after it.  This ensures that TCBs which are
 144:Lib/FreeRTOS/Source/list.c ****      * stored in ready lists (all of which have the same xItemValue value) get a
 145:Lib/FreeRTOS/Source/list.c ****      * share of the CPU.  However, if the xItemValue is the same as the back marker
 146:Lib/FreeRTOS/Source/list.c ****      * the iteration loop below will not end.  Therefore the value is checked
 147:Lib/FreeRTOS/Source/list.c ****      * first, and the algorithm slightly modified if necessary. */
 148:Lib/FreeRTOS/Source/list.c ****     if( xValueOfInsertion == portMAX_DELAY )
 226              		.loc 1 148 7
 227 0010 BB68     		ldr	r3, [r7, #8]
 228 0012 B3F1FF3F 		cmp	r3, #-1
 229 0016 03D1     		bne	.L5
 149:Lib/FreeRTOS/Source/list.c ****     {
 150:Lib/FreeRTOS/Source/list.c ****         pxIterator = pxList->xListEnd.pxPrevious;
 230              		.loc 1 150 20
 231 0018 7B68     		ldr	r3, [r7, #4]
 232 001a 1B69     		ldr	r3, [r3, #16]
 233 001c FB60     		str	r3, [r7, #12]
 234 001e 0CE0     		b	.L6
 235              	.L5:
 151:Lib/FreeRTOS/Source/list.c ****     }
 152:Lib/FreeRTOS/Source/list.c ****     else
 153:Lib/FreeRTOS/Source/list.c ****     {
 154:Lib/FreeRTOS/Source/list.c ****         /* *** NOTE ***********************************************************
 155:Lib/FreeRTOS/Source/list.c ****         *  If you find your application is crashing here then likely causes are
 156:Lib/FreeRTOS/Source/list.c ****         *  listed below.  In addition see https://www.FreeRTOS.org/FAQHelp.html for
 157:Lib/FreeRTOS/Source/list.c ****         *  more tips, and ensure configASSERT() is defined!
 158:Lib/FreeRTOS/Source/list.c ****         *  https://www.FreeRTOS.org/a00110.html#configASSERT
 159:Lib/FreeRTOS/Source/list.c ****         *
 160:Lib/FreeRTOS/Source/list.c ****         *   1) Stack overflow -
 161:Lib/FreeRTOS/Source/list.c ****         *      see https://www.FreeRTOS.org/Stacks-and-stack-overflow-checking.html
 162:Lib/FreeRTOS/Source/list.c ****         *   2) Incorrect interrupt priority assignment, especially on Cortex-M
 163:Lib/FreeRTOS/Source/list.c ****         *      parts where numerically high priority values denote low actual
 164:Lib/FreeRTOS/Source/list.c ****         *      interrupt priorities, which can seem counter intuitive.  See
 165:Lib/FreeRTOS/Source/list.c ****         *      https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html and the definition
 166:Lib/FreeRTOS/Source/list.c ****         *      of configMAX_SYSCALL_INTERRUPT_PRIORITY on
 167:Lib/FreeRTOS/Source/list.c ****         *      https://www.FreeRTOS.org/a00110.html
 168:Lib/FreeRTOS/Source/list.c ****         *   3) Calling an API function from within a critical section or when
 169:Lib/FreeRTOS/Source/list.c ****         *      the scheduler is suspended, or calling an API function that does
 170:Lib/FreeRTOS/Source/list.c ****         *      not end in "FromISR" from an interrupt.
 171:Lib/FreeRTOS/Source/list.c ****         *   4) Using a queue or semaphore before it has been initialised or
ARM GAS  /tmp/ccmewmtc.s 			page 8


 172:Lib/FreeRTOS/Source/list.c ****         *      before the scheduler has been started (are interrupts firing
 173:Lib/FreeRTOS/Source/list.c ****         *      before vTaskStartScheduler() has been called?).
 174:Lib/FreeRTOS/Source/list.c ****         *   5) If the FreeRTOS port supports interrupt nesting then ensure that
 175:Lib/FreeRTOS/Source/list.c ****         *      the priority of the tick interrupt is at or below
 176:Lib/FreeRTOS/Source/list.c ****         *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
 177:Lib/FreeRTOS/Source/list.c ****         **********************************************************************/
 178:Lib/FreeRTOS/Source/list.c **** 
 179:Lib/FreeRTOS/Source/list.c ****         for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <=
 236              		.loc 1 179 25
 237 0020 7B68     		ldr	r3, [r7, #4]
 238 0022 0833     		adds	r3, r3, #8
 239 0024 FB60     		str	r3, [r7, #12]
 240              		.loc 1 179 9
 241 0026 02E0     		b	.L7
 242              	.L8:
 243              		.loc 1 179 131 discriminator 3
 244 0028 FB68     		ldr	r3, [r7, #12]
 245 002a 5B68     		ldr	r3, [r3, #4]
 246 002c FB60     		str	r3, [r7, #12]
 247              	.L7:
 248              		.loc 1 179 77 discriminator 1
 249 002e FB68     		ldr	r3, [r7, #12]
 250 0030 5B68     		ldr	r3, [r3, #4]
 251              		.loc 1 179 85 discriminator 1
 252 0032 1B68     		ldr	r3, [r3]
 253              		.loc 1 179 98 discriminator 1
 254 0034 BA68     		ldr	r2, [r7, #8]
 255 0036 9A42     		cmp	r2, r3
 256 0038 F6D2     		bcs	.L8
 257              	.L6:
 180:Lib/FreeRTOS/Source/list.c ****         {
 181:Lib/FreeRTOS/Source/list.c ****             /* There is nothing to do here, just iterating to the wanted
 182:Lib/FreeRTOS/Source/list.c ****              * insertion position. */
 183:Lib/FreeRTOS/Source/list.c ****         }
 184:Lib/FreeRTOS/Source/list.c ****     }
 185:Lib/FreeRTOS/Source/list.c **** 
 186:Lib/FreeRTOS/Source/list.c ****     pxNewListItem->pxNext = pxIterator->pxNext;
 258              		.loc 1 186 39
 259 003a FB68     		ldr	r3, [r7, #12]
 260 003c 5A68     		ldr	r2, [r3, #4]
 261              		.loc 1 186 27
 262 003e 3B68     		ldr	r3, [r7]
 263 0040 5A60     		str	r2, [r3, #4]
 187:Lib/FreeRTOS/Source/list.c ****     pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 264              		.loc 1 187 18
 265 0042 3B68     		ldr	r3, [r7]
 266 0044 5B68     		ldr	r3, [r3, #4]
 267              		.loc 1 187 39
 268 0046 3A68     		ldr	r2, [r7]
 269 0048 9A60     		str	r2, [r3, #8]
 188:Lib/FreeRTOS/Source/list.c ****     pxNewListItem->pxPrevious = pxIterator;
 270              		.loc 1 188 31
 271 004a 3B68     		ldr	r3, [r7]
 272 004c FA68     		ldr	r2, [r7, #12]
 273 004e 9A60     		str	r2, [r3, #8]
 189:Lib/FreeRTOS/Source/list.c ****     pxIterator->pxNext = pxNewListItem;
 274              		.loc 1 189 24
ARM GAS  /tmp/ccmewmtc.s 			page 9


 275 0050 FB68     		ldr	r3, [r7, #12]
 276 0052 3A68     		ldr	r2, [r7]
 277 0054 5A60     		str	r2, [r3, #4]
 190:Lib/FreeRTOS/Source/list.c **** 
 191:Lib/FreeRTOS/Source/list.c ****     /* Remember which list the item is in.  This allows fast removal of the
 192:Lib/FreeRTOS/Source/list.c ****      * item later. */
 193:Lib/FreeRTOS/Source/list.c ****     pxNewListItem->pxContainer = pxList;
 278              		.loc 1 193 32
 279 0056 3B68     		ldr	r3, [r7]
 280 0058 7A68     		ldr	r2, [r7, #4]
 281 005a 1A61     		str	r2, [r3, #16]
 194:Lib/FreeRTOS/Source/list.c **** 
 195:Lib/FreeRTOS/Source/list.c ****     ( pxList->uxNumberOfItems )++;
 282              		.loc 1 195 13
 283 005c 7B68     		ldr	r3, [r7, #4]
 284 005e 1B68     		ldr	r3, [r3]
 285              		.loc 1 195 32
 286 0060 5A1C     		adds	r2, r3, #1
 287 0062 7B68     		ldr	r3, [r7, #4]
 288 0064 1A60     		str	r2, [r3]
 196:Lib/FreeRTOS/Source/list.c **** }
 289              		.loc 1 196 1
 290 0066 00BF     		nop
 291 0068 1437     		adds	r7, r7, #20
 292              		.cfi_def_cfa_offset 4
 293 006a BD46     		mov	sp, r7
 294              		.cfi_def_cfa_register 13
 295              		@ sp needed
 296 006c 5DF8047B 		ldr	r7, [sp], #4
 297              		.cfi_restore 7
 298              		.cfi_def_cfa_offset 0
 299 0070 7047     		bx	lr
 300              		.cfi_endproc
 301              	.LFE3:
 303              		.section	.text.uxListRemove,"ax",%progbits
 304              		.align	1
 305              		.global	uxListRemove
 306              		.syntax unified
 307              		.thumb
 308              		.thumb_func
 310              	uxListRemove:
 311              	.LFB4:
 197:Lib/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 198:Lib/FreeRTOS/Source/list.c **** 
 199:Lib/FreeRTOS/Source/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 200:Lib/FreeRTOS/Source/list.c **** {
 312              		.loc 1 200 1
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 16
 315              		@ frame_needed = 1, uses_anonymous_args = 0
 316              		@ link register save eliminated.
 317 0000 80B4     		push	{r7}
 318              		.cfi_def_cfa_offset 4
 319              		.cfi_offset 7, -4
 320 0002 85B0     		sub	sp, sp, #20
 321              		.cfi_def_cfa_offset 24
 322 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccmewmtc.s 			page 10


 323              		.cfi_def_cfa_register 7
 324 0006 7860     		str	r0, [r7, #4]
 201:Lib/FreeRTOS/Source/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 202:Lib/FreeRTOS/Source/list.c ****  * item. */
 203:Lib/FreeRTOS/Source/list.c ****     List_t * const pxList = pxItemToRemove->pxContainer;
 325              		.loc 1 203 20
 326 0008 7B68     		ldr	r3, [r7, #4]
 327 000a 1B69     		ldr	r3, [r3, #16]
 328 000c FB60     		str	r3, [r7, #12]
 204:Lib/FreeRTOS/Source/list.c **** 
 205:Lib/FreeRTOS/Source/list.c ****     pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 329              		.loc 1 205 19
 330 000e 7B68     		ldr	r3, [r7, #4]
 331 0010 5B68     		ldr	r3, [r3, #4]
 332              		.loc 1 205 56
 333 0012 7A68     		ldr	r2, [r7, #4]
 334 0014 9268     		ldr	r2, [r2, #8]
 335              		.loc 1 205 40
 336 0016 9A60     		str	r2, [r3, #8]
 206:Lib/FreeRTOS/Source/list.c ****     pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 337              		.loc 1 206 19
 338 0018 7B68     		ldr	r3, [r7, #4]
 339 001a 9B68     		ldr	r3, [r3, #8]
 340              		.loc 1 206 56
 341 001c 7A68     		ldr	r2, [r7, #4]
 342 001e 5268     		ldr	r2, [r2, #4]
 343              		.loc 1 206 40
 344 0020 5A60     		str	r2, [r3, #4]
 207:Lib/FreeRTOS/Source/list.c **** 
 208:Lib/FreeRTOS/Source/list.c ****     /* Only used during decision coverage testing. */
 209:Lib/FreeRTOS/Source/list.c ****     mtCOVERAGE_TEST_DELAY();
 210:Lib/FreeRTOS/Source/list.c **** 
 211:Lib/FreeRTOS/Source/list.c ****     /* Make sure the index is left pointing to a valid item. */
 212:Lib/FreeRTOS/Source/list.c ****     if( pxList->pxIndex == pxItemToRemove )
 345              		.loc 1 212 15
 346 0022 FB68     		ldr	r3, [r7, #12]
 347 0024 5B68     		ldr	r3, [r3, #4]
 348              		.loc 1 212 7
 349 0026 7A68     		ldr	r2, [r7, #4]
 350 0028 9A42     		cmp	r2, r3
 351 002a 03D1     		bne	.L10
 213:Lib/FreeRTOS/Source/list.c ****     {
 214:Lib/FreeRTOS/Source/list.c ****         pxList->pxIndex = pxItemToRemove->pxPrevious;
 352              		.loc 1 214 41
 353 002c 7B68     		ldr	r3, [r7, #4]
 354 002e 9A68     		ldr	r2, [r3, #8]
 355              		.loc 1 214 25
 356 0030 FB68     		ldr	r3, [r7, #12]
 357 0032 5A60     		str	r2, [r3, #4]
 358              	.L10:
 215:Lib/FreeRTOS/Source/list.c ****     }
 216:Lib/FreeRTOS/Source/list.c ****     else
 217:Lib/FreeRTOS/Source/list.c ****     {
 218:Lib/FreeRTOS/Source/list.c ****         mtCOVERAGE_TEST_MARKER();
 219:Lib/FreeRTOS/Source/list.c ****     }
 220:Lib/FreeRTOS/Source/list.c **** 
 221:Lib/FreeRTOS/Source/list.c ****     pxItemToRemove->pxContainer = NULL;
ARM GAS  /tmp/ccmewmtc.s 			page 11


 359              		.loc 1 221 33
 360 0034 7B68     		ldr	r3, [r7, #4]
 361 0036 0022     		movs	r2, #0
 362 0038 1A61     		str	r2, [r3, #16]
 222:Lib/FreeRTOS/Source/list.c ****     ( pxList->uxNumberOfItems )--;
 363              		.loc 1 222 13
 364 003a FB68     		ldr	r3, [r7, #12]
 365 003c 1B68     		ldr	r3, [r3]
 366              		.loc 1 222 32
 367 003e 5A1E     		subs	r2, r3, #1
 368 0040 FB68     		ldr	r3, [r7, #12]
 369 0042 1A60     		str	r2, [r3]
 223:Lib/FreeRTOS/Source/list.c **** 
 224:Lib/FreeRTOS/Source/list.c ****     return pxList->uxNumberOfItems;
 370              		.loc 1 224 18
 371 0044 FB68     		ldr	r3, [r7, #12]
 372 0046 1B68     		ldr	r3, [r3]
 225:Lib/FreeRTOS/Source/list.c **** }
 373              		.loc 1 225 1
 374 0048 1846     		mov	r0, r3
 375 004a 1437     		adds	r7, r7, #20
 376              		.cfi_def_cfa_offset 4
 377 004c BD46     		mov	sp, r7
 378              		.cfi_def_cfa_register 13
 379              		@ sp needed
 380 004e 5DF8047B 		ldr	r7, [sp], #4
 381              		.cfi_restore 7
 382              		.cfi_def_cfa_offset 0
 383 0052 7047     		bx	lr
 384              		.cfi_endproc
 385              	.LFE4:
 387              		.text
 388              	.Letext0:
 389              		.file 2 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 390              		.file 3 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 391              		.file 4 "Lib/FreeRTOS/Source/portable/GCC/ARM_CM55_NTZ/non_secure/portmacrocommon.h"
 392              		.file 5 "Lib/FreeRTOS/Source/include/list.h"
ARM GAS  /tmp/ccmewmtc.s 			page 12


DEFINED SYMBOLS
                            *ABS*:00000000 list.c
     /tmp/ccmewmtc.s:26     .text.vListInitialise:00000000 $t
     /tmp/ccmewmtc.s:32     .text.vListInitialise:00000000 vListInitialise
     /tmp/ccmewmtc.s:88     .text.vListInitialiseItem:00000000 $t
     /tmp/ccmewmtc.s:94     .text.vListInitialiseItem:00000000 vListInitialiseItem
     /tmp/ccmewmtc.s:128    .text.vListInsertEnd:00000000 $t
     /tmp/ccmewmtc.s:134    .text.vListInsertEnd:00000000 vListInsertEnd
     /tmp/ccmewmtc.s:200    .text.vListInsert:00000000 $t
     /tmp/ccmewmtc.s:206    .text.vListInsert:00000000 vListInsert
     /tmp/ccmewmtc.s:304    .text.uxListRemove:00000000 $t
     /tmp/ccmewmtc.s:310    .text.uxListRemove:00000000 uxListRemove
                           .group:00000000 wm4.0.2a10773746a5c5ebb5552f50e466f80b
                           .group:00000000 wm4.ieeefp.h.77.bd5feb87d9990dd328793ced294f6a87
                           .group:00000000 wm4._newlib_version.h.4.411db44ea2338a62eca2f0777f81481b
                           .group:00000000 wm4.newlib.h.27.4b972ceed5d01f491020c20f1e546cab
                           .group:00000000 wm4.features.h.22.9dfb1293666eb4caf24cccb81c86a551
                           .group:00000000 wm4.config.h.224.10ee1ad185d877c6e334e6581faab44d
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.185.882514a1a6169ceba9142f401cbe27c6
                           .group:00000000 wm4.stddef.h.39.794fa375de48dda278c4aebb5c74aa5b
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4.cdefs.h.49.70fc7af612f78ddcace70fdd90b5623b
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.158.6f8e08a347b1cff664332fa350bfceb3
                           .group:00000000 wm4._types.h.127.3bdfe3ff8ea2d0985b03d9cbe93480e3
                           .group:00000000 wm4.reent.h.18.25503cdc8b7e55dd0d6ea7b3e5af7a03
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.78.6b87466b04591b1f1cb88c14fdf2ba9e
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.FreeRTOS.h.59.647b1b0da38e4e98108aae13c8abe9ee
                           .group:00000000 wm4.assert.h.11.db24e541f16414db224bf986d21017e2
                           .group:00000000 wm4.FreeRTOSConfig.h.59.2629c72cff9e6dbe880a2dc225eae516
                           .group:00000000 wm4.FreeRTOS.h.80.7742fabaf5accf3762dc12f7f259a8a0
                           .group:00000000 wm4.projdefs.h.30.55a824156f299c075c33148a9fdadb99
                           .group:00000000 wm4.portmacro.h.30.cbb4b2da41f551c2a9904f0d03a1ce3e
                           .group:00000000 wm4.portmacrocommon.h.30.d5cb67896ab50a95311be7e023da5c4f
                           .group:00000000 wm4.portmacro.h.68.4051ecf710d074fb55b16d91dfebeeaa
                           .group:00000000 wm4.portable.h.61.d557c57974d490f056246a26cdcddd6c
                           .group:00000000 wm4.mpu_wrappers.h.30.ccc5f1a6903f941a88c268f5f62af3fe
                           .group:00000000 wm4.portable.h.189.522b8bd52a171d3fd1432ef06d0caa63
                           .group:00000000 wm4.FreeRTOS.h.102.fb871f3e464d99c5a57b3115545a02ad
                           .group:00000000 wm4.list.h.59.bce6419520cd4f5f98779a1530bf2118

NO UNDEFINED SYMBOLS
