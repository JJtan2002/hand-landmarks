ARM GAS  /tmp/cccWNSAq.s 			page 1


   1              		.arch armv8.1-m.main
   2              		.fpu fpv5-d16
   3              		.arch_extension dsp
   4              		.arch_extension fp
   5              		.arch_extension fp.dp
   6              		.arch_extension mve
   7              		.arch_extension mve.fp
   8              		.eabi_attribute 5, "cortex-m55"
   9              		.eabi_attribute 28, 1
  10              		.eabi_attribute 20, 1
  11              		.eabi_attribute 21, 1
  12              		.eabi_attribute 23, 3
  13              		.eabi_attribute 24, 1
  14              		.eabi_attribute 25, 1
  15              		.eabi_attribute 26, 1
  16              		.eabi_attribute 30, 6
  17              		.eabi_attribute 34, 1
  18              		.eabi_attribute 38, 1
  19              		.eabi_attribute 18, 4
  20              		.file	"timers.c"
  21              		.text
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.file 1 "Lib/FreeRTOS/Source/timers.c"
  25              		.section	.bss.xActiveTimerList1,"aw",%nobits
  26              		.align	2
  29              	xActiveTimerList1:
  30 0000 00000000 		.space	20
  30      00000000 
  30      00000000 
  30      00000000 
  30      00000000 
  31              		.section	.bss.xActiveTimerList2,"aw",%nobits
  32              		.align	2
  35              	xActiveTimerList2:
  36 0000 00000000 		.space	20
  36      00000000 
  36      00000000 
  36      00000000 
  36      00000000 
  37              		.section	.bss.pxCurrentTimerList,"aw",%nobits
  38              		.align	2
  41              	pxCurrentTimerList:
  42 0000 00000000 		.space	4
  43              		.section	.bss.pxOverflowTimerList,"aw",%nobits
  44              		.align	2
  47              	pxOverflowTimerList:
  48 0000 00000000 		.space	4
  49              		.section	.bss.xTimerQueue,"aw",%nobits
  50              		.align	2
  53              	xTimerQueue:
  54 0000 00000000 		.space	4
  55              		.section	.bss.xTimerTaskHandle,"aw",%nobits
  56              		.align	2
  59              	xTimerTaskHandle:
  60 0000 00000000 		.space	4
  61              		.section	.rodata
ARM GAS  /tmp/cccWNSAq.s 			page 2


  62              		.align	2
  63              	.LC0:
  64 0000 546D7220 		.ascii	"Tmr Svc\000"
  64      53766300 
  65              		.align	2
  66              	.LC1:
  67 0008 3000     		.ascii	"0\000"
  68 000a 0000     		.align	2
  69              	.LC2:
  70 000c 4C69622F 		.ascii	"Lib/FreeRTOS/Source/timers.c\000"
  70      46726565 
  70      52544F53 
  70      2F536F75 
  70      7263652F 
  71              		.section	.text.xTimerCreateTimerTask,"ax",%progbits
  72              		.align	1
  73              		.global	xTimerCreateTimerTask
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  78              	xTimerCreateTimerTask:
  79              	.LFB0:
   1:Lib/FreeRTOS/Source/timers.c **** /*
   2:Lib/FreeRTOS/Source/timers.c ****  * FreeRTOS Kernel V10.6.2
   3:Lib/FreeRTOS/Source/timers.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Lib/FreeRTOS/Source/timers.c ****  *
   5:Lib/FreeRTOS/Source/timers.c ****  * SPDX-License-Identifier: MIT
   6:Lib/FreeRTOS/Source/timers.c ****  *
   7:Lib/FreeRTOS/Source/timers.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:Lib/FreeRTOS/Source/timers.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:Lib/FreeRTOS/Source/timers.c ****  * the Software without restriction, including without limitation the rights to
  10:Lib/FreeRTOS/Source/timers.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:Lib/FreeRTOS/Source/timers.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:Lib/FreeRTOS/Source/timers.c ****  * subject to the following conditions:
  13:Lib/FreeRTOS/Source/timers.c ****  *
  14:Lib/FreeRTOS/Source/timers.c ****  * The above copyright notice and this permission notice shall be included in all
  15:Lib/FreeRTOS/Source/timers.c ****  * copies or substantial portions of the Software.
  16:Lib/FreeRTOS/Source/timers.c ****  *
  17:Lib/FreeRTOS/Source/timers.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:Lib/FreeRTOS/Source/timers.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:Lib/FreeRTOS/Source/timers.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:Lib/FreeRTOS/Source/timers.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:Lib/FreeRTOS/Source/timers.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:Lib/FreeRTOS/Source/timers.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:Lib/FreeRTOS/Source/timers.c ****  *
  24:Lib/FreeRTOS/Source/timers.c ****  * https://www.FreeRTOS.org
  25:Lib/FreeRTOS/Source/timers.c ****  * https://github.com/FreeRTOS
  26:Lib/FreeRTOS/Source/timers.c ****  *
  27:Lib/FreeRTOS/Source/timers.c ****  */
  28:Lib/FreeRTOS/Source/timers.c **** 
  29:Lib/FreeRTOS/Source/timers.c **** /* Standard includes. */
  30:Lib/FreeRTOS/Source/timers.c **** #include <stdlib.h>
  31:Lib/FreeRTOS/Source/timers.c **** 
  32:Lib/FreeRTOS/Source/timers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Lib/FreeRTOS/Source/timers.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:Lib/FreeRTOS/Source/timers.c ****  * task.h is included from an application file. */
  35:Lib/FreeRTOS/Source/timers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
ARM GAS  /tmp/cccWNSAq.s 			page 3


  36:Lib/FreeRTOS/Source/timers.c **** 
  37:Lib/FreeRTOS/Source/timers.c **** #include "FreeRTOS.h"
  38:Lib/FreeRTOS/Source/timers.c **** #include "task.h"
  39:Lib/FreeRTOS/Source/timers.c **** #include "queue.h"
  40:Lib/FreeRTOS/Source/timers.c **** #include "timers.h"
  41:Lib/FreeRTOS/Source/timers.c **** 
  42:Lib/FreeRTOS/Source/timers.c **** #if ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 0 )
  43:Lib/FreeRTOS/Source/timers.c ****     #error configUSE_TIMERS must be set to 1 to make the xTimerPendFunctionCall() function availabl
  44:Lib/FreeRTOS/Source/timers.c **** #endif
  45:Lib/FreeRTOS/Source/timers.c **** 
  46:Lib/FreeRTOS/Source/timers.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  47:Lib/FreeRTOS/Source/timers.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  48:Lib/FreeRTOS/Source/timers.c ****  * for the header files above, but not in this file, in order to generate the
  49:Lib/FreeRTOS/Source/timers.c ****  * correct privileged Vs unprivileged linkage and placement. */
  50:Lib/FreeRTOS/Source/timers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e9021 !e961 !e750. */
  51:Lib/FreeRTOS/Source/timers.c **** 
  52:Lib/FreeRTOS/Source/timers.c **** 
  53:Lib/FreeRTOS/Source/timers.c **** /* This entire source file will be skipped if the application is not configured
  54:Lib/FreeRTOS/Source/timers.c ****  * to include software timer functionality.  This #if is closed at the very bottom
  55:Lib/FreeRTOS/Source/timers.c ****  * of this file.  If you want to include software timer functionality then ensure
  56:Lib/FreeRTOS/Source/timers.c ****  * configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
  57:Lib/FreeRTOS/Source/timers.c **** #if ( configUSE_TIMERS == 1 )
  58:Lib/FreeRTOS/Source/timers.c **** 
  59:Lib/FreeRTOS/Source/timers.c **** /* Misc definitions. */
  60:Lib/FreeRTOS/Source/timers.c ****     #define tmrNO_DELAY                    ( ( TickType_t ) 0U )
  61:Lib/FreeRTOS/Source/timers.c ****     #define tmrMAX_TIME_BEFORE_OVERFLOW    ( ( TickType_t ) -1 )
  62:Lib/FreeRTOS/Source/timers.c **** 
  63:Lib/FreeRTOS/Source/timers.c **** /* The name assigned to the timer service task.  This can be overridden by
  64:Lib/FreeRTOS/Source/timers.c ****  * defining trmTIMER_SERVICE_TASK_NAME in FreeRTOSConfig.h. */
  65:Lib/FreeRTOS/Source/timers.c ****     #ifndef configTIMER_SERVICE_TASK_NAME
  66:Lib/FreeRTOS/Source/timers.c ****         #define configTIMER_SERVICE_TASK_NAME    "Tmr Svc"
  67:Lib/FreeRTOS/Source/timers.c ****     #endif
  68:Lib/FreeRTOS/Source/timers.c **** 
  69:Lib/FreeRTOS/Source/timers.c **** /* Bit definitions used in the ucStatus member of a timer structure. */
  70:Lib/FreeRTOS/Source/timers.c ****     #define tmrSTATUS_IS_ACTIVE                  ( ( uint8_t ) 0x01 )
  71:Lib/FreeRTOS/Source/timers.c ****     #define tmrSTATUS_IS_STATICALLY_ALLOCATED    ( ( uint8_t ) 0x02 )
  72:Lib/FreeRTOS/Source/timers.c ****     #define tmrSTATUS_IS_AUTORELOAD              ( ( uint8_t ) 0x04 )
  73:Lib/FreeRTOS/Source/timers.c **** 
  74:Lib/FreeRTOS/Source/timers.c **** /* The definition of the timers themselves. */
  75:Lib/FreeRTOS/Source/timers.c ****     typedef struct tmrTimerControl                  /* The old naming convention is used to prevent
  76:Lib/FreeRTOS/Source/timers.c ****     {
  77:Lib/FreeRTOS/Source/timers.c ****         const char * pcTimerName;                   /**< Text name.  This is not used by the kernel
  78:Lib/FreeRTOS/Source/timers.c ****         ListItem_t xTimerListItem;                  /**< Standard linked list item as used by all k
  79:Lib/FreeRTOS/Source/timers.c ****         TickType_t xTimerPeriodInTicks;             /**< How quickly and often the timer expires. *
  80:Lib/FreeRTOS/Source/timers.c ****         void * pvTimerID;                           /**< An ID to identify the timer.  This allows 
  81:Lib/FreeRTOS/Source/timers.c ****         TimerCallbackFunction_t pxCallbackFunction; /**< The function that will be called when the 
  82:Lib/FreeRTOS/Source/timers.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
  83:Lib/FreeRTOS/Source/timers.c ****             UBaseType_t uxTimerNumber;              /**< An ID assigned by trace tools such as Free
  84:Lib/FreeRTOS/Source/timers.c ****         #endif
  85:Lib/FreeRTOS/Source/timers.c ****         uint8_t ucStatus;                           /**< Holds bits to say if the timer was statica
  86:Lib/FreeRTOS/Source/timers.c ****     } xTIMER;
  87:Lib/FreeRTOS/Source/timers.c **** 
  88:Lib/FreeRTOS/Source/timers.c **** /* The old xTIMER name is maintained above then typedefed to the new Timer_t
  89:Lib/FreeRTOS/Source/timers.c ****  * name below to enable the use of older kernel aware debuggers. */
  90:Lib/FreeRTOS/Source/timers.c ****     typedef xTIMER Timer_t;
  91:Lib/FreeRTOS/Source/timers.c **** 
  92:Lib/FreeRTOS/Source/timers.c **** /* The definition of messages that can be sent and received on the timer queue.
ARM GAS  /tmp/cccWNSAq.s 			page 4


  93:Lib/FreeRTOS/Source/timers.c ****  * Two types of message can be queued - messages that manipulate a software timer,
  94:Lib/FreeRTOS/Source/timers.c ****  * and messages that request the execution of a non-timer related callback.  The
  95:Lib/FreeRTOS/Source/timers.c ****  * two message types are defined in two separate structures, xTimerParametersType
  96:Lib/FreeRTOS/Source/timers.c ****  * and xCallbackParametersType respectively. */
  97:Lib/FreeRTOS/Source/timers.c ****     typedef struct tmrTimerParameters
  98:Lib/FreeRTOS/Source/timers.c ****     {
  99:Lib/FreeRTOS/Source/timers.c ****         TickType_t xMessageValue; /**< An optional value used by a subset of commands, for example,
 100:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer;        /**< The timer to which the command will be applied. */
 101:Lib/FreeRTOS/Source/timers.c ****     } TimerParameter_t;
 102:Lib/FreeRTOS/Source/timers.c **** 
 103:Lib/FreeRTOS/Source/timers.c **** 
 104:Lib/FreeRTOS/Source/timers.c ****     typedef struct tmrCallbackParameters
 105:Lib/FreeRTOS/Source/timers.c ****     {
 106:Lib/FreeRTOS/Source/timers.c ****         PendedFunction_t pxCallbackFunction; /* << The callback function to execute. */
 107:Lib/FreeRTOS/Source/timers.c ****         void * pvParameter1;                 /* << The value that will be used as the callback func
 108:Lib/FreeRTOS/Source/timers.c ****         uint32_t ulParameter2;               /* << The value that will be used as the callback func
 109:Lib/FreeRTOS/Source/timers.c ****     } CallbackParameters_t;
 110:Lib/FreeRTOS/Source/timers.c **** 
 111:Lib/FreeRTOS/Source/timers.c **** /* The structure that contains the two message types, along with an identifier
 112:Lib/FreeRTOS/Source/timers.c ****  * that is used to determine which message type is valid. */
 113:Lib/FreeRTOS/Source/timers.c ****     typedef struct tmrTimerQueueMessage
 114:Lib/FreeRTOS/Source/timers.c ****     {
 115:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xMessageID; /**< The command being sent to the timer service task. */
 116:Lib/FreeRTOS/Source/timers.c ****         union
 117:Lib/FreeRTOS/Source/timers.c ****         {
 118:Lib/FreeRTOS/Source/timers.c ****             TimerParameter_t xTimerParameters;
 119:Lib/FreeRTOS/Source/timers.c **** 
 120:Lib/FreeRTOS/Source/timers.c ****             /* Don't include xCallbackParameters if it is not going to be used as
 121:Lib/FreeRTOS/Source/timers.c ****              * it makes the structure (and therefore the timer queue) larger. */
 122:Lib/FreeRTOS/Source/timers.c ****             #if ( INCLUDE_xTimerPendFunctionCall == 1 )
 123:Lib/FreeRTOS/Source/timers.c ****                 CallbackParameters_t xCallbackParameters;
 124:Lib/FreeRTOS/Source/timers.c ****             #endif /* INCLUDE_xTimerPendFunctionCall */
 125:Lib/FreeRTOS/Source/timers.c ****         } u;
 126:Lib/FreeRTOS/Source/timers.c ****     } DaemonTaskMessage_t;
 127:Lib/FreeRTOS/Source/timers.c **** 
 128:Lib/FreeRTOS/Source/timers.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 129:Lib/FreeRTOS/Source/timers.c ****  * which static variables must be declared volatile. */
 130:Lib/FreeRTOS/Source/timers.c **** 
 131:Lib/FreeRTOS/Source/timers.c **** /* The list in which active timers are stored.  Timers are referenced in expire
 132:Lib/FreeRTOS/Source/timers.c ****  * time order, with the nearest expiry time at the front of the list.  Only the
 133:Lib/FreeRTOS/Source/timers.c ****  * timer service task is allowed to access these lists.
 134:Lib/FreeRTOS/Source/timers.c ****  * xActiveTimerList1 and xActiveTimerList2 could be at function scope but that
 135:Lib/FreeRTOS/Source/timers.c ****  * breaks some kernel aware debuggers, and debuggers that reply on removing the
 136:Lib/FreeRTOS/Source/timers.c ****  * static qualifier. */
 137:Lib/FreeRTOS/Source/timers.c ****     PRIVILEGED_DATA static List_t xActiveTimerList1;
 138:Lib/FreeRTOS/Source/timers.c ****     PRIVILEGED_DATA static List_t xActiveTimerList2;
 139:Lib/FreeRTOS/Source/timers.c ****     PRIVILEGED_DATA static List_t * pxCurrentTimerList;
 140:Lib/FreeRTOS/Source/timers.c ****     PRIVILEGED_DATA static List_t * pxOverflowTimerList;
 141:Lib/FreeRTOS/Source/timers.c **** 
 142:Lib/FreeRTOS/Source/timers.c **** /* A queue that is used to send commands to the timer service task. */
 143:Lib/FreeRTOS/Source/timers.c ****     PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;
 144:Lib/FreeRTOS/Source/timers.c ****     PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;
 145:Lib/FreeRTOS/Source/timers.c **** 
 146:Lib/FreeRTOS/Source/timers.c **** /*lint -restore */
 147:Lib/FreeRTOS/Source/timers.c **** 
 148:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 149:Lib/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/cccWNSAq.s 			page 5


 150:Lib/FreeRTOS/Source/timers.c **** /*
 151:Lib/FreeRTOS/Source/timers.c ****  * Initialise the infrastructure used by the timer service task if it has not
 152:Lib/FreeRTOS/Source/timers.c ****  * been initialised already.
 153:Lib/FreeRTOS/Source/timers.c ****  */
 154:Lib/FreeRTOS/Source/timers.c ****     static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
 155:Lib/FreeRTOS/Source/timers.c **** 
 156:Lib/FreeRTOS/Source/timers.c **** /*
 157:Lib/FreeRTOS/Source/timers.c ****  * The timer service task (daemon).  Timer functionality is controlled by this
 158:Lib/FreeRTOS/Source/timers.c ****  * task.  Other tasks communicate with the timer service task using the
 159:Lib/FreeRTOS/Source/timers.c ****  * xTimerQueue queue.
 160:Lib/FreeRTOS/Source/timers.c ****  */
 161:Lib/FreeRTOS/Source/timers.c ****     static portTASK_FUNCTION_PROTO( prvTimerTask, pvParameters ) PRIVILEGED_FUNCTION;
 162:Lib/FreeRTOS/Source/timers.c **** 
 163:Lib/FreeRTOS/Source/timers.c **** /*
 164:Lib/FreeRTOS/Source/timers.c ****  * Called by the timer service task to interpret and process a command it
 165:Lib/FreeRTOS/Source/timers.c ****  * received on the timer queue.
 166:Lib/FreeRTOS/Source/timers.c ****  */
 167:Lib/FreeRTOS/Source/timers.c ****     static void prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
 168:Lib/FreeRTOS/Source/timers.c **** 
 169:Lib/FreeRTOS/Source/timers.c **** /*
 170:Lib/FreeRTOS/Source/timers.c ****  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
 171:Lib/FreeRTOS/Source/timers.c ****  * depending on if the expire time causes a timer counter overflow.
 172:Lib/FreeRTOS/Source/timers.c ****  */
 173:Lib/FreeRTOS/Source/timers.c ****     static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
 174:Lib/FreeRTOS/Source/timers.c ****                                                   const TickType_t xNextExpiryTime,
 175:Lib/FreeRTOS/Source/timers.c ****                                                   const TickType_t xTimeNow,
 176:Lib/FreeRTOS/Source/timers.c ****                                                   const TickType_t xCommandTime ) PRIVILEGED_FUNCTI
 177:Lib/FreeRTOS/Source/timers.c **** 
 178:Lib/FreeRTOS/Source/timers.c **** /*
 179:Lib/FreeRTOS/Source/timers.c ****  * Reload the specified auto-reload timer.  If the reloading is backlogged,
 180:Lib/FreeRTOS/Source/timers.c ****  * clear the backlog, calling the callback for each additional reload.  When
 181:Lib/FreeRTOS/Source/timers.c ****  * this function returns, the next expiry time is after xTimeNow.
 182:Lib/FreeRTOS/Source/timers.c ****  */
 183:Lib/FreeRTOS/Source/timers.c ****     static void prvReloadTimer( Timer_t * const pxTimer,
 184:Lib/FreeRTOS/Source/timers.c ****                                 TickType_t xExpiredTime,
 185:Lib/FreeRTOS/Source/timers.c ****                                 const TickType_t xTimeNow ) PRIVILEGED_FUNCTION;
 186:Lib/FreeRTOS/Source/timers.c **** 
 187:Lib/FreeRTOS/Source/timers.c **** /*
 188:Lib/FreeRTOS/Source/timers.c ****  * An active timer has reached its expire time.  Reload the timer if it is an
 189:Lib/FreeRTOS/Source/timers.c ****  * auto-reload timer, then call its callback.
 190:Lib/FreeRTOS/Source/timers.c ****  */
 191:Lib/FreeRTOS/Source/timers.c ****     static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
 192:Lib/FreeRTOS/Source/timers.c ****                                         const TickType_t xTimeNow ) PRIVILEGED_FUNCTION;
 193:Lib/FreeRTOS/Source/timers.c **** 
 194:Lib/FreeRTOS/Source/timers.c **** /*
 195:Lib/FreeRTOS/Source/timers.c ****  * The tick count has overflowed.  Switch the timer lists after ensuring the
 196:Lib/FreeRTOS/Source/timers.c ****  * current timer list does not still reference some timers.
 197:Lib/FreeRTOS/Source/timers.c ****  */
 198:Lib/FreeRTOS/Source/timers.c ****     static void prvSwitchTimerLists( void ) PRIVILEGED_FUNCTION;
 199:Lib/FreeRTOS/Source/timers.c **** 
 200:Lib/FreeRTOS/Source/timers.c **** /*
 201:Lib/FreeRTOS/Source/timers.c ****  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
 202:Lib/FreeRTOS/Source/timers.c ****  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
 203:Lib/FreeRTOS/Source/timers.c ****  */
 204:Lib/FreeRTOS/Source/timers.c ****     static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched ) PRIVILEGED_FU
 205:Lib/FreeRTOS/Source/timers.c **** 
 206:Lib/FreeRTOS/Source/timers.c **** /*
ARM GAS  /tmp/cccWNSAq.s 			page 6


 207:Lib/FreeRTOS/Source/timers.c ****  * If the timer list contains any active timers then return the expire time of
 208:Lib/FreeRTOS/Source/timers.c ****  * the timer that will expire first and set *pxListWasEmpty to false.  If the
 209:Lib/FreeRTOS/Source/timers.c ****  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
 210:Lib/FreeRTOS/Source/timers.c ****  * to pdTRUE.
 211:Lib/FreeRTOS/Source/timers.c ****  */
 212:Lib/FreeRTOS/Source/timers.c ****     static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty ) PRIVILEGED_FUNCTION
 213:Lib/FreeRTOS/Source/timers.c **** 
 214:Lib/FreeRTOS/Source/timers.c **** /*
 215:Lib/FreeRTOS/Source/timers.c ****  * If a timer has expired, process it.  Otherwise, block the timer service task
 216:Lib/FreeRTOS/Source/timers.c ****  * until either a timer does expire or a command is received.
 217:Lib/FreeRTOS/Source/timers.c ****  */
 218:Lib/FreeRTOS/Source/timers.c ****     static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
 219:Lib/FreeRTOS/Source/timers.c ****                                             BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;
 220:Lib/FreeRTOS/Source/timers.c **** 
 221:Lib/FreeRTOS/Source/timers.c **** /*
 222:Lib/FreeRTOS/Source/timers.c ****  * Called after a Timer_t structure has been allocated either statically or
 223:Lib/FreeRTOS/Source/timers.c ****  * dynamically to fill in the structure's members.
 224:Lib/FreeRTOS/Source/timers.c ****  */
 225:Lib/FreeRTOS/Source/timers.c ****     static void prvInitialiseNewTimer( const char * const pcTimerName, /*lint !e971 Unqualified cha
 226:Lib/FreeRTOS/Source/timers.c ****                                        const TickType_t xTimerPeriodInTicks,
 227:Lib/FreeRTOS/Source/timers.c ****                                        const BaseType_t xAutoReload,
 228:Lib/FreeRTOS/Source/timers.c ****                                        void * const pvTimerID,
 229:Lib/FreeRTOS/Source/timers.c ****                                        TimerCallbackFunction_t pxCallbackFunction,
 230:Lib/FreeRTOS/Source/timers.c ****                                        Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
 231:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 232:Lib/FreeRTOS/Source/timers.c **** 
 233:Lib/FreeRTOS/Source/timers.c ****     BaseType_t xTimerCreateTimerTask( void )
 234:Lib/FreeRTOS/Source/timers.c ****     {
  80              		.loc 1 234 5
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 16
  83              		@ frame_needed = 1, uses_anonymous_args = 0
  84 0000 80B5     		push	{r7, lr}
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 88B0     		sub	sp, sp, #32
  89              		.cfi_def_cfa_offset 40
  90 0004 04AF     		add	r7, sp, #16
  91              		.cfi_def_cfa 7, 24
 235:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xReturn = pdFAIL;
  92              		.loc 1 235 20
  93 0006 0023     		movs	r3, #0
  94 0008 FB60     		str	r3, [r7, #12]
 236:Lib/FreeRTOS/Source/timers.c **** 
 237:Lib/FreeRTOS/Source/timers.c ****         /* This function is called when the scheduler is started if
 238:Lib/FreeRTOS/Source/timers.c ****          * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
 239:Lib/FreeRTOS/Source/timers.c ****          * timer service task has been created/initialised.  If timers have already
 240:Lib/FreeRTOS/Source/timers.c ****          * been created then the initialisation will already have been performed. */
 241:Lib/FreeRTOS/Source/timers.c ****         prvCheckForValidListAndQueue();
  95              		.loc 1 241 9
  96 000a FFF7FEFF 		bl	prvCheckForValidListAndQueue
 242:Lib/FreeRTOS/Source/timers.c **** 
 243:Lib/FreeRTOS/Source/timers.c ****         if( xTimerQueue != NULL )
  97              		.loc 1 243 25
  98 000e 1B4B     		ldr	r3, .L6
  99 0010 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cccWNSAq.s 			page 7


 100              		.loc 1 243 11
 101 0012 002B     		cmp	r3, #0
 102 0014 20D0     		beq	.L2
 103              	.LBB2:
 244:Lib/FreeRTOS/Source/timers.c ****         {
 245:Lib/FreeRTOS/Source/timers.c ****             #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 246:Lib/FreeRTOS/Source/timers.c ****             {
 247:Lib/FreeRTOS/Source/timers.c ****                 StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 104              		.loc 1 247 32
 105 0016 0023     		movs	r3, #0
 106 0018 BB60     		str	r3, [r7, #8]
 248:Lib/FreeRTOS/Source/timers.c ****                 StackType_t * pxTimerTaskStackBuffer = NULL;
 107              		.loc 1 248 31
 108 001a 0023     		movs	r3, #0
 109 001c 7B60     		str	r3, [r7, #4]
 249:Lib/FreeRTOS/Source/timers.c ****                 uint32_t ulTimerTaskStackSize;
 250:Lib/FreeRTOS/Source/timers.c **** 
 251:Lib/FreeRTOS/Source/timers.c ****                 vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ul
 110              		.loc 1 251 17
 111 001e 3A46     		mov	r2, r7
 112 0020 391D     		adds	r1, r7, #4
 113 0022 07F10803 		add	r3, r7, #8
 114 0026 1846     		mov	r0, r3
 115 0028 FFF7FEFF 		bl	vApplicationGetTimerTaskMemory
 252:Lib/FreeRTOS/Source/timers.c ****                 xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 116              		.loc 1 252 36
 117 002c 3968     		ldr	r1, [r7]
 118 002e 7B68     		ldr	r3, [r7, #4]
 119 0030 BA68     		ldr	r2, [r7, #8]
 120 0032 0292     		str	r2, [sp, #8]
 121 0034 0193     		str	r3, [sp, #4]
 122 0036 0223     		movs	r3, #2
 123 0038 0093     		str	r3, [sp]
 124 003a 0023     		movs	r3, #0
 125 003c 0A46     		mov	r2, r1
 126 003e 1049     		ldr	r1, .L6+4
 127 0040 1048     		ldr	r0, .L6+8
 128 0042 FFF7FEFF 		bl	xTaskCreateStatic
 129 0046 0346     		mov	r3, r0
 130              		.loc 1 252 34 discriminator 1
 131 0048 0F4A     		ldr	r2, .L6+12
 132 004a 1360     		str	r3, [r2]
 253:Lib/FreeRTOS/Source/timers.c ****                                                       configTIMER_SERVICE_TASK_NAME,
 254:Lib/FreeRTOS/Source/timers.c ****                                                       ulTimerTaskStackSize,
 255:Lib/FreeRTOS/Source/timers.c ****                                                       NULL,
 256:Lib/FreeRTOS/Source/timers.c ****                                                       ( ( UBaseType_t ) configTIMER_TASK_PRIORITY )
 257:Lib/FreeRTOS/Source/timers.c ****                                                       pxTimerTaskStackBuffer,
 258:Lib/FreeRTOS/Source/timers.c ****                                                       pxTimerTaskTCBBuffer );
 259:Lib/FreeRTOS/Source/timers.c **** 
 260:Lib/FreeRTOS/Source/timers.c ****                 if( xTimerTaskHandle != NULL )
 133              		.loc 1 260 38
 134 004c 0E4B     		ldr	r3, .L6+12
 135 004e 1B68     		ldr	r3, [r3]
 136              		.loc 1 260 19
 137 0050 002B     		cmp	r3, #0
 138 0052 01D0     		beq	.L2
 261:Lib/FreeRTOS/Source/timers.c ****                 {
ARM GAS  /tmp/cccWNSAq.s 			page 8


 262:Lib/FreeRTOS/Source/timers.c ****                     xReturn = pdPASS;
 139              		.loc 1 262 29
 140 0054 0123     		movs	r3, #1
 141 0056 FB60     		str	r3, [r7, #12]
 142              	.L2:
 143              	.LBE2:
 263:Lib/FreeRTOS/Source/timers.c ****                 }
 264:Lib/FreeRTOS/Source/timers.c ****             }
 265:Lib/FreeRTOS/Source/timers.c ****             #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 266:Lib/FreeRTOS/Source/timers.c ****             {
 267:Lib/FreeRTOS/Source/timers.c ****                 xReturn = xTaskCreate( prvTimerTask,
 268:Lib/FreeRTOS/Source/timers.c ****                                        configTIMER_SERVICE_TASK_NAME,
 269:Lib/FreeRTOS/Source/timers.c ****                                        configTIMER_TASK_STACK_DEPTH,
 270:Lib/FreeRTOS/Source/timers.c ****                                        NULL,
 271:Lib/FreeRTOS/Source/timers.c ****                                        ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEG
 272:Lib/FreeRTOS/Source/timers.c ****                                        &xTimerTaskHandle );
 273:Lib/FreeRTOS/Source/timers.c ****             }
 274:Lib/FreeRTOS/Source/timers.c ****             #endif /* configSUPPORT_STATIC_ALLOCATION */
 275:Lib/FreeRTOS/Source/timers.c ****         }
 276:Lib/FreeRTOS/Source/timers.c ****         else
 277:Lib/FreeRTOS/Source/timers.c ****         {
 278:Lib/FreeRTOS/Source/timers.c ****             mtCOVERAGE_TEST_MARKER();
 279:Lib/FreeRTOS/Source/timers.c ****         }
 280:Lib/FreeRTOS/Source/timers.c **** 
 281:Lib/FreeRTOS/Source/timers.c ****         configASSERT( xReturn );
 144              		.loc 1 281 9
 145 0058 FB68     		ldr	r3, [r7, #12]
 146 005a 002B     		cmp	r3, #0
 147 005c 08D1     		bne	.L4
 148              		.loc 1 281 9 is_stmt 0 discriminator 1
 149 005e FFF7FEFF 		bl	ulSetInterruptMask
 150 0062 0A4B     		ldr	r3, .L6+16
 151 0064 0A4A     		ldr	r2, .L6+20
 152 0066 40F21911 		movw	r1, #281
 153 006a 0A48     		ldr	r0, .L6+24
 154 006c FFF7FEFF 		bl	__assert_func
 155              	.L4:
 282:Lib/FreeRTOS/Source/timers.c ****         return xReturn;
 156              		.loc 1 282 16 is_stmt 1
 157 0070 FB68     		ldr	r3, [r7, #12]
 283:Lib/FreeRTOS/Source/timers.c ****     }
 158              		.loc 1 283 5
 159 0072 1846     		mov	r0, r3
 160 0074 1037     		adds	r7, r7, #16
 161              		.cfi_def_cfa_offset 8
 162 0076 BD46     		mov	sp, r7
 163              		.cfi_def_cfa_register 13
 164              		@ sp needed
 165 0078 80BD     		pop	{r7, pc}
 166              	.L7:
 167 007a 00BF     		.align	2
 168              	.L6:
 169 007c 00000000 		.word	xTimerQueue
 170 0080 00000000 		.word	.LC0
 171 0084 00000000 		.word	prvTimerTask
 172 0088 00000000 		.word	xTimerTaskHandle
 173 008c 08000000 		.word	.LC1
ARM GAS  /tmp/cccWNSAq.s 			page 9


 174 0090 00000000 		.word	__func__.18
 175 0094 0C000000 		.word	.LC2
 176              		.cfi_endproc
 177              	.LFE0:
 179              		.section	.text.xTimerCreateStatic,"ax",%progbits
 180              		.align	1
 181              		.global	xTimerCreateStatic
 182              		.syntax unified
 183              		.thumb
 184              		.thumb_func
 186              	xTimerCreateStatic:
 187              	.LFB1:
 284:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 285:Lib/FreeRTOS/Source/timers.c **** 
 286:Lib/FreeRTOS/Source/timers.c ****     #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 287:Lib/FreeRTOS/Source/timers.c **** 
 288:Lib/FreeRTOS/Source/timers.c ****         TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char t
 289:Lib/FreeRTOS/Source/timers.c ****                                     const TickType_t xTimerPeriodInTicks,
 290:Lib/FreeRTOS/Source/timers.c ****                                     const BaseType_t xAutoReload,
 291:Lib/FreeRTOS/Source/timers.c ****                                     void * const pvTimerID,
 292:Lib/FreeRTOS/Source/timers.c ****                                     TimerCallbackFunction_t pxCallbackFunction )
 293:Lib/FreeRTOS/Source/timers.c ****         {
 294:Lib/FreeRTOS/Source/timers.c ****             Timer_t * pxNewTimer;
 295:Lib/FreeRTOS/Source/timers.c **** 
 296:Lib/FreeRTOS/Source/timers.c ****             pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All 
 297:Lib/FreeRTOS/Source/timers.c **** 
 298:Lib/FreeRTOS/Source/timers.c ****             if( pxNewTimer != NULL )
 299:Lib/FreeRTOS/Source/timers.c ****             {
 300:Lib/FreeRTOS/Source/timers.c ****                 /* Status is thus far zero as the timer is not created statically
 301:Lib/FreeRTOS/Source/timers.c ****                  * and has not been started.  The auto-reload bit may get set in
 302:Lib/FreeRTOS/Source/timers.c ****                  * prvInitialiseNewTimer. */
 303:Lib/FreeRTOS/Source/timers.c ****                 pxNewTimer->ucStatus = 0x00;
 304:Lib/FreeRTOS/Source/timers.c ****                 prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, px
 305:Lib/FreeRTOS/Source/timers.c ****             }
 306:Lib/FreeRTOS/Source/timers.c **** 
 307:Lib/FreeRTOS/Source/timers.c ****             return pxNewTimer;
 308:Lib/FreeRTOS/Source/timers.c ****         }
 309:Lib/FreeRTOS/Source/timers.c **** 
 310:Lib/FreeRTOS/Source/timers.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 311:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 312:Lib/FreeRTOS/Source/timers.c **** 
 313:Lib/FreeRTOS/Source/timers.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 314:Lib/FreeRTOS/Source/timers.c **** 
 315:Lib/FreeRTOS/Source/timers.c ****         TimerHandle_t xTimerCreateStatic( const char * const pcTimerName, /*lint !e971 Unqualified 
 316:Lib/FreeRTOS/Source/timers.c ****                                           const TickType_t xTimerPeriodInTicks,
 317:Lib/FreeRTOS/Source/timers.c ****                                           const BaseType_t xAutoReload,
 318:Lib/FreeRTOS/Source/timers.c ****                                           void * const pvTimerID,
 319:Lib/FreeRTOS/Source/timers.c ****                                           TimerCallbackFunction_t pxCallbackFunction,
 320:Lib/FreeRTOS/Source/timers.c ****                                           StaticTimer_t * pxTimerBuffer )
 321:Lib/FreeRTOS/Source/timers.c ****         {
 188              		.loc 1 321 9
 189              		.cfi_startproc
 190              		@ args = 8, pretend = 0, frame = 24
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192 0000 80B5     		push	{r7, lr}
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 7, -8
ARM GAS  /tmp/cccWNSAq.s 			page 10


 195              		.cfi_offset 14, -4
 196 0002 88B0     		sub	sp, sp, #32
 197              		.cfi_def_cfa_offset 40
 198 0004 02AF     		add	r7, sp, #8
 199              		.cfi_def_cfa 7, 32
 200 0006 F860     		str	r0, [r7, #12]
 201 0008 B960     		str	r1, [r7, #8]
 202 000a 7A60     		str	r2, [r7, #4]
 203 000c 3B60     		str	r3, [r7]
 204              	.LBB3:
 322:Lib/FreeRTOS/Source/timers.c ****             Timer_t * pxNewTimer;
 323:Lib/FreeRTOS/Source/timers.c **** 
 324:Lib/FreeRTOS/Source/timers.c ****             #if ( configASSERT_DEFINED == 1 )
 325:Lib/FreeRTOS/Source/timers.c ****             {
 326:Lib/FreeRTOS/Source/timers.c ****                 /* Sanity check that the size of the structure used to declare a
 327:Lib/FreeRTOS/Source/timers.c ****                  * variable of type StaticTimer_t equals the size of the real timer
 328:Lib/FreeRTOS/Source/timers.c ****                  * structure. */
 329:Lib/FreeRTOS/Source/timers.c ****                 volatile size_t xSize = sizeof( StaticTimer_t );
 205              		.loc 1 329 33
 206 000e 2C23     		movs	r3, #44
 207 0010 3B61     		str	r3, [r7, #16]
 330:Lib/FreeRTOS/Source/timers.c ****                 configASSERT( xSize == sizeof( Timer_t ) );
 208              		.loc 1 330 17
 209 0012 3B69     		ldr	r3, [r7, #16]
 210 0014 2C2B     		cmp	r3, #44
 211 0016 08D0     		beq	.L9
 212              		.loc 1 330 17 is_stmt 0 discriminator 1
 213 0018 FFF7FEFF 		bl	ulSetInterruptMask
 214 001c 154B     		ldr	r3, .L13
 215 001e 164A     		ldr	r2, .L13+4
 216 0020 4FF4A571 		mov	r1, #330
 217 0024 1548     		ldr	r0, .L13+8
 218 0026 FFF7FEFF 		bl	__assert_func
 219              	.L9:
 331:Lib/FreeRTOS/Source/timers.c ****                 ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 220              		.loc 1 331 17 is_stmt 1
 221 002a 3B69     		ldr	r3, [r7, #16]
 222              	.LBE3:
 332:Lib/FreeRTOS/Source/timers.c ****             }
 333:Lib/FreeRTOS/Source/timers.c ****             #endif /* configASSERT_DEFINED */
 334:Lib/FreeRTOS/Source/timers.c **** 
 335:Lib/FreeRTOS/Source/timers.c ****             /* A pointer to a StaticTimer_t structure MUST be provided, use it. */
 336:Lib/FreeRTOS/Source/timers.c ****             configASSERT( pxTimerBuffer );
 223              		.loc 1 336 13
 224 002c 7B6A     		ldr	r3, [r7, #36]
 225 002e 002B     		cmp	r3, #0
 226 0030 08D1     		bne	.L10
 227              		.loc 1 336 13 is_stmt 0 discriminator 1
 228 0032 FFF7FEFF 		bl	ulSetInterruptMask
 229 0036 0F4B     		ldr	r3, .L13
 230 0038 0F4A     		ldr	r2, .L13+4
 231 003a 4FF4A871 		mov	r1, #336
 232 003e 0F48     		ldr	r0, .L13+8
 233 0040 FFF7FEFF 		bl	__assert_func
 234              	.L10:
 337:Lib/FreeRTOS/Source/timers.c ****             pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointe
 235              		.loc 1 337 24 is_stmt 1
ARM GAS  /tmp/cccWNSAq.s 			page 11


 236 0044 7B6A     		ldr	r3, [r7, #36]
 237 0046 7B61     		str	r3, [r7, #20]
 338:Lib/FreeRTOS/Source/timers.c **** 
 339:Lib/FreeRTOS/Source/timers.c ****             if( pxNewTimer != NULL )
 238              		.loc 1 339 15
 239 0048 7B69     		ldr	r3, [r7, #20]
 240 004a 002B     		cmp	r3, #0
 241 004c 0DD0     		beq	.L11
 340:Lib/FreeRTOS/Source/timers.c ****             {
 341:Lib/FreeRTOS/Source/timers.c ****                 /* Timers can be created statically or dynamically so note this
 342:Lib/FreeRTOS/Source/timers.c ****                  * timer was created statically in case it is later deleted.  The
 343:Lib/FreeRTOS/Source/timers.c ****                  * auto-reload bit may get set in prvInitialiseNewTimer(). */
 344:Lib/FreeRTOS/Source/timers.c ****                 pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 242              		.loc 1 344 38
 243 004e 7B69     		ldr	r3, [r7, #20]
 244 0050 0222     		movs	r2, #2
 245 0052 83F82820 		strb	r2, [r3, #40]
 345:Lib/FreeRTOS/Source/timers.c **** 
 346:Lib/FreeRTOS/Source/timers.c ****                 prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, px
 246              		.loc 1 346 17
 247 0056 7B69     		ldr	r3, [r7, #20]
 248 0058 0193     		str	r3, [sp, #4]
 249 005a 3B6A     		ldr	r3, [r7, #32]
 250 005c 0093     		str	r3, [sp]
 251 005e 3B68     		ldr	r3, [r7]
 252 0060 7A68     		ldr	r2, [r7, #4]
 253 0062 B968     		ldr	r1, [r7, #8]
 254 0064 F868     		ldr	r0, [r7, #12]
 255 0066 FFF7FEFF 		bl	prvInitialiseNewTimer
 256              	.L11:
 347:Lib/FreeRTOS/Source/timers.c ****             }
 348:Lib/FreeRTOS/Source/timers.c **** 
 349:Lib/FreeRTOS/Source/timers.c ****             return pxNewTimer;
 257              		.loc 1 349 20
 258 006a 7B69     		ldr	r3, [r7, #20]
 350:Lib/FreeRTOS/Source/timers.c ****         }
 259              		.loc 1 350 9
 260 006c 1846     		mov	r0, r3
 261 006e 1837     		adds	r7, r7, #24
 262              		.cfi_def_cfa_offset 8
 263 0070 BD46     		mov	sp, r7
 264              		.cfi_def_cfa_register 13
 265              		@ sp needed
 266 0072 80BD     		pop	{r7, pc}
 267              	.L14:
 268              		.align	2
 269              	.L13:
 270 0074 08000000 		.word	.LC1
 271 0078 00000000 		.word	__func__.17
 272 007c 0C000000 		.word	.LC2
 273              		.cfi_endproc
 274              	.LFE1:
 276              		.section	.text.prvInitialiseNewTimer,"ax",%progbits
 277              		.align	1
 278              		.syntax unified
 279              		.thumb
 280              		.thumb_func
ARM GAS  /tmp/cccWNSAq.s 			page 12


 282              	prvInitialiseNewTimer:
 283              	.LFB2:
 351:Lib/FreeRTOS/Source/timers.c **** 
 352:Lib/FreeRTOS/Source/timers.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
 353:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 354:Lib/FreeRTOS/Source/timers.c **** 
 355:Lib/FreeRTOS/Source/timers.c ****     static void prvInitialiseNewTimer( const char * const pcTimerName, /*lint !e971 Unqualified cha
 356:Lib/FreeRTOS/Source/timers.c ****                                        const TickType_t xTimerPeriodInTicks,
 357:Lib/FreeRTOS/Source/timers.c ****                                        const BaseType_t xAutoReload,
 358:Lib/FreeRTOS/Source/timers.c ****                                        void * const pvTimerID,
 359:Lib/FreeRTOS/Source/timers.c ****                                        TimerCallbackFunction_t pxCallbackFunction,
 360:Lib/FreeRTOS/Source/timers.c ****                                        Timer_t * pxNewTimer )
 361:Lib/FreeRTOS/Source/timers.c ****     {
 284              		.loc 1 361 5
 285              		.cfi_startproc
 286              		@ args = 8, pretend = 0, frame = 16
 287              		@ frame_needed = 1, uses_anonymous_args = 0
 288 0000 80B5     		push	{r7, lr}
 289              		.cfi_def_cfa_offset 8
 290              		.cfi_offset 7, -8
 291              		.cfi_offset 14, -4
 292 0002 84B0     		sub	sp, sp, #16
 293              		.cfi_def_cfa_offset 24
 294 0004 00AF     		add	r7, sp, #0
 295              		.cfi_def_cfa_register 7
 296 0006 F860     		str	r0, [r7, #12]
 297 0008 B960     		str	r1, [r7, #8]
 298 000a 7A60     		str	r2, [r7, #4]
 299 000c 3B60     		str	r3, [r7]
 362:Lib/FreeRTOS/Source/timers.c ****         /* 0 is not a valid value for xTimerPeriodInTicks. */
 363:Lib/FreeRTOS/Source/timers.c ****         configASSERT( ( xTimerPeriodInTicks > 0 ) );
 300              		.loc 1 363 9
 301 000e BB68     		ldr	r3, [r7, #8]
 302 0010 002B     		cmp	r3, #0
 303 0012 08D1     		bne	.L16
 304              		.loc 1 363 9 is_stmt 0 discriminator 1
 305 0014 FFF7FEFF 		bl	ulSetInterruptMask
 306 0018 144B     		ldr	r3, .L19
 307 001a 154A     		ldr	r2, .L19+4
 308 001c 40F26B11 		movw	r1, #363
 309 0020 1448     		ldr	r0, .L19+8
 310 0022 FFF7FEFF 		bl	__assert_func
 311              	.L16:
 364:Lib/FreeRTOS/Source/timers.c **** 
 365:Lib/FreeRTOS/Source/timers.c ****         /* Ensure the infrastructure used by the timer service task has been
 366:Lib/FreeRTOS/Source/timers.c ****          * created/initialised. */
 367:Lib/FreeRTOS/Source/timers.c ****         prvCheckForValidListAndQueue();
 312              		.loc 1 367 9 is_stmt 1
 313 0026 FFF7FEFF 		bl	prvCheckForValidListAndQueue
 368:Lib/FreeRTOS/Source/timers.c **** 
 369:Lib/FreeRTOS/Source/timers.c ****         /* Initialise the timer structure members using the function
 370:Lib/FreeRTOS/Source/timers.c ****          * parameters. */
 371:Lib/FreeRTOS/Source/timers.c ****         pxNewTimer->pcTimerName = pcTimerName;
 314              		.loc 1 371 33
 315 002a FB69     		ldr	r3, [r7, #28]
 316 002c FA68     		ldr	r2, [r7, #12]
 317 002e 1A60     		str	r2, [r3]
ARM GAS  /tmp/cccWNSAq.s 			page 13


 372:Lib/FreeRTOS/Source/timers.c ****         pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 318              		.loc 1 372 41
 319 0030 FB69     		ldr	r3, [r7, #28]
 320 0032 BA68     		ldr	r2, [r7, #8]
 321 0034 9A61     		str	r2, [r3, #24]
 373:Lib/FreeRTOS/Source/timers.c ****         pxNewTimer->pvTimerID = pvTimerID;
 322              		.loc 1 373 31
 323 0036 FB69     		ldr	r3, [r7, #28]
 324 0038 3A68     		ldr	r2, [r7]
 325 003a DA61     		str	r2, [r3, #28]
 374:Lib/FreeRTOS/Source/timers.c ****         pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 326              		.loc 1 374 40
 327 003c FB69     		ldr	r3, [r7, #28]
 328 003e BA69     		ldr	r2, [r7, #24]
 329 0040 1A62     		str	r2, [r3, #32]
 375:Lib/FreeRTOS/Source/timers.c ****         vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 330              		.loc 1 375 9
 331 0042 FB69     		ldr	r3, [r7, #28]
 332 0044 0433     		adds	r3, r3, #4
 333 0046 1846     		mov	r0, r3
 334 0048 FFF7FEFF 		bl	vListInitialiseItem
 376:Lib/FreeRTOS/Source/timers.c **** 
 377:Lib/FreeRTOS/Source/timers.c ****         if( xAutoReload != pdFALSE )
 335              		.loc 1 377 11
 336 004c 7B68     		ldr	r3, [r7, #4]
 337 004e 002B     		cmp	r3, #0
 338 0050 08D0     		beq	.L18
 378:Lib/FreeRTOS/Source/timers.c ****         {
 379:Lib/FreeRTOS/Source/timers.c ****             pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 339              		.loc 1 379 23
 340 0052 FB69     		ldr	r3, [r7, #28]
 341 0054 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 342              		.loc 1 379 34
 343 0058 43F00403 		orr	r3, r3, #4
 344 005c DAB2     		uxtb	r2, r3
 345 005e FB69     		ldr	r3, [r7, #28]
 346 0060 83F82820 		strb	r2, [r3, #40]
 347              	.L18:
 380:Lib/FreeRTOS/Source/timers.c ****         }
 381:Lib/FreeRTOS/Source/timers.c **** 
 382:Lib/FreeRTOS/Source/timers.c ****         traceTIMER_CREATE( pxNewTimer );
 383:Lib/FreeRTOS/Source/timers.c ****     }
 348              		.loc 1 383 5
 349 0064 00BF     		nop
 350 0066 1037     		adds	r7, r7, #16
 351              		.cfi_def_cfa_offset 8
 352 0068 BD46     		mov	sp, r7
 353              		.cfi_def_cfa_register 13
 354              		@ sp needed
 355 006a 80BD     		pop	{r7, pc}
 356              	.L20:
 357              		.align	2
 358              	.L19:
 359 006c 08000000 		.word	.LC1
 360 0070 00000000 		.word	__func__.16
 361 0074 0C000000 		.word	.LC2
 362              		.cfi_endproc
ARM GAS  /tmp/cccWNSAq.s 			page 14


 363              	.LFE2:
 365              		.section	.text.xTimerGenericCommand,"ax",%progbits
 366              		.align	1
 367              		.global	xTimerGenericCommand
 368              		.syntax unified
 369              		.thumb
 370              		.thumb_func
 372              	xTimerGenericCommand:
 373              	.LFB3:
 384:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 385:Lib/FreeRTOS/Source/timers.c **** 
 386:Lib/FreeRTOS/Source/timers.c ****     BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
 387:Lib/FreeRTOS/Source/timers.c ****                                      const BaseType_t xCommandID,
 388:Lib/FreeRTOS/Source/timers.c ****                                      const TickType_t xOptionalValue,
 389:Lib/FreeRTOS/Source/timers.c ****                                      BaseType_t * const pxHigherPriorityTaskWoken,
 390:Lib/FreeRTOS/Source/timers.c ****                                      const TickType_t xTicksToWait )
 391:Lib/FreeRTOS/Source/timers.c ****     {
 374              		.loc 1 391 5
 375              		.cfi_startproc
 376              		@ args = 4, pretend = 0, frame = 40
 377              		@ frame_needed = 1, uses_anonymous_args = 0
 378 0000 80B5     		push	{r7, lr}
 379              		.cfi_def_cfa_offset 8
 380              		.cfi_offset 7, -8
 381              		.cfi_offset 14, -4
 382 0002 8AB0     		sub	sp, sp, #40
 383              		.cfi_def_cfa_offset 48
 384 0004 00AF     		add	r7, sp, #0
 385              		.cfi_def_cfa_register 7
 386 0006 F860     		str	r0, [r7, #12]
 387 0008 B960     		str	r1, [r7, #8]
 388 000a 7A60     		str	r2, [r7, #4]
 389 000c 3B60     		str	r3, [r7]
 392:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xReturn = pdFAIL;
 390              		.loc 1 392 20
 391 000e 0023     		movs	r3, #0
 392 0010 7B62     		str	r3, [r7, #36]
 393:Lib/FreeRTOS/Source/timers.c ****         DaemonTaskMessage_t xMessage;
 394:Lib/FreeRTOS/Source/timers.c **** 
 395:Lib/FreeRTOS/Source/timers.c ****         configASSERT( xTimer );
 393              		.loc 1 395 9
 394 0012 FB68     		ldr	r3, [r7, #12]
 395 0014 002B     		cmp	r3, #0
 396 0016 08D1     		bne	.L22
 397              		.loc 1 395 9 is_stmt 0 discriminator 1
 398 0018 FFF7FEFF 		bl	ulSetInterruptMask
 399 001c 1D4B     		ldr	r3, .L27
 400 001e 1E4A     		ldr	r2, .L27+4
 401 0020 40F28B11 		movw	r1, #395
 402 0024 1D48     		ldr	r0, .L27+8
 403 0026 FFF7FEFF 		bl	__assert_func
 404              	.L22:
 396:Lib/FreeRTOS/Source/timers.c **** 
 397:Lib/FreeRTOS/Source/timers.c ****         /* Send a message to the timer service task to perform a particular action
 398:Lib/FreeRTOS/Source/timers.c ****          * on a particular timer definition. */
 399:Lib/FreeRTOS/Source/timers.c ****         if( xTimerQueue != NULL )
 405              		.loc 1 399 25 is_stmt 1
ARM GAS  /tmp/cccWNSAq.s 			page 15


 406 002a 1D4B     		ldr	r3, .L27+12
 407 002c 1B68     		ldr	r3, [r3]
 408              		.loc 1 399 11
 409 002e 002B     		cmp	r3, #0
 410 0030 2AD0     		beq	.L23
 400:Lib/FreeRTOS/Source/timers.c ****         {
 401:Lib/FreeRTOS/Source/timers.c ****             /* Send a command to the timer service task to start the xTimer timer. */
 402:Lib/FreeRTOS/Source/timers.c ****             xMessage.xMessageID = xCommandID;
 411              		.loc 1 402 33
 412 0032 BB68     		ldr	r3, [r7, #8]
 413 0034 7B61     		str	r3, [r7, #20]
 403:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 414              		.loc 1 403 55
 415 0036 7B68     		ldr	r3, [r7, #4]
 416 0038 BB61     		str	r3, [r7, #24]
 404:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xTimerParameters.pxTimer = xTimer;
 417              		.loc 1 404 49
 418 003a FB68     		ldr	r3, [r7, #12]
 419 003c FB61     		str	r3, [r7, #28]
 405:Lib/FreeRTOS/Source/timers.c **** 
 406:Lib/FreeRTOS/Source/timers.c ****             if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 420              		.loc 1 406 15
 421 003e BB68     		ldr	r3, [r7, #8]
 422 0040 052B     		cmp	r3, #5
 423 0042 18DC     		bgt	.L24
 407:Lib/FreeRTOS/Source/timers.c ****             {
 408:Lib/FreeRTOS/Source/timers.c ****                 if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 424              		.loc 1 408 21
 425 0044 FFF7FEFF 		bl	xTaskGetSchedulerState
 426 0048 0346     		mov	r3, r0
 427              		.loc 1 408 19 discriminator 1
 428 004a 022B     		cmp	r3, #2
 429 004c 09D1     		bne	.L25
 409:Lib/FreeRTOS/Source/timers.c ****                 {
 410:Lib/FreeRTOS/Source/timers.c ****                     xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 430              		.loc 1 410 31
 431 004e 144B     		ldr	r3, .L27+12
 432 0050 1868     		ldr	r0, [r3]
 433 0052 07F11401 		add	r1, r7, #20
 434 0056 0023     		movs	r3, #0
 435 0058 3A6B     		ldr	r2, [r7, #48]
 436 005a FFF7FEFF 		bl	xQueueGenericSend
 437 005e 7862     		str	r0, [r7, #36]
 438 0060 12E0     		b	.L23
 439              	.L25:
 411:Lib/FreeRTOS/Source/timers.c ****                 }
 412:Lib/FreeRTOS/Source/timers.c ****                 else
 413:Lib/FreeRTOS/Source/timers.c ****                 {
 414:Lib/FreeRTOS/Source/timers.c ****                     xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 440              		.loc 1 414 31
 441 0062 0F4B     		ldr	r3, .L27+12
 442 0064 1868     		ldr	r0, [r3]
 443 0066 07F11401 		add	r1, r7, #20
 444 006a 0023     		movs	r3, #0
 445 006c 0022     		movs	r2, #0
 446 006e FFF7FEFF 		bl	xQueueGenericSend
 447 0072 7862     		str	r0, [r7, #36]
ARM GAS  /tmp/cccWNSAq.s 			page 16


 448 0074 08E0     		b	.L23
 449              	.L24:
 415:Lib/FreeRTOS/Source/timers.c ****                 }
 416:Lib/FreeRTOS/Source/timers.c ****             }
 417:Lib/FreeRTOS/Source/timers.c ****             else
 418:Lib/FreeRTOS/Source/timers.c ****             {
 419:Lib/FreeRTOS/Source/timers.c ****                 xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoke
 450              		.loc 1 419 27
 451 0076 0A4B     		ldr	r3, .L27+12
 452 0078 1868     		ldr	r0, [r3]
 453 007a 07F11401 		add	r1, r7, #20
 454 007e 0023     		movs	r3, #0
 455 0080 3A68     		ldr	r2, [r7]
 456 0082 FFF7FEFF 		bl	xQueueGenericSendFromISR
 457 0086 7862     		str	r0, [r7, #36]
 458              	.L23:
 420:Lib/FreeRTOS/Source/timers.c ****             }
 421:Lib/FreeRTOS/Source/timers.c **** 
 422:Lib/FreeRTOS/Source/timers.c ****             traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 423:Lib/FreeRTOS/Source/timers.c ****         }
 424:Lib/FreeRTOS/Source/timers.c ****         else
 425:Lib/FreeRTOS/Source/timers.c ****         {
 426:Lib/FreeRTOS/Source/timers.c ****             mtCOVERAGE_TEST_MARKER();
 427:Lib/FreeRTOS/Source/timers.c ****         }
 428:Lib/FreeRTOS/Source/timers.c **** 
 429:Lib/FreeRTOS/Source/timers.c ****         return xReturn;
 459              		.loc 1 429 16
 460 0088 7B6A     		ldr	r3, [r7, #36]
 430:Lib/FreeRTOS/Source/timers.c ****     }
 461              		.loc 1 430 5
 462 008a 1846     		mov	r0, r3
 463 008c 2837     		adds	r7, r7, #40
 464              		.cfi_def_cfa_offset 8
 465 008e BD46     		mov	sp, r7
 466              		.cfi_def_cfa_register 13
 467              		@ sp needed
 468 0090 80BD     		pop	{r7, pc}
 469              	.L28:
 470 0092 00BF     		.align	2
 471              	.L27:
 472 0094 08000000 		.word	.LC1
 473 0098 00000000 		.word	__func__.15
 474 009c 0C000000 		.word	.LC2
 475 00a0 00000000 		.word	xTimerQueue
 476              		.cfi_endproc
 477              	.LFE3:
 479              		.section	.text.xTimerGetTimerDaemonTaskHandle,"ax",%progbits
 480              		.align	1
 481              		.global	xTimerGetTimerDaemonTaskHandle
 482              		.syntax unified
 483              		.thumb
 484              		.thumb_func
 486              	xTimerGetTimerDaemonTaskHandle:
 487              	.LFB4:
 431:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 432:Lib/FreeRTOS/Source/timers.c **** 
 433:Lib/FreeRTOS/Source/timers.c ****     TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
ARM GAS  /tmp/cccWNSAq.s 			page 17


 434:Lib/FreeRTOS/Source/timers.c ****     {
 488              		.loc 1 434 5
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 0
 491              		@ frame_needed = 1, uses_anonymous_args = 0
 492 0000 80B5     		push	{r7, lr}
 493              		.cfi_def_cfa_offset 8
 494              		.cfi_offset 7, -8
 495              		.cfi_offset 14, -4
 496 0002 00AF     		add	r7, sp, #0
 497              		.cfi_def_cfa_register 7
 435:Lib/FreeRTOS/Source/timers.c ****         /* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 436:Lib/FreeRTOS/Source/timers.c ****          * started, then xTimerTaskHandle will be NULL. */
 437:Lib/FreeRTOS/Source/timers.c ****         configASSERT( ( xTimerTaskHandle != NULL ) );
 498              		.loc 1 437 9
 499 0004 084B     		ldr	r3, .L32
 500 0006 1B68     		ldr	r3, [r3]
 501 0008 002B     		cmp	r3, #0
 502 000a 08D1     		bne	.L30
 503              		.loc 1 437 9 is_stmt 0 discriminator 1
 504 000c FFF7FEFF 		bl	ulSetInterruptMask
 505 0010 064B     		ldr	r3, .L32+4
 506 0012 074A     		ldr	r2, .L32+8
 507 0014 40F2B511 		movw	r1, #437
 508 0018 0648     		ldr	r0, .L32+12
 509 001a FFF7FEFF 		bl	__assert_func
 510              	.L30:
 438:Lib/FreeRTOS/Source/timers.c ****         return xTimerTaskHandle;
 511              		.loc 1 438 16 is_stmt 1
 512 001e 024B     		ldr	r3, .L32
 513 0020 1B68     		ldr	r3, [r3]
 439:Lib/FreeRTOS/Source/timers.c ****     }
 514              		.loc 1 439 5
 515 0022 1846     		mov	r0, r3
 516 0024 80BD     		pop	{r7, pc}
 517              	.L33:
 518 0026 00BF     		.align	2
 519              	.L32:
 520 0028 00000000 		.word	xTimerTaskHandle
 521 002c 08000000 		.word	.LC1
 522 0030 00000000 		.word	__func__.14
 523 0034 0C000000 		.word	.LC2
 524              		.cfi_endproc
 525              	.LFE4:
 527              		.section	.text.xTimerGetPeriod,"ax",%progbits
 528              		.align	1
 529              		.global	xTimerGetPeriod
 530              		.syntax unified
 531              		.thumb
 532              		.thumb_func
 534              	xTimerGetPeriod:
 535              	.LFB5:
 440:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 441:Lib/FreeRTOS/Source/timers.c **** 
 442:Lib/FreeRTOS/Source/timers.c ****     TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
 443:Lib/FreeRTOS/Source/timers.c ****     {
 536              		.loc 1 443 5
ARM GAS  /tmp/cccWNSAq.s 			page 18


 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 16
 539              		@ frame_needed = 1, uses_anonymous_args = 0
 540 0000 80B5     		push	{r7, lr}
 541              		.cfi_def_cfa_offset 8
 542              		.cfi_offset 7, -8
 543              		.cfi_offset 14, -4
 544 0002 84B0     		sub	sp, sp, #16
 545              		.cfi_def_cfa_offset 24
 546 0004 00AF     		add	r7, sp, #0
 547              		.cfi_def_cfa_register 7
 548 0006 7860     		str	r0, [r7, #4]
 444:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 549              		.loc 1 444 19
 550 0008 7B68     		ldr	r3, [r7, #4]
 551 000a FB60     		str	r3, [r7, #12]
 445:Lib/FreeRTOS/Source/timers.c **** 
 446:Lib/FreeRTOS/Source/timers.c ****         configASSERT( xTimer );
 552              		.loc 1 446 9
 553 000c 7B68     		ldr	r3, [r7, #4]
 554 000e 002B     		cmp	r3, #0
 555 0010 08D1     		bne	.L35
 556              		.loc 1 446 9 is_stmt 0 discriminator 1
 557 0012 FFF7FEFF 		bl	ulSetInterruptMask
 558 0016 064B     		ldr	r3, .L37
 559 0018 064A     		ldr	r2, .L37+4
 560 001a 4FF4DF71 		mov	r1, #446
 561 001e 0648     		ldr	r0, .L37+8
 562 0020 FFF7FEFF 		bl	__assert_func
 563              	.L35:
 447:Lib/FreeRTOS/Source/timers.c ****         return pxTimer->xTimerPeriodInTicks;
 564              		.loc 1 447 23 is_stmt 1
 565 0024 FB68     		ldr	r3, [r7, #12]
 566 0026 9B69     		ldr	r3, [r3, #24]
 448:Lib/FreeRTOS/Source/timers.c ****     }
 567              		.loc 1 448 5
 568 0028 1846     		mov	r0, r3
 569 002a 1037     		adds	r7, r7, #16
 570              		.cfi_def_cfa_offset 8
 571 002c BD46     		mov	sp, r7
 572              		.cfi_def_cfa_register 13
 573              		@ sp needed
 574 002e 80BD     		pop	{r7, pc}
 575              	.L38:
 576              		.align	2
 577              	.L37:
 578 0030 08000000 		.word	.LC1
 579 0034 00000000 		.word	__func__.13
 580 0038 0C000000 		.word	.LC2
 581              		.cfi_endproc
 582              	.LFE5:
 584              		.section	.text.vTimerSetReloadMode,"ax",%progbits
 585              		.align	1
 586              		.global	vTimerSetReloadMode
 587              		.syntax unified
 588              		.thumb
 589              		.thumb_func
ARM GAS  /tmp/cccWNSAq.s 			page 19


 591              	vTimerSetReloadMode:
 592              	.LFB6:
 449:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 450:Lib/FreeRTOS/Source/timers.c **** 
 451:Lib/FreeRTOS/Source/timers.c ****     void vTimerSetReloadMode( TimerHandle_t xTimer,
 452:Lib/FreeRTOS/Source/timers.c ****                               const BaseType_t xAutoReload )
 453:Lib/FreeRTOS/Source/timers.c ****     {
 593              		.loc 1 453 5
 594              		.cfi_startproc
 595              		@ args = 0, pretend = 0, frame = 16
 596              		@ frame_needed = 1, uses_anonymous_args = 0
 597 0000 80B5     		push	{r7, lr}
 598              		.cfi_def_cfa_offset 8
 599              		.cfi_offset 7, -8
 600              		.cfi_offset 14, -4
 601 0002 84B0     		sub	sp, sp, #16
 602              		.cfi_def_cfa_offset 24
 603 0004 00AF     		add	r7, sp, #0
 604              		.cfi_def_cfa_register 7
 605 0006 7860     		str	r0, [r7, #4]
 606 0008 3960     		str	r1, [r7]
 454:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 607              		.loc 1 454 19
 608 000a 7B68     		ldr	r3, [r7, #4]
 609 000c FB60     		str	r3, [r7, #12]
 455:Lib/FreeRTOS/Source/timers.c **** 
 456:Lib/FreeRTOS/Source/timers.c ****         configASSERT( xTimer );
 610              		.loc 1 456 9
 611 000e 7B68     		ldr	r3, [r7, #4]
 612 0010 002B     		cmp	r3, #0
 613 0012 08D1     		bne	.L40
 614              		.loc 1 456 9 is_stmt 0 discriminator 1
 615 0014 FFF7FEFF 		bl	ulSetInterruptMask
 616 0018 124B     		ldr	r3, .L43
 617 001a 134A     		ldr	r2, .L43+4
 618 001c 4FF4E471 		mov	r1, #456
 619 0020 1248     		ldr	r0, .L43+8
 620 0022 FFF7FEFF 		bl	__assert_func
 621              	.L40:
 457:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 622              		.loc 1 457 9 is_stmt 1
 623 0026 FFF7FEFF 		bl	vPortEnterCritical
 458:Lib/FreeRTOS/Source/timers.c ****         {
 459:Lib/FreeRTOS/Source/timers.c ****             if( xAutoReload != pdFALSE )
 624              		.loc 1 459 15
 625 002a 3B68     		ldr	r3, [r7]
 626 002c 002B     		cmp	r3, #0
 627 002e 09D0     		beq	.L41
 460:Lib/FreeRTOS/Source/timers.c ****             {
 461:Lib/FreeRTOS/Source/timers.c ****                 pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 628              		.loc 1 461 24
 629 0030 FB68     		ldr	r3, [r7, #12]
 630 0032 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 631              		.loc 1 461 35
 632 0036 43F00403 		orr	r3, r3, #4
 633 003a DAB2     		uxtb	r2, r3
 634 003c FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cccWNSAq.s 			page 20


 635 003e 83F82820 		strb	r2, [r3, #40]
 636 0042 08E0     		b	.L42
 637              	.L41:
 462:Lib/FreeRTOS/Source/timers.c ****             }
 463:Lib/FreeRTOS/Source/timers.c ****             else
 464:Lib/FreeRTOS/Source/timers.c ****             {
 465:Lib/FreeRTOS/Source/timers.c ****                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
 638              		.loc 1 465 24
 639 0044 FB68     		ldr	r3, [r7, #12]
 640 0046 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 641              		.loc 1 465 35
 642 004a 23F00403 		bic	r3, r3, #4
 643 004e DAB2     		uxtb	r2, r3
 644 0050 FB68     		ldr	r3, [r7, #12]
 645 0052 83F82820 		strb	r2, [r3, #40]
 646              	.L42:
 466:Lib/FreeRTOS/Source/timers.c ****             }
 467:Lib/FreeRTOS/Source/timers.c ****         }
 468:Lib/FreeRTOS/Source/timers.c ****         taskEXIT_CRITICAL();
 647              		.loc 1 468 9
 648 0056 FFF7FEFF 		bl	vPortExitCritical
 469:Lib/FreeRTOS/Source/timers.c ****     }
 649              		.loc 1 469 5
 650 005a 00BF     		nop
 651 005c 1037     		adds	r7, r7, #16
 652              		.cfi_def_cfa_offset 8
 653 005e BD46     		mov	sp, r7
 654              		.cfi_def_cfa_register 13
 655              		@ sp needed
 656 0060 80BD     		pop	{r7, pc}
 657              	.L44:
 658 0062 00BF     		.align	2
 659              	.L43:
 660 0064 08000000 		.word	.LC1
 661 0068 00000000 		.word	__func__.12
 662 006c 0C000000 		.word	.LC2
 663              		.cfi_endproc
 664              	.LFE6:
 666              		.section	.text.xTimerGetReloadMode,"ax",%progbits
 667              		.align	1
 668              		.global	xTimerGetReloadMode
 669              		.syntax unified
 670              		.thumb
 671              		.thumb_func
 673              	xTimerGetReloadMode:
 674              	.LFB7:
 470:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 471:Lib/FreeRTOS/Source/timers.c **** 
 472:Lib/FreeRTOS/Source/timers.c ****     BaseType_t xTimerGetReloadMode( TimerHandle_t xTimer )
 473:Lib/FreeRTOS/Source/timers.c ****     {
 675              		.loc 1 473 5
 676              		.cfi_startproc
 677              		@ args = 0, pretend = 0, frame = 16
 678              		@ frame_needed = 1, uses_anonymous_args = 0
 679 0000 80B5     		push	{r7, lr}
 680              		.cfi_def_cfa_offset 8
 681              		.cfi_offset 7, -8
ARM GAS  /tmp/cccWNSAq.s 			page 21


 682              		.cfi_offset 14, -4
 683 0002 84B0     		sub	sp, sp, #16
 684              		.cfi_def_cfa_offset 24
 685 0004 00AF     		add	r7, sp, #0
 686              		.cfi_def_cfa_register 7
 687 0006 7860     		str	r0, [r7, #4]
 474:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 688              		.loc 1 474 19
 689 0008 7B68     		ldr	r3, [r7, #4]
 690 000a BB60     		str	r3, [r7, #8]
 475:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xReturn;
 476:Lib/FreeRTOS/Source/timers.c **** 
 477:Lib/FreeRTOS/Source/timers.c ****         configASSERT( xTimer );
 691              		.loc 1 477 9
 692 000c 7B68     		ldr	r3, [r7, #4]
 693 000e 002B     		cmp	r3, #0
 694 0010 08D1     		bne	.L46
 695              		.loc 1 477 9 is_stmt 0 discriminator 1
 696 0012 FFF7FEFF 		bl	ulSetInterruptMask
 697 0016 0E4B     		ldr	r3, .L50
 698 0018 0E4A     		ldr	r2, .L50+4
 699 001a 40F2DD11 		movw	r1, #477
 700 001e 0E48     		ldr	r0, .L50+8
 701 0020 FFF7FEFF 		bl	__assert_func
 702              	.L46:
 478:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 703              		.loc 1 478 9 is_stmt 1
 704 0024 FFF7FEFF 		bl	vPortEnterCritical
 479:Lib/FreeRTOS/Source/timers.c ****         {
 480:Lib/FreeRTOS/Source/timers.c ****             if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 705              		.loc 1 480 26
 706 0028 BB68     		ldr	r3, [r7, #8]
 707 002a 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 708              		.loc 1 480 37
 709 002e 03F00403 		and	r3, r3, #4
 710              		.loc 1 480 15
 711 0032 002B     		cmp	r3, #0
 712 0034 02D1     		bne	.L47
 481:Lib/FreeRTOS/Source/timers.c ****             {
 482:Lib/FreeRTOS/Source/timers.c ****                 /* Not an auto-reload timer. */
 483:Lib/FreeRTOS/Source/timers.c ****                 xReturn = pdFALSE;
 713              		.loc 1 483 25
 714 0036 0023     		movs	r3, #0
 715 0038 FB60     		str	r3, [r7, #12]
 716 003a 01E0     		b	.L48
 717              	.L47:
 484:Lib/FreeRTOS/Source/timers.c ****             }
 485:Lib/FreeRTOS/Source/timers.c ****             else
 486:Lib/FreeRTOS/Source/timers.c ****             {
 487:Lib/FreeRTOS/Source/timers.c ****                 /* Is an auto-reload timer. */
 488:Lib/FreeRTOS/Source/timers.c ****                 xReturn = pdTRUE;
 718              		.loc 1 488 25
 719 003c 0123     		movs	r3, #1
 720 003e FB60     		str	r3, [r7, #12]
 721              	.L48:
 489:Lib/FreeRTOS/Source/timers.c ****             }
 490:Lib/FreeRTOS/Source/timers.c ****         }
ARM GAS  /tmp/cccWNSAq.s 			page 22


 491:Lib/FreeRTOS/Source/timers.c ****         taskEXIT_CRITICAL();
 722              		.loc 1 491 9
 723 0040 FFF7FEFF 		bl	vPortExitCritical
 492:Lib/FreeRTOS/Source/timers.c **** 
 493:Lib/FreeRTOS/Source/timers.c ****         return xReturn;
 724              		.loc 1 493 16
 725 0044 FB68     		ldr	r3, [r7, #12]
 494:Lib/FreeRTOS/Source/timers.c ****     }
 726              		.loc 1 494 5
 727 0046 1846     		mov	r0, r3
 728 0048 1037     		adds	r7, r7, #16
 729              		.cfi_def_cfa_offset 8
 730 004a BD46     		mov	sp, r7
 731              		.cfi_def_cfa_register 13
 732              		@ sp needed
 733 004c 80BD     		pop	{r7, pc}
 734              	.L51:
 735 004e 00BF     		.align	2
 736              	.L50:
 737 0050 08000000 		.word	.LC1
 738 0054 00000000 		.word	__func__.11
 739 0058 0C000000 		.word	.LC2
 740              		.cfi_endproc
 741              	.LFE7:
 743              		.section	.text.uxTimerGetReloadMode,"ax",%progbits
 744              		.align	1
 745              		.global	uxTimerGetReloadMode
 746              		.syntax unified
 747              		.thumb
 748              		.thumb_func
 750              	uxTimerGetReloadMode:
 751              	.LFB8:
 495:Lib/FreeRTOS/Source/timers.c **** 
 496:Lib/FreeRTOS/Source/timers.c ****     UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer )
 497:Lib/FreeRTOS/Source/timers.c ****     {
 752              		.loc 1 497 5
 753              		.cfi_startproc
 754              		@ args = 0, pretend = 0, frame = 8
 755              		@ frame_needed = 1, uses_anonymous_args = 0
 756 0000 80B5     		push	{r7, lr}
 757              		.cfi_def_cfa_offset 8
 758              		.cfi_offset 7, -8
 759              		.cfi_offset 14, -4
 760 0002 82B0     		sub	sp, sp, #8
 761              		.cfi_def_cfa_offset 16
 762 0004 00AF     		add	r7, sp, #0
 763              		.cfi_def_cfa_register 7
 764 0006 7860     		str	r0, [r7, #4]
 498:Lib/FreeRTOS/Source/timers.c ****         return ( UBaseType_t ) xTimerGetReloadMode( xTimer );
 765              		.loc 1 498 32
 766 0008 7868     		ldr	r0, [r7, #4]
 767 000a FFF7FEFF 		bl	xTimerGetReloadMode
 768 000e 0346     		mov	r3, r0
 499:Lib/FreeRTOS/Source/timers.c ****     }
 769              		.loc 1 499 5
 770 0010 1846     		mov	r0, r3
 771 0012 0837     		adds	r7, r7, #8
ARM GAS  /tmp/cccWNSAq.s 			page 23


 772              		.cfi_def_cfa_offset 8
 773 0014 BD46     		mov	sp, r7
 774              		.cfi_def_cfa_register 13
 775              		@ sp needed
 776 0016 80BD     		pop	{r7, pc}
 777              		.cfi_endproc
 778              	.LFE8:
 780              		.section	.text.xTimerGetExpiryTime,"ax",%progbits
 781              		.align	1
 782              		.global	xTimerGetExpiryTime
 783              		.syntax unified
 784              		.thumb
 785              		.thumb_func
 787              	xTimerGetExpiryTime:
 788              	.LFB9:
 500:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 501:Lib/FreeRTOS/Source/timers.c **** 
 502:Lib/FreeRTOS/Source/timers.c ****     TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
 503:Lib/FreeRTOS/Source/timers.c ****     {
 789              		.loc 1 503 5
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 16
 792              		@ frame_needed = 1, uses_anonymous_args = 0
 793 0000 80B5     		push	{r7, lr}
 794              		.cfi_def_cfa_offset 8
 795              		.cfi_offset 7, -8
 796              		.cfi_offset 14, -4
 797 0002 84B0     		sub	sp, sp, #16
 798              		.cfi_def_cfa_offset 24
 799 0004 00AF     		add	r7, sp, #0
 800              		.cfi_def_cfa_register 7
 801 0006 7860     		str	r0, [r7, #4]
 504:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 802              		.loc 1 504 19
 803 0008 7B68     		ldr	r3, [r7, #4]
 804 000a FB60     		str	r3, [r7, #12]
 505:Lib/FreeRTOS/Source/timers.c ****         TickType_t xReturn;
 506:Lib/FreeRTOS/Source/timers.c **** 
 507:Lib/FreeRTOS/Source/timers.c ****         configASSERT( xTimer );
 805              		.loc 1 507 9
 806 000c 7B68     		ldr	r3, [r7, #4]
 807 000e 002B     		cmp	r3, #0
 808 0010 08D1     		bne	.L55
 809              		.loc 1 507 9 is_stmt 0 discriminator 1
 810 0012 FFF7FEFF 		bl	ulSetInterruptMask
 811 0016 074B     		ldr	r3, .L57
 812 0018 074A     		ldr	r2, .L57+4
 813 001a 40F2FB11 		movw	r1, #507
 814 001e 0748     		ldr	r0, .L57+8
 815 0020 FFF7FEFF 		bl	__assert_func
 816              	.L55:
 508:Lib/FreeRTOS/Source/timers.c ****         xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 817              		.loc 1 508 17 is_stmt 1
 818 0024 FB68     		ldr	r3, [r7, #12]
 819 0026 5B68     		ldr	r3, [r3, #4]
 820 0028 BB60     		str	r3, [r7, #8]
 509:Lib/FreeRTOS/Source/timers.c ****         return xReturn;
ARM GAS  /tmp/cccWNSAq.s 			page 24


 821              		.loc 1 509 16
 822 002a BB68     		ldr	r3, [r7, #8]
 510:Lib/FreeRTOS/Source/timers.c ****     }
 823              		.loc 1 510 5
 824 002c 1846     		mov	r0, r3
 825 002e 1037     		adds	r7, r7, #16
 826              		.cfi_def_cfa_offset 8
 827 0030 BD46     		mov	sp, r7
 828              		.cfi_def_cfa_register 13
 829              		@ sp needed
 830 0032 80BD     		pop	{r7, pc}
 831              	.L58:
 832              		.align	2
 833              	.L57:
 834 0034 08000000 		.word	.LC1
 835 0038 00000000 		.word	__func__.10
 836 003c 0C000000 		.word	.LC2
 837              		.cfi_endproc
 838              	.LFE9:
 840              		.section	.text.xTimerGetStaticBuffer,"ax",%progbits
 841              		.align	1
 842              		.global	xTimerGetStaticBuffer
 843              		.syntax unified
 844              		.thumb
 845              		.thumb_func
 847              	xTimerGetStaticBuffer:
 848              	.LFB10:
 511:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 512:Lib/FreeRTOS/Source/timers.c **** 
 513:Lib/FreeRTOS/Source/timers.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 514:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xTimerGetStaticBuffer( TimerHandle_t xTimer,
 515:Lib/FreeRTOS/Source/timers.c ****                                           StaticTimer_t ** ppxTimerBuffer )
 516:Lib/FreeRTOS/Source/timers.c ****         {
 849              		.loc 1 516 9
 850              		.cfi_startproc
 851              		@ args = 0, pretend = 0, frame = 16
 852              		@ frame_needed = 1, uses_anonymous_args = 0
 853 0000 80B5     		push	{r7, lr}
 854              		.cfi_def_cfa_offset 8
 855              		.cfi_offset 7, -8
 856              		.cfi_offset 14, -4
 857 0002 84B0     		sub	sp, sp, #16
 858              		.cfi_def_cfa_offset 24
 859 0004 00AF     		add	r7, sp, #0
 860              		.cfi_def_cfa_register 7
 861 0006 7860     		str	r0, [r7, #4]
 862 0008 3960     		str	r1, [r7]
 517:Lib/FreeRTOS/Source/timers.c ****             BaseType_t xReturn;
 518:Lib/FreeRTOS/Source/timers.c ****             Timer_t * pxTimer = xTimer;
 863              		.loc 1 518 23
 864 000a 7B68     		ldr	r3, [r7, #4]
 865 000c BB60     		str	r3, [r7, #8]
 519:Lib/FreeRTOS/Source/timers.c **** 
 520:Lib/FreeRTOS/Source/timers.c ****             configASSERT( ppxTimerBuffer != NULL );
 866              		.loc 1 520 13
 867 000e 3B68     		ldr	r3, [r7]
 868 0010 002B     		cmp	r3, #0
ARM GAS  /tmp/cccWNSAq.s 			page 25


 869 0012 08D1     		bne	.L60
 870              		.loc 1 520 13 is_stmt 0 discriminator 1
 871 0014 FFF7FEFF 		bl	ulSetInterruptMask
 872 0018 0D4B     		ldr	r3, .L64
 873 001a 0E4A     		ldr	r2, .L64+4
 874 001c 4FF40271 		mov	r1, #520
 875 0020 0D48     		ldr	r0, .L64+8
 876 0022 FFF7FEFF 		bl	__assert_func
 877              	.L60:
 521:Lib/FreeRTOS/Source/timers.c **** 
 522:Lib/FreeRTOS/Source/timers.c ****             if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) != 0 )
 878              		.loc 1 522 26 is_stmt 1
 879 0026 BB68     		ldr	r3, [r7, #8]
 880 0028 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 881              		.loc 1 522 37
 882 002c 03F00203 		and	r3, r3, #2
 883              		.loc 1 522 15
 884 0030 002B     		cmp	r3, #0
 885 0032 05D0     		beq	.L61
 523:Lib/FreeRTOS/Source/timers.c ****             {
 524:Lib/FreeRTOS/Source/timers.c ****                 *ppxTimerBuffer = ( StaticTimer_t * ) pxTimer;
 886              		.loc 1 524 33
 887 0034 3B68     		ldr	r3, [r7]
 888 0036 BA68     		ldr	r2, [r7, #8]
 889 0038 1A60     		str	r2, [r3]
 525:Lib/FreeRTOS/Source/timers.c ****                 xReturn = pdTRUE;
 890              		.loc 1 525 25
 891 003a 0123     		movs	r3, #1
 892 003c FB60     		str	r3, [r7, #12]
 893 003e 01E0     		b	.L62
 894              	.L61:
 526:Lib/FreeRTOS/Source/timers.c ****             }
 527:Lib/FreeRTOS/Source/timers.c ****             else
 528:Lib/FreeRTOS/Source/timers.c ****             {
 529:Lib/FreeRTOS/Source/timers.c ****                 xReturn = pdFALSE;
 895              		.loc 1 529 25
 896 0040 0023     		movs	r3, #0
 897 0042 FB60     		str	r3, [r7, #12]
 898              	.L62:
 530:Lib/FreeRTOS/Source/timers.c ****             }
 531:Lib/FreeRTOS/Source/timers.c **** 
 532:Lib/FreeRTOS/Source/timers.c ****             return xReturn;
 899              		.loc 1 532 20
 900 0044 FB68     		ldr	r3, [r7, #12]
 533:Lib/FreeRTOS/Source/timers.c ****         }
 901              		.loc 1 533 9
 902 0046 1846     		mov	r0, r3
 903 0048 1037     		adds	r7, r7, #16
 904              		.cfi_def_cfa_offset 8
 905 004a BD46     		mov	sp, r7
 906              		.cfi_def_cfa_register 13
 907              		@ sp needed
 908 004c 80BD     		pop	{r7, pc}
 909              	.L65:
 910 004e 00BF     		.align	2
 911              	.L64:
 912 0050 08000000 		.word	.LC1
ARM GAS  /tmp/cccWNSAq.s 			page 26


 913 0054 00000000 		.word	__func__.9
 914 0058 0C000000 		.word	.LC2
 915              		.cfi_endproc
 916              	.LFE10:
 918              		.section	.text.pcTimerGetName,"ax",%progbits
 919              		.align	1
 920              		.global	pcTimerGetName
 921              		.syntax unified
 922              		.thumb
 923              		.thumb_func
 925              	pcTimerGetName:
 926              	.LFB11:
 534:Lib/FreeRTOS/Source/timers.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
 535:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 536:Lib/FreeRTOS/Source/timers.c **** 
 537:Lib/FreeRTOS/Source/timers.c ****     const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are all
 538:Lib/FreeRTOS/Source/timers.c ****     {
 927              		.loc 1 538 5
 928              		.cfi_startproc
 929              		@ args = 0, pretend = 0, frame = 16
 930              		@ frame_needed = 1, uses_anonymous_args = 0
 931 0000 80B5     		push	{r7, lr}
 932              		.cfi_def_cfa_offset 8
 933              		.cfi_offset 7, -8
 934              		.cfi_offset 14, -4
 935 0002 84B0     		sub	sp, sp, #16
 936              		.cfi_def_cfa_offset 24
 937 0004 00AF     		add	r7, sp, #0
 938              		.cfi_def_cfa_register 7
 939 0006 7860     		str	r0, [r7, #4]
 539:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 940              		.loc 1 539 19
 941 0008 7B68     		ldr	r3, [r7, #4]
 942 000a FB60     		str	r3, [r7, #12]
 540:Lib/FreeRTOS/Source/timers.c **** 
 541:Lib/FreeRTOS/Source/timers.c ****         configASSERT( xTimer );
 943              		.loc 1 541 9
 944 000c 7B68     		ldr	r3, [r7, #4]
 945 000e 002B     		cmp	r3, #0
 946 0010 08D1     		bne	.L67
 947              		.loc 1 541 9 is_stmt 0 discriminator 1
 948 0012 FFF7FEFF 		bl	ulSetInterruptMask
 949 0016 064B     		ldr	r3, .L69
 950 0018 064A     		ldr	r2, .L69+4
 951 001a 40F21D21 		movw	r1, #541
 952 001e 0648     		ldr	r0, .L69+8
 953 0020 FFF7FEFF 		bl	__assert_func
 954              	.L67:
 542:Lib/FreeRTOS/Source/timers.c ****         return pxTimer->pcTimerName;
 955              		.loc 1 542 23 is_stmt 1
 956 0024 FB68     		ldr	r3, [r7, #12]
 957 0026 1B68     		ldr	r3, [r3]
 543:Lib/FreeRTOS/Source/timers.c ****     }
 958              		.loc 1 543 5
 959 0028 1846     		mov	r0, r3
 960 002a 1037     		adds	r7, r7, #16
 961              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cccWNSAq.s 			page 27


 962 002c BD46     		mov	sp, r7
 963              		.cfi_def_cfa_register 13
 964              		@ sp needed
 965 002e 80BD     		pop	{r7, pc}
 966              	.L70:
 967              		.align	2
 968              	.L69:
 969 0030 08000000 		.word	.LC1
 970 0034 00000000 		.word	__func__.8
 971 0038 0C000000 		.word	.LC2
 972              		.cfi_endproc
 973              	.LFE11:
 975              		.section	.text.prvReloadTimer,"ax",%progbits
 976              		.align	1
 977              		.syntax unified
 978              		.thumb
 979              		.thumb_func
 981              	prvReloadTimer:
 982              	.LFB12:
 544:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 545:Lib/FreeRTOS/Source/timers.c **** 
 546:Lib/FreeRTOS/Source/timers.c ****     static void prvReloadTimer( Timer_t * const pxTimer,
 547:Lib/FreeRTOS/Source/timers.c ****                                 TickType_t xExpiredTime,
 548:Lib/FreeRTOS/Source/timers.c ****                                 const TickType_t xTimeNow )
 549:Lib/FreeRTOS/Source/timers.c ****     {
 983              		.loc 1 549 5
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 16
 986              		@ frame_needed = 1, uses_anonymous_args = 0
 987 0000 80B5     		push	{r7, lr}
 988              		.cfi_def_cfa_offset 8
 989              		.cfi_offset 7, -8
 990              		.cfi_offset 14, -4
 991 0002 84B0     		sub	sp, sp, #16
 992              		.cfi_def_cfa_offset 24
 993 0004 00AF     		add	r7, sp, #0
 994              		.cfi_def_cfa_register 7
 995 0006 F860     		str	r0, [r7, #12]
 996 0008 B960     		str	r1, [r7, #8]
 997 000a 7A60     		str	r2, [r7, #4]
 550:Lib/FreeRTOS/Source/timers.c ****         /* Insert the timer into the appropriate list for the next expiry time.
 551:Lib/FreeRTOS/Source/timers.c ****          * If the next expiry time has already passed, advance the expiry time,
 552:Lib/FreeRTOS/Source/timers.c ****          * call the callback function, and try again. */
 553:Lib/FreeRTOS/Source/timers.c ****         while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks )
 998              		.loc 1 553 14
 999 000c 08E0     		b	.L72
 1000              	.L73:
 554:Lib/FreeRTOS/Source/timers.c ****         {
 555:Lib/FreeRTOS/Source/timers.c ****             /* Advance the expiry time. */
 556:Lib/FreeRTOS/Source/timers.c ****             xExpiredTime += pxTimer->xTimerPeriodInTicks;
 1001              		.loc 1 556 36
 1002 000e FB68     		ldr	r3, [r7, #12]
 1003 0010 9B69     		ldr	r3, [r3, #24]
 1004              		.loc 1 556 26
 1005 0012 BA68     		ldr	r2, [r7, #8]
 1006 0014 1344     		add	r3, r3, r2
 1007 0016 BB60     		str	r3, [r7, #8]
ARM GAS  /tmp/cccWNSAq.s 			page 28


 557:Lib/FreeRTOS/Source/timers.c **** 
 558:Lib/FreeRTOS/Source/timers.c ****             /* Call the timer callback. */
 559:Lib/FreeRTOS/Source/timers.c ****             traceTIMER_EXPIRED( pxTimer );
 560:Lib/FreeRTOS/Source/timers.c ****             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1008              		.loc 1 560 20
 1009 0018 FB68     		ldr	r3, [r7, #12]
 1010 001a 1B6A     		ldr	r3, [r3, #32]
 1011              		.loc 1 560 13
 1012 001c F868     		ldr	r0, [r7, #12]
 1013 001e 9847     		blx	r3
 1014              	.LVL0:
 1015              	.L72:
 553:Lib/FreeRTOS/Source/timers.c ****         {
 1016              		.loc 1 553 77
 1017 0020 FB68     		ldr	r3, [r7, #12]
 1018 0022 9A69     		ldr	r2, [r3, #24]
 553:Lib/FreeRTOS/Source/timers.c ****         {
 1019              		.loc 1 553 16
 1020 0024 BB68     		ldr	r3, [r7, #8]
 1021 0026 D118     		adds	r1, r2, r3
 1022 0028 BB68     		ldr	r3, [r7, #8]
 1023 002a 7A68     		ldr	r2, [r7, #4]
 1024 002c F868     		ldr	r0, [r7, #12]
 1025 002e FFF7FEFF 		bl	prvInsertTimerInActiveList
 1026 0032 0346     		mov	r3, r0
 553:Lib/FreeRTOS/Source/timers.c ****         {
 1027              		.loc 1 553 127 discriminator 1
 1028 0034 002B     		cmp	r3, #0
 1029 0036 EAD1     		bne	.L73
 561:Lib/FreeRTOS/Source/timers.c ****         }
 562:Lib/FreeRTOS/Source/timers.c ****     }
 1030              		.loc 1 562 5
 1031 0038 00BF     		nop
 1032 003a 00BF     		nop
 1033 003c 1037     		adds	r7, r7, #16
 1034              		.cfi_def_cfa_offset 8
 1035 003e BD46     		mov	sp, r7
 1036              		.cfi_def_cfa_register 13
 1037              		@ sp needed
 1038 0040 80BD     		pop	{r7, pc}
 1039              		.cfi_endproc
 1040              	.LFE12:
 1042              		.section	.text.prvProcessExpiredTimer,"ax",%progbits
 1043              		.align	1
 1044              		.syntax unified
 1045              		.thumb
 1046              		.thumb_func
 1048              	prvProcessExpiredTimer:
 1049              	.LFB13:
 563:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 564:Lib/FreeRTOS/Source/timers.c **** 
 565:Lib/FreeRTOS/Source/timers.c ****     static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
 566:Lib/FreeRTOS/Source/timers.c ****                                         const TickType_t xTimeNow )
 567:Lib/FreeRTOS/Source/timers.c ****     {
 1050              		.loc 1 567 5
 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/cccWNSAq.s 			page 29


 1053              		@ frame_needed = 1, uses_anonymous_args = 0
 1054 0000 80B5     		push	{r7, lr}
 1055              		.cfi_def_cfa_offset 8
 1056              		.cfi_offset 7, -8
 1057              		.cfi_offset 14, -4
 1058 0002 84B0     		sub	sp, sp, #16
 1059              		.cfi_def_cfa_offset 24
 1060 0004 00AF     		add	r7, sp, #0
 1061              		.cfi_def_cfa_register 7
 1062 0006 7860     		str	r0, [r7, #4]
 1063 0008 3960     		str	r1, [r7]
 568:Lib/FreeRTOS/Source/timers.c ****         Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); 
 1064              		.loc 1 568 49
 1065 000a 144B     		ldr	r3, .L77
 1066 000c 1B68     		ldr	r3, [r3]
 1067 000e DB68     		ldr	r3, [r3, #12]
 1068              		.loc 1 568 25
 1069 0010 DB68     		ldr	r3, [r3, #12]
 1070 0012 FB60     		str	r3, [r7, #12]
 569:Lib/FreeRTOS/Source/timers.c **** 
 570:Lib/FreeRTOS/Source/timers.c ****         /* Remove the timer from the list of active timers.  A check has already
 571:Lib/FreeRTOS/Source/timers.c ****          * been performed to ensure the list is not empty. */
 572:Lib/FreeRTOS/Source/timers.c **** 
 573:Lib/FreeRTOS/Source/timers.c ****         ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 1071              		.loc 1 573 18
 1072 0014 FB68     		ldr	r3, [r7, #12]
 1073 0016 0433     		adds	r3, r3, #4
 1074 0018 1846     		mov	r0, r3
 1075 001a FFF7FEFF 		bl	uxListRemove
 574:Lib/FreeRTOS/Source/timers.c **** 
 575:Lib/FreeRTOS/Source/timers.c ****         /* If the timer is an auto-reload timer then calculate the next
 576:Lib/FreeRTOS/Source/timers.c ****          * expiry time and re-insert the timer in the list of active timers. */
 577:Lib/FreeRTOS/Source/timers.c ****         if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 1076              		.loc 1 577 22
 1077 001e FB68     		ldr	r3, [r7, #12]
 1078 0020 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1079              		.loc 1 577 33
 1080 0024 03F00403 		and	r3, r3, #4
 1081              		.loc 1 577 11
 1082 0028 002B     		cmp	r3, #0
 1083 002a 05D0     		beq	.L75
 578:Lib/FreeRTOS/Source/timers.c ****         {
 579:Lib/FreeRTOS/Source/timers.c ****             prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 1084              		.loc 1 579 13
 1085 002c 3A68     		ldr	r2, [r7]
 1086 002e 7968     		ldr	r1, [r7, #4]
 1087 0030 F868     		ldr	r0, [r7, #12]
 1088 0032 FFF7FEFF 		bl	prvReloadTimer
 1089 0036 08E0     		b	.L76
 1090              	.L75:
 580:Lib/FreeRTOS/Source/timers.c ****         }
 581:Lib/FreeRTOS/Source/timers.c ****         else
 582:Lib/FreeRTOS/Source/timers.c ****         {
 583:Lib/FreeRTOS/Source/timers.c ****             pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 1091              		.loc 1 583 20
 1092 0038 FB68     		ldr	r3, [r7, #12]
 1093 003a 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
ARM GAS  /tmp/cccWNSAq.s 			page 30


 1094              		.loc 1 583 31
 1095 003e 23F00103 		bic	r3, r3, #1
 1096 0042 DAB2     		uxtb	r2, r3
 1097 0044 FB68     		ldr	r3, [r7, #12]
 1098 0046 83F82820 		strb	r2, [r3, #40]
 1099              	.L76:
 584:Lib/FreeRTOS/Source/timers.c ****         }
 585:Lib/FreeRTOS/Source/timers.c **** 
 586:Lib/FreeRTOS/Source/timers.c ****         /* Call the timer callback. */
 587:Lib/FreeRTOS/Source/timers.c ****         traceTIMER_EXPIRED( pxTimer );
 588:Lib/FreeRTOS/Source/timers.c ****         pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1100              		.loc 1 588 16
 1101 004a FB68     		ldr	r3, [r7, #12]
 1102 004c 1B6A     		ldr	r3, [r3, #32]
 1103              		.loc 1 588 9
 1104 004e F868     		ldr	r0, [r7, #12]
 1105 0050 9847     		blx	r3
 1106              	.LVL1:
 589:Lib/FreeRTOS/Source/timers.c ****     }
 1107              		.loc 1 589 5
 1108 0052 00BF     		nop
 1109 0054 1037     		adds	r7, r7, #16
 1110              		.cfi_def_cfa_offset 8
 1111 0056 BD46     		mov	sp, r7
 1112              		.cfi_def_cfa_register 13
 1113              		@ sp needed
 1114 0058 80BD     		pop	{r7, pc}
 1115              	.L78:
 1116 005a 00BF     		.align	2
 1117              	.L77:
 1118 005c 00000000 		.word	pxCurrentTimerList
 1119              		.cfi_endproc
 1120              	.LFE13:
 1122              		.section	.text.prvTimerTask,"ax",%progbits
 1123              		.align	1
 1124              		.syntax unified
 1125              		.thumb
 1126              		.thumb_func
 1128              	prvTimerTask:
 1129              	.LFB14:
 590:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 591:Lib/FreeRTOS/Source/timers.c **** 
 592:Lib/FreeRTOS/Source/timers.c ****     static portTASK_FUNCTION( prvTimerTask, pvParameters )
 593:Lib/FreeRTOS/Source/timers.c ****     {
 1130              		.loc 1 593 5
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 16
 1133              		@ frame_needed = 1, uses_anonymous_args = 0
 1134 0000 80B5     		push	{r7, lr}
 1135              		.cfi_def_cfa_offset 8
 1136              		.cfi_offset 7, -8
 1137              		.cfi_offset 14, -4
 1138 0002 84B0     		sub	sp, sp, #16
 1139              		.cfi_def_cfa_offset 24
 1140 0004 00AF     		add	r7, sp, #0
 1141              		.cfi_def_cfa_register 7
 1142 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/cccWNSAq.s 			page 31


 1143              	.L80:
 594:Lib/FreeRTOS/Source/timers.c ****         TickType_t xNextExpireTime;
 595:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xListWasEmpty;
 596:Lib/FreeRTOS/Source/timers.c **** 
 597:Lib/FreeRTOS/Source/timers.c ****         /* Just to avoid compiler warnings. */
 598:Lib/FreeRTOS/Source/timers.c ****         ( void ) pvParameters;
 599:Lib/FreeRTOS/Source/timers.c **** 
 600:Lib/FreeRTOS/Source/timers.c ****         #if ( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
 601:Lib/FreeRTOS/Source/timers.c ****         {
 602:Lib/FreeRTOS/Source/timers.c ****             /* Allow the application writer to execute some code in the context of
 603:Lib/FreeRTOS/Source/timers.c ****              * this task at the point the task starts executing.  This is useful if the
 604:Lib/FreeRTOS/Source/timers.c ****              * application includes initialisation code that would benefit from
 605:Lib/FreeRTOS/Source/timers.c ****              * executing after the scheduler has been started. */
 606:Lib/FreeRTOS/Source/timers.c ****             vApplicationDaemonTaskStartupHook();
 607:Lib/FreeRTOS/Source/timers.c ****         }
 608:Lib/FreeRTOS/Source/timers.c ****         #endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
 609:Lib/FreeRTOS/Source/timers.c **** 
 610:Lib/FreeRTOS/Source/timers.c ****         for( ; ; )
 611:Lib/FreeRTOS/Source/timers.c ****         {
 612:Lib/FreeRTOS/Source/timers.c ****             /* Query the timers list to see if it contains any timers, and if so,
 613:Lib/FreeRTOS/Source/timers.c ****              * obtain the time at which the next timer will expire. */
 614:Lib/FreeRTOS/Source/timers.c ****             xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 1144              		.loc 1 614 31
 1145 0008 07F10803 		add	r3, r7, #8
 1146 000c 1846     		mov	r0, r3
 1147 000e FFF7FEFF 		bl	prvGetNextExpireTime
 1148 0012 F860     		str	r0, [r7, #12]
 615:Lib/FreeRTOS/Source/timers.c **** 
 616:Lib/FreeRTOS/Source/timers.c ****             /* If a timer has expired, process it.  Otherwise, block this task
 617:Lib/FreeRTOS/Source/timers.c ****              * until either a timer does expire, or a command is received. */
 618:Lib/FreeRTOS/Source/timers.c ****             prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 1149              		.loc 1 618 13
 1150 0014 BB68     		ldr	r3, [r7, #8]
 1151 0016 1946     		mov	r1, r3
 1152 0018 F868     		ldr	r0, [r7, #12]
 1153 001a FFF7FEFF 		bl	prvProcessTimerOrBlockTask
 619:Lib/FreeRTOS/Source/timers.c **** 
 620:Lib/FreeRTOS/Source/timers.c ****             /* Empty the command queue. */
 621:Lib/FreeRTOS/Source/timers.c ****             prvProcessReceivedCommands();
 1154              		.loc 1 621 13 discriminator 1
 1155 001e FFF7FEFF 		bl	prvProcessReceivedCommands
 614:Lib/FreeRTOS/Source/timers.c **** 
 1156              		.loc 1 614 29
 1157 0022 00BF     		nop
 1158 0024 F0E7     		b	.L80
 1159              		.cfi_endproc
 1160              	.LFE14:
 1162              		.section	.text.prvProcessTimerOrBlockTask,"ax",%progbits
 1163              		.align	1
 1164              		.syntax unified
 1165              		.thumb
 1166              		.thumb_func
 1168              	prvProcessTimerOrBlockTask:
 1169              	.LFB15:
 622:Lib/FreeRTOS/Source/timers.c ****         }
 623:Lib/FreeRTOS/Source/timers.c ****     }
 624:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cccWNSAq.s 			page 32


 625:Lib/FreeRTOS/Source/timers.c **** 
 626:Lib/FreeRTOS/Source/timers.c ****     static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
 627:Lib/FreeRTOS/Source/timers.c ****                                             BaseType_t xListWasEmpty )
 628:Lib/FreeRTOS/Source/timers.c ****     {
 1170              		.loc 1 628 5
 1171              		.cfi_startproc
 1172              		@ args = 0, pretend = 0, frame = 16
 1173              		@ frame_needed = 1, uses_anonymous_args = 0
 1174 0000 80B5     		push	{r7, lr}
 1175              		.cfi_def_cfa_offset 8
 1176              		.cfi_offset 7, -8
 1177              		.cfi_offset 14, -4
 1178 0002 84B0     		sub	sp, sp, #16
 1179              		.cfi_def_cfa_offset 24
 1180 0004 00AF     		add	r7, sp, #0
 1181              		.cfi_def_cfa_register 7
 1182 0006 7860     		str	r0, [r7, #4]
 1183 0008 3960     		str	r1, [r7]
 629:Lib/FreeRTOS/Source/timers.c ****         TickType_t xTimeNow;
 630:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xTimerListsWereSwitched;
 631:Lib/FreeRTOS/Source/timers.c **** 
 632:Lib/FreeRTOS/Source/timers.c ****         vTaskSuspendAll();
 1184              		.loc 1 632 9
 1185 000a FFF7FEFF 		bl	vTaskSuspendAll
 633:Lib/FreeRTOS/Source/timers.c ****         {
 634:Lib/FreeRTOS/Source/timers.c ****             /* Obtain the time now to make an assessment as to whether the timer
 635:Lib/FreeRTOS/Source/timers.c ****              * has expired or not.  If obtaining the time causes the lists to switch
 636:Lib/FreeRTOS/Source/timers.c ****              * then don't process this timer as any timers that remained in the list
 637:Lib/FreeRTOS/Source/timers.c ****              * when the lists were switched will have been processed within the
 638:Lib/FreeRTOS/Source/timers.c ****              * prvSampleTimeNow() function. */
 639:Lib/FreeRTOS/Source/timers.c ****             xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 1186              		.loc 1 639 24
 1187 000e 07F10803 		add	r3, r7, #8
 1188 0012 1846     		mov	r0, r3
 1189 0014 FFF7FEFF 		bl	prvSampleTimeNow
 1190 0018 F860     		str	r0, [r7, #12]
 640:Lib/FreeRTOS/Source/timers.c **** 
 641:Lib/FreeRTOS/Source/timers.c ****             if( xTimerListsWereSwitched == pdFALSE )
 1191              		.loc 1 641 41
 1192 001a BB68     		ldr	r3, [r7, #8]
 1193              		.loc 1 641 15
 1194 001c 002B     		cmp	r3, #0
 1195 001e 2AD1     		bne	.L82
 642:Lib/FreeRTOS/Source/timers.c ****             {
 643:Lib/FreeRTOS/Source/timers.c ****                 /* The tick count has not overflowed, has the timer expired? */
 644:Lib/FreeRTOS/Source/timers.c ****                 if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 1196              		.loc 1 644 19
 1197 0020 3B68     		ldr	r3, [r7]
 1198 0022 002B     		cmp	r3, #0
 1199 0024 0AD1     		bne	.L83
 1200              		.loc 1 644 50 discriminator 1
 1201 0026 7A68     		ldr	r2, [r7, #4]
 1202 0028 FB68     		ldr	r3, [r7, #12]
 1203 002a 9A42     		cmp	r2, r3
 1204 002c 06D8     		bhi	.L83
 645:Lib/FreeRTOS/Source/timers.c ****                 {
 646:Lib/FreeRTOS/Source/timers.c ****                     ( void ) xTaskResumeAll();
ARM GAS  /tmp/cccWNSAq.s 			page 33


 1205              		.loc 1 646 30
 1206 002e FFF7FEFF 		bl	xTaskResumeAll
 647:Lib/FreeRTOS/Source/timers.c ****                     prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 1207              		.loc 1 647 21
 1208 0032 F968     		ldr	r1, [r7, #12]
 1209 0034 7868     		ldr	r0, [r7, #4]
 1210 0036 FFF7FEFF 		bl	prvProcessExpiredTimer
 648:Lib/FreeRTOS/Source/timers.c ****                 }
 649:Lib/FreeRTOS/Source/timers.c ****                 else
 650:Lib/FreeRTOS/Source/timers.c ****                 {
 651:Lib/FreeRTOS/Source/timers.c ****                     /* The tick count has not overflowed, and the next expire
 652:Lib/FreeRTOS/Source/timers.c ****                      * time has not been reached yet.  This task should therefore
 653:Lib/FreeRTOS/Source/timers.c ****                      * block to wait for the next expire time or a command to be
 654:Lib/FreeRTOS/Source/timers.c ****                      * received - whichever comes first.  The following line cannot
 655:Lib/FreeRTOS/Source/timers.c ****                      * be reached unless xNextExpireTime > xTimeNow, except in the
 656:Lib/FreeRTOS/Source/timers.c ****                      * case when the current timer list is empty. */
 657:Lib/FreeRTOS/Source/timers.c ****                     if( xListWasEmpty != pdFALSE )
 658:Lib/FreeRTOS/Source/timers.c ****                     {
 659:Lib/FreeRTOS/Source/timers.c ****                         /* The current timer list is empty - is the overflow list
 660:Lib/FreeRTOS/Source/timers.c ****                          * also empty? */
 661:Lib/FreeRTOS/Source/timers.c ****                         xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 662:Lib/FreeRTOS/Source/timers.c ****                     }
 663:Lib/FreeRTOS/Source/timers.c **** 
 664:Lib/FreeRTOS/Source/timers.c ****                     vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xL
 665:Lib/FreeRTOS/Source/timers.c **** 
 666:Lib/FreeRTOS/Source/timers.c ****                     if( xTaskResumeAll() == pdFALSE )
 667:Lib/FreeRTOS/Source/timers.c ****                     {
 668:Lib/FreeRTOS/Source/timers.c ****                         /* Yield to wait for either a command to arrive, or the
 669:Lib/FreeRTOS/Source/timers.c ****                          * block time to expire.  If a command arrived between the
 670:Lib/FreeRTOS/Source/timers.c ****                          * critical section being exited and this yield then the yield
 671:Lib/FreeRTOS/Source/timers.c ****                          * will not cause the task to block. */
 672:Lib/FreeRTOS/Source/timers.c ****                         portYIELD_WITHIN_API();
 673:Lib/FreeRTOS/Source/timers.c ****                     }
 674:Lib/FreeRTOS/Source/timers.c ****                     else
 675:Lib/FreeRTOS/Source/timers.c ****                     {
 676:Lib/FreeRTOS/Source/timers.c ****                         mtCOVERAGE_TEST_MARKER();
 677:Lib/FreeRTOS/Source/timers.c ****                     }
 678:Lib/FreeRTOS/Source/timers.c ****                 }
 679:Lib/FreeRTOS/Source/timers.c ****             }
 680:Lib/FreeRTOS/Source/timers.c ****             else
 681:Lib/FreeRTOS/Source/timers.c ****             {
 682:Lib/FreeRTOS/Source/timers.c ****                 ( void ) xTaskResumeAll();
 683:Lib/FreeRTOS/Source/timers.c ****             }
 684:Lib/FreeRTOS/Source/timers.c ****         }
 685:Lib/FreeRTOS/Source/timers.c ****     }
 1211              		.loc 1 685 5
 1212 003a 1EE0     		b	.L89
 1213              	.L83:
 657:Lib/FreeRTOS/Source/timers.c ****                     {
 1214              		.loc 1 657 23
 1215 003c 3B68     		ldr	r3, [r7]
 1216 003e 002B     		cmp	r3, #0
 1217 0040 08D0     		beq	.L85
 661:Lib/FreeRTOS/Source/timers.c ****                     }
 1218              		.loc 1 661 41
 1219 0042 104B     		ldr	r3, .L90
 1220 0044 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cccWNSAq.s 			page 34


 1221 0046 1B68     		ldr	r3, [r3]
 1222 0048 002B     		cmp	r3, #0
 1223 004a 01D1     		bne	.L86
 661:Lib/FreeRTOS/Source/timers.c ****                     }
 1224              		.loc 1 661 41 is_stmt 0 discriminator 1
 1225 004c 0123     		movs	r3, #1
 1226 004e 00E0     		b	.L87
 1227              	.L86:
 661:Lib/FreeRTOS/Source/timers.c ****                     }
 1228              		.loc 1 661 41 discriminator 2
 1229 0050 0023     		movs	r3, #0
 1230              	.L87:
 661:Lib/FreeRTOS/Source/timers.c ****                     }
 1231              		.loc 1 661 39 is_stmt 1 discriminator 4
 1232 0052 3B60     		str	r3, [r7]
 1233              	.L85:
 664:Lib/FreeRTOS/Source/timers.c **** 
 1234              		.loc 1 664 21
 1235 0054 0C4B     		ldr	r3, .L90+4
 1236 0056 1868     		ldr	r0, [r3]
 1237 0058 7A68     		ldr	r2, [r7, #4]
 1238 005a FB68     		ldr	r3, [r7, #12]
 1239 005c D31A     		subs	r3, r2, r3
 1240 005e 3A68     		ldr	r2, [r7]
 1241 0060 1946     		mov	r1, r3
 1242 0062 FFF7FEFF 		bl	vQueueWaitForMessageRestricted
 666:Lib/FreeRTOS/Source/timers.c ****                     {
 1243              		.loc 1 666 25
 1244 0066 FFF7FEFF 		bl	xTaskResumeAll
 1245 006a 0346     		mov	r3, r0
 666:Lib/FreeRTOS/Source/timers.c ****                     {
 1246              		.loc 1 666 23 discriminator 1
 1247 006c 002B     		cmp	r3, #0
 1248 006e 04D1     		bne	.L89
 672:Lib/FreeRTOS/Source/timers.c ****                     }
 1249              		.loc 1 672 25
 1250 0070 FFF7FEFF 		bl	vPortYield
 1251              		.loc 1 685 5
 1252 0074 01E0     		b	.L89
 1253              	.L82:
 682:Lib/FreeRTOS/Source/timers.c ****             }
 1254              		.loc 1 682 26
 1255 0076 FFF7FEFF 		bl	xTaskResumeAll
 1256              	.L89:
 1257              		.loc 1 685 5
 1258 007a 00BF     		nop
 1259 007c 1037     		adds	r7, r7, #16
 1260              		.cfi_def_cfa_offset 8
 1261 007e BD46     		mov	sp, r7
 1262              		.cfi_def_cfa_register 13
 1263              		@ sp needed
 1264 0080 80BD     		pop	{r7, pc}
 1265              	.L91:
 1266 0082 00BF     		.align	2
 1267              	.L90:
 1268 0084 00000000 		.word	pxOverflowTimerList
 1269 0088 00000000 		.word	xTimerQueue
ARM GAS  /tmp/cccWNSAq.s 			page 35


 1270              		.cfi_endproc
 1271              	.LFE15:
 1273              		.section	.text.prvGetNextExpireTime,"ax",%progbits
 1274              		.align	1
 1275              		.syntax unified
 1276              		.thumb
 1277              		.thumb_func
 1279              	prvGetNextExpireTime:
 1280              	.LFB16:
 686:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 687:Lib/FreeRTOS/Source/timers.c **** 
 688:Lib/FreeRTOS/Source/timers.c ****     static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
 689:Lib/FreeRTOS/Source/timers.c ****     {
 1281              		.loc 1 689 5
 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 16
 1284              		@ frame_needed = 1, uses_anonymous_args = 0
 1285              		@ link register save eliminated.
 1286 0000 80B4     		push	{r7}
 1287              		.cfi_def_cfa_offset 4
 1288              		.cfi_offset 7, -4
 1289 0002 85B0     		sub	sp, sp, #20
 1290              		.cfi_def_cfa_offset 24
 1291 0004 00AF     		add	r7, sp, #0
 1292              		.cfi_def_cfa_register 7
 1293 0006 7860     		str	r0, [r7, #4]
 690:Lib/FreeRTOS/Source/timers.c ****         TickType_t xNextExpireTime;
 691:Lib/FreeRTOS/Source/timers.c **** 
 692:Lib/FreeRTOS/Source/timers.c ****         /* Timers are listed in expiry time order, with the head of the list
 693:Lib/FreeRTOS/Source/timers.c ****          * referencing the task that will expire first.  Obtain the time at which
 694:Lib/FreeRTOS/Source/timers.c ****          * the timer with the nearest expiry time will expire.  If there are no
 695:Lib/FreeRTOS/Source/timers.c ****          * active timers then just set the next expire time to 0.  That will cause
 696:Lib/FreeRTOS/Source/timers.c ****          * this task to unblock when the tick count overflows, at which point the
 697:Lib/FreeRTOS/Source/timers.c ****          * timer lists will be switched and the next expiry time can be
 698:Lib/FreeRTOS/Source/timers.c ****          * re-assessed.  */
 699:Lib/FreeRTOS/Source/timers.c ****         *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 1294              		.loc 1 699 27
 1295 0008 0E4B     		ldr	r3, .L98
 1296 000a 1B68     		ldr	r3, [r3]
 1297 000c 1B68     		ldr	r3, [r3]
 1298 000e 002B     		cmp	r3, #0
 1299 0010 01D1     		bne	.L93
 1300              		.loc 1 699 27 is_stmt 0 discriminator 1
 1301 0012 0122     		movs	r2, #1
 1302 0014 00E0     		b	.L94
 1303              	.L93:
 1304              		.loc 1 699 27 discriminator 2
 1305 0016 0022     		movs	r2, #0
 1306              	.L94:
 1307              		.loc 1 699 25 is_stmt 1 discriminator 4
 1308 0018 7B68     		ldr	r3, [r7, #4]
 1309 001a 1A60     		str	r2, [r3]
 700:Lib/FreeRTOS/Source/timers.c **** 
 701:Lib/FreeRTOS/Source/timers.c ****         if( *pxListWasEmpty == pdFALSE )
 1310              		.loc 1 701 13
 1311 001c 7B68     		ldr	r3, [r7, #4]
 1312 001e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cccWNSAq.s 			page 36


 1313              		.loc 1 701 11
 1314 0020 002B     		cmp	r3, #0
 1315 0022 05D1     		bne	.L95
 702:Lib/FreeRTOS/Source/timers.c ****         {
 703:Lib/FreeRTOS/Source/timers.c ****             xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 1316              		.loc 1 703 31
 1317 0024 074B     		ldr	r3, .L98
 1318 0026 1B68     		ldr	r3, [r3]
 1319 0028 DB68     		ldr	r3, [r3, #12]
 1320              		.loc 1 703 29
 1321 002a 1B68     		ldr	r3, [r3]
 1322 002c FB60     		str	r3, [r7, #12]
 1323 002e 01E0     		b	.L96
 1324              	.L95:
 704:Lib/FreeRTOS/Source/timers.c ****         }
 705:Lib/FreeRTOS/Source/timers.c ****         else
 706:Lib/FreeRTOS/Source/timers.c ****         {
 707:Lib/FreeRTOS/Source/timers.c ****             /* Ensure the task unblocks when the tick count rolls over. */
 708:Lib/FreeRTOS/Source/timers.c ****             xNextExpireTime = ( TickType_t ) 0U;
 1325              		.loc 1 708 29
 1326 0030 0023     		movs	r3, #0
 1327 0032 FB60     		str	r3, [r7, #12]
 1328              	.L96:
 709:Lib/FreeRTOS/Source/timers.c ****         }
 710:Lib/FreeRTOS/Source/timers.c **** 
 711:Lib/FreeRTOS/Source/timers.c ****         return xNextExpireTime;
 1329              		.loc 1 711 16
 1330 0034 FB68     		ldr	r3, [r7, #12]
 712:Lib/FreeRTOS/Source/timers.c ****     }
 1331              		.loc 1 712 5
 1332 0036 1846     		mov	r0, r3
 1333 0038 1437     		adds	r7, r7, #20
 1334              		.cfi_def_cfa_offset 4
 1335 003a BD46     		mov	sp, r7
 1336              		.cfi_def_cfa_register 13
 1337              		@ sp needed
 1338 003c 5DF8047B 		ldr	r7, [sp], #4
 1339              		.cfi_restore 7
 1340              		.cfi_def_cfa_offset 0
 1341 0040 7047     		bx	lr
 1342              	.L99:
 1343 0042 00BF     		.align	2
 1344              	.L98:
 1345 0044 00000000 		.word	pxCurrentTimerList
 1346              		.cfi_endproc
 1347              	.LFE16:
 1349              		.section	.text.prvSampleTimeNow,"ax",%progbits
 1350              		.align	1
 1351              		.syntax unified
 1352              		.thumb
 1353              		.thumb_func
 1355              	prvSampleTimeNow:
 1356              	.LFB17:
 713:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 714:Lib/FreeRTOS/Source/timers.c **** 
 715:Lib/FreeRTOS/Source/timers.c ****     static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
 716:Lib/FreeRTOS/Source/timers.c ****     {
ARM GAS  /tmp/cccWNSAq.s 			page 37


 1357              		.loc 1 716 5
 1358              		.cfi_startproc
 1359              		@ args = 0, pretend = 0, frame = 16
 1360              		@ frame_needed = 1, uses_anonymous_args = 0
 1361 0000 80B5     		push	{r7, lr}
 1362              		.cfi_def_cfa_offset 8
 1363              		.cfi_offset 7, -8
 1364              		.cfi_offset 14, -4
 1365 0002 84B0     		sub	sp, sp, #16
 1366              		.cfi_def_cfa_offset 24
 1367 0004 00AF     		add	r7, sp, #0
 1368              		.cfi_def_cfa_register 7
 1369 0006 7860     		str	r0, [r7, #4]
 717:Lib/FreeRTOS/Source/timers.c ****         TickType_t xTimeNow;
 718:Lib/FreeRTOS/Source/timers.c ****         PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is o
 719:Lib/FreeRTOS/Source/timers.c **** 
 720:Lib/FreeRTOS/Source/timers.c ****         xTimeNow = xTaskGetTickCount();
 1370              		.loc 1 720 20
 1371 0008 FFF7FEFF 		bl	xTaskGetTickCount
 1372 000c F860     		str	r0, [r7, #12]
 721:Lib/FreeRTOS/Source/timers.c **** 
 722:Lib/FreeRTOS/Source/timers.c ****         if( xTimeNow < xLastTime )
 1373              		.loc 1 722 22
 1374 000e 0B4B     		ldr	r3, .L104
 1375 0010 1B68     		ldr	r3, [r3]
 1376              		.loc 1 722 11
 1377 0012 FA68     		ldr	r2, [r7, #12]
 1378 0014 9A42     		cmp	r2, r3
 1379 0016 05D2     		bcs	.L101
 723:Lib/FreeRTOS/Source/timers.c ****         {
 724:Lib/FreeRTOS/Source/timers.c ****             prvSwitchTimerLists();
 1380              		.loc 1 724 13
 1381 0018 FFF7FEFF 		bl	prvSwitchTimerLists
 725:Lib/FreeRTOS/Source/timers.c ****             *pxTimerListsWereSwitched = pdTRUE;
 1382              		.loc 1 725 39
 1383 001c 7B68     		ldr	r3, [r7, #4]
 1384 001e 0122     		movs	r2, #1
 1385 0020 1A60     		str	r2, [r3]
 1386 0022 02E0     		b	.L102
 1387              	.L101:
 726:Lib/FreeRTOS/Source/timers.c ****         }
 727:Lib/FreeRTOS/Source/timers.c ****         else
 728:Lib/FreeRTOS/Source/timers.c ****         {
 729:Lib/FreeRTOS/Source/timers.c ****             *pxTimerListsWereSwitched = pdFALSE;
 1388              		.loc 1 729 39
 1389 0024 7B68     		ldr	r3, [r7, #4]
 1390 0026 0022     		movs	r2, #0
 1391 0028 1A60     		str	r2, [r3]
 1392              	.L102:
 730:Lib/FreeRTOS/Source/timers.c ****         }
 731:Lib/FreeRTOS/Source/timers.c **** 
 732:Lib/FreeRTOS/Source/timers.c ****         xLastTime = xTimeNow;
 1393              		.loc 1 732 19
 1394 002a 044A     		ldr	r2, .L104
 1395 002c FB68     		ldr	r3, [r7, #12]
 1396 002e 1360     		str	r3, [r2]
 733:Lib/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/cccWNSAq.s 			page 38


 734:Lib/FreeRTOS/Source/timers.c ****         return xTimeNow;
 1397              		.loc 1 734 16
 1398 0030 FB68     		ldr	r3, [r7, #12]
 735:Lib/FreeRTOS/Source/timers.c ****     }
 1399              		.loc 1 735 5
 1400 0032 1846     		mov	r0, r3
 1401 0034 1037     		adds	r7, r7, #16
 1402              		.cfi_def_cfa_offset 8
 1403 0036 BD46     		mov	sp, r7
 1404              		.cfi_def_cfa_register 13
 1405              		@ sp needed
 1406 0038 80BD     		pop	{r7, pc}
 1407              	.L105:
 1408 003a 00BF     		.align	2
 1409              	.L104:
 1410 003c 00000000 		.word	xLastTime.7
 1411              		.cfi_endproc
 1412              	.LFE17:
 1414              		.section	.text.prvInsertTimerInActiveList,"ax",%progbits
 1415              		.align	1
 1416              		.syntax unified
 1417              		.thumb
 1418              		.thumb_func
 1420              	prvInsertTimerInActiveList:
 1421              	.LFB18:
 736:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 737:Lib/FreeRTOS/Source/timers.c **** 
 738:Lib/FreeRTOS/Source/timers.c ****     static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
 739:Lib/FreeRTOS/Source/timers.c ****                                                   const TickType_t xNextExpiryTime,
 740:Lib/FreeRTOS/Source/timers.c ****                                                   const TickType_t xTimeNow,
 741:Lib/FreeRTOS/Source/timers.c ****                                                   const TickType_t xCommandTime )
 742:Lib/FreeRTOS/Source/timers.c ****     {
 1422              		.loc 1 742 5
 1423              		.cfi_startproc
 1424              		@ args = 0, pretend = 0, frame = 24
 1425              		@ frame_needed = 1, uses_anonymous_args = 0
 1426 0000 80B5     		push	{r7, lr}
 1427              		.cfi_def_cfa_offset 8
 1428              		.cfi_offset 7, -8
 1429              		.cfi_offset 14, -4
 1430 0002 86B0     		sub	sp, sp, #24
 1431              		.cfi_def_cfa_offset 32
 1432 0004 00AF     		add	r7, sp, #0
 1433              		.cfi_def_cfa_register 7
 1434 0006 F860     		str	r0, [r7, #12]
 1435 0008 B960     		str	r1, [r7, #8]
 1436 000a 7A60     		str	r2, [r7, #4]
 1437 000c 3B60     		str	r3, [r7]
 743:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xProcessTimerNow = pdFALSE;
 1438              		.loc 1 743 20
 1439 000e 0023     		movs	r3, #0
 1440 0010 7B61     		str	r3, [r7, #20]
 744:Lib/FreeRTOS/Source/timers.c **** 
 745:Lib/FreeRTOS/Source/timers.c ****         listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 1441              		.loc 1 745 9
 1442 0012 FB68     		ldr	r3, [r7, #12]
 1443 0014 BA68     		ldr	r2, [r7, #8]
ARM GAS  /tmp/cccWNSAq.s 			page 39


 1444 0016 5A60     		str	r2, [r3, #4]
 746:Lib/FreeRTOS/Source/timers.c ****         listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 1445              		.loc 1 746 9
 1446 0018 FB68     		ldr	r3, [r7, #12]
 1447 001a FA68     		ldr	r2, [r7, #12]
 1448 001c 1A61     		str	r2, [r3, #16]
 747:Lib/FreeRTOS/Source/timers.c **** 
 748:Lib/FreeRTOS/Source/timers.c ****         if( xNextExpiryTime <= xTimeNow )
 1449              		.loc 1 748 11
 1450 001e BA68     		ldr	r2, [r7, #8]
 1451 0020 7B68     		ldr	r3, [r7, #4]
 1452 0022 9A42     		cmp	r2, r3
 1453 0024 12D8     		bhi	.L107
 749:Lib/FreeRTOS/Source/timers.c ****         {
 750:Lib/FreeRTOS/Source/timers.c ****             /* Has the expiry time elapsed between the command to start/reset a
 751:Lib/FreeRTOS/Source/timers.c ****              * timer was issued, and the time the command was processed? */
 752:Lib/FreeRTOS/Source/timers.c ****             if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*
 1454              		.loc 1 752 45
 1455 0026 7A68     		ldr	r2, [r7, #4]
 1456 0028 3B68     		ldr	r3, [r7]
 1457 002a D21A     		subs	r2, r2, r3
 1458              		.loc 1 752 74
 1459 002c FB68     		ldr	r3, [r7, #12]
 1460 002e 9B69     		ldr	r3, [r3, #24]
 1461              		.loc 1 752 15
 1462 0030 9A42     		cmp	r2, r3
 1463 0032 02D3     		bcc	.L108
 753:Lib/FreeRTOS/Source/timers.c ****             {
 754:Lib/FreeRTOS/Source/timers.c ****                 /* The time between a command being issued and the command being
 755:Lib/FreeRTOS/Source/timers.c ****                  * processed actually exceeds the timers period.  */
 756:Lib/FreeRTOS/Source/timers.c ****                 xProcessTimerNow = pdTRUE;
 1464              		.loc 1 756 34
 1465 0034 0123     		movs	r3, #1
 1466 0036 7B61     		str	r3, [r7, #20]
 1467 0038 1BE0     		b	.L109
 1468              	.L108:
 757:Lib/FreeRTOS/Source/timers.c ****             }
 758:Lib/FreeRTOS/Source/timers.c ****             else
 759:Lib/FreeRTOS/Source/timers.c ****             {
 760:Lib/FreeRTOS/Source/timers.c ****                 vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 1469              		.loc 1 760 17
 1470 003a 104B     		ldr	r3, .L112
 1471 003c 1A68     		ldr	r2, [r3]
 1472 003e FB68     		ldr	r3, [r7, #12]
 1473 0040 0433     		adds	r3, r3, #4
 1474 0042 1946     		mov	r1, r3
 1475 0044 1046     		mov	r0, r2
 1476 0046 FFF7FEFF 		bl	vListInsert
 1477 004a 12E0     		b	.L109
 1478              	.L107:
 761:Lib/FreeRTOS/Source/timers.c ****             }
 762:Lib/FreeRTOS/Source/timers.c ****         }
 763:Lib/FreeRTOS/Source/timers.c ****         else
 764:Lib/FreeRTOS/Source/timers.c ****         {
 765:Lib/FreeRTOS/Source/timers.c ****             if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 1479              		.loc 1 765 15
 1480 004c 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/cccWNSAq.s 			page 40


 1481 004e 3B68     		ldr	r3, [r7]
 1482 0050 9A42     		cmp	r2, r3
 1483 0052 06D2     		bcs	.L110
 1484              		.loc 1 765 45 discriminator 1
 1485 0054 BA68     		ldr	r2, [r7, #8]
 1486 0056 3B68     		ldr	r3, [r7]
 1487 0058 9A42     		cmp	r2, r3
 1488 005a 02D3     		bcc	.L110
 766:Lib/FreeRTOS/Source/timers.c ****             {
 767:Lib/FreeRTOS/Source/timers.c ****                 /* If, since the command was issued, the tick count has overflowed
 768:Lib/FreeRTOS/Source/timers.c ****                  * but the expiry time has not, then the timer must have already passed
 769:Lib/FreeRTOS/Source/timers.c ****                  * its expiry time and should be processed immediately. */
 770:Lib/FreeRTOS/Source/timers.c ****                 xProcessTimerNow = pdTRUE;
 1489              		.loc 1 770 34
 1490 005c 0123     		movs	r3, #1
 1491 005e 7B61     		str	r3, [r7, #20]
 1492 0060 07E0     		b	.L109
 1493              	.L110:
 771:Lib/FreeRTOS/Source/timers.c ****             }
 772:Lib/FreeRTOS/Source/timers.c ****             else
 773:Lib/FreeRTOS/Source/timers.c ****             {
 774:Lib/FreeRTOS/Source/timers.c ****                 vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 1494              		.loc 1 774 17
 1495 0062 074B     		ldr	r3, .L112+4
 1496 0064 1A68     		ldr	r2, [r3]
 1497 0066 FB68     		ldr	r3, [r7, #12]
 1498 0068 0433     		adds	r3, r3, #4
 1499 006a 1946     		mov	r1, r3
 1500 006c 1046     		mov	r0, r2
 1501 006e FFF7FEFF 		bl	vListInsert
 1502              	.L109:
 775:Lib/FreeRTOS/Source/timers.c ****             }
 776:Lib/FreeRTOS/Source/timers.c ****         }
 777:Lib/FreeRTOS/Source/timers.c **** 
 778:Lib/FreeRTOS/Source/timers.c ****         return xProcessTimerNow;
 1503              		.loc 1 778 16
 1504 0072 7B69     		ldr	r3, [r7, #20]
 779:Lib/FreeRTOS/Source/timers.c ****     }
 1505              		.loc 1 779 5
 1506 0074 1846     		mov	r0, r3
 1507 0076 1837     		adds	r7, r7, #24
 1508              		.cfi_def_cfa_offset 8
 1509 0078 BD46     		mov	sp, r7
 1510              		.cfi_def_cfa_register 13
 1511              		@ sp needed
 1512 007a 80BD     		pop	{r7, pc}
 1513              	.L113:
 1514              		.align	2
 1515              	.L112:
 1516 007c 00000000 		.word	pxOverflowTimerList
 1517 0080 00000000 		.word	pxCurrentTimerList
 1518              		.cfi_endproc
 1519              	.LFE18:
 1521              		.section	.text.prvProcessReceivedCommands,"ax",%progbits
 1522              		.align	1
 1523              		.syntax unified
 1524              		.thumb
ARM GAS  /tmp/cccWNSAq.s 			page 41


 1525              		.thumb_func
 1527              	prvProcessReceivedCommands:
 1528              	.LFB19:
 780:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 781:Lib/FreeRTOS/Source/timers.c **** 
 782:Lib/FreeRTOS/Source/timers.c ****     static void prvProcessReceivedCommands( void )
 783:Lib/FreeRTOS/Source/timers.c ****     {
 1529              		.loc 1 783 5
 1530              		.cfi_startproc
 1531              		@ args = 0, pretend = 0, frame = 32
 1532              		@ frame_needed = 1, uses_anonymous_args = 0
 1533 0000 80B5     		push	{r7, lr}
 1534              		.cfi_def_cfa_offset 8
 1535              		.cfi_offset 7, -8
 1536              		.cfi_offset 14, -4
 1537 0002 88B0     		sub	sp, sp, #32
 1538              		.cfi_def_cfa_offset 40
 1539 0004 00AF     		add	r7, sp, #0
 1540              		.cfi_def_cfa_register 7
 784:Lib/FreeRTOS/Source/timers.c ****         DaemonTaskMessage_t xMessage;
 785:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer;
 786:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xTimerListsWereSwitched;
 787:Lib/FreeRTOS/Source/timers.c ****         TickType_t xTimeNow;
 788:Lib/FreeRTOS/Source/timers.c **** 
 789:Lib/FreeRTOS/Source/timers.c ****         while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessa
 1541              		.loc 1 789 14
 1542 0006 B5E0     		b	.L118
 1543              	.L131:
 790:Lib/FreeRTOS/Source/timers.c ****         {
 791:Lib/FreeRTOS/Source/timers.c ****             #if ( INCLUDE_xTimerPendFunctionCall == 1 )
 792:Lib/FreeRTOS/Source/timers.c ****             {
 793:Lib/FreeRTOS/Source/timers.c ****                 /* Negative commands are pended function calls rather than timer
 794:Lib/FreeRTOS/Source/timers.c ****                  * commands. */
 795:Lib/FreeRTOS/Source/timers.c ****                 if( xMessage.xMessageID < ( BaseType_t ) 0 )
 1544              		.loc 1 795 29
 1545 0008 7B68     		ldr	r3, [r7, #4]
 1546              		.loc 1 795 19
 1547 000a 002B     		cmp	r3, #0
 1548 000c 16DA     		bge	.L116
 1549              	.LBB4:
 796:Lib/FreeRTOS/Source/timers.c ****                 {
 797:Lib/FreeRTOS/Source/timers.c ****                     const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParamete
 1550              		.loc 1 797 56
 1551 000e 3B1D     		adds	r3, r7, #4
 1552 0010 0433     		adds	r3, r3, #4
 1553 0012 FB61     		str	r3, [r7, #28]
 798:Lib/FreeRTOS/Source/timers.c **** 
 799:Lib/FreeRTOS/Source/timers.c ****                     /* The timer uses the xCallbackParameters member to request a
 800:Lib/FreeRTOS/Source/timers.c ****                      * callback be executed.  Check the callback is not NULL. */
 801:Lib/FreeRTOS/Source/timers.c ****                     configASSERT( pxCallback );
 1554              		.loc 1 801 21
 1555 0014 FB69     		ldr	r3, [r7, #28]
 1556 0016 002B     		cmp	r3, #0
 1557 0018 08D1     		bne	.L117
 1558              		.loc 1 801 21 is_stmt 0 discriminator 1
 1559 001a FFF7FEFF 		bl	ulSetInterruptMask
 1560 001e 5D4B     		ldr	r3, .L134
ARM GAS  /tmp/cccWNSAq.s 			page 42


 1561 0020 5D4A     		ldr	r2, .L134+4
 1562 0022 40F22131 		movw	r1, #801
 1563 0026 5D48     		ldr	r0, .L134+8
 1564 0028 FFF7FEFF 		bl	__assert_func
 1565              	.L117:
 802:Lib/FreeRTOS/Source/timers.c **** 
 803:Lib/FreeRTOS/Source/timers.c ****                     /* Call the function. */
 804:Lib/FreeRTOS/Source/timers.c ****                     pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParamet
 1566              		.loc 1 804 31 is_stmt 1
 1567 002c FB69     		ldr	r3, [r7, #28]
 1568 002e 1B68     		ldr	r3, [r3]
 1569              		.loc 1 804 63
 1570 0030 FA69     		ldr	r2, [r7, #28]
 1571 0032 5068     		ldr	r0, [r2, #4]
 1572              		.loc 1 804 89
 1573 0034 FA69     		ldr	r2, [r7, #28]
 1574 0036 9268     		ldr	r2, [r2, #8]
 1575              		.loc 1 804 21
 1576 0038 1146     		mov	r1, r2
 1577 003a 9847     		blx	r3
 1578              	.LVL2:
 1579              	.L116:
 1580              	.LBE4:
 805:Lib/FreeRTOS/Source/timers.c ****                 }
 806:Lib/FreeRTOS/Source/timers.c ****                 else
 807:Lib/FreeRTOS/Source/timers.c ****                 {
 808:Lib/FreeRTOS/Source/timers.c ****                     mtCOVERAGE_TEST_MARKER();
 809:Lib/FreeRTOS/Source/timers.c ****                 }
 810:Lib/FreeRTOS/Source/timers.c ****             }
 811:Lib/FreeRTOS/Source/timers.c ****             #endif /* INCLUDE_xTimerPendFunctionCall */
 812:Lib/FreeRTOS/Source/timers.c **** 
 813:Lib/FreeRTOS/Source/timers.c ****             /* Commands that are positive are timer commands rather than pended
 814:Lib/FreeRTOS/Source/timers.c ****              * function calls. */
 815:Lib/FreeRTOS/Source/timers.c ****             if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 1581              		.loc 1 815 25
 1582 003c 7B68     		ldr	r3, [r7, #4]
 1583              		.loc 1 815 15
 1584 003e 002B     		cmp	r3, #0
 1585 0040 C0F29880 		blt	.L118
 816:Lib/FreeRTOS/Source/timers.c ****             {
 817:Lib/FreeRTOS/Source/timers.c ****                 /* The messages uses the xTimerParameters member to work on a
 818:Lib/FreeRTOS/Source/timers.c ****                  * software timer. */
 819:Lib/FreeRTOS/Source/timers.c ****                 pxTimer = xMessage.u.xTimerParameters.pxTimer;
 1586              		.loc 1 819 25
 1587 0044 FB68     		ldr	r3, [r7, #12]
 1588 0046 BB61     		str	r3, [r7, #24]
 820:Lib/FreeRTOS/Source/timers.c **** 
 821:Lib/FreeRTOS/Source/timers.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*li
 1589              		.loc 1 821 21
 1590 0048 BB69     		ldr	r3, [r7, #24]
 1591 004a 5B69     		ldr	r3, [r3, #20]
 1592              		.loc 1 821 19
 1593 004c 002B     		cmp	r3, #0
 1594 004e 04D0     		beq	.L119
 822:Lib/FreeRTOS/Source/timers.c ****                 {
 823:Lib/FreeRTOS/Source/timers.c ****                     /* The timer is in a list, remove it. */
 824:Lib/FreeRTOS/Source/timers.c ****                     ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
ARM GAS  /tmp/cccWNSAq.s 			page 43


 1595              		.loc 1 824 30
 1596 0050 BB69     		ldr	r3, [r7, #24]
 1597 0052 0433     		adds	r3, r3, #4
 1598 0054 1846     		mov	r0, r3
 1599 0056 FFF7FEFF 		bl	uxListRemove
 1600              	.L119:
 825:Lib/FreeRTOS/Source/timers.c ****                 }
 826:Lib/FreeRTOS/Source/timers.c ****                 else
 827:Lib/FreeRTOS/Source/timers.c ****                 {
 828:Lib/FreeRTOS/Source/timers.c ****                     mtCOVERAGE_TEST_MARKER();
 829:Lib/FreeRTOS/Source/timers.c ****                 }
 830:Lib/FreeRTOS/Source/timers.c **** 
 831:Lib/FreeRTOS/Source/timers.c ****                 traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParamet
 832:Lib/FreeRTOS/Source/timers.c **** 
 833:Lib/FreeRTOS/Source/timers.c ****                 /* In this case the xTimerListsWereSwitched parameter is not used, but
 834:Lib/FreeRTOS/Source/timers.c ****                  *  it must be present in the function call.  prvSampleTimeNow() must be
 835:Lib/FreeRTOS/Source/timers.c ****                  *  called after the message is received from xTimerQueue so there is no
 836:Lib/FreeRTOS/Source/timers.c ****                  *  possibility of a higher priority task adding a message to the message
 837:Lib/FreeRTOS/Source/timers.c ****                  *  queue with a time that is ahead of the timer daemon task (because it
 838:Lib/FreeRTOS/Source/timers.c ****                  *  pre-empted the timer daemon task after the xTimeNow value was set). */
 839:Lib/FreeRTOS/Source/timers.c ****                 xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 1601              		.loc 1 839 28
 1602 005a 3B46     		mov	r3, r7
 1603 005c 1846     		mov	r0, r3
 1604 005e FFF7FEFF 		bl	prvSampleTimeNow
 1605 0062 7861     		str	r0, [r7, #20]
 840:Lib/FreeRTOS/Source/timers.c **** 
 841:Lib/FreeRTOS/Source/timers.c ****                 switch( xMessage.xMessageID )
 1606              		.loc 1 841 33
 1607 0064 7B68     		ldr	r3, [r7, #4]
 1608              		.loc 1 841 17
 1609 0066 013B     		subs	r3, r3, #1
 1610 0068 082B     		cmp	r3, #8
 1611 006a 00F28080 		bhi	.L132
 1612 006e 01A2     		adr	r2, .L122
 1613 0070 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1614              		.p2align 2
 1615              	.L122:
 1616 0074 99000000 		.word	.L124+1
 1617 0078 99000000 		.word	.L124+1
 1618 007c 01010000 		.word	.L123+1
 1619 0080 15010000 		.word	.L121+1
 1620 0084 5B010000 		.word	.L125+1
 1621 0088 99000000 		.word	.L124+1
 1622 008c 99000000 		.word	.L124+1
 1623 0090 01010000 		.word	.L123+1
 1624 0094 15010000 		.word	.L121+1
 1625              		.p2align 1
 1626              	.L124:
 842:Lib/FreeRTOS/Source/timers.c ****                 {
 843:Lib/FreeRTOS/Source/timers.c ****                     case tmrCOMMAND_START:
 844:Lib/FreeRTOS/Source/timers.c ****                     case tmrCOMMAND_START_FROM_ISR:
 845:Lib/FreeRTOS/Source/timers.c ****                     case tmrCOMMAND_RESET:
 846:Lib/FreeRTOS/Source/timers.c ****                     case tmrCOMMAND_RESET_FROM_ISR:
 847:Lib/FreeRTOS/Source/timers.c ****                         /* Start or restart a timer. */
 848:Lib/FreeRTOS/Source/timers.c ****                         pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 1627              		.loc 1 848 32
ARM GAS  /tmp/cccWNSAq.s 			page 44


 1628 0098 BB69     		ldr	r3, [r7, #24]
 1629 009a 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1630              		.loc 1 848 43
 1631 009e 43F00103 		orr	r3, r3, #1
 1632 00a2 DAB2     		uxtb	r2, r3
 1633 00a4 BB69     		ldr	r3, [r7, #24]
 1634 00a6 83F82820 		strb	r2, [r3, #40]
 849:Lib/FreeRTOS/Source/timers.c **** 
 850:Lib/FreeRTOS/Source/timers.c ****                         if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessa
 1635              		.loc 1 850 93
 1636 00aa BA68     		ldr	r2, [r7, #8]
 1637              		.loc 1 850 117
 1638 00ac BB69     		ldr	r3, [r7, #24]
 1639 00ae 9B69     		ldr	r3, [r3, #24]
 1640              		.loc 1 850 29
 1641 00b0 D118     		adds	r1, r2, r3
 1642 00b2 BB68     		ldr	r3, [r7, #8]
 1643 00b4 7A69     		ldr	r2, [r7, #20]
 1644 00b6 B869     		ldr	r0, [r7, #24]
 1645 00b8 FFF7FEFF 		bl	prvInsertTimerInActiveList
 1646 00bc 0346     		mov	r3, r0
 1647              		.loc 1 850 27 discriminator 1
 1648 00be 002B     		cmp	r3, #0
 1649 00c0 57D0     		beq	.L133
 851:Lib/FreeRTOS/Source/timers.c ****                         {
 852:Lib/FreeRTOS/Source/timers.c ****                             /* The timer expired before it was added to the active
 853:Lib/FreeRTOS/Source/timers.c ****                              * timer list.  Process it now. */
 854:Lib/FreeRTOS/Source/timers.c ****                             if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 1650              		.loc 1 854 42
 1651 00c2 BB69     		ldr	r3, [r7, #24]
 1652 00c4 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1653              		.loc 1 854 53
 1654 00c8 03F00403 		and	r3, r3, #4
 1655              		.loc 1 854 31
 1656 00cc 002B     		cmp	r3, #0
 1657 00ce 09D0     		beq	.L127
 855:Lib/FreeRTOS/Source/timers.c ****                             {
 856:Lib/FreeRTOS/Source/timers.c ****                                 prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue 
 1658              		.loc 1 856 85
 1659 00d0 BA68     		ldr	r2, [r7, #8]
 1660              		.loc 1 856 109
 1661 00d2 BB69     		ldr	r3, [r7, #24]
 1662 00d4 9B69     		ldr	r3, [r3, #24]
 1663              		.loc 1 856 33
 1664 00d6 1344     		add	r3, r3, r2
 1665 00d8 7A69     		ldr	r2, [r7, #20]
 1666 00da 1946     		mov	r1, r3
 1667 00dc B869     		ldr	r0, [r7, #24]
 1668 00de FFF7FEFF 		bl	prvReloadTimer
 1669 00e2 08E0     		b	.L128
 1670              	.L127:
 857:Lib/FreeRTOS/Source/timers.c ****                             }
 858:Lib/FreeRTOS/Source/timers.c ****                             else
 859:Lib/FreeRTOS/Source/timers.c ****                             {
 860:Lib/FreeRTOS/Source/timers.c ****                                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 1671              		.loc 1 860 40
 1672 00e4 BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/cccWNSAq.s 			page 45


 1673 00e6 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1674              		.loc 1 860 51
 1675 00ea 23F00103 		bic	r3, r3, #1
 1676 00ee DAB2     		uxtb	r2, r3
 1677 00f0 BB69     		ldr	r3, [r7, #24]
 1678 00f2 83F82820 		strb	r2, [r3, #40]
 1679              	.L128:
 861:Lib/FreeRTOS/Source/timers.c ****                             }
 862:Lib/FreeRTOS/Source/timers.c **** 
 863:Lib/FreeRTOS/Source/timers.c ****                             /* Call the timer callback. */
 864:Lib/FreeRTOS/Source/timers.c ****                             traceTIMER_EXPIRED( pxTimer );
 865:Lib/FreeRTOS/Source/timers.c ****                             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1680              		.loc 1 865 36
 1681 00f6 BB69     		ldr	r3, [r7, #24]
 1682 00f8 1B6A     		ldr	r3, [r3, #32]
 1683              		.loc 1 865 29
 1684 00fa B869     		ldr	r0, [r7, #24]
 1685 00fc 9847     		blx	r3
 1686              	.LVL3:
 866:Lib/FreeRTOS/Source/timers.c ****                         }
 867:Lib/FreeRTOS/Source/timers.c ****                         else
 868:Lib/FreeRTOS/Source/timers.c ****                         {
 869:Lib/FreeRTOS/Source/timers.c ****                             mtCOVERAGE_TEST_MARKER();
 870:Lib/FreeRTOS/Source/timers.c ****                         }
 871:Lib/FreeRTOS/Source/timers.c **** 
 872:Lib/FreeRTOS/Source/timers.c ****                         break;
 1687              		.loc 1 872 25
 1688 00fe 38E0     		b	.L133
 1689              	.L123:
 873:Lib/FreeRTOS/Source/timers.c **** 
 874:Lib/FreeRTOS/Source/timers.c ****                     case tmrCOMMAND_STOP:
 875:Lib/FreeRTOS/Source/timers.c ****                     case tmrCOMMAND_STOP_FROM_ISR:
 876:Lib/FreeRTOS/Source/timers.c ****                         /* The timer has already been removed from the active list. */
 877:Lib/FreeRTOS/Source/timers.c ****                         pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 1690              		.loc 1 877 32
 1691 0100 BB69     		ldr	r3, [r7, #24]
 1692 0102 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1693              		.loc 1 877 43
 1694 0106 23F00103 		bic	r3, r3, #1
 1695 010a DAB2     		uxtb	r2, r3
 1696 010c BB69     		ldr	r3, [r7, #24]
 1697 010e 83F82820 		strb	r2, [r3, #40]
 878:Lib/FreeRTOS/Source/timers.c ****                         break;
 1698              		.loc 1 878 25
 1699 0112 2FE0     		b	.L118
 1700              	.L121:
 879:Lib/FreeRTOS/Source/timers.c **** 
 880:Lib/FreeRTOS/Source/timers.c ****                     case tmrCOMMAND_CHANGE_PERIOD:
 881:Lib/FreeRTOS/Source/timers.c ****                     case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
 882:Lib/FreeRTOS/Source/timers.c ****                         pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 1701              		.loc 1 882 32
 1702 0114 BB69     		ldr	r3, [r7, #24]
 1703 0116 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1704              		.loc 1 882 43
 1705 011a 43F00103 		orr	r3, r3, #1
 1706 011e DAB2     		uxtb	r2, r3
 1707 0120 BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/cccWNSAq.s 			page 46


 1708 0122 83F82820 		strb	r2, [r3, #40]
 883:Lib/FreeRTOS/Source/timers.c ****                         pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 1709              		.loc 1 883 83
 1710 0126 BA68     		ldr	r2, [r7, #8]
 1711              		.loc 1 883 54
 1712 0128 BB69     		ldr	r3, [r7, #24]
 1713 012a 9A61     		str	r2, [r3, #24]
 884:Lib/FreeRTOS/Source/timers.c ****                         configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1714              		.loc 1 884 25
 1715 012c BB69     		ldr	r3, [r7, #24]
 1716 012e 9B69     		ldr	r3, [r3, #24]
 1717 0130 002B     		cmp	r3, #0
 1718 0132 08D1     		bne	.L130
 1719              		.loc 1 884 25 is_stmt 0 discriminator 1
 1720 0134 FFF7FEFF 		bl	ulSetInterruptMask
 1721 0138 164B     		ldr	r3, .L134
 1722 013a 174A     		ldr	r2, .L134+4
 1723 013c 4FF45D71 		mov	r1, #884
 1724 0140 1648     		ldr	r0, .L134+8
 1725 0142 FFF7FEFF 		bl	__assert_func
 1726              	.L130:
 885:Lib/FreeRTOS/Source/timers.c **** 
 886:Lib/FreeRTOS/Source/timers.c ****                         /* The new period does not really have a reference, and can
 887:Lib/FreeRTOS/Source/timers.c ****                          * be longer or shorter than the old one.  The command time is
 888:Lib/FreeRTOS/Source/timers.c ****                          * therefore set to the current time, and as the period cannot
 889:Lib/FreeRTOS/Source/timers.c ****                          * be zero the next expiry time can only be in the future,
 890:Lib/FreeRTOS/Source/timers.c ****                          * meaning (unlike for the xTimerStart() case above) there is
 891:Lib/FreeRTOS/Source/timers.c ****                          * no fail case that needs to be handled here. */
 892:Lib/FreeRTOS/Source/timers.c ****                         ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerP
 1727              		.loc 1 892 91 is_stmt 1
 1728 0146 BB69     		ldr	r3, [r7, #24]
 1729 0148 9A69     		ldr	r2, [r3, #24]
 1730              		.loc 1 892 34
 1731 014a 7B69     		ldr	r3, [r7, #20]
 1732 014c D118     		adds	r1, r2, r3
 1733 014e 7B69     		ldr	r3, [r7, #20]
 1734 0150 7A69     		ldr	r2, [r7, #20]
 1735 0152 B869     		ldr	r0, [r7, #24]
 1736 0154 FFF7FEFF 		bl	prvInsertTimerInActiveList
 893:Lib/FreeRTOS/Source/timers.c ****                         break;
 1737              		.loc 1 893 25
 1738 0158 0CE0     		b	.L118
 1739              	.L125:
 894:Lib/FreeRTOS/Source/timers.c **** 
 895:Lib/FreeRTOS/Source/timers.c ****                     case tmrCOMMAND_DELETE:
 896:Lib/FreeRTOS/Source/timers.c ****                         #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 897:Lib/FreeRTOS/Source/timers.c ****                         {
 898:Lib/FreeRTOS/Source/timers.c ****                             /* The timer has already been removed from the active list,
 899:Lib/FreeRTOS/Source/timers.c ****                              * just free up the memory if the memory was dynamically
 900:Lib/FreeRTOS/Source/timers.c ****                              * allocated. */
 901:Lib/FreeRTOS/Source/timers.c ****                             if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint
 902:Lib/FreeRTOS/Source/timers.c ****                             {
 903:Lib/FreeRTOS/Source/timers.c ****                                 vPortFree( pxTimer );
 904:Lib/FreeRTOS/Source/timers.c ****                             }
 905:Lib/FreeRTOS/Source/timers.c ****                             else
 906:Lib/FreeRTOS/Source/timers.c ****                             {
 907:Lib/FreeRTOS/Source/timers.c ****                                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
ARM GAS  /tmp/cccWNSAq.s 			page 47


 908:Lib/FreeRTOS/Source/timers.c ****                             }
 909:Lib/FreeRTOS/Source/timers.c ****                         }
 910:Lib/FreeRTOS/Source/timers.c ****                         #else /* if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) */
 911:Lib/FreeRTOS/Source/timers.c ****                         {
 912:Lib/FreeRTOS/Source/timers.c ****                             /* If dynamic allocation is not enabled, the memory
 913:Lib/FreeRTOS/Source/timers.c ****                              * could not have been dynamically allocated. So there is
 914:Lib/FreeRTOS/Source/timers.c ****                              * no need to free the memory - just mark the timer as
 915:Lib/FreeRTOS/Source/timers.c ****                              * "not active". */
 916:Lib/FreeRTOS/Source/timers.c ****                             pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 1740              		.loc 1 916 36
 1741 015a BB69     		ldr	r3, [r7, #24]
 1742 015c 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1743              		.loc 1 916 47
 1744 0160 23F00103 		bic	r3, r3, #1
 1745 0164 DAB2     		uxtb	r2, r3
 1746 0166 BB69     		ldr	r3, [r7, #24]
 1747 0168 83F82820 		strb	r2, [r3, #40]
 917:Lib/FreeRTOS/Source/timers.c ****                         }
 918:Lib/FreeRTOS/Source/timers.c ****                         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 919:Lib/FreeRTOS/Source/timers.c ****                         break;
 1748              		.loc 1 919 25
 1749 016c 02E0     		b	.L118
 1750              	.L132:
 920:Lib/FreeRTOS/Source/timers.c **** 
 921:Lib/FreeRTOS/Source/timers.c ****                     default:
 922:Lib/FreeRTOS/Source/timers.c ****                         /* Don't expect to get here. */
 923:Lib/FreeRTOS/Source/timers.c ****                         break;
 1751              		.loc 1 923 25
 1752 016e 00BF     		nop
 1753 0170 00E0     		b	.L118
 1754              	.L133:
 872:Lib/FreeRTOS/Source/timers.c **** 
 1755              		.loc 1 872 25
 1756 0172 00BF     		nop
 1757              	.L118:
 789:Lib/FreeRTOS/Source/timers.c ****         {
 1758              		.loc 1 789 16
 1759 0174 0A4B     		ldr	r3, .L134+12
 1760 0176 1B68     		ldr	r3, [r3]
 1761 0178 391D     		adds	r1, r7, #4
 1762 017a 0022     		movs	r2, #0
 1763 017c 1846     		mov	r0, r3
 1764 017e FFF7FEFF 		bl	xQueueReceive
 1765 0182 0346     		mov	r3, r0
 789:Lib/FreeRTOS/Source/timers.c ****         {
 1766              		.loc 1 789 69 discriminator 1
 1767 0184 002B     		cmp	r3, #0
 1768 0186 7FF43FAF 		bne	.L131
 924:Lib/FreeRTOS/Source/timers.c ****                 }
 925:Lib/FreeRTOS/Source/timers.c ****             }
 926:Lib/FreeRTOS/Source/timers.c ****         }
 927:Lib/FreeRTOS/Source/timers.c ****     }
 1769              		.loc 1 927 5
 1770 018a 00BF     		nop
 1771 018c 00BF     		nop
 1772 018e 2037     		adds	r7, r7, #32
 1773              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cccWNSAq.s 			page 48


 1774 0190 BD46     		mov	sp, r7
 1775              		.cfi_def_cfa_register 13
 1776              		@ sp needed
 1777 0192 80BD     		pop	{r7, pc}
 1778              	.L135:
 1779              		.align	2
 1780              	.L134:
 1781 0194 08000000 		.word	.LC1
 1782 0198 00000000 		.word	__func__.6
 1783 019c 0C000000 		.word	.LC2
 1784 01a0 00000000 		.word	xTimerQueue
 1785              		.cfi_endproc
 1786              	.LFE19:
 1788              		.section	.text.prvSwitchTimerLists,"ax",%progbits
 1789              		.align	1
 1790              		.syntax unified
 1791              		.thumb
 1792              		.thumb_func
 1794              	prvSwitchTimerLists:
 1795              	.LFB20:
 928:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 929:Lib/FreeRTOS/Source/timers.c **** 
 930:Lib/FreeRTOS/Source/timers.c ****     static void prvSwitchTimerLists( void )
 931:Lib/FreeRTOS/Source/timers.c ****     {
 1796              		.loc 1 931 5
 1797              		.cfi_startproc
 1798              		@ args = 0, pretend = 0, frame = 8
 1799              		@ frame_needed = 1, uses_anonymous_args = 0
 1800 0000 80B5     		push	{r7, lr}
 1801              		.cfi_def_cfa_offset 8
 1802              		.cfi_offset 7, -8
 1803              		.cfi_offset 14, -4
 1804 0002 82B0     		sub	sp, sp, #8
 1805              		.cfi_def_cfa_offset 16
 1806 0004 00AF     		add	r7, sp, #0
 1807              		.cfi_def_cfa_register 7
 932:Lib/FreeRTOS/Source/timers.c ****         TickType_t xNextExpireTime;
 933:Lib/FreeRTOS/Source/timers.c ****         List_t * pxTemp;
 934:Lib/FreeRTOS/Source/timers.c **** 
 935:Lib/FreeRTOS/Source/timers.c ****         /* The tick count has overflowed.  The timer lists must be switched.
 936:Lib/FreeRTOS/Source/timers.c ****          * If there are any timers still referenced from the current timer list
 937:Lib/FreeRTOS/Source/timers.c ****          * then they must have expired and should be processed before the lists
 938:Lib/FreeRTOS/Source/timers.c ****          * are switched. */
 939:Lib/FreeRTOS/Source/timers.c ****         while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 1808              		.loc 1 939 14
 1809 0006 09E0     		b	.L137
 1810              	.L138:
 940:Lib/FreeRTOS/Source/timers.c ****         {
 941:Lib/FreeRTOS/Source/timers.c ****             xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 1811              		.loc 1 941 31
 1812 0008 0E4B     		ldr	r3, .L139
 1813 000a 1B68     		ldr	r3, [r3]
 1814 000c DB68     		ldr	r3, [r3, #12]
 1815              		.loc 1 941 29
 1816 000e 1B68     		ldr	r3, [r3]
 1817 0010 3B60     		str	r3, [r7]
 942:Lib/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/cccWNSAq.s 			page 49


 943:Lib/FreeRTOS/Source/timers.c ****             /* Process the expired timer.  For auto-reload timers, be careful to
 944:Lib/FreeRTOS/Source/timers.c ****              * process only expirations that occur on the current list.  Further
 945:Lib/FreeRTOS/Source/timers.c ****              * expirations must wait until after the lists are switched. */
 946:Lib/FreeRTOS/Source/timers.c ****             prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 1818              		.loc 1 946 13
 1819 0012 4FF0FF31 		mov	r1, #-1
 1820 0016 3868     		ldr	r0, [r7]
 1821 0018 FFF7FEFF 		bl	prvProcessExpiredTimer
 1822              	.L137:
 939:Lib/FreeRTOS/Source/timers.c ****         {
 1823              		.loc 1 939 16
 1824 001c 094B     		ldr	r3, .L139
 1825 001e 1B68     		ldr	r3, [r3]
 1826 0020 1B68     		ldr	r3, [r3]
 939:Lib/FreeRTOS/Source/timers.c ****         {
 1827              		.loc 1 939 56
 1828 0022 002B     		cmp	r3, #0
 1829 0024 F0D1     		bne	.L138
 947:Lib/FreeRTOS/Source/timers.c ****         }
 948:Lib/FreeRTOS/Source/timers.c **** 
 949:Lib/FreeRTOS/Source/timers.c ****         pxTemp = pxCurrentTimerList;
 1830              		.loc 1 949 16
 1831 0026 074B     		ldr	r3, .L139
 1832 0028 1B68     		ldr	r3, [r3]
 1833 002a 7B60     		str	r3, [r7, #4]
 950:Lib/FreeRTOS/Source/timers.c ****         pxCurrentTimerList = pxOverflowTimerList;
 1834              		.loc 1 950 28
 1835 002c 064B     		ldr	r3, .L139+4
 1836 002e 1B68     		ldr	r3, [r3]
 1837 0030 044A     		ldr	r2, .L139
 1838 0032 1360     		str	r3, [r2]
 951:Lib/FreeRTOS/Source/timers.c ****         pxOverflowTimerList = pxTemp;
 1839              		.loc 1 951 29
 1840 0034 044A     		ldr	r2, .L139+4
 1841 0036 7B68     		ldr	r3, [r7, #4]
 1842 0038 1360     		str	r3, [r2]
 952:Lib/FreeRTOS/Source/timers.c ****     }
 1843              		.loc 1 952 5
 1844 003a 00BF     		nop
 1845 003c 0837     		adds	r7, r7, #8
 1846              		.cfi_def_cfa_offset 8
 1847 003e BD46     		mov	sp, r7
 1848              		.cfi_def_cfa_register 13
 1849              		@ sp needed
 1850 0040 80BD     		pop	{r7, pc}
 1851              	.L140:
 1852 0042 00BF     		.align	2
 1853              	.L139:
 1854 0044 00000000 		.word	pxCurrentTimerList
 1855 0048 00000000 		.word	pxOverflowTimerList
 1856              		.cfi_endproc
 1857              	.LFE20:
 1859              		.section	.rodata
 1860 0029 000000   		.align	2
 1861              	.LC3:
 1862 002c 546D7251 		.ascii	"TmrQ\000"
 1862      00
ARM GAS  /tmp/cccWNSAq.s 			page 50


 1863              		.section	.text.prvCheckForValidListAndQueue,"ax",%progbits
 1864              		.align	1
 1865              		.syntax unified
 1866              		.thumb
 1867              		.thumb_func
 1869              	prvCheckForValidListAndQueue:
 1870              	.LFB21:
 953:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 954:Lib/FreeRTOS/Source/timers.c **** 
 955:Lib/FreeRTOS/Source/timers.c ****     static void prvCheckForValidListAndQueue( void )
 956:Lib/FreeRTOS/Source/timers.c ****     {
 1871              		.loc 1 956 5
 1872              		.cfi_startproc
 1873              		@ args = 0, pretend = 0, frame = 0
 1874              		@ frame_needed = 1, uses_anonymous_args = 0
 1875 0000 80B5     		push	{r7, lr}
 1876              		.cfi_def_cfa_offset 8
 1877              		.cfi_offset 7, -8
 1878              		.cfi_offset 14, -4
 1879 0002 82B0     		sub	sp, sp, #8
 1880              		.cfi_def_cfa_offset 16
 1881 0004 02AF     		add	r7, sp, #8
 1882              		.cfi_def_cfa 7, 8
 957:Lib/FreeRTOS/Source/timers.c ****         /* Check that the list from which active timers are referenced, and the
 958:Lib/FreeRTOS/Source/timers.c ****          * queue used to communicate with the timer service, have been
 959:Lib/FreeRTOS/Source/timers.c ****          * initialised. */
 960:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 1883              		.loc 1 960 9
 1884 0006 FFF7FEFF 		bl	vPortEnterCritical
 961:Lib/FreeRTOS/Source/timers.c ****         {
 962:Lib/FreeRTOS/Source/timers.c ****             if( xTimerQueue == NULL )
 1885              		.loc 1 962 29
 1886 000a 154B     		ldr	r3, .L143
 1887 000c 1B68     		ldr	r3, [r3]
 1888              		.loc 1 962 15
 1889 000e 002B     		cmp	r3, #0
 1890 0010 20D1     		bne	.L142
 963:Lib/FreeRTOS/Source/timers.c ****             {
 964:Lib/FreeRTOS/Source/timers.c ****                 vListInitialise( &xActiveTimerList1 );
 1891              		.loc 1 964 17
 1892 0012 1448     		ldr	r0, .L143+4
 1893 0014 FFF7FEFF 		bl	vListInitialise
 965:Lib/FreeRTOS/Source/timers.c ****                 vListInitialise( &xActiveTimerList2 );
 1894              		.loc 1 965 17
 1895 0018 1348     		ldr	r0, .L143+8
 1896 001a FFF7FEFF 		bl	vListInitialise
 966:Lib/FreeRTOS/Source/timers.c ****                 pxCurrentTimerList = &xActiveTimerList1;
 1897              		.loc 1 966 36
 1898 001e 134B     		ldr	r3, .L143+12
 1899 0020 104A     		ldr	r2, .L143+4
 1900 0022 1A60     		str	r2, [r3]
 967:Lib/FreeRTOS/Source/timers.c ****                 pxOverflowTimerList = &xActiveTimerList2;
 1901              		.loc 1 967 37
 1902 0024 124B     		ldr	r3, .L143+16
 1903 0026 104A     		ldr	r2, .L143+8
 1904 0028 1A60     		str	r2, [r3]
 1905              	.LBB5:
ARM GAS  /tmp/cccWNSAq.s 			page 51


 968:Lib/FreeRTOS/Source/timers.c **** 
 969:Lib/FreeRTOS/Source/timers.c ****                 #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 970:Lib/FreeRTOS/Source/timers.c ****                 {
 971:Lib/FreeRTOS/Source/timers.c ****                     /* The timer queue is allocated statically in case
 972:Lib/FreeRTOS/Source/timers.c ****                      * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
 973:Lib/FreeRTOS/Source/timers.c ****                     PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                        
 974:Lib/FreeRTOS/Source/timers.c ****                     PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIME
 975:Lib/FreeRTOS/Source/timers.c **** 
 976:Lib/FreeRTOS/Source/timers.c ****                     xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( U
 1906              		.loc 1 976 35
 1907 002a 0023     		movs	r3, #0
 1908 002c 0093     		str	r3, [sp]
 1909 002e 114B     		ldr	r3, .L143+20
 1910 0030 114A     		ldr	r2, .L143+24
 1911 0032 1021     		movs	r1, #16
 1912 0034 0A20     		movs	r0, #10
 1913 0036 FFF7FEFF 		bl	xQueueGenericCreateStatic
 1914 003a 0346     		mov	r3, r0
 1915              		.loc 1 976 33 discriminator 1
 1916 003c 084A     		ldr	r2, .L143
 1917 003e 1360     		str	r3, [r2]
 1918              	.LBE5:
 977:Lib/FreeRTOS/Source/timers.c ****                 }
 978:Lib/FreeRTOS/Source/timers.c ****                 #else
 979:Lib/FreeRTOS/Source/timers.c ****                 {
 980:Lib/FreeRTOS/Source/timers.c ****                     xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( D
 981:Lib/FreeRTOS/Source/timers.c ****                 }
 982:Lib/FreeRTOS/Source/timers.c ****                 #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 983:Lib/FreeRTOS/Source/timers.c **** 
 984:Lib/FreeRTOS/Source/timers.c ****                 #if ( configQUEUE_REGISTRY_SIZE > 0 )
 985:Lib/FreeRTOS/Source/timers.c ****                 {
 986:Lib/FreeRTOS/Source/timers.c ****                     if( xTimerQueue != NULL )
 1919              		.loc 1 986 37
 1920 0040 074B     		ldr	r3, .L143
 1921 0042 1B68     		ldr	r3, [r3]
 1922              		.loc 1 986 23
 1923 0044 002B     		cmp	r3, #0
 1924 0046 05D0     		beq	.L142
 987:Lib/FreeRTOS/Source/timers.c ****                     {
 988:Lib/FreeRTOS/Source/timers.c ****                         vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 1925              		.loc 1 988 25
 1926 0048 054B     		ldr	r3, .L143
 1927 004a 1B68     		ldr	r3, [r3]
 1928 004c 0B49     		ldr	r1, .L143+28
 1929 004e 1846     		mov	r0, r3
 1930 0050 FFF7FEFF 		bl	vQueueAddToRegistry
 1931              	.L142:
 989:Lib/FreeRTOS/Source/timers.c ****                     }
 990:Lib/FreeRTOS/Source/timers.c ****                     else
 991:Lib/FreeRTOS/Source/timers.c ****                     {
 992:Lib/FreeRTOS/Source/timers.c ****                         mtCOVERAGE_TEST_MARKER();
 993:Lib/FreeRTOS/Source/timers.c ****                     }
 994:Lib/FreeRTOS/Source/timers.c ****                 }
 995:Lib/FreeRTOS/Source/timers.c ****                 #endif /* configQUEUE_REGISTRY_SIZE */
 996:Lib/FreeRTOS/Source/timers.c ****             }
 997:Lib/FreeRTOS/Source/timers.c ****             else
 998:Lib/FreeRTOS/Source/timers.c ****             {
ARM GAS  /tmp/cccWNSAq.s 			page 52


 999:Lib/FreeRTOS/Source/timers.c ****                 mtCOVERAGE_TEST_MARKER();
1000:Lib/FreeRTOS/Source/timers.c ****             }
1001:Lib/FreeRTOS/Source/timers.c ****         }
1002:Lib/FreeRTOS/Source/timers.c ****         taskEXIT_CRITICAL();
 1932              		.loc 1 1002 9
 1933 0054 FFF7FEFF 		bl	vPortExitCritical
1003:Lib/FreeRTOS/Source/timers.c ****     }
 1934              		.loc 1 1003 5
 1935 0058 00BF     		nop
 1936 005a BD46     		mov	sp, r7
 1937              		.cfi_def_cfa_register 13
 1938              		@ sp needed
 1939 005c 80BD     		pop	{r7, pc}
 1940              	.L144:
 1941 005e 00BF     		.align	2
 1942              	.L143:
 1943 0060 00000000 		.word	xTimerQueue
 1944 0064 00000000 		.word	xActiveTimerList1
 1945 0068 00000000 		.word	xActiveTimerList2
 1946 006c 00000000 		.word	pxCurrentTimerList
 1947 0070 00000000 		.word	pxOverflowTimerList
 1948 0074 00000000 		.word	xStaticTimerQueue.4
 1949 0078 00000000 		.word	ucStaticTimerQueueStorage.5
 1950 007c 2C000000 		.word	.LC3
 1951              		.cfi_endproc
 1952              	.LFE21:
 1954              		.section	.text.xTimerIsTimerActive,"ax",%progbits
 1955              		.align	1
 1956              		.global	xTimerIsTimerActive
 1957              		.syntax unified
 1958              		.thumb
 1959              		.thumb_func
 1961              	xTimerIsTimerActive:
 1962              	.LFB22:
1004:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1005:Lib/FreeRTOS/Source/timers.c **** 
1006:Lib/FreeRTOS/Source/timers.c ****     BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
1007:Lib/FreeRTOS/Source/timers.c ****     {
 1963              		.loc 1 1007 5
 1964              		.cfi_startproc
 1965              		@ args = 0, pretend = 0, frame = 16
 1966              		@ frame_needed = 1, uses_anonymous_args = 0
 1967 0000 80B5     		push	{r7, lr}
 1968              		.cfi_def_cfa_offset 8
 1969              		.cfi_offset 7, -8
 1970              		.cfi_offset 14, -4
 1971 0002 84B0     		sub	sp, sp, #16
 1972              		.cfi_def_cfa_offset 24
 1973 0004 00AF     		add	r7, sp, #0
 1974              		.cfi_def_cfa_register 7
 1975 0006 7860     		str	r0, [r7, #4]
1008:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xReturn;
1009:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 1976              		.loc 1 1009 19
 1977 0008 7B68     		ldr	r3, [r7, #4]
 1978 000a BB60     		str	r3, [r7, #8]
1010:Lib/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/cccWNSAq.s 			page 53


1011:Lib/FreeRTOS/Source/timers.c ****         configASSERT( xTimer );
 1979              		.loc 1 1011 9
 1980 000c 7B68     		ldr	r3, [r7, #4]
 1981 000e 002B     		cmp	r3, #0
 1982 0010 08D1     		bne	.L146
 1983              		.loc 1 1011 9 is_stmt 0 discriminator 1
 1984 0012 FFF7FEFF 		bl	ulSetInterruptMask
 1985 0016 0E4B     		ldr	r3, .L150
 1986 0018 0E4A     		ldr	r2, .L150+4
 1987 001a 40F2F331 		movw	r1, #1011
 1988 001e 0E48     		ldr	r0, .L150+8
 1989 0020 FFF7FEFF 		bl	__assert_func
 1990              	.L146:
1012:Lib/FreeRTOS/Source/timers.c **** 
1013:Lib/FreeRTOS/Source/timers.c ****         /* Is the timer in the list of active timers? */
1014:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 1991              		.loc 1 1014 9 is_stmt 1
 1992 0024 FFF7FEFF 		bl	vPortEnterCritical
1015:Lib/FreeRTOS/Source/timers.c ****         {
1016:Lib/FreeRTOS/Source/timers.c ****             if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 1993              		.loc 1 1016 26
 1994 0028 BB68     		ldr	r3, [r7, #8]
 1995 002a 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1996              		.loc 1 1016 37
 1997 002e 03F00103 		and	r3, r3, #1
 1998              		.loc 1 1016 15
 1999 0032 002B     		cmp	r3, #0
 2000 0034 02D1     		bne	.L147
1017:Lib/FreeRTOS/Source/timers.c ****             {
1018:Lib/FreeRTOS/Source/timers.c ****                 xReturn = pdFALSE;
 2001              		.loc 1 1018 25
 2002 0036 0023     		movs	r3, #0
 2003 0038 FB60     		str	r3, [r7, #12]
 2004 003a 01E0     		b	.L148
 2005              	.L147:
1019:Lib/FreeRTOS/Source/timers.c ****             }
1020:Lib/FreeRTOS/Source/timers.c ****             else
1021:Lib/FreeRTOS/Source/timers.c ****             {
1022:Lib/FreeRTOS/Source/timers.c ****                 xReturn = pdTRUE;
 2006              		.loc 1 1022 25
 2007 003c 0123     		movs	r3, #1
 2008 003e FB60     		str	r3, [r7, #12]
 2009              	.L148:
1023:Lib/FreeRTOS/Source/timers.c ****             }
1024:Lib/FreeRTOS/Source/timers.c ****         }
1025:Lib/FreeRTOS/Source/timers.c ****         taskEXIT_CRITICAL();
 2010              		.loc 1 1025 9
 2011 0040 FFF7FEFF 		bl	vPortExitCritical
1026:Lib/FreeRTOS/Source/timers.c **** 
1027:Lib/FreeRTOS/Source/timers.c ****         return xReturn;
 2012              		.loc 1 1027 16
 2013 0044 FB68     		ldr	r3, [r7, #12]
1028:Lib/FreeRTOS/Source/timers.c ****     } /*lint !e818 Can't be pointer to const due to the typedef. */
 2014              		.loc 1 1028 5
 2015 0046 1846     		mov	r0, r3
 2016 0048 1037     		adds	r7, r7, #16
 2017              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cccWNSAq.s 			page 54


 2018 004a BD46     		mov	sp, r7
 2019              		.cfi_def_cfa_register 13
 2020              		@ sp needed
 2021 004c 80BD     		pop	{r7, pc}
 2022              	.L151:
 2023 004e 00BF     		.align	2
 2024              	.L150:
 2025 0050 08000000 		.word	.LC1
 2026 0054 00000000 		.word	__func__.3
 2027 0058 0C000000 		.word	.LC2
 2028              		.cfi_endproc
 2029              	.LFE22:
 2031              		.section	.text.pvTimerGetTimerID,"ax",%progbits
 2032              		.align	1
 2033              		.global	pvTimerGetTimerID
 2034              		.syntax unified
 2035              		.thumb
 2036              		.thumb_func
 2038              	pvTimerGetTimerID:
 2039              	.LFB23:
1029:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1030:Lib/FreeRTOS/Source/timers.c **** 
1031:Lib/FreeRTOS/Source/timers.c ****     void * pvTimerGetTimerID( const TimerHandle_t xTimer )
1032:Lib/FreeRTOS/Source/timers.c ****     {
 2040              		.loc 1 1032 5
 2041              		.cfi_startproc
 2042              		@ args = 0, pretend = 0, frame = 16
 2043              		@ frame_needed = 1, uses_anonymous_args = 0
 2044 0000 80B5     		push	{r7, lr}
 2045              		.cfi_def_cfa_offset 8
 2046              		.cfi_offset 7, -8
 2047              		.cfi_offset 14, -4
 2048 0002 84B0     		sub	sp, sp, #16
 2049              		.cfi_def_cfa_offset 24
 2050 0004 00AF     		add	r7, sp, #0
 2051              		.cfi_def_cfa_register 7
 2052 0006 7860     		str	r0, [r7, #4]
1033:Lib/FreeRTOS/Source/timers.c ****         Timer_t * const pxTimer = xTimer;
 2053              		.loc 1 1033 25
 2054 0008 7B68     		ldr	r3, [r7, #4]
 2055 000a FB60     		str	r3, [r7, #12]
1034:Lib/FreeRTOS/Source/timers.c ****         void * pvReturn;
1035:Lib/FreeRTOS/Source/timers.c **** 
1036:Lib/FreeRTOS/Source/timers.c ****         configASSERT( xTimer );
 2056              		.loc 1 1036 9
 2057 000c 7B68     		ldr	r3, [r7, #4]
 2058 000e 002B     		cmp	r3, #0
 2059 0010 08D1     		bne	.L153
 2060              		.loc 1 1036 9 is_stmt 0 discriminator 1
 2061 0012 FFF7FEFF 		bl	ulSetInterruptMask
 2062 0016 094B     		ldr	r3, .L155
 2063 0018 094A     		ldr	r2, .L155+4
 2064 001a 40F20C41 		movw	r1, #1036
 2065 001e 0948     		ldr	r0, .L155+8
 2066 0020 FFF7FEFF 		bl	__assert_func
 2067              	.L153:
1037:Lib/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/cccWNSAq.s 			page 55


1038:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 2068              		.loc 1 1038 9 is_stmt 1
 2069 0024 FFF7FEFF 		bl	vPortEnterCritical
1039:Lib/FreeRTOS/Source/timers.c ****         {
1040:Lib/FreeRTOS/Source/timers.c ****             pvReturn = pxTimer->pvTimerID;
 2070              		.loc 1 1040 22
 2071 0028 FB68     		ldr	r3, [r7, #12]
 2072 002a DB69     		ldr	r3, [r3, #28]
 2073 002c BB60     		str	r3, [r7, #8]
1041:Lib/FreeRTOS/Source/timers.c ****         }
1042:Lib/FreeRTOS/Source/timers.c ****         taskEXIT_CRITICAL();
 2074              		.loc 1 1042 9
 2075 002e FFF7FEFF 		bl	vPortExitCritical
1043:Lib/FreeRTOS/Source/timers.c **** 
1044:Lib/FreeRTOS/Source/timers.c ****         return pvReturn;
 2076              		.loc 1 1044 16
 2077 0032 BB68     		ldr	r3, [r7, #8]
1045:Lib/FreeRTOS/Source/timers.c ****     }
 2078              		.loc 1 1045 5
 2079 0034 1846     		mov	r0, r3
 2080 0036 1037     		adds	r7, r7, #16
 2081              		.cfi_def_cfa_offset 8
 2082 0038 BD46     		mov	sp, r7
 2083              		.cfi_def_cfa_register 13
 2084              		@ sp needed
 2085 003a 80BD     		pop	{r7, pc}
 2086              	.L156:
 2087              		.align	2
 2088              	.L155:
 2089 003c 08000000 		.word	.LC1
 2090 0040 00000000 		.word	__func__.2
 2091 0044 0C000000 		.word	.LC2
 2092              		.cfi_endproc
 2093              	.LFE23:
 2095              		.section	.text.vTimerSetTimerID,"ax",%progbits
 2096              		.align	1
 2097              		.global	vTimerSetTimerID
 2098              		.syntax unified
 2099              		.thumb
 2100              		.thumb_func
 2102              	vTimerSetTimerID:
 2103              	.LFB24:
1046:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1047:Lib/FreeRTOS/Source/timers.c **** 
1048:Lib/FreeRTOS/Source/timers.c ****     void vTimerSetTimerID( TimerHandle_t xTimer,
1049:Lib/FreeRTOS/Source/timers.c ****                            void * pvNewID )
1050:Lib/FreeRTOS/Source/timers.c ****     {
 2104              		.loc 1 1050 5
 2105              		.cfi_startproc
 2106              		@ args = 0, pretend = 0, frame = 16
 2107              		@ frame_needed = 1, uses_anonymous_args = 0
 2108 0000 80B5     		push	{r7, lr}
 2109              		.cfi_def_cfa_offset 8
 2110              		.cfi_offset 7, -8
 2111              		.cfi_offset 14, -4
 2112 0002 84B0     		sub	sp, sp, #16
 2113              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cccWNSAq.s 			page 56


 2114 0004 00AF     		add	r7, sp, #0
 2115              		.cfi_def_cfa_register 7
 2116 0006 7860     		str	r0, [r7, #4]
 2117 0008 3960     		str	r1, [r7]
1051:Lib/FreeRTOS/Source/timers.c ****         Timer_t * const pxTimer = xTimer;
 2118              		.loc 1 1051 25
 2119 000a 7B68     		ldr	r3, [r7, #4]
 2120 000c FB60     		str	r3, [r7, #12]
1052:Lib/FreeRTOS/Source/timers.c **** 
1053:Lib/FreeRTOS/Source/timers.c ****         configASSERT( xTimer );
 2121              		.loc 1 1053 9
 2122 000e 7B68     		ldr	r3, [r7, #4]
 2123 0010 002B     		cmp	r3, #0
 2124 0012 08D1     		bne	.L158
 2125              		.loc 1 1053 9 is_stmt 0 discriminator 1
 2126 0014 FFF7FEFF 		bl	ulSetInterruptMask
 2127 0018 084B     		ldr	r3, .L159
 2128 001a 094A     		ldr	r2, .L159+4
 2129 001c 40F21D41 		movw	r1, #1053
 2130 0020 0848     		ldr	r0, .L159+8
 2131 0022 FFF7FEFF 		bl	__assert_func
 2132              	.L158:
1054:Lib/FreeRTOS/Source/timers.c **** 
1055:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 2133              		.loc 1 1055 9 is_stmt 1
 2134 0026 FFF7FEFF 		bl	vPortEnterCritical
1056:Lib/FreeRTOS/Source/timers.c ****         {
1057:Lib/FreeRTOS/Source/timers.c ****             pxTimer->pvTimerID = pvNewID;
 2135              		.loc 1 1057 32
 2136 002a FB68     		ldr	r3, [r7, #12]
 2137 002c 3A68     		ldr	r2, [r7]
 2138 002e DA61     		str	r2, [r3, #28]
1058:Lib/FreeRTOS/Source/timers.c ****         }
1059:Lib/FreeRTOS/Source/timers.c ****         taskEXIT_CRITICAL();
 2139              		.loc 1 1059 9
 2140 0030 FFF7FEFF 		bl	vPortExitCritical
1060:Lib/FreeRTOS/Source/timers.c ****     }
 2141              		.loc 1 1060 5
 2142 0034 00BF     		nop
 2143 0036 1037     		adds	r7, r7, #16
 2144              		.cfi_def_cfa_offset 8
 2145 0038 BD46     		mov	sp, r7
 2146              		.cfi_def_cfa_register 13
 2147              		@ sp needed
 2148 003a 80BD     		pop	{r7, pc}
 2149              	.L160:
 2150              		.align	2
 2151              	.L159:
 2152 003c 08000000 		.word	.LC1
 2153 0040 00000000 		.word	__func__.1
 2154 0044 0C000000 		.word	.LC2
 2155              		.cfi_endproc
 2156              	.LFE24:
 2158              		.section	.text.xTimerPendFunctionCallFromISR,"ax",%progbits
 2159              		.align	1
 2160              		.global	xTimerPendFunctionCallFromISR
 2161              		.syntax unified
ARM GAS  /tmp/cccWNSAq.s 			page 57


 2162              		.thumb
 2163              		.thumb_func
 2165              	xTimerPendFunctionCallFromISR:
 2166              	.LFB25:
1061:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1062:Lib/FreeRTOS/Source/timers.c **** 
1063:Lib/FreeRTOS/Source/timers.c ****     #if ( INCLUDE_xTimerPendFunctionCall == 1 )
1064:Lib/FreeRTOS/Source/timers.c **** 
1065:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
1066:Lib/FreeRTOS/Source/timers.c ****                                                   void * pvParameter1,
1067:Lib/FreeRTOS/Source/timers.c ****                                                   uint32_t ulParameter2,
1068:Lib/FreeRTOS/Source/timers.c ****                                                   BaseType_t * pxHigherPriorityTaskWoken )
1069:Lib/FreeRTOS/Source/timers.c ****         {
 2167              		.loc 1 1069 9
 2168              		.cfi_startproc
 2169              		@ args = 0, pretend = 0, frame = 40
 2170              		@ frame_needed = 1, uses_anonymous_args = 0
 2171 0000 80B5     		push	{r7, lr}
 2172              		.cfi_def_cfa_offset 8
 2173              		.cfi_offset 7, -8
 2174              		.cfi_offset 14, -4
 2175 0002 8AB0     		sub	sp, sp, #40
 2176              		.cfi_def_cfa_offset 48
 2177 0004 00AF     		add	r7, sp, #0
 2178              		.cfi_def_cfa_register 7
 2179 0006 F860     		str	r0, [r7, #12]
 2180 0008 B960     		str	r1, [r7, #8]
 2181 000a 7A60     		str	r2, [r7, #4]
 2182 000c 3B60     		str	r3, [r7]
1070:Lib/FreeRTOS/Source/timers.c ****             DaemonTaskMessage_t xMessage;
1071:Lib/FreeRTOS/Source/timers.c ****             BaseType_t xReturn;
1072:Lib/FreeRTOS/Source/timers.c **** 
1073:Lib/FreeRTOS/Source/timers.c ****             /* Complete the message with the function parameters and post it to the
1074:Lib/FreeRTOS/Source/timers.c ****              * daemon task. */
1075:Lib/FreeRTOS/Source/timers.c ****             xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 2183              		.loc 1 1075 33
 2184 000e 6FF00103 		mvn	r3, #1
 2185 0012 7B61     		str	r3, [r7, #20]
1076:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 2186              		.loc 1 1076 63
 2187 0014 FB68     		ldr	r3, [r7, #12]
 2188 0016 BB61     		str	r3, [r7, #24]
1077:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 2189              		.loc 1 1077 57
 2190 0018 BB68     		ldr	r3, [r7, #8]
 2191 001a FB61     		str	r3, [r7, #28]
1078:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 2192              		.loc 1 1078 57
 2193 001c 7B68     		ldr	r3, [r7, #4]
 2194 001e 3B62     		str	r3, [r7, #32]
1079:Lib/FreeRTOS/Source/timers.c **** 
1080:Lib/FreeRTOS/Source/timers.c ****             xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 2195              		.loc 1 1080 23
 2196 0020 064B     		ldr	r3, .L163
 2197 0022 1868     		ldr	r0, [r3]
 2198 0024 07F11401 		add	r1, r7, #20
 2199 0028 0023     		movs	r3, #0
ARM GAS  /tmp/cccWNSAq.s 			page 58


 2200 002a 3A68     		ldr	r2, [r7]
 2201 002c FFF7FEFF 		bl	xQueueGenericSendFromISR
 2202 0030 7862     		str	r0, [r7, #36]
1081:Lib/FreeRTOS/Source/timers.c **** 
1082:Lib/FreeRTOS/Source/timers.c ****             tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
1083:Lib/FreeRTOS/Source/timers.c **** 
1084:Lib/FreeRTOS/Source/timers.c ****             return xReturn;
 2203              		.loc 1 1084 20
 2204 0032 7B6A     		ldr	r3, [r7, #36]
1085:Lib/FreeRTOS/Source/timers.c ****         }
 2205              		.loc 1 1085 9
 2206 0034 1846     		mov	r0, r3
 2207 0036 2837     		adds	r7, r7, #40
 2208              		.cfi_def_cfa_offset 8
 2209 0038 BD46     		mov	sp, r7
 2210              		.cfi_def_cfa_register 13
 2211              		@ sp needed
 2212 003a 80BD     		pop	{r7, pc}
 2213              	.L164:
 2214              		.align	2
 2215              	.L163:
 2216 003c 00000000 		.word	xTimerQueue
 2217              		.cfi_endproc
 2218              	.LFE25:
 2220              		.section	.text.xTimerPendFunctionCall,"ax",%progbits
 2221              		.align	1
 2222              		.global	xTimerPendFunctionCall
 2223              		.syntax unified
 2224              		.thumb
 2225              		.thumb_func
 2227              	xTimerPendFunctionCall:
 2228              	.LFB26:
1086:Lib/FreeRTOS/Source/timers.c **** 
1087:Lib/FreeRTOS/Source/timers.c ****     #endif /* INCLUDE_xTimerPendFunctionCall */
1088:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1089:Lib/FreeRTOS/Source/timers.c **** 
1090:Lib/FreeRTOS/Source/timers.c ****     #if ( INCLUDE_xTimerPendFunctionCall == 1 )
1091:Lib/FreeRTOS/Source/timers.c **** 
1092:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
1093:Lib/FreeRTOS/Source/timers.c ****                                            void * pvParameter1,
1094:Lib/FreeRTOS/Source/timers.c ****                                            uint32_t ulParameter2,
1095:Lib/FreeRTOS/Source/timers.c ****                                            TickType_t xTicksToWait )
1096:Lib/FreeRTOS/Source/timers.c ****         {
 2229              		.loc 1 1096 9
 2230              		.cfi_startproc
 2231              		@ args = 0, pretend = 0, frame = 40
 2232              		@ frame_needed = 1, uses_anonymous_args = 0
 2233 0000 80B5     		push	{r7, lr}
 2234              		.cfi_def_cfa_offset 8
 2235              		.cfi_offset 7, -8
 2236              		.cfi_offset 14, -4
 2237 0002 8AB0     		sub	sp, sp, #40
 2238              		.cfi_def_cfa_offset 48
 2239 0004 00AF     		add	r7, sp, #0
 2240              		.cfi_def_cfa_register 7
 2241 0006 F860     		str	r0, [r7, #12]
 2242 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/cccWNSAq.s 			page 59


 2243 000a 7A60     		str	r2, [r7, #4]
 2244 000c 3B60     		str	r3, [r7]
1097:Lib/FreeRTOS/Source/timers.c ****             DaemonTaskMessage_t xMessage;
1098:Lib/FreeRTOS/Source/timers.c ****             BaseType_t xReturn;
1099:Lib/FreeRTOS/Source/timers.c **** 
1100:Lib/FreeRTOS/Source/timers.c ****             /* This function can only be called after a timer has been created or
1101:Lib/FreeRTOS/Source/timers.c ****              * after the scheduler has been started because, until then, the timer
1102:Lib/FreeRTOS/Source/timers.c ****              * queue does not exist. */
1103:Lib/FreeRTOS/Source/timers.c ****             configASSERT( xTimerQueue );
 2245              		.loc 1 1103 13
 2246 000e 124B     		ldr	r3, .L168
 2247 0010 1B68     		ldr	r3, [r3]
 2248 0012 002B     		cmp	r3, #0
 2249 0014 08D1     		bne	.L166
 2250              		.loc 1 1103 13 is_stmt 0 discriminator 1
 2251 0016 FFF7FEFF 		bl	ulSetInterruptMask
 2252 001a 104B     		ldr	r3, .L168+4
 2253 001c 104A     		ldr	r2, .L168+8
 2254 001e 40F24F41 		movw	r1, #1103
 2255 0022 1048     		ldr	r0, .L168+12
 2256 0024 FFF7FEFF 		bl	__assert_func
 2257              	.L166:
1104:Lib/FreeRTOS/Source/timers.c **** 
1105:Lib/FreeRTOS/Source/timers.c ****             /* Complete the message with the function parameters and post it to the
1106:Lib/FreeRTOS/Source/timers.c ****              * daemon task. */
1107:Lib/FreeRTOS/Source/timers.c ****             xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 2258              		.loc 1 1107 33 is_stmt 1
 2259 0028 4FF0FF33 		mov	r3, #-1
 2260 002c 7B61     		str	r3, [r7, #20]
1108:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 2261              		.loc 1 1108 63
 2262 002e FB68     		ldr	r3, [r7, #12]
 2263 0030 BB61     		str	r3, [r7, #24]
1109:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 2264              		.loc 1 1109 57
 2265 0032 BB68     		ldr	r3, [r7, #8]
 2266 0034 FB61     		str	r3, [r7, #28]
1110:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 2267              		.loc 1 1110 57
 2268 0036 7B68     		ldr	r3, [r7, #4]
 2269 0038 3B62     		str	r3, [r7, #32]
1111:Lib/FreeRTOS/Source/timers.c **** 
1112:Lib/FreeRTOS/Source/timers.c ****             xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 2270              		.loc 1 1112 23
 2271 003a 074B     		ldr	r3, .L168
 2272 003c 1868     		ldr	r0, [r3]
 2273 003e 07F11401 		add	r1, r7, #20
 2274 0042 0023     		movs	r3, #0
 2275 0044 3A68     		ldr	r2, [r7]
 2276 0046 FFF7FEFF 		bl	xQueueGenericSend
 2277 004a 7862     		str	r0, [r7, #36]
1113:Lib/FreeRTOS/Source/timers.c **** 
1114:Lib/FreeRTOS/Source/timers.c ****             tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
1115:Lib/FreeRTOS/Source/timers.c **** 
1116:Lib/FreeRTOS/Source/timers.c ****             return xReturn;
 2278              		.loc 1 1116 20
 2279 004c 7B6A     		ldr	r3, [r7, #36]
ARM GAS  /tmp/cccWNSAq.s 			page 60


1117:Lib/FreeRTOS/Source/timers.c ****         }
 2280              		.loc 1 1117 9
 2281 004e 1846     		mov	r0, r3
 2282 0050 2837     		adds	r7, r7, #40
 2283              		.cfi_def_cfa_offset 8
 2284 0052 BD46     		mov	sp, r7
 2285              		.cfi_def_cfa_register 13
 2286              		@ sp needed
 2287 0054 80BD     		pop	{r7, pc}
 2288              	.L169:
 2289 0056 00BF     		.align	2
 2290              	.L168:
 2291 0058 00000000 		.word	xTimerQueue
 2292 005c 08000000 		.word	.LC1
 2293 0060 00000000 		.word	__func__.0
 2294 0064 0C000000 		.word	.LC2
 2295              		.cfi_endproc
 2296              	.LFE26:
 2298              		.section	.text.uxTimerGetTimerNumber,"ax",%progbits
 2299              		.align	1
 2300              		.global	uxTimerGetTimerNumber
 2301              		.syntax unified
 2302              		.thumb
 2303              		.thumb_func
 2305              	uxTimerGetTimerNumber:
 2306              	.LFB27:
1118:Lib/FreeRTOS/Source/timers.c **** 
1119:Lib/FreeRTOS/Source/timers.c ****     #endif /* INCLUDE_xTimerPendFunctionCall */
1120:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1121:Lib/FreeRTOS/Source/timers.c **** 
1122:Lib/FreeRTOS/Source/timers.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
1123:Lib/FreeRTOS/Source/timers.c **** 
1124:Lib/FreeRTOS/Source/timers.c ****         UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
1125:Lib/FreeRTOS/Source/timers.c ****         {
 2307              		.loc 1 1125 9
 2308              		.cfi_startproc
 2309              		@ args = 0, pretend = 0, frame = 8
 2310              		@ frame_needed = 1, uses_anonymous_args = 0
 2311              		@ link register save eliminated.
 2312 0000 80B4     		push	{r7}
 2313              		.cfi_def_cfa_offset 4
 2314              		.cfi_offset 7, -4
 2315 0002 83B0     		sub	sp, sp, #12
 2316              		.cfi_def_cfa_offset 16
 2317 0004 00AF     		add	r7, sp, #0
 2318              		.cfi_def_cfa_register 7
 2319 0006 7860     		str	r0, [r7, #4]
1126:Lib/FreeRTOS/Source/timers.c ****             return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 2320              		.loc 1 1126 44
 2321 0008 7B68     		ldr	r3, [r7, #4]
 2322 000a 5B6A     		ldr	r3, [r3, #36]
1127:Lib/FreeRTOS/Source/timers.c ****         }
 2323              		.loc 1 1127 9
 2324 000c 1846     		mov	r0, r3
 2325 000e 0C37     		adds	r7, r7, #12
 2326              		.cfi_def_cfa_offset 4
 2327 0010 BD46     		mov	sp, r7
ARM GAS  /tmp/cccWNSAq.s 			page 61


 2328              		.cfi_def_cfa_register 13
 2329              		@ sp needed
 2330 0012 5DF8047B 		ldr	r7, [sp], #4
 2331              		.cfi_restore 7
 2332              		.cfi_def_cfa_offset 0
 2333 0016 7047     		bx	lr
 2334              		.cfi_endproc
 2335              	.LFE27:
 2337              		.section	.text.vTimerSetTimerNumber,"ax",%progbits
 2338              		.align	1
 2339              		.global	vTimerSetTimerNumber
 2340              		.syntax unified
 2341              		.thumb
 2342              		.thumb_func
 2344              	vTimerSetTimerNumber:
 2345              	.LFB28:
1128:Lib/FreeRTOS/Source/timers.c **** 
1129:Lib/FreeRTOS/Source/timers.c ****     #endif /* configUSE_TRACE_FACILITY */
1130:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1131:Lib/FreeRTOS/Source/timers.c **** 
1132:Lib/FreeRTOS/Source/timers.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
1133:Lib/FreeRTOS/Source/timers.c **** 
1134:Lib/FreeRTOS/Source/timers.c ****         void vTimerSetTimerNumber( TimerHandle_t xTimer,
1135:Lib/FreeRTOS/Source/timers.c ****                                    UBaseType_t uxTimerNumber )
1136:Lib/FreeRTOS/Source/timers.c ****         {
 2346              		.loc 1 1136 9
 2347              		.cfi_startproc
 2348              		@ args = 0, pretend = 0, frame = 8
 2349              		@ frame_needed = 1, uses_anonymous_args = 0
 2350              		@ link register save eliminated.
 2351 0000 80B4     		push	{r7}
 2352              		.cfi_def_cfa_offset 4
 2353              		.cfi_offset 7, -4
 2354 0002 83B0     		sub	sp, sp, #12
 2355              		.cfi_def_cfa_offset 16
 2356 0004 00AF     		add	r7, sp, #0
 2357              		.cfi_def_cfa_register 7
 2358 0006 7860     		str	r0, [r7, #4]
 2359 0008 3960     		str	r1, [r7]
1137:Lib/FreeRTOS/Source/timers.c ****             ( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 2360              		.loc 1 1137 53
 2361 000a 7B68     		ldr	r3, [r7, #4]
 2362 000c 3A68     		ldr	r2, [r7]
 2363 000e 5A62     		str	r2, [r3, #36]
1138:Lib/FreeRTOS/Source/timers.c ****         }
 2364              		.loc 1 1138 9
 2365 0010 00BF     		nop
 2366 0012 0C37     		adds	r7, r7, #12
 2367              		.cfi_def_cfa_offset 4
 2368 0014 BD46     		mov	sp, r7
 2369              		.cfi_def_cfa_register 13
 2370              		@ sp needed
 2371 0016 5DF8047B 		ldr	r7, [sp], #4
 2372              		.cfi_restore 7
 2373              		.cfi_def_cfa_offset 0
 2374 001a 7047     		bx	lr
 2375              		.cfi_endproc
ARM GAS  /tmp/cccWNSAq.s 			page 62


 2376              	.LFE28:
 2378              		.section	.rodata.__func__.18,"a"
 2379              		.align	2
 2382              	__func__.18:
 2383 0000 7854696D 		.ascii	"xTimerCreateTimerTask\000"
 2383      65724372 
 2383      65617465 
 2383      54696D65 
 2383      72546173 
 2384              		.section	.rodata.__func__.17,"a"
 2385              		.align	2
 2388              	__func__.17:
 2389 0000 7854696D 		.ascii	"xTimerCreateStatic\000"
 2389      65724372 
 2389      65617465 
 2389      53746174 
 2389      696300
 2390              		.section	.rodata.__func__.16,"a"
 2391              		.align	2
 2394              	__func__.16:
 2395 0000 70727649 		.ascii	"prvInitialiseNewTimer\000"
 2395      6E697469 
 2395      616C6973 
 2395      654E6577 
 2395      54696D65 
 2396              		.section	.rodata.__func__.15,"a"
 2397              		.align	2
 2400              	__func__.15:
 2401 0000 7854696D 		.ascii	"xTimerGenericCommand\000"
 2401      65724765 
 2401      6E657269 
 2401      63436F6D 
 2401      6D616E64 
 2402              		.section	.rodata.__func__.14,"a"
 2403              		.align	2
 2406              	__func__.14:
 2407 0000 7854696D 		.ascii	"xTimerGetTimerDaemonTaskHandle\000"
 2407      65724765 
 2407      7454696D 
 2407      65724461 
 2407      656D6F6E 
 2408              		.section	.rodata.__func__.13,"a"
 2409              		.align	2
 2412              	__func__.13:
 2413 0000 7854696D 		.ascii	"xTimerGetPeriod\000"
 2413      65724765 
 2413      74506572 
 2413      696F6400 
 2414              		.section	.rodata.__func__.12,"a"
 2415              		.align	2
 2418              	__func__.12:
 2419 0000 7654696D 		.ascii	"vTimerSetReloadMode\000"
 2419      65725365 
 2419      7452656C 
 2419      6F61644D 
 2419      6F646500 
 2420              		.section	.rodata.__func__.11,"a"
ARM GAS  /tmp/cccWNSAq.s 			page 63


 2421              		.align	2
 2424              	__func__.11:
 2425 0000 7854696D 		.ascii	"xTimerGetReloadMode\000"
 2425      65724765 
 2425      7452656C 
 2425      6F61644D 
 2425      6F646500 
 2426              		.section	.rodata.__func__.10,"a"
 2427              		.align	2
 2430              	__func__.10:
 2431 0000 7854696D 		.ascii	"xTimerGetExpiryTime\000"
 2431      65724765 
 2431      74457870 
 2431      69727954 
 2431      696D6500 
 2432              		.section	.rodata.__func__.9,"a"
 2433              		.align	2
 2436              	__func__.9:
 2437 0000 7854696D 		.ascii	"xTimerGetStaticBuffer\000"
 2437      65724765 
 2437      74537461 
 2437      74696342 
 2437      75666665 
 2438              		.section	.rodata.__func__.8,"a"
 2439              		.align	2
 2442              	__func__.8:
 2443 0000 70635469 		.ascii	"pcTimerGetName\000"
 2443      6D657247 
 2443      65744E61 
 2443      6D6500
 2444              		.section	.bss.xLastTime.7,"aw",%nobits
 2445              		.align	2
 2448              	xLastTime.7:
 2449 0000 00000000 		.space	4
 2450              		.section	.rodata.__func__.6,"a"
 2451              		.align	2
 2454              	__func__.6:
 2455 0000 70727650 		.ascii	"prvProcessReceivedCommands\000"
 2455      726F6365 
 2455      73735265 
 2455      63656976 
 2455      6564436F 
 2456              		.section	.bss.ucStaticTimerQueueStorage.5,"aw",%nobits
 2457              		.align	2
 2460              	ucStaticTimerQueueStorage.5:
 2461 0000 00000000 		.space	160
 2461      00000000 
 2461      00000000 
 2461      00000000 
 2461      00000000 
 2462              		.section	.bss.xStaticTimerQueue.4,"aw",%nobits
 2463              		.align	2
 2466              	xStaticTimerQueue.4:
 2467 0000 00000000 		.space	80
 2467      00000000 
 2467      00000000 
 2467      00000000 
ARM GAS  /tmp/cccWNSAq.s 			page 64


 2467      00000000 
 2468              		.section	.rodata.__func__.3,"a"
 2469              		.align	2
 2472              	__func__.3:
 2473 0000 7854696D 		.ascii	"xTimerIsTimerActive\000"
 2473      65724973 
 2473      54696D65 
 2473      72416374 
 2473      69766500 
 2474              		.section	.rodata.__func__.2,"a"
 2475              		.align	2
 2478              	__func__.2:
 2479 0000 70765469 		.ascii	"pvTimerGetTimerID\000"
 2479      6D657247 
 2479      65745469 
 2479      6D657249 
 2479      4400
 2480              		.section	.rodata.__func__.1,"a"
 2481              		.align	2
 2484              	__func__.1:
 2485 0000 7654696D 		.ascii	"vTimerSetTimerID\000"
 2485      65725365 
 2485      7454696D 
 2485      65724944 
 2485      00
 2486              		.section	.rodata.__func__.0,"a"
 2487              		.align	2
 2490              	__func__.0:
 2491 0000 7854696D 		.ascii	"xTimerPendFunctionCall\000"
 2491      65725065 
 2491      6E644675 
 2491      6E637469 
 2491      6F6E4361 
 2492              		.text
 2493              	.Letext0:
 2494              		.file 2 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 2495              		.file 3 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 2496              		.file 4 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 2497              		.file 5 "Lib/FreeRTOS/Source/include/projdefs.h"
 2498              		.file 6 "Lib/FreeRTOS/Source/portable/GCC/ARM_CM55_NTZ/non_secure/portmacrocommon.h"
 2499              		.file 7 "Lib/FreeRTOS/Source/include/FreeRTOS.h"
 2500              		.file 8 "Lib/FreeRTOS/Source/include/list.h"
 2501              		.file 9 "Lib/FreeRTOS/Source/include/task.h"
 2502              		.file 10 "Lib/FreeRTOS/Source/include/queue.h"
 2503              		.file 11 "Lib/FreeRTOS/Source/include/timers.h"
 2504              		.file 12 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-
ARM GAS  /tmp/cccWNSAq.s 			page 65


DEFINED SYMBOLS
                            *ABS*:00000000 timers.c
     /tmp/cccWNSAq.s:26     .bss.xActiveTimerList1:00000000 $d
     /tmp/cccWNSAq.s:29     .bss.xActiveTimerList1:00000000 xActiveTimerList1
     /tmp/cccWNSAq.s:32     .bss.xActiveTimerList2:00000000 $d
     /tmp/cccWNSAq.s:35     .bss.xActiveTimerList2:00000000 xActiveTimerList2
     /tmp/cccWNSAq.s:38     .bss.pxCurrentTimerList:00000000 $d
     /tmp/cccWNSAq.s:41     .bss.pxCurrentTimerList:00000000 pxCurrentTimerList
     /tmp/cccWNSAq.s:44     .bss.pxOverflowTimerList:00000000 $d
     /tmp/cccWNSAq.s:47     .bss.pxOverflowTimerList:00000000 pxOverflowTimerList
     /tmp/cccWNSAq.s:50     .bss.xTimerQueue:00000000 $d
     /tmp/cccWNSAq.s:53     .bss.xTimerQueue:00000000 xTimerQueue
     /tmp/cccWNSAq.s:56     .bss.xTimerTaskHandle:00000000 $d
     /tmp/cccWNSAq.s:59     .bss.xTimerTaskHandle:00000000 xTimerTaskHandle
     /tmp/cccWNSAq.s:62     .rodata:00000000 $d
     /tmp/cccWNSAq.s:72     .text.xTimerCreateTimerTask:00000000 $t
     /tmp/cccWNSAq.s:78     .text.xTimerCreateTimerTask:00000000 xTimerCreateTimerTask
     /tmp/cccWNSAq.s:1869   .text.prvCheckForValidListAndQueue:00000000 prvCheckForValidListAndQueue
     /tmp/cccWNSAq.s:169    .text.xTimerCreateTimerTask:0000007c $d
     /tmp/cccWNSAq.s:1128   .text.prvTimerTask:00000000 prvTimerTask
     /tmp/cccWNSAq.s:2382   .rodata.__func__.18:00000000 __func__.18
     /tmp/cccWNSAq.s:180    .text.xTimerCreateStatic:00000000 $t
     /tmp/cccWNSAq.s:186    .text.xTimerCreateStatic:00000000 xTimerCreateStatic
     /tmp/cccWNSAq.s:282    .text.prvInitialiseNewTimer:00000000 prvInitialiseNewTimer
     /tmp/cccWNSAq.s:270    .text.xTimerCreateStatic:00000074 $d
     /tmp/cccWNSAq.s:2388   .rodata.__func__.17:00000000 __func__.17
     /tmp/cccWNSAq.s:277    .text.prvInitialiseNewTimer:00000000 $t
     /tmp/cccWNSAq.s:359    .text.prvInitialiseNewTimer:0000006c $d
     /tmp/cccWNSAq.s:2394   .rodata.__func__.16:00000000 __func__.16
     /tmp/cccWNSAq.s:366    .text.xTimerGenericCommand:00000000 $t
     /tmp/cccWNSAq.s:372    .text.xTimerGenericCommand:00000000 xTimerGenericCommand
     /tmp/cccWNSAq.s:472    .text.xTimerGenericCommand:00000094 $d
     /tmp/cccWNSAq.s:2400   .rodata.__func__.15:00000000 __func__.15
     /tmp/cccWNSAq.s:480    .text.xTimerGetTimerDaemonTaskHandle:00000000 $t
     /tmp/cccWNSAq.s:486    .text.xTimerGetTimerDaemonTaskHandle:00000000 xTimerGetTimerDaemonTaskHandle
     /tmp/cccWNSAq.s:520    .text.xTimerGetTimerDaemonTaskHandle:00000028 $d
     /tmp/cccWNSAq.s:2406   .rodata.__func__.14:00000000 __func__.14
     /tmp/cccWNSAq.s:528    .text.xTimerGetPeriod:00000000 $t
     /tmp/cccWNSAq.s:534    .text.xTimerGetPeriod:00000000 xTimerGetPeriod
     /tmp/cccWNSAq.s:578    .text.xTimerGetPeriod:00000030 $d
     /tmp/cccWNSAq.s:2412   .rodata.__func__.13:00000000 __func__.13
     /tmp/cccWNSAq.s:585    .text.vTimerSetReloadMode:00000000 $t
     /tmp/cccWNSAq.s:591    .text.vTimerSetReloadMode:00000000 vTimerSetReloadMode
     /tmp/cccWNSAq.s:660    .text.vTimerSetReloadMode:00000064 $d
     /tmp/cccWNSAq.s:2418   .rodata.__func__.12:00000000 __func__.12
     /tmp/cccWNSAq.s:667    .text.xTimerGetReloadMode:00000000 $t
     /tmp/cccWNSAq.s:673    .text.xTimerGetReloadMode:00000000 xTimerGetReloadMode
     /tmp/cccWNSAq.s:737    .text.xTimerGetReloadMode:00000050 $d
     /tmp/cccWNSAq.s:2424   .rodata.__func__.11:00000000 __func__.11
     /tmp/cccWNSAq.s:744    .text.uxTimerGetReloadMode:00000000 $t
     /tmp/cccWNSAq.s:750    .text.uxTimerGetReloadMode:00000000 uxTimerGetReloadMode
     /tmp/cccWNSAq.s:781    .text.xTimerGetExpiryTime:00000000 $t
     /tmp/cccWNSAq.s:787    .text.xTimerGetExpiryTime:00000000 xTimerGetExpiryTime
     /tmp/cccWNSAq.s:834    .text.xTimerGetExpiryTime:00000034 $d
     /tmp/cccWNSAq.s:2430   .rodata.__func__.10:00000000 __func__.10
     /tmp/cccWNSAq.s:841    .text.xTimerGetStaticBuffer:00000000 $t
     /tmp/cccWNSAq.s:847    .text.xTimerGetStaticBuffer:00000000 xTimerGetStaticBuffer
ARM GAS  /tmp/cccWNSAq.s 			page 66


     /tmp/cccWNSAq.s:912    .text.xTimerGetStaticBuffer:00000050 $d
     /tmp/cccWNSAq.s:2436   .rodata.__func__.9:00000000 __func__.9
     /tmp/cccWNSAq.s:919    .text.pcTimerGetName:00000000 $t
     /tmp/cccWNSAq.s:925    .text.pcTimerGetName:00000000 pcTimerGetName
     /tmp/cccWNSAq.s:969    .text.pcTimerGetName:00000030 $d
     /tmp/cccWNSAq.s:2442   .rodata.__func__.8:00000000 __func__.8
     /tmp/cccWNSAq.s:976    .text.prvReloadTimer:00000000 $t
     /tmp/cccWNSAq.s:981    .text.prvReloadTimer:00000000 prvReloadTimer
     /tmp/cccWNSAq.s:1420   .text.prvInsertTimerInActiveList:00000000 prvInsertTimerInActiveList
     /tmp/cccWNSAq.s:1043   .text.prvProcessExpiredTimer:00000000 $t
     /tmp/cccWNSAq.s:1048   .text.prvProcessExpiredTimer:00000000 prvProcessExpiredTimer
     /tmp/cccWNSAq.s:1118   .text.prvProcessExpiredTimer:0000005c $d
     /tmp/cccWNSAq.s:1123   .text.prvTimerTask:00000000 $t
     /tmp/cccWNSAq.s:1279   .text.prvGetNextExpireTime:00000000 prvGetNextExpireTime
     /tmp/cccWNSAq.s:1168   .text.prvProcessTimerOrBlockTask:00000000 prvProcessTimerOrBlockTask
     /tmp/cccWNSAq.s:1527   .text.prvProcessReceivedCommands:00000000 prvProcessReceivedCommands
     /tmp/cccWNSAq.s:1163   .text.prvProcessTimerOrBlockTask:00000000 $t
     /tmp/cccWNSAq.s:1355   .text.prvSampleTimeNow:00000000 prvSampleTimeNow
     /tmp/cccWNSAq.s:1268   .text.prvProcessTimerOrBlockTask:00000084 $d
     /tmp/cccWNSAq.s:1274   .text.prvGetNextExpireTime:00000000 $t
     /tmp/cccWNSAq.s:1345   .text.prvGetNextExpireTime:00000044 $d
     /tmp/cccWNSAq.s:1350   .text.prvSampleTimeNow:00000000 $t
     /tmp/cccWNSAq.s:1794   .text.prvSwitchTimerLists:00000000 prvSwitchTimerLists
     /tmp/cccWNSAq.s:1410   .text.prvSampleTimeNow:0000003c $d
     /tmp/cccWNSAq.s:2448   .bss.xLastTime.7:00000000 xLastTime.7
     /tmp/cccWNSAq.s:1415   .text.prvInsertTimerInActiveList:00000000 $t
     /tmp/cccWNSAq.s:1516   .text.prvInsertTimerInActiveList:0000007c $d
     /tmp/cccWNSAq.s:1522   .text.prvProcessReceivedCommands:00000000 $t
     /tmp/cccWNSAq.s:1616   .text.prvProcessReceivedCommands:00000074 $d
     /tmp/cccWNSAq.s:1625   .text.prvProcessReceivedCommands:00000098 $t
     /tmp/cccWNSAq.s:1781   .text.prvProcessReceivedCommands:00000194 $d
     /tmp/cccWNSAq.s:2454   .rodata.__func__.6:00000000 __func__.6
     /tmp/cccWNSAq.s:1789   .text.prvSwitchTimerLists:00000000 $t
     /tmp/cccWNSAq.s:1854   .text.prvSwitchTimerLists:00000044 $d
     /tmp/cccWNSAq.s:1864   .text.prvCheckForValidListAndQueue:00000000 $t
     /tmp/cccWNSAq.s:1943   .text.prvCheckForValidListAndQueue:00000060 $d
     /tmp/cccWNSAq.s:2466   .bss.xStaticTimerQueue.4:00000000 xStaticTimerQueue.4
     /tmp/cccWNSAq.s:2460   .bss.ucStaticTimerQueueStorage.5:00000000 ucStaticTimerQueueStorage.5
     /tmp/cccWNSAq.s:1955   .text.xTimerIsTimerActive:00000000 $t
     /tmp/cccWNSAq.s:1961   .text.xTimerIsTimerActive:00000000 xTimerIsTimerActive
     /tmp/cccWNSAq.s:2025   .text.xTimerIsTimerActive:00000050 $d
     /tmp/cccWNSAq.s:2472   .rodata.__func__.3:00000000 __func__.3
     /tmp/cccWNSAq.s:2032   .text.pvTimerGetTimerID:00000000 $t
     /tmp/cccWNSAq.s:2038   .text.pvTimerGetTimerID:00000000 pvTimerGetTimerID
     /tmp/cccWNSAq.s:2089   .text.pvTimerGetTimerID:0000003c $d
     /tmp/cccWNSAq.s:2478   .rodata.__func__.2:00000000 __func__.2
     /tmp/cccWNSAq.s:2096   .text.vTimerSetTimerID:00000000 $t
     /tmp/cccWNSAq.s:2102   .text.vTimerSetTimerID:00000000 vTimerSetTimerID
     /tmp/cccWNSAq.s:2152   .text.vTimerSetTimerID:0000003c $d
     /tmp/cccWNSAq.s:2484   .rodata.__func__.1:00000000 __func__.1
     /tmp/cccWNSAq.s:2159   .text.xTimerPendFunctionCallFromISR:00000000 $t
     /tmp/cccWNSAq.s:2165   .text.xTimerPendFunctionCallFromISR:00000000 xTimerPendFunctionCallFromISR
     /tmp/cccWNSAq.s:2216   .text.xTimerPendFunctionCallFromISR:0000003c $d
     /tmp/cccWNSAq.s:2221   .text.xTimerPendFunctionCall:00000000 $t
     /tmp/cccWNSAq.s:2227   .text.xTimerPendFunctionCall:00000000 xTimerPendFunctionCall
     /tmp/cccWNSAq.s:2291   .text.xTimerPendFunctionCall:00000058 $d
     /tmp/cccWNSAq.s:2490   .rodata.__func__.0:00000000 __func__.0
ARM GAS  /tmp/cccWNSAq.s 			page 67


     /tmp/cccWNSAq.s:2299   .text.uxTimerGetTimerNumber:00000000 $t
     /tmp/cccWNSAq.s:2305   .text.uxTimerGetTimerNumber:00000000 uxTimerGetTimerNumber
     /tmp/cccWNSAq.s:2338   .text.vTimerSetTimerNumber:00000000 $t
     /tmp/cccWNSAq.s:2344   .text.vTimerSetTimerNumber:00000000 vTimerSetTimerNumber
     /tmp/cccWNSAq.s:2379   .rodata.__func__.18:00000000 $d
     /tmp/cccWNSAq.s:2385   .rodata.__func__.17:00000000 $d
     /tmp/cccWNSAq.s:2391   .rodata.__func__.16:00000000 $d
     /tmp/cccWNSAq.s:2397   .rodata.__func__.15:00000000 $d
     /tmp/cccWNSAq.s:2403   .rodata.__func__.14:00000000 $d
     /tmp/cccWNSAq.s:2409   .rodata.__func__.13:00000000 $d
     /tmp/cccWNSAq.s:2415   .rodata.__func__.12:00000000 $d
     /tmp/cccWNSAq.s:2421   .rodata.__func__.11:00000000 $d
     /tmp/cccWNSAq.s:2427   .rodata.__func__.10:00000000 $d
     /tmp/cccWNSAq.s:2433   .rodata.__func__.9:00000000 $d
     /tmp/cccWNSAq.s:2439   .rodata.__func__.8:00000000 $d
     /tmp/cccWNSAq.s:2445   .bss.xLastTime.7:00000000 $d
     /tmp/cccWNSAq.s:2451   .rodata.__func__.6:00000000 $d
     /tmp/cccWNSAq.s:2457   .bss.ucStaticTimerQueueStorage.5:00000000 $d
     /tmp/cccWNSAq.s:2463   .bss.xStaticTimerQueue.4:00000000 $d
     /tmp/cccWNSAq.s:2469   .rodata.__func__.3:00000000 $d
     /tmp/cccWNSAq.s:2475   .rodata.__func__.2:00000000 $d
     /tmp/cccWNSAq.s:2481   .rodata.__func__.1:00000000 $d
     /tmp/cccWNSAq.s:2487   .rodata.__func__.0:00000000 $d
                           .group:00000000 wm4.0.2a10773746a5c5ebb5552f50e466f80b
                           .group:00000000 wm4.ieeefp.h.77.bd5feb87d9990dd328793ced294f6a87
                           .group:00000000 wm4._newlib_version.h.4.411db44ea2338a62eca2f0777f81481b
                           .group:00000000 wm4.newlib.h.27.4b972ceed5d01f491020c20f1e546cab
                           .group:00000000 wm4.features.h.22.9dfb1293666eb4caf24cccb81c86a551
                           .group:00000000 wm4.config.h.224.10ee1ad185d877c6e334e6581faab44d
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.185.882514a1a6169ceba9142f401cbe27c6
                           .group:00000000 wm4.stddef.h.39.794fa375de48dda278c4aebb5c74aa5b
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4.cdefs.h.49.70fc7af612f78ddcace70fdd90b5623b
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.158.6f8e08a347b1cff664332fa350bfceb3
                           .group:00000000 wm4._types.h.127.3bdfe3ff8ea2d0985b03d9cbe93480e3
                           .group:00000000 wm4.reent.h.18.25503cdc8b7e55dd0d6ea7b3e5af7a03
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.78.6b87466b04591b1f1cb88c14fdf2ba9e
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.FreeRTOS.h.59.647b1b0da38e4e98108aae13c8abe9ee
                           .group:00000000 wm4.assert.h.11.db24e541f16414db224bf986d21017e2
                           .group:00000000 wm4.FreeRTOSConfig.h.59.2629c72cff9e6dbe880a2dc225eae516
                           .group:00000000 wm4.FreeRTOS.h.80.7742fabaf5accf3762dc12f7f259a8a0
                           .group:00000000 wm4.projdefs.h.30.55a824156f299c075c33148a9fdadb99
                           .group:00000000 wm4.portmacro.h.30.cbb4b2da41f551c2a9904f0d03a1ce3e
                           .group:00000000 wm4.portmacrocommon.h.30.d5cb67896ab50a95311be7e023da5c4f
                           .group:00000000 wm4.portmacro.h.68.4051ecf710d074fb55b16d91dfebeeaa
                           .group:00000000 wm4.portable.h.61.d557c57974d490f056246a26cdcddd6c
                           .group:00000000 wm4.mpu_wrappers.h.30.ccc5f1a6903f941a88c268f5f62af3fe
                           .group:00000000 wm4.portable.h.189.522b8bd52a171d3fd1432ef06d0caa63
ARM GAS  /tmp/cccWNSAq.s 			page 68


                           .group:00000000 wm4.FreeRTOS.h.102.fb871f3e464d99c5a57b3115545a02ad
                           .group:00000000 wm4.list.h.59.bce6419520cd4f5f98779a1530bf2118
                           .group:00000000 wm4.task.h.56.84290139c73b47f5b9aac361361a2a31
                           .group:00000000 wm4.queue.h.68.219f47fba8b59640449b84d04c5bd6d8
                           .group:00000000 wm4.timers.h.31.66ebcd2d44a2c3d69f2bf78390c55c74

UNDEFINED SYMBOLS
vApplicationGetTimerTaskMemory
xTaskCreateStatic
ulSetInterruptMask
__assert_func
vListInitialiseItem
xTaskGetSchedulerState
xQueueGenericSend
xQueueGenericSendFromISR
vPortEnterCritical
vPortExitCritical
uxListRemove
vTaskSuspendAll
xTaskResumeAll
vQueueWaitForMessageRestricted
vPortYield
xTaskGetTickCount
vListInsert
xQueueReceive
vListInitialise
xQueueGenericCreateStatic
vQueueAddToRegistry
