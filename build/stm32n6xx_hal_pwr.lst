ARM GAS  /tmp/ccWziJYR.s 			page 1


   1              		.arch armv8.1-m.main
   2              		.fpu fpv5-d16
   3              		.arch_extension dsp
   4              		.arch_extension fp
   5              		.arch_extension fp.dp
   6              		.arch_extension mve
   7              		.arch_extension mve.fp
   8              		.eabi_attribute 5, "cortex-m55"
   9              		.eabi_attribute 28, 1
  10              		.eabi_attribute 20, 1
  11              		.eabi_attribute 21, 1
  12              		.eabi_attribute 23, 3
  13              		.eabi_attribute 24, 1
  14              		.eabi_attribute 25, 1
  15              		.eabi_attribute 26, 1
  16              		.eabi_attribute 30, 6
  17              		.eabi_attribute 34, 1
  18              		.eabi_attribute 38, 1
  19              		.eabi_attribute 18, 4
  20              		.file	"stm32n6xx_hal_pwr.c"
  21              		.text
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.file 1 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c"
  25              		.section	.text.HAL_PWR_DeInit,"ax",%progbits
  26              		.align	1
  27              		.global	HAL_PWR_DeInit
  28              		.syntax unified
  29              		.thumb
  30              		.thumb_func
  32              	HAL_PWR_DeInit:
  33              	.LFB835:
   1:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
   2:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   ******************************************************************************
   3:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @file    stm32n6xx_hal_pwr.c
   4:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @author  MCD Application Team
   5:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief   PWR HAL module driver.
   6:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          This file provides firmware functions to manage the following
   7:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:
   8:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *           + Initialization/De-Initialization Functions.
   9:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *           + Peripheral Control Functions.
  10:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *           + PWR Attributes Functions.
  11:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *
  12:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   ******************************************************************************
  13:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @attention
  14:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *
  15:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * Copyright (c) 2023 STMicroelectronics.
  16:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * All rights reserved.
  17:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *
  18:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * This software is licensed under terms that can be found in the LICENSE file
  19:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * in the root directory of this software component.
  20:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  21:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *
  22:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   ******************************************************************************
  23:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   @verbatim
  24:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   ==============================================================================
  25:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                         ##### PWR peripheral overview #####
ARM GAS  /tmp/ccWziJYR.s 			page 2


  26:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   ==============================================================================
  27:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   [..]
  28:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) The Power control (PWR) provides an overview of the supply architecture
  29:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        for the different power domains and of the supply configuration
  30:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        controller.
  31:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  32:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Several low-power modes are available to save power when the CPU does not need to
  33:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        execute code :
  34:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) Sleep   (CPU clock stopped and still in RUN mode)
  35:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) Stop    (System clock stopped)
  36:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) Standby (System powered down)
  37:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  38:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   ==============================================================================
  39:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                         ##### How to use this driver #####
  40:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   ==============================================================================
  41:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   [..]
  42:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  43:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWR_EnableBkUpAccess() and HAL_PWR_DisableBkUpAccess() functions
  44:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        to enable/disable access to the backup domain (RCC Backup domain control
  45:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        register RCC_BDCR, RTC registers, TAMP registers, backup registers and
  46:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        backup SRAM).
  47:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  48:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWR_ConfigPVD() after setting parameters to be configured (event
  49:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        mode and voltage threshold) in order to set up the Programmed Voltage
  50:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        Detector, then use HAL_PWR_EnablePVD() and HAL_PWR_DisablePVD()
  51:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        functions to start and stop the PVD detection.
  52:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (+) PVD level on PVD_IN is compared to the internal VREFINT level.
  53:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        PVDO flag is available in PWR_CR2 to indicate if the voltage level
  54:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        on PVD_IN is higher or lower than the PVD threshold.
  55:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  56:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWR_EnableWakeUpPin() and HAL_PWR_DisableWakeUpPin() functions
  57:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        with the right parameter to configure the wake up pin polarity (Low or
  58:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        High), the wake up pin selection and to enable and disable it.
  59:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  60:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWREx_GetWakeupFlag() and HAL_PWREx_ClearWakeupFlag()
  61:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        functions to manage wake-up flag for the selected pin.
  62:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  63:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWR_EnterSLEEPMode() function to enter the CPU in Sleep mode.
  64:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        Wake-up from Sleep mode could be following to an event or an
  65:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        interrupt according to low power mode intrinsic request called (__WFI()
  66:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        or __WFE()).
  67:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  68:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWR_EnterSTOPMode() function to enter the whole system to Stop
  69:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        mode. Wake-up from Stop mode could be following to an event or an
  70:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        interrupt according to low power mode intrinsic request called (__WFI()
  71:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        or __WFE()). (Regulator state on STM32N6 devices is managed internally but
  72:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        regulator parameter is kept for product compatibility).
  73:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  74:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWR_EnterSTANDBYMode() function to enter the whole system in
  75:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        Standby mode. Wake-up from Standby mode can be following only by an
  76:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        interrupt.
  77:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  78:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWR_EnableSleepOnExit() and HAL_PWR_DisableSleepOnExit() APIs to
  79:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        enable and disable the Cortex-M55 re-entry in Sleep mode after an
  80:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        interruption handling is over.
  81:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  82:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWR_EnableSEVOnPend() and HAL_PWR_DisableSEVOnPend() functions
ARM GAS  /tmp/ccWziJYR.s 			page 3


  83:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        to configure the Cortex-M55 to wake-up after any pending event / interrupt
  84:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        even if it's disabled or has insufficient priority to cause exception
  85:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        entry.
  86:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  87:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWR_WAKEUP_PIN_IRQHandler() function to handle all wake-up
  88:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        pins interrupts.
  89:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  90:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWR_ConfigAttributes() function to configure PWR item secure and
  91:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        privilege attributes and call HAL_PWR_GetConfigAttributes() function to
  92:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        get the attribute configuration for the selected item.
  93:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  94:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****      *** PWR HAL driver macros list ***
  95:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****      =============================================
  96:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****      [..]
  97:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        Below the list of most used macros in PWR HAL driver.
  98:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  99:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) __HAL_PWR_GET_FLAG()   : Get the PWR pending flags.
 100:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) __HAL_PWR_CLEAR_FLAG() : Clear the PWR pending flags.
 101:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 102:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   @endverbatim
 103:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   ******************************************************************************
 104:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 105:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 106:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /* Includes ------------------------------------------------------------------*/
 107:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #include "stm32n6xx_hal.h"
 108:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 109:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /** @addtogroup STM32N6xx_HAL_Driver
 110:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @{
 111:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 112:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 113:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /** @defgroup PWR PWR
 114:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief PWR HAL module driver
 115:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @{
 116:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 117:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 118:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #if defined (HAL_PWR_MODULE_ENABLED)
 119:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 120:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /* Private typedef -----------------------------------------------------------*/
 121:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /* Private define ------------------------------------------------------------*/
 122:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 123:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /** @defgroup PWR_Private_Defines PWR Private Defines
 124:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @{
 125:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 126:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 127:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /** @defgroup PWR_PVD_Mode_Mask PWR PVD Mode Mask
 128:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @{
 129:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 130:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #define PVD_MODE_IT                    (0x00010000U)                           /*!< Mask for interr
 131:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #define PVD_MODE_EVT                   (0x00020000U)                           /*!< Mask for event 
 132:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #define PVD_RISING_EDGE                (0x00000001U)                           /*!< Mask for rising
 133:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #define PVD_FALLING_EDGE               (0x00000002U)                           /*!< Mask for fallin
 134:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #define PVD_RISING_FALLING_EDGE        (0x00000003U)                           /*!< Mask for rising
 135:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 136:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @}
 137:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 138:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 139:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
ARM GAS  /tmp/ccWziJYR.s 			page 4


 140:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @}
 141:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 142:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 143:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /* Private macro -------------------------------------------------------------*/
 144:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /* Private variables ---------------------------------------------------------*/
 145:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /* Private function prototypes -----------------------------------------------*/
 146:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /* Exported functions --------------------------------------------------------*/
 147:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 148:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions PWR Exported Functions
 149:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @{
 150:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 151:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 152:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group1 Initialization and De-Initialization Functions
 153:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *  @brief   Initialization and de-Initialization functions
 154:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *
 155:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** @verbatim
 156:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****  ===============================================================================
 157:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****               ##### Initialization and De-Initialization Functions #####
 158:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****  ===============================================================================
 159:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 160:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       This section provides functions allowing to deinitialize power peripheral.
 161:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 162:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 163:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       After system reset, the backup domain (RCC Backup domain control register
 164:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       RCC_BDCR, RTC registers, TAMP registers, backup registers and backup SRAM)
 165:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       is protected against possible unwanted write accesses.
 166:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       The HAL_PWR_EnableBkUpAccess() function enables the access to the backup
 167:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       domain.
 168:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       The HAL_PWR_DisableBkUpAccess() function disables the access to the backup
 169:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       domain.
 170:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 171:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** @endverbatim
 172:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @{
 173:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 174:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 175:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 176:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Deinitialize the HAL PWR peripheral registers to their default reset
 177:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         values.
 178:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   This functionality is not available in this product.
 179:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         The prototype is kept just to maintain compatibility with other
 180:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         products.
 181:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 182:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 183:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_DeInit(void)
 184:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
  34              		.loc 1 184 1
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38              		@ link register save eliminated.
  39 0000 80B4     		push	{r7}
  40              		.cfi_def_cfa_offset 4
  41              		.cfi_offset 7, -4
  42 0002 00AF     		add	r7, sp, #0
  43              		.cfi_def_cfa_register 7
 185:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
  44              		.loc 1 185 1
ARM GAS  /tmp/ccWziJYR.s 			page 5


  45 0004 00BF     		nop
  46 0006 BD46     		mov	sp, r7
  47              		.cfi_def_cfa_register 13
  48              		@ sp needed
  49 0008 5DF8047B 		ldr	r7, [sp], #4
  50              		.cfi_restore 7
  51              		.cfi_def_cfa_offset 0
  52 000c 7047     		bx	lr
  53              		.cfi_endproc
  54              	.LFE835:
  56              		.section	.text.HAL_PWR_EnableBkUpAccess,"ax",%progbits
  57              		.align	1
  58              		.global	HAL_PWR_EnableBkUpAccess
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  63              	HAL_PWR_EnableBkUpAccess:
  64              	.LFB836:
 186:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 187:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 188:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Enable access to the backup domain (RCC Backup domain control
 189:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         register RCC_BDCR, RTC registers, TAMP registers, backup registers
 190:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         and backup SRAM).
 191:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   After a system reset, the backup domain is protected against
 192:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         possible unwanted write accesses.
 193:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 194:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 195:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_EnableBkUpAccess(void)
 196:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
  65              		.loc 1 196 1
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 1, uses_anonymous_args = 0
  69              		@ link register save eliminated.
  70 0000 80B4     		push	{r7}
  71              		.cfi_def_cfa_offset 4
  72              		.cfi_offset 7, -4
  73 0002 00AF     		add	r7, sp, #0
  74              		.cfi_def_cfa_register 7
 197:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   WRITE_REG(PWR->DBPCR, PWR_DBPCR_DBP);
  75              		.loc 1 197 3
  76 0004 034B     		ldr	r3, .L3
  77 0006 0122     		movs	r2, #1
  78 0008 DA62     		str	r2, [r3, #44]
 198:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
  79              		.loc 1 198 1
  80 000a 00BF     		nop
  81 000c BD46     		mov	sp, r7
  82              		.cfi_def_cfa_register 13
  83              		@ sp needed
  84 000e 5DF8047B 		ldr	r7, [sp], #4
  85              		.cfi_restore 7
  86              		.cfi_def_cfa_offset 0
  87 0012 7047     		bx	lr
  88              	.L4:
  89              		.align	2
  90              	.L3:
ARM GAS  /tmp/ccWziJYR.s 			page 6


  91 0014 00480256 		.word	1442990080
  92              		.cfi_endproc
  93              	.LFE836:
  95              		.section	.text.HAL_PWR_DisableBkUpAccess,"ax",%progbits
  96              		.align	1
  97              		.global	HAL_PWR_DisableBkUpAccess
  98              		.syntax unified
  99              		.thumb
 100              		.thumb_func
 102              	HAL_PWR_DisableBkUpAccess:
 103              	.LFB837:
 199:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 200:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 201:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Disable access to the backup domain (RCC Backup domain control
 202:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         register RCC_BDCR, RTC registers, TAMP registers, backup registers
 203:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         and backup SRAM).
 204:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 205:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 206:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_DisableBkUpAccess(void)
 207:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 104              		.loc 1 207 1
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 1, uses_anonymous_args = 0
 108              		@ link register save eliminated.
 109 0000 80B4     		push	{r7}
 110              		.cfi_def_cfa_offset 4
 111              		.cfi_offset 7, -4
 112 0002 00AF     		add	r7, sp, #0
 113              		.cfi_def_cfa_register 7
 208:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   CLEAR_REG(PWR->DBPCR);
 114              		.loc 1 208 3
 115 0004 034B     		ldr	r3, .L6
 116 0006 0022     		movs	r2, #0
 117 0008 DA62     		str	r2, [r3, #44]
 209:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 118              		.loc 1 209 1
 119 000a 00BF     		nop
 120 000c BD46     		mov	sp, r7
 121              		.cfi_def_cfa_register 13
 122              		@ sp needed
 123 000e 5DF8047B 		ldr	r7, [sp], #4
 124              		.cfi_restore 7
 125              		.cfi_def_cfa_offset 0
 126 0012 7047     		bx	lr
 127              	.L7:
 128              		.align	2
 129              	.L6:
 130 0014 00480256 		.word	1442990080
 131              		.cfi_endproc
 132              	.LFE837:
 134              		.section	.rodata
 135              		.align	2
 136              	.LC0:
 137 0000 53544D33 		.ascii	"STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/st"
 137      32437562 
 137      655F4657 
ARM GAS  /tmp/ccWziJYR.s 			page 7


 137      5F4E362F 
 137      44726976 
 138 0033 6D33326E 		.ascii	"m32n6xx_hal_pwr.c\000"
 138      3678785F 
 138      68616C5F 
 138      7077722E 
 138      6300
 139              		.section	.text.HAL_PWR_ConfigPVD,"ax",%progbits
 140              		.align	1
 141              		.global	HAL_PWR_ConfigPVD
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 146              	HAL_PWR_ConfigPVD:
 147              	.LFB838:
 210:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 211:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @}
 212:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 213:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 214:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 215:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group2 Peripheral Control Functions
 216:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *  @brief   Power Control functions
 217:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *
 218:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** @verbatim
 219:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****  ===============================================================================
 220:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                  ##### Peripheral Control Functions #####
 221:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****  ===============================================================================
 222:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 223:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       This section provides functions allowing to control power peripheral.
 224:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 225:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     *** PVD configuration ***
 226:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     =========================
 227:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 228:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) The PVD is used to monitor the VDD power supply by comparing it
 229:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           to the internal VREFINT.
 230:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 231:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) A PVDO flag is available to indicate if VDD is higher or lower
 232:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           than the PVD threshold. This event is internally connected to the EXTI
 233:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           line 66 to generate an interrupt if enabled.
 234:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           It is configurable through __HAL_PWR_PVD_EXTI_ENABLE_IT() macro.
 235:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 236:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) The PVD is stopped in STANDBY mode.
 237:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 238:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     *** Wake-up pin configuration ***
 239:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     =================================
 240:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 241:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) Wake-up pin is used to wake up the system from STANDBY mode.
 242:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           The pin pull is configurable through the WKUPEPR register to be in
 243:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           No-pull, Pull-up and Pull-down.
 244:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           The pin polarity is configurable through the WKUPEPR register to be
 245:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           active on rising or falling edges.
 246:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 247:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) There are up to four Wake-up pin in the STM32N6 devices family.
 248:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 249:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     *** Low Power modes configuration ***
 250:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     =====================================
 251:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
ARM GAS  /tmp/ccWziJYR.s 			page 8


 252:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****      The device present 3 principles low-power modes :
 253:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) SLEEP mode   : Cortex-M55 is stopped and all PWR domains are remaining
 254:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                          active (Powered and Clocked).
 255:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 256:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) STOP mode    : Cortex-M55 is stopped, clocks are stopped and the
 257:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                          regulator is running. The Main regulator or the LP
 258:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                          regulator could be selected.
 259:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 260:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) STANDBY mode : All PWR domains enter DSTANDBY mode and the VCORE
 261:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                          supply regulator is powered off.
 262:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 263:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    *** SLEEP mode ***
 264:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    ==================
 265:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 266:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) Entry:
 267:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****         The SLEEP mode is entered by using the HAL_PWR_EnterSLEEPMode(Regulator,
 268:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****         SLEEPEntry) function.
 269:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 270:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction.
 271:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction.
 272:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR: enter SLEEP mode with WFE instruction
 273:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                                                 and no clear of pending event.
 274:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 275:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       -@@- The Regulator parameter is not used for the STM32N6 family
 276:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****               and is kept as parameter just to maintain compatibility with the
 277:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****               lower power families.
 278:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 279:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) Exit:
 280:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****         Any peripheral interrupt acknowledged by the nested vectored interrupt
 281:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****         controller (NVIC) can wake up the device from SLEEP mode.
 282:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 283:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    *** STOP mode ***
 284:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    =================
 285:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 286:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       In system STOP mode, the CPU clock is stopped. All CPU subsystem peripheral
 287:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       clocks are stopped too.
 288:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       The voltage regulator can be configured either in normal or low-power mode.
 289:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       To minimize the consumption in STOP mode, FLASH can be powered off before
 290:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       entering the STOP mode using the HAL_PWREx_EnableFlashPowerDown() function.
 291:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       It can be switched on again by software after exiting the STOP mode using
 292:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       the HAL_PWREx_DisableFlashPowerDown() function.
 293:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) Entry:
 294:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****          The STOP mode is entered using the HAL_PWR_EnterSTOPMode(Regulator,
 295:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****          STOPEntry) function with:
 296:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****          (++) Regulator:
 297:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           (+++) PWR_MAINREGULATOR_ON: Main regulator ON.
 298:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                 This parameter is not used for the STM32N6 family and is kept as parameter
 299:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                 just to maintain compatibility with the lower power families.
 300:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****          (++) STOPEntry:
 301:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           (+++) PWR_STOPENTRY_WFI: enter STOP mode with WFI instruction.
 302:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           (+++) PWR_STOPENTRY_WFE: enter STOP mode with WFE instruction.
 303:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           (+++) PWR_STOPENTRY_WFE_NO_EVT_CLEAR: enter STOP mode with WFE instruction
 304:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                                                 and no clear of pending event.
 305:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 306:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) Exit:
 307:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****          Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 308:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
ARM GAS  /tmp/ccWziJYR.s 			page 9


 309:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    *** STANDBY mode ***
 310:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    ====================
 311:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 312:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     (+)
 313:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       The system STANDBY mode allows to achieve the lowest power consumption.
 314:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       It is based on the Cortex-M55 deep SLEEP mode, with the voltage regulator
 315:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       disabled. The system is consequently powered off. The PLL, the HSI
 316:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       oscillator and the HSE oscillator are also switched off. SRAM and register
 317:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       contents are lost except for the RTC registers, RTC backup registers,
 318:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       backup SRAM and standby circuitry.
 319:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 320:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 321:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       The voltage regulator is OFF.
 322:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 323:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (++) Entry:
 324:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****         (+++) The STANDBY mode is entered using the HAL_PWR_EnterSTANDBYMode()
 325:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****               function.
 326:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 327:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (++) Exit:
 328:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****         (+++) WKUP pin rising or falling edge, RTC alarm (Alarm A and Alarm B),
 329:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****               RTC wakeup, tamper event, time stamp event, external reset in NRST
 330:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****               pin, IWDG reset.
 331:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 332:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    *** Auto-wakeup (AWU) from low-power mode ***
 333:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    =============================================
 334:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 335:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****      (+) The MCU can be woken up from low-power mode by an RTC Alarm event, an
 336:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****          RTC Wakeup event, a tamper event or a time-stamp event, without
 337:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****          depending on an external interrupt (Auto-wakeup mode).
 338:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 339:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****      (+) RTC auto-wakeup (AWU) from the STOP and STANDBY modes
 340:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 341:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        (++) To wake up from the STOP mode with an RTC alarm event, it is
 342:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             necessary to configure the RTC to generate the RTC alarm using the
 343:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             HAL_RTC_SetAlarm_IT() function.
 344:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 345:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        (++) To wake up from the STOP mode with an RTC Tamper or time stamp event,
 346:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             it is necessary to configure the RTC to detect the tamper or time
 347:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             stamp event using the HAL_RTCEx_SetTimeStamp_IT() or
 348:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             HAL_RTCEx_SetTamper_IT() functions.
 349:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 350:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        (++) To wake up from the STOP mode with an RTC WakeUp event, it is
 351:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             necessary to configure the RTC to generate the RTC WakeUp event
 352:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             using the HAL_RTCEx_SetWakeUpTimer_IT() function.
 353:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 354:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** @endverbatim
 355:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @{
 356:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 357:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 358:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 359:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Configure the voltage threshold detected by the Programmed Voltage
 360:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         Detector (PVD).
 361:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
 362:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                      PVD configuration information (EventMode).
 363:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 364:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 365:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_ConfigPVD(const PWR_PVDTypeDef *pConfigPVD)
ARM GAS  /tmp/ccWziJYR.s 			page 10


 366:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 148              		.loc 1 366 1
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 8
 151              		@ frame_needed = 1, uses_anonymous_args = 0
 152 0000 80B5     		push	{r7, lr}
 153              		.cfi_def_cfa_offset 8
 154              		.cfi_offset 7, -8
 155              		.cfi_offset 14, -4
 156 0002 82B0     		sub	sp, sp, #8
 157              		.cfi_def_cfa_offset 16
 158 0004 00AF     		add	r7, sp, #0
 159              		.cfi_def_cfa_register 7
 160 0006 7860     		str	r0, [r7, #4]
 367:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 368:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));
 161              		.loc 1 368 3
 162 0008 7B68     		ldr	r3, [r7, #4]
 163 000a 1B68     		ldr	r3, [r3]
 164 000c B3F1011F 		cmp	r3, #65537
 165 0010 21D0     		beq	.L9
 166              		.loc 1 368 3 is_stmt 0 discriminator 1
 167 0012 7B68     		ldr	r3, [r7, #4]
 168 0014 1B68     		ldr	r3, [r3]
 169 0016 3A4A     		ldr	r2, .L15
 170 0018 9342     		cmp	r3, r2
 171 001a 1CD0     		beq	.L9
 172              		.loc 1 368 3 discriminator 2
 173 001c 7B68     		ldr	r3, [r7, #4]
 174 001e 1B68     		ldr	r3, [r3]
 175 0020 384A     		ldr	r2, .L15+4
 176 0022 9342     		cmp	r3, r2
 177 0024 17D0     		beq	.L9
 178              		.loc 1 368 3 discriminator 3
 179 0026 7B68     		ldr	r3, [r7, #4]
 180 0028 1B68     		ldr	r3, [r3]
 181 002a 374A     		ldr	r2, .L15+8
 182 002c 9342     		cmp	r3, r2
 183 002e 12D0     		beq	.L9
 184              		.loc 1 368 3 discriminator 4
 185 0030 7B68     		ldr	r3, [r7, #4]
 186 0032 1B68     		ldr	r3, [r3]
 187 0034 B3F1021F 		cmp	r3, #131074
 188 0038 0DD0     		beq	.L9
 189              		.loc 1 368 3 discriminator 5
 190 003a 7B68     		ldr	r3, [r7, #4]
 191 003c 1B68     		ldr	r3, [r3]
 192 003e 334A     		ldr	r2, .L15+12
 193 0040 9342     		cmp	r3, r2
 194 0042 08D0     		beq	.L9
 195              		.loc 1 368 3 discriminator 6
 196 0044 7B68     		ldr	r3, [r7, #4]
 197 0046 1B68     		ldr	r3, [r3]
 198 0048 002B     		cmp	r3, #0
 199 004a 04D0     		beq	.L9
 200              		.loc 1 368 3 discriminator 7
 201 004c 4FF4B871 		mov	r1, #368
ARM GAS  /tmp/ccWziJYR.s 			page 11


 202 0050 2F48     		ldr	r0, .L15+16
 203 0052 FFF7FEFF 		bl	assert_failed
 204              	.L9:
 369:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 370:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Disable PVD Event/Interrupt */
 371:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 205              		.loc 1 371 3 is_stmt 1
 206 0056 2F4B     		ldr	r3, .L15+20
 207 0058 D3F8A430 		ldr	r3, [r3, #164]
 208 005c 2D4A     		ldr	r2, .L15+20
 209 005e 23F00403 		bic	r3, r3, #4
 210 0062 C2F8A430 		str	r3, [r2, #164]
 372:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_IT();
 211              		.loc 1 372 3
 212 0066 2B4B     		ldr	r3, .L15+20
 213 0068 D3F8A030 		ldr	r3, [r3, #160]
 214 006c 294A     		ldr	r2, .L15+20
 215 006e 23F00403 		bic	r3, r3, #4
 216 0072 C2F8A030 		str	r3, [r2, #160]
 373:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 217              		.loc 1 373 3
 218 0076 274B     		ldr	r3, .L15+20
 219 0078 1B6C     		ldr	r3, [r3, #64]
 220 007a 264A     		ldr	r2, .L15+20
 221 007c 23F00403 		bic	r3, r3, #4
 222 0080 1364     		str	r3, [r2, #64]
 374:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 223              		.loc 1 374 3
 224 0082 244B     		ldr	r3, .L15+20
 225 0084 5B6C     		ldr	r3, [r3, #68]
 226 0086 234A     		ldr	r2, .L15+20
 227 0088 23F00403 		bic	r3, r3, #4
 228 008c 5364     		str	r3, [r2, #68]
 375:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 376:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Configure the PVD in interrupt mode */
 377:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 229              		.loc 1 377 18
 230 008e 7B68     		ldr	r3, [r7, #4]
 231 0090 1B68     		ldr	r3, [r3]
 232              		.loc 1 377 25
 233 0092 03F48033 		and	r3, r3, #65536
 234              		.loc 1 377 6
 235 0096 002B     		cmp	r3, #0
 236 0098 07D0     		beq	.L10
 378:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 379:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_IT();
 237              		.loc 1 379 5
 238 009a 1E4B     		ldr	r3, .L15+20
 239 009c D3F8A030 		ldr	r3, [r3, #160]
 240 00a0 1C4A     		ldr	r2, .L15+20
 241 00a2 43F00403 		orr	r3, r3, #4
 242 00a6 C2F8A030 		str	r3, [r2, #160]
 243              	.L10:
 380:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 381:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 382:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Configure the PVD in event mode */
 383:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
ARM GAS  /tmp/ccWziJYR.s 			page 12


 244              		.loc 1 383 18
 245 00aa 7B68     		ldr	r3, [r7, #4]
 246 00ac 1B68     		ldr	r3, [r3]
 247              		.loc 1 383 25
 248 00ae 03F40033 		and	r3, r3, #131072
 249              		.loc 1 383 6
 250 00b2 002B     		cmp	r3, #0
 251 00b4 07D0     		beq	.L11
 384:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 385:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 252              		.loc 1 385 5
 253 00b6 174B     		ldr	r3, .L15+20
 254 00b8 D3F8A430 		ldr	r3, [r3, #164]
 255 00bc 154A     		ldr	r2, .L15+20
 256 00be 43F00403 		orr	r3, r3, #4
 257 00c2 C2F8A430 		str	r3, [r2, #164]
 258              	.L11:
 386:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 387:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 388:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Rising edge configuration */
 389:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 259              		.loc 1 389 18
 260 00c6 7B68     		ldr	r3, [r7, #4]
 261 00c8 1B68     		ldr	r3, [r3]
 262              		.loc 1 389 25
 263 00ca 03F00103 		and	r3, r3, #1
 264              		.loc 1 389 6
 265 00ce 002B     		cmp	r3, #0
 266 00d0 05D0     		beq	.L12
 390:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 391:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 267              		.loc 1 391 5
 268 00d2 104B     		ldr	r3, .L15+20
 269 00d4 1B6C     		ldr	r3, [r3, #64]
 270 00d6 0F4A     		ldr	r2, .L15+20
 271 00d8 43F00403 		orr	r3, r3, #4
 272 00dc 1364     		str	r3, [r2, #64]
 273              	.L12:
 392:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 393:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 394:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Falling edge configuration */
 395:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 274              		.loc 1 395 18
 275 00de 7B68     		ldr	r3, [r7, #4]
 276 00e0 1B68     		ldr	r3, [r3]
 277              		.loc 1 395 25
 278 00e2 03F00203 		and	r3, r3, #2
 279              		.loc 1 395 6
 280 00e6 002B     		cmp	r3, #0
 281 00e8 05D0     		beq	.L14
 396:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 397:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 282              		.loc 1 397 5
 283 00ea 0A4B     		ldr	r3, .L15+20
 284 00ec 5B6C     		ldr	r3, [r3, #68]
 285 00ee 094A     		ldr	r2, .L15+20
 286 00f0 43F00403 		orr	r3, r3, #4
ARM GAS  /tmp/ccWziJYR.s 			page 13


 287 00f4 5364     		str	r3, [r2, #68]
 288              	.L14:
 398:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 399:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 289              		.loc 1 399 1
 290 00f6 00BF     		nop
 291 00f8 0837     		adds	r7, r7, #8
 292              		.cfi_def_cfa_offset 8
 293 00fa BD46     		mov	sp, r7
 294              		.cfi_def_cfa_register 13
 295              		@ sp needed
 296 00fc 80BD     		pop	{r7, pc}
 297              	.L16:
 298 00fe 00BF     		.align	2
 299              	.L15:
 300 0100 02000100 		.word	65538
 301 0104 03000100 		.word	65539
 302 0108 01000200 		.word	131073
 303 010c 03000200 		.word	131075
 304 0110 00000000 		.word	.LC0
 305 0114 00500256 		.word	1442992128
 306              		.cfi_endproc
 307              	.LFE838:
 309              		.section	.text.HAL_PWR_EnablePVD,"ax",%progbits
 310              		.align	1
 311              		.global	HAL_PWR_EnablePVD
 312              		.syntax unified
 313              		.thumb
 314              		.thumb_func
 316              	HAL_PWR_EnablePVD:
 317              	.LFB839:
 400:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 401:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 402:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Enable the programmable voltage detector (PVD).
 403:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 404:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 405:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_EnablePVD(void)
 406:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 318              		.loc 1 406 1
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 1, uses_anonymous_args = 0
 322              		@ link register save eliminated.
 323 0000 80B4     		push	{r7}
 324              		.cfi_def_cfa_offset 4
 325              		.cfi_offset 7, -4
 326 0002 00AF     		add	r7, sp, #0
 327              		.cfi_def_cfa_register 7
 407:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   SET_BIT(PWR->CR2, PWR_CR2_PVDEN);
 328              		.loc 1 407 3
 329 0004 054B     		ldr	r3, .L18
 330 0006 5B68     		ldr	r3, [r3, #4]
 331 0008 044A     		ldr	r2, .L18
 332 000a 43F00103 		orr	r3, r3, #1
 333 000e 5360     		str	r3, [r2, #4]
 408:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 334              		.loc 1 408 1
ARM GAS  /tmp/ccWziJYR.s 			page 14


 335 0010 00BF     		nop
 336 0012 BD46     		mov	sp, r7
 337              		.cfi_def_cfa_register 13
 338              		@ sp needed
 339 0014 5DF8047B 		ldr	r7, [sp], #4
 340              		.cfi_restore 7
 341              		.cfi_def_cfa_offset 0
 342 0018 7047     		bx	lr
 343              	.L19:
 344 001a 00BF     		.align	2
 345              	.L18:
 346 001c 00480256 		.word	1442990080
 347              		.cfi_endproc
 348              	.LFE839:
 350              		.section	.text.HAL_PWR_DisablePVD,"ax",%progbits
 351              		.align	1
 352              		.global	HAL_PWR_DisablePVD
 353              		.syntax unified
 354              		.thumb
 355              		.thumb_func
 357              	HAL_PWR_DisablePVD:
 358              	.LFB840:
 409:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 410:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 411:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Disable the programmable voltage detector (PVD).
 412:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 413:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 414:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_DisablePVD(void)
 415:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 359              		.loc 1 415 1
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 0
 362              		@ frame_needed = 1, uses_anonymous_args = 0
 363              		@ link register save eliminated.
 364 0000 80B4     		push	{r7}
 365              		.cfi_def_cfa_offset 4
 366              		.cfi_offset 7, -4
 367 0002 00AF     		add	r7, sp, #0
 368              		.cfi_def_cfa_register 7
 416:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   CLEAR_BIT(PWR->CR2, PWR_CR2_PVDEN);
 369              		.loc 1 416 3
 370 0004 054B     		ldr	r3, .L21
 371 0006 5B68     		ldr	r3, [r3, #4]
 372 0008 044A     		ldr	r2, .L21
 373 000a 23F00103 		bic	r3, r3, #1
 374 000e 5360     		str	r3, [r2, #4]
 417:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 375              		.loc 1 417 1
 376 0010 00BF     		nop
 377 0012 BD46     		mov	sp, r7
 378              		.cfi_def_cfa_register 13
 379              		@ sp needed
 380 0014 5DF8047B 		ldr	r7, [sp], #4
 381              		.cfi_restore 7
 382              		.cfi_def_cfa_offset 0
 383 0018 7047     		bx	lr
 384              	.L22:
ARM GAS  /tmp/ccWziJYR.s 			page 15


 385 001a 00BF     		.align	2
 386              	.L21:
 387 001c 00480256 		.word	1442990080
 388              		.cfi_endproc
 389              	.LFE840:
 391              		.section	.text.HAL_PWR_EnableWakeUpPin,"ax",%progbits
 392              		.align	1
 393              		.global	HAL_PWR_EnableWakeUpPin
 394              		.syntax unified
 395              		.thumb
 396              		.thumb_func
 398              	HAL_PWR_EnableWakeUpPin:
 399              	.LFB841:
 418:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 419:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 420:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Enable the WakeUp PINx functionality.
 421:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  WakeUpPinPolarity : Specifies which Wake-Up pin to enable.
 422:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          This parameter can be one of the following legacy values, which
 423:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          sets the default (rising edge):
 424:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_PIN1,
 425:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN2,
 426:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN3,
 427:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN4.
 428:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          or one of the following values where the user can explicitly states
 429:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          the enabled pin and the chosen polarity:
 430:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_PIN1_HIGH, PWR_WAKEUP_PIN1_LOW,
 431:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN2_HIGH, PWR_WAKEUP_PIN2_LOW,
 432:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN3_HIGH, PWR_WAKEUP_PIN3_LOW,
 433:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN4_HIGH, PWR_WAKEUP_PIN4_LOW.
 434:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
 435:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 436:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 437:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
 438:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 400              		.loc 1 438 1
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 8
 403              		@ frame_needed = 1, uses_anonymous_args = 0
 404 0000 80B5     		push	{r7, lr}
 405              		.cfi_def_cfa_offset 8
 406              		.cfi_offset 7, -8
 407              		.cfi_offset 14, -4
 408 0002 82B0     		sub	sp, sp, #8
 409              		.cfi_def_cfa_offset 16
 410 0004 00AF     		add	r7, sp, #0
 411              		.cfi_def_cfa_register 7
 412 0006 7860     		str	r0, [r7, #4]
 439:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 440:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));
 413              		.loc 1 440 3
 414 0008 7B68     		ldr	r3, [r7, #4]
 415 000a 012B     		cmp	r3, #1
 416 000c 2DD0     		beq	.L24
 417              		.loc 1 440 3 is_stmt 0 discriminator 1
 418 000e 7B68     		ldr	r3, [r7, #4]
 419 0010 022B     		cmp	r3, #2
 420 0012 2AD0     		beq	.L24
ARM GAS  /tmp/ccWziJYR.s 			page 16


 421              		.loc 1 440 3 discriminator 2
 422 0014 7B68     		ldr	r3, [r7, #4]
 423 0016 042B     		cmp	r3, #4
 424 0018 27D0     		beq	.L24
 425              		.loc 1 440 3 discriminator 3
 426 001a 7B68     		ldr	r3, [r7, #4]
 427 001c 082B     		cmp	r3, #8
 428 001e 24D0     		beq	.L24
 429              		.loc 1 440 3 discriminator 4
 430 0020 7B68     		ldr	r3, [r7, #4]
 431 0022 012B     		cmp	r3, #1
 432 0024 21D0     		beq	.L24
 433              		.loc 1 440 3 discriminator 5
 434 0026 7B68     		ldr	r3, [r7, #4]
 435 0028 022B     		cmp	r3, #2
 436 002a 1ED0     		beq	.L24
 437              		.loc 1 440 3 discriminator 6
 438 002c 7B68     		ldr	r3, [r7, #4]
 439 002e 042B     		cmp	r3, #4
 440 0030 1BD0     		beq	.L24
 441              		.loc 1 440 3 discriminator 7
 442 0032 7B68     		ldr	r3, [r7, #4]
 443 0034 082B     		cmp	r3, #8
 444 0036 18D0     		beq	.L24
 445              		.loc 1 440 3 discriminator 8
 446 0038 7B68     		ldr	r3, [r7, #4]
 447 003a 40F20112 		movw	r2, #257
 448 003e 9342     		cmp	r3, r2
 449 0040 13D0     		beq	.L24
 450              		.loc 1 440 3 discriminator 9
 451 0042 7B68     		ldr	r3, [r7, #4]
 452 0044 40F20222 		movw	r2, #514
 453 0048 9342     		cmp	r3, r2
 454 004a 0ED0     		beq	.L24
 455              		.loc 1 440 3 discriminator 10
 456 004c 7B68     		ldr	r3, [r7, #4]
 457 004e 40F20442 		movw	r2, #1028
 458 0052 9342     		cmp	r3, r2
 459 0054 09D0     		beq	.L24
 460              		.loc 1 440 3 discriminator 11
 461 0056 7B68     		ldr	r3, [r7, #4]
 462 0058 40F60802 		movw	r2, #2056
 463 005c 9342     		cmp	r3, r2
 464 005e 04D0     		beq	.L24
 465              		.loc 1 440 3 discriminator 12
 466 0060 4FF4DC71 		mov	r1, #440
 467 0064 0648     		ldr	r0, .L25
 468 0066 FFF7FEFF 		bl	assert_failed
 469              	.L24:
 441:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 442:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /*
 443:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****      Enable and Specify the Wake-Up pin polarity and the pull configuration
 444:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****      for the event detection (rising or falling edge).
 445:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 446:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   SET_BIT(PWR->WKUPEPR, WakeUpPinPolarity);
 470              		.loc 1 446 3 is_stmt 1
 471 006a 064B     		ldr	r3, .L25+4
ARM GAS  /tmp/ccWziJYR.s 			page 17


 472 006c 9A6D     		ldr	r2, [r3, #88]
 473 006e 0549     		ldr	r1, .L25+4
 474 0070 7B68     		ldr	r3, [r7, #4]
 475 0072 1343     		orrs	r3, r3, r2
 476 0074 8B65     		str	r3, [r1, #88]
 447:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 477              		.loc 1 447 1
 478 0076 00BF     		nop
 479 0078 0837     		adds	r7, r7, #8
 480              		.cfi_def_cfa_offset 8
 481 007a BD46     		mov	sp, r7
 482              		.cfi_def_cfa_register 13
 483              		@ sp needed
 484 007c 80BD     		pop	{r7, pc}
 485              	.L26:
 486 007e 00BF     		.align	2
 487              	.L25:
 488 0080 00000000 		.word	.LC0
 489 0084 00480256 		.word	1442990080
 490              		.cfi_endproc
 491              	.LFE841:
 493              		.section	.text.HAL_PWR_DisableWakeUpPin,"ax",%progbits
 494              		.align	1
 495              		.global	HAL_PWR_DisableWakeUpPin
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 500              	HAL_PWR_DisableWakeUpPin:
 501              	.LFB842:
 448:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 449:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 450:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Disable the WakeUp PINx functionality.
 451:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  WakeUpPinx : Specifies the Power Wake-Up pin to disable.
 452:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 453:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_PIN1,
 454:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN2,
 455:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN3,
 456:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN4,
 457:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN1_HIGH, PWR_WAKEUP_PIN1_LOW,
 458:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN2_HIGH, PWR_WAKEUP_PIN2_LOW,
 459:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN3_HIGH, PWR_WAKEUP_PIN3_LOW,
 460:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN4_HIGH, PWR_WAKEUP_PIN4_LOW.
 461:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 462:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 463:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
 464:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 502              		.loc 1 464 1
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 8
 505              		@ frame_needed = 1, uses_anonymous_args = 0
 506 0000 80B5     		push	{r7, lr}
 507              		.cfi_def_cfa_offset 8
 508              		.cfi_offset 7, -8
 509              		.cfi_offset 14, -4
 510 0002 82B0     		sub	sp, sp, #8
 511              		.cfi_def_cfa_offset 16
 512 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccWziJYR.s 			page 18


 513              		.cfi_def_cfa_register 7
 514 0006 7860     		str	r0, [r7, #4]
 465:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 466:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 515              		.loc 1 466 3
 516 0008 7B68     		ldr	r3, [r7, #4]
 517 000a 012B     		cmp	r3, #1
 518 000c 2DD0     		beq	.L28
 519              		.loc 1 466 3 is_stmt 0 discriminator 1
 520 000e 7B68     		ldr	r3, [r7, #4]
 521 0010 022B     		cmp	r3, #2
 522 0012 2AD0     		beq	.L28
 523              		.loc 1 466 3 discriminator 2
 524 0014 7B68     		ldr	r3, [r7, #4]
 525 0016 042B     		cmp	r3, #4
 526 0018 27D0     		beq	.L28
 527              		.loc 1 466 3 discriminator 3
 528 001a 7B68     		ldr	r3, [r7, #4]
 529 001c 082B     		cmp	r3, #8
 530 001e 24D0     		beq	.L28
 531              		.loc 1 466 3 discriminator 4
 532 0020 7B68     		ldr	r3, [r7, #4]
 533 0022 012B     		cmp	r3, #1
 534 0024 21D0     		beq	.L28
 535              		.loc 1 466 3 discriminator 5
 536 0026 7B68     		ldr	r3, [r7, #4]
 537 0028 022B     		cmp	r3, #2
 538 002a 1ED0     		beq	.L28
 539              		.loc 1 466 3 discriminator 6
 540 002c 7B68     		ldr	r3, [r7, #4]
 541 002e 042B     		cmp	r3, #4
 542 0030 1BD0     		beq	.L28
 543              		.loc 1 466 3 discriminator 7
 544 0032 7B68     		ldr	r3, [r7, #4]
 545 0034 082B     		cmp	r3, #8
 546 0036 18D0     		beq	.L28
 547              		.loc 1 466 3 discriminator 8
 548 0038 7B68     		ldr	r3, [r7, #4]
 549 003a 40F20112 		movw	r2, #257
 550 003e 9342     		cmp	r3, r2
 551 0040 13D0     		beq	.L28
 552              		.loc 1 466 3 discriminator 9
 553 0042 7B68     		ldr	r3, [r7, #4]
 554 0044 40F20222 		movw	r2, #514
 555 0048 9342     		cmp	r3, r2
 556 004a 0ED0     		beq	.L28
 557              		.loc 1 466 3 discriminator 10
 558 004c 7B68     		ldr	r3, [r7, #4]
 559 004e 40F20442 		movw	r2, #1028
 560 0052 9342     		cmp	r3, r2
 561 0054 09D0     		beq	.L28
 562              		.loc 1 466 3 discriminator 11
 563 0056 7B68     		ldr	r3, [r7, #4]
 564 0058 40F60802 		movw	r2, #2056
 565 005c 9342     		cmp	r3, r2
 566 005e 04D0     		beq	.L28
 567              		.loc 1 466 3 discriminator 12
ARM GAS  /tmp/ccWziJYR.s 			page 19


 568 0060 4FF4E971 		mov	r1, #466
 569 0064 0748     		ldr	r0, .L29
 570 0066 FFF7FEFF 		bl	assert_failed
 571              	.L28:
 467:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 468:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Disable the wake up pin selected */
 469:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   CLEAR_BIT(PWR->WKUPEPR, (PWR_WKUPEPR_WKUPEN & WakeUpPinx));
 572              		.loc 1 469 3 is_stmt 1
 573 006a 074B     		ldr	r3, .L29+4
 574 006c 9A6D     		ldr	r2, [r3, #88]
 575 006e 7B68     		ldr	r3, [r7, #4]
 576 0070 03F00F03 		and	r3, r3, #15
 577 0074 DB43     		mvns	r3, r3
 578 0076 0449     		ldr	r1, .L29+4
 579 0078 1340     		ands	r3, r3, r2
 580 007a 8B65     		str	r3, [r1, #88]
 470:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 581              		.loc 1 470 1
 582 007c 00BF     		nop
 583 007e 0837     		adds	r7, r7, #8
 584              		.cfi_def_cfa_offset 8
 585 0080 BD46     		mov	sp, r7
 586              		.cfi_def_cfa_register 13
 587              		@ sp needed
 588 0082 80BD     		pop	{r7, pc}
 589              	.L30:
 590              		.align	2
 591              	.L29:
 592 0084 00000000 		.word	.LC0
 593 0088 00480256 		.word	1442990080
 594              		.cfi_endproc
 595              	.LFE842:
 597              		.section	.text.HAL_PWR_GetWakeupFlag,"ax",%progbits
 598              		.align	1
 599              		.global	HAL_PWR_GetWakeupFlag
 600              		.syntax unified
 601              		.thumb
 602              		.thumb_func
 604              	HAL_PWR_GetWakeupFlag:
 605              	.LFB843:
 471:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 472:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 473:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief Get the Wake-Up Pin pending flags.
 474:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  WakeUpFlag : Specifies the Wake-Up PIN flag to be checked.
 475:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 476:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_FLAG1    : Get wakeup event received from PA0.
 477:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_FLAG2    : Get wakeup event received from PA2.
 478:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_FLAG3    : Get wakeup event received from PC13.
 479:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_FLAG4    : Get wakeup event received from PD2.
 480:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_FLAG_ALL : Get Wakeup event received from all
 481:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                                       wake up pins.
 482:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval The Wake-Up pin flag.
 483:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 484:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** uint32_t HAL_PWR_GetWakeupFlag(uint32_t WakeUpFlag)
 485:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 606              		.loc 1 485 1
 607              		.cfi_startproc
ARM GAS  /tmp/ccWziJYR.s 			page 20


 608              		@ args = 0, pretend = 0, frame = 8
 609              		@ frame_needed = 1, uses_anonymous_args = 0
 610 0000 80B5     		push	{r7, lr}
 611              		.cfi_def_cfa_offset 8
 612              		.cfi_offset 7, -8
 613              		.cfi_offset 14, -4
 614 0002 82B0     		sub	sp, sp, #8
 615              		.cfi_def_cfa_offset 16
 616 0004 00AF     		add	r7, sp, #0
 617              		.cfi_def_cfa_register 7
 618 0006 7860     		str	r0, [r7, #4]
 486:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 487:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_FLAG(WakeUpFlag));
 619              		.loc 1 487 3
 620 0008 7B68     		ldr	r3, [r7, #4]
 621 000a 012B     		cmp	r3, #1
 622 000c 10D0     		beq	.L32
 623              		.loc 1 487 3 is_stmt 0 discriminator 1
 624 000e 7B68     		ldr	r3, [r7, #4]
 625 0010 022B     		cmp	r3, #2
 626 0012 0DD0     		beq	.L32
 627              		.loc 1 487 3 discriminator 2
 628 0014 7B68     		ldr	r3, [r7, #4]
 629 0016 042B     		cmp	r3, #4
 630 0018 0AD0     		beq	.L32
 631              		.loc 1 487 3 discriminator 3
 632 001a 7B68     		ldr	r3, [r7, #4]
 633 001c 082B     		cmp	r3, #8
 634 001e 07D0     		beq	.L32
 635              		.loc 1 487 3 discriminator 4
 636 0020 7B68     		ldr	r3, [r7, #4]
 637 0022 0F2B     		cmp	r3, #15
 638 0024 04D0     		beq	.L32
 639              		.loc 1 487 3 discriminator 5
 640 0026 40F2E711 		movw	r1, #487
 641 002a 0548     		ldr	r0, .L34
 642 002c FFF7FEFF 		bl	assert_failed
 643              	.L32:
 488:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 489:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Return the wake up pin flag */
 490:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   return (PWR->WKUPSR & WakeUpFlag);
 644              		.loc 1 490 14 is_stmt 1
 645 0030 044B     		ldr	r3, .L34+4
 646 0032 5A6D     		ldr	r2, [r3, #84]
 647              		.loc 1 490 23
 648 0034 7B68     		ldr	r3, [r7, #4]
 649 0036 1340     		ands	r3, r3, r2
 491:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 650              		.loc 1 491 1
 651 0038 1846     		mov	r0, r3
 652 003a 0837     		adds	r7, r7, #8
 653              		.cfi_def_cfa_offset 8
 654 003c BD46     		mov	sp, r7
 655              		.cfi_def_cfa_register 13
 656              		@ sp needed
 657 003e 80BD     		pop	{r7, pc}
 658              	.L35:
ARM GAS  /tmp/ccWziJYR.s 			page 21


 659              		.align	2
 660              	.L34:
 661 0040 00000000 		.word	.LC0
 662 0044 00480256 		.word	1442990080
 663              		.cfi_endproc
 664              	.LFE843:
 666              		.section	.text.HAL_PWR_ClearWakeupFlag,"ax",%progbits
 667              		.align	1
 668              		.global	HAL_PWR_ClearWakeupFlag
 669              		.syntax unified
 670              		.thumb
 671              		.thumb_func
 673              	HAL_PWR_ClearWakeupFlag:
 674              	.LFB844:
 492:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 493:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 494:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief Clear the Wake-Up pin pending flag.
 495:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  WakeUpFlag: Specifies the Wake-Up PIN flag to clear.
 496:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 497:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_FLAG1    : Clear the wakeup event received from PA0.
 498:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_FLAG2    : Clear the wakeup event received from PA2.
 499:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_FLAG3    : Clear the wakeup event received from PC13.
 500:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_FLAG4    : Clear the wakeup event received from PD2.
 501:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_FLAG_ALL : Clear the wakeup events received from all
 502:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                                       wake up pins.
 503:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval HAL status.
 504:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 505:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** HAL_StatusTypeDef HAL_PWR_ClearWakeupFlag(uint32_t WakeUpFlag)
 506:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 675              		.loc 1 506 1
 676              		.cfi_startproc
 677              		@ args = 0, pretend = 0, frame = 8
 678              		@ frame_needed = 1, uses_anonymous_args = 0
 679 0000 80B5     		push	{r7, lr}
 680              		.cfi_def_cfa_offset 8
 681              		.cfi_offset 7, -8
 682              		.cfi_offset 14, -4
 683 0002 82B0     		sub	sp, sp, #8
 684              		.cfi_def_cfa_offset 16
 685 0004 00AF     		add	r7, sp, #0
 686              		.cfi_def_cfa_register 7
 687 0006 7860     		str	r0, [r7, #4]
 507:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameter */
 508:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_FLAG(WakeUpFlag));
 688              		.loc 1 508 3
 689 0008 7B68     		ldr	r3, [r7, #4]
 690 000a 012B     		cmp	r3, #1
 691 000c 10D0     		beq	.L37
 692              		.loc 1 508 3 is_stmt 0 discriminator 1
 693 000e 7B68     		ldr	r3, [r7, #4]
 694 0010 022B     		cmp	r3, #2
 695 0012 0DD0     		beq	.L37
 696              		.loc 1 508 3 discriminator 2
 697 0014 7B68     		ldr	r3, [r7, #4]
 698 0016 042B     		cmp	r3, #4
 699 0018 0AD0     		beq	.L37
 700              		.loc 1 508 3 discriminator 3
ARM GAS  /tmp/ccWziJYR.s 			page 22


 701 001a 7B68     		ldr	r3, [r7, #4]
 702 001c 082B     		cmp	r3, #8
 703 001e 07D0     		beq	.L37
 704              		.loc 1 508 3 discriminator 4
 705 0020 7B68     		ldr	r3, [r7, #4]
 706 0022 0F2B     		cmp	r3, #15
 707 0024 04D0     		beq	.L37
 708              		.loc 1 508 3 discriminator 5
 709 0026 4FF4FE71 		mov	r1, #508
 710 002a 0948     		ldr	r0, .L40
 711 002c FFF7FEFF 		bl	assert_failed
 712              	.L37:
 509:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 510:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Clear the wake up event received from wake up pin x */
 511:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   WRITE_REG(PWR->WKUPCR, WakeUpFlag);
 713              		.loc 1 511 3 is_stmt 1
 714 0030 084A     		ldr	r2, .L40+4
 715 0032 7B68     		ldr	r3, [r7, #4]
 716 0034 1365     		str	r3, [r2, #80]
 512:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 513:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check if the wake up event is well cleared */
 514:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if ((PWR->WKUPSR & WakeUpFlag) != 0U)
 717              		.loc 1 514 11
 718 0036 074B     		ldr	r3, .L40+4
 719 0038 5A6D     		ldr	r2, [r3, #84]
 720              		.loc 1 514 20
 721 003a 7B68     		ldr	r3, [r7, #4]
 722 003c 1340     		ands	r3, r3, r2
 723              		.loc 1 514 6
 724 003e 002B     		cmp	r3, #0
 725 0040 01D0     		beq	.L38
 515:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 516:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     return HAL_ERROR;
 726              		.loc 1 516 12
 727 0042 0123     		movs	r3, #1
 728 0044 00E0     		b	.L39
 729              	.L38:
 517:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 518:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 519:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   return HAL_OK;
 730              		.loc 1 519 10
 731 0046 0023     		movs	r3, #0
 732              	.L39:
 520:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 733              		.loc 1 520 1
 734 0048 1846     		mov	r0, r3
 735 004a 0837     		adds	r7, r7, #8
 736              		.cfi_def_cfa_offset 8
 737 004c BD46     		mov	sp, r7
 738              		.cfi_def_cfa_register 13
 739              		@ sp needed
 740 004e 80BD     		pop	{r7, pc}
 741              	.L41:
 742              		.align	2
 743              	.L40:
 744 0050 00000000 		.word	.LC0
 745 0054 00480256 		.word	1442990080
ARM GAS  /tmp/ccWziJYR.s 			page 23


 746              		.cfi_endproc
 747              	.LFE844:
 749              		.section	.text.HAL_PWR_EnterSLEEPMode,"ax",%progbits
 750              		.align	1
 751              		.global	HAL_PWR_EnterSLEEPMode
 752              		.syntax unified
 753              		.thumb
 754              		.thumb_func
 756              	HAL_PWR_EnterSLEEPMode:
 757              	.LFB845:
 521:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 522:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 523:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Enter the current core in SLEEP mode (CSLEEP).
 524:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  Regulator : NA in this family project
 525:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         Specifies the regulator state in SLEEP mode.
 526:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   This parameter is not used for the STM32N6 family and is kept as
 527:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         parameter just to maintain compatibility with the lower power
 528:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         families.
 529:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  SLEEPEntry : Specifies if SLEEP mode is entered with WFI or WFE
 530:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                      intrinsic instruction.
 531:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 532:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFI :             Enter SLEEP mode with WFI instruction.
 533:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFE :             Enter SLEEP mode with WFE instruction.
 534:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR: Enter SLEEP mode with WFE and no clear of pend
 535:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *
 536:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   Ensure to clear pending events before calling this API through
 537:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
 538:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 539:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 540:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
 541:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 758              		.loc 1 541 1
 759              		.cfi_startproc
 760              		@ args = 0, pretend = 0, frame = 8
 761              		@ frame_needed = 1, uses_anonymous_args = 0
 762 0000 80B5     		push	{r7, lr}
 763              		.cfi_def_cfa_offset 8
 764              		.cfi_offset 7, -8
 765              		.cfi_offset 14, -4
 766 0002 82B0     		sub	sp, sp, #8
 767              		.cfi_def_cfa_offset 16
 768 0004 00AF     		add	r7, sp, #0
 769              		.cfi_def_cfa_register 7
 770 0006 7860     		str	r0, [r7, #4]
 771 0008 0B46     		mov	r3, r1
 772 000a FB70     		strb	r3, [r7, #3]
 542:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Prevent unused argument(s) compilation warning */
 543:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   UNUSED(Regulator);
 544:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 545:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 546:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
 773              		.loc 1 546 3
 774 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 775 000e 012B     		cmp	r3, #1
 776 0010 0AD0     		beq	.L43
 777              		.loc 1 546 3 is_stmt 0 discriminator 1
 778 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
ARM GAS  /tmp/ccWziJYR.s 			page 24


 779 0014 022B     		cmp	r3, #2
 780 0016 07D0     		beq	.L43
 781              		.loc 1 546 3 discriminator 2
 782 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 783 001a 032B     		cmp	r3, #3
 784 001c 04D0     		beq	.L43
 785              		.loc 1 546 3 discriminator 3
 786 001e 40F22221 		movw	r1, #546
 787 0022 0C48     		ldr	r0, .L48
 788 0024 FFF7FEFF 		bl	assert_failed
 789              	.L43:
 547:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 548:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex System Control Register */
 549:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 790              		.loc 1 549 3 is_stmt 1
 791 0028 0B4B     		ldr	r3, .L48+4
 792 002a 1B69     		ldr	r3, [r3, #16]
 793 002c 0A4A     		ldr	r2, .L48+4
 794 002e 23F00403 		bic	r3, r3, #4
 795 0032 1361     		str	r3, [r2, #16]
 550:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 551:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Select Sleep mode entry */
 552:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 796              		.loc 1 552 6
 797 0034 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 798 0036 012B     		cmp	r3, #1
 799 0038 01D1     		bne	.L44
 553:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 554:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 555:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __WFI();
 800              		.loc 1 555 5
 801              		.syntax unified
 802              	@ 555 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c" 1
 803 003a 30BF     		wfi
 804              	@ 0 "" 2
 556:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 557:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   else
 558:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 559:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
 560:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 561:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       /* Clear all pending event */
 562:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       __SEV();
 563:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       __WFE();
 564:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 565:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 566:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Request Wait For Event */
 567:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __WFE();
 568:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 569:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 805              		.loc 1 569 1
 806              		.thumb
 807              		.syntax unified
 808 003c 05E0     		b	.L47
 809              	.L44:
 559:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 810              		.loc 1 559 7
 811 003e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
ARM GAS  /tmp/ccWziJYR.s 			page 25


 812 0040 032B     		cmp	r3, #3
 813 0042 01D0     		beq	.L46
 562:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       __WFE();
 814              		.loc 1 562 7
 815              		.syntax unified
 816              	@ 562 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c" 1
 817 0044 40BF     		sev
 818              	@ 0 "" 2
 563:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 819              		.loc 1 563 7
 820              	@ 563 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c" 1
 821 0046 20BF     		wfe
 822              	@ 0 "" 2
 823              		.thumb
 824              		.syntax unified
 825              	.L46:
 567:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 826              		.loc 1 567 5
 827              		.syntax unified
 828              	@ 567 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c" 1
 829 0048 20BF     		wfe
 830              	@ 0 "" 2
 831              		.thumb
 832              		.syntax unified
 833              	.L47:
 834              		.loc 1 569 1
 835 004a 00BF     		nop
 836 004c 0837     		adds	r7, r7, #8
 837              		.cfi_def_cfa_offset 8
 838 004e BD46     		mov	sp, r7
 839              		.cfi_def_cfa_register 13
 840              		@ sp needed
 841 0050 80BD     		pop	{r7, pc}
 842              	.L49:
 843 0052 00BF     		.align	2
 844              	.L48:
 845 0054 00000000 		.word	.LC0
 846 0058 00ED00E0 		.word	-536810240
 847              		.cfi_endproc
 848              	.LFE845:
 850              		.section	.text.HAL_PWR_EnterSTOPMode,"ax",%progbits
 851              		.align	1
 852              		.global	HAL_PWR_EnterSTOPMode
 853              		.syntax unified
 854              		.thumb
 855              		.thumb_func
 857              	HAL_PWR_EnterSTOPMode:
 858              	.LFB846:
 570:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 571:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 572:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Enter the whole system to Stop mode.
 573:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   This API will enter the system in STOP mode
 574:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  Regulator : This parameter is not used for this product family.
 575:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             and is kept as parameter just to maintain compatibility with the
 576:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             lower power families.
 577:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  STOPEntry : Specifies if STOP mode in entered with WFI or WFE
 578:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                     intrinsic instruction.
ARM GAS  /tmp/ccWziJYR.s 			page 26


 579:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 580:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFI              : Enter STOP mode with WFI instruction.
 581:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFE              : Enter STOP mode with WFE instruction.
 582:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP  mode with WFE and no clear of pend
 583:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   In System STOP mode, all I/O pins keep the same state as in Run mode.
 584:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   When exiting System STOP mode by issuing an interrupt or a wakeup
 585:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         event, the HSI RC oscillator is selected as default system wakeup
 586:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         clock.
 587:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   In System STOP mode, when the voltage regulator operates in low
 588:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         power mode, an additional startup delay is incurred when the system
 589:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         is waking up. By keeping the internal regulator ON during STOP mode,
 590:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         the consumption is higher although the startup time is reduced.
 591:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 592:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 593:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
 594:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 859              		.loc 1 594 1
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 8
 862              		@ frame_needed = 1, uses_anonymous_args = 0
 863 0000 80B5     		push	{r7, lr}
 864              		.cfi_def_cfa_offset 8
 865              		.cfi_offset 7, -8
 866              		.cfi_offset 14, -4
 867 0002 82B0     		sub	sp, sp, #8
 868              		.cfi_def_cfa_offset 16
 869 0004 00AF     		add	r7, sp, #0
 870              		.cfi_def_cfa_register 7
 871 0006 7860     		str	r0, [r7, #4]
 872 0008 0B46     		mov	r3, r1
 873 000a FB70     		strb	r3, [r7, #3]
 595:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 596:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Prevent unused argument(s) compilation warning */
 597:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   UNUSED(Regulator);
 598:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 599:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 600:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 874              		.loc 1 600 3
 875 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 876 000e 012B     		cmp	r3, #1
 877 0010 0AD0     		beq	.L51
 878              		.loc 1 600 3 is_stmt 0 discriminator 1
 879 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 880 0014 022B     		cmp	r3, #2
 881 0016 07D0     		beq	.L51
 882              		.loc 1 600 3 discriminator 2
 883 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 884 001a 032B     		cmp	r3, #3
 885 001c 04D0     		beq	.L51
 886              		.loc 1 600 3 discriminator 3
 887 001e 4FF41671 		mov	r1, #600
 888 0022 1548     		ldr	r0, .L55
 889 0024 FFF7FEFF 		bl	assert_failed
 890              	.L51:
 601:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 602:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Select Stop mode when device enters Deepsleep */
 603:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   CLEAR_BIT(PWR->CPUCR, PWR_CPUCR_PDDS);
ARM GAS  /tmp/ccWziJYR.s 			page 27


 891              		.loc 1 603 3 is_stmt 1
 892 0028 144B     		ldr	r3, .L55+4
 893 002a 1B6B     		ldr	r3, [r3, #48]
 894 002c 134A     		ldr	r2, .L55+4
 895 002e 23F00103 		bic	r3, r3, #1
 896 0032 1363     		str	r3, [r2, #48]
 604:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 605:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 606:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 897              		.loc 1 606 3
 898 0034 124B     		ldr	r3, .L55+8
 899 0036 1B69     		ldr	r3, [r3, #16]
 900 0038 114A     		ldr	r2, .L55+8
 901 003a 43F00403 		orr	r3, r3, #4
 902 003e 1361     		str	r3, [r2, #16]
 903              	.LBB10:
 904              	.LBB11:
 905              		.file 2 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h"
   1:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
ARM GAS  /tmp/ccWziJYR.s 			page 28


  40:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /tmp/ccWziJYR.s 			page 29


  97:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
ARM GAS  /tmp/ccWziJYR.s 			page 30


 154:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccWziJYR.s 			page 31


 211:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
ARM GAS  /tmp/ccWziJYR.s 			page 32


 268:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 906              		.loc 2 271 3
 907              		.syntax unified
 908              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 909 0040 BFF34F8F 		dsb 0xF
 910              	@ 0 "" 2
 272:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 911              		.loc 2 272 1
 912              		.thumb
 913              		.syntax unified
 914 0044 00BF     		nop
 915              	.LBE11:
 916              	.LBE10:
 917              	.LBB12:
 918              	.LBB13:
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 919              		.loc 2 260 3
 920              		.syntax unified
 921              	@ 260 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 922 0046 BFF36F8F 		isb 0xF
 923              	@ 0 "" 2
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 924              		.loc 2 261 1
 925              		.thumb
 926              		.syntax unified
 927 004a 00BF     		nop
 928              	.LBE13:
 929              	.LBE12:
 607:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 608:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Ensure that all instructions are done before entering STOP mode */
 609:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   __DSB();
 610:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   __ISB();
 611:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 612:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Select Stop mode entry */
 613:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if (STOPEntry == PWR_STOPENTRY_WFI)
 930              		.loc 1 613 6
 931 004c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 932 004e 012B     		cmp	r3, #1
 933 0050 01D1     		bne	.L52
 614:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 615:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 616:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __WFI();
 934              		.loc 1 616 5
 935              		.syntax unified
 936              	@ 616 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c" 1
 937 0052 30BF     		wfi
 938              	@ 0 "" 2
 939              		.thumb
 940              		.syntax unified
 941 0054 05E0     		b	.L53
 942              	.L52:
 617:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 618:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   else
 619:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
ARM GAS  /tmp/ccWziJYR.s 			page 33


 620:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 943              		.loc 1 620 7
 944 0056 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 945 0058 032B     		cmp	r3, #3
 946 005a 01D0     		beq	.L54
 621:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 622:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       /* Clear all pending event */
 623:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       __SEV();
 947              		.loc 1 623 7
 948              		.syntax unified
 949              	@ 623 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c" 1
 950 005c 40BF     		sev
 951              	@ 0 "" 2
 624:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       __WFE();
 952              		.loc 1 624 7
 953              	@ 624 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c" 1
 954 005e 20BF     		wfe
 955              	@ 0 "" 2
 956              		.thumb
 957              		.syntax unified
 958              	.L54:
 625:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 626:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 627:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Request Wait For Event */
 628:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __WFE();
 959              		.loc 1 628 5
 960              		.syntax unified
 961              	@ 628 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c" 1
 962 0060 20BF     		wfe
 963              	@ 0 "" 2
 964              		.thumb
 965              		.syntax unified
 966              	.L53:
 629:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 630:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 631:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex-M55 in the System Control Register */
 632:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 967              		.loc 1 632 3
 968 0062 074B     		ldr	r3, .L55+8
 969 0064 1B69     		ldr	r3, [r3, #16]
 970 0066 064A     		ldr	r2, .L55+8
 971 0068 23F00403 		bic	r3, r3, #4
 972 006c 1361     		str	r3, [r2, #16]
 633:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 973              		.loc 1 633 1
 974 006e 00BF     		nop
 975 0070 0837     		adds	r7, r7, #8
 976              		.cfi_def_cfa_offset 8
 977 0072 BD46     		mov	sp, r7
 978              		.cfi_def_cfa_register 13
 979              		@ sp needed
 980 0074 80BD     		pop	{r7, pc}
 981              	.L56:
 982 0076 00BF     		.align	2
 983              	.L55:
 984 0078 00000000 		.word	.LC0
 985 007c 00480256 		.word	1442990080
ARM GAS  /tmp/ccWziJYR.s 			page 34


 986 0080 00ED00E0 		.word	-536810240
 987              		.cfi_endproc
 988              	.LFE846:
 990              		.section	.text.HAL_PWR_EnterSTANDBYMode,"ax",%progbits
 991              		.align	1
 992              		.global	HAL_PWR_EnterSTANDBYMode
 993              		.syntax unified
 994              		.thumb
 995              		.thumb_func
 997              	HAL_PWR_EnterSTANDBYMode:
 998              	.LFB847:
 634:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 635:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 636:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Enter the whole system to Standby mode.
 637:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   The Standby mode allows achieving the lowest power consumption.
 638:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   When the system enters in Standby mode, the voltage regulator is disabled.
 639:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         The complete VCORE domain is consequently powered off.
 640:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         The PLLs, HSI oscillator, CSI oscillator, HSI48 and the HSE oscillator are
 641:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         also switched off.
 642:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         SRAM and register contents are lost except for backup domain registers
 643:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         (RTC registers, RTC backup register and backup RAM), and Standby circuitry.
 644:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   When the System exit STANDBY mode by issuing an interrupt or a
 645:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         wakeup event, the HSI RC oscillator is selected as system clock.
 646:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 647:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 648:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_EnterSTANDBYMode(void)
 649:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 999              		.loc 1 649 1
 1000              		.cfi_startproc
 1001              		@ args = 0, pretend = 0, frame = 0
 1002              		@ frame_needed = 1, uses_anonymous_args = 0
 1003              		@ link register save eliminated.
 1004 0000 80B4     		push	{r7}
 1005              		.cfi_def_cfa_offset 4
 1006              		.cfi_offset 7, -4
 1007 0002 00AF     		add	r7, sp, #0
 1008              		.cfi_def_cfa_register 7
 650:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Select Standby when device enters Deepsleep */
 651:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   SET_BIT(PWR->CPUCR, PWR_CPUCR_PDDS);
 1009              		.loc 1 651 3
 1010 0004 0B4B     		ldr	r3, .L58
 1011 0006 1B6B     		ldr	r3, [r3, #48]
 1012 0008 0A4A     		ldr	r2, .L58
 1013 000a 43F00103 		orr	r3, r3, #1
 1014 000e 1363     		str	r3, [r2, #48]
 652:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 653:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 654:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 1015              		.loc 1 654 3
 1016 0010 094B     		ldr	r3, .L58+4
 1017 0012 1B69     		ldr	r3, [r3, #16]
 1018 0014 084A     		ldr	r2, .L58+4
 1019 0016 43F00403 		orr	r3, r3, #4
 1020 001a 1361     		str	r3, [r2, #16]
 1021              	.LBB14:
 1022              	.LBB15:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccWziJYR.s 			page 35


 1023              		.loc 2 271 3
 1024              		.syntax unified
 1025              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1026 001c BFF34F8F 		dsb 0xF
 1027              	@ 0 "" 2
 1028              		.loc 2 272 1
 1029              		.thumb
 1030              		.syntax unified
 1031 0020 00BF     		nop
 1032              	.LBE15:
 1033              	.LBE14:
 1034              	.LBB16:
 1035              	.LBB17:
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1036              		.loc 2 260 3
 1037              		.syntax unified
 1038              	@ 260 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1039 0022 BFF36F8F 		isb 0xF
 1040              	@ 0 "" 2
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 1041              		.loc 2 261 1
 1042              		.thumb
 1043              		.syntax unified
 1044 0026 00BF     		nop
 1045              	.LBE17:
 1046              	.LBE16:
 655:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 656:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Ensure that all instructions are done before entering STANDBY mode */
 657:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   __DSB();
 658:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   __ISB();
 659:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 660:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Request Wait For Interrupt */
 661:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   __WFI();
 1047              		.loc 1 661 3
 1048              		.syntax unified
 1049              	@ 661 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c" 1
 1050 0028 30BF     		wfi
 1051              	@ 0 "" 2
 662:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 1052              		.loc 1 662 1
 1053              		.thumb
 1054              		.syntax unified
 1055 002a 00BF     		nop
 1056 002c BD46     		mov	sp, r7
 1057              		.cfi_def_cfa_register 13
 1058              		@ sp needed
 1059 002e 5DF8047B 		ldr	r7, [sp], #4
 1060              		.cfi_restore 7
 1061              		.cfi_def_cfa_offset 0
 1062 0032 7047     		bx	lr
 1063              	.L59:
 1064              		.align	2
 1065              	.L58:
 1066 0034 00480256 		.word	1442990080
 1067 0038 00ED00E0 		.word	-536810240
 1068              		.cfi_endproc
 1069              	.LFE847:
ARM GAS  /tmp/ccWziJYR.s 			page 36


 1071              		.section	.text.HAL_PWR_EnableSleepOnExit,"ax",%progbits
 1072              		.align	1
 1073              		.global	HAL_PWR_EnableSleepOnExit
 1074              		.syntax unified
 1075              		.thumb
 1076              		.thumb_func
 1078              	HAL_PWR_EnableSleepOnExit:
 1079              	.LFB848:
 663:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 664:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 665:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Indicate SLEEP-ON-EXIT feature when returning from handler mode to
 666:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         thread mode.
 667:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   Set SLEEPONEXIT bit of SCR register. When this bit is set, the
 668:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         processor re-enters Sleep mode when an interruption handling is over.
 669:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         Setting this bit is useful when the processor is expected to run
 670:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         only on interruptions handling.
 671:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 672:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 673:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_EnableSleepOnExit(void)
 674:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 1080              		.loc 1 674 1
 1081              		.cfi_startproc
 1082              		@ args = 0, pretend = 0, frame = 0
 1083              		@ frame_needed = 1, uses_anonymous_args = 0
 1084              		@ link register save eliminated.
 1085 0000 80B4     		push	{r7}
 1086              		.cfi_def_cfa_offset 4
 1087              		.cfi_offset 7, -4
 1088 0002 00AF     		add	r7, sp, #0
 1089              		.cfi_def_cfa_register 7
 675:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Set SLEEPONEXIT bit of Cortex-M55 System Control Register */
 676:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   SET_BIT(SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
 1090              		.loc 1 676 3
 1091 0004 054B     		ldr	r3, .L61
 1092 0006 1B69     		ldr	r3, [r3, #16]
 1093 0008 044A     		ldr	r2, .L61
 1094 000a 43F00203 		orr	r3, r3, #2
 1095 000e 1361     		str	r3, [r2, #16]
 677:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 1096              		.loc 1 677 1
 1097 0010 00BF     		nop
 1098 0012 BD46     		mov	sp, r7
 1099              		.cfi_def_cfa_register 13
 1100              		@ sp needed
 1101 0014 5DF8047B 		ldr	r7, [sp], #4
 1102              		.cfi_restore 7
 1103              		.cfi_def_cfa_offset 0
 1104 0018 7047     		bx	lr
 1105              	.L62:
 1106 001a 00BF     		.align	2
 1107              	.L61:
 1108 001c 00ED00E0 		.word	-536810240
 1109              		.cfi_endproc
 1110              	.LFE848:
 1112              		.section	.text.HAL_PWR_DisableSleepOnExit,"ax",%progbits
 1113              		.align	1
 1114              		.global	HAL_PWR_DisableSleepOnExit
ARM GAS  /tmp/ccWziJYR.s 			page 37


 1115              		.syntax unified
 1116              		.thumb
 1117              		.thumb_func
 1119              	HAL_PWR_DisableSleepOnExit:
 1120              	.LFB849:
 678:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 679:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 680:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Disable SLEEP-ON-EXIT feature when returning from handler mode to
 681:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         thread mode.
 682:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   Clears SLEEPONEXIT bit of SCR register. When this bit is set, the
 683:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         processor re-enters Sleep mode when an interruption handling is over.
 684:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 685:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 686:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_DisableSleepOnExit(void)
 687:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 1121              		.loc 1 687 1
 1122              		.cfi_startproc
 1123              		@ args = 0, pretend = 0, frame = 0
 1124              		@ frame_needed = 1, uses_anonymous_args = 0
 1125              		@ link register save eliminated.
 1126 0000 80B4     		push	{r7}
 1127              		.cfi_def_cfa_offset 4
 1128              		.cfi_offset 7, -4
 1129 0002 00AF     		add	r7, sp, #0
 1130              		.cfi_def_cfa_register 7
 688:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Clear SLEEPONEXIT bit of Cortex-M55 System Control Register */
 689:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
 1131              		.loc 1 689 3
 1132 0004 054B     		ldr	r3, .L64
 1133 0006 1B69     		ldr	r3, [r3, #16]
 1134 0008 044A     		ldr	r2, .L64
 1135 000a 23F00203 		bic	r3, r3, #2
 1136 000e 1361     		str	r3, [r2, #16]
 690:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 1137              		.loc 1 690 1
 1138 0010 00BF     		nop
 1139 0012 BD46     		mov	sp, r7
 1140              		.cfi_def_cfa_register 13
 1141              		@ sp needed
 1142 0014 5DF8047B 		ldr	r7, [sp], #4
 1143              		.cfi_restore 7
 1144              		.cfi_def_cfa_offset 0
 1145 0018 7047     		bx	lr
 1146              	.L65:
 1147 001a 00BF     		.align	2
 1148              	.L64:
 1149 001c 00ED00E0 		.word	-536810240
 1150              		.cfi_endproc
 1151              	.LFE849:
 1153              		.section	.text.HAL_PWR_EnableSEVOnPend,"ax",%progbits
 1154              		.align	1
 1155              		.global	HAL_PWR_EnableSEVOnPend
 1156              		.syntax unified
 1157              		.thumb
 1158              		.thumb_func
 1160              	HAL_PWR_EnableSEVOnPend:
 1161              	.LFB850:
ARM GAS  /tmp/ccWziJYR.s 			page 38


 691:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 692:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 693:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Enable CORTEX SEV-ON-PEND feature.
 694:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   Sets SEVONPEND bit of SCR register. When this bit is set, any
 695:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         pending event / interrupt even if it's disabled or has insufficient
 696:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         priority to cause exception entry wakes up the Cortex-M55.
 697:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 698:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 699:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_EnableSEVOnPend(void)
 700:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 1162              		.loc 1 700 1
 1163              		.cfi_startproc
 1164              		@ args = 0, pretend = 0, frame = 0
 1165              		@ frame_needed = 1, uses_anonymous_args = 0
 1166              		@ link register save eliminated.
 1167 0000 80B4     		push	{r7}
 1168              		.cfi_def_cfa_offset 4
 1169              		.cfi_offset 7, -4
 1170 0002 00AF     		add	r7, sp, #0
 1171              		.cfi_def_cfa_register 7
 701:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Set SEVONPEND bit of Cortex-M55 System Control Register */
 702:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   SET_BIT(SCB->SCR, SCB_SCR_SEVONPEND_Msk);
 1172              		.loc 1 702 3
 1173 0004 054B     		ldr	r3, .L67
 1174 0006 1B69     		ldr	r3, [r3, #16]
 1175 0008 044A     		ldr	r2, .L67
 1176 000a 43F01003 		orr	r3, r3, #16
 1177 000e 1361     		str	r3, [r2, #16]
 703:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 1178              		.loc 1 703 1
 1179 0010 00BF     		nop
 1180 0012 BD46     		mov	sp, r7
 1181              		.cfi_def_cfa_register 13
 1182              		@ sp needed
 1183 0014 5DF8047B 		ldr	r7, [sp], #4
 1184              		.cfi_restore 7
 1185              		.cfi_def_cfa_offset 0
 1186 0018 7047     		bx	lr
 1187              	.L68:
 1188 001a 00BF     		.align	2
 1189              	.L67:
 1190 001c 00ED00E0 		.word	-536810240
 1191              		.cfi_endproc
 1192              	.LFE850:
 1194              		.section	.text.HAL_PWR_DisableSEVOnPend,"ax",%progbits
 1195              		.align	1
 1196              		.global	HAL_PWR_DisableSEVOnPend
 1197              		.syntax unified
 1198              		.thumb
 1199              		.thumb_func
 1201              	HAL_PWR_DisableSEVOnPend:
 1202              	.LFB851:
 704:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 705:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 706:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Disable CORTEX SEVONPEND feature.
 707:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   Resets SEVONPEND bit of SCR register. When this bit is reset, only
 708:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         enabled pending causes exception entry wakes up the Cortex-M55.
ARM GAS  /tmp/ccWziJYR.s 			page 39


 709:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 710:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 711:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_DisableSEVOnPend(void)
 712:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 1203              		.loc 1 712 1
 1204              		.cfi_startproc
 1205              		@ args = 0, pretend = 0, frame = 0
 1206              		@ frame_needed = 1, uses_anonymous_args = 0
 1207              		@ link register save eliminated.
 1208 0000 80B4     		push	{r7}
 1209              		.cfi_def_cfa_offset 4
 1210              		.cfi_offset 7, -4
 1211 0002 00AF     		add	r7, sp, #0
 1212              		.cfi_def_cfa_register 7
 713:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Clear SEVONPEND bit of Cortex-M55 System Control Register */
 714:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, SCB_SCR_SEVONPEND_Msk);
 1213              		.loc 1 714 3
 1214 0004 054B     		ldr	r3, .L70
 1215 0006 1B69     		ldr	r3, [r3, #16]
 1216 0008 044A     		ldr	r2, .L70
 1217 000a 23F01003 		bic	r3, r3, #16
 1218 000e 1361     		str	r3, [r2, #16]
 715:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 1219              		.loc 1 715 1
 1220 0010 00BF     		nop
 1221 0012 BD46     		mov	sp, r7
 1222              		.cfi_def_cfa_register 13
 1223              		@ sp needed
 1224 0014 5DF8047B 		ldr	r7, [sp], #4
 1225              		.cfi_restore 7
 1226              		.cfi_def_cfa_offset 0
 1227 0018 7047     		bx	lr
 1228              	.L71:
 1229 001a 00BF     		.align	2
 1230              	.L70:
 1231 001c 00ED00E0 		.word	-536810240
 1232              		.cfi_endproc
 1233              	.LFE851:
 1235              		.section	.text.HAL_PWR_PVD_Rising_Callback,"ax",%progbits
 1236              		.align	1
 1237              		.weak	HAL_PWR_PVD_Rising_Callback
 1238              		.syntax unified
 1239              		.thumb
 1240              		.thumb_func
 1242              	HAL_PWR_PVD_Rising_Callback:
 1243              	.LFB852:
 716:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 717:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 718:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  PWR PVD interrupt Rising callback
 719:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None
 720:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 721:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** __weak void HAL_PWR_PVD_Rising_Callback(void)
 722:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 1244              		.loc 1 722 1
 1245              		.cfi_startproc
 1246              		@ args = 0, pretend = 0, frame = 0
 1247              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccWziJYR.s 			page 40


 1248              		@ link register save eliminated.
 1249 0000 80B4     		push	{r7}
 1250              		.cfi_def_cfa_offset 4
 1251              		.cfi_offset 7, -4
 1252 0002 00AF     		add	r7, sp, #0
 1253              		.cfi_def_cfa_register 7
 723:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* NOTE : This function should not be modified; when the callback is needed,
 724:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             the HAL_PWR_PVD_Rising_Callback can be implemented in the user file
 725:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 726:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 1254              		.loc 1 726 1
 1255 0004 00BF     		nop
 1256 0006 BD46     		mov	sp, r7
 1257              		.cfi_def_cfa_register 13
 1258              		@ sp needed
 1259 0008 5DF8047B 		ldr	r7, [sp], #4
 1260              		.cfi_restore 7
 1261              		.cfi_def_cfa_offset 0
 1262 000c 7047     		bx	lr
 1263              		.cfi_endproc
 1264              	.LFE852:
 1266              		.section	.text.HAL_PWR_PVD_Falling_Callback,"ax",%progbits
 1267              		.align	1
 1268              		.weak	HAL_PWR_PVD_Falling_Callback
 1269              		.syntax unified
 1270              		.thumb
 1271              		.thumb_func
 1273              	HAL_PWR_PVD_Falling_Callback:
 1274              	.LFB853:
 727:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 728:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 729:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  PWR PVD interrupt Falling callback
 730:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None
 731:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 732:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** __weak void HAL_PWR_PVD_Falling_Callback(void)
 733:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 1275              		.loc 1 733 1
 1276              		.cfi_startproc
 1277              		@ args = 0, pretend = 0, frame = 0
 1278              		@ frame_needed = 1, uses_anonymous_args = 0
 1279              		@ link register save eliminated.
 1280 0000 80B4     		push	{r7}
 1281              		.cfi_def_cfa_offset 4
 1282              		.cfi_offset 7, -4
 1283 0002 00AF     		add	r7, sp, #0
 1284              		.cfi_def_cfa_register 7
 734:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* NOTE : This function should not be modified; when the callback is needed,
 735:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             the HAL_PWR_PVD_Falling_Callback can be implemented in the user file
 736:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 737:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 1285              		.loc 1 737 1
 1286 0004 00BF     		nop
 1287 0006 BD46     		mov	sp, r7
 1288              		.cfi_def_cfa_register 13
 1289              		@ sp needed
 1290 0008 5DF8047B 		ldr	r7, [sp], #4
 1291              		.cfi_restore 7
ARM GAS  /tmp/ccWziJYR.s 			page 41


 1292              		.cfi_def_cfa_offset 0
 1293 000c 7047     		bx	lr
 1294              		.cfi_endproc
 1295              	.LFE853:
 1297              		.section	.text.HAL_PWR_WAKEUP_PIN_IRQHandler,"ax",%progbits
 1298              		.align	1
 1299              		.global	HAL_PWR_WAKEUP_PIN_IRQHandler
 1300              		.syntax unified
 1301              		.thumb
 1302              		.thumb_func
 1304              	HAL_PWR_WAKEUP_PIN_IRQHandler:
 1305              	.LFB854:
 738:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 739:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 740:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief This function handles the PWR WAKEUP PIN interrupt request.
 741:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   This API should be called under the WAKEUP_PIN_IRQHandler().
 742:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 743:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 744:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_WAKEUP_PIN_IRQHandler(void)
 745:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 1306              		.loc 1 745 1
 1307              		.cfi_startproc
 1308              		@ args = 0, pretend = 0, frame = 0
 1309              		@ frame_needed = 1, uses_anonymous_args = 0
 1310 0000 80B5     		push	{r7, lr}
 1311              		.cfi_def_cfa_offset 8
 1312              		.cfi_offset 7, -8
 1313              		.cfi_offset 14, -4
 1314 0002 00AF     		add	r7, sp, #0
 1315              		.cfi_def_cfa_register 7
 746:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Wakeup pin EXTI line interrupt detected */
 747:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if (READ_BIT(PWR->WKUPSR, PWR_WKUPSR_WKUPF1) != 0U)
 1316              		.loc 1 747 7
 1317 0004 1C4B     		ldr	r3, .L80
 1318 0006 5B6D     		ldr	r3, [r3, #84]
 1319 0008 03F00103 		and	r3, r3, #1
 1320              		.loc 1 747 6
 1321 000c 002B     		cmp	r3, #0
 1322 000e 07D0     		beq	.L75
 748:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 749:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Clear PWR WKUPF1 flag */
 750:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG(PWR_FLAG_WKUP1);
 1323              		.loc 1 750 5
 1324 0010 194B     		ldr	r3, .L80
 1325 0012 1B6D     		ldr	r3, [r3, #80]
 1326 0014 184A     		ldr	r2, .L80
 1327 0016 43F00103 		orr	r3, r3, #1
 1328 001a 1365     		str	r3, [r2, #80]
 751:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 752:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* PWR WKUP1 interrupt user callback */
 753:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     HAL_PWR_WKUP1_Callback();
 1329              		.loc 1 753 5
 1330 001c FFF7FEFF 		bl	HAL_PWR_WKUP1_Callback
 1331              	.L75:
 754:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 755:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 756:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if (READ_BIT(PWR->WKUPSR, PWR_WKUPSR_WKUPF2) != 0U)
ARM GAS  /tmp/ccWziJYR.s 			page 42


 1332              		.loc 1 756 7
 1333 0020 154B     		ldr	r3, .L80
 1334 0022 5B6D     		ldr	r3, [r3, #84]
 1335 0024 03F00203 		and	r3, r3, #2
 1336              		.loc 1 756 6
 1337 0028 002B     		cmp	r3, #0
 1338 002a 07D0     		beq	.L76
 757:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 758:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Clear PWR WKUPF2 flag */
 759:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG(PWR_FLAG_WKUP2);
 1339              		.loc 1 759 5
 1340 002c 124B     		ldr	r3, .L80
 1341 002e 1B6D     		ldr	r3, [r3, #80]
 1342 0030 114A     		ldr	r2, .L80
 1343 0032 43F00203 		orr	r3, r3, #2
 1344 0036 1365     		str	r3, [r2, #80]
 760:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 761:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* PWR WKUP2 interrupt user callback */
 762:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     HAL_PWR_WKUP2_Callback();
 1345              		.loc 1 762 5
 1346 0038 FFF7FEFF 		bl	HAL_PWR_WKUP2_Callback
 1347              	.L76:
 763:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 764:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 765:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if (READ_BIT(PWR->WKUPSR, PWR_WKUPSR_WKUPF3) != 0U)
 1348              		.loc 1 765 7
 1349 003c 0E4B     		ldr	r3, .L80
 1350 003e 5B6D     		ldr	r3, [r3, #84]
 1351 0040 03F00403 		and	r3, r3, #4
 1352              		.loc 1 765 6
 1353 0044 002B     		cmp	r3, #0
 1354 0046 07D0     		beq	.L77
 766:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 767:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Clear PWR WKUPF3 flag */
 768:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG(PWR_FLAG_WKUP3);
 1355              		.loc 1 768 5
 1356 0048 0B4B     		ldr	r3, .L80
 1357 004a 1B6D     		ldr	r3, [r3, #80]
 1358 004c 0A4A     		ldr	r2, .L80
 1359 004e 43F00403 		orr	r3, r3, #4
 1360 0052 1365     		str	r3, [r2, #80]
 769:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 770:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* PWR WKUP3 interrupt user callback */
 771:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     HAL_PWR_WKUP3_Callback();
 1361              		.loc 1 771 5
 1362 0054 FFF7FEFF 		bl	HAL_PWR_WKUP3_Callback
 1363              	.L77:
 772:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 773:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 774:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if (READ_BIT(PWR->WKUPSR, PWR_WKUPSR_WKUPF4) != 0U)
 1364              		.loc 1 774 7
 1365 0058 074B     		ldr	r3, .L80
 1366 005a 5B6D     		ldr	r3, [r3, #84]
 1367 005c 03F00803 		and	r3, r3, #8
 1368              		.loc 1 774 6
 1369 0060 002B     		cmp	r3, #0
 1370 0062 07D0     		beq	.L79
ARM GAS  /tmp/ccWziJYR.s 			page 43


 775:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 776:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Clear PWR WKUPF4 flag */
 777:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG(PWR_FLAG_WKUP4);
 1371              		.loc 1 777 5
 1372 0064 044B     		ldr	r3, .L80
 1373 0066 1B6D     		ldr	r3, [r3, #80]
 1374 0068 034A     		ldr	r2, .L80
 1375 006a 43F00803 		orr	r3, r3, #8
 1376 006e 1365     		str	r3, [r2, #80]
 778:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 779:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* PWR WKUP4 interrupt user callback */
 780:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     HAL_PWR_WKUP4_Callback();
 1377              		.loc 1 780 5
 1378 0070 FFF7FEFF 		bl	HAL_PWR_WKUP4_Callback
 1379              	.L79:
 781:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 782:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 1380              		.loc 1 782 1
 1381 0074 00BF     		nop
 1382 0076 80BD     		pop	{r7, pc}
 1383              	.L81:
 1384              		.align	2
 1385              	.L80:
 1386 0078 00480256 		.word	1442990080
 1387              		.cfi_endproc
 1388              	.LFE854:
 1390              		.section	.text.HAL_PWR_WKUP1_Callback,"ax",%progbits
 1391              		.align	1
 1392              		.weak	HAL_PWR_WKUP1_Callback
 1393              		.syntax unified
 1394              		.thumb
 1395              		.thumb_func
 1397              	HAL_PWR_WKUP1_Callback:
 1398              	.LFB855:
 783:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 784:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 785:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief PWR WKUP1 interrupt callback.
 786:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 787:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 788:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** __weak void HAL_PWR_WKUP1_Callback(void)
 789:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 1399              		.loc 1 789 1
 1400              		.cfi_startproc
 1401              		@ args = 0, pretend = 0, frame = 0
 1402              		@ frame_needed = 1, uses_anonymous_args = 0
 1403              		@ link register save eliminated.
 1404 0000 80B4     		push	{r7}
 1405              		.cfi_def_cfa_offset 4
 1406              		.cfi_offset 7, -4
 1407 0002 00AF     		add	r7, sp, #0
 1408              		.cfi_def_cfa_register 7
 790:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 791:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             the HAL_PWR_WKUP1_Callback can be implemented in the user file
 792:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 793:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 1409              		.loc 1 793 1
 1410 0004 00BF     		nop
ARM GAS  /tmp/ccWziJYR.s 			page 44


 1411 0006 BD46     		mov	sp, r7
 1412              		.cfi_def_cfa_register 13
 1413              		@ sp needed
 1414 0008 5DF8047B 		ldr	r7, [sp], #4
 1415              		.cfi_restore 7
 1416              		.cfi_def_cfa_offset 0
 1417 000c 7047     		bx	lr
 1418              		.cfi_endproc
 1419              	.LFE855:
 1421              		.section	.text.HAL_PWR_WKUP2_Callback,"ax",%progbits
 1422              		.align	1
 1423              		.weak	HAL_PWR_WKUP2_Callback
 1424              		.syntax unified
 1425              		.thumb
 1426              		.thumb_func
 1428              	HAL_PWR_WKUP2_Callback:
 1429              	.LFB856:
 794:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 795:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 796:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief PWR WKUP2 interrupt callback.
 797:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 798:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 799:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** __weak void HAL_PWR_WKUP2_Callback(void)
 800:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 1430              		.loc 1 800 1
 1431              		.cfi_startproc
 1432              		@ args = 0, pretend = 0, frame = 0
 1433              		@ frame_needed = 1, uses_anonymous_args = 0
 1434              		@ link register save eliminated.
 1435 0000 80B4     		push	{r7}
 1436              		.cfi_def_cfa_offset 4
 1437              		.cfi_offset 7, -4
 1438 0002 00AF     		add	r7, sp, #0
 1439              		.cfi_def_cfa_register 7
 801:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 802:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             the HAL_PWR_WKUP2_Callback can be implemented in the user file
 803:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 804:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 1440              		.loc 1 804 1
 1441 0004 00BF     		nop
 1442 0006 BD46     		mov	sp, r7
 1443              		.cfi_def_cfa_register 13
 1444              		@ sp needed
 1445 0008 5DF8047B 		ldr	r7, [sp], #4
 1446              		.cfi_restore 7
 1447              		.cfi_def_cfa_offset 0
 1448 000c 7047     		bx	lr
 1449              		.cfi_endproc
 1450              	.LFE856:
 1452              		.section	.text.HAL_PWR_WKUP3_Callback,"ax",%progbits
 1453              		.align	1
 1454              		.weak	HAL_PWR_WKUP3_Callback
 1455              		.syntax unified
 1456              		.thumb
 1457              		.thumb_func
 1459              	HAL_PWR_WKUP3_Callback:
 1460              	.LFB857:
ARM GAS  /tmp/ccWziJYR.s 			page 45


 805:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 806:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 807:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief PWR WKUP3 interrupt callback.
 808:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 809:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 810:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** __weak void HAL_PWR_WKUP3_Callback(void)
 811:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 1461              		.loc 1 811 1
 1462              		.cfi_startproc
 1463              		@ args = 0, pretend = 0, frame = 0
 1464              		@ frame_needed = 1, uses_anonymous_args = 0
 1465              		@ link register save eliminated.
 1466 0000 80B4     		push	{r7}
 1467              		.cfi_def_cfa_offset 4
 1468              		.cfi_offset 7, -4
 1469 0002 00AF     		add	r7, sp, #0
 1470              		.cfi_def_cfa_register 7
 812:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 813:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             the HAL_PWR_WKUP3_Callback can be implemented in the user file
 814:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 815:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 1471              		.loc 1 815 1
 1472 0004 00BF     		nop
 1473 0006 BD46     		mov	sp, r7
 1474              		.cfi_def_cfa_register 13
 1475              		@ sp needed
 1476 0008 5DF8047B 		ldr	r7, [sp], #4
 1477              		.cfi_restore 7
 1478              		.cfi_def_cfa_offset 0
 1479 000c 7047     		bx	lr
 1480              		.cfi_endproc
 1481              	.LFE857:
 1483              		.section	.text.HAL_PWR_WKUP4_Callback,"ax",%progbits
 1484              		.align	1
 1485              		.weak	HAL_PWR_WKUP4_Callback
 1486              		.syntax unified
 1487              		.thumb
 1488              		.thumb_func
 1490              	HAL_PWR_WKUP4_Callback:
 1491              	.LFB858:
 816:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 817:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 818:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief PWR WKUP4 interrupt callback.
 819:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 820:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 821:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** __weak void HAL_PWR_WKUP4_Callback(void)
 822:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 1492              		.loc 1 822 1
 1493              		.cfi_startproc
 1494              		@ args = 0, pretend = 0, frame = 0
 1495              		@ frame_needed = 1, uses_anonymous_args = 0
 1496              		@ link register save eliminated.
 1497 0000 80B4     		push	{r7}
 1498              		.cfi_def_cfa_offset 4
 1499              		.cfi_offset 7, -4
 1500 0002 00AF     		add	r7, sp, #0
 1501              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccWziJYR.s 			page 46


 823:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 824:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             the HAL_PWR_WKUP4_Callback can be implemented in the user file
 825:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 826:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 1502              		.loc 1 826 1
 1503 0004 00BF     		nop
 1504 0006 BD46     		mov	sp, r7
 1505              		.cfi_def_cfa_register 13
 1506              		@ sp needed
 1507 0008 5DF8047B 		ldr	r7, [sp], #4
 1508              		.cfi_restore 7
 1509              		.cfi_def_cfa_offset 0
 1510 000c 7047     		bx	lr
 1511              		.cfi_endproc
 1512              	.LFE858:
 1514              		.section	.text.HAL_PWR_ConfigAttributes,"ax",%progbits
 1515              		.align	1
 1516              		.global	HAL_PWR_ConfigAttributes
 1517              		.syntax unified
 1518              		.thumb
 1519              		.thumb_func
 1521              	HAL_PWR_ConfigAttributes:
 1522              	.LFB859:
 827:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 828:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 829:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @}
 830:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 831:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #if defined(PWR_PRIVCFGR_PRIV0)
 832:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group3 Attributes Management Functions
 833:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *  @brief    Attributes management functions
 834:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *
 835:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** @verbatim
 836:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****  ===============================================================================
 837:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                        ##### PWR Attributes Functions #####
 838:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****  ===============================================================================
 839:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 840:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       The PWR is able to protect register bits from being modified by non-secure
 841:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       and unprivileged accesses.
 842:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       The protection can be activated for the following features through PWR_SECCFGR and
 843:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       PWR_PRIVCFGR:
 844:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 845:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (++) System supply configuration.
 846:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (++) Voltage scaling.
 847:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (++) Low-power mode.
 848:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (++) Wake-up (WKUP) pins.
 849:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (++) Voltage detection and monitoring.
 850:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (++) VBAT mode.
 851:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 852:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       A non-secure access to a secure-protected register bit is denied :
 853:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (++) The secured bits are not written (WI) with a non-secure write access.
 854:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (++) The secured bits are read as 0 (RAZ) with a non-secure read access.
 855:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 856:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 857:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       After any application reset or system reset, the PWR does not filter any access
 858:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (default configuration: non-secure, any privileged) until the trusted agent has
 859:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       programmed the security and privileged protection.
 860:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
ARM GAS  /tmp/ccWziJYR.s 			page 47


 861:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..] Secure/non-secure access filtering
 862:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       To enable the filtering access based on this attribute, the authorized master
 863:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       agent must set SECx in PWR_SECCFGR related to the PWR feature.
 864:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 865:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       When a register is configured as secure, read and write operations are only
 866:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       allowed by a secure access.
 867:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       Non-secure read or write accesses are denied (RAZ/WI).
 868:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       An illegal secure access event is generated to the IAC (illegal access controller).
 869:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       There is no bus error generated.
 870:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       When a register is configured as non-secure, read and write operations are
 871:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       allowed by both secure and non-secure accesses.
 872:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 873:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..] Privileged/unprivileged access filtering
 874:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       To enable the filtering access based on this attribute, the authorized master
 875:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       agent has to set PRIVx in PWR_PRIVCFGR related to the PWR feature.
 876:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       When a register is configured as privileged, read and write operations are only
 877:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       allowed by a privileged access.
 878:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       Unprivileged read or write accesses are denied (RAZ/WI).
 879:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       An illegal privileged access event is generated to the IAC.
 880:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       There is no bus error generated.
 881:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       When a register is configured as unprivileged, read and write operations are
 882:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       allowed by both privileged and unprivileged accesses.
 883:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 884:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** @endverbatim
 885:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @{
 886:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 887:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 888:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 889:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Configure the PWR item attributes.
 890:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   Available attributes are security and privilege protection.
 891:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   Security attribute can only be set only by secure access.
 892:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   Privilege attribute for secure items can be managed only by a secure
 893:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         privileged access.
 894:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   Privilege attribute for nsecure items can be managed  by a secure
 895:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         privileged access or by a nsecure privileged access.
 896:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  Item       : Specifies the item(s) to set attributes on.
 897:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                      This parameter can be a combination of PWR_ITEMS.
 898:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  Attributes : Specifies the available attribute(s).
 899:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                      This parameter can be one of PWR_ATTRIBUTES.
 900:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 901:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 902:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_ConfigAttributes(uint32_t Item, uint32_t Attributes)
 903:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 1523              		.loc 1 903 1
 1524              		.cfi_startproc
 1525              		@ args = 0, pretend = 0, frame = 8
 1526              		@ frame_needed = 1, uses_anonymous_args = 0
 1527 0000 80B5     		push	{r7, lr}
 1528              		.cfi_def_cfa_offset 8
 1529              		.cfi_offset 7, -8
 1530              		.cfi_offset 14, -4
 1531 0002 82B0     		sub	sp, sp, #8
 1532              		.cfi_def_cfa_offset 16
 1533 0004 00AF     		add	r7, sp, #0
 1534              		.cfi_def_cfa_register 7
 1535 0006 7860     		str	r0, [r7, #4]
 1536 0008 3960     		str	r1, [r7]
ARM GAS  /tmp/ccWziJYR.s 			page 48


 904:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 905:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   assert_param(IS_PWR_ITEMS_ATTRIBUTES(Item));
 1537              		.loc 1 905 3
 1538 000a 7B68     		ldr	r3, [r7, #4]
 1539 000c 23F47023 		bic	r3, r3, #983040
 1540 0010 23F0FF03 		bic	r3, r3, #255
 1541 0014 002B     		cmp	r3, #0
 1542 0016 02D1     		bne	.L87
 1543              		.loc 1 905 3 is_stmt 0 discriminator 2
 1544 0018 7B68     		ldr	r3, [r7, #4]
 1545 001a 002B     		cmp	r3, #0
 1546 001c 04D1     		bne	.L88
 1547              	.L87:
 1548              		.loc 1 905 3 discriminator 3
 1549 001e 40F28931 		movw	r1, #905
 1550 0022 3148     		ldr	r0, .L96
 1551 0024 FFF7FEFF 		bl	assert_failed
 1552              	.L88:
 906:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   assert_param(IS_PWR_ATTRIBUTES(Attributes));
 1553              		.loc 1 906 3 is_stmt 1
 1554 0028 3B68     		ldr	r3, [r7]
 1555 002a 1B09     		lsrs	r3, r3, #4
 1556 002c 03F00F03 		and	r3, r3, #15
 1557 0030 DA43     		mvns	r2, r3
 1558 0032 3B68     		ldr	r3, [r7]
 1559 0034 1340     		ands	r3, r3, r2
 1560 0036 03F00F03 		and	r3, r3, #15
 1561 003a 002B     		cmp	r3, #0
 1562 003c 04D1     		bne	.L89
 1563              		.loc 1 906 3 is_stmt 0 discriminator 2
 1564 003e 3B68     		ldr	r3, [r7]
 1565 0040 23F03303 		bic	r3, r3, #51
 1566 0044 002B     		cmp	r3, #0
 1567 0046 04D0     		beq	.L90
 1568              	.L89:
 1569              		.loc 1 906 3 discriminator 3
 1570 0048 40F28A31 		movw	r1, #906
 1571 004c 2648     		ldr	r0, .L96
 1572 004e FFF7FEFF 		bl	assert_failed
 1573              	.L90:
 907:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 908:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 909:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Secure item management (TZEN = 1) */
 910:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if ((Attributes & PWR_ITEM_ATTR_SEC_PRIV_MASK) == PWR_ITEM_ATTR_SEC_PRIV_MASK)
 1574              		.loc 1 910 19 is_stmt 1
 1575 0052 3B68     		ldr	r3, [r7]
 1576 0054 03F02003 		and	r3, r3, #32
 1577              		.loc 1 910 6
 1578 0058 002B     		cmp	r3, #0
 1579 005a 1FD0     		beq	.L91
 911:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 912:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Privilege item management */
 913:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     if ((Attributes & PWR_SEC_PRIV) == PWR_SEC_PRIV)
 1580              		.loc 1 913 21
 1581 005c 3B68     		ldr	r3, [r7]
 1582 005e 03F02203 		and	r3, r3, #34
 1583              		.loc 1 913 8
ARM GAS  /tmp/ccWziJYR.s 			page 49


 1584 0062 222B     		cmp	r3, #34
 1585 0064 0CD1     		bne	.L92
 914:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 915:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       SET_BIT(PWR_S->SECCFGR, Item);
 1586              		.loc 1 915 7
 1587 0066 214B     		ldr	r3, .L96+4
 1588 0068 1A6F     		ldr	r2, [r3, #112]
 1589 006a 2049     		ldr	r1, .L96+4
 1590 006c 7B68     		ldr	r3, [r7, #4]
 1591 006e 1343     		orrs	r3, r3, r2
 1592 0070 0B67     		str	r3, [r1, #112]
 916:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       SET_BIT(PWR->PRIVCFGR, Item);
 1593              		.loc 1 916 7
 1594 0072 1E4B     		ldr	r3, .L96+4
 1595 0074 5A6F     		ldr	r2, [r3, #116]
 1596 0076 1D49     		ldr	r1, .L96+4
 1597 0078 7B68     		ldr	r3, [r7, #4]
 1598 007a 1343     		orrs	r3, r3, r2
 1599 007c 4B67     		str	r3, [r1, #116]
 917:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 918:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     else
 919:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 920:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       SET_BIT(PWR_S->SECCFGR, Item);
 921:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       CLEAR_BIT(PWR->PRIVCFGR, Item);
 922:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 923:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 924:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* NSecure item management */
 925:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   else
 926:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 927:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Privilege item management */
 928:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     if ((Attributes & PWR_NSEC_PRIV) == PWR_NSEC_PRIV)
 929:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 930:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       CLEAR_BIT(PWR_S->SECCFGR, Item);
 931:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       SET_BIT(PWR->PRIVCFGR, Item);
 932:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 933:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     else
 934:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 935:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       CLEAR_BIT(PWR_S->SECCFGR, Item);
 936:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       CLEAR_BIT(PWR->PRIVCFGR, Item);
 937:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 938:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 939:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #else
 940:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* NSecure item management (TZEN = 0) */
 941:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if ((Attributes & PWR_ITEM_ATTR_NSEC_PRIV_MASK) == PWR_ITEM_ATTR_NSEC_PRIV_MASK)
 942:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 943:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Privilege item management */
 944:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     if ((Attributes & PWR_NSEC_PRIV) == PWR_NSEC_PRIV)
 945:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 946:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       SET_BIT(PWR->PRIVCFGR, Item);
 947:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 948:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     else
 949:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 950:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       CLEAR_BIT(PWR->PRIVCFGR, Item);
 951:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 952:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 953:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #endif /* __ARM_FEATURE_CMSE */
 954:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
ARM GAS  /tmp/ccWziJYR.s 			page 50


 1600              		.loc 1 954 1
 1601 007e 2EE0     		b	.L95
 1602              	.L92:
 920:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       CLEAR_BIT(PWR->PRIVCFGR, Item);
 1603              		.loc 1 920 7
 1604 0080 1A4B     		ldr	r3, .L96+4
 1605 0082 1A6F     		ldr	r2, [r3, #112]
 1606 0084 1949     		ldr	r1, .L96+4
 1607 0086 7B68     		ldr	r3, [r7, #4]
 1608 0088 1343     		orrs	r3, r3, r2
 1609 008a 0B67     		str	r3, [r1, #112]
 921:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 1610              		.loc 1 921 7
 1611 008c 174B     		ldr	r3, .L96+4
 1612 008e 5A6F     		ldr	r2, [r3, #116]
 1613 0090 7B68     		ldr	r3, [r7, #4]
 1614 0092 DB43     		mvns	r3, r3
 1615 0094 1549     		ldr	r1, .L96+4
 1616 0096 1340     		ands	r3, r3, r2
 1617 0098 4B67     		str	r3, [r1, #116]
 1618              		.loc 1 954 1
 1619 009a 20E0     		b	.L95
 1620              	.L91:
 928:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 1621              		.loc 1 928 21
 1622 009c 3B68     		ldr	r3, [r7]
 1623 009e 03F01103 		and	r3, r3, #17
 928:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 1624              		.loc 1 928 8
 1625 00a2 112B     		cmp	r3, #17
 1626 00a4 0DD1     		bne	.L94
 930:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       SET_BIT(PWR->PRIVCFGR, Item);
 1627              		.loc 1 930 7
 1628 00a6 114B     		ldr	r3, .L96+4
 1629 00a8 1A6F     		ldr	r2, [r3, #112]
 1630 00aa 7B68     		ldr	r3, [r7, #4]
 1631 00ac DB43     		mvns	r3, r3
 1632 00ae 0F49     		ldr	r1, .L96+4
 1633 00b0 1340     		ands	r3, r3, r2
 1634 00b2 0B67     		str	r3, [r1, #112]
 931:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 1635              		.loc 1 931 7
 1636 00b4 0D4B     		ldr	r3, .L96+4
 1637 00b6 5A6F     		ldr	r2, [r3, #116]
 1638 00b8 0C49     		ldr	r1, .L96+4
 1639 00ba 7B68     		ldr	r3, [r7, #4]
 1640 00bc 1343     		orrs	r3, r3, r2
 1641 00be 4B67     		str	r3, [r1, #116]
 1642              		.loc 1 954 1
 1643 00c0 0DE0     		b	.L95
 1644              	.L94:
 935:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       CLEAR_BIT(PWR->PRIVCFGR, Item);
 1645              		.loc 1 935 7
 1646 00c2 0A4B     		ldr	r3, .L96+4
 1647 00c4 1A6F     		ldr	r2, [r3, #112]
 1648 00c6 7B68     		ldr	r3, [r7, #4]
 1649 00c8 DB43     		mvns	r3, r3
ARM GAS  /tmp/ccWziJYR.s 			page 51


 1650 00ca 0849     		ldr	r1, .L96+4
 1651 00cc 1340     		ands	r3, r3, r2
 1652 00ce 0B67     		str	r3, [r1, #112]
 936:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 1653              		.loc 1 936 7
 1654 00d0 064B     		ldr	r3, .L96+4
 1655 00d2 5A6F     		ldr	r2, [r3, #116]
 1656 00d4 7B68     		ldr	r3, [r7, #4]
 1657 00d6 DB43     		mvns	r3, r3
 1658 00d8 0449     		ldr	r1, .L96+4
 1659 00da 1340     		ands	r3, r3, r2
 1660 00dc 4B67     		str	r3, [r1, #116]
 1661              	.L95:
 1662              		.loc 1 954 1
 1663 00de 00BF     		nop
 1664 00e0 0837     		adds	r7, r7, #8
 1665              		.cfi_def_cfa_offset 8
 1666 00e2 BD46     		mov	sp, r7
 1667              		.cfi_def_cfa_register 13
 1668              		@ sp needed
 1669 00e4 80BD     		pop	{r7, pc}
 1670              	.L97:
 1671 00e6 00BF     		.align	2
 1672              	.L96:
 1673 00e8 00000000 		.word	.LC0
 1674 00ec 00480256 		.word	1442990080
 1675              		.cfi_endproc
 1676              	.LFE859:
 1678              		.section	.text.HAL_PWR_GetConfigAttributes,"ax",%progbits
 1679              		.align	1
 1680              		.global	HAL_PWR_GetConfigAttributes
 1681              		.syntax unified
 1682              		.thumb
 1683              		.thumb_func
 1685              	HAL_PWR_GetConfigAttributes:
 1686              	.LFB860:
 955:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 956:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 957:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 958:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Get attribute(s) of a PWR item.
 959:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  Item        : Specifies the item(s) to get attributes on.
 960:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                       This parameter can be one of PWR_ITEMS.
 961:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  pAttributes : Pointer to return attribute(s).
 962:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                       Returned value could be on of PWR_ATTRIBUTES.
 963:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval HAL Status.
 964:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 965:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** HAL_StatusTypeDef HAL_PWR_GetConfigAttributes(uint32_t Item, uint32_t *pAttributes)
 966:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 1687              		.loc 1 966 1
 1688              		.cfi_startproc
 1689              		@ args = 0, pretend = 0, frame = 16
 1690              		@ frame_needed = 1, uses_anonymous_args = 0
 1691 0000 80B5     		push	{r7, lr}
 1692              		.cfi_def_cfa_offset 8
 1693              		.cfi_offset 7, -8
 1694              		.cfi_offset 14, -4
 1695 0002 84B0     		sub	sp, sp, #16
ARM GAS  /tmp/ccWziJYR.s 			page 52


 1696              		.cfi_def_cfa_offset 24
 1697 0004 00AF     		add	r7, sp, #0
 1698              		.cfi_def_cfa_register 7
 1699 0006 7860     		str	r0, [r7, #4]
 1700 0008 3960     		str	r1, [r7]
 967:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   uint32_t attributes;
 968:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 969:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check attribute pointer */
 970:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if (pAttributes == NULL)
 1701              		.loc 1 970 6
 1702 000a 3B68     		ldr	r3, [r7]
 1703 000c 002B     		cmp	r3, #0
 1704 000e 01D1     		bne	.L99
 971:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 972:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     return HAL_ERROR;
 1705              		.loc 1 972 12
 1706 0010 0123     		movs	r3, #1
 1707 0012 32E0     		b	.L100
 1708              	.L99:
 973:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 974:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 975:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameter */
 976:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   assert_param(IS_PWR_ITEMS_ATTRIBUTES(Item));
 1709              		.loc 1 976 3
 1710 0014 7B68     		ldr	r3, [r7, #4]
 1711 0016 23F47023 		bic	r3, r3, #983040
 1712 001a 23F0FF03 		bic	r3, r3, #255
 1713 001e 002B     		cmp	r3, #0
 1714 0020 02D1     		bne	.L101
 1715              		.loc 1 976 3 is_stmt 0 discriminator 2
 1716 0022 7B68     		ldr	r3, [r7, #4]
 1717 0024 002B     		cmp	r3, #0
 1718 0026 04D1     		bne	.L102
 1719              	.L101:
 1720              		.loc 1 976 3 discriminator 3
 1721 0028 4FF47471 		mov	r1, #976
 1722 002c 1548     		ldr	r0, .L107
 1723 002e FFF7FEFF 		bl	assert_failed
 1724              	.L102:
 977:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 978:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 979:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 980:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check item security */
 981:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if ((PWR->SECCFGR & Item) == Item)
 1725              		.loc 1 981 11 is_stmt 1
 1726 0032 154B     		ldr	r3, .L107+4
 1727 0034 1A6F     		ldr	r2, [r3, #112]
 1728              		.loc 1 981 21
 1729 0036 7B68     		ldr	r3, [r7, #4]
 1730 0038 1340     		ands	r3, r3, r2
 1731              		.loc 1 981 6
 1732 003a 7A68     		ldr	r2, [r7, #4]
 1733 003c 9A42     		cmp	r2, r3
 1734 003e 0CD1     		bne	.L103
 982:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 983:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     if ((PWR->PRIVCFGR & Item) == Item)
 1735              		.loc 1 983 13
ARM GAS  /tmp/ccWziJYR.s 			page 53


 1736 0040 114B     		ldr	r3, .L107+4
 1737 0042 5A6F     		ldr	r2, [r3, #116]
 1738              		.loc 1 983 24
 1739 0044 7B68     		ldr	r3, [r7, #4]
 1740 0046 1340     		ands	r3, r3, r2
 1741              		.loc 1 983 8
 1742 0048 7A68     		ldr	r2, [r7, #4]
 1743 004a 9A42     		cmp	r2, r3
 1744 004c 02D1     		bne	.L104
 984:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 985:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       attributes = PWR_SEC_PRIV;
 1745              		.loc 1 985 18
 1746 004e 2223     		movs	r3, #34
 1747 0050 FB60     		str	r3, [r7, #12]
 1748 0052 0EE0     		b	.L105
 1749              	.L104:
 986:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 987:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     else
 988:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 989:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       attributes = PWR_SEC_NPRIV;
 1750              		.loc 1 989 18
 1751 0054 2023     		movs	r3, #32
 1752 0056 FB60     		str	r3, [r7, #12]
 1753 0058 0BE0     		b	.L105
 1754              	.L103:
 990:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 991:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 992:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   else
 993:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 994:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     if ((PWR->PRIVCFGR & Item) == Item)
 1755              		.loc 1 994 13
 1756 005a 0B4B     		ldr	r3, .L107+4
 1757 005c 5A6F     		ldr	r2, [r3, #116]
 1758              		.loc 1 994 24
 1759 005e 7B68     		ldr	r3, [r7, #4]
 1760 0060 1340     		ands	r3, r3, r2
 1761              		.loc 1 994 8
 1762 0062 7A68     		ldr	r2, [r7, #4]
 1763 0064 9A42     		cmp	r2, r3
 1764 0066 02D1     		bne	.L106
 995:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 996:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       attributes = PWR_NSEC_PRIV;
 1765              		.loc 1 996 18
 1766 0068 1123     		movs	r3, #17
 1767 006a FB60     		str	r3, [r7, #12]
 1768 006c 01E0     		b	.L105
 1769              	.L106:
 997:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 998:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     else
 999:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
1000:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       attributes = PWR_NSEC_NPRIV;
 1770              		.loc 1 1000 18
 1771 006e 1023     		movs	r3, #16
 1772 0070 FB60     		str	r3, [r7, #12]
 1773              	.L105:
1001:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
1002:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
ARM GAS  /tmp/ccWziJYR.s 			page 54


1003:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #else
1004:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if ((PWR->PRIVCFGR & Item) == Item)
1005:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
1006:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     attributes = PWR_NSEC_PRIV;
1007:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
1008:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   else
1009:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
1010:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     attributes = PWR_NSEC_NPRIV;
1011:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
1012:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #endif /* __ARM_FEATURE_CMSE */
1013:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
1014:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* return value */
1015:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *pAttributes = attributes;
 1774              		.loc 1 1015 16
 1775 0072 3B68     		ldr	r3, [r7]
 1776 0074 FA68     		ldr	r2, [r7, #12]
 1777 0076 1A60     		str	r2, [r3]
1016:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
1017:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   return HAL_OK;
 1778              		.loc 1 1017 10
 1779 0078 0023     		movs	r3, #0
 1780              	.L100:
1018:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 1781              		.loc 1 1018 1
 1782 007a 1846     		mov	r0, r3
 1783 007c 1037     		adds	r7, r7, #16
 1784              		.cfi_def_cfa_offset 8
 1785 007e BD46     		mov	sp, r7
 1786              		.cfi_def_cfa_register 13
 1787              		@ sp needed
 1788 0080 80BD     		pop	{r7, pc}
 1789              	.L108:
 1790 0082 00BF     		.align	2
 1791              	.L107:
 1792 0084 00000000 		.word	.LC0
 1793 0088 00480256 		.word	1442990080
 1794              		.cfi_endproc
 1795              	.LFE860:
 1797              		.text
 1798              	.Letext0:
 1799              		.file 3 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 1800              		.file 4 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 1801              		.file 5 "STM32Cube_FW_N6/Drivers/CMSIS/Include/core_cm55.h"
 1802              		.file 6 "STM32Cube_FW_N6/Drivers/CMSIS/Device/ST/STM32N6xx/Include/stm32n657xx.h"
 1803              		.file 7 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_def.h"
 1804              		.file 8 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_pwr.h"
 1805              		.file 9 "Inc/stm32n6xx_hal_conf.h"
ARM GAS  /tmp/ccWziJYR.s 			page 55


DEFINED SYMBOLS
                            *ABS*:00000000 stm32n6xx_hal_pwr.c
     /tmp/ccWziJYR.s:26     .text.HAL_PWR_DeInit:00000000 $t
     /tmp/ccWziJYR.s:32     .text.HAL_PWR_DeInit:00000000 HAL_PWR_DeInit
     /tmp/ccWziJYR.s:57     .text.HAL_PWR_EnableBkUpAccess:00000000 $t
     /tmp/ccWziJYR.s:63     .text.HAL_PWR_EnableBkUpAccess:00000000 HAL_PWR_EnableBkUpAccess
     /tmp/ccWziJYR.s:91     .text.HAL_PWR_EnableBkUpAccess:00000014 $d
     /tmp/ccWziJYR.s:96     .text.HAL_PWR_DisableBkUpAccess:00000000 $t
     /tmp/ccWziJYR.s:102    .text.HAL_PWR_DisableBkUpAccess:00000000 HAL_PWR_DisableBkUpAccess
     /tmp/ccWziJYR.s:130    .text.HAL_PWR_DisableBkUpAccess:00000014 $d
     /tmp/ccWziJYR.s:135    .rodata:00000000 $d
     /tmp/ccWziJYR.s:140    .text.HAL_PWR_ConfigPVD:00000000 $t
     /tmp/ccWziJYR.s:146    .text.HAL_PWR_ConfigPVD:00000000 HAL_PWR_ConfigPVD
     /tmp/ccWziJYR.s:300    .text.HAL_PWR_ConfigPVD:00000100 $d
     /tmp/ccWziJYR.s:310    .text.HAL_PWR_EnablePVD:00000000 $t
     /tmp/ccWziJYR.s:316    .text.HAL_PWR_EnablePVD:00000000 HAL_PWR_EnablePVD
     /tmp/ccWziJYR.s:346    .text.HAL_PWR_EnablePVD:0000001c $d
     /tmp/ccWziJYR.s:351    .text.HAL_PWR_DisablePVD:00000000 $t
     /tmp/ccWziJYR.s:357    .text.HAL_PWR_DisablePVD:00000000 HAL_PWR_DisablePVD
     /tmp/ccWziJYR.s:387    .text.HAL_PWR_DisablePVD:0000001c $d
     /tmp/ccWziJYR.s:392    .text.HAL_PWR_EnableWakeUpPin:00000000 $t
     /tmp/ccWziJYR.s:398    .text.HAL_PWR_EnableWakeUpPin:00000000 HAL_PWR_EnableWakeUpPin
     /tmp/ccWziJYR.s:488    .text.HAL_PWR_EnableWakeUpPin:00000080 $d
     /tmp/ccWziJYR.s:494    .text.HAL_PWR_DisableWakeUpPin:00000000 $t
     /tmp/ccWziJYR.s:500    .text.HAL_PWR_DisableWakeUpPin:00000000 HAL_PWR_DisableWakeUpPin
     /tmp/ccWziJYR.s:592    .text.HAL_PWR_DisableWakeUpPin:00000084 $d
     /tmp/ccWziJYR.s:598    .text.HAL_PWR_GetWakeupFlag:00000000 $t
     /tmp/ccWziJYR.s:604    .text.HAL_PWR_GetWakeupFlag:00000000 HAL_PWR_GetWakeupFlag
     /tmp/ccWziJYR.s:661    .text.HAL_PWR_GetWakeupFlag:00000040 $d
     /tmp/ccWziJYR.s:667    .text.HAL_PWR_ClearWakeupFlag:00000000 $t
     /tmp/ccWziJYR.s:673    .text.HAL_PWR_ClearWakeupFlag:00000000 HAL_PWR_ClearWakeupFlag
     /tmp/ccWziJYR.s:744    .text.HAL_PWR_ClearWakeupFlag:00000050 $d
     /tmp/ccWziJYR.s:750    .text.HAL_PWR_EnterSLEEPMode:00000000 $t
     /tmp/ccWziJYR.s:756    .text.HAL_PWR_EnterSLEEPMode:00000000 HAL_PWR_EnterSLEEPMode
     /tmp/ccWziJYR.s:845    .text.HAL_PWR_EnterSLEEPMode:00000054 $d
     /tmp/ccWziJYR.s:851    .text.HAL_PWR_EnterSTOPMode:00000000 $t
     /tmp/ccWziJYR.s:857    .text.HAL_PWR_EnterSTOPMode:00000000 HAL_PWR_EnterSTOPMode
     /tmp/ccWziJYR.s:984    .text.HAL_PWR_EnterSTOPMode:00000078 $d
     /tmp/ccWziJYR.s:991    .text.HAL_PWR_EnterSTANDBYMode:00000000 $t
     /tmp/ccWziJYR.s:997    .text.HAL_PWR_EnterSTANDBYMode:00000000 HAL_PWR_EnterSTANDBYMode
     /tmp/ccWziJYR.s:1066   .text.HAL_PWR_EnterSTANDBYMode:00000034 $d
     /tmp/ccWziJYR.s:1072   .text.HAL_PWR_EnableSleepOnExit:00000000 $t
     /tmp/ccWziJYR.s:1078   .text.HAL_PWR_EnableSleepOnExit:00000000 HAL_PWR_EnableSleepOnExit
     /tmp/ccWziJYR.s:1108   .text.HAL_PWR_EnableSleepOnExit:0000001c $d
     /tmp/ccWziJYR.s:1113   .text.HAL_PWR_DisableSleepOnExit:00000000 $t
     /tmp/ccWziJYR.s:1119   .text.HAL_PWR_DisableSleepOnExit:00000000 HAL_PWR_DisableSleepOnExit
     /tmp/ccWziJYR.s:1149   .text.HAL_PWR_DisableSleepOnExit:0000001c $d
     /tmp/ccWziJYR.s:1154   .text.HAL_PWR_EnableSEVOnPend:00000000 $t
     /tmp/ccWziJYR.s:1160   .text.HAL_PWR_EnableSEVOnPend:00000000 HAL_PWR_EnableSEVOnPend
     /tmp/ccWziJYR.s:1190   .text.HAL_PWR_EnableSEVOnPend:0000001c $d
     /tmp/ccWziJYR.s:1195   .text.HAL_PWR_DisableSEVOnPend:00000000 $t
     /tmp/ccWziJYR.s:1201   .text.HAL_PWR_DisableSEVOnPend:00000000 HAL_PWR_DisableSEVOnPend
     /tmp/ccWziJYR.s:1231   .text.HAL_PWR_DisableSEVOnPend:0000001c $d
     /tmp/ccWziJYR.s:1236   .text.HAL_PWR_PVD_Rising_Callback:00000000 $t
     /tmp/ccWziJYR.s:1242   .text.HAL_PWR_PVD_Rising_Callback:00000000 HAL_PWR_PVD_Rising_Callback
     /tmp/ccWziJYR.s:1267   .text.HAL_PWR_PVD_Falling_Callback:00000000 $t
     /tmp/ccWziJYR.s:1273   .text.HAL_PWR_PVD_Falling_Callback:00000000 HAL_PWR_PVD_Falling_Callback
ARM GAS  /tmp/ccWziJYR.s 			page 56


     /tmp/ccWziJYR.s:1298   .text.HAL_PWR_WAKEUP_PIN_IRQHandler:00000000 $t
     /tmp/ccWziJYR.s:1304   .text.HAL_PWR_WAKEUP_PIN_IRQHandler:00000000 HAL_PWR_WAKEUP_PIN_IRQHandler
     /tmp/ccWziJYR.s:1397   .text.HAL_PWR_WKUP1_Callback:00000000 HAL_PWR_WKUP1_Callback
     /tmp/ccWziJYR.s:1428   .text.HAL_PWR_WKUP2_Callback:00000000 HAL_PWR_WKUP2_Callback
     /tmp/ccWziJYR.s:1459   .text.HAL_PWR_WKUP3_Callback:00000000 HAL_PWR_WKUP3_Callback
     /tmp/ccWziJYR.s:1490   .text.HAL_PWR_WKUP4_Callback:00000000 HAL_PWR_WKUP4_Callback
     /tmp/ccWziJYR.s:1386   .text.HAL_PWR_WAKEUP_PIN_IRQHandler:00000078 $d
     /tmp/ccWziJYR.s:1391   .text.HAL_PWR_WKUP1_Callback:00000000 $t
     /tmp/ccWziJYR.s:1422   .text.HAL_PWR_WKUP2_Callback:00000000 $t
     /tmp/ccWziJYR.s:1453   .text.HAL_PWR_WKUP3_Callback:00000000 $t
     /tmp/ccWziJYR.s:1484   .text.HAL_PWR_WKUP4_Callback:00000000 $t
     /tmp/ccWziJYR.s:1515   .text.HAL_PWR_ConfigAttributes:00000000 $t
     /tmp/ccWziJYR.s:1521   .text.HAL_PWR_ConfigAttributes:00000000 HAL_PWR_ConfigAttributes
     /tmp/ccWziJYR.s:1673   .text.HAL_PWR_ConfigAttributes:000000e8 $d
     /tmp/ccWziJYR.s:1679   .text.HAL_PWR_GetConfigAttributes:00000000 $t
     /tmp/ccWziJYR.s:1685   .text.HAL_PWR_GetConfigAttributes:00000000 HAL_PWR_GetConfigAttributes
     /tmp/ccWziJYR.s:1792   .text.HAL_PWR_GetConfigAttributes:00000084 $d
                           .group:00000000 wm4.0.2a10773746a5c5ebb5552f50e466f80b
                           .group:00000000 wm4.stm32n6xx_hal_conf.h.21.004a06df6e15ac197e03f723792da58a
                           .group:00000000 wm4.stddef.h.39.0dc9006b34572d4d9cae4c8b422c4971
                           .group:00000000 wm4.arm_cmse.h.103.a0d15a79c4c9a67da8d5831704d7248e
                           .group:00000000 wm4.stm32n6xx.h.34.80585dd08aa426c932f6311fdb7386da
                           .group:00000000 wm4.stm32n657xx.h.26.acd272cb67318cc1a4791ce2f0720ca6
                           .group:00000000 wm4._newlib_version.h.4.411db44ea2338a62eca2f0777f81481b
                           .group:00000000 wm4.features.h.33.e0c9f337c65cb9f22ed5f23d082bc78b
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.cmsis_version.h.32.0ac195c83bb4537824e6ad1c47474b79
                           .group:00000000 wm4.core_cm55.h.68.832d5cf835639cc0d28219c3d2867330
                           .group:00000000 wm4.cmsis_gcc.h.26.7a5fd1a99dbedde687044a4433ab3e15
                           .group:00000000 wm4.core_cm55.h.196.52e437a270752da561676e507b35baeb
                           .group:00000000 wm4.mpu_armv8.h.32.9d72426c8e2b47753456dcb84802c5b3
                           .group:00000000 wm4.pmu_armv8.h.32.eaa95f88a71b29390b135fd81c071b6b
                           .group:00000000 wm4.core_cm55.h.4411.860dad8650880893dd57b815844f7186
                           .group:00000000 wm4.cachel1_armv7.h.32.abd77761a989e008b0c60891114a33c7
                           .group:00000000 wm4.stm32n657xx.h.575.1c2a5e6bedffc6f9083dcc857bc6d09d
                           .group:00000000 wm4.stm32n6xx.h.114.5cf793d8af485e14f110e3e24bde1aa5
                           .group:00000000 wm4.stm32_hal_legacy.h.22.87fb12bf5a1a1e00fc134f22bc9aa8c4
                           .group:00000000 wm4.newlib.h.7.591ac1bd65c1f5b34864757667a05252
                           .group:00000000 wm4.ieeefp.h.77.bd5feb87d9990dd328793ced294f6a87
                           .group:00000000 wm4.config.h.224.10ee1ad185d877c6e334e6581faab44d
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.cdefs.h.49.70fc7af612f78ddcace70fdd90b5623b
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.158.6f8e08a347b1cff664332fa350bfceb3
                           .group:00000000 wm4._types.h.127.3bdfe3ff8ea2d0985b03d9cbe93480e3
                           .group:00000000 wm4.reent.h.18.25503cdc8b7e55dd0d6ea7b3e5af7a03
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.78.6b87466b04591b1f1cb88c14fdf2ba9e
                           .group:00000000 wm4.math.h.13.47cfc34cae8a1153323939c4d32cf7c2
                           .group:00000000 wm4.stm32n6xx_hal_def.h.63.3a8f01490e8852464e9fcb69092e9c75
                           .group:00000000 wm4.stm32n6xx_ll_bus.h.38.2366a295ee4cdb04833997d3787fcd2d
                           .group:00000000 wm4.stm32n6xx_ll_rcc.h.21.002e22a16fd7f67dde6dce41e8ba9620
                           .group:00000000 wm4.stm32n6xx_hal_rcc.h.194.1cb1283e40f9bebcd3fba2a9a961838e
                           .group:00000000 wm4.stm32n6xx_hal_rcc_ex.h.21.79aa32178dfef625fbd20d362449acfa
ARM GAS  /tmp/ccWziJYR.s 			page 57


                           .group:00000000 wm4.stm32n6xx_hal_rcc.h.4359.3f0b7ad33826d95438602c9aebc08af9
                           .group:00000000 wm4.stm32n6xx_hal_gpio.h.21.89d54af663b98eb8fc098192053f7eeb
                           .group:00000000 wm4.stm32n6xx_hal_gpio_ex.h.22.4acb2e3511a98bb48b81cfc8e09fd59e
                           .group:00000000 wm4.stm32n6xx_hal_rif.h.21.424d0bafb874a777dee3742a22e13037
                           .group:00000000 wm4.stm32n6xx_hal_dma.h.21.61e48c5c2e8d25d22177834b232fe45c
                           .group:00000000 wm4.stm32n6xx_hal_dma_ex.h.21.66e597beb090a165329d6ccf665e41bc
                           .group:00000000 wm4.stm32n6xx_hal_dma.h.1020.87e2180c009560b617c1f8208140c950
                           .group:00000000 wm4.stm32n6xx_hal_cortex.h.21.f493623cc58f9454ab4eae41e395c5cc
                           .group:00000000 wm4.stm32n6xx_hal_bsec.h.21.61b309e67dd810e28897a01b1b21a97f
                           .group:00000000 wm4.stm32n6xx_hal_dcmipp.h.21.f538bfd785c6469670251ac9bc7af55d
                           .group:00000000 wm4.stm32n6xx_hal_dma2d.h.21.75c8d46cdbb72970123b3f34ae2043d7
                           .group:00000000 wm4.stm32n6xx_hal_exti.h.21.fda87e715ea6b98239ec30171d1df594
                           .group:00000000 wm4.stm32n6xx_hal_gfxmmu.h.21.9784a9103143d48bd3c37389d0e0b8e6
                           .group:00000000 wm4.stm32n6xx_hal_i2c.h.21.3f483626ff64c5bf027265bb2e1d1331
                           .group:00000000 wm4.stm32n6xx_hal_i2c_ex.h.21.79e9196c22282cdaf6b4047893638c45
                           .group:00000000 wm4.stm32n6xx_hal_i2c.h.741.1084702632703acc669e4282b3043372
                           .group:00000000 wm4.stm32n6xx_hal_icache.h.21.194b4ec6e76f32b14f65c85616854850
                           .group:00000000 wm4.stm32n6xx_hal_ltdc.h.21.ae1eb09930e7e550e48e418ac5849e4d
                           .group:00000000 wm4.stm32n6xx_hal_ltdc.h.1002.b13ede7fc94ed5ad1c6768a157d2149a
                           .group:00000000 wm4.stm32n6xx_ll_usb.h.21.d518a5d97876c2ff49040c20a2c4a120
                           .group:00000000 wm4.stm32n6xx_hal_pcd.h.155.27040aac6844effe2af8c180caf1dd2e
                           .group:00000000 wm4.stm32n6xx_hal_pwr.h.21.cdb73e4869c3fed3fc84f901ec0e5f0a
                           .group:00000000 wm4.stm32n6xx_hal_pwr_ex.h.21.1a673224a58b0c1e5fad8eeda6514208
                           .group:00000000 wm4.stm32n6xx_hal_ramcfg.h.21.a62dfbb4d2c14e9a8c634a215e37bd3d
                           .group:00000000 wm4.stm32n6xx_hal_spi.h.21.9f810303326e2d91749800e9911f8e4d
                           .group:00000000 wm4.stm32n6xx_hal_spi.h.906.93ec0695066db4253cdbcb7d84358a0b
                           .group:00000000 wm4.stm32n6xx_hal_tim.h.21.839dd2b2a70382fb2c44f8f293a84d5f
                           .group:00000000 wm4.stm32n6xx_hal_tim_ex.h.21.e372d5ac63c13441211ea4ecbd353150
                           .group:00000000 wm4.stm32n6xx_hal_uart.h.21.230f549bfa0d5ebfd77bfb311b2aca15
                           .group:00000000 wm4.stm32n6xx_hal_uart_ex.h.21.a0d5511e1d0703b7b5278c8f5472b96d
                           .group:00000000 wm4.stm32n6xx_hal_xspi.h.21.e17898be2073b6b6b19faf30b4e304e9
                           .group:00000000 wm4.stm32n6xx_hal_cacheaxi.h.21.7c3375b7903ec42376e4883320997f74
                           .group:00000000 wm4.stm32n6xx_hal_gpu2d.h.21.48d0249122abad294a630c39cc4ebaed
                           .group:00000000 wm4.stm32n6xx_hal.h.81.5e59143eba07faca3e9aeaa5470826c8

UNDEFINED SYMBOLS
assert_failed
