ARM GAS  /tmp/ccS51NaV.s 			page 1


   1              		.arch armv8.1-m.main
   2              		.fpu fpv5-d16
   3              		.arch_extension dsp
   4              		.arch_extension fp
   5              		.arch_extension fp.dp
   6              		.arch_extension mve
   7              		.arch_extension mve.fp
   8              		.eabi_attribute 5, "cortex-m55"
   9              		.eabi_attribute 28, 1
  10              		.eabi_attribute 20, 1
  11              		.eabi_attribute 21, 1
  12              		.eabi_attribute 23, 3
  13              		.eabi_attribute 24, 1
  14              		.eabi_attribute 25, 1
  15              		.eabi_attribute 26, 1
  16              		.eabi_attribute 30, 6
  17              		.eabi_attribute 34, 1
  18              		.eabi_attribute 38, 1
  19              		.eabi_attribute 18, 4
  20              		.file	"event_groups.c"
  21              		.text
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.file 1 "Lib/FreeRTOS/Source/event_groups.c"
  25              		.section	.rodata
  26              		.align	2
  27              	.LC0:
  28 0000 3000     		.ascii	"0\000"
  29 0002 0000     		.align	2
  30              	.LC1:
  31 0004 4C69622F 		.ascii	"Lib/FreeRTOS/Source/event_groups.c\000"
  31      46726565 
  31      52544F53 
  31      2F536F75 
  31      7263652F 
  32              		.section	.text.xEventGroupCreateStatic,"ax",%progbits
  33              		.align	1
  34              		.global	xEventGroupCreateStatic
  35              		.syntax unified
  36              		.thumb
  37              		.thumb_func
  39              	xEventGroupCreateStatic:
  40              	.LFB0:
   1:Lib/FreeRTOS/Source/event_groups.c **** /*
   2:Lib/FreeRTOS/Source/event_groups.c ****  * FreeRTOS Kernel V10.6.2
   3:Lib/FreeRTOS/Source/event_groups.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Lib/FreeRTOS/Source/event_groups.c ****  *
   5:Lib/FreeRTOS/Source/event_groups.c ****  * SPDX-License-Identifier: MIT
   6:Lib/FreeRTOS/Source/event_groups.c ****  *
   7:Lib/FreeRTOS/Source/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:Lib/FreeRTOS/Source/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:Lib/FreeRTOS/Source/event_groups.c ****  * the Software without restriction, including without limitation the rights to
  10:Lib/FreeRTOS/Source/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:Lib/FreeRTOS/Source/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:Lib/FreeRTOS/Source/event_groups.c ****  * subject to the following conditions:
  13:Lib/FreeRTOS/Source/event_groups.c ****  *
  14:Lib/FreeRTOS/Source/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
ARM GAS  /tmp/ccS51NaV.s 			page 2


  15:Lib/FreeRTOS/Source/event_groups.c ****  * copies or substantial portions of the Software.
  16:Lib/FreeRTOS/Source/event_groups.c ****  *
  17:Lib/FreeRTOS/Source/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:Lib/FreeRTOS/Source/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:Lib/FreeRTOS/Source/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:Lib/FreeRTOS/Source/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:Lib/FreeRTOS/Source/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:Lib/FreeRTOS/Source/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:Lib/FreeRTOS/Source/event_groups.c ****  *
  24:Lib/FreeRTOS/Source/event_groups.c ****  * https://www.FreeRTOS.org
  25:Lib/FreeRTOS/Source/event_groups.c ****  * https://github.com/FreeRTOS
  26:Lib/FreeRTOS/Source/event_groups.c ****  *
  27:Lib/FreeRTOS/Source/event_groups.c ****  */
  28:Lib/FreeRTOS/Source/event_groups.c **** 
  29:Lib/FreeRTOS/Source/event_groups.c **** /* Standard includes. */
  30:Lib/FreeRTOS/Source/event_groups.c **** #include <stdlib.h>
  31:Lib/FreeRTOS/Source/event_groups.c **** 
  32:Lib/FreeRTOS/Source/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Lib/FreeRTOS/Source/event_groups.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:Lib/FreeRTOS/Source/event_groups.c ****  * task.h is included from an application file. */
  35:Lib/FreeRTOS/Source/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Lib/FreeRTOS/Source/event_groups.c **** 
  37:Lib/FreeRTOS/Source/event_groups.c **** /* FreeRTOS includes. */
  38:Lib/FreeRTOS/Source/event_groups.c **** #include "FreeRTOS.h"
  39:Lib/FreeRTOS/Source/event_groups.c **** #include "task.h"
  40:Lib/FreeRTOS/Source/event_groups.c **** #include "timers.h"
  41:Lib/FreeRTOS/Source/event_groups.c **** #include "event_groups.h"
  42:Lib/FreeRTOS/Source/event_groups.c **** 
  43:Lib/FreeRTOS/Source/event_groups.c **** /* Lint e961, e750 and e9021 are suppressed as a MISRA exception justified
  44:Lib/FreeRTOS/Source/event_groups.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Lib/FreeRTOS/Source/event_groups.c ****  * for the header files above, but not in this file, in order to generate the
  46:Lib/FreeRTOS/Source/event_groups.c ****  * correct privileged Vs unprivileged linkage and placement. */
  47:Lib/FreeRTOS/Source/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021 See comment above. */
  48:Lib/FreeRTOS/Source/event_groups.c **** 
  49:Lib/FreeRTOS/Source/event_groups.c **** typedef struct EventGroupDef_t
  50:Lib/FreeRTOS/Source/event_groups.c **** {
  51:Lib/FreeRTOS/Source/event_groups.c ****     EventBits_t uxEventBits;
  52:Lib/FreeRTOS/Source/event_groups.c ****     List_t xTasksWaitingForBits; /**< List of tasks waiting for a bit to be set. */
  53:Lib/FreeRTOS/Source/event_groups.c **** 
  54:Lib/FreeRTOS/Source/event_groups.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
  55:Lib/FreeRTOS/Source/event_groups.c ****         UBaseType_t uxEventGroupNumber;
  56:Lib/FreeRTOS/Source/event_groups.c ****     #endif
  57:Lib/FreeRTOS/Source/event_groups.c **** 
  58:Lib/FreeRTOS/Source/event_groups.c ****     #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  59:Lib/FreeRTOS/Source/event_groups.c ****         uint8_t ucStaticallyAllocated; /**< Set to pdTRUE if the event group is statically allocate
  60:Lib/FreeRTOS/Source/event_groups.c ****     #endif
  61:Lib/FreeRTOS/Source/event_groups.c **** } EventGroup_t;
  62:Lib/FreeRTOS/Source/event_groups.c **** 
  63:Lib/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  64:Lib/FreeRTOS/Source/event_groups.c **** 
  65:Lib/FreeRTOS/Source/event_groups.c **** /*
  66:Lib/FreeRTOS/Source/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  67:Lib/FreeRTOS/Source/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  68:Lib/FreeRTOS/Source/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  69:Lib/FreeRTOS/Source/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  70:Lib/FreeRTOS/Source/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  71:Lib/FreeRTOS/Source/event_groups.c ****  * in uxCurrentEventBits.
ARM GAS  /tmp/ccS51NaV.s 			page 3


  72:Lib/FreeRTOS/Source/event_groups.c ****  */
  73:Lib/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
  74:Lib/FreeRTOS/Source/event_groups.c ****                                         const EventBits_t uxBitsToWaitFor,
  75:Lib/FreeRTOS/Source/event_groups.c ****                                         const BaseType_t xWaitForAllBits ) PRIVILEGED_FUNCTION;
  76:Lib/FreeRTOS/Source/event_groups.c **** 
  77:Lib/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  78:Lib/FreeRTOS/Source/event_groups.c **** 
  79:Lib/FreeRTOS/Source/event_groups.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
  80:Lib/FreeRTOS/Source/event_groups.c **** 
  81:Lib/FreeRTOS/Source/event_groups.c ****     EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t * pxEventGroupBuffer )
  82:Lib/FreeRTOS/Source/event_groups.c ****     {
  41              		.loc 1 82 5
  42              		.cfi_startproc
  43              		@ args = 0, pretend = 0, frame = 16
  44              		@ frame_needed = 1, uses_anonymous_args = 0
  45 0000 80B5     		push	{r7, lr}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 7, -8
  48              		.cfi_offset 14, -4
  49 0002 84B0     		sub	sp, sp, #16
  50              		.cfi_def_cfa_offset 24
  51 0004 00AF     		add	r7, sp, #0
  52              		.cfi_def_cfa_register 7
  53 0006 7860     		str	r0, [r7, #4]
  83:Lib/FreeRTOS/Source/event_groups.c ****         EventGroup_t * pxEventBits;
  84:Lib/FreeRTOS/Source/event_groups.c **** 
  85:Lib/FreeRTOS/Source/event_groups.c ****         /* A StaticEventGroup_t object must be provided. */
  86:Lib/FreeRTOS/Source/event_groups.c ****         configASSERT( pxEventGroupBuffer );
  54              		.loc 1 86 9
  55 0008 7B68     		ldr	r3, [r7, #4]
  56 000a 002B     		cmp	r3, #0
  57 000c 07D1     		bne	.L2
  58              		.loc 1 86 9 is_stmt 0 discriminator 1
  59 000e FFF7FEFF 		bl	ulSetInterruptMask
  60 0012 124B     		ldr	r3, .L6
  61 0014 124A     		ldr	r2, .L6+4
  62 0016 5621     		movs	r1, #86
  63 0018 1248     		ldr	r0, .L6+8
  64 001a FFF7FEFF 		bl	__assert_func
  65              	.L2:
  66              	.LBB2:
  87:Lib/FreeRTOS/Source/event_groups.c **** 
  88:Lib/FreeRTOS/Source/event_groups.c ****         #if ( configASSERT_DEFINED == 1 )
  89:Lib/FreeRTOS/Source/event_groups.c ****         {
  90:Lib/FreeRTOS/Source/event_groups.c ****             /* Sanity check that the size of the structure used to declare a
  91:Lib/FreeRTOS/Source/event_groups.c ****              * variable of type StaticEventGroup_t equals the size of the real
  92:Lib/FreeRTOS/Source/event_groups.c ****              * event group structure. */
  93:Lib/FreeRTOS/Source/event_groups.c ****             volatile size_t xSize = sizeof( StaticEventGroup_t );
  67              		.loc 1 93 29 is_stmt 1
  68 001e 1C23     		movs	r3, #28
  69 0020 BB60     		str	r3, [r7, #8]
  94:Lib/FreeRTOS/Source/event_groups.c ****             configASSERT( xSize == sizeof( EventGroup_t ) );
  70              		.loc 1 94 13
  71 0022 BB68     		ldr	r3, [r7, #8]
  72 0024 1C2B     		cmp	r3, #28
  73 0026 07D0     		beq	.L3
  74              		.loc 1 94 13 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccS51NaV.s 			page 4


  75 0028 FFF7FEFF 		bl	ulSetInterruptMask
  76 002c 0B4B     		ldr	r3, .L6
  77 002e 0C4A     		ldr	r2, .L6+4
  78 0030 5E21     		movs	r1, #94
  79 0032 0C48     		ldr	r0, .L6+8
  80 0034 FFF7FEFF 		bl	__assert_func
  81              	.L3:
  82              	.LBE2:
  95:Lib/FreeRTOS/Source/event_groups.c ****         } /*lint !e529 xSize is referenced if configASSERT() is defined. */
  96:Lib/FreeRTOS/Source/event_groups.c ****         #endif /* configASSERT_DEFINED */
  97:Lib/FreeRTOS/Source/event_groups.c **** 
  98:Lib/FreeRTOS/Source/event_groups.c ****         /* The user has provided a statically allocated event group - use it. */
  99:Lib/FreeRTOS/Source/event_groups.c ****         pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and S
  83              		.loc 1 99 21 is_stmt 1
  84 0038 7B68     		ldr	r3, [r7, #4]
  85 003a FB60     		str	r3, [r7, #12]
 100:Lib/FreeRTOS/Source/event_groups.c **** 
 101:Lib/FreeRTOS/Source/event_groups.c ****         if( pxEventBits != NULL )
  86              		.loc 1 101 11
  87 003c FB68     		ldr	r3, [r7, #12]
  88 003e 002B     		cmp	r3, #0
  89 0040 07D0     		beq	.L4
 102:Lib/FreeRTOS/Source/event_groups.c ****         {
 103:Lib/FreeRTOS/Source/event_groups.c ****             pxEventBits->uxEventBits = 0;
  90              		.loc 1 103 38
  91 0042 FB68     		ldr	r3, [r7, #12]
  92 0044 0022     		movs	r2, #0
  93 0046 1A60     		str	r2, [r3]
 104:Lib/FreeRTOS/Source/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
  94              		.loc 1 104 13
  95 0048 FB68     		ldr	r3, [r7, #12]
  96 004a 0433     		adds	r3, r3, #4
  97 004c 1846     		mov	r0, r3
  98 004e FFF7FEFF 		bl	vListInitialise
  99              	.L4:
 105:Lib/FreeRTOS/Source/event_groups.c **** 
 106:Lib/FreeRTOS/Source/event_groups.c ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 107:Lib/FreeRTOS/Source/event_groups.c ****             {
 108:Lib/FreeRTOS/Source/event_groups.c ****                 /* Both static and dynamic allocation can be used, so note that
 109:Lib/FreeRTOS/Source/event_groups.c ****                  * this event group was created statically in case the event group
 110:Lib/FreeRTOS/Source/event_groups.c ****                  * is later deleted. */
 111:Lib/FreeRTOS/Source/event_groups.c ****                 pxEventBits->ucStaticallyAllocated = pdTRUE;
 112:Lib/FreeRTOS/Source/event_groups.c ****             }
 113:Lib/FreeRTOS/Source/event_groups.c ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 114:Lib/FreeRTOS/Source/event_groups.c **** 
 115:Lib/FreeRTOS/Source/event_groups.c ****             traceEVENT_GROUP_CREATE( pxEventBits );
 116:Lib/FreeRTOS/Source/event_groups.c ****         }
 117:Lib/FreeRTOS/Source/event_groups.c ****         else
 118:Lib/FreeRTOS/Source/event_groups.c ****         {
 119:Lib/FreeRTOS/Source/event_groups.c ****             /* xEventGroupCreateStatic should only ever be called with
 120:Lib/FreeRTOS/Source/event_groups.c ****              * pxEventGroupBuffer pointing to a pre-allocated (compile time
 121:Lib/FreeRTOS/Source/event_groups.c ****              * allocated) StaticEventGroup_t variable. */
 122:Lib/FreeRTOS/Source/event_groups.c ****             traceEVENT_GROUP_CREATE_FAILED();
 123:Lib/FreeRTOS/Source/event_groups.c ****         }
 124:Lib/FreeRTOS/Source/event_groups.c **** 
 125:Lib/FreeRTOS/Source/event_groups.c ****         return pxEventBits;
 100              		.loc 1 125 16
ARM GAS  /tmp/ccS51NaV.s 			page 5


 101 0052 FB68     		ldr	r3, [r7, #12]
 126:Lib/FreeRTOS/Source/event_groups.c ****     }
 102              		.loc 1 126 5
 103 0054 1846     		mov	r0, r3
 104 0056 1037     		adds	r7, r7, #16
 105              		.cfi_def_cfa_offset 8
 106 0058 BD46     		mov	sp, r7
 107              		.cfi_def_cfa_register 13
 108              		@ sp needed
 109 005a 80BD     		pop	{r7, pc}
 110              	.L7:
 111              		.align	2
 112              	.L6:
 113 005c 00000000 		.word	.LC0
 114 0060 00000000 		.word	__func__.6
 115 0064 04000000 		.word	.LC1
 116              		.cfi_endproc
 117              	.LFE0:
 119              		.section	.text.xEventGroupSync,"ax",%progbits
 120              		.align	1
 121              		.global	xEventGroupSync
 122              		.syntax unified
 123              		.thumb
 124              		.thumb_func
 126              	xEventGroupSync:
 127              	.LFB1:
 127:Lib/FreeRTOS/Source/event_groups.c **** 
 128:Lib/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 129:Lib/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 130:Lib/FreeRTOS/Source/event_groups.c **** 
 131:Lib/FreeRTOS/Source/event_groups.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 132:Lib/FreeRTOS/Source/event_groups.c **** 
 133:Lib/FreeRTOS/Source/event_groups.c ****     EventGroupHandle_t xEventGroupCreate( void )
 134:Lib/FreeRTOS/Source/event_groups.c ****     {
 135:Lib/FreeRTOS/Source/event_groups.c ****         EventGroup_t * pxEventBits;
 136:Lib/FreeRTOS/Source/event_groups.c **** 
 137:Lib/FreeRTOS/Source/event_groups.c ****         /* Allocate the event group.  Justification for MISRA deviation as
 138:Lib/FreeRTOS/Source/event_groups.c ****          * follows:  pvPortMalloc() always ensures returned memory blocks are
 139:Lib/FreeRTOS/Source/event_groups.c ****          * aligned per the requirements of the MCU stack.  In this case
 140:Lib/FreeRTOS/Source/event_groups.c ****          * pvPortMalloc() must return a pointer that is guaranteed to meet the
 141:Lib/FreeRTOS/Source/event_groups.c ****          * alignment requirements of the EventGroup_t structure - which (if you
 142:Lib/FreeRTOS/Source/event_groups.c ****          * follow it through) is the alignment requirements of the TickType_t type
 143:Lib/FreeRTOS/Source/event_groups.c ****          * (EventBits_t being of TickType_t itself).  Therefore, whenever the
 144:Lib/FreeRTOS/Source/event_groups.c ****          * stack alignment requirements are greater than or equal to the
 145:Lib/FreeRTOS/Source/event_groups.c ****          * TickType_t alignment requirements the cast is safe.  In other cases,
 146:Lib/FreeRTOS/Source/event_groups.c ****          * where the natural word size of the architecture is less than
 147:Lib/FreeRTOS/Source/event_groups.c ****          * sizeof( TickType_t ), the TickType_t variables will be accessed in two
 148:Lib/FreeRTOS/Source/event_groups.c ****          * or more reads operations, and the alignment requirements is only that
 149:Lib/FreeRTOS/Source/event_groups.c ****          * of each individual read. */
 150:Lib/FreeRTOS/Source/event_groups.c ****         pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e90
 151:Lib/FreeRTOS/Source/event_groups.c **** 
 152:Lib/FreeRTOS/Source/event_groups.c ****         if( pxEventBits != NULL )
 153:Lib/FreeRTOS/Source/event_groups.c ****         {
 154:Lib/FreeRTOS/Source/event_groups.c ****             pxEventBits->uxEventBits = 0;
 155:Lib/FreeRTOS/Source/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 156:Lib/FreeRTOS/Source/event_groups.c **** 
 157:Lib/FreeRTOS/Source/event_groups.c ****             #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
ARM GAS  /tmp/ccS51NaV.s 			page 6


 158:Lib/FreeRTOS/Source/event_groups.c ****             {
 159:Lib/FreeRTOS/Source/event_groups.c ****                 /* Both static and dynamic allocation can be used, so note this
 160:Lib/FreeRTOS/Source/event_groups.c ****                  * event group was allocated statically in case the event group is
 161:Lib/FreeRTOS/Source/event_groups.c ****                  * later deleted. */
 162:Lib/FreeRTOS/Source/event_groups.c ****                 pxEventBits->ucStaticallyAllocated = pdFALSE;
 163:Lib/FreeRTOS/Source/event_groups.c ****             }
 164:Lib/FreeRTOS/Source/event_groups.c ****             #endif /* configSUPPORT_STATIC_ALLOCATION */
 165:Lib/FreeRTOS/Source/event_groups.c **** 
 166:Lib/FreeRTOS/Source/event_groups.c ****             traceEVENT_GROUP_CREATE( pxEventBits );
 167:Lib/FreeRTOS/Source/event_groups.c ****         }
 168:Lib/FreeRTOS/Source/event_groups.c ****         else
 169:Lib/FreeRTOS/Source/event_groups.c ****         {
 170:Lib/FreeRTOS/Source/event_groups.c ****             traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracin
 171:Lib/FreeRTOS/Source/event_groups.c ****         }
 172:Lib/FreeRTOS/Source/event_groups.c **** 
 173:Lib/FreeRTOS/Source/event_groups.c ****         return pxEventBits;
 174:Lib/FreeRTOS/Source/event_groups.c ****     }
 175:Lib/FreeRTOS/Source/event_groups.c **** 
 176:Lib/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 177:Lib/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 178:Lib/FreeRTOS/Source/event_groups.c **** 
 179:Lib/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,
 180:Lib/FreeRTOS/Source/event_groups.c ****                              const EventBits_t uxBitsToSet,
 181:Lib/FreeRTOS/Source/event_groups.c ****                              const EventBits_t uxBitsToWaitFor,
 182:Lib/FreeRTOS/Source/event_groups.c ****                              TickType_t xTicksToWait )
 183:Lib/FreeRTOS/Source/event_groups.c **** {
 128              		.loc 1 183 1
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 40
 131              		@ frame_needed = 1, uses_anonymous_args = 0
 132 0000 80B5     		push	{r7, lr}
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 7, -8
 135              		.cfi_offset 14, -4
 136 0002 8AB0     		sub	sp, sp, #40
 137              		.cfi_def_cfa_offset 48
 138 0004 00AF     		add	r7, sp, #0
 139              		.cfi_def_cfa_register 7
 140 0006 F860     		str	r0, [r7, #12]
 141 0008 B960     		str	r1, [r7, #8]
 142 000a 7A60     		str	r2, [r7, #4]
 143 000c 3B60     		str	r3, [r7]
 184:Lib/FreeRTOS/Source/event_groups.c ****     EventBits_t uxOriginalBitValue, uxReturn;
 185:Lib/FreeRTOS/Source/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 144              		.loc 1 185 20
 145 000e FB68     		ldr	r3, [r7, #12]
 146 0010 3B62     		str	r3, [r7, #32]
 186:Lib/FreeRTOS/Source/event_groups.c ****     BaseType_t xAlreadyYielded;
 187:Lib/FreeRTOS/Source/event_groups.c ****     BaseType_t xTimeoutOccurred = pdFALSE;
 147              		.loc 1 187 16
 148 0012 0023     		movs	r3, #0
 149 0014 FB61     		str	r3, [r7, #28]
 188:Lib/FreeRTOS/Source/event_groups.c **** 
 189:Lib/FreeRTOS/Source/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 150              		.loc 1 189 5
 151 0016 7B68     		ldr	r3, [r7, #4]
 152 0018 B3F1807F 		cmp	r3, #16777216
ARM GAS  /tmp/ccS51NaV.s 			page 7


 153 001c 07D3     		bcc	.L9
 154              		.loc 1 189 5 is_stmt 0 discriminator 1
 155 001e FFF7FEFF 		bl	ulSetInterruptMask
 156 0022 454B     		ldr	r3, .L23
 157 0024 454A     		ldr	r2, .L23+4
 158 0026 BD21     		movs	r1, #189
 159 0028 4548     		ldr	r0, .L23+8
 160 002a FFF7FEFF 		bl	__assert_func
 161              	.L9:
 190:Lib/FreeRTOS/Source/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 162              		.loc 1 190 5 is_stmt 1
 163 002e 7B68     		ldr	r3, [r7, #4]
 164 0030 002B     		cmp	r3, #0
 165 0032 07D1     		bne	.L10
 166              		.loc 1 190 5 is_stmt 0 discriminator 1
 167 0034 FFF7FEFF 		bl	ulSetInterruptMask
 168 0038 3F4B     		ldr	r3, .L23
 169 003a 404A     		ldr	r2, .L23+4
 170 003c BE21     		movs	r1, #190
 171 003e 4048     		ldr	r0, .L23+8
 172 0040 FFF7FEFF 		bl	__assert_func
 173              	.L10:
 191:Lib/FreeRTOS/Source/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 192:Lib/FreeRTOS/Source/event_groups.c ****     {
 193:Lib/FreeRTOS/Source/event_groups.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
 174              		.loc 1 193 9 is_stmt 1
 175 0044 FFF7FEFF 		bl	xTaskGetSchedulerState
 176 0048 0346     		mov	r3, r0
 177              		.loc 1 193 9 is_stmt 0 discriminator 1
 178 004a 002B     		cmp	r3, #0
 179 004c 02D1     		bne	.L11
 180              		.loc 1 193 9 discriminator 2
 181 004e 3B68     		ldr	r3, [r7]
 182 0050 002B     		cmp	r3, #0
 183 0052 01D1     		bne	.L12
 184              	.L11:
 185              		.loc 1 193 9 discriminator 3
 186 0054 0123     		movs	r3, #1
 187              		.loc 1 193 9
 188 0056 00E0     		b	.L13
 189              	.L12:
 190              		.loc 1 193 9 discriminator 4
 191 0058 0023     		movs	r3, #0
 192              	.L13:
 193              		.loc 1 193 9 discriminator 6
 194 005a 002B     		cmp	r3, #0
 195 005c 07D1     		bne	.L14
 196              		.loc 1 193 9 discriminator 7
 197 005e FFF7FEFF 		bl	ulSetInterruptMask
 198              		.loc 1 193 9 discriminator 1
 199 0062 354B     		ldr	r3, .L23
 200 0064 354A     		ldr	r2, .L23+4
 201 0066 C121     		movs	r1, #193
 202 0068 3548     		ldr	r0, .L23+8
 203 006a FFF7FEFF 		bl	__assert_func
 204              	.L14:
 194:Lib/FreeRTOS/Source/event_groups.c ****     }
ARM GAS  /tmp/ccS51NaV.s 			page 8


 195:Lib/FreeRTOS/Source/event_groups.c ****     #endif
 196:Lib/FreeRTOS/Source/event_groups.c **** 
 197:Lib/FreeRTOS/Source/event_groups.c ****     vTaskSuspendAll();
 205              		.loc 1 197 5 is_stmt 1
 206 006e FFF7FEFF 		bl	vTaskSuspendAll
 198:Lib/FreeRTOS/Source/event_groups.c ****     {
 199:Lib/FreeRTOS/Source/event_groups.c ****         uxOriginalBitValue = pxEventBits->uxEventBits;
 207              		.loc 1 199 28
 208 0072 3B6A     		ldr	r3, [r7, #32]
 209 0074 1B68     		ldr	r3, [r3]
 210 0076 BB61     		str	r3, [r7, #24]
 200:Lib/FreeRTOS/Source/event_groups.c **** 
 201:Lib/FreeRTOS/Source/event_groups.c ****         ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 211              		.loc 1 201 18
 212 0078 B968     		ldr	r1, [r7, #8]
 213 007a F868     		ldr	r0, [r7, #12]
 214 007c FFF7FEFF 		bl	xEventGroupSetBits
 202:Lib/FreeRTOS/Source/event_groups.c **** 
 203:Lib/FreeRTOS/Source/event_groups.c ****         if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 215              		.loc 1 203 36
 216 0080 BA69     		ldr	r2, [r7, #24]
 217 0082 BB68     		ldr	r3, [r7, #8]
 218 0084 1A43     		orrs	r2, r2, r3
 219              		.loc 1 203 52
 220 0086 7B68     		ldr	r3, [r7, #4]
 221 0088 1340     		ands	r3, r3, r2
 222              		.loc 1 203 11
 223 008a 7A68     		ldr	r2, [r7, #4]
 224 008c 9A42     		cmp	r2, r3
 225 008e 0DD1     		bne	.L15
 204:Lib/FreeRTOS/Source/event_groups.c ****         {
 205:Lib/FreeRTOS/Source/event_groups.c ****             /* All the rendezvous bits are now set - no need to block. */
 206:Lib/FreeRTOS/Source/event_groups.c ****             uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 226              		.loc 1 206 22
 227 0090 BA69     		ldr	r2, [r7, #24]
 228 0092 BB68     		ldr	r3, [r7, #8]
 229 0094 1343     		orrs	r3, r3, r2
 230 0096 7B62     		str	r3, [r7, #36]
 207:Lib/FreeRTOS/Source/event_groups.c **** 
 208:Lib/FreeRTOS/Source/event_groups.c ****             /* Rendezvous always clear the bits.  They will have been cleared
 209:Lib/FreeRTOS/Source/event_groups.c ****              * already unless this is the only task in the rendezvous. */
 210:Lib/FreeRTOS/Source/event_groups.c ****             pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 231              		.loc 1 210 24
 232 0098 3B6A     		ldr	r3, [r7, #32]
 233 009a 1A68     		ldr	r2, [r3]
 234              		.loc 1 210 41
 235 009c 7B68     		ldr	r3, [r7, #4]
 236 009e DB43     		mvns	r3, r3
 237              		.loc 1 210 38
 238 00a0 1A40     		ands	r2, r2, r3
 239 00a2 3B6A     		ldr	r3, [r7, #32]
 240 00a4 1A60     		str	r2, [r3]
 211:Lib/FreeRTOS/Source/event_groups.c **** 
 212:Lib/FreeRTOS/Source/event_groups.c ****             xTicksToWait = 0;
 241              		.loc 1 212 26
 242 00a6 0023     		movs	r3, #0
 243 00a8 3B60     		str	r3, [r7]
ARM GAS  /tmp/ccS51NaV.s 			page 9


 244 00aa 13E0     		b	.L16
 245              	.L15:
 213:Lib/FreeRTOS/Source/event_groups.c ****         }
 214:Lib/FreeRTOS/Source/event_groups.c ****         else
 215:Lib/FreeRTOS/Source/event_groups.c ****         {
 216:Lib/FreeRTOS/Source/event_groups.c ****             if( xTicksToWait != ( TickType_t ) 0 )
 246              		.loc 1 216 15
 247 00ac 3B68     		ldr	r3, [r7]
 248 00ae 002B     		cmp	r3, #0
 249 00b0 0BD0     		beq	.L17
 217:Lib/FreeRTOS/Source/event_groups.c ****             {
 218:Lib/FreeRTOS/Source/event_groups.c ****                 traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 219:Lib/FreeRTOS/Source/event_groups.c **** 
 220:Lib/FreeRTOS/Source/event_groups.c ****                 /* Store the bits that the calling task is waiting for in the
 221:Lib/FreeRTOS/Source/event_groups.c ****                  * task's event list item so the kernel knows when a match is
 222:Lib/FreeRTOS/Source/event_groups.c ****                  * found.  Then enter the blocked state. */
 223:Lib/FreeRTOS/Source/event_groups.c ****                 vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToW
 250              		.loc 1 223 17
 251 00b2 3B6A     		ldr	r3, [r7, #32]
 252 00b4 181D     		adds	r0, r3, #4
 253 00b6 7B68     		ldr	r3, [r7, #4]
 254 00b8 43F0A063 		orr	r3, r3, #83886080
 255 00bc 3A68     		ldr	r2, [r7]
 256 00be 1946     		mov	r1, r3
 257 00c0 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 224:Lib/FreeRTOS/Source/event_groups.c **** 
 225:Lib/FreeRTOS/Source/event_groups.c ****                 /* This assignment is obsolete as uxReturn will get set after
 226:Lib/FreeRTOS/Source/event_groups.c ****                  * the task unblocks, but some compilers mistakenly generate a
 227:Lib/FreeRTOS/Source/event_groups.c ****                  * warning about uxReturn being returned without being set if the
 228:Lib/FreeRTOS/Source/event_groups.c ****                  * assignment is omitted. */
 229:Lib/FreeRTOS/Source/event_groups.c ****                 uxReturn = 0;
 258              		.loc 1 229 26
 259 00c4 0023     		movs	r3, #0
 260 00c6 7B62     		str	r3, [r7, #36]
 261 00c8 04E0     		b	.L16
 262              	.L17:
 230:Lib/FreeRTOS/Source/event_groups.c ****             }
 231:Lib/FreeRTOS/Source/event_groups.c ****             else
 232:Lib/FreeRTOS/Source/event_groups.c ****             {
 233:Lib/FreeRTOS/Source/event_groups.c ****                 /* The rendezvous bits were not set, but no block time was
 234:Lib/FreeRTOS/Source/event_groups.c ****                  * specified - just return the current event bit value. */
 235:Lib/FreeRTOS/Source/event_groups.c ****                 uxReturn = pxEventBits->uxEventBits;
 263              		.loc 1 235 26
 264 00ca 3B6A     		ldr	r3, [r7, #32]
 265 00cc 1B68     		ldr	r3, [r3]
 266 00ce 7B62     		str	r3, [r7, #36]
 236:Lib/FreeRTOS/Source/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 267              		.loc 1 236 34
 268 00d0 0123     		movs	r3, #1
 269 00d2 FB61     		str	r3, [r7, #28]
 270              	.L16:
 237:Lib/FreeRTOS/Source/event_groups.c ****             }
 238:Lib/FreeRTOS/Source/event_groups.c ****         }
 239:Lib/FreeRTOS/Source/event_groups.c ****     }
 240:Lib/FreeRTOS/Source/event_groups.c ****     xAlreadyYielded = xTaskResumeAll();
 271              		.loc 1 240 23
 272 00d4 FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  /tmp/ccS51NaV.s 			page 10


 273 00d8 7861     		str	r0, [r7, #20]
 241:Lib/FreeRTOS/Source/event_groups.c **** 
 242:Lib/FreeRTOS/Source/event_groups.c ****     if( xTicksToWait != ( TickType_t ) 0 )
 274              		.loc 1 242 7
 275 00da 3B68     		ldr	r3, [r7]
 276 00dc 002B     		cmp	r3, #0
 277 00de 26D0     		beq	.L18
 243:Lib/FreeRTOS/Source/event_groups.c ****     {
 244:Lib/FreeRTOS/Source/event_groups.c ****         if( xAlreadyYielded == pdFALSE )
 278              		.loc 1 244 11
 279 00e0 7B69     		ldr	r3, [r7, #20]
 280 00e2 002B     		cmp	r3, #0
 281 00e4 01D1     		bne	.L19
 245:Lib/FreeRTOS/Source/event_groups.c ****         {
 246:Lib/FreeRTOS/Source/event_groups.c ****             portYIELD_WITHIN_API();
 282              		.loc 1 246 13
 283 00e6 FFF7FEFF 		bl	vPortYield
 284              	.L19:
 247:Lib/FreeRTOS/Source/event_groups.c ****         }
 248:Lib/FreeRTOS/Source/event_groups.c ****         else
 249:Lib/FreeRTOS/Source/event_groups.c ****         {
 250:Lib/FreeRTOS/Source/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 251:Lib/FreeRTOS/Source/event_groups.c ****         }
 252:Lib/FreeRTOS/Source/event_groups.c **** 
 253:Lib/FreeRTOS/Source/event_groups.c ****         /* The task blocked to wait for its required bits to be set - at this
 254:Lib/FreeRTOS/Source/event_groups.c ****          * point either the required bits were set or the block time expired.  If
 255:Lib/FreeRTOS/Source/event_groups.c ****          * the required bits were set they will have been stored in the task's
 256:Lib/FreeRTOS/Source/event_groups.c ****          * event list item, and they should now be retrieved then cleared. */
 257:Lib/FreeRTOS/Source/event_groups.c ****         uxReturn = uxTaskResetEventItemValue();
 285              		.loc 1 257 20
 286 00ea FFF7FEFF 		bl	uxTaskResetEventItemValue
 287 00ee 7862     		str	r0, [r7, #36]
 258:Lib/FreeRTOS/Source/event_groups.c **** 
 259:Lib/FreeRTOS/Source/event_groups.c ****         if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 288              		.loc 1 259 24
 289 00f0 7B6A     		ldr	r3, [r7, #36]
 290 00f2 03F00073 		and	r3, r3, #33554432
 291              		.loc 1 259 11
 292 00f6 002B     		cmp	r3, #0
 293 00f8 15D1     		bne	.L20
 260:Lib/FreeRTOS/Source/event_groups.c ****         {
 261:Lib/FreeRTOS/Source/event_groups.c ****             /* The task timed out, just return the current event bit value. */
 262:Lib/FreeRTOS/Source/event_groups.c ****             taskENTER_CRITICAL();
 294              		.loc 1 262 13
 295 00fa FFF7FEFF 		bl	vPortEnterCritical
 263:Lib/FreeRTOS/Source/event_groups.c ****             {
 264:Lib/FreeRTOS/Source/event_groups.c ****                 uxReturn = pxEventBits->uxEventBits;
 296              		.loc 1 264 26
 297 00fe 3B6A     		ldr	r3, [r7, #32]
 298 0100 1B68     		ldr	r3, [r3]
 299 0102 7B62     		str	r3, [r7, #36]
 265:Lib/FreeRTOS/Source/event_groups.c **** 
 266:Lib/FreeRTOS/Source/event_groups.c ****                 /* Although the task got here because it timed out before the
 267:Lib/FreeRTOS/Source/event_groups.c ****                  * bits it was waiting for were set, it is possible that since it
 268:Lib/FreeRTOS/Source/event_groups.c ****                  * unblocked another task has set the bits.  If this is the case
 269:Lib/FreeRTOS/Source/event_groups.c ****                  * then it needs to clear the bits before exiting. */
 270:Lib/FreeRTOS/Source/event_groups.c ****                 if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
ARM GAS  /tmp/ccS51NaV.s 			page 11


 300              		.loc 1 270 32
 301 0104 7A6A     		ldr	r2, [r7, #36]
 302 0106 7B68     		ldr	r3, [r7, #4]
 303 0108 1340     		ands	r3, r3, r2
 304              		.loc 1 270 19
 305 010a 7A68     		ldr	r2, [r7, #4]
 306 010c 9A42     		cmp	r2, r3
 307 010e 06D1     		bne	.L21
 271:Lib/FreeRTOS/Source/event_groups.c ****                 {
 272:Lib/FreeRTOS/Source/event_groups.c ****                     pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 308              		.loc 1 272 32
 309 0110 3B6A     		ldr	r3, [r7, #32]
 310 0112 1A68     		ldr	r2, [r3]
 311              		.loc 1 272 49
 312 0114 7B68     		ldr	r3, [r7, #4]
 313 0116 DB43     		mvns	r3, r3
 314              		.loc 1 272 46
 315 0118 1A40     		ands	r2, r2, r3
 316 011a 3B6A     		ldr	r3, [r7, #32]
 317 011c 1A60     		str	r2, [r3]
 318              	.L21:
 273:Lib/FreeRTOS/Source/event_groups.c ****                 }
 274:Lib/FreeRTOS/Source/event_groups.c ****                 else
 275:Lib/FreeRTOS/Source/event_groups.c ****                 {
 276:Lib/FreeRTOS/Source/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 277:Lib/FreeRTOS/Source/event_groups.c ****                 }
 278:Lib/FreeRTOS/Source/event_groups.c ****             }
 279:Lib/FreeRTOS/Source/event_groups.c ****             taskEXIT_CRITICAL();
 319              		.loc 1 279 13
 320 011e FFF7FEFF 		bl	vPortExitCritical
 280:Lib/FreeRTOS/Source/event_groups.c **** 
 281:Lib/FreeRTOS/Source/event_groups.c ****             xTimeoutOccurred = pdTRUE;
 321              		.loc 1 281 30
 322 0122 0123     		movs	r3, #1
 323 0124 FB61     		str	r3, [r7, #28]
 324              	.L20:
 282:Lib/FreeRTOS/Source/event_groups.c ****         }
 283:Lib/FreeRTOS/Source/event_groups.c ****         else
 284:Lib/FreeRTOS/Source/event_groups.c ****         {
 285:Lib/FreeRTOS/Source/event_groups.c ****             /* The task unblocked because the bits were set. */
 286:Lib/FreeRTOS/Source/event_groups.c ****         }
 287:Lib/FreeRTOS/Source/event_groups.c **** 
 288:Lib/FreeRTOS/Source/event_groups.c ****         /* Control bits might be set as the task had blocked should not be
 289:Lib/FreeRTOS/Source/event_groups.c ****          * returned. */
 290:Lib/FreeRTOS/Source/event_groups.c ****         uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 325              		.loc 1 290 18
 326 0126 7B6A     		ldr	r3, [r7, #36]
 327 0128 23F07F43 		bic	r3, r3, #-16777216
 328 012c 7B62     		str	r3, [r7, #36]
 329              	.L18:
 291:Lib/FreeRTOS/Source/event_groups.c ****     }
 292:Lib/FreeRTOS/Source/event_groups.c **** 
 293:Lib/FreeRTOS/Source/event_groups.c ****     traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 294:Lib/FreeRTOS/Source/event_groups.c **** 
 295:Lib/FreeRTOS/Source/event_groups.c ****     /* Prevent compiler warnings when trace macros are not used. */
 296:Lib/FreeRTOS/Source/event_groups.c ****     ( void ) xTimeoutOccurred;
 297:Lib/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccS51NaV.s 			page 12


 298:Lib/FreeRTOS/Source/event_groups.c ****     return uxReturn;
 330              		.loc 1 298 12
 331 012e 7B6A     		ldr	r3, [r7, #36]
 299:Lib/FreeRTOS/Source/event_groups.c **** }
 332              		.loc 1 299 1
 333 0130 1846     		mov	r0, r3
 334 0132 2837     		adds	r7, r7, #40
 335              		.cfi_def_cfa_offset 8
 336 0134 BD46     		mov	sp, r7
 337              		.cfi_def_cfa_register 13
 338              		@ sp needed
 339 0136 80BD     		pop	{r7, pc}
 340              	.L24:
 341              		.align	2
 342              	.L23:
 343 0138 00000000 		.word	.LC0
 344 013c 00000000 		.word	__func__.5
 345 0140 04000000 		.word	.LC1
 346              		.cfi_endproc
 347              	.LFE1:
 349              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 350              		.align	1
 351              		.global	xEventGroupWaitBits
 352              		.syntax unified
 353              		.thumb
 354              		.thumb_func
 356              	xEventGroupWaitBits:
 357              	.LFB2:
 300:Lib/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 301:Lib/FreeRTOS/Source/event_groups.c **** 
 302:Lib/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
 303:Lib/FreeRTOS/Source/event_groups.c ****                                  const EventBits_t uxBitsToWaitFor,
 304:Lib/FreeRTOS/Source/event_groups.c ****                                  const BaseType_t xClearOnExit,
 305:Lib/FreeRTOS/Source/event_groups.c ****                                  const BaseType_t xWaitForAllBits,
 306:Lib/FreeRTOS/Source/event_groups.c ****                                  TickType_t xTicksToWait )
 307:Lib/FreeRTOS/Source/event_groups.c **** {
 358              		.loc 1 307 1
 359              		.cfi_startproc
 360              		@ args = 4, pretend = 0, frame = 48
 361              		@ frame_needed = 1, uses_anonymous_args = 0
 362 0000 80B5     		push	{r7, lr}
 363              		.cfi_def_cfa_offset 8
 364              		.cfi_offset 7, -8
 365              		.cfi_offset 14, -4
 366 0002 8CB0     		sub	sp, sp, #48
 367              		.cfi_def_cfa_offset 56
 368 0004 00AF     		add	r7, sp, #0
 369              		.cfi_def_cfa_register 7
 370 0006 F860     		str	r0, [r7, #12]
 371 0008 B960     		str	r1, [r7, #8]
 372 000a 7A60     		str	r2, [r7, #4]
 373 000c 3B60     		str	r3, [r7]
 308:Lib/FreeRTOS/Source/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 374              		.loc 1 308 20
 375 000e FB68     		ldr	r3, [r7, #12]
 376 0010 7B62     		str	r3, [r7, #36]
 309:Lib/FreeRTOS/Source/event_groups.c ****     EventBits_t uxReturn, uxControlBits = 0;
ARM GAS  /tmp/ccS51NaV.s 			page 13


 377              		.loc 1 309 27
 378 0012 0023     		movs	r3, #0
 379 0014 BB62     		str	r3, [r7, #40]
 310:Lib/FreeRTOS/Source/event_groups.c ****     BaseType_t xWaitConditionMet, xAlreadyYielded;
 311:Lib/FreeRTOS/Source/event_groups.c ****     BaseType_t xTimeoutOccurred = pdFALSE;
 380              		.loc 1 311 16
 381 0016 0023     		movs	r3, #0
 382 0018 3B62     		str	r3, [r7, #32]
 312:Lib/FreeRTOS/Source/event_groups.c **** 
 313:Lib/FreeRTOS/Source/event_groups.c ****     /* Check the user is not attempting to wait on the bits used by the kernel
 314:Lib/FreeRTOS/Source/event_groups.c ****      * itself, and that at least one bit is being requested. */
 315:Lib/FreeRTOS/Source/event_groups.c ****     configASSERT( xEventGroup );
 383              		.loc 1 315 5
 384 001a FB68     		ldr	r3, [r7, #12]
 385 001c 002B     		cmp	r3, #0
 386 001e 08D1     		bne	.L26
 387              		.loc 1 315 5 is_stmt 0 discriminator 1
 388 0020 FFF7FEFF 		bl	ulSetInterruptMask
 389 0024 554B     		ldr	r3, .L43
 390 0026 564A     		ldr	r2, .L43+4
 391 0028 40F23B11 		movw	r1, #315
 392 002c 5548     		ldr	r0, .L43+8
 393 002e FFF7FEFF 		bl	__assert_func
 394              	.L26:
 316:Lib/FreeRTOS/Source/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 395              		.loc 1 316 5 is_stmt 1
 396 0032 BB68     		ldr	r3, [r7, #8]
 397 0034 B3F1807F 		cmp	r3, #16777216
 398 0038 08D3     		bcc	.L27
 399              		.loc 1 316 5 is_stmt 0 discriminator 1
 400 003a FFF7FEFF 		bl	ulSetInterruptMask
 401 003e 4F4B     		ldr	r3, .L43
 402 0040 4F4A     		ldr	r2, .L43+4
 403 0042 4FF49E71 		mov	r1, #316
 404 0046 4F48     		ldr	r0, .L43+8
 405 0048 FFF7FEFF 		bl	__assert_func
 406              	.L27:
 317:Lib/FreeRTOS/Source/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 407              		.loc 1 317 5 is_stmt 1
 408 004c BB68     		ldr	r3, [r7, #8]
 409 004e 002B     		cmp	r3, #0
 410 0050 08D1     		bne	.L28
 411              		.loc 1 317 5 is_stmt 0 discriminator 1
 412 0052 FFF7FEFF 		bl	ulSetInterruptMask
 413 0056 494B     		ldr	r3, .L43
 414 0058 494A     		ldr	r2, .L43+4
 415 005a 40F23D11 		movw	r1, #317
 416 005e 4948     		ldr	r0, .L43+8
 417 0060 FFF7FEFF 		bl	__assert_func
 418              	.L28:
 318:Lib/FreeRTOS/Source/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 319:Lib/FreeRTOS/Source/event_groups.c ****     {
 320:Lib/FreeRTOS/Source/event_groups.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
 419              		.loc 1 320 9 is_stmt 1
 420 0064 FFF7FEFF 		bl	xTaskGetSchedulerState
 421 0068 0346     		mov	r3, r0
 422              		.loc 1 320 9 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccS51NaV.s 			page 14


 423 006a 002B     		cmp	r3, #0
 424 006c 02D1     		bne	.L29
 425              		.loc 1 320 9 discriminator 2
 426 006e BB6B     		ldr	r3, [r7, #56]
 427 0070 002B     		cmp	r3, #0
 428 0072 01D1     		bne	.L30
 429              	.L29:
 430              		.loc 1 320 9 discriminator 3
 431 0074 0123     		movs	r3, #1
 432              		.loc 1 320 9
 433 0076 00E0     		b	.L31
 434              	.L30:
 435              		.loc 1 320 9 discriminator 4
 436 0078 0023     		movs	r3, #0
 437              	.L31:
 438              		.loc 1 320 9 discriminator 6
 439 007a 002B     		cmp	r3, #0
 440 007c 08D1     		bne	.L32
 441              		.loc 1 320 9 discriminator 7
 442 007e FFF7FEFF 		bl	ulSetInterruptMask
 443              		.loc 1 320 9 discriminator 1
 444 0082 3E4B     		ldr	r3, .L43
 445 0084 3E4A     		ldr	r2, .L43+4
 446 0086 4FF4A071 		mov	r1, #320
 447 008a 3E48     		ldr	r0, .L43+8
 448 008c FFF7FEFF 		bl	__assert_func
 449              	.L32:
 321:Lib/FreeRTOS/Source/event_groups.c ****     }
 322:Lib/FreeRTOS/Source/event_groups.c ****     #endif
 323:Lib/FreeRTOS/Source/event_groups.c **** 
 324:Lib/FreeRTOS/Source/event_groups.c ****     vTaskSuspendAll();
 450              		.loc 1 324 5 is_stmt 1
 451 0090 FFF7FEFF 		bl	vTaskSuspendAll
 452              	.LBB3:
 325:Lib/FreeRTOS/Source/event_groups.c ****     {
 326:Lib/FreeRTOS/Source/event_groups.c ****         const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 453              		.loc 1 326 27
 454 0094 7B6A     		ldr	r3, [r7, #36]
 455 0096 1B68     		ldr	r3, [r3]
 456 0098 FB61     		str	r3, [r7, #28]
 327:Lib/FreeRTOS/Source/event_groups.c **** 
 328:Lib/FreeRTOS/Source/event_groups.c ****         /* Check to see if the wait condition is already met or not. */
 329:Lib/FreeRTOS/Source/event_groups.c ****         xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllB
 457              		.loc 1 329 29
 458 009a 3A68     		ldr	r2, [r7]
 459 009c B968     		ldr	r1, [r7, #8]
 460 009e F869     		ldr	r0, [r7, #28]
 461 00a0 FFF7FEFF 		bl	prvTestWaitCondition
 462 00a4 B861     		str	r0, [r7, #24]
 330:Lib/FreeRTOS/Source/event_groups.c **** 
 331:Lib/FreeRTOS/Source/event_groups.c ****         if( xWaitConditionMet != pdFALSE )
 463              		.loc 1 331 11
 464 00a6 BB69     		ldr	r3, [r7, #24]
 465 00a8 002B     		cmp	r3, #0
 466 00aa 0ED0     		beq	.L33
 332:Lib/FreeRTOS/Source/event_groups.c ****         {
 333:Lib/FreeRTOS/Source/event_groups.c ****             /* The wait condition has already been met so there is no need to
ARM GAS  /tmp/ccS51NaV.s 			page 15


 334:Lib/FreeRTOS/Source/event_groups.c ****              * block. */
 335:Lib/FreeRTOS/Source/event_groups.c ****             uxReturn = uxCurrentEventBits;
 467              		.loc 1 335 22
 468 00ac FB69     		ldr	r3, [r7, #28]
 469 00ae FB62     		str	r3, [r7, #44]
 336:Lib/FreeRTOS/Source/event_groups.c ****             xTicksToWait = ( TickType_t ) 0;
 470              		.loc 1 336 26
 471 00b0 0023     		movs	r3, #0
 472 00b2 BB63     		str	r3, [r7, #56]
 337:Lib/FreeRTOS/Source/event_groups.c **** 
 338:Lib/FreeRTOS/Source/event_groups.c ****             /* Clear the wait bits if requested to do so. */
 339:Lib/FreeRTOS/Source/event_groups.c ****             if( xClearOnExit != pdFALSE )
 473              		.loc 1 339 15
 474 00b4 7B68     		ldr	r3, [r7, #4]
 475 00b6 002B     		cmp	r3, #0
 476 00b8 28D0     		beq	.L34
 340:Lib/FreeRTOS/Source/event_groups.c ****             {
 341:Lib/FreeRTOS/Source/event_groups.c ****                 pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 477              		.loc 1 341 28
 478 00ba 7B6A     		ldr	r3, [r7, #36]
 479 00bc 1A68     		ldr	r2, [r3]
 480              		.loc 1 341 45
 481 00be BB68     		ldr	r3, [r7, #8]
 482 00c0 DB43     		mvns	r3, r3
 483              		.loc 1 341 42
 484 00c2 1A40     		ands	r2, r2, r3
 485 00c4 7B6A     		ldr	r3, [r7, #36]
 486 00c6 1A60     		str	r2, [r3]
 487 00c8 20E0     		b	.L34
 488              	.L33:
 342:Lib/FreeRTOS/Source/event_groups.c ****             }
 343:Lib/FreeRTOS/Source/event_groups.c ****             else
 344:Lib/FreeRTOS/Source/event_groups.c ****             {
 345:Lib/FreeRTOS/Source/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 346:Lib/FreeRTOS/Source/event_groups.c ****             }
 347:Lib/FreeRTOS/Source/event_groups.c ****         }
 348:Lib/FreeRTOS/Source/event_groups.c ****         else if( xTicksToWait == ( TickType_t ) 0 )
 489              		.loc 1 348 16
 490 00ca BB6B     		ldr	r3, [r7, #56]
 491 00cc 002B     		cmp	r3, #0
 492 00ce 04D1     		bne	.L35
 349:Lib/FreeRTOS/Source/event_groups.c ****         {
 350:Lib/FreeRTOS/Source/event_groups.c ****             /* The wait condition has not been met, but no block time was
 351:Lib/FreeRTOS/Source/event_groups.c ****              * specified, so just return the current value. */
 352:Lib/FreeRTOS/Source/event_groups.c ****             uxReturn = uxCurrentEventBits;
 493              		.loc 1 352 22
 494 00d0 FB69     		ldr	r3, [r7, #28]
 495 00d2 FB62     		str	r3, [r7, #44]
 353:Lib/FreeRTOS/Source/event_groups.c ****             xTimeoutOccurred = pdTRUE;
 496              		.loc 1 353 30
 497 00d4 0123     		movs	r3, #1
 498 00d6 3B62     		str	r3, [r7, #32]
 499 00d8 18E0     		b	.L34
 500              	.L35:
 354:Lib/FreeRTOS/Source/event_groups.c ****         }
 355:Lib/FreeRTOS/Source/event_groups.c ****         else
 356:Lib/FreeRTOS/Source/event_groups.c ****         {
ARM GAS  /tmp/ccS51NaV.s 			page 16


 357:Lib/FreeRTOS/Source/event_groups.c ****             /* The task is going to block to wait for its required bits to be
 358:Lib/FreeRTOS/Source/event_groups.c ****              * set.  uxControlBits are used to remember the specified behaviour of
 359:Lib/FreeRTOS/Source/event_groups.c ****              * this call to xEventGroupWaitBits() - for use when the event bits
 360:Lib/FreeRTOS/Source/event_groups.c ****              * unblock the task. */
 361:Lib/FreeRTOS/Source/event_groups.c ****             if( xClearOnExit != pdFALSE )
 501              		.loc 1 361 15
 502 00da 7B68     		ldr	r3, [r7, #4]
 503 00dc 002B     		cmp	r3, #0
 504 00de 03D0     		beq	.L36
 362:Lib/FreeRTOS/Source/event_groups.c ****             {
 363:Lib/FreeRTOS/Source/event_groups.c ****                 uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 505              		.loc 1 363 31
 506 00e0 BB6A     		ldr	r3, [r7, #40]
 507 00e2 43F08073 		orr	r3, r3, #16777216
 508 00e6 BB62     		str	r3, [r7, #40]
 509              	.L36:
 364:Lib/FreeRTOS/Source/event_groups.c ****             }
 365:Lib/FreeRTOS/Source/event_groups.c ****             else
 366:Lib/FreeRTOS/Source/event_groups.c ****             {
 367:Lib/FreeRTOS/Source/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 368:Lib/FreeRTOS/Source/event_groups.c ****             }
 369:Lib/FreeRTOS/Source/event_groups.c **** 
 370:Lib/FreeRTOS/Source/event_groups.c ****             if( xWaitForAllBits != pdFALSE )
 510              		.loc 1 370 15
 511 00e8 3B68     		ldr	r3, [r7]
 512 00ea 002B     		cmp	r3, #0
 513 00ec 03D0     		beq	.L37
 371:Lib/FreeRTOS/Source/event_groups.c ****             {
 372:Lib/FreeRTOS/Source/event_groups.c ****                 uxControlBits |= eventWAIT_FOR_ALL_BITS;
 514              		.loc 1 372 31
 515 00ee BB6A     		ldr	r3, [r7, #40]
 516 00f0 43F08063 		orr	r3, r3, #67108864
 517 00f4 BB62     		str	r3, [r7, #40]
 518              	.L37:
 373:Lib/FreeRTOS/Source/event_groups.c ****             }
 374:Lib/FreeRTOS/Source/event_groups.c ****             else
 375:Lib/FreeRTOS/Source/event_groups.c ****             {
 376:Lib/FreeRTOS/Source/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 377:Lib/FreeRTOS/Source/event_groups.c ****             }
 378:Lib/FreeRTOS/Source/event_groups.c **** 
 379:Lib/FreeRTOS/Source/event_groups.c ****             /* Store the bits that the calling task is waiting for in the
 380:Lib/FreeRTOS/Source/event_groups.c ****              * task's event list item so the kernel knows when a match is
 381:Lib/FreeRTOS/Source/event_groups.c ****              * found.  Then enter the blocked state. */
 382:Lib/FreeRTOS/Source/event_groups.c ****             vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitF
 519              		.loc 1 382 13
 520 00f6 7B6A     		ldr	r3, [r7, #36]
 521 00f8 181D     		adds	r0, r3, #4
 522 00fa BA68     		ldr	r2, [r7, #8]
 523 00fc BB6A     		ldr	r3, [r7, #40]
 524 00fe 1343     		orrs	r3, r3, r2
 525 0100 BA6B     		ldr	r2, [r7, #56]
 526 0102 1946     		mov	r1, r3
 527 0104 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 383:Lib/FreeRTOS/Source/event_groups.c **** 
 384:Lib/FreeRTOS/Source/event_groups.c ****             /* This is obsolete as it will get set after the task unblocks, but
 385:Lib/FreeRTOS/Source/event_groups.c ****              * some compilers mistakenly generate a warning about the variable
 386:Lib/FreeRTOS/Source/event_groups.c ****              * being returned without being set if it is not done. */
ARM GAS  /tmp/ccS51NaV.s 			page 17


 387:Lib/FreeRTOS/Source/event_groups.c ****             uxReturn = 0;
 528              		.loc 1 387 22
 529 0108 0023     		movs	r3, #0
 530 010a FB62     		str	r3, [r7, #44]
 531              	.L34:
 532              	.LBE3:
 388:Lib/FreeRTOS/Source/event_groups.c **** 
 389:Lib/FreeRTOS/Source/event_groups.c ****             traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 390:Lib/FreeRTOS/Source/event_groups.c ****         }
 391:Lib/FreeRTOS/Source/event_groups.c ****     }
 392:Lib/FreeRTOS/Source/event_groups.c ****     xAlreadyYielded = xTaskResumeAll();
 533              		.loc 1 392 23
 534 010c FFF7FEFF 		bl	xTaskResumeAll
 535 0110 7861     		str	r0, [r7, #20]
 393:Lib/FreeRTOS/Source/event_groups.c **** 
 394:Lib/FreeRTOS/Source/event_groups.c ****     if( xTicksToWait != ( TickType_t ) 0 )
 536              		.loc 1 394 7
 537 0112 BB6B     		ldr	r3, [r7, #56]
 538 0114 002B     		cmp	r3, #0
 539 0116 2BD0     		beq	.L38
 395:Lib/FreeRTOS/Source/event_groups.c ****     {
 396:Lib/FreeRTOS/Source/event_groups.c ****         if( xAlreadyYielded == pdFALSE )
 540              		.loc 1 396 11
 541 0118 7B69     		ldr	r3, [r7, #20]
 542 011a 002B     		cmp	r3, #0
 543 011c 01D1     		bne	.L39
 397:Lib/FreeRTOS/Source/event_groups.c ****         {
 398:Lib/FreeRTOS/Source/event_groups.c ****             portYIELD_WITHIN_API();
 544              		.loc 1 398 13
 545 011e FFF7FEFF 		bl	vPortYield
 546              	.L39:
 399:Lib/FreeRTOS/Source/event_groups.c ****         }
 400:Lib/FreeRTOS/Source/event_groups.c ****         else
 401:Lib/FreeRTOS/Source/event_groups.c ****         {
 402:Lib/FreeRTOS/Source/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 403:Lib/FreeRTOS/Source/event_groups.c ****         }
 404:Lib/FreeRTOS/Source/event_groups.c **** 
 405:Lib/FreeRTOS/Source/event_groups.c ****         /* The task blocked to wait for its required bits to be set - at this
 406:Lib/FreeRTOS/Source/event_groups.c ****          * point either the required bits were set or the block time expired.  If
 407:Lib/FreeRTOS/Source/event_groups.c ****          * the required bits were set they will have been stored in the task's
 408:Lib/FreeRTOS/Source/event_groups.c ****          * event list item, and they should now be retrieved then cleared. */
 409:Lib/FreeRTOS/Source/event_groups.c ****         uxReturn = uxTaskResetEventItemValue();
 547              		.loc 1 409 20
 548 0122 FFF7FEFF 		bl	uxTaskResetEventItemValue
 549 0126 F862     		str	r0, [r7, #44]
 410:Lib/FreeRTOS/Source/event_groups.c **** 
 411:Lib/FreeRTOS/Source/event_groups.c ****         if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 550              		.loc 1 411 24
 551 0128 FB6A     		ldr	r3, [r7, #44]
 552 012a 03F00073 		and	r3, r3, #33554432
 553              		.loc 1 411 11
 554 012e 002B     		cmp	r3, #0
 555 0130 1AD1     		bne	.L40
 412:Lib/FreeRTOS/Source/event_groups.c ****         {
 413:Lib/FreeRTOS/Source/event_groups.c ****             taskENTER_CRITICAL();
 556              		.loc 1 413 13
 557 0132 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  /tmp/ccS51NaV.s 			page 18


 414:Lib/FreeRTOS/Source/event_groups.c ****             {
 415:Lib/FreeRTOS/Source/event_groups.c ****                 /* The task timed out, just return the current event bit value. */
 416:Lib/FreeRTOS/Source/event_groups.c ****                 uxReturn = pxEventBits->uxEventBits;
 558              		.loc 1 416 26
 559 0136 7B6A     		ldr	r3, [r7, #36]
 560 0138 1B68     		ldr	r3, [r3]
 561 013a FB62     		str	r3, [r7, #44]
 417:Lib/FreeRTOS/Source/event_groups.c **** 
 418:Lib/FreeRTOS/Source/event_groups.c ****                 /* It is possible that the event bits were updated between this
 419:Lib/FreeRTOS/Source/event_groups.c ****                  * task leaving the Blocked state and running again. */
 420:Lib/FreeRTOS/Source/event_groups.c ****                 if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 562              		.loc 1 420 21
 563 013c 3A68     		ldr	r2, [r7]
 564 013e B968     		ldr	r1, [r7, #8]
 565 0140 F86A     		ldr	r0, [r7, #44]
 566 0142 FFF7FEFF 		bl	prvTestWaitCondition
 567 0146 0346     		mov	r3, r0
 568              		.loc 1 420 19 discriminator 1
 569 0148 002B     		cmp	r3, #0
 570 014a 09D0     		beq	.L41
 421:Lib/FreeRTOS/Source/event_groups.c ****                 {
 422:Lib/FreeRTOS/Source/event_groups.c ****                     if( xClearOnExit != pdFALSE )
 571              		.loc 1 422 23
 572 014c 7B68     		ldr	r3, [r7, #4]
 573 014e 002B     		cmp	r3, #0
 574 0150 06D0     		beq	.L41
 423:Lib/FreeRTOS/Source/event_groups.c ****                     {
 424:Lib/FreeRTOS/Source/event_groups.c ****                         pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 575              		.loc 1 424 36
 576 0152 7B6A     		ldr	r3, [r7, #36]
 577 0154 1A68     		ldr	r2, [r3]
 578              		.loc 1 424 53
 579 0156 BB68     		ldr	r3, [r7, #8]
 580 0158 DB43     		mvns	r3, r3
 581              		.loc 1 424 50
 582 015a 1A40     		ands	r2, r2, r3
 583 015c 7B6A     		ldr	r3, [r7, #36]
 584 015e 1A60     		str	r2, [r3]
 585              	.L41:
 425:Lib/FreeRTOS/Source/event_groups.c ****                     }
 426:Lib/FreeRTOS/Source/event_groups.c ****                     else
 427:Lib/FreeRTOS/Source/event_groups.c ****                     {
 428:Lib/FreeRTOS/Source/event_groups.c ****                         mtCOVERAGE_TEST_MARKER();
 429:Lib/FreeRTOS/Source/event_groups.c ****                     }
 430:Lib/FreeRTOS/Source/event_groups.c ****                 }
 431:Lib/FreeRTOS/Source/event_groups.c ****                 else
 432:Lib/FreeRTOS/Source/event_groups.c ****                 {
 433:Lib/FreeRTOS/Source/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 434:Lib/FreeRTOS/Source/event_groups.c ****                 }
 435:Lib/FreeRTOS/Source/event_groups.c **** 
 436:Lib/FreeRTOS/Source/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 586              		.loc 1 436 34
 587 0160 0123     		movs	r3, #1
 588 0162 3B62     		str	r3, [r7, #32]
 437:Lib/FreeRTOS/Source/event_groups.c ****             }
 438:Lib/FreeRTOS/Source/event_groups.c ****             taskEXIT_CRITICAL();
 589              		.loc 1 438 13
ARM GAS  /tmp/ccS51NaV.s 			page 19


 590 0164 FFF7FEFF 		bl	vPortExitCritical
 591              	.L40:
 439:Lib/FreeRTOS/Source/event_groups.c ****         }
 440:Lib/FreeRTOS/Source/event_groups.c ****         else
 441:Lib/FreeRTOS/Source/event_groups.c ****         {
 442:Lib/FreeRTOS/Source/event_groups.c ****             /* The task unblocked because the bits were set. */
 443:Lib/FreeRTOS/Source/event_groups.c ****         }
 444:Lib/FreeRTOS/Source/event_groups.c **** 
 445:Lib/FreeRTOS/Source/event_groups.c ****         /* The task blocked so control bits may have been set. */
 446:Lib/FreeRTOS/Source/event_groups.c ****         uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 592              		.loc 1 446 18
 593 0168 FB6A     		ldr	r3, [r7, #44]
 594 016a 23F07F43 		bic	r3, r3, #-16777216
 595 016e FB62     		str	r3, [r7, #44]
 596              	.L38:
 447:Lib/FreeRTOS/Source/event_groups.c ****     }
 448:Lib/FreeRTOS/Source/event_groups.c **** 
 449:Lib/FreeRTOS/Source/event_groups.c ****     traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 450:Lib/FreeRTOS/Source/event_groups.c **** 
 451:Lib/FreeRTOS/Source/event_groups.c ****     /* Prevent compiler warnings when trace macros are not used. */
 452:Lib/FreeRTOS/Source/event_groups.c ****     ( void ) xTimeoutOccurred;
 453:Lib/FreeRTOS/Source/event_groups.c **** 
 454:Lib/FreeRTOS/Source/event_groups.c ****     return uxReturn;
 597              		.loc 1 454 12
 598 0170 FB6A     		ldr	r3, [r7, #44]
 455:Lib/FreeRTOS/Source/event_groups.c **** }
 599              		.loc 1 455 1
 600 0172 1846     		mov	r0, r3
 601 0174 3037     		adds	r7, r7, #48
 602              		.cfi_def_cfa_offset 8
 603 0176 BD46     		mov	sp, r7
 604              		.cfi_def_cfa_register 13
 605              		@ sp needed
 606 0178 80BD     		pop	{r7, pc}
 607              	.L44:
 608 017a 00BF     		.align	2
 609              	.L43:
 610 017c 00000000 		.word	.LC0
 611 0180 00000000 		.word	__func__.4
 612 0184 04000000 		.word	.LC1
 613              		.cfi_endproc
 614              	.LFE2:
 616              		.section	.text.xEventGroupClearBits,"ax",%progbits
 617              		.align	1
 618              		.global	xEventGroupClearBits
 619              		.syntax unified
 620              		.thumb
 621              		.thumb_func
 623              	xEventGroupClearBits:
 624              	.LFB3:
 456:Lib/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 457:Lib/FreeRTOS/Source/event_groups.c **** 
 458:Lib/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
 459:Lib/FreeRTOS/Source/event_groups.c ****                                   const EventBits_t uxBitsToClear )
 460:Lib/FreeRTOS/Source/event_groups.c **** {
 625              		.loc 1 460 1
 626              		.cfi_startproc
ARM GAS  /tmp/ccS51NaV.s 			page 20


 627              		@ args = 0, pretend = 0, frame = 16
 628              		@ frame_needed = 1, uses_anonymous_args = 0
 629 0000 80B5     		push	{r7, lr}
 630              		.cfi_def_cfa_offset 8
 631              		.cfi_offset 7, -8
 632              		.cfi_offset 14, -4
 633 0002 84B0     		sub	sp, sp, #16
 634              		.cfi_def_cfa_offset 24
 635 0004 00AF     		add	r7, sp, #0
 636              		.cfi_def_cfa_register 7
 637 0006 7860     		str	r0, [r7, #4]
 638 0008 3960     		str	r1, [r7]
 461:Lib/FreeRTOS/Source/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 639              		.loc 1 461 20
 640 000a 7B68     		ldr	r3, [r7, #4]
 641 000c FB60     		str	r3, [r7, #12]
 462:Lib/FreeRTOS/Source/event_groups.c ****     EventBits_t uxReturn;
 463:Lib/FreeRTOS/Source/event_groups.c **** 
 464:Lib/FreeRTOS/Source/event_groups.c ****     /* Check the user is not attempting to clear the bits used by the kernel
 465:Lib/FreeRTOS/Source/event_groups.c ****      * itself. */
 466:Lib/FreeRTOS/Source/event_groups.c ****     configASSERT( xEventGroup );
 642              		.loc 1 466 5
 643 000e 7B68     		ldr	r3, [r7, #4]
 644 0010 002B     		cmp	r3, #0
 645 0012 08D1     		bne	.L46
 646              		.loc 1 466 5 is_stmt 0 discriminator 1
 647 0014 FFF7FEFF 		bl	ulSetInterruptMask
 648 0018 134B     		ldr	r3, .L49
 649 001a 144A     		ldr	r2, .L49+4
 650 001c 4FF4E971 		mov	r1, #466
 651 0020 1348     		ldr	r0, .L49+8
 652 0022 FFF7FEFF 		bl	__assert_func
 653              	.L46:
 467:Lib/FreeRTOS/Source/event_groups.c ****     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 654              		.loc 1 467 5 is_stmt 1
 655 0026 3B68     		ldr	r3, [r7]
 656 0028 B3F1807F 		cmp	r3, #16777216
 657 002c 08D3     		bcc	.L47
 658              		.loc 1 467 5 is_stmt 0 discriminator 1
 659 002e FFF7FEFF 		bl	ulSetInterruptMask
 660 0032 0D4B     		ldr	r3, .L49
 661 0034 0D4A     		ldr	r2, .L49+4
 662 0036 40F2D311 		movw	r1, #467
 663 003a 0D48     		ldr	r0, .L49+8
 664 003c FFF7FEFF 		bl	__assert_func
 665              	.L47:
 468:Lib/FreeRTOS/Source/event_groups.c **** 
 469:Lib/FreeRTOS/Source/event_groups.c ****     taskENTER_CRITICAL();
 666              		.loc 1 469 5 is_stmt 1
 667 0040 FFF7FEFF 		bl	vPortEnterCritical
 470:Lib/FreeRTOS/Source/event_groups.c ****     {
 471:Lib/FreeRTOS/Source/event_groups.c ****         traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 472:Lib/FreeRTOS/Source/event_groups.c **** 
 473:Lib/FreeRTOS/Source/event_groups.c ****         /* The value returned is the event group value prior to the bits being
 474:Lib/FreeRTOS/Source/event_groups.c ****          * cleared. */
 475:Lib/FreeRTOS/Source/event_groups.c ****         uxReturn = pxEventBits->uxEventBits;
 668              		.loc 1 475 18
ARM GAS  /tmp/ccS51NaV.s 			page 21


 669 0044 FB68     		ldr	r3, [r7, #12]
 670 0046 1B68     		ldr	r3, [r3]
 671 0048 BB60     		str	r3, [r7, #8]
 476:Lib/FreeRTOS/Source/event_groups.c **** 
 477:Lib/FreeRTOS/Source/event_groups.c ****         /* Clear the bits. */
 478:Lib/FreeRTOS/Source/event_groups.c ****         pxEventBits->uxEventBits &= ~uxBitsToClear;
 672              		.loc 1 478 20
 673 004a FB68     		ldr	r3, [r7, #12]
 674 004c 1A68     		ldr	r2, [r3]
 675              		.loc 1 478 37
 676 004e 3B68     		ldr	r3, [r7]
 677 0050 DB43     		mvns	r3, r3
 678              		.loc 1 478 34
 679 0052 1A40     		ands	r2, r2, r3
 680 0054 FB68     		ldr	r3, [r7, #12]
 681 0056 1A60     		str	r2, [r3]
 479:Lib/FreeRTOS/Source/event_groups.c ****     }
 480:Lib/FreeRTOS/Source/event_groups.c ****     taskEXIT_CRITICAL();
 682              		.loc 1 480 5
 683 0058 FFF7FEFF 		bl	vPortExitCritical
 481:Lib/FreeRTOS/Source/event_groups.c **** 
 482:Lib/FreeRTOS/Source/event_groups.c ****     return uxReturn;
 684              		.loc 1 482 12
 685 005c BB68     		ldr	r3, [r7, #8]
 483:Lib/FreeRTOS/Source/event_groups.c **** }
 686              		.loc 1 483 1
 687 005e 1846     		mov	r0, r3
 688 0060 1037     		adds	r7, r7, #16
 689              		.cfi_def_cfa_offset 8
 690 0062 BD46     		mov	sp, r7
 691              		.cfi_def_cfa_register 13
 692              		@ sp needed
 693 0064 80BD     		pop	{r7, pc}
 694              	.L50:
 695 0066 00BF     		.align	2
 696              	.L49:
 697 0068 00000000 		.word	.LC0
 698 006c 00000000 		.word	__func__.3
 699 0070 04000000 		.word	.LC1
 700              		.cfi_endproc
 701              	.LFE3:
 703              		.section	.text.xEventGroupClearBitsFromISR,"ax",%progbits
 704              		.align	1
 705              		.global	xEventGroupClearBitsFromISR
 706              		.syntax unified
 707              		.thumb
 708              		.thumb_func
 710              	xEventGroupClearBitsFromISR:
 711              	.LFB4:
 484:Lib/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 485:Lib/FreeRTOS/Source/event_groups.c **** 
 486:Lib/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 487:Lib/FreeRTOS/Source/event_groups.c **** 
 488:Lib/FreeRTOS/Source/event_groups.c ****     BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup,
 489:Lib/FreeRTOS/Source/event_groups.c ****                                             const EventBits_t uxBitsToClear )
 490:Lib/FreeRTOS/Source/event_groups.c ****     {
 712              		.loc 1 490 5
ARM GAS  /tmp/ccS51NaV.s 			page 22


 713              		.cfi_startproc
 714              		@ args = 0, pretend = 0, frame = 16
 715              		@ frame_needed = 1, uses_anonymous_args = 0
 716 0000 80B5     		push	{r7, lr}
 717              		.cfi_def_cfa_offset 8
 718              		.cfi_offset 7, -8
 719              		.cfi_offset 14, -4
 720 0002 84B0     		sub	sp, sp, #16
 721              		.cfi_def_cfa_offset 24
 722 0004 00AF     		add	r7, sp, #0
 723              		.cfi_def_cfa_register 7
 724 0006 7860     		str	r0, [r7, #4]
 725 0008 3960     		str	r1, [r7]
 491:Lib/FreeRTOS/Source/event_groups.c ****         BaseType_t xReturn;
 492:Lib/FreeRTOS/Source/event_groups.c **** 
 493:Lib/FreeRTOS/Source/event_groups.c ****         traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 494:Lib/FreeRTOS/Source/event_groups.c ****         xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGro
 726              		.loc 1 494 19
 727 000a 0023     		movs	r3, #0
 728 000c 3A68     		ldr	r2, [r7]
 729 000e 7968     		ldr	r1, [r7, #4]
 730 0010 0448     		ldr	r0, .L53
 731 0012 FFF7FEFF 		bl	xTimerPendFunctionCallFromISR
 732 0016 F860     		str	r0, [r7, #12]
 495:Lib/FreeRTOS/Source/event_groups.c **** 
 496:Lib/FreeRTOS/Source/event_groups.c ****         return xReturn;
 733              		.loc 1 496 16
 734 0018 FB68     		ldr	r3, [r7, #12]
 497:Lib/FreeRTOS/Source/event_groups.c ****     }
 735              		.loc 1 497 5
 736 001a 1846     		mov	r0, r3
 737 001c 1037     		adds	r7, r7, #16
 738              		.cfi_def_cfa_offset 8
 739 001e BD46     		mov	sp, r7
 740              		.cfi_def_cfa_register 13
 741              		@ sp needed
 742 0020 80BD     		pop	{r7, pc}
 743              	.L54:
 744 0022 00BF     		.align	2
 745              	.L53:
 746 0024 00000000 		.word	vEventGroupClearBitsCallback
 747              		.cfi_endproc
 748              	.LFE4:
 750              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 751              		.align	1
 752              		.global	xEventGroupGetBitsFromISR
 753              		.syntax unified
 754              		.thumb
 755              		.thumb_func
 757              	xEventGroupGetBitsFromISR:
 758              	.LFB5:
 498:Lib/FreeRTOS/Source/event_groups.c **** 
 499:Lib/FreeRTOS/Source/event_groups.c **** #endif /* if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( co
 500:Lib/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 501:Lib/FreeRTOS/Source/event_groups.c **** 
 502:Lib/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 503:Lib/FreeRTOS/Source/event_groups.c **** {
ARM GAS  /tmp/ccS51NaV.s 			page 23


 759              		.loc 1 503 1
 760              		.cfi_startproc
 761              		@ args = 0, pretend = 0, frame = 24
 762              		@ frame_needed = 1, uses_anonymous_args = 0
 763 0000 80B5     		push	{r7, lr}
 764              		.cfi_def_cfa_offset 8
 765              		.cfi_offset 7, -8
 766              		.cfi_offset 14, -4
 767 0002 86B0     		sub	sp, sp, #24
 768              		.cfi_def_cfa_offset 32
 769 0004 00AF     		add	r7, sp, #0
 770              		.cfi_def_cfa_register 7
 771 0006 7860     		str	r0, [r7, #4]
 504:Lib/FreeRTOS/Source/event_groups.c ****     UBaseType_t uxSavedInterruptStatus;
 505:Lib/FreeRTOS/Source/event_groups.c ****     EventGroup_t const * const pxEventBits = xEventGroup;
 772              		.loc 1 505 32
 773 0008 7B68     		ldr	r3, [r7, #4]
 774 000a 7B61     		str	r3, [r7, #20]
 506:Lib/FreeRTOS/Source/event_groups.c ****     EventBits_t uxReturn;
 507:Lib/FreeRTOS/Source/event_groups.c **** 
 508:Lib/FreeRTOS/Source/event_groups.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 775              		.loc 1 508 30
 776 000c FFF7FEFF 		bl	ulSetInterruptMask
 777 0010 3861     		str	r0, [r7, #16]
 509:Lib/FreeRTOS/Source/event_groups.c ****     {
 510:Lib/FreeRTOS/Source/event_groups.c ****         uxReturn = pxEventBits->uxEventBits;
 778              		.loc 1 510 18
 779 0012 7B69     		ldr	r3, [r7, #20]
 780 0014 1B68     		ldr	r3, [r3]
 781 0016 FB60     		str	r3, [r7, #12]
 511:Lib/FreeRTOS/Source/event_groups.c ****     }
 512:Lib/FreeRTOS/Source/event_groups.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 782              		.loc 1 512 5
 783 0018 3869     		ldr	r0, [r7, #16]
 784 001a FFF7FEFF 		bl	vClearInterruptMask
 513:Lib/FreeRTOS/Source/event_groups.c **** 
 514:Lib/FreeRTOS/Source/event_groups.c ****     return uxReturn;
 785              		.loc 1 514 12
 786 001e FB68     		ldr	r3, [r7, #12]
 515:Lib/FreeRTOS/Source/event_groups.c **** } /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to co
 787              		.loc 1 515 1
 788 0020 1846     		mov	r0, r3
 789 0022 1837     		adds	r7, r7, #24
 790              		.cfi_def_cfa_offset 8
 791 0024 BD46     		mov	sp, r7
 792              		.cfi_def_cfa_register 13
 793              		@ sp needed
 794 0026 80BD     		pop	{r7, pc}
 795              		.cfi_endproc
 796              	.LFE5:
 798              		.section	.text.xEventGroupSetBits,"ax",%progbits
 799              		.align	1
 800              		.global	xEventGroupSetBits
 801              		.syntax unified
 802              		.thumb
 803              		.thumb_func
 805              	xEventGroupSetBits:
ARM GAS  /tmp/ccS51NaV.s 			page 24


 806              	.LFB6:
 516:Lib/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 517:Lib/FreeRTOS/Source/event_groups.c **** 
 518:Lib/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
 519:Lib/FreeRTOS/Source/event_groups.c ****                                 const EventBits_t uxBitsToSet )
 520:Lib/FreeRTOS/Source/event_groups.c **** {
 807              		.loc 1 520 1
 808              		.cfi_startproc
 809              		@ args = 0, pretend = 0, frame = 48
 810              		@ frame_needed = 1, uses_anonymous_args = 0
 811 0000 80B5     		push	{r7, lr}
 812              		.cfi_def_cfa_offset 8
 813              		.cfi_offset 7, -8
 814              		.cfi_offset 14, -4
 815 0002 8CB0     		sub	sp, sp, #48
 816              		.cfi_def_cfa_offset 56
 817 0004 00AF     		add	r7, sp, #0
 818              		.cfi_def_cfa_register 7
 819 0006 7860     		str	r0, [r7, #4]
 820 0008 3960     		str	r1, [r7]
 521:Lib/FreeRTOS/Source/event_groups.c ****     ListItem_t * pxListItem;
 522:Lib/FreeRTOS/Source/event_groups.c ****     ListItem_t * pxNext;
 523:Lib/FreeRTOS/Source/event_groups.c ****     ListItem_t const * pxListEnd;
 524:Lib/FreeRTOS/Source/event_groups.c ****     List_t const * pxList;
 525:Lib/FreeRTOS/Source/event_groups.c ****     EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 821              		.loc 1 525 17
 822 000a 0023     		movs	r3, #0
 823 000c BB62     		str	r3, [r7, #40]
 526:Lib/FreeRTOS/Source/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 824              		.loc 1 526 20
 825 000e 7B68     		ldr	r3, [r7, #4]
 826 0010 3B62     		str	r3, [r7, #32]
 527:Lib/FreeRTOS/Source/event_groups.c ****     BaseType_t xMatchFound = pdFALSE;
 827              		.loc 1 527 16
 828 0012 0023     		movs	r3, #0
 829 0014 7B62     		str	r3, [r7, #36]
 528:Lib/FreeRTOS/Source/event_groups.c **** 
 529:Lib/FreeRTOS/Source/event_groups.c ****     /* Check the user is not attempting to set the bits used by the kernel
 530:Lib/FreeRTOS/Source/event_groups.c ****      * itself. */
 531:Lib/FreeRTOS/Source/event_groups.c ****     configASSERT( xEventGroup );
 830              		.loc 1 531 5
 831 0016 7B68     		ldr	r3, [r7, #4]
 832 0018 002B     		cmp	r3, #0
 833 001a 08D1     		bne	.L58
 834              		.loc 1 531 5 is_stmt 0 discriminator 1
 835 001c FFF7FEFF 		bl	ulSetInterruptMask
 836 0020 3A4B     		ldr	r3, .L67
 837 0022 3B4A     		ldr	r2, .L67+4
 838 0024 40F21321 		movw	r1, #531
 839 0028 3A48     		ldr	r0, .L67+8
 840 002a FFF7FEFF 		bl	__assert_func
 841              	.L58:
 532:Lib/FreeRTOS/Source/event_groups.c ****     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 842              		.loc 1 532 5 is_stmt 1
 843 002e 3B68     		ldr	r3, [r7]
 844 0030 B3F1807F 		cmp	r3, #16777216
 845 0034 08D3     		bcc	.L59
ARM GAS  /tmp/ccS51NaV.s 			page 25


 846              		.loc 1 532 5 is_stmt 0 discriminator 1
 847 0036 FFF7FEFF 		bl	ulSetInterruptMask
 848 003a 344B     		ldr	r3, .L67
 849 003c 344A     		ldr	r2, .L67+4
 850 003e 4FF40571 		mov	r1, #532
 851 0042 3448     		ldr	r0, .L67+8
 852 0044 FFF7FEFF 		bl	__assert_func
 853              	.L59:
 533:Lib/FreeRTOS/Source/event_groups.c **** 
 534:Lib/FreeRTOS/Source/event_groups.c ****     pxList = &( pxEventBits->xTasksWaitingForBits );
 854              		.loc 1 534 12 is_stmt 1
 855 0048 3B6A     		ldr	r3, [r7, #32]
 856 004a 0433     		adds	r3, r3, #4
 857 004c FB61     		str	r3, [r7, #28]
 535:Lib/FreeRTOS/Source/event_groups.c ****     pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is 
 858              		.loc 1 535 15
 859 004e FB69     		ldr	r3, [r7, #28]
 860 0050 0833     		adds	r3, r3, #8
 861 0052 BB61     		str	r3, [r7, #24]
 536:Lib/FreeRTOS/Source/event_groups.c ****     vTaskSuspendAll();
 862              		.loc 1 536 5
 863 0054 FFF7FEFF 		bl	vTaskSuspendAll
 537:Lib/FreeRTOS/Source/event_groups.c ****     {
 538:Lib/FreeRTOS/Source/event_groups.c ****         traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 539:Lib/FreeRTOS/Source/event_groups.c **** 
 540:Lib/FreeRTOS/Source/event_groups.c ****         pxListItem = listGET_HEAD_ENTRY( pxList );
 864              		.loc 1 540 20
 865 0058 FB69     		ldr	r3, [r7, #28]
 866 005a DB68     		ldr	r3, [r3, #12]
 867 005c FB62     		str	r3, [r7, #44]
 541:Lib/FreeRTOS/Source/event_groups.c **** 
 542:Lib/FreeRTOS/Source/event_groups.c ****         /* Set the bits. */
 543:Lib/FreeRTOS/Source/event_groups.c ****         pxEventBits->uxEventBits |= uxBitsToSet;
 868              		.loc 1 543 20
 869 005e 3B6A     		ldr	r3, [r7, #32]
 870 0060 1A68     		ldr	r2, [r3]
 871              		.loc 1 543 34
 872 0062 3B68     		ldr	r3, [r7]
 873 0064 1A43     		orrs	r2, r2, r3
 874 0066 3B6A     		ldr	r3, [r7, #32]
 875 0068 1A60     		str	r2, [r3]
 544:Lib/FreeRTOS/Source/event_groups.c **** 
 545:Lib/FreeRTOS/Source/event_groups.c ****         /* See if the new bit value should unblock any tasks. */
 546:Lib/FreeRTOS/Source/event_groups.c ****         while( pxListItem != pxListEnd )
 876              		.loc 1 546 14
 877 006a 3CE0     		b	.L60
 878              	.L65:
 547:Lib/FreeRTOS/Source/event_groups.c ****         {
 548:Lib/FreeRTOS/Source/event_groups.c ****             pxNext = listGET_NEXT( pxListItem );
 879              		.loc 1 548 20
 880 006c FB6A     		ldr	r3, [r7, #44]
 881 006e 5B68     		ldr	r3, [r3, #4]
 882 0070 7B61     		str	r3, [r7, #20]
 549:Lib/FreeRTOS/Source/event_groups.c ****             uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 883              		.loc 1 549 29
 884 0072 FB6A     		ldr	r3, [r7, #44]
 885 0074 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccS51NaV.s 			page 26


 886 0076 3B61     		str	r3, [r7, #16]
 550:Lib/FreeRTOS/Source/event_groups.c ****             xMatchFound = pdFALSE;
 887              		.loc 1 550 25
 888 0078 0023     		movs	r3, #0
 889 007a 7B62     		str	r3, [r7, #36]
 551:Lib/FreeRTOS/Source/event_groups.c **** 
 552:Lib/FreeRTOS/Source/event_groups.c ****             /* Split the bits waited for from the control bits. */
 553:Lib/FreeRTOS/Source/event_groups.c ****             uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 890              		.loc 1 553 27
 891 007c 3B69     		ldr	r3, [r7, #16]
 892 007e 03F07F43 		and	r3, r3, #-16777216
 893 0082 FB60     		str	r3, [r7, #12]
 554:Lib/FreeRTOS/Source/event_groups.c ****             uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 894              		.loc 1 554 29
 895 0084 3B69     		ldr	r3, [r7, #16]
 896 0086 23F07F43 		bic	r3, r3, #-16777216
 897 008a 3B61     		str	r3, [r7, #16]
 555:Lib/FreeRTOS/Source/event_groups.c **** 
 556:Lib/FreeRTOS/Source/event_groups.c ****             if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 898              		.loc 1 556 33
 899 008c FB68     		ldr	r3, [r7, #12]
 900 008e 03F08063 		and	r3, r3, #67108864
 901              		.loc 1 556 15
 902 0092 002B     		cmp	r3, #0
 903 0094 08D1     		bne	.L61
 557:Lib/FreeRTOS/Source/event_groups.c ****             {
 558:Lib/FreeRTOS/Source/event_groups.c ****                 /* Just looking for single bit being set. */
 559:Lib/FreeRTOS/Source/event_groups.c ****                 if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 904              		.loc 1 559 52
 905 0096 3B6A     		ldr	r3, [r7, #32]
 906 0098 1A68     		ldr	r2, [r3]
 907              		.loc 1 559 39
 908 009a 3B69     		ldr	r3, [r7, #16]
 909 009c 1340     		ands	r3, r3, r2
 910              		.loc 1 559 19
 911 009e 002B     		cmp	r3, #0
 912 00a0 0BD0     		beq	.L62
 560:Lib/FreeRTOS/Source/event_groups.c ****                 {
 561:Lib/FreeRTOS/Source/event_groups.c ****                     xMatchFound = pdTRUE;
 913              		.loc 1 561 33
 914 00a2 0123     		movs	r3, #1
 915 00a4 7B62     		str	r3, [r7, #36]
 916 00a6 08E0     		b	.L62
 917              	.L61:
 562:Lib/FreeRTOS/Source/event_groups.c ****                 }
 563:Lib/FreeRTOS/Source/event_groups.c ****                 else
 564:Lib/FreeRTOS/Source/event_groups.c ****                 {
 565:Lib/FreeRTOS/Source/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 566:Lib/FreeRTOS/Source/event_groups.c ****                 }
 567:Lib/FreeRTOS/Source/event_groups.c ****             }
 568:Lib/FreeRTOS/Source/event_groups.c ****             else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 918              		.loc 1 568 53
 919 00a8 3B6A     		ldr	r3, [r7, #32]
 920 00aa 1A68     		ldr	r2, [r3]
 921              		.loc 1 568 40
 922 00ac 3B69     		ldr	r3, [r7, #16]
 923 00ae 1340     		ands	r3, r3, r2
ARM GAS  /tmp/ccS51NaV.s 			page 27


 924              		.loc 1 568 20
 925 00b0 3A69     		ldr	r2, [r7, #16]
 926 00b2 9A42     		cmp	r2, r3
 927 00b4 01D1     		bne	.L62
 569:Lib/FreeRTOS/Source/event_groups.c ****             {
 570:Lib/FreeRTOS/Source/event_groups.c ****                 /* All bits are set. */
 571:Lib/FreeRTOS/Source/event_groups.c ****                 xMatchFound = pdTRUE;
 928              		.loc 1 571 29
 929 00b6 0123     		movs	r3, #1
 930 00b8 7B62     		str	r3, [r7, #36]
 931              	.L62:
 572:Lib/FreeRTOS/Source/event_groups.c ****             }
 573:Lib/FreeRTOS/Source/event_groups.c ****             else
 574:Lib/FreeRTOS/Source/event_groups.c ****             {
 575:Lib/FreeRTOS/Source/event_groups.c ****                 /* Need all bits to be set, but not all the bits were set. */
 576:Lib/FreeRTOS/Source/event_groups.c ****             }
 577:Lib/FreeRTOS/Source/event_groups.c **** 
 578:Lib/FreeRTOS/Source/event_groups.c ****             if( xMatchFound != pdFALSE )
 932              		.loc 1 578 15
 933 00ba 7B6A     		ldr	r3, [r7, #36]
 934 00bc 002B     		cmp	r3, #0
 935 00be 10D0     		beq	.L63
 579:Lib/FreeRTOS/Source/event_groups.c ****             {
 580:Lib/FreeRTOS/Source/event_groups.c ****                 /* The bits match.  Should the bits be cleared on exit? */
 581:Lib/FreeRTOS/Source/event_groups.c ****                 if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 936              		.loc 1 581 37
 937 00c0 FB68     		ldr	r3, [r7, #12]
 938 00c2 03F08073 		and	r3, r3, #16777216
 939              		.loc 1 581 19
 940 00c6 002B     		cmp	r3, #0
 941 00c8 03D0     		beq	.L64
 582:Lib/FreeRTOS/Source/event_groups.c ****                 {
 583:Lib/FreeRTOS/Source/event_groups.c ****                     uxBitsToClear |= uxBitsWaitedFor;
 942              		.loc 1 583 35
 943 00ca BA6A     		ldr	r2, [r7, #40]
 944 00cc 3B69     		ldr	r3, [r7, #16]
 945 00ce 1343     		orrs	r3, r3, r2
 946 00d0 BB62     		str	r3, [r7, #40]
 947              	.L64:
 584:Lib/FreeRTOS/Source/event_groups.c ****                 }
 585:Lib/FreeRTOS/Source/event_groups.c ****                 else
 586:Lib/FreeRTOS/Source/event_groups.c ****                 {
 587:Lib/FreeRTOS/Source/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 588:Lib/FreeRTOS/Source/event_groups.c ****                 }
 589:Lib/FreeRTOS/Source/event_groups.c **** 
 590:Lib/FreeRTOS/Source/event_groups.c ****                 /* Store the actual event flag value in the task's event list
 591:Lib/FreeRTOS/Source/event_groups.c ****                  * item before removing the task from the event list.  The
 592:Lib/FreeRTOS/Source/event_groups.c ****                  * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 593:Lib/FreeRTOS/Source/event_groups.c ****                  * that is was unblocked due to its required bits matching, rather
 594:Lib/FreeRTOS/Source/event_groups.c ****                  * than because it timed out. */
 595:Lib/FreeRTOS/Source/event_groups.c ****                 vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBL
 948              		.loc 1 595 75
 949 00d2 3B6A     		ldr	r3, [r7, #32]
 950 00d4 1B68     		ldr	r3, [r3]
 951              		.loc 1 595 17
 952 00d6 43F00073 		orr	r3, r3, #33554432
 953 00da 1946     		mov	r1, r3
ARM GAS  /tmp/ccS51NaV.s 			page 28


 954 00dc F86A     		ldr	r0, [r7, #44]
 955 00de FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 956              	.L63:
 596:Lib/FreeRTOS/Source/event_groups.c ****             }
 597:Lib/FreeRTOS/Source/event_groups.c **** 
 598:Lib/FreeRTOS/Source/event_groups.c ****             /* Move onto the next list item.  Note pxListItem->pxNext is not
 599:Lib/FreeRTOS/Source/event_groups.c ****              * used here as the list item may have been removed from the event list
 600:Lib/FreeRTOS/Source/event_groups.c ****              * and inserted into the ready/pending reading list. */
 601:Lib/FreeRTOS/Source/event_groups.c ****             pxListItem = pxNext;
 957              		.loc 1 601 24
 958 00e2 7B69     		ldr	r3, [r7, #20]
 959 00e4 FB62     		str	r3, [r7, #44]
 960              	.L60:
 546:Lib/FreeRTOS/Source/event_groups.c ****         {
 961              		.loc 1 546 27
 962 00e6 FA6A     		ldr	r2, [r7, #44]
 963 00e8 BB69     		ldr	r3, [r7, #24]
 964 00ea 9A42     		cmp	r2, r3
 965 00ec BED1     		bne	.L65
 602:Lib/FreeRTOS/Source/event_groups.c ****         }
 603:Lib/FreeRTOS/Source/event_groups.c **** 
 604:Lib/FreeRTOS/Source/event_groups.c ****         /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 605:Lib/FreeRTOS/Source/event_groups.c ****          * bit was set in the control word. */
 606:Lib/FreeRTOS/Source/event_groups.c ****         pxEventBits->uxEventBits &= ~uxBitsToClear;
 966              		.loc 1 606 20
 967 00ee 3B6A     		ldr	r3, [r7, #32]
 968 00f0 1A68     		ldr	r2, [r3]
 969              		.loc 1 606 37
 970 00f2 BB6A     		ldr	r3, [r7, #40]
 971 00f4 DB43     		mvns	r3, r3
 972              		.loc 1 606 34
 973 00f6 1A40     		ands	r2, r2, r3
 974 00f8 3B6A     		ldr	r3, [r7, #32]
 975 00fa 1A60     		str	r2, [r3]
 607:Lib/FreeRTOS/Source/event_groups.c ****     }
 608:Lib/FreeRTOS/Source/event_groups.c ****     ( void ) xTaskResumeAll();
 976              		.loc 1 608 14
 977 00fc FFF7FEFF 		bl	xTaskResumeAll
 609:Lib/FreeRTOS/Source/event_groups.c **** 
 610:Lib/FreeRTOS/Source/event_groups.c ****     return pxEventBits->uxEventBits;
 978              		.loc 1 610 23
 979 0100 3B6A     		ldr	r3, [r7, #32]
 980 0102 1B68     		ldr	r3, [r3]
 611:Lib/FreeRTOS/Source/event_groups.c **** }
 981              		.loc 1 611 1
 982 0104 1846     		mov	r0, r3
 983 0106 3037     		adds	r7, r7, #48
 984              		.cfi_def_cfa_offset 8
 985 0108 BD46     		mov	sp, r7
 986              		.cfi_def_cfa_register 13
 987              		@ sp needed
 988 010a 80BD     		pop	{r7, pc}
 989              	.L68:
 990              		.align	2
 991              	.L67:
 992 010c 00000000 		.word	.LC0
 993 0110 00000000 		.word	__func__.2
ARM GAS  /tmp/ccS51NaV.s 			page 29


 994 0114 04000000 		.word	.LC1
 995              		.cfi_endproc
 996              	.LFE6:
 998              		.section	.text.vEventGroupDelete,"ax",%progbits
 999              		.align	1
 1000              		.global	vEventGroupDelete
 1001              		.syntax unified
 1002              		.thumb
 1003              		.thumb_func
 1005              	vEventGroupDelete:
 1006              	.LFB7:
 612:Lib/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 613:Lib/FreeRTOS/Source/event_groups.c **** 
 614:Lib/FreeRTOS/Source/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 615:Lib/FreeRTOS/Source/event_groups.c **** {
 1007              		.loc 1 615 1
 1008              		.cfi_startproc
 1009              		@ args = 0, pretend = 0, frame = 16
 1010              		@ frame_needed = 1, uses_anonymous_args = 0
 1011 0000 80B5     		push	{r7, lr}
 1012              		.cfi_def_cfa_offset 8
 1013              		.cfi_offset 7, -8
 1014              		.cfi_offset 14, -4
 1015 0002 84B0     		sub	sp, sp, #16
 1016              		.cfi_def_cfa_offset 24
 1017 0004 00AF     		add	r7, sp, #0
 1018              		.cfi_def_cfa_register 7
 1019 0006 7860     		str	r0, [r7, #4]
 616:Lib/FreeRTOS/Source/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 1020              		.loc 1 616 20
 1021 0008 7B68     		ldr	r3, [r7, #4]
 1022 000a FB60     		str	r3, [r7, #12]
 617:Lib/FreeRTOS/Source/event_groups.c ****     const List_t * pxTasksWaitingForBits;
 618:Lib/FreeRTOS/Source/event_groups.c **** 
 619:Lib/FreeRTOS/Source/event_groups.c ****     configASSERT( pxEventBits );
 1023              		.loc 1 619 5
 1024 000c FB68     		ldr	r3, [r7, #12]
 1025 000e 002B     		cmp	r3, #0
 1026 0010 08D1     		bne	.L70
 1027              		.loc 1 619 5 is_stmt 0 discriminator 1
 1028 0012 FFF7FEFF 		bl	ulSetInterruptMask
 1029 0016 164B     		ldr	r3, .L74
 1030 0018 164A     		ldr	r2, .L74+4
 1031 001a 40F26B21 		movw	r1, #619
 1032 001e 1648     		ldr	r0, .L74+8
 1033 0020 FFF7FEFF 		bl	__assert_func
 1034              	.L70:
 620:Lib/FreeRTOS/Source/event_groups.c **** 
 621:Lib/FreeRTOS/Source/event_groups.c ****     pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 1035              		.loc 1 621 27 is_stmt 1
 1036 0024 FB68     		ldr	r3, [r7, #12]
 1037 0026 0433     		adds	r3, r3, #4
 1038 0028 BB60     		str	r3, [r7, #8]
 622:Lib/FreeRTOS/Source/event_groups.c **** 
 623:Lib/FreeRTOS/Source/event_groups.c ****     vTaskSuspendAll();
 1039              		.loc 1 623 5
 1040 002a FFF7FEFF 		bl	vTaskSuspendAll
ARM GAS  /tmp/ccS51NaV.s 			page 30


 624:Lib/FreeRTOS/Source/event_groups.c ****     {
 625:Lib/FreeRTOS/Source/event_groups.c ****         traceEVENT_GROUP_DELETE( xEventGroup );
 626:Lib/FreeRTOS/Source/event_groups.c **** 
 627:Lib/FreeRTOS/Source/event_groups.c ****         while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 1041              		.loc 1 627 14
 1042 002e 15E0     		b	.L71
 1043              	.L73:
 628:Lib/FreeRTOS/Source/event_groups.c ****         {
 629:Lib/FreeRTOS/Source/event_groups.c ****             /* Unblock the task, returning 0 as the event list is being deleted
 630:Lib/FreeRTOS/Source/event_groups.c ****              * and cannot therefore have any bits set. */
 631:Lib/FreeRTOS/Source/event_groups.c ****             configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTas
 1044              		.loc 1 631 13
 1045 0030 BB68     		ldr	r3, [r7, #8]
 1046 0032 DA68     		ldr	r2, [r3, #12]
 1047 0034 BB68     		ldr	r3, [r7, #8]
 1048 0036 0833     		adds	r3, r3, #8
 1049 0038 9A42     		cmp	r2, r3
 1050 003a 08D1     		bne	.L72
 1051              		.loc 1 631 13 is_stmt 0 discriminator 1
 1052 003c FFF7FEFF 		bl	ulSetInterruptMask
 1053 0040 0B4B     		ldr	r3, .L74
 1054 0042 0C4A     		ldr	r2, .L74+4
 1055 0044 40F27721 		movw	r1, #631
 1056 0048 0B48     		ldr	r0, .L74+8
 1057 004a FFF7FEFF 		bl	__assert_func
 1058              	.L72:
 632:Lib/FreeRTOS/Source/event_groups.c ****             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 1059              		.loc 1 632 79 is_stmt 1
 1060 004e BB68     		ldr	r3, [r7, #8]
 1061 0050 DB68     		ldr	r3, [r3, #12]
 1062              		.loc 1 632 13
 1063 0052 4FF00071 		mov	r1, #33554432
 1064 0056 1846     		mov	r0, r3
 1065 0058 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 1066              	.L71:
 627:Lib/FreeRTOS/Source/event_groups.c ****         {
 1067              		.loc 1 627 16
 1068 005c BB68     		ldr	r3, [r7, #8]
 1069 005e 1B68     		ldr	r3, [r3]
 627:Lib/FreeRTOS/Source/event_groups.c ****         {
 1070              		.loc 1 627 65
 1071 0060 002B     		cmp	r3, #0
 1072 0062 E5D1     		bne	.L73
 633:Lib/FreeRTOS/Source/event_groups.c ****         }
 634:Lib/FreeRTOS/Source/event_groups.c ****     }
 635:Lib/FreeRTOS/Source/event_groups.c ****     ( void ) xTaskResumeAll();
 1073              		.loc 1 635 14
 1074 0064 FFF7FEFF 		bl	xTaskResumeAll
 636:Lib/FreeRTOS/Source/event_groups.c **** 
 637:Lib/FreeRTOS/Source/event_groups.c ****     #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 638:Lib/FreeRTOS/Source/event_groups.c ****     {
 639:Lib/FreeRTOS/Source/event_groups.c ****         /* The event group can only have been allocated dynamically - free
 640:Lib/FreeRTOS/Source/event_groups.c ****          * it again. */
 641:Lib/FreeRTOS/Source/event_groups.c ****         vPortFree( pxEventBits );
 642:Lib/FreeRTOS/Source/event_groups.c ****     }
 643:Lib/FreeRTOS/Source/event_groups.c ****     #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 644:Lib/FreeRTOS/Source/event_groups.c ****     {
ARM GAS  /tmp/ccS51NaV.s 			page 31


 645:Lib/FreeRTOS/Source/event_groups.c ****         /* The event group could have been allocated statically or
 646:Lib/FreeRTOS/Source/event_groups.c ****          * dynamically, so check before attempting to free the memory. */
 647:Lib/FreeRTOS/Source/event_groups.c ****         if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 648:Lib/FreeRTOS/Source/event_groups.c ****         {
 649:Lib/FreeRTOS/Source/event_groups.c ****             vPortFree( pxEventBits );
 650:Lib/FreeRTOS/Source/event_groups.c ****         }
 651:Lib/FreeRTOS/Source/event_groups.c ****         else
 652:Lib/FreeRTOS/Source/event_groups.c ****         {
 653:Lib/FreeRTOS/Source/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 654:Lib/FreeRTOS/Source/event_groups.c ****         }
 655:Lib/FreeRTOS/Source/event_groups.c ****     }
 656:Lib/FreeRTOS/Source/event_groups.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 657:Lib/FreeRTOS/Source/event_groups.c **** }
 1075              		.loc 1 657 1
 1076 0068 00BF     		nop
 1077 006a 1037     		adds	r7, r7, #16
 1078              		.cfi_def_cfa_offset 8
 1079 006c BD46     		mov	sp, r7
 1080              		.cfi_def_cfa_register 13
 1081              		@ sp needed
 1082 006e 80BD     		pop	{r7, pc}
 1083              	.L75:
 1084              		.align	2
 1085              	.L74:
 1086 0070 00000000 		.word	.LC0
 1087 0074 00000000 		.word	__func__.1
 1088 0078 04000000 		.word	.LC1
 1089              		.cfi_endproc
 1090              	.LFE7:
 1092              		.section	.text.xEventGroupGetStaticBuffer,"ax",%progbits
 1093              		.align	1
 1094              		.global	xEventGroupGetStaticBuffer
 1095              		.syntax unified
 1096              		.thumb
 1097              		.thumb_func
 1099              	xEventGroupGetStaticBuffer:
 1100              	.LFB8:
 658:Lib/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 659:Lib/FreeRTOS/Source/event_groups.c **** 
 660:Lib/FreeRTOS/Source/event_groups.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 661:Lib/FreeRTOS/Source/event_groups.c ****     BaseType_t xEventGroupGetStaticBuffer( EventGroupHandle_t xEventGroup,
 662:Lib/FreeRTOS/Source/event_groups.c ****                                            StaticEventGroup_t ** ppxEventGroupBuffer )
 663:Lib/FreeRTOS/Source/event_groups.c ****     {
 1101              		.loc 1 663 5
 1102              		.cfi_startproc
 1103              		@ args = 0, pretend = 0, frame = 16
 1104              		@ frame_needed = 1, uses_anonymous_args = 0
 1105 0000 80B5     		push	{r7, lr}
 1106              		.cfi_def_cfa_offset 8
 1107              		.cfi_offset 7, -8
 1108              		.cfi_offset 14, -4
 1109 0002 84B0     		sub	sp, sp, #16
 1110              		.cfi_def_cfa_offset 24
 1111 0004 00AF     		add	r7, sp, #0
 1112              		.cfi_def_cfa_register 7
 1113 0006 7860     		str	r0, [r7, #4]
 1114 0008 3960     		str	r1, [r7]
ARM GAS  /tmp/ccS51NaV.s 			page 32


 664:Lib/FreeRTOS/Source/event_groups.c ****         BaseType_t xReturn;
 665:Lib/FreeRTOS/Source/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 1115              		.loc 1 665 24
 1116 000a 7B68     		ldr	r3, [r7, #4]
 1117 000c FB60     		str	r3, [r7, #12]
 666:Lib/FreeRTOS/Source/event_groups.c **** 
 667:Lib/FreeRTOS/Source/event_groups.c ****         configASSERT( pxEventBits );
 1118              		.loc 1 667 9
 1119 000e FB68     		ldr	r3, [r7, #12]
 1120 0010 002B     		cmp	r3, #0
 1121 0012 08D1     		bne	.L77
 1122              		.loc 1 667 9 is_stmt 0 discriminator 1
 1123 0014 FFF7FEFF 		bl	ulSetInterruptMask
 1124 0018 0E4B     		ldr	r3, .L80
 1125 001a 0F4A     		ldr	r2, .L80+4
 1126 001c 40F29B21 		movw	r1, #667
 1127 0020 0E48     		ldr	r0, .L80+8
 1128 0022 FFF7FEFF 		bl	__assert_func
 1129              	.L77:
 668:Lib/FreeRTOS/Source/event_groups.c ****         configASSERT( ppxEventGroupBuffer );
 1130              		.loc 1 668 9 is_stmt 1
 1131 0026 3B68     		ldr	r3, [r7]
 1132 0028 002B     		cmp	r3, #0
 1133 002a 08D1     		bne	.L78
 1134              		.loc 1 668 9 is_stmt 0 discriminator 1
 1135 002c FFF7FEFF 		bl	ulSetInterruptMask
 1136 0030 084B     		ldr	r3, .L80
 1137 0032 094A     		ldr	r2, .L80+4
 1138 0034 4FF42771 		mov	r1, #668
 1139 0038 0848     		ldr	r0, .L80+8
 1140 003a FFF7FEFF 		bl	__assert_func
 1141              	.L78:
 669:Lib/FreeRTOS/Source/event_groups.c **** 
 670:Lib/FreeRTOS/Source/event_groups.c ****         #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 671:Lib/FreeRTOS/Source/event_groups.c ****         {
 672:Lib/FreeRTOS/Source/event_groups.c ****             /* Check if the event group was statically allocated. */
 673:Lib/FreeRTOS/Source/event_groups.c ****             if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdTRUE )
 674:Lib/FreeRTOS/Source/event_groups.c ****             {
 675:Lib/FreeRTOS/Source/event_groups.c ****                 *ppxEventGroupBuffer = ( StaticEventGroup_t * ) pxEventBits;
 676:Lib/FreeRTOS/Source/event_groups.c ****                 xReturn = pdTRUE;
 677:Lib/FreeRTOS/Source/event_groups.c ****             }
 678:Lib/FreeRTOS/Source/event_groups.c ****             else
 679:Lib/FreeRTOS/Source/event_groups.c ****             {
 680:Lib/FreeRTOS/Source/event_groups.c ****                 xReturn = pdFALSE;
 681:Lib/FreeRTOS/Source/event_groups.c ****             }
 682:Lib/FreeRTOS/Source/event_groups.c ****         }
 683:Lib/FreeRTOS/Source/event_groups.c ****         #else /* configSUPPORT_DYNAMIC_ALLOCATION */
 684:Lib/FreeRTOS/Source/event_groups.c ****         {
 685:Lib/FreeRTOS/Source/event_groups.c ****             /* Event group must have been statically allocated. */
 686:Lib/FreeRTOS/Source/event_groups.c ****             *ppxEventGroupBuffer = ( StaticEventGroup_t * ) pxEventBits;
 1142              		.loc 1 686 34 is_stmt 1
 1143 003e 3B68     		ldr	r3, [r7]
 1144 0040 FA68     		ldr	r2, [r7, #12]
 1145 0042 1A60     		str	r2, [r3]
 687:Lib/FreeRTOS/Source/event_groups.c ****             xReturn = pdTRUE;
 1146              		.loc 1 687 21
 1147 0044 0123     		movs	r3, #1
ARM GAS  /tmp/ccS51NaV.s 			page 33


 1148 0046 BB60     		str	r3, [r7, #8]
 688:Lib/FreeRTOS/Source/event_groups.c ****         }
 689:Lib/FreeRTOS/Source/event_groups.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 690:Lib/FreeRTOS/Source/event_groups.c **** 
 691:Lib/FreeRTOS/Source/event_groups.c ****         return xReturn;
 1149              		.loc 1 691 16
 1150 0048 BB68     		ldr	r3, [r7, #8]
 692:Lib/FreeRTOS/Source/event_groups.c ****     }
 1151              		.loc 1 692 5
 1152 004a 1846     		mov	r0, r3
 1153 004c 1037     		adds	r7, r7, #16
 1154              		.cfi_def_cfa_offset 8
 1155 004e BD46     		mov	sp, r7
 1156              		.cfi_def_cfa_register 13
 1157              		@ sp needed
 1158 0050 80BD     		pop	{r7, pc}
 1159              	.L81:
 1160 0052 00BF     		.align	2
 1161              	.L80:
 1162 0054 00000000 		.word	.LC0
 1163 0058 00000000 		.word	__func__.0
 1164 005c 04000000 		.word	.LC1
 1165              		.cfi_endproc
 1166              	.LFE8:
 1168              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 1169              		.align	1
 1170              		.global	vEventGroupSetBitsCallback
 1171              		.syntax unified
 1172              		.thumb
 1173              		.thumb_func
 1175              	vEventGroupSetBitsCallback:
 1176              	.LFB9:
 693:Lib/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 694:Lib/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 695:Lib/FreeRTOS/Source/event_groups.c **** 
 696:Lib/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 697:Lib/FreeRTOS/Source/event_groups.c ****  * an interrupt. */
 698:Lib/FreeRTOS/Source/event_groups.c **** void vEventGroupSetBitsCallback( void * pvEventGroup,
 699:Lib/FreeRTOS/Source/event_groups.c ****                                  const uint32_t ulBitsToSet )
 700:Lib/FreeRTOS/Source/event_groups.c **** {
 1177              		.loc 1 700 1
 1178              		.cfi_startproc
 1179              		@ args = 0, pretend = 0, frame = 8
 1180              		@ frame_needed = 1, uses_anonymous_args = 0
 1181 0000 80B5     		push	{r7, lr}
 1182              		.cfi_def_cfa_offset 8
 1183              		.cfi_offset 7, -8
 1184              		.cfi_offset 14, -4
 1185 0002 82B0     		sub	sp, sp, #8
 1186              		.cfi_def_cfa_offset 16
 1187 0004 00AF     		add	r7, sp, #0
 1188              		.cfi_def_cfa_register 7
 1189 0006 7860     		str	r0, [r7, #4]
 1190 0008 3960     		str	r1, [r7]
 701:Lib/FreeRTOS/Source/event_groups.c ****     ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't a
 1191              		.loc 1 701 14
 1192 000a 3968     		ldr	r1, [r7]
ARM GAS  /tmp/ccS51NaV.s 			page 34


 1193 000c 7868     		ldr	r0, [r7, #4]
 1194 000e FFF7FEFF 		bl	xEventGroupSetBits
 702:Lib/FreeRTOS/Source/event_groups.c **** }
 1195              		.loc 1 702 1
 1196 0012 00BF     		nop
 1197 0014 0837     		adds	r7, r7, #8
 1198              		.cfi_def_cfa_offset 8
 1199 0016 BD46     		mov	sp, r7
 1200              		.cfi_def_cfa_register 13
 1201              		@ sp needed
 1202 0018 80BD     		pop	{r7, pc}
 1203              		.cfi_endproc
 1204              	.LFE9:
 1206              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 1207              		.align	1
 1208              		.global	vEventGroupClearBitsCallback
 1209              		.syntax unified
 1210              		.thumb
 1211              		.thumb_func
 1213              	vEventGroupClearBitsCallback:
 1214              	.LFB10:
 703:Lib/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 704:Lib/FreeRTOS/Source/event_groups.c **** 
 705:Lib/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 706:Lib/FreeRTOS/Source/event_groups.c ****  * an interrupt. */
 707:Lib/FreeRTOS/Source/event_groups.c **** void vEventGroupClearBitsCallback( void * pvEventGroup,
 708:Lib/FreeRTOS/Source/event_groups.c ****                                    const uint32_t ulBitsToClear )
 709:Lib/FreeRTOS/Source/event_groups.c **** {
 1215              		.loc 1 709 1
 1216              		.cfi_startproc
 1217              		@ args = 0, pretend = 0, frame = 8
 1218              		@ frame_needed = 1, uses_anonymous_args = 0
 1219 0000 80B5     		push	{r7, lr}
 1220              		.cfi_def_cfa_offset 8
 1221              		.cfi_offset 7, -8
 1222              		.cfi_offset 14, -4
 1223 0002 82B0     		sub	sp, sp, #8
 1224              		.cfi_def_cfa_offset 16
 1225 0004 00AF     		add	r7, sp, #0
 1226              		.cfi_def_cfa_register 7
 1227 0006 7860     		str	r0, [r7, #4]
 1228 0008 3960     		str	r1, [r7]
 710:Lib/FreeRTOS/Source/event_groups.c ****     ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can
 1229              		.loc 1 710 14
 1230 000a 3968     		ldr	r1, [r7]
 1231 000c 7868     		ldr	r0, [r7, #4]
 1232 000e FFF7FEFF 		bl	xEventGroupClearBits
 711:Lib/FreeRTOS/Source/event_groups.c **** }
 1233              		.loc 1 711 1
 1234 0012 00BF     		nop
 1235 0014 0837     		adds	r7, r7, #8
 1236              		.cfi_def_cfa_offset 8
 1237 0016 BD46     		mov	sp, r7
 1238              		.cfi_def_cfa_register 13
 1239              		@ sp needed
 1240 0018 80BD     		pop	{r7, pc}
 1241              		.cfi_endproc
ARM GAS  /tmp/ccS51NaV.s 			page 35


 1242              	.LFE10:
 1244              		.section	.text.prvTestWaitCondition,"ax",%progbits
 1245              		.align	1
 1246              		.syntax unified
 1247              		.thumb
 1248              		.thumb_func
 1250              	prvTestWaitCondition:
 1251              	.LFB11:
 712:Lib/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 713:Lib/FreeRTOS/Source/event_groups.c **** 
 714:Lib/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
 715:Lib/FreeRTOS/Source/event_groups.c ****                                         const EventBits_t uxBitsToWaitFor,
 716:Lib/FreeRTOS/Source/event_groups.c ****                                         const BaseType_t xWaitForAllBits )
 717:Lib/FreeRTOS/Source/event_groups.c **** {
 1252              		.loc 1 717 1
 1253              		.cfi_startproc
 1254              		@ args = 0, pretend = 0, frame = 24
 1255              		@ frame_needed = 1, uses_anonymous_args = 0
 1256              		@ link register save eliminated.
 1257 0000 80B4     		push	{r7}
 1258              		.cfi_def_cfa_offset 4
 1259              		.cfi_offset 7, -4
 1260 0002 87B0     		sub	sp, sp, #28
 1261              		.cfi_def_cfa_offset 32
 1262 0004 00AF     		add	r7, sp, #0
 1263              		.cfi_def_cfa_register 7
 1264 0006 F860     		str	r0, [r7, #12]
 1265 0008 B960     		str	r1, [r7, #8]
 1266 000a 7A60     		str	r2, [r7, #4]
 718:Lib/FreeRTOS/Source/event_groups.c ****     BaseType_t xWaitConditionMet = pdFALSE;
 1267              		.loc 1 718 16
 1268 000c 0023     		movs	r3, #0
 1269 000e 7B61     		str	r3, [r7, #20]
 719:Lib/FreeRTOS/Source/event_groups.c **** 
 720:Lib/FreeRTOS/Source/event_groups.c ****     if( xWaitForAllBits == pdFALSE )
 1270              		.loc 1 720 7
 1271 0010 7B68     		ldr	r3, [r7, #4]
 1272 0012 002B     		cmp	r3, #0
 1273 0014 07D1     		bne	.L85
 721:Lib/FreeRTOS/Source/event_groups.c ****     {
 722:Lib/FreeRTOS/Source/event_groups.c ****         /* Task only has to wait for one bit within uxBitsToWaitFor to be
 723:Lib/FreeRTOS/Source/event_groups.c ****          * set.  Is one already set? */
 724:Lib/FreeRTOS/Source/event_groups.c ****         if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 1274              		.loc 1 724 34
 1275 0016 FA68     		ldr	r2, [r7, #12]
 1276 0018 BB68     		ldr	r3, [r7, #8]
 1277 001a 1340     		ands	r3, r3, r2
 1278              		.loc 1 724 11
 1279 001c 002B     		cmp	r3, #0
 1280 001e 0AD0     		beq	.L86
 725:Lib/FreeRTOS/Source/event_groups.c ****         {
 726:Lib/FreeRTOS/Source/event_groups.c ****             xWaitConditionMet = pdTRUE;
 1281              		.loc 1 726 31
 1282 0020 0123     		movs	r3, #1
 1283 0022 7B61     		str	r3, [r7, #20]
 1284 0024 07E0     		b	.L86
 1285              	.L85:
ARM GAS  /tmp/ccS51NaV.s 			page 36


 727:Lib/FreeRTOS/Source/event_groups.c ****         }
 728:Lib/FreeRTOS/Source/event_groups.c ****         else
 729:Lib/FreeRTOS/Source/event_groups.c ****         {
 730:Lib/FreeRTOS/Source/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 731:Lib/FreeRTOS/Source/event_groups.c ****         }
 732:Lib/FreeRTOS/Source/event_groups.c ****     }
 733:Lib/FreeRTOS/Source/event_groups.c ****     else
 734:Lib/FreeRTOS/Source/event_groups.c ****     {
 735:Lib/FreeRTOS/Source/event_groups.c ****         /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 736:Lib/FreeRTOS/Source/event_groups.c ****          * Are they set already? */
 737:Lib/FreeRTOS/Source/event_groups.c ****         if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 1286              		.loc 1 737 34
 1287 0026 FA68     		ldr	r2, [r7, #12]
 1288 0028 BB68     		ldr	r3, [r7, #8]
 1289 002a 1340     		ands	r3, r3, r2
 1290              		.loc 1 737 11
 1291 002c BA68     		ldr	r2, [r7, #8]
 1292 002e 9A42     		cmp	r2, r3
 1293 0030 01D1     		bne	.L86
 738:Lib/FreeRTOS/Source/event_groups.c ****         {
 739:Lib/FreeRTOS/Source/event_groups.c ****             xWaitConditionMet = pdTRUE;
 1294              		.loc 1 739 31
 1295 0032 0123     		movs	r3, #1
 1296 0034 7B61     		str	r3, [r7, #20]
 1297              	.L86:
 740:Lib/FreeRTOS/Source/event_groups.c ****         }
 741:Lib/FreeRTOS/Source/event_groups.c ****         else
 742:Lib/FreeRTOS/Source/event_groups.c ****         {
 743:Lib/FreeRTOS/Source/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 744:Lib/FreeRTOS/Source/event_groups.c ****         }
 745:Lib/FreeRTOS/Source/event_groups.c ****     }
 746:Lib/FreeRTOS/Source/event_groups.c **** 
 747:Lib/FreeRTOS/Source/event_groups.c ****     return xWaitConditionMet;
 1298              		.loc 1 747 12
 1299 0036 7B69     		ldr	r3, [r7, #20]
 748:Lib/FreeRTOS/Source/event_groups.c **** }
 1300              		.loc 1 748 1
 1301 0038 1846     		mov	r0, r3
 1302 003a 1C37     		adds	r7, r7, #28
 1303              		.cfi_def_cfa_offset 4
 1304 003c BD46     		mov	sp, r7
 1305              		.cfi_def_cfa_register 13
 1306              		@ sp needed
 1307 003e 5DF8047B 		ldr	r7, [sp], #4
 1308              		.cfi_restore 7
 1309              		.cfi_def_cfa_offset 0
 1310 0042 7047     		bx	lr
 1311              		.cfi_endproc
 1312              	.LFE11:
 1314              		.section	.text.xEventGroupSetBitsFromISR,"ax",%progbits
 1315              		.align	1
 1316              		.global	xEventGroupSetBitsFromISR
 1317              		.syntax unified
 1318              		.thumb
 1319              		.thumb_func
 1321              	xEventGroupSetBitsFromISR:
 1322              	.LFB12:
ARM GAS  /tmp/ccS51NaV.s 			page 37


 749:Lib/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 750:Lib/FreeRTOS/Source/event_groups.c **** 
 751:Lib/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 752:Lib/FreeRTOS/Source/event_groups.c **** 
 753:Lib/FreeRTOS/Source/event_groups.c ****     BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup,
 754:Lib/FreeRTOS/Source/event_groups.c ****                                           const EventBits_t uxBitsToSet,
 755:Lib/FreeRTOS/Source/event_groups.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
 756:Lib/FreeRTOS/Source/event_groups.c ****     {
 1323              		.loc 1 756 5
 1324              		.cfi_startproc
 1325              		@ args = 0, pretend = 0, frame = 24
 1326              		@ frame_needed = 1, uses_anonymous_args = 0
 1327 0000 80B5     		push	{r7, lr}
 1328              		.cfi_def_cfa_offset 8
 1329              		.cfi_offset 7, -8
 1330              		.cfi_offset 14, -4
 1331 0002 86B0     		sub	sp, sp, #24
 1332              		.cfi_def_cfa_offset 32
 1333 0004 00AF     		add	r7, sp, #0
 1334              		.cfi_def_cfa_register 7
 1335 0006 F860     		str	r0, [r7, #12]
 1336 0008 B960     		str	r1, [r7, #8]
 1337 000a 7A60     		str	r2, [r7, #4]
 757:Lib/FreeRTOS/Source/event_groups.c ****         BaseType_t xReturn;
 758:Lib/FreeRTOS/Source/event_groups.c **** 
 759:Lib/FreeRTOS/Source/event_groups.c ****         traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
 760:Lib/FreeRTOS/Source/event_groups.c ****         xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup
 1338              		.loc 1 760 19
 1339 000c 7B68     		ldr	r3, [r7, #4]
 1340 000e BA68     		ldr	r2, [r7, #8]
 1341 0010 F968     		ldr	r1, [r7, #12]
 1342 0012 0448     		ldr	r0, .L90
 1343 0014 FFF7FEFF 		bl	xTimerPendFunctionCallFromISR
 1344 0018 7861     		str	r0, [r7, #20]
 761:Lib/FreeRTOS/Source/event_groups.c **** 
 762:Lib/FreeRTOS/Source/event_groups.c ****         return xReturn;
 1345              		.loc 1 762 16
 1346 001a 7B69     		ldr	r3, [r7, #20]
 763:Lib/FreeRTOS/Source/event_groups.c ****     }
 1347              		.loc 1 763 5
 1348 001c 1846     		mov	r0, r3
 1349 001e 1837     		adds	r7, r7, #24
 1350              		.cfi_def_cfa_offset 8
 1351 0020 BD46     		mov	sp, r7
 1352              		.cfi_def_cfa_register 13
 1353              		@ sp needed
 1354 0022 80BD     		pop	{r7, pc}
 1355              	.L91:
 1356              		.align	2
 1357              	.L90:
 1358 0024 00000000 		.word	vEventGroupSetBitsCallback
 1359              		.cfi_endproc
 1360              	.LFE12:
 1362              		.section	.text.uxEventGroupGetNumber,"ax",%progbits
 1363              		.align	1
 1364              		.global	uxEventGroupGetNumber
 1365              		.syntax unified
ARM GAS  /tmp/ccS51NaV.s 			page 38


 1366              		.thumb
 1367              		.thumb_func
 1369              	uxEventGroupGetNumber:
 1370              	.LFB13:
 764:Lib/FreeRTOS/Source/event_groups.c **** 
 765:Lib/FreeRTOS/Source/event_groups.c **** #endif /* if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( co
 766:Lib/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 767:Lib/FreeRTOS/Source/event_groups.c **** 
 768:Lib/FreeRTOS/Source/event_groups.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 769:Lib/FreeRTOS/Source/event_groups.c **** 
 770:Lib/FreeRTOS/Source/event_groups.c ****     UBaseType_t uxEventGroupGetNumber( void * xEventGroup )
 771:Lib/FreeRTOS/Source/event_groups.c ****     {
 1371              		.loc 1 771 5
 1372              		.cfi_startproc
 1373              		@ args = 0, pretend = 0, frame = 16
 1374              		@ frame_needed = 1, uses_anonymous_args = 0
 1375              		@ link register save eliminated.
 1376 0000 80B4     		push	{r7}
 1377              		.cfi_def_cfa_offset 4
 1378              		.cfi_offset 7, -4
 1379 0002 85B0     		sub	sp, sp, #20
 1380              		.cfi_def_cfa_offset 24
 1381 0004 00AF     		add	r7, sp, #0
 1382              		.cfi_def_cfa_register 7
 1383 0006 7860     		str	r0, [r7, #4]
 772:Lib/FreeRTOS/Source/event_groups.c ****         UBaseType_t xReturn;
 773:Lib/FreeRTOS/Source/event_groups.c ****         EventGroup_t const * pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 Eve
 1384              		.loc 1 773 30
 1385 0008 7B68     		ldr	r3, [r7, #4]
 1386 000a BB60     		str	r3, [r7, #8]
 774:Lib/FreeRTOS/Source/event_groups.c **** 
 775:Lib/FreeRTOS/Source/event_groups.c ****         if( xEventGroup == NULL )
 1387              		.loc 1 775 11
 1388 000c 7B68     		ldr	r3, [r7, #4]
 1389 000e 002B     		cmp	r3, #0
 1390 0010 02D1     		bne	.L93
 776:Lib/FreeRTOS/Source/event_groups.c ****         {
 777:Lib/FreeRTOS/Source/event_groups.c ****             xReturn = 0;
 1391              		.loc 1 777 21
 1392 0012 0023     		movs	r3, #0
 1393 0014 FB60     		str	r3, [r7, #12]
 1394 0016 02E0     		b	.L94
 1395              	.L93:
 778:Lib/FreeRTOS/Source/event_groups.c ****         }
 779:Lib/FreeRTOS/Source/event_groups.c ****         else
 780:Lib/FreeRTOS/Source/event_groups.c ****         {
 781:Lib/FreeRTOS/Source/event_groups.c ****             xReturn = pxEventBits->uxEventGroupNumber;
 1396              		.loc 1 781 21
 1397 0018 BB68     		ldr	r3, [r7, #8]
 1398 001a 9B69     		ldr	r3, [r3, #24]
 1399 001c FB60     		str	r3, [r7, #12]
 1400              	.L94:
 782:Lib/FreeRTOS/Source/event_groups.c ****         }
 783:Lib/FreeRTOS/Source/event_groups.c **** 
 784:Lib/FreeRTOS/Source/event_groups.c ****         return xReturn;
 1401              		.loc 1 784 16
 1402 001e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccS51NaV.s 			page 39


 785:Lib/FreeRTOS/Source/event_groups.c ****     }
 1403              		.loc 1 785 5
 1404 0020 1846     		mov	r0, r3
 1405 0022 1437     		adds	r7, r7, #20
 1406              		.cfi_def_cfa_offset 4
 1407 0024 BD46     		mov	sp, r7
 1408              		.cfi_def_cfa_register 13
 1409              		@ sp needed
 1410 0026 5DF8047B 		ldr	r7, [sp], #4
 1411              		.cfi_restore 7
 1412              		.cfi_def_cfa_offset 0
 1413 002a 7047     		bx	lr
 1414              		.cfi_endproc
 1415              	.LFE13:
 1417              		.section	.text.vEventGroupSetNumber,"ax",%progbits
 1418              		.align	1
 1419              		.global	vEventGroupSetNumber
 1420              		.syntax unified
 1421              		.thumb
 1422              		.thumb_func
 1424              	vEventGroupSetNumber:
 1425              	.LFB14:
 786:Lib/FreeRTOS/Source/event_groups.c **** 
 787:Lib/FreeRTOS/Source/event_groups.c **** #endif /* configUSE_TRACE_FACILITY */
 788:Lib/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 789:Lib/FreeRTOS/Source/event_groups.c **** 
 790:Lib/FreeRTOS/Source/event_groups.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 791:Lib/FreeRTOS/Source/event_groups.c **** 
 792:Lib/FreeRTOS/Source/event_groups.c ****     void vEventGroupSetNumber( void * xEventGroup,
 793:Lib/FreeRTOS/Source/event_groups.c ****                                UBaseType_t uxEventGroupNumber )
 794:Lib/FreeRTOS/Source/event_groups.c ****     {
 1426              		.loc 1 794 5
 1427              		.cfi_startproc
 1428              		@ args = 0, pretend = 0, frame = 8
 1429              		@ frame_needed = 1, uses_anonymous_args = 0
 1430              		@ link register save eliminated.
 1431 0000 80B4     		push	{r7}
 1432              		.cfi_def_cfa_offset 4
 1433              		.cfi_offset 7, -4
 1434 0002 83B0     		sub	sp, sp, #12
 1435              		.cfi_def_cfa_offset 16
 1436 0004 00AF     		add	r7, sp, #0
 1437              		.cfi_def_cfa_register 7
 1438 0006 7860     		str	r0, [r7, #4]
 1439 0008 3960     		str	r1, [r7]
 795:Lib/FreeRTOS/Source/event_groups.c ****         ( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 
 1440              		.loc 1 795 64
 1441 000a 7B68     		ldr	r3, [r7, #4]
 1442 000c 3A68     		ldr	r2, [r7]
 1443 000e 9A61     		str	r2, [r3, #24]
 796:Lib/FreeRTOS/Source/event_groups.c ****     }
 1444              		.loc 1 796 5
 1445 0010 00BF     		nop
 1446 0012 0C37     		adds	r7, r7, #12
 1447              		.cfi_def_cfa_offset 4
 1448 0014 BD46     		mov	sp, r7
 1449              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccS51NaV.s 			page 40


 1450              		@ sp needed
 1451 0016 5DF8047B 		ldr	r7, [sp], #4
 1452              		.cfi_restore 7
 1453              		.cfi_def_cfa_offset 0
 1454 001a 7047     		bx	lr
 1455              		.cfi_endproc
 1456              	.LFE14:
 1458              		.section	.rodata.__func__.6,"a"
 1459              		.align	2
 1462              	__func__.6:
 1463 0000 78457665 		.ascii	"xEventGroupCreateStatic\000"
 1463      6E744772 
 1463      6F757043 
 1463      72656174 
 1463      65537461 
 1464              		.section	.rodata.__func__.5,"a"
 1465              		.align	2
 1468              	__func__.5:
 1469 0000 78457665 		.ascii	"xEventGroupSync\000"
 1469      6E744772 
 1469      6F757053 
 1469      796E6300 
 1470              		.section	.rodata.__func__.4,"a"
 1471              		.align	2
 1474              	__func__.4:
 1475 0000 78457665 		.ascii	"xEventGroupWaitBits\000"
 1475      6E744772 
 1475      6F757057 
 1475      61697442 
 1475      69747300 
 1476              		.section	.rodata.__func__.3,"a"
 1477              		.align	2
 1480              	__func__.3:
 1481 0000 78457665 		.ascii	"xEventGroupClearBits\000"
 1481      6E744772 
 1481      6F757043 
 1481      6C656172 
 1481      42697473 
 1482              		.section	.rodata.__func__.2,"a"
 1483              		.align	2
 1486              	__func__.2:
 1487 0000 78457665 		.ascii	"xEventGroupSetBits\000"
 1487      6E744772 
 1487      6F757053 
 1487      65744269 
 1487      747300
 1488              		.section	.rodata.__func__.1,"a"
 1489              		.align	2
 1492              	__func__.1:
 1493 0000 76457665 		.ascii	"vEventGroupDelete\000"
 1493      6E744772 
 1493      6F757044 
 1493      656C6574 
 1493      6500
 1494              		.section	.rodata.__func__.0,"a"
 1495              		.align	2
 1498              	__func__.0:
ARM GAS  /tmp/ccS51NaV.s 			page 41


 1499 0000 78457665 		.ascii	"xEventGroupGetStaticBuffer\000"
 1499      6E744772 
 1499      6F757047 
 1499      65745374 
 1499      61746963 
 1500              		.text
 1501              	.Letext0:
 1502              		.file 2 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 1503              		.file 3 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 1504              		.file 4 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 1505              		.file 5 "Lib/FreeRTOS/Source/portable/GCC/ARM_CM55_NTZ/non_secure/portmacrocommon.h"
 1506              		.file 6 "Lib/FreeRTOS/Source/include/FreeRTOS.h"
 1507              		.file 7 "Lib/FreeRTOS/Source/include/list.h"
 1508              		.file 8 "Lib/FreeRTOS/Source/include/timers.h"
 1509              		.file 9 "Lib/FreeRTOS/Source/include/event_groups.h"
 1510              		.file 10 "Lib/FreeRTOS/Source/include/task.h"
 1511              		.file 11 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-
ARM GAS  /tmp/ccS51NaV.s 			page 42


DEFINED SYMBOLS
                            *ABS*:00000000 event_groups.c
     /tmp/ccS51NaV.s:26     .rodata:00000000 $d
     /tmp/ccS51NaV.s:33     .text.xEventGroupCreateStatic:00000000 $t
     /tmp/ccS51NaV.s:39     .text.xEventGroupCreateStatic:00000000 xEventGroupCreateStatic
     /tmp/ccS51NaV.s:113    .text.xEventGroupCreateStatic:0000005c $d
     /tmp/ccS51NaV.s:1462   .rodata.__func__.6:00000000 __func__.6
     /tmp/ccS51NaV.s:120    .text.xEventGroupSync:00000000 $t
     /tmp/ccS51NaV.s:126    .text.xEventGroupSync:00000000 xEventGroupSync
     /tmp/ccS51NaV.s:805    .text.xEventGroupSetBits:00000000 xEventGroupSetBits
     /tmp/ccS51NaV.s:343    .text.xEventGroupSync:00000138 $d
     /tmp/ccS51NaV.s:1468   .rodata.__func__.5:00000000 __func__.5
     /tmp/ccS51NaV.s:350    .text.xEventGroupWaitBits:00000000 $t
     /tmp/ccS51NaV.s:356    .text.xEventGroupWaitBits:00000000 xEventGroupWaitBits
     /tmp/ccS51NaV.s:1250   .text.prvTestWaitCondition:00000000 prvTestWaitCondition
     /tmp/ccS51NaV.s:610    .text.xEventGroupWaitBits:0000017c $d
     /tmp/ccS51NaV.s:1474   .rodata.__func__.4:00000000 __func__.4
     /tmp/ccS51NaV.s:617    .text.xEventGroupClearBits:00000000 $t
     /tmp/ccS51NaV.s:623    .text.xEventGroupClearBits:00000000 xEventGroupClearBits
     /tmp/ccS51NaV.s:697    .text.xEventGroupClearBits:00000068 $d
     /tmp/ccS51NaV.s:1480   .rodata.__func__.3:00000000 __func__.3
     /tmp/ccS51NaV.s:704    .text.xEventGroupClearBitsFromISR:00000000 $t
     /tmp/ccS51NaV.s:710    .text.xEventGroupClearBitsFromISR:00000000 xEventGroupClearBitsFromISR
     /tmp/ccS51NaV.s:746    .text.xEventGroupClearBitsFromISR:00000024 $d
     /tmp/ccS51NaV.s:1213   .text.vEventGroupClearBitsCallback:00000000 vEventGroupClearBitsCallback
     /tmp/ccS51NaV.s:751    .text.xEventGroupGetBitsFromISR:00000000 $t
     /tmp/ccS51NaV.s:757    .text.xEventGroupGetBitsFromISR:00000000 xEventGroupGetBitsFromISR
     /tmp/ccS51NaV.s:799    .text.xEventGroupSetBits:00000000 $t
     /tmp/ccS51NaV.s:992    .text.xEventGroupSetBits:0000010c $d
     /tmp/ccS51NaV.s:1486   .rodata.__func__.2:00000000 __func__.2
     /tmp/ccS51NaV.s:999    .text.vEventGroupDelete:00000000 $t
     /tmp/ccS51NaV.s:1005   .text.vEventGroupDelete:00000000 vEventGroupDelete
     /tmp/ccS51NaV.s:1086   .text.vEventGroupDelete:00000070 $d
     /tmp/ccS51NaV.s:1492   .rodata.__func__.1:00000000 __func__.1
     /tmp/ccS51NaV.s:1093   .text.xEventGroupGetStaticBuffer:00000000 $t
     /tmp/ccS51NaV.s:1099   .text.xEventGroupGetStaticBuffer:00000000 xEventGroupGetStaticBuffer
     /tmp/ccS51NaV.s:1162   .text.xEventGroupGetStaticBuffer:00000054 $d
     /tmp/ccS51NaV.s:1498   .rodata.__func__.0:00000000 __func__.0
     /tmp/ccS51NaV.s:1169   .text.vEventGroupSetBitsCallback:00000000 $t
     /tmp/ccS51NaV.s:1175   .text.vEventGroupSetBitsCallback:00000000 vEventGroupSetBitsCallback
     /tmp/ccS51NaV.s:1207   .text.vEventGroupClearBitsCallback:00000000 $t
     /tmp/ccS51NaV.s:1245   .text.prvTestWaitCondition:00000000 $t
     /tmp/ccS51NaV.s:1315   .text.xEventGroupSetBitsFromISR:00000000 $t
     /tmp/ccS51NaV.s:1321   .text.xEventGroupSetBitsFromISR:00000000 xEventGroupSetBitsFromISR
     /tmp/ccS51NaV.s:1358   .text.xEventGroupSetBitsFromISR:00000024 $d
     /tmp/ccS51NaV.s:1363   .text.uxEventGroupGetNumber:00000000 $t
     /tmp/ccS51NaV.s:1369   .text.uxEventGroupGetNumber:00000000 uxEventGroupGetNumber
     /tmp/ccS51NaV.s:1418   .text.vEventGroupSetNumber:00000000 $t
     /tmp/ccS51NaV.s:1424   .text.vEventGroupSetNumber:00000000 vEventGroupSetNumber
     /tmp/ccS51NaV.s:1459   .rodata.__func__.6:00000000 $d
     /tmp/ccS51NaV.s:1465   .rodata.__func__.5:00000000 $d
     /tmp/ccS51NaV.s:1471   .rodata.__func__.4:00000000 $d
     /tmp/ccS51NaV.s:1477   .rodata.__func__.3:00000000 $d
     /tmp/ccS51NaV.s:1483   .rodata.__func__.2:00000000 $d
     /tmp/ccS51NaV.s:1489   .rodata.__func__.1:00000000 $d
     /tmp/ccS51NaV.s:1495   .rodata.__func__.0:00000000 $d
                           .group:00000000 wm4.0.2a10773746a5c5ebb5552f50e466f80b
ARM GAS  /tmp/ccS51NaV.s 			page 43


                           .group:00000000 wm4.ieeefp.h.77.bd5feb87d9990dd328793ced294f6a87
                           .group:00000000 wm4._newlib_version.h.4.411db44ea2338a62eca2f0777f81481b
                           .group:00000000 wm4.newlib.h.27.4b972ceed5d01f491020c20f1e546cab
                           .group:00000000 wm4.features.h.22.9dfb1293666eb4caf24cccb81c86a551
                           .group:00000000 wm4.config.h.224.10ee1ad185d877c6e334e6581faab44d
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.185.882514a1a6169ceba9142f401cbe27c6
                           .group:00000000 wm4.stddef.h.39.794fa375de48dda278c4aebb5c74aa5b
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4.cdefs.h.49.70fc7af612f78ddcace70fdd90b5623b
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.158.6f8e08a347b1cff664332fa350bfceb3
                           .group:00000000 wm4._types.h.127.3bdfe3ff8ea2d0985b03d9cbe93480e3
                           .group:00000000 wm4.reent.h.18.25503cdc8b7e55dd0d6ea7b3e5af7a03
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.78.6b87466b04591b1f1cb88c14fdf2ba9e
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.FreeRTOS.h.59.647b1b0da38e4e98108aae13c8abe9ee
                           .group:00000000 wm4.assert.h.11.db24e541f16414db224bf986d21017e2
                           .group:00000000 wm4.FreeRTOSConfig.h.59.2629c72cff9e6dbe880a2dc225eae516
                           .group:00000000 wm4.FreeRTOS.h.80.7742fabaf5accf3762dc12f7f259a8a0
                           .group:00000000 wm4.projdefs.h.30.55a824156f299c075c33148a9fdadb99
                           .group:00000000 wm4.portmacro.h.30.cbb4b2da41f551c2a9904f0d03a1ce3e
                           .group:00000000 wm4.portmacrocommon.h.30.d5cb67896ab50a95311be7e023da5c4f
                           .group:00000000 wm4.portmacro.h.68.4051ecf710d074fb55b16d91dfebeeaa
                           .group:00000000 wm4.portable.h.61.d557c57974d490f056246a26cdcddd6c
                           .group:00000000 wm4.mpu_wrappers.h.30.ccc5f1a6903f941a88c268f5f62af3fe
                           .group:00000000 wm4.portable.h.189.522b8bd52a171d3fd1432ef06d0caa63
                           .group:00000000 wm4.FreeRTOS.h.102.fb871f3e464d99c5a57b3115545a02ad
                           .group:00000000 wm4.list.h.59.bce6419520cd4f5f98779a1530bf2118
                           .group:00000000 wm4.task.h.56.84290139c73b47f5b9aac361361a2a31
                           .group:00000000 wm4.timers.h.57.6dc18d93eadf96866a61b56e192cd706
                           .group:00000000 wm4.event_groups.h.48.2ada8d8313b91167308e11519f813d12

UNDEFINED SYMBOLS
ulSetInterruptMask
__assert_func
vListInitialise
xTaskGetSchedulerState
vTaskSuspendAll
vTaskPlaceOnUnorderedEventList
xTaskResumeAll
vPortYield
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
xTimerPendFunctionCallFromISR
vClearInterruptMask
vTaskRemoveFromUnorderedEventList
