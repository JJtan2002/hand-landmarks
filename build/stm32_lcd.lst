ARM GAS  /tmp/ccK9mPCc.s 			page 1


   1              		.arch armv8.1-m.main
   2              		.fpu fpv5-d16
   3              		.arch_extension dsp
   4              		.arch_extension fp
   5              		.arch_extension fp.dp
   6              		.arch_extension mve
   7              		.arch_extension mve.fp
   8              		.eabi_attribute 5, "cortex-m55"
   9              		.eabi_attribute 28, 1
  10              		.eabi_attribute 20, 1
  11              		.eabi_attribute 21, 1
  12              		.eabi_attribute 23, 3
  13              		.eabi_attribute 24, 1
  14              		.eabi_attribute 25, 1
  15              		.eabi_attribute 26, 1
  16              		.eabi_attribute 30, 6
  17              		.eabi_attribute 34, 1
  18              		.eabi_attribute 38, 1
  19              		.eabi_attribute 18, 4
  20              		.file	"stm32_lcd.c"
  21              		.text
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.file 1 "STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c"
  25              		.global	Font24_Table
  26              		.section	.rodata.Font24_Table,"a"
  27              		.align	2
  30              	Font24_Table:
  31 0000 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  31      00000000 
  31      00000000 
  31      00
  32 000d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  32      00000000 
  32      00000000 
  32      00
  33 001a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  33      00000000 
  33      00000000 
  33      00
  34 0027 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  34      00000000 
  34      00000000 
  34      00
  35 0034 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  35      00000000 
  35      00000000 
  35      00
  36 0041 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  36      00000000 
  36      00000000 
  36      00
  37 004e 03800003 		.ascii	"\003\200\000\003\200\000\003\200\000\003\200\000\003"
  37      80000380 
  37      00038000 
  37      03
  38 005b 80000380 		.ascii	"\200\000\003\200\000\003\200\000\003\200\000\003\200"
ARM GAS  /tmp/ccK9mPCc.s 			page 2


  38      00038000 
  38      03800003 
  38      80
  39 0068 00010000 		.ascii	"\000\001\000\000\001\000\000\000\000\000\000\000\000"
  39      01000000 
  39      00000000 
  39      00
  40 0075 03800003 		.ascii	"\003\200\000\003\200\000\000\000\000\000\000\000\000"
  40      80000000 
  40      00000000 
  40      00
  41 0082 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  41      00000000 
  41      00000000 
  41      00
  42 008f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\016p\000\016"
  42      00000000 
  42      00000E70 
  42      000E
  43 009d 70000E70 		.ascii	"p\000\016p\000\004 \000\004 \000\004 \000\004 \000\000"
  43      00042000 
  43      04200004 
  43      20000420 
  43      0000
  44 00af 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  44      00000000 
  44      00000000 
  44      00
  45 00bc 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  45      00000000 
  45      00000000 
  45      00
  46 00c9 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  46      00000000 
  46      00000000 
  46      00
  47 00d6 00000000 		.ascii	"\000\000\000\000\000\000\000\000\006`\000\006`\000\006"
  47      00000000 
  47      06600006 
  47      600006
  48 00e5 60000660 		.ascii	"`\000\006`\000\006`\000?\370\000?\370\000\006`\000\014"
  48      00066000 
  48      3FF8003F 
  48      F8000660 
  48      000C
  49 00f7 C0003FF8 		.ascii	"\300\000?\370\000?\370\000\014\300\000\014\300\000\014"
  49      003FF800 
  49      0CC0000C 
  49      C0000C
  50 0106 C0000CC0 		.ascii	"\300\000\014\300\000\014\300\000\000\000\000\000\000"
  50      000CC000 
  50      00000000 
  50      00
  51 0113 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  51      00000000 
  51      00000000 
  51      00
ARM GAS  /tmp/ccK9mPCc.s 			page 3


  52 0120 00000001 		.ascii	"\000\000\000\001\200\000\001\200\000\007\260\000\017"
  52      80000180 
  52      0007B000 
  52      0F
  53 012d F0001870 		.ascii	"\360\000\030p\000\030p\000\034\000\000\017\200\000\007"
  53      00187000 
  53      1C00000F 
  53      800007
  54 013c E00000F0 		.ascii	"\340\000\000\360\000\0300\000\0340\000\034p\000\037"
  54      00183000 
  54      1C30001C 
  54      70001F
  55 014b E0001BC0 		.ascii	"\340\000\033\300\000\001\200\000\001\200\000\001\200"
  55      00018000 
  55      01800001 
  55      80
  56 0158 00018000 		.ascii	"\000\001\200\000\000\000\000\000\000\000\000\000\000"
  56      00000000 
  56      00000000 
  56      00
  57 0165 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\007\200\000\017"
  57      00000000 
  57      00078000 
  57      0F
  58 0172 C0001CE0 		.ascii	"\300\000\034\340\000\030`\000\030`\000\034\340\000\017"
  58      00186000 
  58      1860001C 
  58      E0000F
  59 0181 F80007E0 		.ascii	"\370\000\007\340\000\037\360\000\0078\000\006\030\000"
  59      001FF000 
  59      07380006 
  59      1800
  60 018f 06180007 		.ascii	"\006\030\000\0078\000\003\360\000\001\340\000\000\000"
  60      380003F0 
  60      0001E000 
  60      0000
  61 019d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  61      00000000 
  61      00000000 
  61      00
  62 01aa 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  62      00000000 
  62      00000000 
  62      00
  63 01b7 00000000 		.ascii	"\000\000\000\000\000\003\360\000\007\360\000\014`\000"
  63      0003F000 
  63      07F0000C 
  63      6000
  64 01c5 0C00000C 		.ascii	"\014\000\000\014\000\000\006\000\000\007\000\000\017"
  64      00000600 
  64      00070000 
  64      0F
  65 01d2 9C001DFC 		.ascii	"\234\000\035\374\000\030\360\000\030p\000\017\374\000"
  65      0018F000 
  65      1870000F 
  65      FC00
  66 01e0 07DC0000 		.ascii	"\007\334\000\000\000\000\000\000\000\000\000\000\000"
ARM GAS  /tmp/ccK9mPCc.s 			page 4


  66      00000000 
  66      00000000 
  66      00
  67 01ed 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  67      00000000 
  67      00000000 
  67      00
  68 01fa 00000000 		.ascii	"\000\000\000\000\000\000\000\003\200\000\003\200\000"
  68      00000003 
  68      80000380 
  68      00
  69 0207 03800001 		.ascii	"\003\200\000\001\000\000\001\000\000\001\000\000\001"
  69      00000100 
  69      00010000 
  69      01
  70 0214 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  70      00000000 
  70      00000000 
  70      00
  71 0221 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  71      00000000 
  71      00000000 
  71      00
  72 022e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  72      00000000 
  72      00000000 
  72      00
  73 023b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\030"
  73      00000000 
  73      00000000 
  73      18
  74 0248 00003800 		.ascii	"\000\0008\000\000p\000\000\360\000\000\340\000\000\340"
  74      00700000 
  74      F00000E0 
  74      0000E0
  75 0257 0001C000 		.ascii	"\000\001\300\000\001\300\000\001\300\000\001\300\000"
  75      01C00001 
  75      C00001C0 
  75      00
  76 0264 01C00001 		.ascii	"\001\300\000\001\300\000\000\340\000\000\340\000\000"
  76      C00000E0 
  76      0000E000 
  76      00
  77 0271 70000070 		.ascii	"p\000\000p\000\0008\000\000\030\000\000\000\000\000"
  77      00003800 
  77      00180000 
  77      000000
  78 0280 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  78      00000000 
  78      00000000 
  78      00
  79 028d 00180000 		.ascii	"\000\030\000\000\034\000\000\016\000\000\016\000\000"
  79      1C00000E 
  79      00000E00 
  79      00
  80 029a 07000007 		.ascii	"\007\000\000\007\000\000\003\200\000\003\200\000\003"
  80      00000380 
ARM GAS  /tmp/ccK9mPCc.s 			page 5


  80      00038000 
  80      03
  81 02a7 80000380 		.ascii	"\200\000\003\200\000\003\200\000\003\200\000\007\000"
  81      00038000 
  81      03800007 
  81      00
  82 02b4 00070000 		.ascii	"\000\007\000\000\017\000\000\016\000\000\034\000\000"
  82      0F00000E 
  82      00001C00 
  82      00
  83 02c1 18000000 		.ascii	"\030\000\000\000\000\000\000\000\000\000\000\000\000"
  83      00000000 
  83      00000000 
  83      00
  84 02ce 00000000 		.ascii	"\000\000\000\000\000\000\000\000\001\200\000\001\200"
  84      00000000 
  84      01800001 
  84      80
  85 02db 00018000 		.ascii	"\000\001\200\000\035\270\000\037\370\000\007\340\000"
  85      1DB8001F 
  85      F80007E0 
  85      00
  86 02e8 03C00003 		.ascii	"\003\300\000\003\300\000\006`\000\006`\000\000\000\000"
  86      C0000660 
  86      00066000 
  86      000000
  87 02f7 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  87      00000000 
  87      00000000 
  87      00
  88 0304 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  88      00000000 
  88      00000000 
  88      00
  89 0311 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  89      00000000 
  89      00000000 
  89      00
  90 031e 00000000 		.ascii	"\000\000\000\000\000\000\001\200\000\001\200\000\001"
  90      00000180 
  90      00018000 
  90      01
  91 032b 80000180 		.ascii	"\200\000\001\200\000\001\200\000?\374\000?\374\000\001"
  91      00018000 
  91      3FFC003F 
  91      FC0001
  92 033a 80000180 		.ascii	"\200\000\001\200\000\001\200\000\001\200\000\001\200"
  92      00018000 
  92      01800001 
  92      80
  93 0347 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  93      00000000 
  93      00000000 
  93      00
  94 0354 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  94      00000000 
  94      00000000 
ARM GAS  /tmp/ccK9mPCc.s 			page 6


  94      00
  95 0361 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  95      00000000 
  95      00000000 
  95      00
  96 036e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  96      00000000 
  96      00000000 
  96      00
  97 037b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
  97      00000000 
  97      00000000 
  97      00
  98 0388 000000E0 		.ascii	"\000\000\000\340\000\000\300\000\001\300\000\001\200"
  98      0000C000 
  98      01C00001 
  98      80
  99 0395 00018000 		.ascii	"\000\001\200\000\003\000\000\003\000\000\000\000\000"
  99      03000003 
  99      00000000 
  99      00
 100 03a2 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 100      00000000 
 100      00000000 
 100      00
 101 03af 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 101      00000000 
 101      00000000 
 101      00
 102 03bc 00000000 		.ascii	"\000\000\000\000\000\000\000\037\370\000\037\370\000"
 102      0000001F 
 102      F8001FF8 
 102      00
 103 03c9 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 103      00000000 
 103      00000000 
 103      00
 104 03d6 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 104      00000000 
 104      00000000 
 104      00
 105 03e3 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 105      00000000 
 105      00000000 
 105      00
 106 03f0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 106      00000000 
 106      00000000 
 106      00
 107 03fd 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 107      00000000 
 107      00000000 
 107      00
 108 040a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 108      00000000 
 108      00000000 
 108      00
ARM GAS  /tmp/ccK9mPCc.s 			page 7


 109 0417 00000003 		.ascii	"\000\000\000\003\300\000\003\300\000\003\300\000\000"
 109      C00003C0 
 109      0003C000 
 109      00
 110 0424 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 110      00000000 
 110      00000000 
 110      00
 111 0431 00000000 		.ascii	"\000\000\000\000\000\000\000\000\030\000\000\030\000"
 111      00000000 
 111      18000018 
 111      00
 112 043e 00380000 		.ascii	"\0008\000\0000\000\000p\000\000`\000\000`\000\000\300"
 112      30000070 
 112      00006000 
 112      00600000 
 112      C0
 113 044f 0000C000 		.ascii	"\000\000\300\000\001\200\000\001\200\000\003\000\000"
 113      01800001 
 113      80000300 
 113      00
 114 045c 03000006 		.ascii	"\003\000\000\006\000\000\006\000\000\016\000\000\014"
 114      00000600 
 114      000E0000 
 114      0C
 115 0469 00001C00 		.ascii	"\000\000\034\000\000\030\000\000\030\000\000\000\000"
 115      00180000 
 115      18000000 
 115      00
 116 0476 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 116      00000000 
 116      00000000 
 116      00
 117 0483 00000003 		.ascii	"\000\000\000\003\300\000\007\340\000\0140\000\0140\000"
 117      C00007E0 
 117      000C3000 
 117      0C3000
 118 0492 18180018 		.ascii	"\030\030\000\030\030\000\030\030\000\030\030\000\030"
 118      18001818 
 118      00181800 
 118      18
 119 049f 18001818 		.ascii	"\030\000\030\030\000\030\030\000\0140\000\0140\000\007"
 119      00181800 
 119      0C30000C 
 119      300007
 120 04ae E00003C0 		.ascii	"\340\000\003\300\000\000\000\000\000\000\000\000\000"
 120      00000000 
 120      00000000 
 120      00
 121 04bb 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 121      00000000 
 121      00000000 
 121      00
 122 04c8 00000000 		.ascii	"\000\000\000\000\000\000\000\200\000\007\200\000\037"
 122      00000080 
 122      00078000 
 122      1F
ARM GAS  /tmp/ccK9mPCc.s 			page 8


 123 04d5 80001D80 		.ascii	"\200\000\035\200\000\001\200\000\001\200\000\001\200"
 123      00018000 
 123      01800001 
 123      80
 124 04e2 00018000 		.ascii	"\000\001\200\000\001\200\000\001\200\000\001\200\000"
 124      01800001 
 124      80000180 
 124      00
 125 04ef 01800001 		.ascii	"\001\200\000\001\200\000\037\370\000\037\370\000\000"
 125      80001FF8 
 125      001FF800 
 125      00
 126 04fc 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 126      00000000 
 126      00000000 
 126      00
 127 0509 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 127      00000000 
 127      00000000 
 127      00
 128 0516 07C0001F 		.ascii	"\007\300\000\037\360\00080\0000\030\0000\030\000\000"
 128      F0003830 
 128      00301800 
 128      30180000 
 129 0526 18000030 		.ascii	"\030\000\0000\000\000`\000\001\300\000\003\200\000\006"
 129      00006000 
 129      01C00003 
 129      800006
 130 0535 00000C00 		.ascii	"\000\000\014\000\000\030\000\000?\370\000?\370\000\000"
 130      00180000 
 130      3FF8003F 
 130      F80000
 131 0544 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 131      00000000 
 131      00000000 
 131      00
 132 0551 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 132      00000000 
 132      00000000 
 132      00
 133 055e 03C0000F 		.ascii	"\003\300\000\017\340\000\014p\000\0000\000\0000\000"
 133      E0000C70 
 133      00003000 
 133      003000
 134 056d 00600003 		.ascii	"\000`\000\003\300\000\003\340\000\000p\000\000\030\000"
 134      C00003E0 
 134      00007000 
 134      001800
 135 057c 00180000 		.ascii	"\000\030\000\000\030\000\0308\000\037\360\000\017\300"
 135      18001838 
 135      001FF000 
 135      0FC0
 136 058a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 136      00000000 
 136      00000000 
 136      00
 137 0597 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
ARM GAS  /tmp/ccK9mPCc.s 			page 9


 137      00000000 
 137      00000000 
 137      00
 138 05a4 000000E0 		.ascii	"\000\000\000\340\000\001\340\000\001\340\000\003`\000"
 138      0001E000 
 138      01E00003 
 138      6000
 139 05b2 06600006 		.ascii	"\006`\000\006`\000\014`\000\014`\000\030`\0000`\000"
 139      60000C60 
 139      000C6000 
 139      18600030 
 139      6000
 140 05c4 3FF8003F 		.ascii	"?\370\000?\370\000\000`\000\003\370\000\003\370\000"
 140      F8000060 
 140      0003F800 
 140      03F800
 141 05d3 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 141      00000000 
 141      00000000 
 141      00
 142 05e0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 142      00000000 
 142      00000000 
 142      00
 143 05ed 001FF000 		.ascii	"\000\037\360\000\037\360\000\030\000\000\030\000\000"
 143      1FF00018 
 143      00001800 
 143      00
 144 05fa 1800001B 		.ascii	"\030\000\000\033\300\000\037\360\000\0340\000\000\030"
 144      C0001FF0 
 144      001C3000 
 144      0018
 145 0608 00001800 		.ascii	"\000\000\030\000\000\030\000\000\030\00000\000?\360"
 145      00180000 
 145      18003030 
 145      003FF0
 146 0617 000FC000 		.ascii	"\000\017\300\000\000\000\000\000\000\000\000\000\000"
 146      00000000 
 146      00000000 
 146      00
 147 0624 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 147      00000000 
 147      00000000 
 147      00
 148 0631 00000000 		.ascii	"\000\000\000\000\000\000\370\000\003\370\000\007\000"
 148      0000F800 
 148      03F80007 
 148      00
 149 063e 000E0000 		.ascii	"\000\016\000\000\014\000\000\030\000\000\033\300\000"
 149      0C000018 
 149      00001BC0 
 149      00
 150 064b 1FF0001C 		.ascii	"\037\360\000\0340\000\030\030\000\030\030\000\030\030"
 150      30001818 
 150      00181800 
 150      1818
 151 0659 000C3800 		.ascii	"\000\0148\000\017\360\000\003\340\000\000\000\000\000"
ARM GAS  /tmp/ccK9mPCc.s 			page 10


 151      0FF00003 
 151      E0000000 
 151      0000
 152 0667 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 152      00000000 
 152      00000000 
 152      00
 153 0674 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\037\370\000"
 153      00000000 
 153      00001FF8 
 153      00
 154 0681 1FF80018 		.ascii	"\037\370\000\030\030\000\0308\000\0000\000\0000\000"
 154      18001838 
 154      00003000 
 154      003000
 155 0690 00700000 		.ascii	"\000p\000\000`\000\000`\000\000\340\000\000\300\000"
 155      60000060 
 155      0000E000 
 155      00C000
 156 069f 00C00001 		.ascii	"\000\300\000\001\300\000\001\200\000\001\200\000\000"
 156      C0000180 
 156      00018000 
 156      00
 157 06ac 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 157      00000000 
 157      00000000 
 157      00
 158 06b9 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 158      00000000 
 158      00000000 
 158      00
 159 06c6 07E0000F 		.ascii	"\007\340\000\017\360\000\0348\000\030\030\000\030\030"
 159      F0001C38 
 159      00181800 
 159      1818
 160 06d4 000C3000 		.ascii	"\000\0140\000\007\340\000\007\340\000\0140\000\030\030"
 160      07E00007 
 160      E0000C30 
 160      001818
 161 06e3 00181800 		.ascii	"\000\030\030\000\030\030\000\0348\000\017\360\000\007"
 161      1818001C 
 161      38000FF0 
 161      0007
 162 06f1 E0000000 		.ascii	"\340\000\000\000\000\000\000\000\000\000\000\000\000"
 162      00000000 
 162      00000000 
 162      00
 163 06fe 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 163      00000000 
 163      00000000 
 163      00
 164 070b 00000007 		.ascii	"\000\000\000\007\300\000\017\360\000\0340\000\030\030"
 164      C0000FF0 
 164      001C3000 
 164      1818
 165 0719 00181800 		.ascii	"\000\030\030\000\030\030\000\0148\000\017\370\000\003"
 165      1818000C 
ARM GAS  /tmp/ccK9mPCc.s 			page 11


 165      38000FF8 
 165      0003
 166 0727 D8000018 		.ascii	"\330\000\000\030\000\0000\000\000p\000\000\340\000\037"
 166      00003000 
 166      00700000 
 166      E0001F
 167 0736 C0001F00 		.ascii	"\300\000\037\000\000\000\000\000\000\000\000\000\000"
 167      00000000 
 167      00000000 
 167      00
 168 0743 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 168      00000000 
 168      00000000 
 168      00
 169 0750 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 169      00000000 
 169      00000000 
 169      00
 170 075d 00000000 		.ascii	"\000\000\000\000\000\003\300\000\003\300\000\003\300"
 170      0003C000 
 170      03C00003 
 170      C0
 171 076a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 171      00000000 
 171      00000000 
 171      00
 172 0777 00000003 		.ascii	"\000\000\000\003\300\000\003\300\000\003\300\000\000"
 172      C00003C0 
 172      0003C000 
 172      00
 173 0784 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 173      00000000 
 173      00000000 
 173      00
 174 0791 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 174      00000000 
 174      00000000 
 174      00
 175 079e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 175      00000000 
 175      00000000 
 175      00
 176 07ab F00000F0 		.ascii	"\360\000\000\360\000\000\360\000\000\000\000\000\000"
 176      0000F000 
 176      00000000 
 176      00
 177 07b8 00000000 		.ascii	"\000\000\000\000\000\000\000\000\340\000\001\300\000"
 177      00000000 
 177      E00001C0 
 177      00
 178 07c5 01800001 		.ascii	"\001\200\000\001\200\000\003\000\000\002\000"
 178      80000300 
 178      000200
 179 07d0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 179      00000000 
 179      00000000 
 179      00
ARM GAS  /tmp/ccK9mPCc.s 			page 12


 180 07dd 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 180      00000000 
 180      00000000 
 180      00
 181 07ea 0000001C 		.ascii	"\000\000\000\034\000\000<\000\000\360\000\003\300\000"
 181      00003C00 
 181      00F00003 
 181      C000
 182 07f8 0F00003C 		.ascii	"\017\000\000<\000\000\360\000\000<\000\000\017\000\000"
 182      0000F000 
 182      003C0000 
 182      0F0000
 183 0807 03C00000 		.ascii	"\003\300\000\000\360\000\000<\000\000\034\000\000\000"
 183      F000003C 
 183      00001C00 
 183      0000
 184 0815 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 184      00000000 
 184      00000000 
 184      00
 185 0822 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 185      00000000 
 185      00000000 
 185      00
 186 082f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 186      00000000 
 186      00000000 
 186      00
 187 083c 007FFC00 		.ascii	"\000\177\374\000\177\374\000\000\000\000\000\000\000"
 187      7FFC0000 
 187      00000000 
 187      00
 188 0849 7FFC007F 		.ascii	"\177\374\000\177\374\000\000\000\000\000\000\000\000"
 188      FC000000 
 188      00000000 
 188      00
 189 0856 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 189      00000000 
 189      00000000 
 189      00
 190 0863 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 190      00000000 
 190      00000000 
 190      00
 191 0870 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000p\000"
 191      00000000 
 191      00000000 
 191      7000
 192 087e 00780000 		.ascii	"\000x\000\000\036\000\000\007\200\000\001\340\000\000"
 192      1E000007 
 192      800001E0 
 192      0000
 193 088c 7800001E 		.ascii	"x\000\000\036\000\000x\000\001\340\000\007\200\000\036"
 193      00007800 
 193      01E00007 
 193      80001E
 194 089b 00007800 		.ascii	"\000\000x\000\000p\000\000\000\000\000\000\000\000\000"
ARM GAS  /tmp/ccK9mPCc.s 			page 13


 194      00700000 
 194      00000000 
 194      000000
 195 08aa 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 195      00000000 
 195      00000000 
 195      00
 196 08b7 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\007\300\000"
 196      00000000 
 196      000007C0 
 196      00
 197 08c4 0FE00018 		.ascii	"\017\340\000\030p\000\0300\000\0300\000\000p\000\000"
 197      70001830 
 197      00183000 
 197      00700000 
 198 08d4 E00003C0 		.ascii	"\340\000\003\300\000\003\200\000\003\000\000\000\000"
 198      00038000 
 198      03000000 
 198      00
 199 08e1 00000000 		.ascii	"\000\000\000\000\007\000\000\007\000\000\000\000\000"
 199      07000007 
 199      00000000 
 199      00
 200 08ee 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 200      00000000 
 200      00000000 
 200      00
 201 08fb 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\003\340"
 201      00000000 
 201      00000003 
 201      E0
 202 0908 0007F000 		.ascii	"\000\007\360\000\0168\000\014\030\000\030x\000\030\370"
 202      0E38000C 
 202      18001878 
 202      0018F8
 203 0917 0019D800 		.ascii	"\000\031\330\000\031\230\000\031\230\000\031\230\000"
 203      19980019 
 203      98001998 
 203      00
 204 0924 18F80018 		.ascii	"\030\370\000\030x\000\030\000\000\014\000\000\016\030"
 204      78001800 
 204      000C0000 
 204      0E18
 205 0932 0007F800 		.ascii	"\000\007\370\000\003\340\000\000\000\000\000\000\000"
 205      03E00000 
 205      00000000 
 205      00
 206 093f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 206      00000000 
 206      00000000 
 206      00
 207 094c 00000000 		.ascii	"\000\000\000\000\000\037\200\000\037\300\000\001\300"
 207      001F8000 
 207      1FC00001 
 207      C0
 208 0959 00036000 		.ascii	"\000\003`\000\003`\000\0060\000\0060\000\0140\000\017"
 208      03600006 
ARM GAS  /tmp/ccK9mPCc.s 			page 14


 208      30000630 
 208      000C3000 
 208      0F
 209 096a F8001FF8 		.ascii	"\370\000\037\370\000\030\014\0000\014\000\374\177\000"
 209      00180C00 
 209      300C00FC 
 209      7F00
 210 0978 FC7F0000 		.ascii	"\374\177\000\000\000\000\000\000\000\000\000\000\000"
 210      00000000 
 210      00000000 
 210      00
 211 0985 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 211      00000000 
 211      00000000 
 211      00
 212 0992 00000000 		.ascii	"\000\000\000\000\000\000\000\177\340\000\177\360\000"
 212      0000007F 
 212      E0007FF0 
 212      00
 213 099f 18380018 		.ascii	"\0308\000\030\030\000\030\030\000\0308\000\037\360\000"
 213      18001818 
 213      00183800 
 213      1FF000
 214 09ae 1FF80018 		.ascii	"\037\370\000\030\034\000\030\014\000\030\014\000\030"
 214      1C00180C 
 214      00180C00 
 214      18
 215 09bb 0C007FF8 		.ascii	"\014\000\177\370\000\177\360\000\000\000\000\000\000"
 215      007FF000 
 215      00000000 
 215      00
 216 09c8 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 216      00000000 
 216      00000000 
 216      00
 217 09d5 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\003"
 217      00000000 
 217      00000000 
 217      03
 218 09e2 EC000FFC 		.ascii	"\354\000\017\374\000\034\034\000\030\014\0000\014\000"
 218      001C1C00 
 218      180C0030 
 218      0C00
 219 09f0 30000030 		.ascii	"0\000\0000\000\0000\000\0000\000\0000\000\000\030\014"
 219      00003000 
 219      00300000 
 219      30000018 
 219      0C
 220 0a01 001C1C00 		.ascii	"\000\034\034\000\017\370\000\003\360\000\000\000\000"
 220      0FF80003 
 220      F0000000 
 220      00
 221 0a0e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 221      00000000 
 221      00000000 
 221      00
 222 0a1b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
ARM GAS  /tmp/ccK9mPCc.s 			page 15


 222      00000000 
 222      00000000 
 222      00
 223 0a28 007FC000 		.ascii	"\000\177\300\000\177\360\000\0308\000\030\030\000\030"
 223      7FF00018 
 223      38001818 
 223      0018
 224 0a36 0C00180C 		.ascii	"\014\000\030\014\000\030\014\000\030\014\000\030\014"
 224      00180C00 
 224      180C0018 
 224      0C
 225 0a43 00180C00 		.ascii	"\000\030\014\000\030\030\000\0308\000\177\360\000\177"
 225      18180018 
 225      38007FF0 
 225      007F
 226 0a51 E0000000 		.ascii	"\340\000\000\000\000\000\000\000\000\000\000\000\000"
 226      00000000 
 226      00000000 
 226      00
 227 0a5e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 227      00000000 
 227      00000000 
 227      00
 228 0a6b 00000000 		.ascii	"\000\000\000\000\000\000\177\370\000\177\370\000\030"
 228      00007FF8 
 228      007FF800 
 228      18
 229 0a78 18001818 		.ascii	"\030\000\030\030\000\031\230\000\031\200\000\037\200"
 229      00199800 
 229      1980001F 
 229      80
 230 0a85 001F8000 		.ascii	"\000\037\200\000\031\200\000\031\230\000\030\030\000"
 230      19800019 
 230      98001818 
 230      00
 231 0a92 1818007F 		.ascii	"\030\030\000\177\370\000\177\370\000\000\000\000\000"
 231      F8007FF8 
 231      00000000 
 231      00
 232 0a9f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 232      00000000 
 232      00000000 
 232      00
 233 0aac 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 233      00000000 
 233      00000000 
 233      00
 234 0ab9 3FFC003F 		.ascii	"?\374\000?\374\000\014\014\000\014\014\000\014\314\000"
 234      FC000C0C 
 234      000C0C00 
 234      0CCC00
 235 0ac8 0CC0000F 		.ascii	"\014\300\000\017\300\000\017\300\000\014\300\000\014"
 235      C0000FC0 
 235      000CC000 
 235      0C
 236 0ad5 C0000C00 		.ascii	"\300\000\014\000\000\014\000\000?\300\000?\300\000\000"
 236      000C0000 
ARM GAS  /tmp/ccK9mPCc.s 			page 16


 236      3FC0003F 
 236      C00000
 237 0ae4 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 237      00000000 
 237      00000000 
 237      00
 238 0af1 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 238      00000000 
 238      00000000 
 238      00
 239 0afe 00000003 		.ascii	"\000\000\000\003\354\000\017\374\000\034\034\000\030"
 239      EC000FFC 
 239      001C1C00 
 239      18
 240 0b0b 0C00300C 		.ascii	"\014\0000\014\0000\000\0000\000\0000\376\0000\376\000"
 240      00300000 
 240      30000030 
 240      FE0030FE 
 240      00
 241 0b1c 300C0038 		.ascii	"0\014\0008\014\000\034\034\000\017\374\000\003\360\000"
 241      0C001C1C 
 241      000FFC00 
 241      03F000
 242 0b2b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 242      00000000 
 242      00000000 
 242      00
 243 0b38 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 243      00000000 
 243      00000000 
 243      00
 244 0b45 00000000 		.ascii	"\000\000\000\000~~\000~~\000\030\030\000\030\030\000"
 244      7E7E007E 
 244      7E001818 
 244      00181800 
 245 0b55 18180018 		.ascii	"\030\030\000\030\030\000\037\370\000\037\370\000\030"
 245      18001FF8 
 245      001FF800 
 245      18
 246 0b62 18001818 		.ascii	"\030\000\030\030\000\030\030\000\030\030\000~~\000~"
 246      00181800 
 246      1818007E 
 246      7E007E
 247 0b71 7E000000 		.ascii	"~\000\000\000\000\000\000\000\000\000\000\000\000\000"
 247      00000000 
 247      00000000 
 247      0000
 248 0b7f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 248      00000000 
 248      00000000 
 248      00
 249 0b8c 00000000 		.ascii	"\000\000\000\000\000\037\370\000\037\370\000\001\200"
 249      001FF800 
 249      1FF80001 
 249      80
 250 0b99 00018000 		.ascii	"\000\001\200\000\001\200\000\001\200\000\001\200\000"
 250      01800001 
ARM GAS  /tmp/ccK9mPCc.s 			page 17


 250      80000180 
 250      00
 251 0ba6 01800001 		.ascii	"\001\200\000\001\200\000\001\200\000\001\200\000\001"
 251      80000180 
 251      00018000 
 251      01
 252 0bb3 80001FF8 		.ascii	"\200\000\037\370\000\037\370\000\000\000\000\000\000"
 252      001FF800 
 252      00000000 
 252      00
 253 0bc0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 253      00000000 
 253      00000000 
 253      00
 254 0bcd 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\007"
 254      00000000 
 254      00000000 
 254      07
 255 0bda FE0007FE 		.ascii	"\376\000\007\376\000\0000\000\0000\000\0000\000\000"
 255      00003000 
 255      00300000 
 255      300000
 256 0be9 30000030 		.ascii	"0\000\0000\00000\00000\00000\00000\0000`\000?\340\000"
 256      00303000 
 256      30300030 
 256      30003030 
 256      00306000 
 257 0c00 0F800000 		.ascii	"\017\200\000\000\000\000\000\000\000\000\000\000\000"
 257      00000000 
 257      00000000 
 257      00
 258 0c0d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 258      00000000 
 258      00000000 
 258      00
 259 0c1a 00000000 		.ascii	"\000\000\000\000\000\000\000\177>\000\177>\000\0300"
 259      0000007F 
 259      3E007F3E 
 259      001830
 260 0c29 00186000 		.ascii	"\000\030`\000\030\300\000\031\200\000\033\200\000\037"
 260      18C00019 
 260      80001B80 
 260      001F
 261 0c37 C0001CE0 		.ascii	"\300\000\034\340\000\030p\000\0300\000\0308\000\177"
 261      00187000 
 261      18300018 
 261      38007F
 262 0c46 1F007F1F 		.ascii	"\037\000\177\037\000\000\000\000\000\000\000\000\000"
 262      00000000 
 262      00000000 
 262      00
 263 0c53 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 263      00000000 
 263      00000000 
 263      00
 264 0c60 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\177\200\000\177"
 264      00000000 
ARM GAS  /tmp/ccK9mPCc.s 			page 18


 264      007F8000 
 264      7F
 265 0c6d 80000C00 		.ascii	"\200\000\014\000\000\014\000\000\014\000\000\014\000"
 265      000C0000 
 265      0C00000C 
 265      00
 266 0c7a 000C0000 		.ascii	"\000\014\000\000\014\000\000\014\014\000\014\014\000"
 266      0C00000C 
 266      0C000C0C 
 266      00
 267 0c87 0C0C000C 		.ascii	"\014\014\000\014\014\000\177\374\000\177\374\000\000"
 267      0C007FFC 
 267      007FFC00 
 267      00
 268 0c94 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 268      00000000 
 268      00000000 
 268      00
 269 0ca1 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 269      00000000 
 269      00000000 
 269      00
 270 0cae 000000F0 		.ascii	"\000\000\000\360\017\000\370\037\0008\034\000<<\000"
 270      0F00F81F 
 270      00381C00 
 270      3C3C00
 271 0cbd 3C3C0036 		.ascii	"<<\0006l\0006l\0003\314\0003\314\0001\214\0000\014\000"
 271      6C00366C 
 271      0033CC00 
 271      33CC0031 
 271      8C00300C 
 272 0cd2 300C00FE 		.ascii	"0\014\000\376\177\000\376\177\000\000\000\000\000\000"
 272      7F00FE7F 
 272      00000000 
 272      0000
 273 0ce0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 273      00000000 
 273      00000000 
 273      00
 274 0ced 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000x\376"
 274      00000000 
 274      00000000 
 274      78FE
 275 0cfb 0078FE00 		.ascii	"\000x\376\000\034\030\000\036\030\000\037\030\000\033"
 275      1C18001E 
 275      18001F18 
 275      001B
 276 0d09 18001B98 		.ascii	"\030\000\033\230\000\031\330\000\030\330\000\030\370"
 276      0019D800 
 276      18D80018 
 276      F8
 277 0d16 00187800 		.ascii	"\000\030x\000\0308\000\177\030\000\177\030\000\000\000"
 277      1838007F 
 277      18007F18 
 277      000000
 278 0d25 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 278      00000000 
ARM GAS  /tmp/ccK9mPCc.s 			page 19


 278      00000000 
 278      00
 279 0d32 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 279      00000000 
 279      00000000 
 279      00
 280 0d3f 000003C0 		.ascii	"\000\000\003\300\000\017\360\000\0348\000\030\030\000"
 280      000FF000 
 280      1C380018 
 280      1800
 281 0d4d 381C0030 		.ascii	"8\034\0000\014\0000\014\0000\014\0000\014\0008\034\000"
 281      0C00300C 
 281      00300C00 
 281      300C0038 
 281      1C00
 282 0d5f 1818001C 		.ascii	"\030\030\000\0348\000\017\360\000\003\300\000\000\000"
 282      38000FF0 
 282      0003C000 
 282      0000
 283 0d6d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 283      00000000 
 283      00000000 
 283      00
 284 0d7a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 284      00000000 
 284      00000000 
 284      00
 285 0d87 00003FF0 		.ascii	"\000\000?\360\000?\370\000\014\034\000\014\014\000\014"
 285      003FF800 
 285      0C1C000C 
 285      0C000C
 286 0d96 0C000C0C 		.ascii	"\014\000\014\014\000\014\030\000\017\370\000\017\340"
 286      000C1800 
 286      0FF8000F 
 286      E0
 287 0da3 000C0000 		.ascii	"\000\014\000\000\014\000\000\014\000\000?\300\000?\300"
 287      0C00000C 
 287      00003FC0 
 287      003FC0
 288 0db2 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 288      00000000 
 288      00000000 
 288      00
 289 0dbf 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 289      00000000 
 289      00000000 
 289      00
 290 0dcc 00000000 		.ascii	"\000\000\000\000\000\003\300\000\017\360\000\0348\000"
 290      0003C000 
 290      0FF0001C 
 290      3800
 291 0dda 18180038 		.ascii	"\030\030\0008\034\0000\014\0000\014\0000\014\0000\014"
 291      1C00300C 
 291      00300C00 
 291      300C0030 
 291      0C
 292 0deb 00381C00 		.ascii	"\0008\034\000\030\030\000\0348\000\017\360\000\007\300"
ARM GAS  /tmp/ccK9mPCc.s 			page 20


 292      1818001C 
 292      38000FF0 
 292      0007C0
 293 0dfa 0007CC00 		.ascii	"\000\007\314\000\017\374\000\0148\000\000\000\000\000"
 293      0FFC000C 
 293      38000000 
 293      0000
 294 0e08 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 294      00000000 
 294      00000000 
 294      00
 295 0e15 00000000 		.ascii	"\000\000\000\000\177\340\000\177\360\000\0308\000\030"
 295      7FE0007F 
 295      F0001838 
 295      0018
 296 0e23 18001818 		.ascii	"\030\000\030\030\000\0308\000\037\360\000\037\300\000"
 296      00183800 
 296      1FF0001F 
 296      C000
 297 0e31 18E00018 		.ascii	"\030\340\000\030p\000\0300\000\0308\000\177\036\000"
 297      70001830 
 297      00183800 
 297      7F1E00
 298 0e40 7F0E0000 		.ascii	"\177\016\000\000\000\000\000\000\000\000\000\000\000"
 298      00000000 
 298      00000000 
 298      00
 299 0e4d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 299      00000000 
 299      00000000 
 299      00
 300 0e5a 00000000 		.ascii	"\000\000\000\000\000\000\000\007\330\000\017\370\000"
 300      00000007 
 300      D8000FF8 
 300      00
 301 0e67 1C380018 		.ascii	"\0348\000\030\030\000\030\030\000\036\000\000\017\300"
 301      18001818 
 301      001E0000 
 301      0FC0
 302 0e75 0003F000 		.ascii	"\000\003\360\000\000x\000\030\030\000\030\030\000\034"
 302      00780018 
 302      18001818 
 302      001C
 303 0e83 38001FF0 		.ascii	"8\000\037\360\000\033\340\000\000\000\000\000\000\000"
 303      001BE000 
 303      00000000 
 303      0000
 304 0e91 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 304      00000000 
 304      00000000 
 304      00
 305 0e9e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000?\374\000"
 305      00000000 
 305      0000003F 
 305      FC00
 306 0eac 3FFC0031 		.ascii	"?\374\0001\214\0001\214\0001\214\0001\214\000\001\200"
 306      8C00318C 
ARM GAS  /tmp/ccK9mPCc.s 			page 21


 306      00318C00 
 306      318C0001 
 306      80
 307 0ebd 00018000 		.ascii	"\000\001\200\000\001\200\000\001\200\000\001\200\000"
 307      01800001 
 307      80000180 
 307      00
 308 0eca 0180000F 		.ascii	"\001\200\000\017\360\000\017\360\000\000\000\000\000"
 308      F0000FF0 
 308      00000000 
 308      00
 309 0ed7 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 309      00000000 
 309      00000000 
 309      00
 310 0ee4 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 310      00000000 
 310      00000000 
 310      00
 311 0ef1 7E7E007E 		.ascii	"~~\000~~\000\030\030\000\030\030\000\030\030\000\030"
 311      7E001818 
 311      00181800 
 311      18180018 
 312 0f01 18001818 		.ascii	"\030\000\030\030\000\030\030\000\030\030\000\030\030"
 312      00181800 
 312      18180018 
 312      18
 313 0f0e 00181800 		.ascii	"\000\030\030\000\0140\000\017\360\000\003\300\000\000"
 313      0C30000F 
 313      F00003C0 
 313      0000
 314 0f1c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 314      00000000 
 314      00000000 
 314      00
 315 0f29 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 315      00000000 
 315      00000000 
 315      00
 316 0f36 0000007F 		.ascii	"\000\000\000\177\177\000\177\177\000\030\014\000\014"
 316      7F007F7F 
 316      00180C00 
 316      0C
 317 0f43 18000C18 		.ascii	"\030\000\014\030\000\014\030\000\0060\000\0060\000\003"
 317      000C1800 
 317      06300006 
 317      300003
 318 0f52 60000360 		.ascii	"`\000\003`\000\003`\000\001\300\000\001\300\000\000"
 318      00036000 
 318      01C00001 
 318      C00000
 319 0f61 80000000 		.ascii	"\200\000\000\000\000\000\000\000\000\000\000\000\000"
 319      00000000 
 319      00000000 
 319      00
 320 0f6e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 320      00000000 
ARM GAS  /tmp/ccK9mPCc.s 			page 22


 320      00000000 
 320      00
 321 0f7b 00000000 		.ascii	"\000\000\000\000\000\000\376?\200\376?\2000\006\000"
 321      0000FE3F 
 321      80FE3F80 
 321      300600
 322 0f8a 30060030 		.ascii	"0\006\0000\206\000\031\314\000\031\314\000\033l\000"
 322      860019CC 
 322      0019CC00 
 322      1B6C00
 323 0f99 1B6C001E 		.ascii	"\033l\000\036|\000\016"
 323      7C000E
 324 0fa0 38000E38 		.ascii	"8\000\0168\000\014\030\000\014\030\000\000\000\000\000"
 324      000C1800 
 324      0C180000 
 324      000000
 325 0faf 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 325      00000000 
 325      00000000 
 325      00
 326 0fbc 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 326      00000000 
 326      00000000 
 326      00
 327 0fc9 7E7E007E 		.ascii	"~~\000~~\000\030\030\000\0140\000\006`\000\003\300\000"
 327      7E001818 
 327      000C3000 
 327      06600003 
 327      C000
 328 0fdb 01800001 		.ascii	"\001\200\000\001\200\000\003\300\000\006`\000\0140\000"
 328      800003C0 
 328      00066000 
 328      0C3000
 329 0fea 1818007E 		.ascii	"\030\030\000~~\000~~\000\000\000\000\000\000\000\000"
 329      7E007E7E 
 329      00000000 
 329      00000000 
 330 0ffa 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 330      00000000 
 330      00000000 
 330      00
 331 1007 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000|~\000|~\000"
 331      00000000 
 331      00007C7E 
 331      007C7E00 
 332 1017 1818000C 		.ascii	"\030\030\000\0140\000\006`\000\006`\000\003\300\000"
 332      30000660 
 332      00066000 
 332      03C000
 333 1026 01800001 		.ascii	"\001\200\000\001\200\000\001\200\000\001\200\000\001"
 333      80000180 
 333      00018000 
 333      01
 334 1033 80000FF0 		.ascii	"\200\000\017\360\000\017\360\000\000\000\000\000\000"
 334      000FF000 
 334      00000000 
 334      00
ARM GAS  /tmp/ccK9mPCc.s 			page 23


 335 1040 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 335      00000000 
 335      00000000 
 335      00
 336 104d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\037"
 336      00000000 
 336      00000000 
 336      1F
 337 105a F8001FF8 		.ascii	"\370\000\037\370\000\030\030\000\0300\000\030`\000\030"
 337      00181800 
 337      18300018 
 337      600018
 338 1069 C0000180 		.ascii	"\300\000\001\200\000\003\000\000\006\030\000\014\030"
 338      00030000 
 338      0618000C 
 338      18
 339 1076 00181800 		.ascii	"\000\030\030\0000\030\000?\370\000?\370\000\000\000"
 339      3018003F 
 339      F8003FF8 
 339      000000
 340 1085 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 340      00000000 
 340      00000000 
 340      00
 341 1092 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\001"
 341      00000000 
 341      00000000 
 341      01
 342 109f F00001F0 		.ascii	"\360\000\001\360\000\001\200\000\001\200\000\001\200"
 342      00018000 
 342      01800001 
 342      80
 343 10ac 00018000 		.ascii	"\000\001\200\000\001\200\000\001\200\000\001\200\000"
 343      01800001 
 343      80000180 
 343      00
 344 10b9 01800001 		.ascii	"\001\200\000\001\200\000\001\200\000\001\200\000\001"
 344      80000180 
 344      00018000 
 344      01
 345 10c6 80000180 		.ascii	"\200\000\001\200\000\001\200\000\001\360\000\001\360"
 345      00018000 
 345      01F00001 
 345      F0
 346 10d3 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 346      00000000 
 346      00000000 
 346      00
 347 10e0 18000018 		.ascii	"\030\000\000\030\000\000\034\000\000\014\000\000\016"
 347      00001C00 
 347      000C0000 
 347      0E
 348 10ed 00000600 		.ascii	"\000\000\006\000\000\006\000\000\003\000\000\003\000"
 348      00060000 
 348      03000003 
 348      00
 349 10fa 00018000 		.ascii	"\000\001\200\000\001\200\000\000\300\000\000\300\000"
ARM GAS  /tmp/ccK9mPCc.s 			page 24


 349      01800000 
 349      C00000C0 
 349      00
 350 1107 00600000 		.ascii	"\000`\000\000`\000\000p\000\0000\000\0008\000\000\030"
 350      60000070 
 350      00003000 
 350      00380000 
 350      18
 351 1118 00001800 		.ascii	"\000\000\030\000\000\000\000\000\000\000\000\000\000"
 351      00000000 
 351      00000000 
 351      00
 352 1125 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\017\200\000\017"
 352      00000000 
 352      000F8000 
 352      0F
 353 1132 80000180 		.ascii	"\200\000\001\200\000\001\200\000\001\200\000\001\200"
 353      00018000 
 353      01800001 
 353      80
 354 113f 00018000 		.ascii	"\000\001\200\000\001\200\000\001\200\000\001\200\000"
 354      01800001 
 354      80000180 
 354      00
 355 114c 01800001 		.ascii	"\001\200\000\001\200\000\001\200\000\001\200\000\001"
 355      80000180 
 355      00018000 
 355      01
 356 1159 80000180 		.ascii	"\200\000\001\200\000\017\200\000\017\200\000\000\000"
 356      000F8000 
 356      0F800000 
 356      00
 357 1166 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 357      00000000 
 357      00000000 
 357      00
 358 1173 00800001 		.ascii	"\000\200\000\001\300\000\003\340\000\007p\000\0060\000"
 358      C00003E0 
 358      00077000 
 358      063000
 359 1182 0C180018 		.ascii	"\014\030\000\030\014\000\020\004\000\000\000\000\000"
 359      0C001004 
 359      00000000 
 359      00
 360 118f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 360      00000000 
 360      00000000 
 360      00
 361 119c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 361      00000000 
 361      00000000 
 361      00
 362 11a9 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 362      00000000 
 362      00000000 
 362      00
 363 11b6 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
ARM GAS  /tmp/ccK9mPCc.s 			page 25


 363      00000000 
 363      00000000 
 363      00
 364 11c3 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 364      00000000 
 364      00000000 
 364      00
 365 11d0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 365      00000000 
 365      00000000 
 365      00
 366 11dd 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 366      00000000 
 366      00000000 
 366      00
 367 11ea 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 367      00000000 
 367      00000000 
 367      00
 368 11f7 000000FF 		.ascii	"\000\000\000\377\377\000\377\377\000\000\000\000\003"
 368      FF00FFFF 
 368      00000000 
 368      03
 369 1204 00000380 		.ascii	"\000\000\003\200\000\000\340\000\000`\000\000\000\000"
 369      0000E000 
 369      00600000 
 369      0000
 370 1212 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 370      00000000 
 370      00000000 
 370      00
 371 121f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 371      00000000 
 371      00000000 
 371      00
 372 122c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 372      00000000 
 372      00000000 
 372      00
 373 1239 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 373      00000000 
 373      00000000 
 373      00
 374 1246 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 374      00000000 
 374      00000000 
 374      00
 375 1253 00000000 		.ascii	"\000\000\000\000\000\000\000\017\300\000\037\340\000"
 375      0000000F 
 375      C0001FE0 
 375      00
 376 1260 00300000 		.ascii	"\0000\000\0000\000\007\360\000\037\360\00080\00000\000"
 376      300007F0 
 376      001FF000 
 376      38300030 
 376      3000
 377 1272 3070001F 		.ascii	"0p\000\037\374\000\017\274\000\000\000\000\000\000\000"
ARM GAS  /tmp/ccK9mPCc.s 			page 26


 377      FC000FBC 
 377      00000000 
 377      000000
 378 1281 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 378      00000000 
 378      00000000 
 378      00
 379 128e 00000000 		.ascii	"\000\000\000\000\000\000\000\000x\000\000x\000\000\030"
 379      00000000 
 379      78000078 
 379      000018
 380 129d 00001800 		.ascii	"\000\000\030\000\000\033\340\000\037\370\000\034\030"
 380      001BE000 
 380      1FF8001C 
 380      18
 381 12aa 00180C00 		.ascii	"\000\030\014\000\030\014\000\030\014\000\030\014\000"
 381      180C0018 
 381      0C00180C 
 381      00
 382 12b7 180C001C 		.ascii	"\030\014\000\034\030\000\177\370\000{\340\000\000\000"
 382      18007FF8 
 382      007BE000 
 382      0000
 383 12c5 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 383      00000000 
 383      00000000 
 383      00
 384 12d2 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 384      00000000 
 384      00000000 
 384      00
 385 12df 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\003\354"
 385      00000000 
 385      00000003 
 385      EC
 386 12ec 000FFC00 		.ascii	"\000\017\374\000\034\034\0008\014\0000\014\0000\000"
 386      1C1C0038 
 386      0C00300C 
 386      003000
 387 12fb 00300000 		.ascii	"\0000\000\0008\014\000\034\034\000\017\370\000\003\360"
 387      380C001C 
 387      1C000FF8 
 387      0003F0
 388 130a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 388      00000000 
 388      00000000 
 388      00
 389 1317 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 389      00000000 
 389      00000000 
 389      00
 390 1324 00000078 		.ascii	"\000\000\000x\000\000x\000\000\030\000\000\030\000\007"
 390      00007800 
 390      00180000 
 390      180007
 391 1333 D8001FF8 		.ascii	"\330\000\037\370\000\0308\0000\030\0000\030\0000\030"
 391      00183800 
ARM GAS  /tmp/ccK9mPCc.s 			page 27


 391      30180030 
 391      18003018 
 392 1343 00301800 		.ascii	"\0000\030\0000\030\000\0308\000\037\376\000\007\336"
 392      30180018 
 392      38001FFE 
 392      0007DE
 393 1352 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 393      00000000 
 393      00000000 
 393      00
 394 135f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 394      00000000 
 394      00000000 
 394      00
 395 136c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 395      00000000 
 395      00000000 
 395      00
 396 1379 0007E000 		.ascii	"\000\007\340\000\037\370\000\030\030\0000\014\000?\374"
 396      1FF80018 
 396      1800300C 
 396      003FFC
 397 1388 003FFC00 		.ascii	"\000?\374\0000\000\0000\000\000\030\014\000\037\374"
 397      30000030 
 397      0000180C 
 397      001FFC
 398 1397 0007F000 		.ascii	"\000\007\360\000\000\000\000\000\000\000\000\000\000"
 398      00000000 
 398      00000000 
 398      00
 399 13a4 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 399      00000000 
 399      00000000 
 399      00
 400 13b1 00000000 		.ascii	"\000\000\000\000\000\001\374\000\003\374\000\006\000"
 400      0001FC00 
 400      03FC0006 
 400      00
 401 13be 00060000 		.ascii	"\000\006\000\000?\370\000?\370\000\006\000\000\006\000"
 401      3FF8003F 
 401      F8000600 
 401      000600
 402 13cd 00060000 		.ascii	"\000\006\000\000\006\000\000\006\000\000\006\000\000"
 402      06000006 
 402      00000600 
 402      00
 403 13da 0600003F 		.ascii	"\006\000\000?\360\000?\360\000\000\000\000\000\000\000"
 403      F0003FF0 
 403      00000000 
 403      000000
 404 13e9 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 404      00000000 
 404      00000000 
 404      00
 405 13f6 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 405      00000000 
 405      00000000 
ARM GAS  /tmp/ccK9mPCc.s 			page 28


 405      00
 406 1403 00000000 		.ascii	"\000\000\000\000\000\000\000\007\336\000\037\376\000"
 406      00000007 
 406      DE001FFE 
 406      00
 407 1410 18380030 		.ascii	"\0308\0000\030\0000\030\0000\030\0000\030\0000\030\000"
 407      18003018 
 407      00301800 
 407      30180030 
 407      1800
 408 1422 1838001F 		.ascii	"\0308\000\037\370\000\007\330\000\000\030\000\000\030"
 408      F80007D8 
 408      00001800 
 408      0018
 409 1430 00003800 		.ascii	"\000\0008\000\017\360\000\017\300\000\000\000\000\000"
 409      0FF0000F 
 409      C0000000 
 409      0000
 410 143e 00000000 		.ascii	"\000\000\000\000\000\000\000\000x\000\000x\000\000\030"
 410      00000000 
 410      78000078 
 410      000018
 411 144d 00001800 		.ascii	"\000\000\030\000\000\033\340\000\037\360\000\0348\000"
 411      001BE000 
 411      1FF0001C 
 411      3800
 412 145b 18180018 		.ascii	"\030\030\000\030\030\000\030\030\000\030\030\000\030"
 412      18001818 
 412      00181800 
 412      18
 413 1468 18001818 		.ascii	"\030\000\030\030\000~~\000~~\000\000\000\000\000\000"
 413      007E7E00 
 413      7E7E0000 
 413      00000000 
 414 1478 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 414      00000000 
 414      00000000 
 414      00
 415 1485 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\001\200\000\001"
 415      00000000 
 415      00018000 
 415      01
 416 1492 80000000 		.ascii	"\200\000\000\000\000\000\000\000\037\200\000\037\200"
 416      00000000 
 416      1F80001F 
 416      80
 417 149f 00018000 		.ascii	"\000\001\200\000\001\200\000\001\200\000\001\200\000"
 417      01800001 
 417      80000180 
 417      00
 418 14ac 01800001 		.ascii	"\001\200\000\001\200\000\001\200\000?\374\000?\374\000"
 418      80000180 
 418      003FFC00 
 418      3FFC00
 419 14bb 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 419      00000000 
 419      00000000 
ARM GAS  /tmp/ccK9mPCc.s 			page 29


 419      00
 420 14c8 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 420      00000000 
 420      00000000 
 420      00
 421 14d5 0000C000 		.ascii	"\000\000\300\000\000\300\000\000\000\000\000\000\000"
 421      00C00000 
 421      00000000 
 421      00
 422 14e2 1FF0001F 		.ascii	"\037\360\000\037\360\000\0000\000\0000\000\0000\000"
 422      F0000030 
 422      00003000 
 422      003000
 423 14f1 00300000 		.ascii	"\0000\000\0000\000\0000\000\0000\000\0000\000\0000\000"
 423      30000030 
 423      00003000 
 423      00300000 
 423      3000
 424 1503 00300000 		.ascii	"\0000\000\0000\000\000p\000\037\340\000\037\200\000"
 424      30000070 
 424      001FE000 
 424      1F8000
 425 1512 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000<\000"
 425      00000000 
 425      00000000 
 425      3C00
 426 1520 003C0000 		.ascii	"\000<\000\000\014\000\000\014\000\000\014\370\000\014"
 426      0C00000C 
 426      00000CF8 
 426      000C
 427 152e F8000CC0 		.ascii	"\370\000\014\300\000\015\200\000\017\200\000\017\000"
 427      000D8000 
 427      0F80000F 
 427      00
 428 153b 000F8000 		.ascii	"\000\017\200\000\015\300\000\014\340\000<|\000<|\000"
 428      0DC0000C 
 428      E0003C7C 
 428      003C7C00 
 429 154b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 429      00000000 
 429      00000000 
 429      00
 430 1558 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 430      00000000 
 430      00000000 
 430      00
 431 1565 001F8000 		.ascii	"\000\037\200\000\037\200\000\001\200\000\001\200\000"
 431      1F800001 
 431      80000180 
 431      00
 432 1572 01800001 		.ascii	"\001\200\000\001\200\000\001\200\000\001\200\000\001"
 432      80000180 
 432      00018000 
 432      01
 433 157f 80000180 		.ascii	"\200\000\001\200\000\001\200\000\001\200\000\001\200"
 433      00018000 
 433      01800001 
ARM GAS  /tmp/ccK9mPCc.s 			page 30


 433      80
 434 158c 003FFC00 		.ascii	"\000?\374\000?\374\000\000\000\000\000\000\000\000\000"
 434      3FFC0000 
 434      00000000 
 434      000000
 435 159b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 435      00000000 
 435      00000000 
 435      00
 436 15a8 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 436      00000000 
 436      00000000 
 436      00
 437 15b5 00000000 		.ascii	"\000\000\000\000\000\367x\000\377\374\0009\314\0001"
 437      00F77800 
 437      FFFC0039 
 437      CC0031
 438 15c4 8C00318C 		.ascii	"\214\0001\214\0001\214\0001\214\0001\214\0001\214\000"
 438      00318C00 
 438      318C0031 
 438      8C00318C 
 438      00
 439 15d5 FDEF00FD 		.ascii	"\375\357\000\375\357\000\000\000\000\000\000\000\000"
 439      EF000000 
 439      00000000 
 439      00
 440 15e2 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 440      00000000 
 440      00000000 
 440      00
 441 15ef 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 441      00000000 
 441      00000000 
 441      00
 442 15fc 00000000 		.ascii	"\000\000\000\000\000\000{\340\000\177\360\000\0348\000"
 442      00007BE0 
 442      007FF000 
 442      1C3800
 443 160b 18180018 		.ascii	"\030\030\000\030\030\000\030\030\000\030\030\000\030"
 443      18001818 
 443      00181800 
 443      18
 444 1618 18001818 		.ascii	"\030\000\030\030\000~~\000~~\000\000\000\000\000\000"
 444      007E7E00 
 444      7E7E0000 
 444      00000000 
 445 1628 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 445      00000000 
 445      00000000 
 445      00
 446 1635 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 446      00000000 
 446      00000000 
 446      00
 447 1642 00000000 		.ascii	"\000\000\000\000\000\000\000\000\003\300\000\017\360"
 447      00000000 
 447      03C0000F 
ARM GAS  /tmp/ccK9mPCc.s 			page 31


 447      F0
 448 164f 001C3800 		.ascii	"\000\0348\0008\034\0000\014\0000\014\0000\014\0008\034"
 448      381C0030 
 448      0C00300C 
 448      00300C00 
 448      381C
 449 1661 001C3800 		.ascii	"\000\0348\000\017\360\000\003\300\000\000\000\000\000"
 449      0FF00003 
 449      C0000000 
 449      0000
 450 166f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 450      00000000 
 450      00000000 
 450      00
 451 167c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 451      00000000 
 451      00000000 
 451      00
 452 1689 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000{\340\000\177\370"
 452      00000000 
 452      007BE000 
 452      7FF8
 453 1697 001C1800 		.ascii	"\000\034\030\000\030\014\000\030\014\000\030\014\000"
 453      180C0018 
 453      0C00180C 
 453      00
 454 16a4 180C0018 		.ascii	"\030\014\000\030\014\000\034\030\000\037\370\000\033"
 454      0C001C18 
 454      001FF800 
 454      1B
 455 16b1 E0001800 		.ascii	"\340\000\030\000\000\030\000\000\030\000\000\177\000"
 455      00180000 
 455      1800007F 
 455      00
 456 16be 007F0000 		.ascii	"\000\177\000\000\000\000\000\000\000\000\000\000\000"
 456      00000000 
 456      00000000 
 456      00
 457 16cb 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 457      00000000 
 457      00000000 
 457      00
 458 16d8 000007DE 		.ascii	"\000\000\007\336\000\037\376\000\0308\0000\030\0000"
 458      001FFE00 
 458      18380030 
 458      180030
 459 16e7 18003018 		.ascii	"\030\0000\030\0000\030\0000\030\000\0308\000\037\370"
 459      00301800 
 459      30180018 
 459      38001FF8 
 460 16f7 0007D800 		.ascii	"\000\007\330\000\000\030\000\000\030\000\000\030\000"
 460      00180000 
 460      18000018 
 460      00
 461 1704 00FE0000 		.ascii	"\000\376\000\000\376\000\000\000\000\000\000\000\000"
 461      FE000000 
 461      00000000 
ARM GAS  /tmp/ccK9mPCc.s 			page 32


 461      00
 462 1711 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 462      00000000 
 462      00000000 
 462      00
 463 171e 00000000 		.ascii	"\000\000\000\000>x\000>\374\000\007\314\000\007\000"
 463      3E78003E 
 463      FC0007CC 
 463      000700
 464 172d 00060000 		.ascii	"\000\006\000\000\006\000\000\006\000\000\006\000\000"
 464      06000006 
 464      00000600 
 464      00
 465 173a 0600003F 		.ascii	"\006\000\000?\360\000?\360\000\000\000\000\000\000\000"
 465      F0003FF0 
 465      00000000 
 465      000000
 466 1749 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 466      00000000 
 466      00000000 
 466      00
 467 1756 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 467      00000000 
 467      00000000 
 467      00
 468 1763 00000000 		.ascii	"\000\000\000\000\000\000\000\007\370\000\017\370\000"
 468      00000007 
 468      F8000FF8 
 468      00
 469 1770 18180018 		.ascii	"\030\030\000\030\030\000\037\200\000\017\360\000\000"
 469      18001F80 
 469      000FF000 
 469      00
 470 177d F8001818 		.ascii	"\370\000\030\030\000\0308\000\037\360\000\037\340\000"
 470      00183800 
 470      1FF0001F 
 470      E000
 471 178b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 471      00000000 
 471      00000000 
 471      00
 472 1798 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 472      00000000 
 472      00000000 
 472      00
 473 17a5 000C0000 		.ascii	"\000\014\000\000\014\000\000\014\000\000\014\000\000"
 473      0C00000C 
 473      00000C00 
 473      00
 474 17b2 3FF0003F 		.ascii	"?\360\000?\360\000\014\000\000\014\000\000\014\000\000"
 474      F0000C00 
 474      000C0000 
 474      0C0000
 475 17c1 0C00000C 		.ascii	"\014\000\000\014\000\000\014\000\000\014\034\000\007"
 475      00000C00 
 475      000C1C00 
 475      07
ARM GAS  /tmp/ccK9mPCc.s 			page 33


 476 17ce FC0003F0 		.ascii	"\374\000\003\360\000\000\000\000\000\000\000\000\000"
 476      00000000 
 476      00000000 
 476      00
 477 17db 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 477      00000000 
 477      00000000 
 477      00
 478 17e8 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 478      00000000 
 478      00000000 
 478      00
 479 17f5 00000000 		.ascii	"\000\000\000\000\000xx\000xx\000\030\030\000\030\030"
 479      00787800 
 479      78780018 
 479      18001818 
 480 1805 00181800 		.ascii	"\000\030\030\000\030\030\000\030\030\000\030\030\000"
 480      18180018 
 480      18001818 
 480      00
 481 1812 1838000F 		.ascii	"\0308\000\017\376\000\007\336\000\000\000\000\000\000"
 481      FE0007DE 
 481      00000000 
 481      0000
 482 1820 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 482      00000000 
 482      00000000 
 482      00
 483 182d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 483      00000000 
 483      00000000 
 483      00
 484 183a 00000000 		.ascii	"\000\000\000\000\000\000\000\000|>\000|>\000\030\030"
 484      00000000 
 484      7C3E007C 
 484      3E001818 
 485 184a 00181800 		.ascii	"\000\030\030\000\0140\000\0140\000\006`\000\006`\000"
 485      0C30000C 
 485      30000660 
 485      00066000 
 486 185a 07E00003 		.ascii	"\007\340\000\003\300\000\003\300\000\000\000\000\000"
 486      C00003C0 
 486      00000000 
 486      00
 487 1867 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 487      00000000 
 487      00000000 
 487      00
 488 1874 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 488      00000000 
 488      00000000 
 488      00
 489 1881 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000x<\000x<\0001\030"
 489      00000000 
 489      00783C00 
 489      783C0031 
 489      18
ARM GAS  /tmp/ccK9mPCc.s 			page 34


 490 1892 00339800 		.ascii	"\0003\230\0003\230\000\032\260\000\036\360\000\036\360"
 490      3398001A 
 490      B0001EF0 
 490      001EF0
 491 18a1 001C6000 		.ascii	"\000\034`\000\014`\000\014`\000\000\000\000\000\000"
 491      0C60000C 
 491      60000000 
 491      000000
 492 18b0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 492      00000000 
 492      00000000 
 492      00
 493 18bd 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 493      00000000 
 493      00000000 
 493      00
 494 18ca 00000000 		.ascii	"\000\000\000\000\000\000\000\000>|\000>|\000\0140\000"
 494      00000000 
 494      3E7C003E 
 494      7C000C30 
 494      00
 495 18db 06600003 		.ascii	"\006`\000\003\300\000\001\200\000\003\300\000\006`\000"
 495      C0000180 
 495      0003C000 
 495      066000
 496 18ea 0C30003E 		.ascii	"\0140\000>|\000>|\000\000\000\000\000\000\000\000\000"
 496      7C003E7C 
 496      00000000 
 496      00000000 
 496      00
 497 18fb 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 497      00000000 
 497      00000000 
 497      00
 498 1908 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 498      00000000 
 498      00000000 
 498      00
 499 1915 00000000 		.ascii	"\000\000\000\000\000~\037\000~\037\000\030\014\000\014"
 499      007E1F00 
 499      7E1F0018 
 499      0C000C
 500 1924 18000C18 		.ascii	"\030\000\014\030\000\0060\000\0060\000\003`\000\003"
 500      00063000 
 500      06300003 
 500      600003
 501 1933 E00001C0 		.ascii	"\340\000\001\300\000\000\300\000\001\200\000\001\200"
 501      0000C000 
 501      01800001 
 501      80
 502 1940 00030000 		.ascii	"\000\003\000\000?\300\000?\300\000\000\000\000\000\000"
 502      3FC0003F 
 502      C0000000 
 502      000000
 503 194f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 503      00000000 
 503      00000000 
ARM GAS  /tmp/ccK9mPCc.s 			page 35


 503      00
 504 195c 00000000 		.ascii	"\000\000\000\000\000\000\037\370\000\037\370\000\030"
 504      00001FF8 
 504      001FF800 
 504      18
 505 1969 30001860 		.ascii	"0\000\030`\000\000\300\000\001\200\000\003\000\000\006"
 505      0000C000 
 505      01800003 
 505      000006
 506 1978 18000C18 		.ascii	"\030\000\014\030\000\037\370\000\037\370\000\000\000"
 506      001FF800 
 506      1FF80000 
 506      00
 507 1985 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 507      00000000 
 507      00000000 
 507      00
 508 1992 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 508      00000000 
 508      00000000 
 508      00
 509 199f E00001E0 		.ascii	"\340\000\001\340\000\001\200\000\001\200\000\001\200"
 509      00018000 
 509      01800001 
 509      80
 510 19ac 00018000 		.ascii	"\000\001\200\000\001\200\000\001\200\000\003\200\000"
 510      01800001 
 510      80000380 
 510      00
 511 19b9 07000003 		.ascii	"\007\000\000\003\200\000\001\200\000\001\200\000\001"
 511      80000180 
 511      00018000 
 511      01
 512 19c6 80000180 		.ascii	"\200\000\001\200\000\001\200\000\001\340\000\000\340"
 512      00018000 
 512      01E00000 
 512      E0
 513 19d3 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 513      00000000 
 513      00000000 
 513      00
 514 19e0 00000000 		.ascii	"\000\000\000\000\000\000\001\200\000\001\200\000\001"
 514      00000180 
 514      00018000 
 514      01
 515 19ed 80000180 		.ascii	"\200\000\001\200\000\001\200\000\001\200\000\001\200"
 515      00018000 
 515      01800001 
 515      80
 516 19fa 00018000 		.ascii	"\000\001\200\000\001\200\000\001\200\000\001\200\000"
 516      01800001 
 516      80000180 
 516      00
 517 1a07 01800001 		.ascii	"\001\200\000\001\200\000\001\200\000\001\200\000\001"
 517      80000180 
 517      00018000 
 517      01
ARM GAS  /tmp/ccK9mPCc.s 			page 36


 518 1a14 80000180 		.ascii	"\200\000\001\200\000\001\200\000\000\000\000\000\000"
 518      00018000 
 518      00000000 
 518      00
 519 1a21 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 519      00000000 
 519      00000000 
 519      00
 520 1a2e 07000007 		.ascii	"\007\000\000\007\200\000\001\200\000\001\200\000\001"
 520      80000180 
 520      00018000 
 520      01
 521 1a3b 80000180 		.ascii	"\200\000\001\200\000\001\200\000\001\200\000\001\300"
 521      00018000 
 521      01800001 
 521      C0
 522 1a48 0000E000 		.ascii	"\000\000\340\000\001\300\000\001\200\000\001\200\000"
 522      01C00001 
 522      80000180 
 522      00
 523 1a55 01800001 		.ascii	"\001\200\000\001\200\000\001\200\000\007\200\000\007"
 523      80000180 
 523      00078000 
 523      07
 524 1a62 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 524      00000000 
 524      00000000 
 524      00
 525 1a6f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 525      00000000 
 525      00000000 
 525      00
 526 1a7c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\016"
 526      00000000 
 526      00000000 
 526      0E
 527 1a89 00001F18 		.ascii	"\000\000\037\030\000;\270\0001\360\000\000\340\000\000"
 527      003BB800 
 527      31F00000 
 527      E00000
 528 1a98 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 528      00000000 
 528      00000000 
 528      00
 529 1aa5 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 529      00000000 
 529      00000000 
 529      00
 530 1ab2 00000000 		.ascii	"\000\000\000\000\000\000"
 530      0000
 531              		.global	Font24
 532              		.section	.data.Font24,"aw"
 533              		.align	2
 536              	Font24:
 537 0000 00000000 		.word	Font24_Table
 538 0004 1100     		.short	17
 539 0006 1800     		.short	24
ARM GAS  /tmp/ccK9mPCc.s 			page 37


 540              		.global	Font20_Table
 541              		.section	.rodata.Font20_Table,"a"
 542              		.align	2
 545              	Font20_Table:
 546 0000 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 546      00000000 
 546      00000000 
 546      00
 547 000d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 547      00000000 
 547      00000000 
 547      00
 548 001a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 548      00000000 
 548      00000000 
 548      00
 549 0027 00000007 		.ascii	"\000\000\000\007\000\007\000\007\000\007\000\007\000"
 549      00070007 
 549      00070007 
 549      00
 550 0034 07000700 		.ascii	"\007\000\007\000\002\000\002\000\000\000\000\000\007"
 550      02000200 
 550      00000000 
 550      07
 551 0041 00070000 		.ascii	"\000\007\000\000\000\000\000\000\000\000\000\000\000"
 551      00000000 
 551      00000000 
 551      00
 552 004e 00000000 		.ascii	"\000\000\000\000\000\000\034\340\034\340\034\340\010"
 552      00001CE0 
 552      1CE01CE0 
 552      08
 553 005b 40084008 		.ascii	"@\010@\010@\000\000\000\000\000\000\000\000\000\000"
 553      40000000 
 553      00000000 
 553      000000
 554 006a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 554      00000000 
 554      00000000 
 554      00
 555 0077 000CC00C 		.ascii	"\000\014\300\014\300\014\300\014\300\014\300?\360?\360"
 555      C00CC00C 
 555      C00CC03F 
 555      F03FF0
 556 0086 0CC00CC0 		.ascii	"\014\300\014\300?\360?\360\014\300\014\300\014\300\014"
 556      3FF03FF0 
 556      0CC00CC0 
 556      0CC00C
 557 0095 C00CC000 		.ascii	"\300\014\300\000\000\000\000\000\000\000\000\003\000"
 557      00000000 
 557      00000003 
 557      00
 558 00a2 030007E0 		.ascii	"\003\000\007\340\017\340\030`\030\000\037\000\017\300"
 558      0FE01860 
 558      18001F00 
 558      0FC0
 559 00b0 00E01860 		.ascii	"\000\340\030`\030`\037\300\037\200\003\000\003\000\003"
ARM GAS  /tmp/ccK9mPCc.s 			page 38


 559      18601FC0 
 559      1F800300 
 559      030003
 560 00bf 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\034\000"
 560      00000000 
 560      0000001C 
 560      00
 561 00cc 22002200 		.ascii	"\"\000\"\000\"\000\034`\001\340\017\200<\0001\300\002"
 561      22001C60 
 561      01E00F80 
 561      3C0031C0 
 561      02
 562 00dd 20022002 		.ascii	" \002 \002 \001\300\000\000\000\000\000\000\000\000"
 562      2001C000 
 562      00000000 
 562      000000
 563 00ec 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\003\340\017"
 563      00000000 
 563      000003E0 
 563      0F
 564 00f9 E00C000C 		.ascii	"\340\014\000\014\000\006\000\0170\037\360\031\340\030"
 564      0006000F 
 564      301FF019 
 564      E018
 565 0107 C01FF007 		.ascii	"\300\037\360\007\260\000\000\000\000\000\000\000\000"
 565      B0000000 
 565      00000000 
 565      00
 566 0114 00000000 		.ascii	"\000\000\000\000\000\000\000\000\003\200\003\200\003"
 566      00000000 
 566      03800380 
 566      03
 567 0121 80010001 		.ascii	"\200\001\000\001\000\001\000\000\000\000\000\000\000"
 567      00010000 
 567      00000000 
 567      00
 568 012e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 568      00000000 
 568      00000000 
 568      00
 569 013b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\300\000\300\001\200"
 569      00000000 
 569      C000C001 
 569      80
 570 0148 01800180 		.ascii	"\001\200\001\200\003\000\003\000\003\000\003\000\003"
 570      03000300 
 570      03000300 
 570      03
 571 0155 00030001 		.ascii	"\000\003\000\001\200\001\200\001\200\000\300\000\300"
 571      80018001 
 571      8000C000 
 571      C0
 572 0162 00000000 		.ascii	"\000\000\000\000\000\000\000\000\014\000\014\000\006"
 572      00000000 
 572      0C000C00 
 572      06
 573 016f 00060006 		.ascii	"\000\006\000\006\000\003\000\003\000\003\000\003\000"
ARM GAS  /tmp/ccK9mPCc.s 			page 39


 573      00030003 
 573      00030003 
 573      00
 574 017c 03000300 		.ascii	"\003\000\003\000\006\000\006\000\006\000\014\000\014"
 574      06000600 
 574      06000C00 
 574      0C
 575 0189 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\003\000\003\000"
 575      00000000 
 575      00030003 
 575      00
 576 0196 03001B60 		.ascii	"\003\000\033`\037\340\007\200\007\200\017\300\014\300"
 576      1FE00780 
 576      07800FC0 
 576      0CC0
 577 01a4 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 577      00000000 
 577      00000000 
 577      00
 578 01b1 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 578      00000000 
 578      00000000 
 578      00
 579 01be 03000300 		.ascii	"\003\000\003\000\003\000\003\000?\360?\360\003\000\003"
 579      03000300 
 579      3FF03FF0 
 579      030003
 580 01cd 00030003 		.ascii	"\000\003\000\003\000\000\000\000\000\000\000\000\000"
 580      00000000 
 580      00000000 
 580      00
 581 01da 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 581      00000000 
 581      00000000 
 581      00
 582 01e7 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 582      00000000 
 582      00000000 
 582      00
 583 01f4 00000380 		.ascii	"\000\000\003\200\003\000\003\000\006\000\006\000\004"
 583      03000300 
 583      06000600 
 583      04
 584 0201 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 584      00000000 
 584      00000000 
 584      00
 585 020e 00000000 		.ascii	"\000\000\000\000\000\000\000\000?\340?\340\000\000\000"
 585      00000000 
 585      3FE03FE0 
 585      000000
 586 021d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 586      00000000 
 586      00000000 
 586      00
 587 022a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 587      00000000 
ARM GAS  /tmp/ccK9mPCc.s 			page 40


 587      00000000 
 587      00
 588 0237 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 588      00000000 
 588      00000000 
 588      00
 589 0244 00000380 		.ascii	"\000\000\003\200\003\200\003\200\000\000\000\000\000"
 589      03800380 
 589      00000000 
 589      00
 590 0251 00000000 		.ascii	"\000\000\000\000\000\000\000\000`\000`\000\300\000\300"
 590      00000000 
 590      60006000 
 590      C000C0
 591 0260 00C00180 		.ascii	"\000\300\001\200\001\200\003\000\003\000\006\000\006"
 591      01800300 
 591      03000600 
 591      06
 592 026d 000C000C 		.ascii	"\000\014\000\014\000\014\000\030\000\030\000\000\000"
 592      000C0018 
 592      00180000 
 592      00
 593 027a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\017\200\037\300\030"
 593      00000000 
 593      0F801FC0 
 593      18
 594 0287 C0306030 		.ascii	"\3000`0`0`0`0`0`0`\030\300\037\300\017\200\000\000\000"
 594      60306030 
 594      60306030 
 594      60306018 
 594      C01FC00F 
 595 029f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\003\000"
 595      00000000 
 595      00000003 
 595      00
 596 02ac 1F001F00 		.ascii	"\037\000\037\000\003\000\003\000\003\000\003\000\003"
 596      03000300 
 596      03000300 
 596      03
 597 02b9 00030003 		.ascii	"\000\003\000\003\000\003\000\037\340\037\340\000\000"
 597      0003001F 
 597      E01FE000 
 597      00
 598 02c6 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\017"
 598      00000000 
 598      00000000 
 598      0F
 599 02d3 801FC038 		.ascii	"\200\037\3008\3400`\000`\000\300\001\200\003\000\006"
 599      E0306000 
 599      6000C001 
 599      80030006 
 600 02e3 000C0018 		.ascii	"\000\014\000\030\000?\340?\340\000\000\000\000\000\000"
 600      003FE03F 
 600      E0000000 
 600      000000
 601 02f2 00000000 		.ascii	"\000\000\000\000\000\000\000\000\017\200?\3000\340\000"
 601      00000000 
ARM GAS  /tmp/ccK9mPCc.s 			page 41


 601      0F803FC0 
 601      30E000
 602 0301 6000E007 		.ascii	"`\000\340\007\300\007\300\000\340\000`\000``\340\177"
 602      C007C000 
 602      E0006000 
 602      6060E07F 
 603 0311 C03F8000 		.ascii	"\300?\200\000\000\000\000\000\000\000\000\000\000\000"
 603      00000000 
 603      00000000 
 603      0000
 604 031f 00000001 		.ascii	"\000\000\000\001\300\003\300\003\300\006\300\014\300"
 604      C003C003 
 604      C006C00C 
 604      C0
 605 032c 0CC018C0 		.ascii	"\014\300\030\3000\300?\340?\340\000\300\003\340\003"
 605      30C03FE0 
 605      3FE000C0 
 605      03E003
 606 033b E0000000 		.ascii	"\340\000\000\000\000\000\000\000\000\000\000\000\000"
 606      00000000 
 606      00000000 
 606      00
 607 0348 00001FC0 		.ascii	"\000\000\037\300\037\300\030\000\030\000\037\200\037"
 607      1FC01800 
 607      18001F80 
 607      1F
 608 0355 C018E000 		.ascii	"\300\030\340\000`\000`\000`0\340?\300\037\200\000\000"
 608      60006000 
 608      6030E03F 
 608      C01F8000 
 608      00
 609 0366 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\003"
 609      00000000 
 609      00000000 
 609      03
 610 0373 E00FE01E 		.ascii	"\340\017\340\036\000\030\0008\0007\200?\3008\3400`0"
 610      00180038 
 610      0037803F 
 610      C038E030 
 610      6030
 611 0385 6018E01F 		.ascii	"`\030\340\037\300\007\200\000\000\000\000\000\000\000"
 611      C0078000 
 611      00000000 
 611      0000
 612 0393 00000000 		.ascii	"\000\000\000\000\000\000\000?\340?\3400`\000`\000\300"
 612      0000003F 
 612      E03FE030 
 612      60006000 
 612      C0
 613 03a4 00C000C0 		.ascii	"\000\300\000\300\001\200\001\200\001\200\003\000\003"
 613      01800180 
 613      01800300 
 613      03
 614 03b1 00030000 		.ascii	"\000\003\000\000\000\000\000\000\000\000\000\000\000"
 614      00000000 
 614      00000000 
 614      00
ARM GAS  /tmp/ccK9mPCc.s 			page 42


 615 03be 00000000 		.ascii	"\000\000\000\000\017\200\037\3008\3400`8\340\037\300"
 615      0F801FC0 
 615      38E03060 
 615      38E01FC0 
 616 03ce 1FC038E0 		.ascii	"\037\3008\3400`0`8\340\037\300\017\200\000\000\000\000"
 616      30603060 
 616      38E01FC0 
 616      0F800000 
 616      0000
 617 03e0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\017\000\037"
 617      00000000 
 617      00000F00 
 617      1F
 618 03ed C038C030 		.ascii	"\3008\3000`0`8\340\037\340\017`\000\340\000\300\003"
 618      60306038 
 618      E01FE00F 
 618      6000E000 
 618      C003
 619 03ff C03F803E 		.ascii	"\300?\200>\000\000\000\000\000\000\000\000\000\000\000"
 619      00000000 
 619      00000000 
 619      000000
 620 040e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\003"
 620      00000000 
 620      00000000 
 620      03
 621 041b 80038003 		.ascii	"\200\003\200\003\200\000\000\000\000\000\000\003\200"
 621      80000000 
 621      00000003 
 621      80
 622 0428 03800380 		.ascii	"\003\200\003\200\000\000\000\000\000\000\000\000\000"
 622      00000000 
 622      00000000 
 622      00
 623 0435 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 623      00000000 
 623      00000000 
 623      00
 624 0442 01C001C0 		.ascii	"\001\300\001\300\001\300\000\000\000\000\000\000\003"
 624      01C00000 
 624      00000000 
 624      03
 625 044f 80030006 		.ascii	"\200\003\000\006\000\006\000\004\000\000\000\000\000"
 625      00060004 
 625      00000000 
 625      00
 626 045c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\0000\000\360"
 626      00000000 
 626      00000030 
 626      00F0
 627 046a 03C00700 		.ascii	"\003\300\007\000\034\000x\000\034\000\007\000\003\300"
 627      1C007800 
 627      1C000700 
 627      03C0
 628 0478 00F00030 		.ascii	"\000\360\0000\000\000\000\000\000\000\000\000\000\000"
 628      00000000 
 628      00000000 
ARM GAS  /tmp/ccK9mPCc.s 			page 43


 628      0000
 629 0486 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\177"
 629      00000000 
 629      00000000 
 629      7F
 630 0493 F07FF000 		.ascii	"\360\177\360\000\000\000\000\177\360\177\360\000\000"
 630      0000007F 
 630      F07FF000 
 630      00
 631 04a0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 631      00000000 
 631      00000000 
 631      00
 632 04ad 00000000 		.ascii	"\000\000\000\000\000\000\000\000\0000\000<\000\017\000"
 632      00000000 
 632      0030003C 
 632      000F00
 633 04bc 038000E0 		.ascii	"\003\200\000\340\000x\000\340\003\200\017\000<\0000"
 633      007800E0 
 633      03800F00 
 633      3C0030
 634 04cb 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 634      00000000 
 634      00000000 
 634      00
 635 04d8 00000000 		.ascii	"\000\000\000\000\017\200\037\300\030`\030`\000`\001"
 635      0F801FC0 
 635      18601860 
 635      006001
 636 04e7 C0038003 		.ascii	"\300\003\200\003\000\000\000\000\000\007\000\007\000"
 636      00000000 
 636      00070007 
 636      00
 637 04f4 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 637      00000000 
 637      00000000 
 637      00
 638 0501 0003800C 		.ascii	"\000\003\200\014\200\010@\020@\020@\021\300\022@\022"
 638      80084010 
 638      40104011 
 638      C0124012 
 639 0511 40124011 		.ascii	"@\022@\021\300\020\000\010\000\010@\007\200\000\000"
 639      C0100008 
 639      00084007 
 639      800000
 640 0520 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\037"
 640      00000000 
 640      00000000 
 640      1F
 641 052d 801F8003 		.ascii	"\200\037\200\003\200\006\300\006\300\014\300\014`\037"
 641      8006C006 
 641      C00CC00C 
 641      601F
 642 053b E01FE030 		.ascii	"\340\037\34000xxxx\000\000\000\000\000\000\000\000\000"
 642      30787878 
 642      78000000 
 642      00000000 
ARM GAS  /tmp/ccK9mPCc.s 			page 44


 642      0000
 643 054d 00000000 		.ascii	"\000\000\000\000\000\000\000?\200?\300\030`\030`\030"
 643      0000003F 
 643      803FC018 
 643      60186018 
 644 055d E01FC01F 		.ascii	"\340\037\300\037\340\030p\0300\0300?\360?\340\000\000"
 644      E0187018 
 644      3018303F 
 644      F03FE000 
 644      00
 645 056e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 645      00000000 
 645      00000000 
 645      00
 646 057b 0007B00F 		.ascii	"\000\007\260\017\360\034p800\0000\0000\0000\00080\034"
 646      F01C7038 
 646      30300030 
 646      00300030 
 646      0038301C 
 647 058f 700FE007 		.ascii	"p\017\340\007\300\000\000\000\000\000\000\000\000\000"
 647      C0000000 
 647      00000000 
 647      0000
 648 059d 00000000 		.ascii	"\000\000\000\000\000\000\000\177\200\177\3000\3400p"
 648      0000007F 
 648      807FC030 
 648      E03070
 649 05ac 30303030 		.ascii	"000000000p0\340\177\300\177\200\000\000\000\000\000"
 649      30303030 
 649      307030E0 
 649      7FC07F80 
 649      00000000 
 650 05c1 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000?\360?\360"
 650      00000000 
 650      0000003F 
 650      F03FF0
 651 05d0 18301830 		.ascii	"\0300\0300\031\200\037\200\037\200\031\200\0300\030"
 651      19801F80 
 651      1F801980 
 651      183018
 652 05df 303FF03F 		.ascii	"0?\360?\360\000\000\000\000\000\000\000\000\000\000"
 652      F0000000 
 652      00000000 
 652      000000
 653 05ee 00000000 		.ascii	"\000\000\000\000\000\000?\360?\360\0300\0300\031\200"
 653      00003FF0 
 653      3FF01830 
 653      18301980 
 654 05fe 1F801F80 		.ascii	"\037\200\037\200\031\200\030\000\030\000?\000?\000\000"
 654      19801800 
 654      18003F00 
 654      3F0000
 655 060d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 655      00000000 
 655      00000000 
 655      00
 656 061a 000007B0 		.ascii	"\000\000\007\260\037\360\030p000\0000\0001\3701\370"
ARM GAS  /tmp/ccK9mPCc.s 			page 45


 656      1FF01870 
 656      30303000 
 656      300031F8 
 656      31F8
 657 062c 30301830 		.ascii	"00\0300\037\360\007\300\000\000\000\000\000\000\000"
 657      1FF007C0 
 657      00000000 
 657      000000
 658 063b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000<\360<\360\030`"
 658      00000000 
 658      003CF03C 
 658      F01860
 659 064a 18601860 		.ascii	"\030`\030`\037\340\037\340\030`\030`\030`<\360<\360"
 659      1FE01FE0 
 659      18601860 
 659      18603CF0 
 659      3CF0
 660 065c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 660      00000000 
 660      00000000 
 660      00
 661 0669 0000001F 		.ascii	"\000\000\000\037\340\037\340\003\000\003\000\003\000"
 661      E01FE003 
 661      00030003 
 661      00
 662 0676 03000300 		.ascii	"\003\000\003\000\003\000\003\000\003\000\037\340\037"
 662      03000300 
 662      03001FE0 
 662      1F
 663 0683 E0000000 		.ascii	"\340\000\000\000\000\000\000\000\000\000\000\000\000"
 663      00000000 
 663      00000000 
 663      00
 664 0690 00000000 		.ascii	"\000\000\000\000\003\370\003\370\000`\000`\000`\000"
 664      03F803F8 
 664      00600060 
 664      006000
 665 069f 60306030 		.ascii	"`0`0`0`0\340?\300\017\200\000\000\000\000\000\000\000"
 665      60306030 
 665      E03FC00F 
 665      80000000 
 665      00000000 
 666 06b3 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000>\370>\370\030\340"
 666      00000000 
 666      003EF83E 
 666      F818E0
 667 06c2 19801B00 		.ascii	"\031\200\033\000\037\000\035\200\030\300\030\300\030"
 667      1F001D80 
 667      18C018C0 
 667      18
 668 06cf 603E783E 		.ascii	"`>x>8\000\000\000\000\000\000\000\000\000\000\000\000"
 668      38000000 
 668      00000000 
 668      00000000 
 668      00
 669 06e0 00000000 		.ascii	"\000\000\000\000?\000?\000\014\000\014\000\014\000\014"
 669      3F003F00 
ARM GAS  /tmp/ccK9mPCc.s 			page 46


 669      0C000C00 
 669      0C000C
 670 06ef 000C000C 		.ascii	"\000\014\000\0140\0140\0140?\360?\360\000\000\000\000"
 670      300C300C 
 670      303FF03F 
 670      F0000000 
 670      00
 671 0700 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000xxx"
 671      00000000 
 671      00000000 
 671      787878
 672 070f 7838703C 		.ascii	"x8p<\3604\2607\2607\260303000|\370|\370\000\000\000"
 672      F034B037 
 672      B037B033 
 672      30333030 
 672      307CF87C 
 673 0727 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 673      00000000 
 673      00000000 
 673      00
 674 0734 39F03DF0 		.ascii	"9\360=\360\034`\036`\036`\033`\033`\031\340\031\340"
 674      1C601E60 
 674      1E601B60 
 674      1B6019E0 
 674      19E0
 675 0746 18E03EE0 		.ascii	"\030\340>\340>`\000\000\000\000\000\000\000\000\000"
 675      3E600000 
 675      00000000 
 675      000000
 676 0755 00000000 		.ascii	"\000\000\000\000\000\000\000\007\200\017\300\034\340"
 676      00000007 
 676      800FC01C 
 676      E0
 677 0762 38703030 		.ascii	"8p000000008p\034\340\017\300\007\200\000\000\000\000"
 677      30303030 
 677      30303870 
 677      1CE00FC0 
 677      07800000 
 678 0778 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000?\300"
 678      00000000 
 678      00000000 
 678      3FC0
 679 0786 3FE01870 		.ascii	"?\340\030p\0300\0300\030p\037\340\037\300\030\000\030"
 679      18301830 
 679      18701FE0 
 679      1FC01800 
 679      18
 680 0797 003F003F 		.ascii	"\000?\000?\000\000\000\000\000\000\000\000\000\000\000"
 680      00000000 
 680      00000000 
 680      000000
 681 07a6 00000000 		.ascii	"\000\000\000\000\000\000\007\200\017\300\034\3408p0"
 681      00000780 
 681      0FC01CE0 
 681      387030
 682 07b5 30303030 		.ascii	"00000008p\034\340\017\300\007\200\007\260\017\360\014"
 682      30303038 
ARM GAS  /tmp/ccK9mPCc.s 			page 47


 682      701CE00F 
 682      C0078007 
 682      B00FF00C 
 683 07c9 E0000000 		.ascii	"\340\000\000\000\000\000\000"
 683      000000
 684 07d0 00000000 		.ascii	"\000\000\000\000?\300?\340\030p\0300\030p\037\340\037"
 684      3FC03FE0 
 684      18701830 
 684      18701FE0 
 684      1F
 685 07e1 C018E018 		.ascii	"\300\030\340\030`\030p>8>\030\000\000\000\000\000\000"
 685      6018703E 
 685      383E1800 
 685      00000000 
 685      00
 686 07f2 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\017\260\037"
 686      00000000 
 686      00000FB0 
 686      1F
 687 07ff F0387030 		.ascii	"\3608p008\000\037\200\007\340\000p008p?\3407\300\000"
 687      3038001F 
 687      8007E000 
 687      70303038 
 687      703FE037 
 688 0815 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 688      00000000 
 688      00000000 
 688      00
 689 0822 00003FF0 		.ascii	"\000\000?\360?\360303030\003\000\003\000\003\000\003"
 689      3FF03330 
 689      33303330 
 689      03000300 
 689      030003
 690 0835 0003000F 		.ascii	"\000\003\000\017\300\017\300\000\000\000\000\000\000"
 690      C00FC000 
 690      00000000 
 690      00
 691 0842 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000<\360<\360\030"
 691      00000000 
 691      00003CF0 
 691      3CF018
 692 0851 60186018 		.ascii	"`\030`\030`\030`\030`\030`\030`\034\340\017\300\007"
 692      60186018 
 692      60186018 
 692      601CE00F 
 692      C007
 693 0863 80000000 		.ascii	"\200\000\000\000\000\000\000\000\000\000\000\000\000"
 693      00000000 
 693      00000000 
 693      00
 694 0870 00000000 		.ascii	"\000\000\000\000x\360x\3600`0`\030\300\030\300\015\200"
 694      78F078F0 
 694      30603060 
 694      18C018C0 
 694      0D80
 695 0882 0D800D80 		.ascii	"\015\200\015\200\007\000\007\000\007\000\000\000\000"
 695      07000700 
ARM GAS  /tmp/ccK9mPCc.s 			page 48


 695      07000000 
 695      00
 696 088f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 696      00000000 
 696      00000000 
 696      00
 697 089c 7C7C7C7C 		.ascii	"||||0\0303\2303\2303\2306\330\026\320\034p\034p\034"
 697      30183398 
 697      33983398 
 697      36D816D0 
 697      1C701C70 
 698 08b1 70183000 		.ascii	"p\0300\000\000\000\000\000\000\000\000\000\000\000\000"
 698      00000000 
 698      00000000 
 698      000000
 699 08c0 00000000 		.ascii	"\000\000\000\000x\360x\3600`\030\300\015\200\007\000"
 699      78F078F0 
 699      306018C0 
 699      0D800700 
 700 08d0 07000D80 		.ascii	"\007\000\015\200\030\3000`x\360x\360\000\000\000\000"
 700      18C03060 
 700      78F078F0 
 700      00000000 
 701 08e0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000<\360"
 701      00000000 
 701      00000000 
 701      3CF0
 702 08ee 3CF01860 		.ascii	"<\360\030`\014\300\007\200\007\200\003\000\003\000\003"
 702      0CC00780 
 702      07800300 
 702      030003
 703 08fd 0003000F 		.ascii	"\000\003\000\017\300\017\300\000\000\000\000\000\000"
 703      C00FC000 
 703      00000000 
 703      00
 704 090a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\037\340\037"
 704      00000000 
 704      00001FE0 
 704      1F
 705 0917 E0186018 		.ascii	"\340\030`\030\300\001\200\003\000\003\000\006\000\014"
 705      C0018003 
 705      00030006 
 705      000C
 706 0925 6018601F 		.ascii	"`\030`\037\340\037\340\000\000\000\000\000\000\000\000"
 706      E01FE000 
 706      00000000 
 706      000000
 707 0934 00000000 		.ascii	"\000\000\000\000\000\000\003\300\003\300\003\000\003"
 707      000003C0 
 707      03C00300 
 707      03
 708 0941 00030003 		.ascii	"\000\003\000\003\000\003\000\003\000\003\000\003\000"
 708      00030003 
 708      00030003 
 708      00
 709 094e 03000300 		.ascii	"\003\000\003\000\003\000\003\000\003\300\003\300\000"
 709      03000300 
ARM GAS  /tmp/ccK9mPCc.s 			page 49


 709      03C003C0 
 709      00
 710 095b 00000000 		.ascii	"\000\000\000\000\000\030\000\030\000\014\000\014\000"
 710      00180018 
 710      000C000C 
 710      00
 711 0968 0C000600 		.ascii	"\014\000\006\000\006\000\003\000\003\000\001\200\001"
 711      06000300 
 711      03000180 
 711      01
 712 0975 8000C000 		.ascii	"\200\000\300\000\300\000\300\000`\000`\000\000\000\000"
 712      C000C000 
 712      60006000 
 712      000000
 713 0984 00000000 		.ascii	"\000\000\000\000\000\000\017\000\017\000\003\000\003"
 713      00000F00 
 713      0F000300 
 713      03
 714 0991 00030003 		.ascii	"\000\003\000\003\000\003\000\003\000\003\000\003\000"
 714      00030003 
 714      00030003 
 714      00
 715 099e 03000300 		.ascii	"\003\000\003\000\003\000\003\000\017\000\017\000\000"
 715      03000300 
 715      0F000F00 
 715      00
 716 09ab 00000000 		.ascii	"\000\000\000\000\000\000\000\002\000\007\000\015\200"
 716      00000002 
 716      0007000D 
 716      80
 717 09b8 18C03060 		.ascii	"\030\3000`  \000\000\000\000\000\000\000\000\000\000"
 717      20200000 
 717      00000000 
 717      00000000 
 718 09c8 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 718      00000000 
 718      00000000 
 718      00
 719 09d5 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 719      00000000 
 719      00000000 
 719      00
 720 09e2 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 720      00000000 
 720      00000000 
 720      00
 721 09ef 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 721      00000000 
 721      00000000 
 721      00
 722 09fc FFFCFFFC 		.ascii	"\377\374\377\374\000\000\004\000\003\000\000\200\000"
 722      00000400 
 722      03000080 
 722      00
 723 0a09 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 723      00000000 
 723      00000000 
ARM GAS  /tmp/ccK9mPCc.s 			page 50


 723      00
 724 0a16 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 724      00000000 
 724      00000000 
 724      00
 725 0a23 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 725      00000000 
 725      00000000 
 725      00
 726 0a30 00000FC0 		.ascii	"\000\000\017\300\037\340\000`\017\340\037\3408`0\340"
 726      1FE00060 
 726      0FE01FE0 
 726      386030E0 
 727 0a40 3FF01F70 		.ascii	"?\360\037p\000\000\000\000\000\000\000\000\000\000\000"
 727      00000000 
 727      00000000 
 727      000000
 728 0a4f 00000070 		.ascii	"\000\000\000p\000p\0000\0000\0007\200?\3408`0000008"
 728      00700030 
 728      00300037 
 728      803FE038 
 728      60303030 
 729 0a67 607FE077 		.ascii	"`\177\340w\200\000\000\000\000\000\000\000\000\000\000"
 729      80000000 
 729      00000000 
 729      000000
 730 0a76 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\007"
 730      00000000 
 730      00000000 
 730      07
 731 0a83 B01FF018 		.ascii	"\260\037\360\0300000\0000\00080\037\360\017\300\000"
 731      30303030 
 731      00300038 
 731      301FF00F 
 731      C000
 732 0a95 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 732      00000000 
 732      00000000 
 732      00
 733 0aa2 00700070 		.ascii	"\000p\000p\0000\0000\007\260\037\360\030p0000008p\037"
 733      00300030 
 733      07B01FF0 
 733      18703030 
 733      30303030 
 734 0ab9 F807B800 		.ascii	"\370\007\270\000\000\000\000\000\000\000\000\000\000"
 734      00000000 
 734      00000000 
 734      00
 735 0ac6 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\007"
 735      00000000 
 735      00000000 
 735      07
 736 0ad3 801FE018 		.ascii	"\200\037\340\030`?\360?\3600\000\0300\037\360\007\300"
 736      603FF03F 
 736      F0300018 
 736      301FF007 
 736      C0
ARM GAS  /tmp/ccK9mPCc.s 			page 51


 737 0ae4 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 737      00000000 
 737      00000000 
 737      00
 738 0af1 0003F007 		.ascii	"\000\003\360\007\360\006\000\006\000\037\340\037\340"
 738      F0060006 
 738      001FE01F 
 738      E0
 739 0afe 06000600 		.ascii	"\006\000\006\000\006\000\006\000\006\000\037\340\037"
 739      06000600 
 739      06001FE0 
 739      1F
 740 0b0b E0000000 		.ascii	"\340\000\000\000\000\000\000\000\000\000\000\000\000"
 740      00000000 
 740      00000000 
 740      00
 741 0b18 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\007\270\037"
 741      00000000 
 741      000007B8 
 741      1F
 742 0b25 F8187030 		.ascii	"\370\030p000000\030p\037\360\007\260\0000\000p\017\340"
 742      30303030 
 742      3018701F 
 742      F007B000 
 742      3000700F 
 743 0b3a 0FC00000 		.ascii	"\017\300\000\000\000\000\000\0008\0008\000\030\000\030"
 743      00000000 
 743      38003800 
 743      180018
 744 0b49 001BC01F 		.ascii	"\000\033\300\037\340\034`\030`\030`\030`\030`<\360<"
 744      E01C6018 
 744      60186018 
 744      6018603C 
 744      F03C
 745 0b5b F0000000 		.ascii	"\360\000\000\000\000\000\000\000\000\000\000\000\000"
 745      00000000 
 745      00000000 
 745      00
 746 0b68 00000300 		.ascii	"\000\000\003\000\003\000\000\000\000\000\037\000\037"
 746      03000000 
 746      00001F00 
 746      1F
 747 0b75 00030003 		.ascii	"\000\003\000\003\000\003\000\003\000\003\000\037\340"
 747      00030003 
 747      0003001F 
 747      E0
 748 0b82 1FE00000 		.ascii	"\037\340\000\000\000\000\000\000\000\000\000\000\000"
 748      00000000 
 748      00000000 
 748      00
 749 0b8f 00000003 		.ascii	"\000\000\000\003\000\003\000\000\000\000\000\037\300"
 749      00030000 
 749      0000001F 
 749      C0
 750 0b9c 1FC000C0 		.ascii	"\037\300\000\300\000\300\000\300\000\300\000\300\000"
 750      00C000C0 
 750      00C000C0 
ARM GAS  /tmp/ccK9mPCc.s 			page 52


 750      00
 751 0ba9 C000C000 		.ascii	"\300\000\300\000\300\001\300?\200?\000\000\000\000\000"
 751      C001C03F 
 751      803F0000 
 751      000000
 752 0bb8 00003800 		.ascii	"\000\0008\0008\000\030\000\030\000\033\340\033\340\033"
 752      38001800 
 752      18001BE0 
 752      1BE01B
 753 0bc7 001E001E 		.ascii	"\000\036\000\036\000\033\000\031\2009\3609\360\000\000"
 753      001B0019 
 753      8039F039 
 753      F00000
 754 0bd6 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\037"
 754      00000000 
 754      00000000 
 754      1F
 755 0be3 001F0003 		.ascii	"\000\037\000\003\000\003\000\003\000\003\000\003\000"
 755      00030003 
 755      00030003 
 755      00
 756 0bf0 03000300 		.ascii	"\003\000\003\000\003\000\003\000\037\340\037\340\000"
 756      03000300 
 756      1FE01FE0 
 756      00
 757 0bfd 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 757      00000000 
 757      00000000 
 757      00
 758 0c0a 00000000 		.ascii	"\000\000\000\000\000\000\000\000~\340\177\360303030"
 758      00000000 
 758      7EE07FF0 
 758      33303330 
 758      3330
 759 0c1c 33303330 		.ascii	"3030{\270{\270\000\000\000\000\000\000\000\000\000\000"
 759      7BB87BB8 
 759      00000000 
 759      00000000 
 759      0000
 760 0c2e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000;\300"
 760      00000000 
 760      00000000 
 760      3BC0
 761 0c3c 3FE01C60 		.ascii	"?\340\034`\030`\030`\030`\030`<\360<\360\000\000\000"
 761      18601860 
 761      18601860 
 761      3CF03CF0 
 761      000000
 762 0c4f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 762      00000000 
 762      00000000 
 762      00
 763 0c5c 00000000 		.ascii	"\000\000\000\000\000\000\007\200\037\340\030`000000"
 763      00000780 
 763      1FE01860 
 763      30303030 
 763      3030
ARM GAS  /tmp/ccK9mPCc.s 			page 53


 764 0c6e 18601FE0 		.ascii	"\030`\037\340\007\200\000\000\000\000\000\000\000\000"
 764      07800000 
 764      00000000 
 764      0000
 765 0c7c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 765      00000000 
 765      00000000 
 765      00
 766 0c89 0077807F 		.ascii	"\000w\200\177\3408`0000008`?\3407\2000\0000\000|\000"
 766      E0386030 
 766      30303030 
 766      3038603F 
 766      E0378030 
 767 0ca2 7C000000 		.ascii	"|\000\000\000\000\000\000\000\000\000\000\000\000\000"
 767      00000000 
 767      00000000 
 767      0000
 768 0cb0 000007B8 		.ascii	"\000\000\007\270\037\370\030p000000\030p\037\360\007"
 768      1FF81870 
 768      30303030 
 768      30301870 
 768      1FF007
 769 0cc3 B0003000 		.ascii	"\260\0000\0000\000\370\000\370\000\000\000\000\000\000"
 769      3000F800 
 769      F8000000 
 769      000000
 770 0cd2 00000000 		.ascii	"\000\000\000\000\000\000\000\000<\340=\360\0170\016"
 770      00000000 
 770      3CE03DF0 
 770      0F300E
 771 0ce1 000C000C 		.ascii	"\000\014\000\014\000\014\000?\300?\300\000\000\000\000"
 771      000C003F 
 771      C03FC000 
 771      000000
 772 0cf0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 772      00000000 
 772      00000000 
 772      00
 773 0cfd 00000000 		.ascii	"\000\000\000\000\000\007\340\037\340\030`\036\000\017"
 773      0007E01F 
 773      E018601E 
 773      000F
 774 0d0b C001E018 		.ascii	"\300\001\340\030`\037\340\037\200\000\000\000\000\000"
 774      601FE01F 
 774      80000000 
 774      0000
 775 0d19 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\014\000"
 775      00000000 
 775      0000000C 
 775      00
 776 0d26 0C000C00 		.ascii	"\014\000\014\000?\340?\340\014\000\014\000\014\000\014"
 776      3FE03FE0 
 776      0C000C00 
 776      0C000C
 777 0d35 000C300F 		.ascii	"\000\0140\017\360\007\300\000\000\000\000\000\000\000"
 777      F007C000 
 777      00000000 
ARM GAS  /tmp/ccK9mPCc.s 			page 54


 777      0000
 778 0d43 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 778      00000000 
 778      00000000 
 778      00
 779 0d50 000038E0 		.ascii	"\000\0008\3408\340\030`\030`\030`\030`\030\340\037\360"
 779      38E01860 
 779      18601860 
 779      186018E0 
 779      1FF0
 780 0d62 0F700000 		.ascii	"\017p\000\000\000\000\000\000\000\000\000\000\000\000"
 780      00000000 
 780      00000000 
 780      0000
 781 0d70 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000x\360x\3600"
 781      00000000 
 781      000078F0 
 781      78F030
 782 0d7f 6018C018 		.ascii	"`\030\300\030\300\015\200\015\200\007\000\007\000\000"
 782      C00D800D 
 782      80070007 
 782      0000
 783 0d8d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 783      00000000 
 783      00000000 
 783      00
 784 0d9a 00000000 		.ascii	"\000\000\000\000\000\000\000\000x\360x\3602`2`7\340"
 784      00000000 
 784      78F078F0 
 784      32603260 
 784      37E0
 785 0dac 1DC01DC0 		.ascii	"\035\300\035\300\030\300\030\300\000\000\000\000\000"
 785      18C018C0 
 785      00000000 
 785      00
 786 0db9 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 786      00000000 
 786      00000000 
 786      00
 787 0dc6 00000000 		.ascii	"\000\000\000\000<\360<\360\014\300\007\200\003\000\007"
 787      3CF03CF0 
 787      0CC00780 
 787      030007
 788 0dd5 800CC03C 		.ascii	"\200\014\300<\360<\360\000\000\000\000\000\000\000\000"
 788      F03CF000 
 788      00000000 
 788      000000
 789 0de4 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 789      00000000 
 789      00000000 
 789      00
 790 0df1 0078F078 		.ascii	"\000x\360x\3600`\030\300\030\300\015\200\017\200\007"
 790      F0306018 
 790      C018C00D 
 790      800F8007 
 791 0e01 00060006 		.ascii	"\000\006\000\006\000\014\000\177\000\177\000\000\000"
 791      000C007F 
ARM GAS  /tmp/ccK9mPCc.s 			page 55


 791      007F0000 
 791      00
 792 0e0e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\037"
 792      00000000 
 792      00000000 
 792      1F
 793 0e1b E01FE018 		.ascii	"\340\037\340\030\300\001\200\003\000\006\000\014`\037"
 793      C0018003 
 793      0006000C 
 793      601F
 794 0e29 E01FE000 		.ascii	"\340\037\340\000\000\000\000\000\000\000\000\000\000"
 794      00000000 
 794      00000000 
 794      00
 795 0e36 00000000 		.ascii	"\000\000\000\000\001\300\003\300\003\000\003\000\003"
 795      01C003C0 
 795      03000300 
 795      03
 796 0e43 00030003 		.ascii	"\000\003\000\003\000\007\000\016\000\007\000\003\000"
 796      0007000E 
 796      00070003 
 796      00
 797 0e50 03000300 		.ascii	"\003\000\003\000\003\000\003\300\001\300\000\000\000"
 797      030003C0 
 797      01C00000 
 797      00
 798 0e5d 00000000 		.ascii	"\000\000\000\000\000\003\000\003\000\003\000\003\000"
 798      00030003 
 798      00030003 
 798      00
 799 0e6a 03000300 		.ascii	"\003\000\003\000\003\000\003\000\003\000\003\000\003"
 799      03000300 
 799      03000300 
 799      03
 800 0e77 00030003 		.ascii	"\000\003\000\003\000\003\000\003\000\003\000\000\000"
 800      00030003 
 800      00030000 
 800      00
 801 0e84 00000000 		.ascii	"\000\000\000\000\000\000\034\000\036\000\006\000\006"
 801      00001C00 
 801      1E000600 
 801      06
 802 0e91 00060006 		.ascii	"\000\006\000\006\000\006\000\007\000\003\200\007\000"
 802      00060007 
 802      00038007 
 802      00
 803 0e9e 06000600 		.ascii	"\006\000\006\000\006\000\006\000\036\000\034\000\000"
 803      06000600 
 803      1E001C00 
 803      00
 804 0eab 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 804      00000000 
 804      00000000 
 804      00
 805 0eb8 00000000 		.ascii	"\000\000\000\000\016\000?03\360\001\340\000\000\000"
 805      0E003F30 
 805      33F001E0 
ARM GAS  /tmp/ccK9mPCc.s 			page 56


 805      000000
 806 0ec7 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 806      00000000 
 806      00000000 
 806      00
 807 0ed4 00000000 		.ascii	"\000\000\000\000"
 808              		.global	Font20
 809              		.section	.data.Font20,"aw"
 810              		.align	2
 813              	Font20:
 814 0000 00000000 		.word	Font20_Table
 815 0004 0E00     		.short	14
 816 0006 1400     		.short	20
 817              		.global	Font16_Table
 818              		.section	.rodata.Font16_Table,"a"
 819              		.align	2
 822              	Font16_Table:
 823 0000 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 823      00000000 
 823      00000000 
 823      00
 824 000d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 824      00000000 
 824      00000000 
 824      00
 825 001a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\014\000\014\000\014"
 825      00000000 
 825      0C000C00 
 825      0C
 826 0027 000C000C 		.ascii	"\000\014\000\014\000\014\000\014\000\014\000\000\000"
 826      000C000C 
 826      000C0000 
 826      00
 827 0034 0C000000 		.ascii	"\014\000\000\000\000\000\000\000\000\000\000\000\000"
 827      00000000 
 827      00000000 
 827      00
 828 0041 0000001D 		.ascii	"\000\000\000\035\300\035\300\010\200\010\200\010\200"
 828      C01DC008 
 828      80088008 
 828      80
 829 004e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 829      00000000 
 829      00000000 
 829      00
 830 005b 00000000 		.ascii	"\000\000\000\000\000\000\000\015\200\015\200\015\200"
 830      0000000D 
 830      800D800D 
 830      80
 831 0068 0D803FC0 		.ascii	"\015\200?\300\033\000?\300\033\000\033\000\033\000\033"
 831      1B003FC0 
 831      1B001B00 
 831      1B001B
 832 0077 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\004\000\037\200"
 832      00000000 
 832      0004001F 
 832      80
ARM GAS  /tmp/ccK9mPCc.s 			page 57


 833 0084 31803180 		.ascii	"1\2001\2008\000\036\000\017\000\003\2001\2001\200?\000"
 833      38001E00 
 833      0F000380 
 833      31803180 
 833      3F00
 834 0096 04000400 		.ascii	"\004\000\004\000\000\000\000\000\000\000\000\000\030"
 834      00000000 
 834      00000000 
 834      18
 835 00a3 00240024 		.ascii	"\000$\000$\000\030\300\007\200\036\0001\200\002@\002"
 835      0018C007 
 835      801E0031 
 835      80024002 
 836 00b3 40018000 		.ascii	"@\001\200\000\000\000\000\000\000\000\000\000\000\000"
 836      00000000 
 836      00000000 
 836      0000
 837 00c1 0000000F 		.ascii	"\000\000\000\017\000\030\000\030\000\030\000\014\000"
 837      00180018 
 837      0018000C 
 837      00
 838 00ce 1D803700 		.ascii	"\035\2007\0003\000\035\200\000\000\000\000\000\000\000"
 838      33001D80 
 838      00000000 
 838      000000
 839 00dd 00000000 		.ascii	"\000\000\000\000\000\000\000\007\000\007\000\002\000"
 839      00000007 
 839      00070002 
 839      00
 840 00ea 02000200 		.ascii	"\002\000\002\000\000\000\000\000\000\000\000\000\000"
 840      00000000 
 840      00000000 
 840      00
 841 00f7 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\003\000"
 841      00000000 
 841      00000003 
 841      00
 842 0104 03000600 		.ascii	"\003\000\006\000\016\000\014\000\014\000\014\000\014"
 842      0E000C00 
 842      0C000C00 
 842      0C
 843 0111 000E0006 		.ascii	"\000\016\000\006\000\003\000\003\000\000\000\000\000"
 843      00030003 
 843      00000000 
 843      00
 844 011e 00000000 		.ascii	"\000\000\000\000\030\000\030\000\014\000\006\000\006"
 844      18001800 
 844      0C000600 
 844      06
 845 012b 00060006 		.ascii	"\000\006\000\006\000\006\000\006\000\014\000\034\000"
 845      00060006 
 845      000C001C 
 845      00
 846 0138 18000000 		.ascii	"\030\000\000\000\000\000\000\000\000\000\006\000\006"
 846      00000000 
 846      00000600 
 846      06
ARM GAS  /tmp/ccK9mPCc.s 			page 58


 847 0145 003FC03F 		.ascii	"\000?\300?\300\017\000\037\200\031\200\000\000\000\000"
 847      C00F001F 
 847      80198000 
 847      000000
 848 0154 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 848      00000000 
 848      00000000 
 848      00
 849 0161 00000000 		.ascii	"\000\000\000\000\000\004\000\004\000\004\000?\200\004"
 849      00040004 
 849      0004003F 
 849      8004
 850 016f 00040004 		.ascii	"\000\004\000\004\000\000\000\000\000\000\000\000\000"
 850      00000000 
 850      00000000 
 850      00
 851 017c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 851      00000000 
 851      00000000 
 851      00
 852 0189 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\006\000\004\000"
 852      00000000 
 852      00060004 
 852      00
 853 0196 0C000800 		.ascii	"\014\000\010\000\010\000\000\000\000\000\000\000\000"
 853      08000000 
 853      00000000 
 853      00
 854 01a3 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000?\200\000\000\000"
 854      00000000 
 854      003F8000 
 854      0000
 855 01b1 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 855      00000000 
 855      00000000 
 855      00
 856 01be 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 856      00000000 
 856      00000000 
 856      00
 857 01cb 00000000 		.ascii	"\000\000\000\000\000\000\000\014\000\014\000\000\000"
 857      0000000C 
 857      000C0000 
 857      00
 858 01d8 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\300\000\300\001"
 858      00000000 
 858      00C000C0 
 858      01
 859 01e5 80018003 		.ascii	"\200\001\200\003\000\003\000\006\000\014\000\014\000"
 859      00030006 
 859      000C000C 
 859      00
 860 01f2 18001800 		.ascii	"\030\000\030\0000\0000\000\000\000\000\000\000\000\000"
 860      30003000 
 860      00000000 
 860      000000
 861 0201 000E001B 		.ascii	"\000\016\000\033\0001\2001\2001\2001\2001\2001\200\033"
ARM GAS  /tmp/ccK9mPCc.s 			page 59


 861      00318031 
 861      80318031 
 861      80318031 
 861      801B
 862 0213 000E0000 		.ascii	"\000\016\000\000\000\000\000\000\000\000\000\000\000"
 862      00000000 
 862      00000000 
 862      00
 863 0220 00000600 		.ascii	"\000\000\006\000>\000\006\000\006\000\006\000\006\000"
 863      3E000600 
 863      06000600 
 863      0600
 864 022e 06000600 		.ascii	"\006\000\006\000\006\000?\300\000\000\000\000\000\000"
 864      06003FC0 
 864      00000000 
 864      0000
 865 023c 00000000 		.ascii	"\000\000\000\000\000\000\017\000\031\2001\2001\200\003"
 865      00000F00 
 865      19803180 
 865      318003
 866 024b 0006000C 		.ascii	"\000\006\000\014\000\030\0000\000?\200\000\000\000\000"
 866      00180030 
 866      003F8000 
 866      000000
 867 025a 00000000 		.ascii	"\000\000\000\000\000\000\000\000?\000a\200\001\200\003"
 867      00000000 
 867      3F006180 
 867      018003
 868 0269 001F0003 		.ascii	"\000\037\000\003\200\001\200\001\200a\200?\000\000\000"
 868      80018001 
 868      8061803F 
 868      000000
 869 0278 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\007\000\007"
 869      00000000 
 869      00000700 
 869      07
 870 0285 000F000B 		.ascii	"\000\017\000\013\000\033\000\023\0003\000?\200\003\000"
 870      001B0013 
 870      0033003F 
 870      800300
 871 0294 0F800000 		.ascii	"\017\200\000\000\000\000\000\000\000\000\000\000\000"
 871      00000000 
 871      00000000 
 871      00
 872 02a1 001F8018 		.ascii	"\000\037\200\030\000\030\000\030\000\037\000\021\200"
 872      00180018 
 872      001F0011 
 872      80
 873 02ae 01800180 		.ascii	"\001\200\001\200!\200\037\000\000\000\000\000\000\000"
 873      21801F00 
 873      00000000 
 873      0000
 874 02bc 00000000 		.ascii	"\000\000\000\000\000\000\007\200\034\000\030\0000\000"
 874      00000780 
 874      1C001800 
 874      3000
 875 02ca 37003980 		.ascii	"7\0009\2001\2001\200\031\200\017\000\000\000\000\000"
ARM GAS  /tmp/ccK9mPCc.s 			page 60


 875      31803180 
 875      19800F00 
 875      00000000 
 876 02da 00000000 		.ascii	"\000\000\000\000\000\000\000\000\177\000C\000\003\000"
 876      00000000 
 876      7F004300 
 876      0300
 877 02e8 06000600 		.ascii	"\006\000\006\000\006\000\006\000\014\000\014\000\014"
 877      06000600 
 877      0C000C00 
 877      0C
 878 02f5 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 878      00000000 
 878      00000000 
 878      00
 879 0302 1F003180 		.ascii	"\037\0001\2001\2001\200\037\0001\2001\2001\2001\200"
 879      31803180 
 879      1F003180 
 879      31803180 
 879      3180
 880 0314 1F000000 		.ascii	"\037\000\000\000\000\000\000\000\000\000\000\000\000"
 880      00000000 
 880      00000000 
 880      00
 881 0321 001E0033 		.ascii	"\000\036\0003\0001\2001\2003\200\035\200\001\200\003"
 881      00318031 
 881      8033801D 
 881      80018003 
 882 0331 0007003C 		.ascii	"\000\007\000<\000\000\000\000\000\000\000\000\000\000"
 882      00000000 
 882      00000000 
 882      0000
 883 033f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\014\000\014\000"
 883      00000000 
 883      000C000C 
 883      00
 884 034c 00000000 		.ascii	"\000\000\000\000\000\000\014\000\014\000\000\000\000"
 884      00000C00 
 884      0C000000 
 884      00
 885 0359 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 885      00000000 
 885      00000000 
 885      00
 886 0366 00000300 		.ascii	"\000\000\003\000\003\000\000\000\000\000\000\000\006"
 886      03000000 
 886      00000000 
 886      06
 887 0373 00040008 		.ascii	"\000\004\000\010\000\010\000\000\000\000\000\000\000"
 887      00080000 
 887      00000000 
 887      00
 888 0380 00000000 		.ascii	"\000\000\000\000\000\300\003\000\004\000\030\000`\000"
 888      00C00300 
 888      04001800 
 888      6000
 889 038e 18000400 		.ascii	"\030\000\004\000\003\000\000\300\000\000\000\000\000"
ARM GAS  /tmp/ccK9mPCc.s 			page 61


 889      030000C0 
 889      00000000 
 889      00
 890 039b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 890      00000000 
 890      00000000 
 890      00
 891 03a8 00007FC0 		.ascii	"\000\000\177\300\000\000\177\300\000\000\000\000\000"
 891      00007FC0 
 891      00000000 
 891      00
 892 03b5 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 892      00000000 
 892      00000000 
 892      00
 893 03c2 00006000 		.ascii	"\000\000`\000\030\000\004\000\003\000\000\300\003\000"
 893      18000400 
 893      030000C0 
 893      0300
 894 03d0 04001800 		.ascii	"\004\000\030\000`\000\000\000\000\000\000\000\000\000"
 894      60000000 
 894      00000000 
 894      0000
 895 03de 00000000 		.ascii	"\000\000\000\000\000\000\037\0001\2001\200\001\200\007"
 895      00001F00 
 895      31803180 
 895      018007
 896 03ed 000C000C 		.ascii	"\000\014\000\014\000\000\000\014\000\000\000\000\000"
 896      0000000C 
 896      00000000 
 896      00
 897 03fa 00000000 		.ascii	"\000\000\000\000\000\000\000\000\016\000\021\000!\000"
 897      00000000 
 897      0E001100 
 897      2100
 898 0408 21002700 		.ascii	"!\000'\000)\000)\000'\000 \000\021\000\016\000\000\000"
 898      29002900 
 898      27002000 
 898      11000E00 
 898      0000
 899 041a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000?\000\017\000"
 899      00000000 
 899      00003F00 
 899      0F00
 900 0428 09001980 		.ascii	"\011\000\031\200\031\200\037\2000\3000\300y\340\000"
 900      19801F80 
 900      30C030C0 
 900      79E000
 901 0437 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 901      00000000 
 901      00000000 
 901      00
 902 0444 7F003180 		.ascii	"\177\0001\2001\2001\200?\0001\2001\2001\200\177\000"
 902      31803180 
 902      3F003180 
 902      31803180 
 902      7F00
ARM GAS  /tmp/ccK9mPCc.s 			page 62


 903 0456 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 903      00000000 
 903      00000000 
 903      00
 904 0463 001F4030 		.ascii	"\000\037@0\300`@`\000`\000`\000`@0\200\037\000\000\000"
 904      C0604060 
 904      00600060 
 904      00604030 
 904      801F0000 
 905 0478 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\177"
 905      00000000 
 905      00000000 
 905      7F
 906 0485 00318030 		.ascii	"\0001\2000\3000\3000\3000\3000\3001\200\177\000\000"
 906      C030C030 
 906      C030C030 
 906      C031807F 
 906      0000
 907 0497 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 907      00000000 
 907      00000000 
 907      00
 908 04a4 7F803080 		.ascii	"\177\2000\2000\2002\000>\0002\0000\2000\200\177\200"
 908      30803200 
 908      3E003200 
 908      30803080 
 908      7F80
 909 04b6 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 909      00000000 
 909      00000000 
 909      00
 910 04c3 007FC030 		.ascii	"\000\177\3000@0@2\000>\0002\0000\0000\000|\000\000\000"
 910      40304032 
 910      003E0032 
 910      00300030 
 910      007C0000 
 911 04d8 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\036"
 911      00000000 
 911      00000000 
 911      1E
 912 04e5 80318060 		.ascii	"\2001\200`\200`\000`\000g\300a\2001\200\037\000\000"
 912      80600060 
 912      0067C061 
 912      8031801F 
 912      0000
 913 04f7 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 913      00000000 
 913      00000000 
 913      00
 914 0504 7BC03180 		.ascii	"{\3001\2001\2001\200?\2001\2001\2001\200{\300\000\000"
 914      31803180 
 914      3F803180 
 914      31803180 
 914      7BC00000 
 915 0518 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000?\300"
 915      00000000 
 915      00000000 
ARM GAS  /tmp/ccK9mPCc.s 			page 63


 915      3FC0
 916 0526 06000600 		.ascii	"\006\000\006\000\006\000\006\000\006\000\006\000\006"
 916      06000600 
 916      06000600 
 916      06
 917 0533 003FC000 		.ascii	"\000?\300\000\000\000\000\000\000\000\000\000\000\000"
 917      00000000 
 917      00000000 
 917      0000
 918 0541 0000001F 		.ascii	"\000\000\000\037\300\003\000\003\000\003\000\003\000"
 918      C0030003 
 918      00030003 
 918      00
 919 054e 63006300 		.ascii	"c\000c\000c\000>\000\000\000\000\000\000\000\000\000"
 919      63003E00 
 919      00000000 
 919      00000000 
 920 055e 00000000 		.ascii	"\000\000\000\000\000\000{\3001\2003\0006\000<\000>\000"
 920      00007BC0 
 920      31803300 
 920      36003C00 
 920      3E00
 921 0570 33003180 		.ascii	"3\0001\200y\300\000\000\000\000\000\000\000\000\000"
 921      79C00000 
 921      00000000 
 921      000000
 922 057f 00000000 		.ascii	"\000\000\000\000\000~\000\030\000\030\000\030\000\030"
 922      007E0018 
 922      00180018 
 922      0018
 923 058d 00184018 		.ascii	"\000\030@\030@\030@\177\300\000\000\000\000\000\000"
 923      4018407F 
 923      C0000000 
 923      000000
 924 059c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\340\340`\300q\300{"
 924      00000000 
 924      E0E060C0 
 924      71C07B
 925 05ab C06AC06E 		.ascii	"\300j\300n\300d\300`\300\373\340\000\000\000\000\000"
 925      C064C060 
 925      C0FBE000 
 925      00000000 
 926 05bb 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000s\3001\2009\200"
 926      00000000 
 926      0073C031 
 926      803980
 927 05ca 3D803580 		.ascii	"=\2005\2007\2003\2001\200y\200\000\000\000\000\000\000"
 927      37803380 
 927      31807980 
 927      00000000 
 927      0000
 928 05dc 00000000 		.ascii	"\000\000\000\000\000\000\000\000\037\0001\200`\300`"
 928      00000000 
 928      1F003180 
 928      60C060
 929 05eb C060C060 		.ascii	"\300`\300`\300`\3001\200\037\000\000\000\000\000\000"
 929      C060C031 
ARM GAS  /tmp/ccK9mPCc.s 			page 64


 929      801F0000 
 929      00000000 
 930 05fb 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\177\0001\2001\200"
 930      00000000 
 930      007F0031 
 930      803180
 931 060a 31803180 		.ascii	"1\2001\200?\0000\0000\000~\000\000\000\000\000\000\000"
 931      3F003000 
 931      30007E00 
 931      00000000 
 931      0000
 932 061c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\037\0001\200`\300`"
 932      00000000 
 932      1F003180 
 932      60C060
 933 062b C060C060 		.ascii	"\300`\300`\300`\3001\200\037\000\014\300\037\200\000"
 933      C060C031 
 933      801F000C 
 933      C01F8000 
 934 063b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\177\0001\2001\200"
 934      00000000 
 934      007F0031 
 934      803180
 935 064a 31803E00 		.ascii	"1\200>\0003\0001\2001\200|\340\000\000\000\000\000\000"
 935      33003180 
 935      31807CE0 
 935      00000000 
 935      0000
 936 065c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\037\2001\2001\2008"
 936      00000000 
 936      1F803180 
 936      318038
 937 066b 001F0003 		.ascii	"\000\037\000\003\2001\2001\200?\000\000\000\000\000"
 937      80318031 
 937      803F0000 
 937      000000
 938 067a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\177\200L\200"
 938      00000000 
 938      00007F80 
 938      4C80
 939 0688 4C804C80 		.ascii	"L\200L\200\014\000\014\000\014\000\014\000?\000\000"
 939      0C000C00 
 939      0C000C00 
 939      3F0000
 940 0697 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 940      00000000 
 940      00000000 
 940      00
 941 06a4 7BC03180 		.ascii	"{\3001\2001\2001\2001\2001\2001\2001\200\037\000\000"
 941      31803180 
 941      31803180 
 941      31803180 
 941      1F0000
 942 06b7 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 942      00000000 
 942      00000000 
 942      00
ARM GAS  /tmp/ccK9mPCc.s 			page 65


 943 06c4 7BC03180 		.ascii	"{\3001\2001\200\033\000\033\000\033\000\012\000\016"
 943      31801B00 
 943      1B001B00 
 943      0A000E
 944 06d3 000E0000 		.ascii	"\000\016\000\000\000\000\000\000\000\000\000\000\000"
 944      00000000 
 944      00000000 
 944      00
 945 06e0 00000000 		.ascii	"\000\000\000\000\373\340`\300d\300n\300n\300*\200;\200"
 945      FBE060C0 
 945      64C06EC0 
 945      6EC02A80 
 945      3B80
 946 06f2 3B803180 		.ascii	";\2001\200\000\000\000\000\000\000\000\000\000\000\000"
 946      00000000 
 946      00000000 
 946      000000
 947 0701 0000007B 		.ascii	"\000\000\000{\3001\200\033\000\016\000\016\000\016\000"
 947      C031801B 
 947      000E000E 
 947      000E00
 948 0710 1B003180 		.ascii	"\033\0001\200{\300\000\000\000\000\000\000\000\000\000"
 948      7BC00000 
 948      00000000 
 948      000000
 949 071f 00000000 		.ascii	"\000\000\000\000\000y\3400\300\031\200\017\000\006\000"
 949      0079E030 
 949      C019800F 
 949      000600
 950 072e 06000600 		.ascii	"\006\000\006\000\006\000\037\200\000\000\000\000\000"
 950      06001F80 
 950      00000000 
 950      00
 951 073b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000?\200!\200#\000"
 951      00000000 
 951      003F8021 
 951      802300
 952 074a 06000400 		.ascii	"\006\000\004\000\014\000\030\2000\200?\200\000\000\000"
 952      0C001880 
 952      30803F80 
 952      000000
 953 0759 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\007\200\006\000"
 953      00000000 
 953      00078006 
 953      00
 954 0766 06000600 		.ascii	"\006\000\006\000\006\000\006\000\006\000\006\000\006"
 954      06000600 
 954      06000600 
 954      06
 955 0773 00060006 		.ascii	"\000\006\000\006\000\007\200\000\000\000\000\000\000"
 955      00078000 
 955      00000000 
 955      00
 956 0780 30003000 		.ascii	"0\0000\000\030\000\030\000\014\000\014\000\006\000\003"
 956      18001800 
 956      0C000C00 
 956      060003
ARM GAS  /tmp/ccK9mPCc.s 			page 66


 957 078f 00030001 		.ascii	"\000\003\000\001\200\001\200\000\300\000\300\000\000"
 957      80018000 
 957      C000C000 
 957      00
 958 079c 00000000 		.ascii	"\000\000\000\000\000\000\036\000\006\000\006\000\006"
 958      00001E00 
 958      06000600 
 958      06
 959 07a9 00060006 		.ascii	"\000\006\000\006\000\006\000\006\000\006\000\006\000"
 959      00060006 
 959      00060006 
 959      00
 960 07b6 06001E00 		.ascii	"\006\000\036\000\000\000\000\000\000\000\004\000\012"
 960      00000000 
 960      00000400 
 960      0A
 961 07c3 000A0011 		.ascii	"\000\012\000\021\000 \200 \200\000\000\000\000"
 961      00208020 
 961      80000000 
 961      00
 962 07d0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 962      00000000 
 962      00000000 
 962      00
 963 07dd 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 963      00000000 
 963      00000000 
 963      00
 964 07ea 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 964      00000000 
 964      00000000 
 964      00
 965 07f7 00000000 		.ascii	"\000\000\000\000\000\000\000\377\340\010\000\004\000"
 965      000000FF 
 965      E0080004 
 965      00
 966 0804 02000000 		.ascii	"\002\000\000\000\000\000\000\000\000\000\000\000\000"
 966      00000000 
 966      00000000 
 966      00
 967 0811 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 967      00000000 
 967      00000000 
 967      00
 968 081e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\037\000\001"
 968      00000000 
 968      00001F00 
 968      01
 969 082b 8001801F 		.ascii	"\200\001\200\037\2001\2003\200\035\300\000\000\000\000"
 969      80318033 
 969      801DC000 
 969      000000
 970 083a 00000000 		.ascii	"\000\000\000\000\000\000\000\000p\0000\0000\0007\000"
 970      00000000 
 970      70003000 
 970      30003700 
 971 084a 398030C0 		.ascii	"9\2000\3000\3000\3009\200w\000\000\000\000\000\000\000"
ARM GAS  /tmp/ccK9mPCc.s 			page 67


 971      30C030C0 
 971      39807700 
 971      00000000 
 971      0000
 972 085c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\036"
 972      00000000 
 972      00000000 
 972      1E
 973 0869 80318060 		.ascii	"\2001\200`\200`\000`\2001\200\037\000\000\000\000\000"
 973      80600060 
 973      8031801F 
 973      00000000 
 973      00
 974 087a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\003\200\001\200\001"
 974      00000000 
 974      03800180 
 974      01
 975 0887 801D8033 		.ascii	"\200\035\2003\200a\200a\200a\2003\200\035\300\000\000"
 975      80618061 
 975      80618033 
 975      801DC000 
 975      00
 976 0898 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 976      00000000 
 976      00000000 
 976      00
 977 08a5 0000001F 		.ascii	"\000\000\000\037\0001\200`\300\177\300`\0000\300\037"
 977      00318060 
 977      C07FC060 
 977      0030C01F 
 978 08b5 80000000 		.ascii	"\200\000\000\000\000\000\000\000\000\000\000\000\000"
 978      00000000 
 978      00000000 
 978      00
 979 08c2 07E00C00 		.ascii	"\007\340\014\000\014\000?\200\014\000\014\000\014\000"
 979      0C003F80 
 979      0C000C00 
 979      0C00
 980 08d0 0C000C00 		.ascii	"\014\000\014\000?\200\000\000\000\000\000\000\000\000"
 980      3F800000 
 980      00000000 
 980      0000
 981 08de 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\035\3003\200"
 981      00000000 
 981      00001DC0 
 981      3380
 982 08ec 61806180 		.ascii	"a\200a\200a\2003\200\035\200\001\200\001\200\037\000"
 982      61803380 
 982      1D800180 
 982      01801F00 
 983 08fc 00000000 		.ascii	"\000\000\000\000\000\000p\0000\0000\0007\0009\2001\200"
 983      00007000 
 983      30003000 
 983      37003980 
 983      3180
 984 090e 31803180 		.ascii	"1\2001\2001\200{\300\000\000\000\000\000\000\000\000"
 984      31807BC0 
ARM GAS  /tmp/ccK9mPCc.s 			page 68


 984      00000000 
 984      00000000 
 985 091e 00000000 		.ascii	"\000\000\000\000\006\000\006\000\000\000\036\000\006"
 985      06000600 
 985      00001E00 
 985      06
 986 092b 00060006 		.ascii	"\000\006\000\006\000\006\000\006\000?\300\000\000\000"
 986      00060006 
 986      003FC000 
 986      0000
 987 0939 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\006\000\006\000"
 987      00000000 
 987      00060006 
 987      00
 988 0946 00003F00 		.ascii	"\000\000?\000\003\000\003\000\003\000\003\000\003\000"
 988      03000300 
 988      03000300 
 988      0300
 989 0954 03000300 		.ascii	"\003\000\003\000\003\000>\000\000\000\000\000\000\000"
 989      03003E00 
 989      00000000 
 989      0000
 990 0962 70003000 		.ascii	"p\0000\0000\0007\2006\000<\000<\0006\0003\000w\300\000"
 990      30003780 
 990      36003C00 
 990      3C003600 
 990      330077C0 
 991 0977 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\036\000"
 991      00000000 
 991      0000001E 
 991      00
 992 0984 06000600 		.ascii	"\006\000\006\000\006\000\006\000\006\000\006\000\006"
 992      06000600 
 992      06000600 
 992      06
 993 0991 0006003F 		.ascii	"\000\006\000?\300\000\000\000\000\000\000\000\000\000"
 993      C0000000 
 993      00000000 
 993      0000
 994 099f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\177\2006\3006\300"
 994      00000000 
 994      007F8036 
 994      C036C0
 995 09ae 36C036C0 		.ascii	"6\3006\3006\300v\340\000\000\000\000\000\000\000\000"
 995      36C076E0 
 995      00000000 
 995      00000000 
 996 09be 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000w\0009\2001"
 996      00000000 
 996      00007700 
 996      398031
 997 09cd 80318031 		.ascii	"\2001\2001\2001\200{\300\000\000\000\000\000\000\000"
 997      8031807B 
 997      C0000000 
 997      00000000 
 998 09dd 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\037\000"
 998      00000000 
ARM GAS  /tmp/ccK9mPCc.s 			page 69


 998      0000001F 
 998      00
 999 09ea 318060C0 		.ascii	"1\200`\300`\300`\3001\200\037\000\000\000\000\000\000"
 999      60C060C0 
 999      31801F00 
 999      00000000 
 999      00
 1000 09fb 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 1000      00000000 
 1000      00000000 
 1000      00
 1001 0a08 77003980 		.ascii	"w\0009\2000\3000\3000\3009\2007\0000\0000\000|\000\000"
 1001      30C030C0 
 1001      30C03980 
 1001      37003000 
 1001      30007C00 
 1002 0a1d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\035\300"
 1002      00000000 
 1002      0000001D 
 1002      C0
 1003 0a2a 33806180 		.ascii	"3\200a\200a\200a\2003\200\035\200\001\200\001\200\007"
 1003      61806180 
 1003      33801D80 
 1003      01800180 
 1003      07
 1004 0a3b C0000000 		.ascii	"\300\000\000\000\000\000\000\000\000\000\000\000\000"
 1004      00000000 
 1004      00000000 
 1004      00
 1005 0a48 7B801CC0 		.ascii	"{\200\034\300\030\000\030\000\030\000\030\000\177\000"
 1005      18001800 
 1005      18001800 
 1005      7F00
 1006 0a56 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 1006      00000000 
 1006      00000000 
 1006      00
 1007 0a63 00000000 		.ascii	"\000\000\000\000\000\037\2001\200<\000\037\000\003\200"
 1007      001F8031 
 1007      803C001F 
 1007      000380
 1008 0a72 31803F00 		.ascii	"1\200?\000\000\000\000\000\000\000\000\000\000\000\000"
 1008      00000000 
 1008      00000000 
 1008      000000
 1009 0a81 00180018 		.ascii	"\000\030\000\030\000\030\000\177\000\030\000\030\000"
 1009      0018007F 
 1009      00180018 
 1009      00
 1010 0a8e 18001800 		.ascii	"\030\000\030\000\030\200\017\000\000\000\000\000\000"
 1010      18800F00 
 1010      00000000 
 1010      00
 1011 0a9b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 1011      00000000 
 1011      00000000 
 1011      00
ARM GAS  /tmp/ccK9mPCc.s 			page 70


 1012 0aa8 73803180 		.ascii	"s\2001\2001\2001\2001\2003\200\035\300\000\000\000\000"
 1012      31803180 
 1012      31803380 
 1012      1DC00000 
 1012      0000
 1013 0aba 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 1013      00000000 
 1013      00000000 
 1013      00
 1014 0ac7 007BC031 		.ascii	"\000{\3001\2001\200\033\000\033\000\016\000\016\000"
 1014      8031801B 
 1014      001B000E 
 1014      000E00
 1015 0ad6 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 1015      00000000 
 1015      00000000 
 1015      00
 1016 0ae3 00000000 		.ascii	"\000\000\000\000\000\361\340`\300d\300n\300;\200;\200"
 1016      00F1E060 
 1016      C064C06E 
 1016      C03B803B 
 1016      80
 1017 0af4 31800000 		.ascii	"1\200\000\000\000\000\000\000\000\000\000\000\000\000"
 1017      00000000 
 1017      00000000 
 1017      0000
 1018 0b02 00000000 		.ascii	"\000\000\000\000\000\000{\300\033\000\016\000\016\000"
 1018      00007BC0 
 1018      1B000E00 
 1018      0E00
 1019 0b10 0E001B00 		.ascii	"\016\000\033\000{\300\000\000\000\000\000\000\000\000"
 1019      7BC00000 
 1019      00000000 
 1019      0000
 1020 0b1e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000y\3400\300\031"
 1020      00000000 
 1020      000079E0 
 1020      30C019
 1021 0b2d 8019800B 		.ascii	"\200\031\200\013\000\017\000\006\000\006\000\014\000"
 1021      000F0006 
 1021      0006000C 
 1021      00
 1022 0b3a 3E000000 		.ascii	">\000\000\000\000\000\000\000\000\000\000\000\000\000"
 1022      00000000 
 1022      00000000 
 1022      0000
 1023 0b48 3F802180 		.ascii	"?\200!\200\003\000\016\000\030\0000\200?\200\000\000"
 1023      03000E00 
 1023      18003080 
 1023      3F800000 
 1024 0b58 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\006\000\014"
 1024      00000000 
 1024      00000600 
 1024      0C
 1025 0b65 000C000C 		.ascii	"\000\014\000\014\000\014\000\014\000\030\000\014\000"
 1025      000C000C 
 1025      0018000C 
ARM GAS  /tmp/ccK9mPCc.s 			page 71


 1025      00
 1026 0b72 0C000C00 		.ascii	"\014\000\014\000\014\000\006\000\000\000\000\000\000"
 1026      0C000600 
 1026      00000000 
 1026      00
 1027 0b7f 00000006 		.ascii	"\000\000\000\006\000\006\000\006\000\006\000\006\000"
 1027      00060006 
 1027      00060006 
 1027      00
 1028 0b8c 06000600 		.ascii	"\006\000\006\000\006\000\006\000\006\000\006\000\006"
 1028      06000600 
 1028      06000600 
 1028      06
 1029 0b99 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\014\000\006\000"
 1029      00000000 
 1029      000C0006 
 1029      00
 1030 0ba6 06000600 		.ascii	"\006\000\006\000\006\000\006\000\003\000\006\000\006"
 1030      06000600 
 1030      03000600 
 1030      06
 1031 0bb3 00060006 		.ascii	"\000\006\000\006\000\014\000\000\000\000\000\000\000"
 1031      000C0000 
 1031      00000000 
 1031      00
 1032 0bc0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\030\000$\200"
 1032      00000000 
 1032      00001800 
 1032      2480
 1033 0bce 03000000 		.ascii	"\003\000\000\000\000\000\000\000\000\000\000\000\000"
 1033      00000000 
 1033      00000000 
 1033      00
 1034 0bdb 00000000 		.ascii	"\000\000\000\000\000"
 1034      00
 1035              		.global	Font16
 1036              		.section	.data.Font16,"aw"
 1037              		.align	2
 1040              	Font16:
 1041 0000 00000000 		.word	Font16_Table
 1042 0004 0B00     		.short	11
 1043 0006 1000     		.short	16
 1044              		.global	Font12_Table
 1045              		.section	.rodata.Font12_Table,"a"
 1046              		.align	2
 1049              	Font12_Table:
 1050 0000 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 1050      00000000 
 1050      00000000 
 1050      00
 1051 000d 10101010 		.ascii	"\020\020\020\020\020\000\000\020\000\000\000\000lHH"
 1051      10000010 
 1051      00000000 
 1051      6C4848
 1052 001c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\024\024(|(|(PP"
 1052      00000000 
 1052      00141428 
ARM GAS  /tmp/ccK9mPCc.s 			page 72


 1052      7C287C28 
 1052      5050
 1053 002e 00000010 		.ascii	"\000\000\000\0208@@8Hp\020\020\000\000\000 P \014p\010"
 1053      38404038 
 1053      48701010 
 1053      00000020 
 1053      50200C70 
 1054 0043 14080000 		.ascii	"\024\010\000\000\000\000\000\000\030  TH4\000\000\000"
 1054      00000000 
 1054      18202054 
 1054      48340000 
 1054      00
 1055 0054 00101010 		.ascii	"\000\020\020\020\020\000\000\000\000\000\000\000\000"
 1055      10000000 
 1055      00000000 
 1055      00
 1056 0061 08081010 		.ascii	"\010\010\020\020\020\020\020\020\010\010\000\000  \020"
 1056      10101010 
 1056      08080000 
 1056      202010
 1057 0070 10101010 		.ascii	"\020\020\020\020\020  \000\000\020|\020((\000\000\000"
 1057      10202000 
 1057      00107C10 
 1057      28280000 
 1057      00
 1058 0081 00000000 		.ascii	"\000\000\000\000\000\020\020\020\376\020\020\020\000"
 1058      00101010 
 1058      FE101010 
 1058      00
 1059 008e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\030\0200 \000\000"
 1059      00000000 
 1059      00181030 
 1059      200000
 1060 009d 00000000 		.ascii	"\000\000\000\000|\000\000\000\000\000\000\000\000\000"
 1060      7C000000 
 1060      00000000 
 1060      0000
 1061 00ab 00000000 		.ascii	"\000\000\000\00000\000\000\000\000\004\004\010\010\020"
 1061      30300000 
 1061      00000404 
 1061      080810
 1062 00ba 10202040 		.ascii	"\020  @\000\000\0008DDDDDD8\000\000\000\0000\020\020"
 1062      00000038 
 1062      44444444 
 1062      44443800 
 1062      00000030 
 1063 00d0 10101010 		.ascii	"\020\020\020\020|\000\000\000\0008D\004\010\020 D|\000"
 1063      7C000000 
 1063      00384404 
 1063      08102044 
 1063      7C00
 1064 00e2 00000038 		.ascii	"\000\000\0008D\004\030\004\004D8\000\000\000\000\014"
 1064      44041804 
 1064      04443800 
 1064      0000000C 
 1065 00f2 14142444 		.ascii	"\024\024$D~\004\016\000\000\000\000<  8\004\004D8\000"
 1065      7E040E00 
ARM GAS  /tmp/ccK9mPCc.s 			page 73


 1065      0000003C 
 1065      20203804 
 1065      04443800 
 1066 0106 0000001C 		.ascii	"\000\000\000\034 @xDDD8\000\000\000\000|D\004\010\010"
 1066      20407844 
 1066      44443800 
 1066      0000007C 
 1066      44040808 
 1067 011a 08101000 		.ascii	"\010\020\020\000\000\000\0008DD8DDD8\000\000\000\000"
 1067      00000038 
 1067      44443844 
 1067      44443800 
 1067      000000
 1068 012d 38444444 		.ascii	"8DDD<\004\010p\000\000\000\000\000\00000\000\00000\000"
 1068      3C040870 
 1068      00000000 
 1068      00003030 
 1068      00003030 
 1069 0142 00000000 		.ascii	"\000\000\000\000\000\030\030\000\000\0300 \000\000\000"
 1069      00181800 
 1069      00183020 
 1069      000000
 1070 0151 000C1060 		.ascii	"\000\014\020`\200`\020\014\000\000\000\000\000\000\000"
 1070      8060100C 
 1070      00000000 
 1070      000000
 1071 0160 7C007C00 		.ascii	"|\000|\000\000\000\000\000\000\000\300 \030\004\030"
 1071      00000000 
 1071      0000C020 
 1071      180418
 1072 016f 20C00000 		.ascii	" \300\000\000\000\000\000\030$\004\010\020\0000\000"
 1072      00000018 
 1072      24040810 
 1072      003000
 1073 017e 00003844 		.ascii	"\000\0008DDLTTL@D8\000\000\0000\020(((|D\356\000\000"
 1073      444C5454 
 1073      4C404438 
 1073      00000030 
 1073      10282828 
 1074 0197 0000F844 		.ascii	"\000\000\370DDxDDD\370\000\000\000\000<D@@@@D8\000\000"
 1074      44784444 
 1074      44F80000 
 1074      00003C44 
 1074      40404040 
 1075 01af 0000F048 		.ascii	"\000\000\360HDDDDH\360\000\000\000\000\374DPpP@D\374"
 1075      44444444 
 1075      48F00000 
 1075      0000FC44 
 1075      50705040 
 1076 01c5 00000000 		.ascii	"\000\000\000\000~\"(8(  p\000\000\000\000<D@@NDD8\000"
 1076      7E222838 
 1076      28202070 
 1076      00000000 
 1076      3C444040 
 1077 01de 000000EE 		.ascii	"\000\000\000\356DD|DDD\356\000\000\000\000|\020\020"
 1077      44447C44 
 1077      4444EE00 
ARM GAS  /tmp/ccK9mPCc.s 			page 74


 1077      0000007C 
 1077      1010
 1078 01f0 10101010 		.ascii	"\020\020\020\020|\000\000\000\000<\010\010\010HHH0\000"
 1078      7C000000 
 1078      003C0808 
 1078      08484848 
 1078      3000
 1079 0202 000000EE 		.ascii	"\000\000\000\356DHPpHD\346\000\000\000\000p    $$|\000"
 1079      44485070 
 1079      4844E600 
 1079      00000070 
 1079      20202020 
 1080 021a 000000EE 		.ascii	"\000\000\000\356llTTDD\356\000\000\000\000\356ddTTT"
 1080      6C6C5454 
 1080      4444EE00 
 1080      000000EE 
 1080      64645454 
 1081 022f 4CEC0000 		.ascii	"L\354\000\000\000\0008DDDDDD8\000\000\000\000x$$$8 "
 1081      00003844 
 1081      44444444 
 1081      44380000 
 1081      00007824 
 1082 0247 20700000 		.ascii	" p\000\000\000\0008DDDDDD8\034\000\000\000\370DDDxH"
 1082      00003844 
 1082      44444444 
 1082      44381C00 
 1082      0000F844 
 1083 025f 44E20000 		.ascii	"D\342\000\000\000\0004L@8\004\004dX\000\000\000\000"
 1083      0000344C 
 1083      40380404 
 1083      64580000 
 1083      0000
 1084 0271 FE921010 		.ascii	"\376\222\020\020\020\020\0208\000\000\000\000\356DD"
 1084      10101038 
 1084      00000000 
 1084      EE4444
 1085 0280 44444444 		.ascii	"DDDD8\000\000\000\000\356DD(((\020\020\000\000\000\000"
 1085      38000000 
 1085      00EE4444 
 1085      28282810 
 1085      10000000 
 1086 0295 EE444454 		.ascii	"\356DDTTTT(\000\000\000\000\306D(\020\020(D\306\000"
 1086      54545428 
 1086      00000000 
 1086      C6442810 
 1086      102844C6 
 1087 02aa 000000EE 		.ascii	"\000\000\000\356D((\020\020\0208\000\000\000\000|D\010"
 1087      44282810 
 1087      10103800 
 1087      0000007C 
 1087      4408
 1088 02bc 10102044 		.ascii	"\020\020 D|\000\000\000\0008        8\000\000@   \020"
 1088      7C000000 
 1088      00382020 
 1088      20202020 
 1088      20203800 
 1089 02d6 10080808 		.ascii	"\020\010\010\010\000\000\0008\010\010\010\010\010\010"
ARM GAS  /tmp/ccK9mPCc.s 			page 75


 1089      00000038 
 1089      08080808 
 1089      0808
 1090 02e4 08083800 		.ascii	"\010\0108\000\000\020\020(D\000\000\000\000\000\000"
 1090      00101028 
 1090      44000000 
 1090      000000
 1091 02f3 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\376"
 1091      00000000 
 1091      00000000 
 1091      FE
 1092 0300 00100800 		.ascii	"\000\020\010\000\000\000\000\000\000\000\000\000\000"
 1092      00000000 
 1092      00000000 
 1092      00
 1093 030d 00003844 		.ascii	"\000\0008D<DD>\000\000\000\000\300@XdDDD\370\000\000"
 1093      3C44443E 
 1093      00000000 
 1093      C0405864 
 1093      444444F8 
 1094 0323 00000000 		.ascii	"\000\000\000\000<D@@D8\000\000\000\000\014\0044LDDD"
 1094      3C444040 
 1094      44380000 
 1094      00000C04 
 1094      344C4444 
 1095 0338 3E000000 		.ascii	">\000\000\000\000\000\0008D|@@<\000\000\000\000\034"
 1095      00000038 
 1095      447C4040 
 1095      3C000000 
 1095      001C
 1096 034a 207C2020 		.ascii	" |    |\000\000\000\000\000\0006LDDD<\0048\000\000\300"
 1096      20207C00 
 1096      00000000 
 1096      00364C44 
 1096      44443C04 
 1097 0362 40586444 		.ascii	"@XdDDD\356\000\000\000\000\020\000p\020\020\020\020"
 1097      4444EE00 
 1097      00000010 
 1097      00701010 
 1097      1010
 1098 0374 7C000000 		.ascii	"|\000\000\000\000\020\000x\010\010\010\010\010\010p"
 1098      00100078 
 1098      08080808 
 1098      080870
 1099 0383 0000C040 		.ascii	"\000\000\300@\\HpPH\334\000\000\000\0000\020\020\020"
 1099      5C487050 
 1099      48DC0000 
 1099      00003010 
 1099      1010
 1100 0395 1010107C 		.ascii	"\020\020\020|\000\000\000\000\000\000\350TTTT\376\000"
 1100      00000000 
 1100      0000E854 
 1100      545454FE 
 1100      00
 1101 03a6 00000000 		.ascii	"\000\000\000\000\000\330dDDD\356\000\000\000\000\000"
 1101      00D86444 
 1101      4444EE00 
ARM GAS  /tmp/ccK9mPCc.s 			page 76


 1101      00000000 
 1102 03b6 00384444 		.ascii	"\0008DDDD8\000\000\000\000\000\000\330dDDDx@\340\000"
 1102      44443800 
 1102      00000000 
 1102      00D86444 
 1102      44447840 
 1103 03cc 00000036 		.ascii	"\000\000\0006LDDD<\004\016\000\000\000\000l0   |\000"
 1103      4C444444 
 1103      3C040E00 
 1103      0000006C 
 1103      30202020 
 1104 03e2 00000000 		.ascii	"\000\000\000\000\000<D8\004Dx\000\000\000\000\000 |"
 1104      003C4438 
 1104      04447800 
 1104      00000000 
 1104      207C
 1105 03f4 20202022 		.ascii	"   \"\034\000\000\000\000\000\000\314DDDL6\000\000\000"
 1105      1C000000 
 1105      000000CC 
 1105      4444444C 
 1105      36000000 
 1106 0408 000000EE 		.ascii	"\000\000\000\356DD((\020\000\000\000\000\000\000\356"
 1106      44442828 
 1106      10000000 
 1106      000000EE 
 1107 0418 44545454 		.ascii	"DTTT(\000\000\000\000\000\000\314H00H\314\000\000\000"
 1107      28000000 
 1107      000000CC 
 1107      48303048 
 1107      CC000000 
 1108 042c 000000EE 		.ascii	"\000\000\000\356D$(\030\020\020x\000\000\000\000|H\020"
 1108      44242818 
 1108      10107800 
 1108      0000007C 
 1108      4810
 1109 043e 20447C00 		.ascii	" D|\000\000\000\000\010\020\020\020\020 \020\020\020"
 1109      00000008 
 1109      10101010 
 1109      20101010 
 1110 044e 08000010 		.ascii	"\010\000\000\020\020\020\020\020\020\020\020\020\000"
 1110      10101010 
 1110      10101010 
 1110      00
 1111 045b 00002010 		.ascii	"\000\000 \020\020\020\020\010\020\020\020 \000\000\000"
 1111      10101008 
 1111      10101020 
 1111      000000
 1112 046a 00000024 		.ascii	"\000\000\000$X\000\000\000\000\000"
 1112      58000000 
 1112      0000
 1113              		.global	Font12
 1114              		.section	.data.Font12,"aw"
 1115              		.align	2
 1118              	Font12:
 1119 0000 00000000 		.word	Font12_Table
 1120 0004 0700     		.short	7
 1121 0006 0C00     		.short	12
ARM GAS  /tmp/ccK9mPCc.s 			page 77


 1122              		.global	Font8_Table
 1123              		.section	.rodata.Font8_Table,"a"
 1124              		.align	2
 1127              	Font8_Table:
 1128 0000 00000000 		.ascii	"\000\000\000\000\000\000\000\000    \000 \000\000PP"
 1128      00000000 
 1128      20202020 
 1128      00200000 
 1128      5050
 1129 0012 00000000 		.ascii	"\000\000\000\000\000\000(P\370P\370P\240\000 0`0\020"
 1129      00002850 
 1129      F850F850 
 1129      A0002030 
 1129      603010
 1130 0025 60200020 		.ascii	"` \000  \030`\020\020\000\000\0008 `Px\000\000   \000"
 1130      20186010 
 1130      10000000 
 1130      38206050 
 1130      78000020 
 1131 003c 00000000 		.ascii	"\000\000\000\000\020     \020\000@     @\000 p P\000"
 1131      10202020 
 1131      20201000 
 1131      40202020 
 1131      20204000 
 1132 0055 00000000 		.ascii	"\000\000\000\000  \370  \000\000\000\000\000\000\020"
 1132      2020F820 
 1132      20000000 
 1132      00000010 
 1133 0065 20200000 		.ascii	"  \000\000\000\000p\000\000\000\000\000\000\000\000"
 1133      00007000 
 1133      00000000 
 1133      000000
 1134 0074 00200000 		.ascii	"\000 \000\000\020   @@\200\000 PPPP \000\000`    \370"
 1134      10202020 
 1134      40408000 
 1134      20505050 
 1134      50200000 
 1135 008e 00002050 		.ascii	"\000\000 P  @p\000\000 P\020 \020`\000\000\0200Px\020"
 1135      20204070 
 1135      00002050 
 1135      10201060 
 1135      00001030 
 1136 00a5 38000070 		.ascii	"8\000\000p@`\020P \000\0000@`PP`\000\000pP\020   \000"
 1136      40601050 
 1136      20000030 
 1136      40605050 
 1136      60000070 
 1137 00bf 00205020 		.ascii	"\000 P PP \000\0000PP0\020`\000\000\000\000 \000\000"
 1137      50502000 
 1137      00305050 
 1137      30106000 
 1137      00000020 
 1138 00d5 20000000 		.ascii	" \000\000\000\000\020\000\020 \000\000\000\020 \300"
 1138      00100010 
 1138      20000000 
 1138      1020C0
 1139 00e4 20100000 		.ascii	" \020\000\000\000p\000p\000\000\000\000\000@ \030 @"
ARM GAS  /tmp/ccK9mPCc.s 			page 78


 1139      00700070 
 1139      00000000 
 1139      00402018 
 1139      2040
 1140 00f6 00002050 		.ascii	"\000\000 P\020 \000 \000\0000HHXH@8\000` Pp\210\330"
 1140      10200020 
 1140      00003048 
 1140      48584840 
 1140      38006020 
 1141 010e 0000F048 		.ascii	"\000\000\360HpHH\360\000\000pP@@@0\000\000\360HHHH\360"
 1141      704848F0 
 1141      00007050 
 1141      40404030 
 1141      0000F048 
 1142 0126 0000F848 		.ascii	"\000\000\370H`@H\370\000\000\370H`@@\340\000\000p@@"
 1142      604048F8 
 1142      0000F848 
 1142      604040E0 
 1142      00007040 
 1143 013b 58503000 		.ascii	"XP0\000\000\350HxHH\350\000\000p    p\000\0008\020\020"
 1143      00E84878 
 1143      4848E800 
 1143      00702020 
 1143      20207000 
 1144 0153 50502000 		.ascii	"PP \000\000\330P`pP\330\000\000\340@@@H\370\000\000"
 1144      00D85060 
 1144      7050D800 
 1144      00E04040 
 1144      4048F800 
 1145 0168 D8D8D8A8 		.ascii	"\330\330\330\250\210\330\000\000\330hhXX\350\000\000"
 1145      88D80000 
 1145      D8686858 
 1145      58E80000 
 1146 0178 30484848 		.ascii	"0HHHH0\000\000\360HHp@\340\000\0000HHHH0\030\000\360"
 1146      48300000 
 1146      F0484870 
 1146      40E00000 
 1146      30484848 
 1147 0191 48487048 		.ascii	"HHpH\350\000\000pP \020Pp\000\000\370\250   p\000\000"
 1147      E8000070 
 1147      50201050 
 1147      700000F8 
 1147      A8202020 
 1148 01a8 D8484848 		.ascii	"\330HHHH0\000\000\330\210HPP0\000\000\330\210\250\250"
 1148      48300000 
 1148      D8884850 
 1148      50300000 
 1148      D888A8A8 
 1149 01bc A8500000 		.ascii	"\250P\000\000\330P  P\330\000\000\330\210P  p\000\000"
 1149      D8502020 
 1149      50D80000 
 1149      D8885020 
 1149      20700000 
 1150 01d0 78481020 		.ascii	"xH\020 Hx\000\0000     0\000\200@@   \020\000`     "
 1150      48780000 
 1150      30202020 
 1150      20203000 
ARM GAS  /tmp/ccK9mPCc.s 			page 79


 1150      80404020 
 1151 01ee 60002020 		.ascii	"`\000  P\000\000\000\000\000\000\000\000\000\000\000"
 1151      50000000 
 1151      00000000 
 1151      00000000 
 1152 01fe 00F82010 		.ascii	"\000\370 \020\000\000\000\000\000\000\000\0000\020p"
 1152      00000000 
 1152      00000000 
 1152      301070
 1153 020d 780000C0 		.ascii	"x\000\000\300@pHH\360\000\000\000\000p@@p\000\000\030"
 1153      40704848 
 1153      F0000000 
 1153      00704040 
 1153      70000018 
 1154 0221 08384848 		.ascii	"\0108HH8\000\000\000\000pp@0\000\000\020 p  p\000\000"
 1154      38000000 
 1154      00707040 
 1154      30000010 
 1154      20702020 
 1155 0238 00003848 		.ascii	"\000\0008HH8\0100\300@pHH\350\000\000 \000`  p\000\000"
 1155      48380830 
 1155      C0407048 
 1155      48E80000 
 1155      20006020 
 1156 0250 20007010 		.ascii	" \000p\020\020\020\020p\300@XpP\330\000\000`    p\000"
 1156      10101070 
 1156      C0405870 
 1156      50D80000 
 1156      60202020 
 1157 0267 000000D0 		.ascii	"\000\000\000\320\250\250\250\000\000\000\000\360HH\310"
 1157      A8A8A800 
 1157      000000F0 
 1157      4848C8
 1158 0276 00000000 		.ascii	"\000\000\000\0000HH0\000\000\000\000\360HHp@\340\000"
 1158      30484830 
 1158      00000000 
 1158      F0484870 
 1158      40E000
 1159 0289 00384848 		.ascii	"\0008HH8\010\030\000\000x  p\000\000\000\0000 \020`"
 1159      38081800 
 1159      00782020 
 1159      70000000 
 1159      00302010 
 1160 029e 00000040 		.ascii	"\000\000\000@\360@H0\000\000\000\000\330HH8\000\000"
 1160      F0404830 
 1160      00000000 
 1160      D8484838 
 1160      0000
 1161 02b0 0000C848 		.ascii	"\000\000\310H00\000\000\000\000\330\250\250P\000\000"
 1161      30300000 
 1161      0000D8A8 
 1161      A8500000 
 1162 02c0 00004830 		.ascii	"\000\000H00H\000\000\000\000\330PP  `\000\000xP(x\000"
 1162      30480000 
 1162      0000D850 
 1162      50202060 
 1162      00007850 
ARM GAS  /tmp/ccK9mPCc.s 			page 80


 1163 02d7 00102020 		.ascii	"\000\020  `  \020\000       \000@  0  @\000\000\000"
 1163      60202010 
 1163      00202020 
 1163      20202020 
 1163      00402020 
 1164 02f2 00285000 		.ascii	"\000(P\000\000\000"
 1164      0000
 1165              		.global	Font8
 1166              		.section	.data.Font8,"aw"
 1167              		.align	2
 1170              	Font8:
 1171 0000 00000000 		.word	Font8_Table
 1172 0004 0500     		.short	5
 1173 0006 0800     		.short	8
 1174              		.section	.bss.DrawProp,"aw",%nobits
 1175              		.align	2
 1178              	DrawProp:
 1179 0000 00000000 		.space	64
 1179      00000000 
 1179      00000000 
 1179      00000000 
 1179      00000000 
 1180              		.section	.bss.FuncDriver,"aw",%nobits
 1181              		.align	2
 1184              	FuncDriver:
 1185 0000 00000000 		.space	44
 1185      00000000 
 1185      00000000 
 1185      00000000 
 1185      00000000 
 1186              		.section	.text.UTIL_LCD_SetFuncDriver,"ax",%progbits
 1187              		.align	1
 1188              		.global	UTIL_LCD_SetFuncDriver
 1189              		.syntax unified
 1190              		.thumb
 1191              		.thumb_func
 1193              	UTIL_LCD_SetFuncDriver:
 1194              	.LFB0:
   1:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
   2:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   ******************************************************************************
   3:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @file    stm32_lcd.c
   4:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @author  MCD Application Team
   5:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief   This file includes the basic functionalities to drive LCD
   6:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   ******************************************************************************
   7:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @attention
   8:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   *
   9:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * Copyright (c) 2019-2024 STMicroelectronics.
  10:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * All rights reserved.
  11:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   *
  12:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * in the root directory of this software component.
  14:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   *
  16:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   ******************************************************************************
  17:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
  18:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
  19:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /* File Info: ------------------------------------------------------------------
ARM GAS  /tmp/ccK9mPCc.s 			page 81


  20:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****                                    User NOTES
  21:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 1. How To use this driver:
  22:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** --------------------------
  23:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****    - This driver is a generic driver that provides basic display services. It should
  24:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****      be used by any platform once LCD is initialized and following draw methods are
  25:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****      registered:
  26:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          BSP_LCD_DrawBitmap
  27:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          BSP_LCD_DrawHLine
  28:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          BSP_LCD_DrawVLine
  29:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          BSP_LCD_FillRect
  30:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          BSP_LCD_ReadPixel
  31:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          BSP_LCD_WritePixel
  32:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          BSP_LCD_GetXSize
  33:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          BSP_LCD_GetYSize
  34:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          BSP_LCD_SetActiveLayer
  35:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
  36:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****    - At application level, once the LCD is initialized, user should call UTIL_LCD_SetFuncDriver()
  37:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****      API to link board LCD drivers to BASIC GUI LCD drivers.
  38:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****      User can then call the BASIC GUI services:
  39:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_SetFuncDriver()
  40:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_SetLayer()
  41:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_SetDevice()
  42:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_SetTextColor()
  43:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_GetTextColor()
  44:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_SetBackColor()
  45:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_GetBackColor()
  46:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_SetFont()
  47:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_GetFont()
  48:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_Clear)
  49:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_ClearStringLine()
  50:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_DisplayStringAtLine()
  51:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_DisplayStringAt()
  52:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_DisplayChar()
  53:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_GetPixel()
  54:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_SetPixel()
  55:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_FillRGBRect()
  56:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_DrawHLine()
  57:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_DrawVLine()
  58:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_DrawBitmap()
  59:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_FillRect()
  60:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_DrawLine()
  61:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_DrawRect()
  62:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_DrawCircle()
  63:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_DrawPolygon()
  64:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_DrawEllipse()
  65:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_FillCircle()
  66:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_FillPolygon()
  67:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****          UTIL_LCD_FillEllipse()
  68:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** ------------------------------------------------------------------------------*/
  69:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
  70:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /* Includes ------------------------------------------------------------------*/
  71:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** #include "stm32_lcd.h"
  72:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** #include "../Fonts/font24.c"
  73:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** #include "../Fonts/font20.c"
  74:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** #include "../Fonts/font16.c"
  75:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** #include "../Fonts/font12.c"
  76:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** #include "../Fonts/font8.c"
ARM GAS  /tmp/ccK9mPCc.s 			page 82


  77:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
  78:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /** @addtogroup Utilities
  79:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @{
  80:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
  81:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
  82:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /** @addtogroup STM32_EVAL
  83:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @{
  84:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
  85:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
  86:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /** @addtogroup Common
  87:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @{
  88:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
  89:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
  90:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /** @defgroup STM32_LCD STM32 LCD Utility
  91:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @{
  92:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
  93:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
  94:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** #ifndef UTIL_LCD_MAX_LAYERS_NBR
  95:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   #define UTIL_LCD_MAX_LAYERS_NBR    2U
  96:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** #endif
  97:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
  98:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /** @defgroup UTIL_LCD_Private_Macros STM32 LCD Utility Private Macros
  99:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @{
 100:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 101:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** #define ABS(X)                 ((X) > 0 ? (X) : -(X))
 102:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** #define POLY_X(Z)              ((int32_t)((Points + (Z))->X))
 103:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** #define POLY_Y(Z)              ((int32_t)((Points + (Z))->Y))
 104:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 105:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** #define CONVERTARGB88882RGB565(Color)((((Color & 0xFFU) >> 3) & 0x1FU) |\
 106:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****                                      (((((Color & 0xFF00U) >> 8) >>2) & 0x3FU) << 5) |\
 107:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****                                      (((((Color & 0xFF0000U) >> 16) >>3) & 0x1FU) << 11))
 108:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 109:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** #define CONVERTARGB88882ARGB4444(Color)((((Color & 0xFFU) >> 4) & 0xFU) |\
 110:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****                                        (((((Color & 0xFF00U) >> 8) >> 4) & 0xFU) << 4) |\
 111:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****                                        (((((Color & 0xFF0000U) >> 16) >> 4) & 0xFU) << 8) | \
 112:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****                                        (((((Color & 0xFF000000U) >> 24) >> 4) & 0xFU) << 12))
 113:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 114:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** #define CONVERTRGB5652ARGB8888(Color)(((((((Color >> 11) & 0x1FU) * 527) + 23) >> 6) << 16) |\
 115:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****                                      ((((((Color >> 5) & 0x3FU) * 259) + 33) >> 6) << 8) |\
 116:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****                                      ((((Color & 0x1FU) * 527) + 23) >> 6) | 0xFF000000)
 117:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 118:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** #define CONVERTARGB44442ARGB8888(Color)(((((Color >> 12U) & 0xFU) * 17U) << 24U) |\
 119:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****                                         ((((Color >>  8U) & 0xFU) * 17U) << 16U) |\
 120:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****                                         ((((Color >>  4U) & 0xFU) * 17U) << 8U) |\
 121:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****                                         ((((Color >>  0U) & 0xFU) * 17U) << 0U))
 122:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 123:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** #define CONVERTRGB8882ARGB8888(Color)(Color | 0xFF000000U)
 124:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 125:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** #define CONVERTARGB88882RGB888(Color)(Color & 0x00FFFFFFU)
 126:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 127:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 128:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @}
 129:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 130:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 131:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /** @defgroup UTIL_LCD_Private_Types STM32 LCD Utility Private Types
 132:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @{
 133:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
ARM GAS  /tmp/ccK9mPCc.s 			page 83


 134:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** typedef struct
 135:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 136:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint32_t x1;
 137:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint32_t y1;
 138:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint32_t x2;
 139:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint32_t y2;
 140:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint32_t x3;
 141:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint32_t y3;
 142:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }Triangle_Positions_t;
 143:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 144:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 145:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @}
 146:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 147:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 148:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /** @defgroup UTIL_LCD_Private_Variables STM32 LCD Utility Private Variables
 149:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @{
 150:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 151:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 152:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 153:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Current Drawing Layer properties variable
 154:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 155:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** static UTIL_LCD_Ctx_t DrawProp[UTIL_LCD_MAX_LAYERS_NBR];
 156:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** static LCD_UTILS_Drv_t FuncDriver;
 157:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 158:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 159:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @}
 160:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 161:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 162:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /** @defgroup UTIL_LCD_Private_FunctionPrototypes STM32 LCD Utility Private FunctionPrototypes
 163:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @{
 164:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 165:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData);
 166:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** static void FillTriangle(Triangle_Positions_t *Positions, uint32_t Color);
 167:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 168:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @}
 169:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 170:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 171:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /** @defgroup UTIL_LCD_Exported_Functions STM32 LCD Utility Exported Functions
 172:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @{
 173:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 174:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 175:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 176:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Link board LCD drivers to STM32 LCD Utility drivers
 177:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  pDrv Structure of LCD functions
 178:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 179:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
 180:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 1195              		.loc 1 180 1
 1196              		.cfi_startproc
 1197              		@ args = 0, pretend = 0, frame = 8
 1198              		@ frame_needed = 1, uses_anonymous_args = 0
 1199 0000 80B5     		push	{r7, lr}
 1200              		.cfi_def_cfa_offset 8
 1201              		.cfi_offset 7, -8
 1202              		.cfi_offset 14, -4
 1203 0002 82B0     		sub	sp, sp, #8
 1204              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccK9mPCc.s 			page 84


 1205 0004 00AF     		add	r7, sp, #0
 1206              		.cfi_def_cfa_register 7
 1207 0006 7860     		str	r0, [r7, #4]
 181:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 1208              		.loc 1 181 35
 1209 0008 7B68     		ldr	r3, [r7, #4]
 1210 000a 1B68     		ldr	r3, [r3]
 1211              		.loc 1 181 29
 1212 000c 2B4A     		ldr	r2, .L2
 1213 000e 1360     		str	r3, [r2]
 182:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 1214              		.loc 1 182 35
 1215 0010 7B68     		ldr	r3, [r7, #4]
 1216 0012 5B68     		ldr	r3, [r3, #4]
 1217              		.loc 1 182 29
 1218 0014 294A     		ldr	r2, .L2
 1219 0016 5360     		str	r3, [r2, #4]
 183:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   FuncDriver.DrawHLine      = pDrv->DrawHLine;
 1220              		.loc 1 183 35
 1221 0018 7B68     		ldr	r3, [r7, #4]
 1222 001a 9B68     		ldr	r3, [r3, #8]
 1223              		.loc 1 183 29
 1224 001c 274A     		ldr	r2, .L2
 1225 001e 9360     		str	r3, [r2, #8]
 184:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   FuncDriver.DrawVLine      = pDrv->DrawVLine;
 1226              		.loc 1 184 35
 1227 0020 7B68     		ldr	r3, [r7, #4]
 1228 0022 DB68     		ldr	r3, [r3, #12]
 1229              		.loc 1 184 29
 1230 0024 254A     		ldr	r2, .L2
 1231 0026 D360     		str	r3, [r2, #12]
 185:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   FuncDriver.FillRect       = pDrv->FillRect;
 1232              		.loc 1 185 35
 1233 0028 7B68     		ldr	r3, [r7, #4]
 1234 002a 1B69     		ldr	r3, [r3, #16]
 1235              		.loc 1 185 29
 1236 002c 234A     		ldr	r2, .L2
 1237 002e 1361     		str	r3, [r2, #16]
 186:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   FuncDriver.GetPixel       = pDrv->GetPixel;
 1238              		.loc 1 186 35
 1239 0030 7B68     		ldr	r3, [r7, #4]
 1240 0032 5B69     		ldr	r3, [r3, #20]
 1241              		.loc 1 186 29
 1242 0034 214A     		ldr	r2, .L2
 1243 0036 5361     		str	r3, [r2, #20]
 187:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   FuncDriver.SetPixel       = pDrv->SetPixel;
 1244              		.loc 1 187 35
 1245 0038 7B68     		ldr	r3, [r7, #4]
 1246 003a 9B69     		ldr	r3, [r3, #24]
 1247              		.loc 1 187 29
 1248 003c 1F4A     		ldr	r2, .L2
 1249 003e 9361     		str	r3, [r2, #24]
 188:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   FuncDriver.GetXSize       = pDrv->GetXSize;
 1250              		.loc 1 188 35
 1251 0040 7B68     		ldr	r3, [r7, #4]
 1252 0042 DB69     		ldr	r3, [r3, #28]
 1253              		.loc 1 188 29
ARM GAS  /tmp/ccK9mPCc.s 			page 85


 1254 0044 1D4A     		ldr	r2, .L2
 1255 0046 D361     		str	r3, [r2, #28]
 189:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   FuncDriver.GetYSize       = pDrv->GetYSize;
 1256              		.loc 1 189 35
 1257 0048 7B68     		ldr	r3, [r7, #4]
 1258 004a 1B6A     		ldr	r3, [r3, #32]
 1259              		.loc 1 189 29
 1260 004c 1B4A     		ldr	r2, .L2
 1261 004e 1362     		str	r3, [r2, #32]
 190:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   FuncDriver.SetLayer       = pDrv->SetLayer;
 1262              		.loc 1 190 35
 1263 0050 7B68     		ldr	r3, [r7, #4]
 1264 0052 5B6A     		ldr	r3, [r3, #36]
 1265              		.loc 1 190 29
 1266 0054 194A     		ldr	r2, .L2
 1267 0056 5362     		str	r3, [r2, #36]
 191:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   FuncDriver.GetFormat      = pDrv->GetFormat;
 1268              		.loc 1 191 35
 1269 0058 7B68     		ldr	r3, [r7, #4]
 1270 005a 9B6A     		ldr	r3, [r3, #40]
 1271              		.loc 1 191 29
 1272 005c 174A     		ldr	r2, .L2
 1273 005e 9362     		str	r3, [r2, #40]
 192:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 193:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   DrawProp->LcdLayer = 0;
 1274              		.loc 1 193 22
 1275 0060 174B     		ldr	r3, .L2+4
 1276 0062 0022     		movs	r2, #0
 1277 0064 DA60     		str	r2, [r3, #12]
 194:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   DrawProp->LcdDevice = 0;
 1278              		.loc 1 194 23
 1279 0066 164B     		ldr	r3, .L2+4
 1280 0068 0022     		movs	r2, #0
 1281 006a 1A61     		str	r2, [r3, #16]
 195:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   FuncDriver.GetXSize(0, &DrawProp[DrawProp->LcdLayer].LcdXsize);
 1282              		.loc 1 195 13
 1283 006c 134B     		ldr	r3, .L2
 1284 006e DB69     		ldr	r3, [r3, #28]
 1285              		.loc 1 195 44
 1286 0070 134A     		ldr	r2, .L2+4
 1287 0072 D268     		ldr	r2, [r2, #12]
 1288              		.loc 1 195 3
 1289 0074 5201     		lsls	r2, r2, #5
 1290 0076 1032     		adds	r2, r2, #16
 1291 0078 1149     		ldr	r1, .L2+4
 1292 007a 0A44     		add	r2, r2, r1
 1293 007c 0432     		adds	r2, r2, #4
 1294 007e 1146     		mov	r1, r2
 1295 0080 0020     		movs	r0, #0
 1296 0082 9847     		blx	r3
 1297              	.LVL0:
 196:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   FuncDriver.GetYSize(0, &DrawProp[DrawProp->LcdLayer].LcdYsize);
 1298              		.loc 1 196 13
 1299 0084 0D4B     		ldr	r3, .L2
 1300 0086 1B6A     		ldr	r3, [r3, #32]
 1301              		.loc 1 196 44
 1302 0088 0D4A     		ldr	r2, .L2+4
ARM GAS  /tmp/ccK9mPCc.s 			page 86


 1303 008a D268     		ldr	r2, [r2, #12]
 1304              		.loc 1 196 3
 1305 008c 5201     		lsls	r2, r2, #5
 1306 008e 1832     		adds	r2, r2, #24
 1307 0090 0B49     		ldr	r1, .L2+4
 1308 0092 0A44     		add	r2, r2, r1
 1309 0094 1146     		mov	r1, r2
 1310 0096 0020     		movs	r0, #0
 1311 0098 9847     		blx	r3
 1312              	.LVL1:
 197:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   FuncDriver.GetFormat(0, &DrawProp[DrawProp->LcdLayer].LcdPixelFormat);
 1313              		.loc 1 197 13
 1314 009a 084B     		ldr	r3, .L2
 1315 009c 9B6A     		ldr	r3, [r3, #40]
 1316              		.loc 1 197 45
 1317 009e 084A     		ldr	r2, .L2+4
 1318 00a0 D268     		ldr	r2, [r2, #12]
 1319              		.loc 1 197 3
 1320 00a2 5201     		lsls	r2, r2, #5
 1321 00a4 1832     		adds	r2, r2, #24
 1322 00a6 0649     		ldr	r1, .L2+4
 1323 00a8 0A44     		add	r2, r2, r1
 1324 00aa 0432     		adds	r2, r2, #4
 1325 00ac 1146     		mov	r1, r2
 1326 00ae 0020     		movs	r0, #0
 1327 00b0 9847     		blx	r3
 1328              	.LVL2:
 198:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 1329              		.loc 1 198 1
 1330 00b2 00BF     		nop
 1331 00b4 0837     		adds	r7, r7, #8
 1332              		.cfi_def_cfa_offset 8
 1333 00b6 BD46     		mov	sp, r7
 1334              		.cfi_def_cfa_register 13
 1335              		@ sp needed
 1336 00b8 80BD     		pop	{r7, pc}
 1337              	.L3:
 1338 00ba 00BF     		.align	2
 1339              	.L2:
 1340 00bc 00000000 		.word	FuncDriver
 1341 00c0 00000000 		.word	DrawProp
 1342              		.cfi_endproc
 1343              	.LFE0:
 1345              		.section	.text.UTIL_LCD_SetLayer,"ax",%progbits
 1346              		.align	1
 1347              		.global	UTIL_LCD_SetLayer
 1348              		.syntax unified
 1349              		.thumb
 1350              		.thumb_func
 1352              	UTIL_LCD_SetLayer:
 1353              	.LFB1:
 199:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 200:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 201:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Set the LCD layer.
 202:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Layer  LCD layer
 203:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 204:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_SetLayer(uint32_t Layer)
ARM GAS  /tmp/ccK9mPCc.s 			page 87


 205:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 1354              		.loc 1 205 1
 1355              		.cfi_startproc
 1356              		@ args = 0, pretend = 0, frame = 8
 1357              		@ frame_needed = 1, uses_anonymous_args = 0
 1358 0000 80B5     		push	{r7, lr}
 1359              		.cfi_def_cfa_offset 8
 1360              		.cfi_offset 7, -8
 1361              		.cfi_offset 14, -4
 1362 0002 82B0     		sub	sp, sp, #8
 1363              		.cfi_def_cfa_offset 16
 1364 0004 00AF     		add	r7, sp, #0
 1365              		.cfi_def_cfa_register 7
 1366 0006 7860     		str	r0, [r7, #4]
 206:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   if(FuncDriver.SetLayer != NULL)
 1367              		.loc 1 206 16
 1368 0008 1D4B     		ldr	r3, .L7
 1369 000a 5B6A     		ldr	r3, [r3, #36]
 1370              		.loc 1 206 5
 1371 000c 002B     		cmp	r3, #0
 1372 000e 32D0     		beq	.L6
 207:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 208:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 1373              		.loc 1 208 18
 1374 0010 1B4B     		ldr	r3, .L7
 1375 0012 5B6A     		ldr	r3, [r3, #36]
 1376              		.loc 1 208 8
 1377 0014 1B4A     		ldr	r2, .L7+4
 1378 0016 1269     		ldr	r2, [r2, #16]
 1379 0018 7968     		ldr	r1, [r7, #4]
 1380 001a 1046     		mov	r0, r2
 1381 001c 9847     		blx	r3
 1382              	.LVL3:
 1383 001e 0346     		mov	r3, r0
 1384              		.loc 1 208 7 discriminator 1
 1385 0020 002B     		cmp	r3, #0
 1386 0022 28D1     		bne	.L6
 209:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 210:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       DrawProp->LcdLayer = Layer;
 1387              		.loc 1 210 26
 1388 0024 174A     		ldr	r2, .L7+4
 1389 0026 7B68     		ldr	r3, [r7, #4]
 1390 0028 D360     		str	r3, [r2, #12]
 211:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       FuncDriver.GetXSize(DrawProp->LcdDevice, &DrawProp[DrawProp->LcdLayer].LcdXsize);
 1391              		.loc 1 211 17
 1392 002a 154B     		ldr	r3, .L7
 1393 002c DB69     		ldr	r3, [r3, #28]
 1394              		.loc 1 211 7
 1395 002e 154A     		ldr	r2, .L7+4
 1396 0030 1069     		ldr	r0, [r2, #16]
 1397              		.loc 1 211 66
 1398 0032 144A     		ldr	r2, .L7+4
 1399 0034 D268     		ldr	r2, [r2, #12]
 1400              		.loc 1 211 7
 1401 0036 5201     		lsls	r2, r2, #5
 1402 0038 1032     		adds	r2, r2, #16
 1403 003a 1249     		ldr	r1, .L7+4
ARM GAS  /tmp/ccK9mPCc.s 			page 88


 1404 003c 0A44     		add	r2, r2, r1
 1405 003e 0432     		adds	r2, r2, #4
 1406 0040 1146     		mov	r1, r2
 1407 0042 9847     		blx	r3
 1408              	.LVL4:
 212:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       FuncDriver.GetYSize(DrawProp->LcdDevice, &DrawProp[DrawProp->LcdLayer].LcdYsize);
 1409              		.loc 1 212 17
 1410 0044 0E4B     		ldr	r3, .L7
 1411 0046 1B6A     		ldr	r3, [r3, #32]
 1412              		.loc 1 212 7
 1413 0048 0E4A     		ldr	r2, .L7+4
 1414 004a 1069     		ldr	r0, [r2, #16]
 1415              		.loc 1 212 66
 1416 004c 0D4A     		ldr	r2, .L7+4
 1417 004e D268     		ldr	r2, [r2, #12]
 1418              		.loc 1 212 7
 1419 0050 5201     		lsls	r2, r2, #5
 1420 0052 1832     		adds	r2, r2, #24
 1421 0054 0B49     		ldr	r1, .L7+4
 1422 0056 0A44     		add	r2, r2, r1
 1423 0058 1146     		mov	r1, r2
 1424 005a 9847     		blx	r3
 1425              	.LVL5:
 213:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       FuncDriver.GetFormat(DrawProp->LcdDevice, &DrawProp[DrawProp->LcdLayer].LcdPixelFormat);
 1426              		.loc 1 213 17
 1427 005c 084B     		ldr	r3, .L7
 1428 005e 9B6A     		ldr	r3, [r3, #40]
 1429              		.loc 1 213 7
 1430 0060 084A     		ldr	r2, .L7+4
 1431 0062 1069     		ldr	r0, [r2, #16]
 1432              		.loc 1 213 67
 1433 0064 074A     		ldr	r2, .L7+4
 1434 0066 D268     		ldr	r2, [r2, #12]
 1435              		.loc 1 213 7
 1436 0068 5201     		lsls	r2, r2, #5
 1437 006a 1832     		adds	r2, r2, #24
 1438 006c 0549     		ldr	r1, .L7+4
 1439 006e 0A44     		add	r2, r2, r1
 1440 0070 0432     		adds	r2, r2, #4
 1441 0072 1146     		mov	r1, r2
 1442 0074 9847     		blx	r3
 1443              	.LVL6:
 1444              	.L6:
 214:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 215:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 216:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 1445              		.loc 1 216 1
 1446 0076 00BF     		nop
 1447 0078 0837     		adds	r7, r7, #8
 1448              		.cfi_def_cfa_offset 8
 1449 007a BD46     		mov	sp, r7
 1450              		.cfi_def_cfa_register 13
 1451              		@ sp needed
 1452 007c 80BD     		pop	{r7, pc}
 1453              	.L8:
 1454 007e 00BF     		.align	2
 1455              	.L7:
ARM GAS  /tmp/ccK9mPCc.s 			page 89


 1456 0080 00000000 		.word	FuncDriver
 1457 0084 00000000 		.word	DrawProp
 1458              		.cfi_endproc
 1459              	.LFE1:
 1461              		.section	.text.UTIL_LCD_SetDevice,"ax",%progbits
 1462              		.align	1
 1463              		.global	UTIL_LCD_SetDevice
 1464              		.syntax unified
 1465              		.thumb
 1466              		.thumb_func
 1468              	UTIL_LCD_SetDevice:
 1469              	.LFB2:
 217:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 218:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 219:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Set the LCD instance to be used.
 220:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Device  LCD instance
 221:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 222:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_SetDevice(uint32_t Device)
 223:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 1470              		.loc 1 223 1
 1471              		.cfi_startproc
 1472              		@ args = 0, pretend = 0, frame = 8
 1473              		@ frame_needed = 1, uses_anonymous_args = 0
 1474 0000 80B5     		push	{r7, lr}
 1475              		.cfi_def_cfa_offset 8
 1476              		.cfi_offset 7, -8
 1477              		.cfi_offset 14, -4
 1478 0002 82B0     		sub	sp, sp, #8
 1479              		.cfi_def_cfa_offset 16
 1480 0004 00AF     		add	r7, sp, #0
 1481              		.cfi_def_cfa_register 7
 1482 0006 7860     		str	r0, [r7, #4]
 224:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   DrawProp->LcdDevice = Device;
 1483              		.loc 1 224 23
 1484 0008 094A     		ldr	r2, .L10
 1485 000a 7B68     		ldr	r3, [r7, #4]
 1486 000c 1361     		str	r3, [r2, #16]
 225:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   FuncDriver.GetXSize(Device, &DrawProp->LcdXsize);
 1487              		.loc 1 225 13
 1488 000e 094B     		ldr	r3, .L10+4
 1489 0010 DB69     		ldr	r3, [r3, #28]
 1490              		.loc 1 225 3
 1491 0012 094A     		ldr	r2, .L10+8
 1492 0014 1146     		mov	r1, r2
 1493 0016 7868     		ldr	r0, [r7, #4]
 1494 0018 9847     		blx	r3
 1495              	.LVL7:
 226:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   FuncDriver.GetYSize(Device, &DrawProp->LcdYsize);
 1496              		.loc 1 226 13
 1497 001a 064B     		ldr	r3, .L10+4
 1498 001c 1B6A     		ldr	r3, [r3, #32]
 1499              		.loc 1 226 3
 1500 001e 074A     		ldr	r2, .L10+12
 1501 0020 1146     		mov	r1, r2
 1502 0022 7868     		ldr	r0, [r7, #4]
 1503 0024 9847     		blx	r3
 1504              	.LVL8:
ARM GAS  /tmp/ccK9mPCc.s 			page 90


 227:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 1505              		.loc 1 227 1
 1506 0026 00BF     		nop
 1507 0028 0837     		adds	r7, r7, #8
 1508              		.cfi_def_cfa_offset 8
 1509 002a BD46     		mov	sp, r7
 1510              		.cfi_def_cfa_register 13
 1511              		@ sp needed
 1512 002c 80BD     		pop	{r7, pc}
 1513              	.L11:
 1514 002e 00BF     		.align	2
 1515              	.L10:
 1516 0030 00000000 		.word	DrawProp
 1517 0034 00000000 		.word	FuncDriver
 1518 0038 14000000 		.word	DrawProp+20
 1519 003c 18000000 		.word	DrawProp+24
 1520              		.cfi_endproc
 1521              	.LFE2:
 1523              		.section	.text.UTIL_LCD_SetTextColor,"ax",%progbits
 1524              		.align	1
 1525              		.global	UTIL_LCD_SetTextColor
 1526              		.syntax unified
 1527              		.thumb
 1528              		.thumb_func
 1530              	UTIL_LCD_SetTextColor:
 1531              	.LFB3:
 228:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 229:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 230:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Sets the LCD text color.
 231:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Color  Text color code
 232:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 233:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_SetTextColor(uint32_t Color)
 234:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 1532              		.loc 1 234 1
 1533              		.cfi_startproc
 1534              		@ args = 0, pretend = 0, frame = 8
 1535              		@ frame_needed = 1, uses_anonymous_args = 0
 1536              		@ link register save eliminated.
 1537 0000 80B4     		push	{r7}
 1538              		.cfi_def_cfa_offset 4
 1539              		.cfi_offset 7, -4
 1540 0002 83B0     		sub	sp, sp, #12
 1541              		.cfi_def_cfa_offset 16
 1542 0004 00AF     		add	r7, sp, #0
 1543              		.cfi_def_cfa_register 7
 1544 0006 7860     		str	r0, [r7, #4]
 235:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   DrawProp[DrawProp->LcdLayer].TextColor = Color;
 1545              		.loc 1 235 20
 1546 0008 064B     		ldr	r3, .L13
 1547 000a DB68     		ldr	r3, [r3, #12]
 1548              		.loc 1 235 42
 1549 000c 054A     		ldr	r2, .L13
 1550 000e 5B01     		lsls	r3, r3, #5
 1551 0010 1344     		add	r3, r3, r2
 1552 0012 7A68     		ldr	r2, [r7, #4]
 1553 0014 1A60     		str	r2, [r3]
 236:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
ARM GAS  /tmp/ccK9mPCc.s 			page 91


 1554              		.loc 1 236 1
 1555 0016 00BF     		nop
 1556 0018 0C37     		adds	r7, r7, #12
 1557              		.cfi_def_cfa_offset 4
 1558 001a BD46     		mov	sp, r7
 1559              		.cfi_def_cfa_register 13
 1560              		@ sp needed
 1561 001c 5DF8047B 		ldr	r7, [sp], #4
 1562              		.cfi_restore 7
 1563              		.cfi_def_cfa_offset 0
 1564 0020 7047     		bx	lr
 1565              	.L14:
 1566 0022 00BF     		.align	2
 1567              	.L13:
 1568 0024 00000000 		.word	DrawProp
 1569              		.cfi_endproc
 1570              	.LFE3:
 1572              		.section	.text.UTIL_LCD_GetTextColor,"ax",%progbits
 1573              		.align	1
 1574              		.global	UTIL_LCD_GetTextColor
 1575              		.syntax unified
 1576              		.thumb
 1577              		.thumb_func
 1579              	UTIL_LCD_GetTextColor:
 1580              	.LFB4:
 237:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 238:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 239:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Gets the LCD text color.
 240:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @retval Used text color.
 241:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 242:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** uint32_t UTIL_LCD_GetTextColor(void)
 243:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 1581              		.loc 1 243 1
 1582              		.cfi_startproc
 1583              		@ args = 0, pretend = 0, frame = 0
 1584              		@ frame_needed = 1, uses_anonymous_args = 0
 1585              		@ link register save eliminated.
 1586 0000 80B4     		push	{r7}
 1587              		.cfi_def_cfa_offset 4
 1588              		.cfi_offset 7, -4
 1589 0002 00AF     		add	r7, sp, #0
 1590              		.cfi_def_cfa_register 7
 244:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   return DrawProp[DrawProp->LcdLayer].TextColor;
 1591              		.loc 1 244 27
 1592 0004 054B     		ldr	r3, .L17
 1593 0006 DB68     		ldr	r3, [r3, #12]
 1594              		.loc 1 244 38
 1595 0008 044A     		ldr	r2, .L17
 1596 000a 5B01     		lsls	r3, r3, #5
 1597 000c 1344     		add	r3, r3, r2
 1598 000e 1B68     		ldr	r3, [r3]
 245:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 1599              		.loc 1 245 1
 1600 0010 1846     		mov	r0, r3
 1601 0012 BD46     		mov	sp, r7
 1602              		.cfi_def_cfa_register 13
 1603              		@ sp needed
ARM GAS  /tmp/ccK9mPCc.s 			page 92


 1604 0014 5DF8047B 		ldr	r7, [sp], #4
 1605              		.cfi_restore 7
 1606              		.cfi_def_cfa_offset 0
 1607 0018 7047     		bx	lr
 1608              	.L18:
 1609 001a 00BF     		.align	2
 1610              	.L17:
 1611 001c 00000000 		.word	DrawProp
 1612              		.cfi_endproc
 1613              	.LFE4:
 1615              		.section	.text.UTIL_LCD_SetBackColor,"ax",%progbits
 1616              		.align	1
 1617              		.global	UTIL_LCD_SetBackColor
 1618              		.syntax unified
 1619              		.thumb
 1620              		.thumb_func
 1622              	UTIL_LCD_SetBackColor:
 1623              	.LFB5:
 246:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 247:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 248:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Sets the LCD background color.
 249:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Color  Layer background color code
 250:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 251:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_SetBackColor(uint32_t Color)
 252:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 1624              		.loc 1 252 1
 1625              		.cfi_startproc
 1626              		@ args = 0, pretend = 0, frame = 8
 1627              		@ frame_needed = 1, uses_anonymous_args = 0
 1628              		@ link register save eliminated.
 1629 0000 80B4     		push	{r7}
 1630              		.cfi_def_cfa_offset 4
 1631              		.cfi_offset 7, -4
 1632 0002 83B0     		sub	sp, sp, #12
 1633              		.cfi_def_cfa_offset 16
 1634 0004 00AF     		add	r7, sp, #0
 1635              		.cfi_def_cfa_register 7
 1636 0006 7860     		str	r0, [r7, #4]
 253:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   DrawProp[DrawProp->LcdLayer].BackColor = Color;
 1637              		.loc 1 253 20
 1638 0008 064B     		ldr	r3, .L20
 1639 000a DB68     		ldr	r3, [r3, #12]
 1640              		.loc 1 253 42
 1641 000c 054A     		ldr	r2, .L20
 1642 000e 5B01     		lsls	r3, r3, #5
 1643 0010 1344     		add	r3, r3, r2
 1644 0012 0433     		adds	r3, r3, #4
 1645 0014 7A68     		ldr	r2, [r7, #4]
 1646 0016 1A60     		str	r2, [r3]
 254:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 1647              		.loc 1 254 1
 1648 0018 00BF     		nop
 1649 001a 0C37     		adds	r7, r7, #12
 1650              		.cfi_def_cfa_offset 4
 1651 001c BD46     		mov	sp, r7
 1652              		.cfi_def_cfa_register 13
 1653              		@ sp needed
ARM GAS  /tmp/ccK9mPCc.s 			page 93


 1654 001e 5DF8047B 		ldr	r7, [sp], #4
 1655              		.cfi_restore 7
 1656              		.cfi_def_cfa_offset 0
 1657 0022 7047     		bx	lr
 1658              	.L21:
 1659              		.align	2
 1660              	.L20:
 1661 0024 00000000 		.word	DrawProp
 1662              		.cfi_endproc
 1663              	.LFE5:
 1665              		.section	.text.UTIL_LCD_GetBackColor,"ax",%progbits
 1666              		.align	1
 1667              		.global	UTIL_LCD_GetBackColor
 1668              		.syntax unified
 1669              		.thumb
 1670              		.thumb_func
 1672              	UTIL_LCD_GetBackColor:
 1673              	.LFB6:
 255:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 256:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 257:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Gets the LCD background color.
 258:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @retval Used background color
 259:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 260:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** uint32_t UTIL_LCD_GetBackColor(void)
 261:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 1674              		.loc 1 261 1
 1675              		.cfi_startproc
 1676              		@ args = 0, pretend = 0, frame = 0
 1677              		@ frame_needed = 1, uses_anonymous_args = 0
 1678              		@ link register save eliminated.
 1679 0000 80B4     		push	{r7}
 1680              		.cfi_def_cfa_offset 4
 1681              		.cfi_offset 7, -4
 1682 0002 00AF     		add	r7, sp, #0
 1683              		.cfi_def_cfa_register 7
 262:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   return DrawProp[DrawProp->LcdLayer].BackColor;
 1684              		.loc 1 262 27
 1685 0004 054B     		ldr	r3, .L24
 1686 0006 DB68     		ldr	r3, [r3, #12]
 1687              		.loc 1 262 38
 1688 0008 044A     		ldr	r2, .L24
 1689 000a 5B01     		lsls	r3, r3, #5
 1690 000c 1344     		add	r3, r3, r2
 1691 000e 0433     		adds	r3, r3, #4
 1692 0010 1B68     		ldr	r3, [r3]
 263:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 1693              		.loc 1 263 1
 1694 0012 1846     		mov	r0, r3
 1695 0014 BD46     		mov	sp, r7
 1696              		.cfi_def_cfa_register 13
 1697              		@ sp needed
 1698 0016 5DF8047B 		ldr	r7, [sp], #4
 1699              		.cfi_restore 7
 1700              		.cfi_def_cfa_offset 0
 1701 001a 7047     		bx	lr
 1702              	.L25:
 1703              		.align	2
ARM GAS  /tmp/ccK9mPCc.s 			page 94


 1704              	.L24:
 1705 001c 00000000 		.word	DrawProp
 1706              		.cfi_endproc
 1707              	.LFE6:
 1709              		.section	.text.UTIL_LCD_SetFont,"ax",%progbits
 1710              		.align	1
 1711              		.global	UTIL_LCD_SetFont
 1712              		.syntax unified
 1713              		.thumb
 1714              		.thumb_func
 1716              	UTIL_LCD_SetFont:
 1717              	.LFB7:
 264:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 265:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 266:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Sets the LCD text font.
 267:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  fonts  Layer font to be used
 268:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 269:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_SetFont(sFONT *fonts)
 270:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 1718              		.loc 1 270 1
 1719              		.cfi_startproc
 1720              		@ args = 0, pretend = 0, frame = 8
 1721              		@ frame_needed = 1, uses_anonymous_args = 0
 1722              		@ link register save eliminated.
 1723 0000 80B4     		push	{r7}
 1724              		.cfi_def_cfa_offset 4
 1725              		.cfi_offset 7, -4
 1726 0002 83B0     		sub	sp, sp, #12
 1727              		.cfi_def_cfa_offset 16
 1728 0004 00AF     		add	r7, sp, #0
 1729              		.cfi_def_cfa_register 7
 1730 0006 7860     		str	r0, [r7, #4]
 271:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   DrawProp[DrawProp->LcdLayer].pFont = fonts;
 1731              		.loc 1 271 20
 1732 0008 064B     		ldr	r3, .L27
 1733 000a DB68     		ldr	r3, [r3, #12]
 1734              		.loc 1 271 38
 1735 000c 054A     		ldr	r2, .L27
 1736 000e 5B01     		lsls	r3, r3, #5
 1737 0010 1344     		add	r3, r3, r2
 1738 0012 0833     		adds	r3, r3, #8
 1739 0014 7A68     		ldr	r2, [r7, #4]
 1740 0016 1A60     		str	r2, [r3]
 272:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 1741              		.loc 1 272 1
 1742 0018 00BF     		nop
 1743 001a 0C37     		adds	r7, r7, #12
 1744              		.cfi_def_cfa_offset 4
 1745 001c BD46     		mov	sp, r7
 1746              		.cfi_def_cfa_register 13
 1747              		@ sp needed
 1748 001e 5DF8047B 		ldr	r7, [sp], #4
 1749              		.cfi_restore 7
 1750              		.cfi_def_cfa_offset 0
 1751 0022 7047     		bx	lr
 1752              	.L28:
 1753              		.align	2
ARM GAS  /tmp/ccK9mPCc.s 			page 95


 1754              	.L27:
 1755 0024 00000000 		.word	DrawProp
 1756              		.cfi_endproc
 1757              	.LFE7:
 1759              		.section	.text.UTIL_LCD_GetFont,"ax",%progbits
 1760              		.align	1
 1761              		.global	UTIL_LCD_GetFont
 1762              		.syntax unified
 1763              		.thumb
 1764              		.thumb_func
 1766              	UTIL_LCD_GetFont:
 1767              	.LFB8:
 273:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 274:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 275:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Gets the LCD text font.
 276:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @retval Used layer font
 277:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 278:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** sFONT *UTIL_LCD_GetFont(void)
 279:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 1768              		.loc 1 279 1
 1769              		.cfi_startproc
 1770              		@ args = 0, pretend = 0, frame = 0
 1771              		@ frame_needed = 1, uses_anonymous_args = 0
 1772              		@ link register save eliminated.
 1773 0000 80B4     		push	{r7}
 1774              		.cfi_def_cfa_offset 4
 1775              		.cfi_offset 7, -4
 1776 0002 00AF     		add	r7, sp, #0
 1777              		.cfi_def_cfa_register 7
 280:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   return DrawProp[DrawProp->LcdLayer].pFont;
 1778              		.loc 1 280 27
 1779 0004 054B     		ldr	r3, .L31
 1780 0006 DB68     		ldr	r3, [r3, #12]
 1781              		.loc 1 280 38
 1782 0008 044A     		ldr	r2, .L31
 1783 000a 5B01     		lsls	r3, r3, #5
 1784 000c 1344     		add	r3, r3, r2
 1785 000e 0833     		adds	r3, r3, #8
 1786 0010 1B68     		ldr	r3, [r3]
 281:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 1787              		.loc 1 281 1
 1788 0012 1846     		mov	r0, r3
 1789 0014 BD46     		mov	sp, r7
 1790              		.cfi_def_cfa_register 13
 1791              		@ sp needed
 1792 0016 5DF8047B 		ldr	r7, [sp], #4
 1793              		.cfi_restore 7
 1794              		.cfi_def_cfa_offset 0
 1795 001a 7047     		bx	lr
 1796              	.L32:
 1797              		.align	2
 1798              	.L31:
 1799 001c 00000000 		.word	DrawProp
 1800              		.cfi_endproc
 1801              	.LFE8:
 1803              		.section	.text.UTIL_LCD_FillRGBRect,"ax",%progbits
 1804              		.align	1
ARM GAS  /tmp/ccK9mPCc.s 			page 96


 1805              		.global	UTIL_LCD_FillRGBRect
 1806              		.syntax unified
 1807              		.thumb
 1808              		.thumb_func
 1810              	UTIL_LCD_FillRGBRect:
 1811              	.LFB9:
 282:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 283:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 284:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Draws a RGB rectangle in currently active layer.
 285:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  pData   Pointer to RGB rectangle data
 286:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Xpos    X position
 287:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Ypos    Y position
 288:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Length  Line length
 289:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 290:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t He
 291:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 1812              		.loc 1 291 1
 1813              		.cfi_startproc
 1814              		@ args = 4, pretend = 0, frame = 16
 1815              		@ frame_needed = 1, uses_anonymous_args = 0
 1816 0000 90B5     		push	{r4, r7, lr}
 1817              		.cfi_def_cfa_offset 12
 1818              		.cfi_offset 4, -12
 1819              		.cfi_offset 7, -8
 1820              		.cfi_offset 14, -4
 1821 0002 87B0     		sub	sp, sp, #28
 1822              		.cfi_def_cfa_offset 40
 1823 0004 02AF     		add	r7, sp, #8
 1824              		.cfi_def_cfa 7, 32
 1825 0006 F860     		str	r0, [r7, #12]
 1826 0008 B960     		str	r1, [r7, #8]
 1827 000a 7A60     		str	r2, [r7, #4]
 1828 000c 3B60     		str	r3, [r7]
 292:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   /* Write RGB rectangle data */
 293:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 1829              		.loc 1 293 13
 1830 000e 084B     		ldr	r3, .L34
 1831 0010 5C68     		ldr	r4, [r3, #4]
 1832              		.loc 1 293 3
 1833 0012 084B     		ldr	r3, .L34+4
 1834 0014 1869     		ldr	r0, [r3, #16]
 1835 0016 3B6A     		ldr	r3, [r7, #32]
 1836 0018 0193     		str	r3, [sp, #4]
 1837 001a 3B68     		ldr	r3, [r7]
 1838 001c 0093     		str	r3, [sp]
 1839 001e 7B68     		ldr	r3, [r7, #4]
 1840 0020 BA68     		ldr	r2, [r7, #8]
 1841 0022 F968     		ldr	r1, [r7, #12]
 1842 0024 A047     		blx	r4
 1843              	.LVL9:
 294:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 1844              		.loc 1 294 1
 1845 0026 00BF     		nop
 1846 0028 1437     		adds	r7, r7, #20
 1847              		.cfi_def_cfa_offset 12
 1848 002a BD46     		mov	sp, r7
 1849              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccK9mPCc.s 			page 97


 1850              		@ sp needed
 1851 002c 90BD     		pop	{r4, r7, pc}
 1852              	.L35:
 1853 002e 00BF     		.align	2
 1854              	.L34:
 1855 0030 00000000 		.word	FuncDriver
 1856 0034 00000000 		.word	DrawProp
 1857              		.cfi_endproc
 1858              	.LFE9:
 1860              		.section	.text.UTIL_LCD_DrawHLine,"ax",%progbits
 1861              		.align	1
 1862              		.global	UTIL_LCD_DrawHLine
 1863              		.syntax unified
 1864              		.thumb
 1865              		.thumb_func
 1867              	UTIL_LCD_DrawHLine:
 1868              	.LFB10:
 295:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 296:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 297:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Draws an horizontal line in currently active layer.
 298:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Xpos    X position
 299:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Ypos    Y position
 300:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Length  Line length
 301:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Color   Draw color
 302:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 303:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
 304:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 1869              		.loc 1 304 1
 1870              		.cfi_startproc
 1871              		@ args = 0, pretend = 0, frame = 16
 1872              		@ frame_needed = 1, uses_anonymous_args = 0
 1873 0000 90B5     		push	{r4, r7, lr}
 1874              		.cfi_def_cfa_offset 12
 1875              		.cfi_offset 4, -12
 1876              		.cfi_offset 7, -8
 1877              		.cfi_offset 14, -4
 1878 0002 87B0     		sub	sp, sp, #28
 1879              		.cfi_def_cfa_offset 40
 1880 0004 02AF     		add	r7, sp, #8
 1881              		.cfi_def_cfa 7, 32
 1882 0006 F860     		str	r0, [r7, #12]
 1883 0008 B960     		str	r1, [r7, #8]
 1884 000a 7A60     		str	r2, [r7, #4]
 1885 000c 3B60     		str	r3, [r7]
 305:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   /* Write line */
 306:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 1886              		.loc 1 306 23
 1887 000e 364B     		ldr	r3, .L42
 1888 0010 DB68     		ldr	r3, [r3, #12]
 1889              		.loc 1 306 34
 1890 0012 354A     		ldr	r2, .L42
 1891 0014 5B01     		lsls	r3, r3, #5
 1892 0016 1344     		add	r3, r3, r2
 1893 0018 1C33     		adds	r3, r3, #28
 1894 001a 1B68     		ldr	r3, [r3]
 1895              		.loc 1 306 5
 1896 001c 022B     		cmp	r3, #2
ARM GAS  /tmp/ccK9mPCc.s 			page 98


 1897 001e 18D1     		bne	.L37
 307:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 308:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 1898              		.loc 1 308 15
 1899 0020 324B     		ldr	r3, .L42+4
 1900 0022 9C68     		ldr	r4, [r3, #8]
 1901              		.loc 1 308 5
 1902 0024 304B     		ldr	r3, .L42
 1903 0026 1869     		ldr	r0, [r3, #16]
 1904              		.loc 1 308 67
 1905 0028 3B68     		ldr	r3, [r7]
 1906 002a DB08     		lsrs	r3, r3, #3
 1907 002c 03F01F02 		and	r2, r3, #31
 1908 0030 3B68     		ldr	r3, [r7]
 1909 0032 9B0A     		lsrs	r3, r3, #10
 1910 0034 5B01     		lsls	r3, r3, #5
 1911 0036 03F4FC63 		and	r3, r3, #2016
 1912 003a 1A43     		orrs	r2, r2, r3
 1913 003c 3B68     		ldr	r3, [r7]
 1914 003e DB0C     		lsrs	r3, r3, #19
 1915 0040 DB02     		lsls	r3, r3, #11
 1916 0042 9BB2     		uxth	r3, r3
 1917              		.loc 1 308 5
 1918 0044 1343     		orrs	r3, r3, r2
 1919 0046 0093     		str	r3, [sp]
 1920 0048 7B68     		ldr	r3, [r7, #4]
 1921 004a BA68     		ldr	r2, [r7, #8]
 1922 004c F968     		ldr	r1, [r7, #12]
 1923 004e A047     		blx	r4
 1924              	.LVL10:
 309:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 310:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
 311:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 312:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB888(Color));
 313:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 314:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
 315:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 316:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882ARGB4444(Color));
 317:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 318:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   else /*LCD_PIXEL_FORMAT_ARGB8888*/
 319:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 320:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 321:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 322:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 1925              		.loc 1 322 1
 1926 0050 45E0     		b	.L41
 1927              	.L37:
 310:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 1928              		.loc 1 310 28
 1929 0052 254B     		ldr	r3, .L42
 1930 0054 DB68     		ldr	r3, [r3, #12]
 310:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 1931              		.loc 1 310 39
 1932 0056 244A     		ldr	r2, .L42
 1933 0058 5B01     		lsls	r3, r3, #5
 1934 005a 1344     		add	r3, r3, r2
 1935 005c 1C33     		adds	r3, r3, #28
ARM GAS  /tmp/ccK9mPCc.s 			page 99


 1936 005e 1B68     		ldr	r3, [r3]
 310:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 1937              		.loc 1 310 10
 1938 0060 012B     		cmp	r3, #1
 1939 0062 0CD1     		bne	.L39
 312:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 1940              		.loc 1 312 15
 1941 0064 214B     		ldr	r3, .L42+4
 1942 0066 9C68     		ldr	r4, [r3, #8]
 312:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 1943              		.loc 1 312 5
 1944 0068 1F4B     		ldr	r3, .L42
 1945 006a 1869     		ldr	r0, [r3, #16]
 1946 006c 3B68     		ldr	r3, [r7]
 1947 006e 23F07F43 		bic	r3, r3, #-16777216
 1948 0072 0093     		str	r3, [sp]
 1949 0074 7B68     		ldr	r3, [r7, #4]
 1950 0076 BA68     		ldr	r2, [r7, #8]
 1951 0078 F968     		ldr	r1, [r7, #12]
 1952 007a A047     		blx	r4
 1953              	.LVL11:
 1954              		.loc 1 322 1
 1955 007c 2FE0     		b	.L41
 1956              	.L39:
 314:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 1957              		.loc 1 314 28
 1958 007e 1A4B     		ldr	r3, .L42
 1959 0080 DB68     		ldr	r3, [r3, #12]
 314:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 1960              		.loc 1 314 39
 1961 0082 194A     		ldr	r2, .L42
 1962 0084 5B01     		lsls	r3, r3, #5
 1963 0086 1344     		add	r3, r3, r2
 1964 0088 1C33     		adds	r3, r3, #28
 1965 008a 1B68     		ldr	r3, [r3]
 314:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 1966              		.loc 1 314 10
 1967 008c 042B     		cmp	r3, #4
 1968 008e 1CD1     		bne	.L40
 316:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 1969              		.loc 1 316 15
 1970 0090 164B     		ldr	r3, .L42+4
 1971 0092 9C68     		ldr	r4, [r3, #8]
 316:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 1972              		.loc 1 316 5
 1973 0094 144B     		ldr	r3, .L42
 1974 0096 1869     		ldr	r0, [r3, #16]
 316:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 1975              		.loc 1 316 67
 1976 0098 3B68     		ldr	r3, [r7]
 1977 009a 1B09     		lsrs	r3, r3, #4
 1978 009c 03F00F02 		and	r2, r3, #15
 1979 00a0 3B68     		ldr	r3, [r7]
 1980 00a2 1B0B     		lsrs	r3, r3, #12
 1981 00a4 1B01     		lsls	r3, r3, #4
 1982 00a6 DBB2     		uxtb	r3, r3
 1983 00a8 1A43     		orrs	r2, r2, r3
ARM GAS  /tmp/ccK9mPCc.s 			page 100


 1984 00aa 3B68     		ldr	r3, [r7]
 1985 00ac 1B0D     		lsrs	r3, r3, #20
 1986 00ae 1B02     		lsls	r3, r3, #8
 1987 00b0 03F47063 		and	r3, r3, #3840
 1988 00b4 1A43     		orrs	r2, r2, r3
 1989 00b6 3B68     		ldr	r3, [r7]
 1990 00b8 1B0F     		lsrs	r3, r3, #28
 1991 00ba 1B03     		lsls	r3, r3, #12
 316:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 1992              		.loc 1 316 5
 1993 00bc 1343     		orrs	r3, r3, r2
 1994 00be 0093     		str	r3, [sp]
 1995 00c0 7B68     		ldr	r3, [r7, #4]
 1996 00c2 BA68     		ldr	r2, [r7, #8]
 1997 00c4 F968     		ldr	r1, [r7, #12]
 1998 00c6 A047     		blx	r4
 1999              	.LVL12:
 2000              		.loc 1 322 1
 2001 00c8 09E0     		b	.L41
 2002              	.L40:
 320:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2003              		.loc 1 320 15
 2004 00ca 084B     		ldr	r3, .L42+4
 2005 00cc 9C68     		ldr	r4, [r3, #8]
 320:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2006              		.loc 1 320 5
 2007 00ce 064B     		ldr	r3, .L42
 2008 00d0 1869     		ldr	r0, [r3, #16]
 2009 00d2 3B68     		ldr	r3, [r7]
 2010 00d4 0093     		str	r3, [sp]
 2011 00d6 7B68     		ldr	r3, [r7, #4]
 2012 00d8 BA68     		ldr	r2, [r7, #8]
 2013 00da F968     		ldr	r1, [r7, #12]
 2014 00dc A047     		blx	r4
 2015              	.LVL13:
 2016              	.L41:
 2017              		.loc 1 322 1
 2018 00de 00BF     		nop
 2019 00e0 1437     		adds	r7, r7, #20
 2020              		.cfi_def_cfa_offset 12
 2021 00e2 BD46     		mov	sp, r7
 2022              		.cfi_def_cfa_register 13
 2023              		@ sp needed
 2024 00e4 90BD     		pop	{r4, r7, pc}
 2025              	.L43:
 2026 00e6 00BF     		.align	2
 2027              	.L42:
 2028 00e8 00000000 		.word	DrawProp
 2029 00ec 00000000 		.word	FuncDriver
 2030              		.cfi_endproc
 2031              	.LFE10:
 2033              		.section	.text.UTIL_LCD_DrawVLine,"ax",%progbits
 2034              		.align	1
 2035              		.global	UTIL_LCD_DrawVLine
 2036              		.syntax unified
 2037              		.thumb
 2038              		.thumb_func
ARM GAS  /tmp/ccK9mPCc.s 			page 101


 2040              	UTIL_LCD_DrawVLine:
 2041              	.LFB11:
 323:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 324:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 325:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Draws a vertical line in currently active layer.
 326:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Xpos    X position
 327:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Ypos    Y position
 328:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Length  Line length
 329:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Color   Draw color
 330:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 331:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
 332:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 2042              		.loc 1 332 1
 2043              		.cfi_startproc
 2044              		@ args = 0, pretend = 0, frame = 16
 2045              		@ frame_needed = 1, uses_anonymous_args = 0
 2046 0000 90B5     		push	{r4, r7, lr}
 2047              		.cfi_def_cfa_offset 12
 2048              		.cfi_offset 4, -12
 2049              		.cfi_offset 7, -8
 2050              		.cfi_offset 14, -4
 2051 0002 87B0     		sub	sp, sp, #28
 2052              		.cfi_def_cfa_offset 40
 2053 0004 02AF     		add	r7, sp, #8
 2054              		.cfi_def_cfa 7, 32
 2055 0006 F860     		str	r0, [r7, #12]
 2056 0008 B960     		str	r1, [r7, #8]
 2057 000a 7A60     		str	r2, [r7, #4]
 2058 000c 3B60     		str	r3, [r7]
 333:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   /* Write line */
 334:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 2059              		.loc 1 334 23
 2060 000e 364B     		ldr	r3, .L50
 2061 0010 DB68     		ldr	r3, [r3, #12]
 2062              		.loc 1 334 34
 2063 0012 354A     		ldr	r2, .L50
 2064 0014 5B01     		lsls	r3, r3, #5
 2065 0016 1344     		add	r3, r3, r2
 2066 0018 1C33     		adds	r3, r3, #28
 2067 001a 1B68     		ldr	r3, [r3]
 2068              		.loc 1 334 5
 2069 001c 022B     		cmp	r3, #2
 2070 001e 18D1     		bne	.L45
 335:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 336:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 2071              		.loc 1 336 15
 2072 0020 324B     		ldr	r3, .L50+4
 2073 0022 DC68     		ldr	r4, [r3, #12]
 2074              		.loc 1 336 5
 2075 0024 304B     		ldr	r3, .L50
 2076 0026 1869     		ldr	r0, [r3, #16]
 2077              		.loc 1 336 67
 2078 0028 3B68     		ldr	r3, [r7]
 2079 002a DB08     		lsrs	r3, r3, #3
 2080 002c 03F01F02 		and	r2, r3, #31
 2081 0030 3B68     		ldr	r3, [r7]
 2082 0032 9B0A     		lsrs	r3, r3, #10
ARM GAS  /tmp/ccK9mPCc.s 			page 102


 2083 0034 5B01     		lsls	r3, r3, #5
 2084 0036 03F4FC63 		and	r3, r3, #2016
 2085 003a 1A43     		orrs	r2, r2, r3
 2086 003c 3B68     		ldr	r3, [r7]
 2087 003e DB0C     		lsrs	r3, r3, #19
 2088 0040 DB02     		lsls	r3, r3, #11
 2089 0042 9BB2     		uxth	r3, r3
 2090              		.loc 1 336 5
 2091 0044 1343     		orrs	r3, r3, r2
 2092 0046 0093     		str	r3, [sp]
 2093 0048 7B68     		ldr	r3, [r7, #4]
 2094 004a BA68     		ldr	r2, [r7, #8]
 2095 004c F968     		ldr	r1, [r7, #12]
 2096 004e A047     		blx	r4
 2097              	.LVL14:
 337:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 338:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
 339:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 340:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB888(Color));
 341:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 342:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
 343:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 344:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882ARGB4444(Color));
 345:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 346:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   else /*LCD_PIXEL_FORMAT_ARGB888*/
 347:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 348:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 349:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 350:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 2098              		.loc 1 350 1
 2099 0050 45E0     		b	.L49
 2100              	.L45:
 338:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 2101              		.loc 1 338 28
 2102 0052 254B     		ldr	r3, .L50
 2103 0054 DB68     		ldr	r3, [r3, #12]
 338:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 2104              		.loc 1 338 39
 2105 0056 244A     		ldr	r2, .L50
 2106 0058 5B01     		lsls	r3, r3, #5
 2107 005a 1344     		add	r3, r3, r2
 2108 005c 1C33     		adds	r3, r3, #28
 2109 005e 1B68     		ldr	r3, [r3]
 338:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 2110              		.loc 1 338 10
 2111 0060 012B     		cmp	r3, #1
 2112 0062 0CD1     		bne	.L47
 340:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2113              		.loc 1 340 15
 2114 0064 214B     		ldr	r3, .L50+4
 2115 0066 DC68     		ldr	r4, [r3, #12]
 340:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2116              		.loc 1 340 5
 2117 0068 1F4B     		ldr	r3, .L50
 2118 006a 1869     		ldr	r0, [r3, #16]
 2119 006c 3B68     		ldr	r3, [r7]
 2120 006e 23F07F43 		bic	r3, r3, #-16777216
ARM GAS  /tmp/ccK9mPCc.s 			page 103


 2121 0072 0093     		str	r3, [sp]
 2122 0074 7B68     		ldr	r3, [r7, #4]
 2123 0076 BA68     		ldr	r2, [r7, #8]
 2124 0078 F968     		ldr	r1, [r7, #12]
 2125 007a A047     		blx	r4
 2126              	.LVL15:
 2127              		.loc 1 350 1
 2128 007c 2FE0     		b	.L49
 2129              	.L47:
 342:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 2130              		.loc 1 342 28
 2131 007e 1A4B     		ldr	r3, .L50
 2132 0080 DB68     		ldr	r3, [r3, #12]
 342:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 2133              		.loc 1 342 39
 2134 0082 194A     		ldr	r2, .L50
 2135 0084 5B01     		lsls	r3, r3, #5
 2136 0086 1344     		add	r3, r3, r2
 2137 0088 1C33     		adds	r3, r3, #28
 2138 008a 1B68     		ldr	r3, [r3]
 342:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 2139              		.loc 1 342 10
 2140 008c 042B     		cmp	r3, #4
 2141 008e 1CD1     		bne	.L48
 344:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2142              		.loc 1 344 15
 2143 0090 164B     		ldr	r3, .L50+4
 2144 0092 DC68     		ldr	r4, [r3, #12]
 344:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2145              		.loc 1 344 5
 2146 0094 144B     		ldr	r3, .L50
 2147 0096 1869     		ldr	r0, [r3, #16]
 344:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2148              		.loc 1 344 67
 2149 0098 3B68     		ldr	r3, [r7]
 2150 009a 1B09     		lsrs	r3, r3, #4
 2151 009c 03F00F02 		and	r2, r3, #15
 2152 00a0 3B68     		ldr	r3, [r7]
 2153 00a2 1B0B     		lsrs	r3, r3, #12
 2154 00a4 1B01     		lsls	r3, r3, #4
 2155 00a6 DBB2     		uxtb	r3, r3
 2156 00a8 1A43     		orrs	r2, r2, r3
 2157 00aa 3B68     		ldr	r3, [r7]
 2158 00ac 1B0D     		lsrs	r3, r3, #20
 2159 00ae 1B02     		lsls	r3, r3, #8
 2160 00b0 03F47063 		and	r3, r3, #3840
 2161 00b4 1A43     		orrs	r2, r2, r3
 2162 00b6 3B68     		ldr	r3, [r7]
 2163 00b8 1B0F     		lsrs	r3, r3, #28
 2164 00ba 1B03     		lsls	r3, r3, #12
 344:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2165              		.loc 1 344 5
 2166 00bc 1343     		orrs	r3, r3, r2
 2167 00be 0093     		str	r3, [sp]
 2168 00c0 7B68     		ldr	r3, [r7, #4]
 2169 00c2 BA68     		ldr	r2, [r7, #8]
 2170 00c4 F968     		ldr	r1, [r7, #12]
ARM GAS  /tmp/ccK9mPCc.s 			page 104


 2171 00c6 A047     		blx	r4
 2172              	.LVL16:
 2173              		.loc 1 350 1
 2174 00c8 09E0     		b	.L49
 2175              	.L48:
 348:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2176              		.loc 1 348 15
 2177 00ca 084B     		ldr	r3, .L50+4
 2178 00cc DC68     		ldr	r4, [r3, #12]
 348:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2179              		.loc 1 348 5
 2180 00ce 064B     		ldr	r3, .L50
 2181 00d0 1869     		ldr	r0, [r3, #16]
 2182 00d2 3B68     		ldr	r3, [r7]
 2183 00d4 0093     		str	r3, [sp]
 2184 00d6 7B68     		ldr	r3, [r7, #4]
 2185 00d8 BA68     		ldr	r2, [r7, #8]
 2186 00da F968     		ldr	r1, [r7, #12]
 2187 00dc A047     		blx	r4
 2188              	.LVL17:
 2189              	.L49:
 2190              		.loc 1 350 1
 2191 00de 00BF     		nop
 2192 00e0 1437     		adds	r7, r7, #20
 2193              		.cfi_def_cfa_offset 12
 2194 00e2 BD46     		mov	sp, r7
 2195              		.cfi_def_cfa_register 13
 2196              		@ sp needed
 2197 00e4 90BD     		pop	{r4, r7, pc}
 2198              	.L51:
 2199 00e6 00BF     		.align	2
 2200              	.L50:
 2201 00e8 00000000 		.word	DrawProp
 2202 00ec 00000000 		.word	FuncDriver
 2203              		.cfi_endproc
 2204              	.LFE11:
 2206              		.section	.text.UTIL_LCD_GetPixel,"ax",%progbits
 2207              		.align	1
 2208              		.global	UTIL_LCD_GetPixel
 2209              		.syntax unified
 2210              		.thumb
 2211              		.thumb_func
 2213              	UTIL_LCD_GetPixel:
 2214              	.LFB12:
 351:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 352:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 353:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Read an LCD pixel.
 354:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Xpos     X position
 355:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Ypos     Y position
 356:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @retval Color    pixel color
 357:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 358:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_GetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t *Color)
 359:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 2215              		.loc 1 359 1
 2216              		.cfi_startproc
 2217              		@ args = 0, pretend = 0, frame = 8
 2218              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccK9mPCc.s 			page 105


 2219 0000 90B5     		push	{r4, r7, lr}
 2220              		.cfi_def_cfa_offset 12
 2221              		.cfi_offset 4, -12
 2222              		.cfi_offset 7, -8
 2223              		.cfi_offset 14, -4
 2224 0002 83B0     		sub	sp, sp, #12
 2225              		.cfi_def_cfa_offset 24
 2226 0004 00AF     		add	r7, sp, #0
 2227              		.cfi_def_cfa_register 7
 2228 0006 0346     		mov	r3, r0
 2229 0008 3A60     		str	r2, [r7]
 2230 000a FB80     		strh	r3, [r7, #6]	@ movhi
 2231 000c 0B46     		mov	r3, r1	@ movhi
 2232 000e BB80     		strh	r3, [r7, #4]	@ movhi
 360:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   /* Get Pixel */
 361:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   FuncDriver.GetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 2233              		.loc 1 361 13
 2234 0010 404B     		ldr	r3, .L57
 2235 0012 5C69     		ldr	r4, [r3, #20]
 2236              		.loc 1 361 3
 2237 0014 404B     		ldr	r3, .L57+4
 2238 0016 1869     		ldr	r0, [r3, #16]
 2239 0018 F988     		ldrh	r1, [r7, #6]
 2240 001a BA88     		ldrh	r2, [r7, #4]
 2241 001c 3B68     		ldr	r3, [r7]
 2242 001e A047     		blx	r4
 2243              	.LVL18:
 362:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 2244              		.loc 1 362 23
 2245 0020 3D4B     		ldr	r3, .L57+4
 2246 0022 DB68     		ldr	r3, [r3, #12]
 2247              		.loc 1 362 34
 2248 0024 3C4A     		ldr	r2, .L57+4
 2249 0026 5B01     		lsls	r3, r3, #5
 2250 0028 1344     		add	r3, r3, r2
 2251 002a 1C33     		adds	r3, r3, #28
 2252 002c 1B68     		ldr	r3, [r3]
 2253              		.loc 1 362 5
 2254 002e 022B     		cmp	r3, #2
 2255 0030 2BD1     		bne	.L53
 363:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 364:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     *Color = CONVERTRGB5652ARGB8888(*Color);
 2256              		.loc 1 364 14
 2257 0032 3B68     		ldr	r3, [r7]
 2258 0034 1B68     		ldr	r3, [r3]
 2259 0036 DB0A     		lsrs	r3, r3, #11
 2260 0038 03F01F02 		and	r2, r3, #31
 2261 003c 1346     		mov	r3, r2
 2262 003e 1B01     		lsls	r3, r3, #4
 2263 0040 1344     		add	r3, r3, r2
 2264 0042 5A01     		lsls	r2, r3, #5
 2265 0044 D31A     		subs	r3, r2, r3
 2266 0046 1733     		adds	r3, r3, #23
 2267 0048 9B09     		lsrs	r3, r3, #6
 2268 004a 1904     		lsls	r1, r3, #16
 2269 004c 3B68     		ldr	r3, [r7]
 2270 004e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccK9mPCc.s 			page 106


 2271 0050 5B09     		lsrs	r3, r3, #5
 2272 0052 03F03F02 		and	r2, r3, #63
 2273 0056 1346     		mov	r3, r2
 2274 0058 DB01     		lsls	r3, r3, #7
 2275 005a 1344     		add	r3, r3, r2
 2276 005c 5B00     		lsls	r3, r3, #1
 2277 005e 1344     		add	r3, r3, r2
 2278 0060 2133     		adds	r3, r3, #33
 2279 0062 9B09     		lsrs	r3, r3, #6
 2280 0064 1B02     		lsls	r3, r3, #8
 2281 0066 1943     		orrs	r1, r1, r3
 2282 0068 3B68     		ldr	r3, [r7]
 2283 006a 1B68     		ldr	r3, [r3]
 2284 006c 03F01F02 		and	r2, r3, #31
 2285 0070 1346     		mov	r3, r2
 2286 0072 1B01     		lsls	r3, r3, #4
 2287 0074 1344     		add	r3, r3, r2
 2288 0076 5A01     		lsls	r2, r3, #5
 2289 0078 D31A     		subs	r3, r2, r3
 2290 007a 1733     		adds	r3, r3, #23
 2291 007c 9B09     		lsrs	r3, r3, #6
 2292 007e 0B43     		orrs	r3, r3, r1
 2293 0080 43F07F42 		orr	r2, r3, #-16777216
 2294              		.loc 1 364 12
 2295 0084 3B68     		ldr	r3, [r7]
 2296 0086 1A60     		str	r2, [r3]
 365:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 366:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
 367:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 368:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     *Color = CONVERTRGB8882ARGB8888(*Color);
 369:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 370:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
 371:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 372:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     *Color = CONVERTARGB44442ARGB8888(*Color);
 373:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 374:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 2297              		.loc 1 374 1
 2298 0088 40E0     		b	.L56
 2299              	.L53:
 366:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 2300              		.loc 1 366 28
 2301 008a 234B     		ldr	r3, .L57+4
 2302 008c DB68     		ldr	r3, [r3, #12]
 366:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 2303              		.loc 1 366 39
 2304 008e 224A     		ldr	r2, .L57+4
 2305 0090 5B01     		lsls	r3, r3, #5
 2306 0092 1344     		add	r3, r3, r2
 2307 0094 1C33     		adds	r3, r3, #28
 2308 0096 1B68     		ldr	r3, [r3]
 366:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 2309              		.loc 1 366 10
 2310 0098 012B     		cmp	r3, #1
 2311 009a 06D1     		bne	.L55
 368:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2312              		.loc 1 368 14
 2313 009c 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccK9mPCc.s 			page 107


 2314 009e 1B68     		ldr	r3, [r3]
 2315 00a0 43F07F42 		orr	r2, r3, #-16777216
 368:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2316              		.loc 1 368 12
 2317 00a4 3B68     		ldr	r3, [r7]
 2318 00a6 1A60     		str	r2, [r3]
 2319              		.loc 1 374 1
 2320 00a8 30E0     		b	.L56
 2321              	.L55:
 370:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 2322              		.loc 1 370 28
 2323 00aa 1B4B     		ldr	r3, .L57+4
 2324 00ac DB68     		ldr	r3, [r3, #12]
 370:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 2325              		.loc 1 370 39
 2326 00ae 1A4A     		ldr	r2, .L57+4
 2327 00b0 5B01     		lsls	r3, r3, #5
 2328 00b2 1344     		add	r3, r3, r2
 2329 00b4 1C33     		adds	r3, r3, #28
 2330 00b6 1B68     		ldr	r3, [r3]
 370:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 2331              		.loc 1 370 10
 2332 00b8 042B     		cmp	r3, #4
 2333 00ba 27D1     		bne	.L56
 372:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2334              		.loc 1 372 14
 2335 00bc 3B68     		ldr	r3, [r7]
 2336 00be 1B68     		ldr	r3, [r3]
 2337 00c0 1B0B     		lsrs	r3, r3, #12
 2338 00c2 03F00F02 		and	r2, r3, #15
 2339 00c6 1346     		mov	r3, r2
 2340 00c8 1B01     		lsls	r3, r3, #4
 2341 00ca 1344     		add	r3, r3, r2
 2342 00cc 1906     		lsls	r1, r3, #24
 2343 00ce 3B68     		ldr	r3, [r7]
 2344 00d0 1B68     		ldr	r3, [r3]
 2345 00d2 1B0A     		lsrs	r3, r3, #8
 2346 00d4 03F00F02 		and	r2, r3, #15
 2347 00d8 1346     		mov	r3, r2
 2348 00da 1B01     		lsls	r3, r3, #4
 2349 00dc 1344     		add	r3, r3, r2
 2350 00de 1B04     		lsls	r3, r3, #16
 2351 00e0 1943     		orrs	r1, r1, r3
 2352 00e2 3B68     		ldr	r3, [r7]
 2353 00e4 1B68     		ldr	r3, [r3]
 2354 00e6 1B09     		lsrs	r3, r3, #4
 2355 00e8 03F00F02 		and	r2, r3, #15
 2356 00ec 1346     		mov	r3, r2
 2357 00ee 1B01     		lsls	r3, r3, #4
 2358 00f0 1344     		add	r3, r3, r2
 2359 00f2 1B02     		lsls	r3, r3, #8
 2360 00f4 1943     		orrs	r1, r1, r3
 2361 00f6 3B68     		ldr	r3, [r7]
 2362 00f8 1B68     		ldr	r3, [r3]
 2363 00fa 03F00F02 		and	r2, r3, #15
 2364 00fe 1346     		mov	r3, r2
 2365 0100 1B01     		lsls	r3, r3, #4
ARM GAS  /tmp/ccK9mPCc.s 			page 108


 2366 0102 1344     		add	r3, r3, r2
 2367 0104 41EA0302 		orr	r2, r1, r3
 372:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2368              		.loc 1 372 12
 2369 0108 3B68     		ldr	r3, [r7]
 2370 010a 1A60     		str	r2, [r3]
 2371              	.L56:
 2372              		.loc 1 374 1
 2373 010c 00BF     		nop
 2374 010e 0C37     		adds	r7, r7, #12
 2375              		.cfi_def_cfa_offset 12
 2376 0110 BD46     		mov	sp, r7
 2377              		.cfi_def_cfa_register 13
 2378              		@ sp needed
 2379 0112 90BD     		pop	{r4, r7, pc}
 2380              	.L58:
 2381              		.align	2
 2382              	.L57:
 2383 0114 00000000 		.word	FuncDriver
 2384 0118 00000000 		.word	DrawProp
 2385              		.cfi_endproc
 2386              	.LFE12:
 2388              		.section	.text.UTIL_LCD_SetPixel,"ax",%progbits
 2389              		.align	1
 2390              		.global	UTIL_LCD_SetPixel
 2391              		.syntax unified
 2392              		.thumb
 2393              		.thumb_func
 2395              	UTIL_LCD_SetPixel:
 2396              	.LFB13:
 375:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 376:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 377:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Draws a pixel on LCD.
 378:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Xpos     X position
 379:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Ypos     Y position
 380:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Color    Pixel color
 381:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 382:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
 383:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 2397              		.loc 1 383 1
 2398              		.cfi_startproc
 2399              		@ args = 0, pretend = 0, frame = 8
 2400              		@ frame_needed = 1, uses_anonymous_args = 0
 2401 0000 B0B5     		push	{r4, r5, r7, lr}
 2402              		.cfi_def_cfa_offset 16
 2403              		.cfi_offset 4, -16
 2404              		.cfi_offset 5, -12
 2405              		.cfi_offset 7, -8
 2406              		.cfi_offset 14, -4
 2407 0002 82B0     		sub	sp, sp, #8
 2408              		.cfi_def_cfa_offset 24
 2409 0004 00AF     		add	r7, sp, #0
 2410              		.cfi_def_cfa_register 7
 2411 0006 0346     		mov	r3, r0
 2412 0008 3A60     		str	r2, [r7]
 2413 000a FB80     		strh	r3, [r7, #6]	@ movhi
 2414 000c 0B46     		mov	r3, r1	@ movhi
ARM GAS  /tmp/ccK9mPCc.s 			page 109


 2415 000e BB80     		strh	r3, [r7, #4]	@ movhi
 384:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   /* Set Pixel */
 385:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 2416              		.loc 1 385 23
 2417 0010 324B     		ldr	r3, .L65
 2418 0012 DB68     		ldr	r3, [r3, #12]
 2419              		.loc 1 385 34
 2420 0014 314A     		ldr	r2, .L65
 2421 0016 5B01     		lsls	r3, r3, #5
 2422 0018 1344     		add	r3, r3, r2
 2423 001a 1C33     		adds	r3, r3, #28
 2424 001c 1B68     		ldr	r3, [r3]
 2425              		.loc 1 385 5
 2426 001e 022B     		cmp	r3, #2
 2427 0020 17D1     		bne	.L60
 386:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 387:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 2428              		.loc 1 387 15
 2429 0022 2F4B     		ldr	r3, .L65+4
 2430 0024 9C69     		ldr	r4, [r3, #24]
 2431              		.loc 1 387 5
 2432 0026 2D4B     		ldr	r3, .L65
 2433 0028 1869     		ldr	r0, [r3, #16]
 2434 002a F988     		ldrh	r1, [r7, #6]
 2435 002c BD88     		ldrh	r5, [r7, #4]
 2436              		.loc 1 387 58
 2437 002e 3B68     		ldr	r3, [r7]
 2438 0030 DB08     		lsrs	r3, r3, #3
 2439 0032 03F01F02 		and	r2, r3, #31
 2440 0036 3B68     		ldr	r3, [r7]
 2441 0038 9B0A     		lsrs	r3, r3, #10
 2442 003a 5B01     		lsls	r3, r3, #5
 2443 003c 03F4FC63 		and	r3, r3, #2016
 2444 0040 1A43     		orrs	r2, r2, r3
 2445 0042 3B68     		ldr	r3, [r7]
 2446 0044 DB0C     		lsrs	r3, r3, #19
 2447 0046 DB02     		lsls	r3, r3, #11
 2448 0048 9BB2     		uxth	r3, r3
 2449              		.loc 1 387 5
 2450 004a 1343     		orrs	r3, r3, r2
 2451 004c 2A46     		mov	r2, r5
 2452 004e A047     		blx	r4
 2453              	.LVL19:
 388:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 389:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
 390:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 391:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB888(Color));
 392:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 393:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
 394:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 395:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882ARGB4444(Color));
 396:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 397:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   else /*LCD_PIXEL_FORMAT_ARGB888*/
 398:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 399:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 400:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 401:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
ARM GAS  /tmp/ccK9mPCc.s 			page 110


 2454              		.loc 1 401 1
 2455 0050 40E0     		b	.L64
 2456              	.L60:
 389:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 2457              		.loc 1 389 28
 2458 0052 224B     		ldr	r3, .L65
 2459 0054 DB68     		ldr	r3, [r3, #12]
 389:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 2460              		.loc 1 389 39
 2461 0056 214A     		ldr	r2, .L65
 2462 0058 5B01     		lsls	r3, r3, #5
 2463 005a 1344     		add	r3, r3, r2
 2464 005c 1C33     		adds	r3, r3, #28
 2465 005e 1B68     		ldr	r3, [r3]
 389:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 2466              		.loc 1 389 10
 2467 0060 012B     		cmp	r3, #1
 2468 0062 0AD1     		bne	.L62
 391:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2469              		.loc 1 391 15
 2470 0064 1E4B     		ldr	r3, .L65+4
 2471 0066 9C69     		ldr	r4, [r3, #24]
 391:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2472              		.loc 1 391 5
 2473 0068 1C4B     		ldr	r3, .L65
 2474 006a 1869     		ldr	r0, [r3, #16]
 2475 006c F988     		ldrh	r1, [r7, #6]
 2476 006e BA88     		ldrh	r2, [r7, #4]
 2477 0070 3B68     		ldr	r3, [r7]
 2478 0072 23F07F43 		bic	r3, r3, #-16777216
 2479 0076 A047     		blx	r4
 2480              	.LVL20:
 2481              		.loc 1 401 1
 2482 0078 2CE0     		b	.L64
 2483              	.L62:
 393:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 2484              		.loc 1 393 28
 2485 007a 184B     		ldr	r3, .L65
 2486 007c DB68     		ldr	r3, [r3, #12]
 393:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 2487              		.loc 1 393 39
 2488 007e 174A     		ldr	r2, .L65
 2489 0080 5B01     		lsls	r3, r3, #5
 2490 0082 1344     		add	r3, r3, r2
 2491 0084 1C33     		adds	r3, r3, #28
 2492 0086 1B68     		ldr	r3, [r3]
 393:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 2493              		.loc 1 393 10
 2494 0088 042B     		cmp	r3, #4
 2495 008a 1BD1     		bne	.L63
 395:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2496              		.loc 1 395 15
 2497 008c 144B     		ldr	r3, .L65+4
 2498 008e 9C69     		ldr	r4, [r3, #24]
 395:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2499              		.loc 1 395 5
 2500 0090 124B     		ldr	r3, .L65
ARM GAS  /tmp/ccK9mPCc.s 			page 111


 2501 0092 1869     		ldr	r0, [r3, #16]
 2502 0094 F988     		ldrh	r1, [r7, #6]
 2503 0096 BD88     		ldrh	r5, [r7, #4]
 395:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2504              		.loc 1 395 58
 2505 0098 3B68     		ldr	r3, [r7]
 2506 009a 1B09     		lsrs	r3, r3, #4
 2507 009c 03F00F02 		and	r2, r3, #15
 2508 00a0 3B68     		ldr	r3, [r7]
 2509 00a2 1B0B     		lsrs	r3, r3, #12
 2510 00a4 1B01     		lsls	r3, r3, #4
 2511 00a6 DBB2     		uxtb	r3, r3
 2512 00a8 1A43     		orrs	r2, r2, r3
 2513 00aa 3B68     		ldr	r3, [r7]
 2514 00ac 1B0D     		lsrs	r3, r3, #20
 2515 00ae 1B02     		lsls	r3, r3, #8
 2516 00b0 03F47063 		and	r3, r3, #3840
 2517 00b4 1A43     		orrs	r2, r2, r3
 2518 00b6 3B68     		ldr	r3, [r7]
 2519 00b8 1B0F     		lsrs	r3, r3, #28
 2520 00ba 1B03     		lsls	r3, r3, #12
 395:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2521              		.loc 1 395 5
 2522 00bc 1343     		orrs	r3, r3, r2
 2523 00be 2A46     		mov	r2, r5
 2524 00c0 A047     		blx	r4
 2525              	.LVL21:
 2526              		.loc 1 401 1
 2527 00c2 07E0     		b	.L64
 2528              	.L63:
 399:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2529              		.loc 1 399 15
 2530 00c4 064B     		ldr	r3, .L65+4
 2531 00c6 9C69     		ldr	r4, [r3, #24]
 399:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 2532              		.loc 1 399 5
 2533 00c8 044B     		ldr	r3, .L65
 2534 00ca 1869     		ldr	r0, [r3, #16]
 2535 00cc F988     		ldrh	r1, [r7, #6]
 2536 00ce BA88     		ldrh	r2, [r7, #4]
 2537 00d0 3B68     		ldr	r3, [r7]
 2538 00d2 A047     		blx	r4
 2539              	.LVL22:
 2540              	.L64:
 2541              		.loc 1 401 1
 2542 00d4 00BF     		nop
 2543 00d6 0837     		adds	r7, r7, #8
 2544              		.cfi_def_cfa_offset 16
 2545 00d8 BD46     		mov	sp, r7
 2546              		.cfi_def_cfa_register 13
 2547              		@ sp needed
 2548 00da B0BD     		pop	{r4, r5, r7, pc}
 2549              	.L66:
 2550              		.align	2
 2551              	.L65:
 2552 00dc 00000000 		.word	DrawProp
 2553 00e0 00000000 		.word	FuncDriver
ARM GAS  /tmp/ccK9mPCc.s 			page 112


 2554              		.cfi_endproc
 2555              	.LFE13:
 2557              		.section	.text.UTIL_LCD_Clear,"ax",%progbits
 2558              		.align	1
 2559              		.global	UTIL_LCD_Clear
 2560              		.syntax unified
 2561              		.thumb
 2562              		.thumb_func
 2564              	UTIL_LCD_Clear:
 2565              	.LFB14:
 402:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 403:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 404:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Clears the whole currently active layer of LTDC.
 405:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Color  Color of the background
 406:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 407:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_Clear(uint32_t Color)
 408:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 2566              		.loc 1 408 1
 2567              		.cfi_startproc
 2568              		@ args = 0, pretend = 0, frame = 8
 2569              		@ frame_needed = 1, uses_anonymous_args = 0
 2570 0000 80B5     		push	{r7, lr}
 2571              		.cfi_def_cfa_offset 8
 2572              		.cfi_offset 7, -8
 2573              		.cfi_offset 14, -4
 2574 0002 84B0     		sub	sp, sp, #16
 2575              		.cfi_def_cfa_offset 24
 2576 0004 02AF     		add	r7, sp, #8
 2577              		.cfi_def_cfa 7, 16
 2578 0006 7860     		str	r0, [r7, #4]
 409:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   /* Clear the LCD */
 410:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   UTIL_LCD_FillRect(0, 0, DrawProp[DrawProp->LcdLayer].LcdXsize, DrawProp[DrawProp->LcdLayer].LcdYs
 2579              		.loc 1 410 44
 2580 0008 0C4B     		ldr	r3, .L68
 2581 000a DB68     		ldr	r3, [r3, #12]
 2582              		.loc 1 410 3
 2583 000c 0B4A     		ldr	r2, .L68
 2584 000e 5B01     		lsls	r3, r3, #5
 2585 0010 1344     		add	r3, r3, r2
 2586 0012 1433     		adds	r3, r3, #20
 2587 0014 1A68     		ldr	r2, [r3]
 2588              		.loc 1 410 83
 2589 0016 094B     		ldr	r3, .L68
 2590 0018 DB68     		ldr	r3, [r3, #12]
 2591              		.loc 1 410 3
 2592 001a 0849     		ldr	r1, .L68
 2593 001c 5B01     		lsls	r3, r3, #5
 2594 001e 0B44     		add	r3, r3, r1
 2595 0020 1833     		adds	r3, r3, #24
 2596 0022 1968     		ldr	r1, [r3]
 2597 0024 7B68     		ldr	r3, [r7, #4]
 2598 0026 0093     		str	r3, [sp]
 2599 0028 0B46     		mov	r3, r1
 2600 002a 0021     		movs	r1, #0
 2601 002c 0020     		movs	r0, #0
 2602 002e FFF7FEFF 		bl	UTIL_LCD_FillRect
 411:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
ARM GAS  /tmp/ccK9mPCc.s 			page 113


 2603              		.loc 1 411 1
 2604 0032 00BF     		nop
 2605 0034 0837     		adds	r7, r7, #8
 2606              		.cfi_def_cfa_offset 8
 2607 0036 BD46     		mov	sp, r7
 2608              		.cfi_def_cfa_register 13
 2609              		@ sp needed
 2610 0038 80BD     		pop	{r7, pc}
 2611              	.L69:
 2612 003a 00BF     		.align	2
 2613              	.L68:
 2614 003c 00000000 		.word	DrawProp
 2615              		.cfi_endproc
 2616              	.LFE14:
 2618              		.section	.text.UTIL_LCD_ClearStringLine,"ax",%progbits
 2619              		.align	1
 2620              		.global	UTIL_LCD_ClearStringLine
 2621              		.syntax unified
 2622              		.thumb
 2623              		.thumb_func
 2625              	UTIL_LCD_ClearStringLine:
 2626              	.LFB15:
 412:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 413:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 414:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Clears the selected line in currently active layer.
 415:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Line  Line to be cleared
 416:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 417:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_ClearStringLine(uint32_t Line)
 418:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 2627              		.loc 1 418 1
 2628              		.cfi_startproc
 2629              		@ args = 0, pretend = 0, frame = 8
 2630              		@ frame_needed = 1, uses_anonymous_args = 0
 2631 0000 90B5     		push	{r4, r7, lr}
 2632              		.cfi_def_cfa_offset 12
 2633              		.cfi_offset 4, -12
 2634              		.cfi_offset 7, -8
 2635              		.cfi_offset 14, -4
 2636 0002 85B0     		sub	sp, sp, #20
 2637              		.cfi_def_cfa_offset 32
 2638 0004 02AF     		add	r7, sp, #8
 2639              		.cfi_def_cfa 7, 24
 2640 0006 7860     		str	r0, [r7, #4]
 419:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   /* Draw rectangle with background color */
 420:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   UTIL_LCD_FillRect(0, (Line * DrawProp[DrawProp->LcdLayer].pFont->Height), DrawProp[DrawProp->LcdL
 2641              		.loc 1 420 49
 2642 0008 154B     		ldr	r3, .L71
 2643 000a DB68     		ldr	r3, [r3, #12]
 2644              		.loc 1 420 60
 2645 000c 144A     		ldr	r2, .L71
 2646 000e 5B01     		lsls	r3, r3, #5
 2647 0010 1344     		add	r3, r3, r2
 2648 0012 0833     		adds	r3, r3, #8
 2649 0014 1B68     		ldr	r3, [r3]
 2650              		.loc 1 420 66
 2651 0016 DB88     		ldrh	r3, [r3, #6]
 2652 0018 1A46     		mov	r2, r3
ARM GAS  /tmp/ccK9mPCc.s 			page 114


 2653              		.loc 1 420 3
 2654 001a 7B68     		ldr	r3, [r7, #4]
 2655 001c 03FB02F1 		mul	r1, r3, r2
 2656              		.loc 1 420 94
 2657 0020 0F4B     		ldr	r3, .L71
 2658 0022 DB68     		ldr	r3, [r3, #12]
 2659              		.loc 1 420 3
 2660 0024 0E4A     		ldr	r2, .L71
 2661 0026 5B01     		lsls	r3, r3, #5
 2662 0028 1344     		add	r3, r3, r2
 2663 002a 1433     		adds	r3, r3, #20
 2664 002c 1A68     		ldr	r2, [r3]
 2665              		.loc 1 420 133
 2666 002e 0C4B     		ldr	r3, .L71
 2667 0030 DB68     		ldr	r3, [r3, #12]
 2668              		.loc 1 420 144
 2669 0032 0B48     		ldr	r0, .L71
 2670 0034 5B01     		lsls	r3, r3, #5
 2671 0036 0344     		add	r3, r3, r0
 2672 0038 0833     		adds	r3, r3, #8
 2673 003a 1B68     		ldr	r3, [r3]
 2674              		.loc 1 420 150
 2675 003c DB88     		ldrh	r3, [r3, #6]
 2676              		.loc 1 420 3
 2677 003e 1C46     		mov	r4, r3
 2678              		.loc 1 420 177
 2679 0040 074B     		ldr	r3, .L71
 2680 0042 DB68     		ldr	r3, [r3, #12]
 2681              		.loc 1 420 3
 2682 0044 0648     		ldr	r0, .L71
 2683 0046 5B01     		lsls	r3, r3, #5
 2684 0048 0344     		add	r3, r3, r0
 2685 004a 0433     		adds	r3, r3, #4
 2686 004c 1B68     		ldr	r3, [r3]
 2687 004e 0093     		str	r3, [sp]
 2688 0050 2346     		mov	r3, r4
 2689 0052 0020     		movs	r0, #0
 2690 0054 FFF7FEFF 		bl	UTIL_LCD_FillRect
 421:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 2691              		.loc 1 421 1
 2692 0058 00BF     		nop
 2693 005a 0C37     		adds	r7, r7, #12
 2694              		.cfi_def_cfa_offset 12
 2695 005c BD46     		mov	sp, r7
 2696              		.cfi_def_cfa_register 13
 2697              		@ sp needed
 2698 005e 90BD     		pop	{r4, r7, pc}
 2699              	.L72:
 2700              		.align	2
 2701              	.L71:
 2702 0060 00000000 		.word	DrawProp
 2703              		.cfi_endproc
 2704              	.LFE15:
 2706              		.section	.text.UTIL_LCD_DisplayChar,"ax",%progbits
 2707              		.align	1
 2708              		.global	UTIL_LCD_DisplayChar
 2709              		.syntax unified
ARM GAS  /tmp/ccK9mPCc.s 			page 115


 2710              		.thumb
 2711              		.thumb_func
 2713              	UTIL_LCD_DisplayChar:
 2714              	.LFB16:
 422:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 423:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 424:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Displays one character in currently active layer.
 425:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Xpos Start column address
 426:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Ypos Line where to display the character shape.
 427:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Ascii Character ascii code
 428:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
 429:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 430:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
 431:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 2715              		.loc 1 431 1
 2716              		.cfi_startproc
 2717              		@ args = 0, pretend = 0, frame = 16
 2718              		@ frame_needed = 1, uses_anonymous_args = 0
 2719 0000 80B5     		push	{r7, lr}
 2720              		.cfi_def_cfa_offset 8
 2721              		.cfi_offset 7, -8
 2722              		.cfi_offset 14, -4
 2723 0002 84B0     		sub	sp, sp, #16
 2724              		.cfi_def_cfa_offset 24
 2725 0004 00AF     		add	r7, sp, #0
 2726              		.cfi_def_cfa_register 7
 2727 0006 F860     		str	r0, [r7, #12]
 2728 0008 B960     		str	r1, [r7, #8]
 2729 000a 1346     		mov	r3, r2
 2730 000c FB71     		strb	r3, [r7, #7]
 432:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 2731              		.loc 1 432 42
 2732 000e 164B     		ldr	r3, .L75
 2733 0010 DB68     		ldr	r3, [r3, #12]
 2734              		.loc 1 432 53
 2735 0012 154A     		ldr	r2, .L75
 2736 0014 5B01     		lsls	r3, r3, #5
 2737 0016 1344     		add	r3, r3, r2
 2738 0018 0833     		adds	r3, r3, #8
 2739 001a 1B68     		ldr	r3, [r3]
 2740              		.loc 1 432 59
 2741 001c 1A68     		ldr	r2, [r3]
 2742              		.loc 1 432 73
 2743 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2744 0020 203B     		subs	r3, r3, #32
 433:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8
 2745              		.loc 1 433 20
 2746 0022 1149     		ldr	r1, .L75
 2747 0024 C968     		ldr	r1, [r1, #12]
 2748              		.loc 1 433 31
 2749 0026 1048     		ldr	r0, .L75
 2750 0028 4901     		lsls	r1, r1, #5
 2751 002a 0144     		add	r1, r1, r0
 2752 002c 0831     		adds	r1, r1, #8
 2753 002e 0968     		ldr	r1, [r1]
 2754              		.loc 1 433 37
 2755 0030 C988     		ldrh	r1, [r1, #6]
ARM GAS  /tmp/ccK9mPCc.s 			page 116


 432:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 2756              		.loc 1 432 79
 2757 0032 03FB01F1 		mul	r1, r3, r1
 2758              		.loc 1 433 67
 2759 0036 0C4B     		ldr	r3, .L75
 2760 0038 DB68     		ldr	r3, [r3, #12]
 2761              		.loc 1 433 78
 2762 003a 0B48     		ldr	r0, .L75
 2763 003c 5B01     		lsls	r3, r3, #5
 2764 003e 0344     		add	r3, r3, r0
 2765 0040 0833     		adds	r3, r3, #8
 2766 0042 1B68     		ldr	r3, [r3]
 2767              		.loc 1 433 84
 2768 0044 9B88     		ldrh	r3, [r3, #4]
 2769              		.loc 1 433 92
 2770 0046 0733     		adds	r3, r3, #7
 2771              		.loc 1 433 97
 2772 0048 002B     		cmp	r3, #0
 2773 004a 00DA     		bge	.L74
 2774 004c 0733     		adds	r3, r3, #7
 2775              	.L74:
 2776 004e DB10     		asrs	r3, r3, #3
 2777              		.loc 1 433 46
 2778 0050 01FB03F3 		mul	r3, r1, r3
 432:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 2779              		.loc 1 432 3
 2780 0054 1344     		add	r3, r3, r2
 2781 0056 1A46     		mov	r2, r3
 2782 0058 B968     		ldr	r1, [r7, #8]
 2783 005a F868     		ldr	r0, [r7, #12]
 2784 005c FFF7FEFF 		bl	DrawChar
 434:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 2785              		.loc 1 434 1
 2786 0060 00BF     		nop
 2787 0062 1037     		adds	r7, r7, #16
 2788              		.cfi_def_cfa_offset 8
 2789 0064 BD46     		mov	sp, r7
 2790              		.cfi_def_cfa_register 13
 2791              		@ sp needed
 2792 0066 80BD     		pop	{r7, pc}
 2793              	.L76:
 2794              		.align	2
 2795              	.L75:
 2796 0068 00000000 		.word	DrawProp
 2797              		.cfi_endproc
 2798              	.LFE16:
 2800              		.section	.text.UTIL_LCD_DisplayStringAt,"ax",%progbits
 2801              		.align	1
 2802              		.global	UTIL_LCD_DisplayStringAt
 2803              		.syntax unified
 2804              		.thumb
 2805              		.thumb_func
 2807              	UTIL_LCD_DisplayStringAt:
 2808              	.LFB17:
 435:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 436:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 437:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Displays characters in currently active layer.
ARM GAS  /tmp/ccK9mPCc.s 			page 117


 438:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Xpos X position (in pixel)
 439:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Ypos Y position (in pixel)
 440:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Text Pointer to string to display on LCD
 441:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Mode Display mode
 442:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   *          This parameter can be one of the following values:
 443:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   *            @arg  CENTER_MODE
 444:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   *            @arg  RIGHT_MODE
 445:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   *            @arg  LEFT_MODE
 446:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 447:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mod
 448:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 2809              		.loc 1 448 1
 2810              		.cfi_startproc
 2811              		@ args = 0, pretend = 0, frame = 40
 2812              		@ frame_needed = 1, uses_anonymous_args = 0
 2813 0000 80B5     		push	{r7, lr}
 2814              		.cfi_def_cfa_offset 8
 2815              		.cfi_offset 7, -8
 2816              		.cfi_offset 14, -4
 2817 0002 8AB0     		sub	sp, sp, #40
 2818              		.cfi_def_cfa_offset 48
 2819 0004 00AF     		add	r7, sp, #0
 2820              		.cfi_def_cfa_register 7
 2821 0006 F860     		str	r0, [r7, #12]
 2822 0008 B960     		str	r1, [r7, #8]
 2823 000a 7A60     		str	r2, [r7, #4]
 2824 000c FB70     		strb	r3, [r7, #3]
 449:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint32_t refcolumn = 1, i = 0;
 2825              		.loc 1 449 12
 2826 000e 0123     		movs	r3, #1
 2827 0010 7B62     		str	r3, [r7, #36]
 2828              		.loc 1 449 27
 2829 0012 0023     		movs	r3, #0
 2830 0014 3B62     		str	r3, [r7, #32]
 450:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint32_t size = 0, xsize = 0;
 2831              		.loc 1 450 12
 2832 0016 0023     		movs	r3, #0
 2833 0018 FB61     		str	r3, [r7, #28]
 2834              		.loc 1 450 22
 2835 001a 0023     		movs	r3, #0
 2836 001c 7B61     		str	r3, [r7, #20]
 451:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint8_t  *ptr = Text;
 2837              		.loc 1 451 13
 2838 001e 7B68     		ldr	r3, [r7, #4]
 2839 0020 BB61     		str	r3, [r7, #24]
 452:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 453:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   /* Get the text size */
 454:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   while (*ptr++) size ++ ;
 2840              		.loc 1 454 9
 2841 0022 02E0     		b	.L78
 2842              	.L79:
 2843              		.loc 1 454 23 discriminator 2
 2844 0024 FB69     		ldr	r3, [r7, #28]
 2845 0026 0133     		adds	r3, r3, #1
 2846 0028 FB61     		str	r3, [r7, #28]
 2847              	.L78:
 2848              		.loc 1 454 14 discriminator 1
ARM GAS  /tmp/ccK9mPCc.s 			page 118


 2849 002a BB69     		ldr	r3, [r7, #24]
 2850 002c 5A1C     		adds	r2, r3, #1
 2851 002e BA61     		str	r2, [r7, #24]
 2852              		.loc 1 454 10 discriminator 1
 2853 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2854 0032 002B     		cmp	r3, #0
 2855 0034 F6D1     		bne	.L79
 455:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 456:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   /* Characters number per line */
 457:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   xsize = (DrawProp[DrawProp->LcdLayer].LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 2856              		.loc 1 457 29
 2857 0036 4D4B     		ldr	r3, .L89
 2858 0038 DB68     		ldr	r3, [r3, #12]
 2859              		.loc 1 457 40
 2860 003a 4C4A     		ldr	r2, .L89
 2861 003c 5B01     		lsls	r3, r3, #5
 2862 003e 1344     		add	r3, r3, r2
 2863 0040 1433     		adds	r3, r3, #20
 2864 0042 1B68     		ldr	r3, [r3]
 2865              		.loc 1 457 67
 2866 0044 494A     		ldr	r2, .L89
 2867 0046 D268     		ldr	r2, [r2, #12]
 2868              		.loc 1 457 78
 2869 0048 4849     		ldr	r1, .L89
 2870 004a 5201     		lsls	r2, r2, #5
 2871 004c 0A44     		add	r2, r2, r1
 2872 004e 0832     		adds	r2, r2, #8
 2873 0050 1268     		ldr	r2, [r2]
 2874              		.loc 1 457 84
 2875 0052 9288     		ldrh	r2, [r2, #4]
 2876              		.loc 1 457 9
 2877 0054 B3FBF2F3 		udiv	r3, r3, r2
 2878 0058 7B61     		str	r3, [r7, #20]
 458:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 459:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   switch (Mode)
 2879              		.loc 1 459 3
 2880 005a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2881 005c 032B     		cmp	r3, #3
 2882 005e 18D0     		beq	.L80
 2883 0060 032B     		cmp	r3, #3
 2884 0062 2ADC     		bgt	.L81
 2885 0064 012B     		cmp	r3, #1
 2886 0066 02D0     		beq	.L82
 2887 0068 022B     		cmp	r3, #2
 2888 006a 15D0     		beq	.L83
 2889 006c 25E0     		b	.L81
 2890              	.L82:
 460:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 461:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   case CENTER_MODE:
 462:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 463:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 2891              		.loc 1 463 34
 2892 006e 7A69     		ldr	r2, [r7, #20]
 2893 0070 FB69     		ldr	r3, [r7, #28]
 2894 0072 D31A     		subs	r3, r2, r3
 2895              		.loc 1 463 60
 2896 0074 3D4A     		ldr	r2, .L89
ARM GAS  /tmp/ccK9mPCc.s 			page 119


 2897 0076 D268     		ldr	r2, [r2, #12]
 2898              		.loc 1 463 71
 2899 0078 3C49     		ldr	r1, .L89
 2900 007a 5201     		lsls	r2, r2, #5
 2901 007c 0A44     		add	r2, r2, r1
 2902 007e 0832     		adds	r2, r2, #8
 2903 0080 1268     		ldr	r2, [r2]
 2904              		.loc 1 463 77
 2905 0082 9288     		ldrh	r2, [r2, #4]
 2906              		.loc 1 463 41
 2907 0084 02FB03F3 		mul	r3, r2, r3
 2908              		.loc 1 463 86
 2909 0088 5B08     		lsrs	r3, r3, #1
 2910              		.loc 1 463 17
 2911 008a FA68     		ldr	r2, [r7, #12]
 2912 008c 1344     		add	r3, r3, r2
 2913 008e 7B62     		str	r3, [r7, #36]
 464:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       break;
 2914              		.loc 1 464 7
 2915 0090 16E0     		b	.L84
 2916              	.L80:
 465:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 466:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   case LEFT_MODE:
 467:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 468:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       refcolumn = Xpos;
 2917              		.loc 1 468 17
 2918 0092 FB68     		ldr	r3, [r7, #12]
 2919 0094 7B62     		str	r3, [r7, #36]
 469:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       break;
 2920              		.loc 1 469 7
 2921 0096 13E0     		b	.L84
 2922              	.L83:
 470:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 471:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   case RIGHT_MODE:
 472:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 473:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 2923              		.loc 1 473 36
 2924 0098 7A69     		ldr	r2, [r7, #20]
 2925 009a FB69     		ldr	r3, [r7, #28]
 2926 009c D31A     		subs	r3, r2, r3
 2927              		.loc 1 473 61
 2928 009e 334A     		ldr	r2, .L89
 2929 00a0 D268     		ldr	r2, [r2, #12]
 2930              		.loc 1 473 72
 2931 00a2 3249     		ldr	r1, .L89
 2932 00a4 5201     		lsls	r2, r2, #5
 2933 00a6 0A44     		add	r2, r2, r1
 2934 00a8 0832     		adds	r2, r2, #8
 2935 00aa 1268     		ldr	r2, [r2]
 2936              		.loc 1 473 78
 2937 00ac 9288     		ldrh	r2, [r2, #4]
 2938              		.loc 1 473 43
 2939 00ae 03FB02F2 		mul	r2, r3, r2
 2940              		.loc 1 473 17
 2941 00b2 FB68     		ldr	r3, [r7, #12]
 2942 00b4 D31A     		subs	r3, r2, r3
 2943 00b6 7B62     		str	r3, [r7, #36]
ARM GAS  /tmp/ccK9mPCc.s 			page 120


 474:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       break;
 2944              		.loc 1 474 7
 2945 00b8 02E0     		b	.L84
 2946              	.L81:
 475:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 476:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   default:
 477:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 478:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       refcolumn = Xpos;
 2947              		.loc 1 478 17
 2948 00ba FB68     		ldr	r3, [r7, #12]
 2949 00bc 7B62     		str	r3, [r7, #36]
 479:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       break;
 2950              		.loc 1 479 7
 2951 00be 00BF     		nop
 2952              	.L84:
 480:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 481:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 482:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 483:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   /* Check that the Start column is located in the screen */
 484:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   if ((refcolumn < 1) || (refcolumn >= 0x8000))
 2953              		.loc 1 484 6
 2954 00c0 7B6A     		ldr	r3, [r7, #36]
 2955 00c2 002B     		cmp	r3, #0
 2956 00c4 03D0     		beq	.L85
 2957              		.loc 1 484 23 discriminator 1
 2958 00c6 7B6A     		ldr	r3, [r7, #36]
 2959 00c8 B3F5004F 		cmp	r3, #32768
 2960 00cc 1BD3     		bcc	.L87
 2961              	.L85:
 485:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 486:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     refcolumn = 1;
 2962              		.loc 1 486 15
 2963 00ce 0123     		movs	r3, #1
 2964 00d0 7B62     		str	r3, [r7, #36]
 487:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 488:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 489:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   /* Send the string character by character on LCD */
 490:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   while ((*Text != 0) & (((DrawProp[DrawProp->LcdLayer].LcdXsize - (i*DrawProp[DrawProp->LcdLayer].
 2965              		.loc 1 490 9
 2966 00d2 18E0     		b	.L87
 2967              	.L88:
 491:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 492:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     /* Display one character on LCD */
 493:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 2968              		.loc 1 493 5
 2969 00d4 7B68     		ldr	r3, [r7, #4]
 2970 00d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2971 00d8 1A46     		mov	r2, r3
 2972 00da B968     		ldr	r1, [r7, #8]
 2973 00dc 786A     		ldr	r0, [r7, #36]
 2974 00de FFF7FEFF 		bl	UTIL_LCD_DisplayChar
 494:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     /* Decrement the column position by 16 */
 495:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 2975              		.loc 1 495 35
 2976 00e2 224B     		ldr	r3, .L89
 2977 00e4 DB68     		ldr	r3, [r3, #12]
 2978              		.loc 1 495 46
ARM GAS  /tmp/ccK9mPCc.s 			page 121


 2979 00e6 214A     		ldr	r2, .L89
 2980 00e8 5B01     		lsls	r3, r3, #5
 2981 00ea 1344     		add	r3, r3, r2
 2982 00ec 0833     		adds	r3, r3, #8
 2983 00ee 1B68     		ldr	r3, [r3]
 2984              		.loc 1 495 52
 2985 00f0 9B88     		ldrh	r3, [r3, #4]
 2986 00f2 1A46     		mov	r2, r3
 2987              		.loc 1 495 15
 2988 00f4 7B6A     		ldr	r3, [r7, #36]
 2989 00f6 1344     		add	r3, r3, r2
 2990 00f8 7B62     		str	r3, [r7, #36]
 496:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 497:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     /* Point on the next character */
 498:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     Text++;
 2991              		.loc 1 498 9
 2992 00fa 7B68     		ldr	r3, [r7, #4]
 2993 00fc 0133     		adds	r3, r3, #1
 2994 00fe 7B60     		str	r3, [r7, #4]
 499:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     i++;
 2995              		.loc 1 499 6
 2996 0100 3B6A     		ldr	r3, [r7, #32]
 2997 0102 0133     		adds	r3, r3, #1
 2998 0104 3B62     		str	r3, [r7, #32]
 2999              	.L87:
 490:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 3000              		.loc 1 490 11
 3001 0106 7B68     		ldr	r3, [r7, #4]
 3002 0108 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 490:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 3003              		.loc 1 490 23
 3004 010a 002B     		cmp	r3, #0
 3005 010c 14BF     		ite	ne
 3006 010e 0123     		movne	r3, #1
 3007 0110 0023     		moveq	r3, #0
 3008 0112 DAB2     		uxtb	r2, r3
 490:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 3009              		.loc 1 490 45
 3010 0114 154B     		ldr	r3, .L89
 3011 0116 DB68     		ldr	r3, [r3, #12]
 490:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 3012              		.loc 1 490 56
 3013 0118 1449     		ldr	r1, .L89
 3014 011a 5B01     		lsls	r3, r3, #5
 3015 011c 0B44     		add	r3, r3, r1
 3016 011e 1433     		adds	r3, r3, #20
 3017 0120 1968     		ldr	r1, [r3]
 490:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 3018              		.loc 1 490 88
 3019 0122 124B     		ldr	r3, .L89
 3020 0124 DB68     		ldr	r3, [r3, #12]
 490:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 3021              		.loc 1 490 99
 3022 0126 1148     		ldr	r0, .L89
 3023 0128 5B01     		lsls	r3, r3, #5
 3024 012a 0344     		add	r3, r3, r0
 3025 012c 0833     		adds	r3, r3, #8
ARM GAS  /tmp/ccK9mPCc.s 			page 122


 3026 012e 1B68     		ldr	r3, [r3]
 490:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 3027              		.loc 1 490 105
 3028 0130 9B88     		ldrh	r3, [r3, #4]
 3029 0132 1846     		mov	r0, r3
 490:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 3030              		.loc 1 490 70
 3031 0134 3B6A     		ldr	r3, [r7, #32]
 3032 0136 00FB03F3 		mul	r3, r0, r3
 490:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 3033              		.loc 1 490 66
 3034 013a CB1A     		subs	r3, r1, r3
 490:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 3035              		.loc 1 490 115
 3036 013c 9BB2     		uxth	r3, r3
 490:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 3037              		.loc 1 490 145
 3038 013e 0B49     		ldr	r1, .L89
 3039 0140 C968     		ldr	r1, [r1, #12]
 490:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 3040              		.loc 1 490 156
 3041 0142 0A48     		ldr	r0, .L89
 3042 0144 4901     		lsls	r1, r1, #5
 3043 0146 0144     		add	r1, r1, r0
 3044 0148 0831     		adds	r1, r1, #8
 3045 014a 0968     		ldr	r1, [r1]
 490:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 3046              		.loc 1 490 162
 3047 014c 8988     		ldrh	r1, [r1, #4]
 490:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 3048              		.loc 1 490 23
 3049 014e 8B42     		cmp	r3, r1
 3050 0150 2CBF     		ite	cs
 3051 0152 0123     		movcs	r3, #1
 3052 0154 0023     		movcc	r3, #0
 3053 0156 DBB2     		uxtb	r3, r3
 3054 0158 1340     		ands	r3, r3, r2
 3055 015a DBB2     		uxtb	r3, r3
 490:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 3056              		.loc 1 490 10
 3057 015c 002B     		cmp	r3, #0
 3058 015e B9D1     		bne	.L88
 500:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 501:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 3059              		.loc 1 501 1
 3060 0160 00BF     		nop
 3061 0162 00BF     		nop
 3062 0164 2837     		adds	r7, r7, #40
 3063              		.cfi_def_cfa_offset 8
 3064 0166 BD46     		mov	sp, r7
 3065              		.cfi_def_cfa_register 13
 3066              		@ sp needed
 3067 0168 80BD     		pop	{r7, pc}
 3068              	.L90:
 3069 016a 00BF     		.align	2
 3070              	.L89:
 3071 016c 00000000 		.word	DrawProp
ARM GAS  /tmp/ccK9mPCc.s 			page 123


 3072              		.cfi_endproc
 3073              	.LFE17:
 3075              		.section	.text.UTIL_LCD_DisplayStringAtLine,"ax",%progbits
 3076              		.align	1
 3077              		.global	UTIL_LCD_DisplayStringAtLine
 3078              		.syntax unified
 3079              		.thumb
 3080              		.thumb_func
 3082              	UTIL_LCD_DisplayStringAtLine:
 3083              	.LFB18:
 502:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 503:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 504:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Displays a maximum of 60 characters on the LCD.
 505:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Line: Line where to display the character shape
 506:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  ptr: Pointer to string to display on LCD
 507:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 508:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_DisplayStringAtLine(uint32_t Line, uint8_t *ptr)
 509:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 3084              		.loc 1 509 1
 3085              		.cfi_startproc
 3086              		@ args = 0, pretend = 0, frame = 8
 3087              		@ frame_needed = 1, uses_anonymous_args = 0
 3088 0000 80B5     		push	{r7, lr}
 3089              		.cfi_def_cfa_offset 8
 3090              		.cfi_offset 7, -8
 3091              		.cfi_offset 14, -4
 3092 0002 82B0     		sub	sp, sp, #8
 3093              		.cfi_def_cfa_offset 16
 3094 0004 00AF     		add	r7, sp, #0
 3095              		.cfi_def_cfa_register 7
 3096 0006 7860     		str	r0, [r7, #4]
 3097 0008 3960     		str	r1, [r7]
 510:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   UTIL_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 3098              		.loc 1 510 31
 3099 000a FFF7FEFF 		bl	UTIL_LCD_GetFont
 3100 000e 0346     		mov	r3, r0
 3101              		.loc 1 510 31 is_stmt 0 discriminator 1
 3102 0010 DB88     		ldrh	r3, [r3, #6]
 3103 0012 1A46     		mov	r2, r3
 3104              		.loc 1 510 3 is_stmt 1 discriminator 1
 3105 0014 7B68     		ldr	r3, [r7, #4]
 3106 0016 03FB02F1 		mul	r1, r3, r2
 3107 001a 0323     		movs	r3, #3
 3108 001c 3A68     		ldr	r2, [r7]
 3109 001e 0020     		movs	r0, #0
 3110 0020 FFF7FEFF 		bl	UTIL_LCD_DisplayStringAt
 511:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 3111              		.loc 1 511 1
 3112 0024 00BF     		nop
 3113 0026 0837     		adds	r7, r7, #8
 3114              		.cfi_def_cfa_offset 8
 3115 0028 BD46     		mov	sp, r7
 3116              		.cfi_def_cfa_register 13
 3117              		@ sp needed
 3118 002a 80BD     		pop	{r7, pc}
 3119              		.cfi_endproc
 3120              	.LFE18:
ARM GAS  /tmp/ccK9mPCc.s 			page 124


 3122              		.section	.text.UTIL_LCD_DrawLine,"ax",%progbits
 3123              		.align	1
 3124              		.global	UTIL_LCD_DrawLine
 3125              		.syntax unified
 3126              		.thumb
 3127              		.thumb_func
 3129              	UTIL_LCD_DrawLine:
 3130              	.LFB19:
 512:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 513:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 514:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Draws an uni-line (between two points) in currently active layer.
 515:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Xpos1 Point 1 X position
 516:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Ypos1 Point 1 Y position
 517:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Xpos2 Point 2 X position
 518:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Ypos2 Point 2 Y position
 519:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Color Draw color
 520:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 521:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_DrawLine(uint32_t Xpos1, uint32_t Ypos1, uint32_t Xpos2, uint32_t Ypos2, uint32_t Col
 522:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 3131              		.loc 1 522 1
 3132              		.cfi_startproc
 3133              		@ args = 4, pretend = 0, frame = 56
 3134              		@ frame_needed = 1, uses_anonymous_args = 0
 3135 0000 80B5     		push	{r7, lr}
 3136              		.cfi_def_cfa_offset 8
 3137              		.cfi_offset 7, -8
 3138              		.cfi_offset 14, -4
 3139 0002 8EB0     		sub	sp, sp, #56
 3140              		.cfi_def_cfa_offset 64
 3141 0004 00AF     		add	r7, sp, #0
 3142              		.cfi_def_cfa_register 7
 3143 0006 F860     		str	r0, [r7, #12]
 3144 0008 B960     		str	r1, [r7, #8]
 3145 000a 7A60     		str	r2, [r7, #4]
 3146 000c 3B60     		str	r3, [r7]
 523:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 3147              		.loc 1 523 11
 3148 000e 0023     		movs	r3, #0
 3149 0010 3B84     		strh	r3, [r7, #32]	@ movhi
 3150              		.loc 1 523 23
 3151 0012 0023     		movs	r3, #0
 3152 0014 FB83     		strh	r3, [r7, #30]	@ movhi
 3153              		.loc 1 523 35
 3154 0016 0023     		movs	r3, #0
 3155 0018 FB86     		strh	r3, [r7, #54]	@ movhi
 3156              		.loc 1 523 42
 3157 001a 0023     		movs	r3, #0
 3158 001c BB86     		strh	r3, [r7, #52]	@ movhi
 3159              		.loc 1 523 49
 3160 001e 0023     		movs	r3, #0
 3161 0020 7B86     		strh	r3, [r7, #50]	@ movhi
 3162              		.loc 1 523 60
 3163 0022 0023     		movs	r3, #0
 3164 0024 3B86     		strh	r3, [r7, #48]	@ movhi
 524:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 3165              		.loc 1 524 3
 3166 0026 0023     		movs	r3, #0
ARM GAS  /tmp/ccK9mPCc.s 			page 125


 3167 0028 FB85     		strh	r3, [r7, #46]	@ movhi
 3168              		.loc 1 524 14
 3169 002a 0023     		movs	r3, #0
 3170 002c BB85     		strh	r3, [r7, #44]	@ movhi
 3171              		.loc 1 524 25
 3172 002e 0023     		movs	r3, #0
 3173 0030 7B85     		strh	r3, [r7, #42]	@ movhi
 3174              		.loc 1 524 34
 3175 0032 0023     		movs	r3, #0
 3176 0034 3B85     		strh	r3, [r7, #40]	@ movhi
 3177              		.loc 1 524 43
 3178 0036 0023     		movs	r3, #0
 3179 0038 FB84     		strh	r3, [r7, #38]	@ movhi
 3180              		.loc 1 524 55
 3181 003a 0023     		movs	r3, #0
 3182 003c BB84     		strh	r3, [r7, #36]	@ movhi
 525:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   curpixel = 0;
 3183              		.loc 1 525 3
 3184 003e 0023     		movs	r3, #0
 3185 0040 7B84     		strh	r3, [r7, #34]	@ movhi
 526:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   int32_t x_diff, y_diff;
 527:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 528:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   x_diff = Xpos2 - Xpos1;
 3186              		.loc 1 528 18
 3187 0042 7A68     		ldr	r2, [r7, #4]
 3188 0044 FB68     		ldr	r3, [r7, #12]
 3189 0046 D31A     		subs	r3, r2, r3
 3190              		.loc 1 528 10
 3191 0048 BB61     		str	r3, [r7, #24]
 529:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   y_diff = Ypos2 - Ypos1;
 3192              		.loc 1 529 18
 3193 004a 3A68     		ldr	r2, [r7]
 3194 004c BB68     		ldr	r3, [r7, #8]
 3195 004e D31A     		subs	r3, r2, r3
 3196              		.loc 1 529 10
 3197 0050 7B61     		str	r3, [r7, #20]
 530:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 531:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   deltax = ABS(x_diff);         /* The absolute difference between the x's */
 3198              		.loc 1 531 12
 3199 0052 BB69     		ldr	r3, [r7, #24]
 3200 0054 002B     		cmp	r3, #0
 3201 0056 B8BF     		it	lt
 3202 0058 5B42     		rsblt	r3, r3, #0
 3203              		.loc 1 531 10
 3204 005a 3B84     		strh	r3, [r7, #32]	@ movhi
 532:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   deltay = ABS(y_diff);         /* The absolute difference between the y's */
 3205              		.loc 1 532 12
 3206 005c 7B69     		ldr	r3, [r7, #20]
 3207 005e 002B     		cmp	r3, #0
 3208 0060 B8BF     		it	lt
 3209 0062 5B42     		rsblt	r3, r3, #0
 3210              		.loc 1 532 10
 3211 0064 FB83     		strh	r3, [r7, #30]	@ movhi
 533:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   x = Xpos1;                       /* Start x off at the first pixel */
 3212              		.loc 1 533 5
 3213 0066 FB68     		ldr	r3, [r7, #12]
 3214 0068 FB86     		strh	r3, [r7, #54]	@ movhi
ARM GAS  /tmp/ccK9mPCc.s 			page 126


 534:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   y = Ypos1;                       /* Start y off at the first pixel */
 3215              		.loc 1 534 5
 3216 006a BB68     		ldr	r3, [r7, #8]
 3217 006c BB86     		strh	r3, [r7, #52]	@ movhi
 535:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 536:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 3218              		.loc 1 536 6
 3219 006e 7A68     		ldr	r2, [r7, #4]
 3220 0070 FB68     		ldr	r3, [r7, #12]
 3221 0072 9A42     		cmp	r2, r3
 3222 0074 04D3     		bcc	.L93
 537:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 538:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     xinc1 = 1;
 3223              		.loc 1 538 11
 3224 0076 0123     		movs	r3, #1
 3225 0078 7B86     		strh	r3, [r7, #50]	@ movhi
 539:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     xinc2 = 1;
 3226              		.loc 1 539 11
 3227 007a 0123     		movs	r3, #1
 3228 007c 3B86     		strh	r3, [r7, #48]	@ movhi
 3229 007e 05E0     		b	.L94
 3230              	.L93:
 540:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 541:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   else                          /* The x-values are decreasing */
 542:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 543:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     xinc1 = -1;
 3231              		.loc 1 543 11
 3232 0080 4FF6FF73 		movw	r3, #65535
 3233 0084 7B86     		strh	r3, [r7, #50]	@ movhi
 544:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     xinc2 = -1;
 3234              		.loc 1 544 11
 3235 0086 4FF6FF73 		movw	r3, #65535
 3236 008a 3B86     		strh	r3, [r7, #48]	@ movhi
 3237              	.L94:
 545:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 546:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 547:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 3238              		.loc 1 547 6
 3239 008c 3A68     		ldr	r2, [r7]
 3240 008e BB68     		ldr	r3, [r7, #8]
 3241 0090 9A42     		cmp	r2, r3
 3242 0092 04D3     		bcc	.L95
 548:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 549:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     yinc1 = 1;
 3243              		.loc 1 549 11
 3244 0094 0123     		movs	r3, #1
 3245 0096 FB85     		strh	r3, [r7, #46]	@ movhi
 550:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     yinc2 = 1;
 3246              		.loc 1 550 11
 3247 0098 0123     		movs	r3, #1
 3248 009a BB85     		strh	r3, [r7, #44]	@ movhi
 3249 009c 05E0     		b	.L96
 3250              	.L95:
 551:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 552:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   else                          /* The y-values are decreasing */
 553:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 554:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     yinc1 = -1;
ARM GAS  /tmp/ccK9mPCc.s 			page 127


 3251              		.loc 1 554 11
 3252 009e 4FF6FF73 		movw	r3, #65535
 3253 00a2 FB85     		strh	r3, [r7, #46]	@ movhi
 555:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     yinc2 = -1;
 3254              		.loc 1 555 11
 3255 00a4 4FF6FF73 		movw	r3, #65535
 3256 00a8 BB85     		strh	r3, [r7, #44]	@ movhi
 3257              	.L96:
 556:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 557:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 558:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 3258              		.loc 1 558 6
 3259 00aa B7F92020 		ldrsh	r2, [r7, #32]
 3260 00ae B7F91E30 		ldrsh	r3, [r7, #30]
 3261 00b2 9A42     		cmp	r2, r3
 3262 00b4 10DB     		blt	.L97
 559:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 560:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 3263              		.loc 1 560 11
 3264 00b6 0023     		movs	r3, #0
 3265 00b8 7B86     		strh	r3, [r7, #50]	@ movhi
 561:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     yinc2 = 0;                  /* Don't change the y for every iteration */
 3266              		.loc 1 561 11
 3267 00ba 0023     		movs	r3, #0
 3268 00bc BB85     		strh	r3, [r7, #44]	@ movhi
 562:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     den = deltax;
 3269              		.loc 1 562 9
 3270 00be 3B8C     		ldrh	r3, [r7, #32]	@ movhi
 3271 00c0 7B85     		strh	r3, [r7, #42]	@ movhi
 563:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     num = deltax / 2;
 3272              		.loc 1 563 9
 3273 00c2 B7F92030 		ldrsh	r3, [r7, #32]
 3274 00c6 DA0F     		lsrs	r2, r3, #31
 3275 00c8 1344     		add	r3, r3, r2
 3276 00ca 5B10     		asrs	r3, r3, #1
 3277 00cc 3B85     		strh	r3, [r7, #40]	@ movhi
 564:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     numadd = deltay;
 3278              		.loc 1 564 12
 3279 00ce FB8B     		ldrh	r3, [r7, #30]	@ movhi
 3280 00d0 FB84     		strh	r3, [r7, #38]	@ movhi
 565:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     numpixels = deltax;         /* There are more x-values than y-values */
 3281              		.loc 1 565 15
 3282 00d2 3B8C     		ldrh	r3, [r7, #32]	@ movhi
 3283 00d4 BB84     		strh	r3, [r7, #36]	@ movhi
 3284 00d6 0FE0     		b	.L98
 3285              	.L97:
 566:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 567:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   else                          /* There is at least one y-value for every x-value */
 568:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 569:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     xinc2 = 0;                  /* Don't change the x for every iteration */
 3286              		.loc 1 569 11
 3287 00d8 0023     		movs	r3, #0
 3288 00da 3B86     		strh	r3, [r7, #48]	@ movhi
 570:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 3289              		.loc 1 570 11
 3290 00dc 0023     		movs	r3, #0
 3291 00de FB85     		strh	r3, [r7, #46]	@ movhi
ARM GAS  /tmp/ccK9mPCc.s 			page 128


 571:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     den = deltay;
 3292              		.loc 1 571 9
 3293 00e0 FB8B     		ldrh	r3, [r7, #30]	@ movhi
 3294 00e2 7B85     		strh	r3, [r7, #42]	@ movhi
 572:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     num = deltay / 2;
 3295              		.loc 1 572 9
 3296 00e4 B7F91E30 		ldrsh	r3, [r7, #30]
 3297 00e8 DA0F     		lsrs	r2, r3, #31
 3298 00ea 1344     		add	r3, r3, r2
 3299 00ec 5B10     		asrs	r3, r3, #1
 3300 00ee 3B85     		strh	r3, [r7, #40]	@ movhi
 573:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     numadd = deltax;
 3301              		.loc 1 573 12
 3302 00f0 3B8C     		ldrh	r3, [r7, #32]	@ movhi
 3303 00f2 FB84     		strh	r3, [r7, #38]	@ movhi
 574:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     numpixels = deltay;         /* There are more y-values than x-values */
 3304              		.loc 1 574 15
 3305 00f4 FB8B     		ldrh	r3, [r7, #30]	@ movhi
 3306 00f6 BB84     		strh	r3, [r7, #36]	@ movhi
 3307              	.L98:
 575:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 576:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 577:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   for (curpixel = 0; curpixel <= numpixels; curpixel++)
 3308              		.loc 1 577 17
 3309 00f8 0023     		movs	r3, #0
 3310 00fa 7B84     		strh	r3, [r7, #34]	@ movhi
 3311              		.loc 1 577 3
 3312 00fc 2FE0     		b	.L99
 3313              	.L101:
 578:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 579:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     UTIL_LCD_SetPixel(x, y, Color);   /* Draw the current pixel */
 3314              		.loc 1 579 5
 3315 00fe FB8E     		ldrh	r3, [r7, #54]
 3316 0100 B98E     		ldrh	r1, [r7, #52]
 3317 0102 3A6C     		ldr	r2, [r7, #64]
 3318 0104 1846     		mov	r0, r3
 3319 0106 FFF7FEFF 		bl	UTIL_LCD_SetPixel
 580:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     num += numadd;                            /* Increase the numerator by the top of the fraction 
 3320              		.loc 1 580 9
 3321 010a 3A8D     		ldrh	r2, [r7, #40]
 3322 010c FB8C     		ldrh	r3, [r7, #38]
 3323 010e 1344     		add	r3, r3, r2
 3324 0110 9BB2     		uxth	r3, r3
 3325 0112 3B85     		strh	r3, [r7, #40]	@ movhi
 581:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     if (num >= den)                           /* Check if numerator >= denominator */
 3326              		.loc 1 581 8
 3327 0114 B7F92820 		ldrsh	r2, [r7, #40]
 3328 0118 B7F92A30 		ldrsh	r3, [r7, #42]
 3329 011c 9A42     		cmp	r2, r3
 3330 011e 0EDB     		blt	.L100
 582:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 583:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       num -= den;                             /* Calculate the new numerator value */
 3331              		.loc 1 583 11
 3332 0120 3A8D     		ldrh	r2, [r7, #40]
 3333 0122 7B8D     		ldrh	r3, [r7, #42]
 3334 0124 D31A     		subs	r3, r2, r3
 3335 0126 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccK9mPCc.s 			page 129


 3336 0128 3B85     		strh	r3, [r7, #40]	@ movhi
 584:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       x += xinc1;                             /* Change the x as appropriate */
 3337              		.loc 1 584 9
 3338 012a FA8E     		ldrh	r2, [r7, #54]
 3339 012c 7B8E     		ldrh	r3, [r7, #50]
 3340 012e 1344     		add	r3, r3, r2
 3341 0130 9BB2     		uxth	r3, r3
 3342 0132 FB86     		strh	r3, [r7, #54]	@ movhi
 585:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       y += yinc1;                             /* Change the y as appropriate */
 3343              		.loc 1 585 9
 3344 0134 BA8E     		ldrh	r2, [r7, #52]
 3345 0136 FB8D     		ldrh	r3, [r7, #46]
 3346 0138 1344     		add	r3, r3, r2
 3347 013a 9BB2     		uxth	r3, r3
 3348 013c BB86     		strh	r3, [r7, #52]	@ movhi
 3349              	.L100:
 586:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 587:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     x += xinc2;                               /* Change the x as appropriate */
 3350              		.loc 1 587 7
 3351 013e FA8E     		ldrh	r2, [r7, #54]
 3352 0140 3B8E     		ldrh	r3, [r7, #48]
 3353 0142 1344     		add	r3, r3, r2
 3354 0144 9BB2     		uxth	r3, r3
 3355 0146 FB86     		strh	r3, [r7, #54]	@ movhi
 588:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     y += yinc2;                               /* Change the y as appropriate */
 3356              		.loc 1 588 7
 3357 0148 BA8E     		ldrh	r2, [r7, #52]
 3358 014a BB8D     		ldrh	r3, [r7, #44]
 3359 014c 1344     		add	r3, r3, r2
 3360 014e 9BB2     		uxth	r3, r3
 3361 0150 BB86     		strh	r3, [r7, #52]	@ movhi
 577:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 3362              		.loc 1 577 53 discriminator 2
 3363 0152 B7F92230 		ldrsh	r3, [r7, #34]
 3364 0156 9BB2     		uxth	r3, r3
 3365 0158 0133     		adds	r3, r3, #1
 3366 015a 9BB2     		uxth	r3, r3
 3367 015c 7B84     		strh	r3, [r7, #34]	@ movhi
 3368              	.L99:
 577:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 3369              		.loc 1 577 31 discriminator 1
 3370 015e B7F92220 		ldrsh	r2, [r7, #34]
 3371 0162 B7F92430 		ldrsh	r3, [r7, #36]
 3372 0166 9A42     		cmp	r2, r3
 3373 0168 C9DD     		ble	.L101
 589:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 590:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 3374              		.loc 1 590 1
 3375 016a 00BF     		nop
 3376 016c 00BF     		nop
 3377 016e 3837     		adds	r7, r7, #56
 3378              		.cfi_def_cfa_offset 8
 3379 0170 BD46     		mov	sp, r7
 3380              		.cfi_def_cfa_register 13
 3381              		@ sp needed
 3382 0172 80BD     		pop	{r7, pc}
 3383              		.cfi_endproc
ARM GAS  /tmp/ccK9mPCc.s 			page 130


 3384              	.LFE19:
 3386              		.section	.text.UTIL_LCD_DrawRect,"ax",%progbits
 3387              		.align	1
 3388              		.global	UTIL_LCD_DrawRect
 3389              		.syntax unified
 3390              		.thumb
 3391              		.thumb_func
 3393              	UTIL_LCD_DrawRect:
 3394              	.LFB20:
 591:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 592:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 593:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Draws a rectangle in currently active layer.
 594:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Xpos X position
 595:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Ypos Y position
 596:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Width  Rectangle width
 597:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Height Rectangle height
 598:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Color  Draw color
 599:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 600:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Colo
 601:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 3395              		.loc 1 601 1
 3396              		.cfi_startproc
 3397              		@ args = 4, pretend = 0, frame = 16
 3398              		@ frame_needed = 1, uses_anonymous_args = 0
 3399 0000 80B5     		push	{r7, lr}
 3400              		.cfi_def_cfa_offset 8
 3401              		.cfi_offset 7, -8
 3402              		.cfi_offset 14, -4
 3403 0002 84B0     		sub	sp, sp, #16
 3404              		.cfi_def_cfa_offset 24
 3405 0004 00AF     		add	r7, sp, #0
 3406              		.cfi_def_cfa_register 7
 3407 0006 F860     		str	r0, [r7, #12]
 3408 0008 B960     		str	r1, [r7, #8]
 3409 000a 7A60     		str	r2, [r7, #4]
 3410 000c 3B60     		str	r3, [r7]
 602:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   /* Draw horizontal lines */
 603:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 3411              		.loc 1 603 3
 3412 000e BB69     		ldr	r3, [r7, #24]
 3413 0010 7A68     		ldr	r2, [r7, #4]
 3414 0012 B968     		ldr	r1, [r7, #8]
 3415 0014 F868     		ldr	r0, [r7, #12]
 3416 0016 FFF7FEFF 		bl	UTIL_LCD_DrawHLine
 604:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 3417              		.loc 1 604 33
 3418 001a BA68     		ldr	r2, [r7, #8]
 3419 001c 3B68     		ldr	r3, [r7]
 3420 001e 1344     		add	r3, r3, r2
 3421              		.loc 1 604 3
 3422 0020 591E     		subs	r1, r3, #1
 3423 0022 BB69     		ldr	r3, [r7, #24]
 3424 0024 7A68     		ldr	r2, [r7, #4]
 3425 0026 F868     		ldr	r0, [r7, #12]
 3426 0028 FFF7FEFF 		bl	UTIL_LCD_DrawHLine
 605:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 606:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   /* Draw vertical lines */
ARM GAS  /tmp/ccK9mPCc.s 			page 131


 607:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 3427              		.loc 1 607 3
 3428 002c BB69     		ldr	r3, [r7, #24]
 3429 002e 3A68     		ldr	r2, [r7]
 3430 0030 B968     		ldr	r1, [r7, #8]
 3431 0032 F868     		ldr	r0, [r7, #12]
 3432 0034 FFF7FEFF 		bl	UTIL_LCD_DrawVLine
 608:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 3433              		.loc 1 608 28
 3434 0038 FA68     		ldr	r2, [r7, #12]
 3435 003a 7B68     		ldr	r3, [r7, #4]
 3436 003c 1344     		add	r3, r3, r2
 3437              		.loc 1 608 3
 3438 003e 581E     		subs	r0, r3, #1
 3439 0040 BB69     		ldr	r3, [r7, #24]
 3440 0042 3A68     		ldr	r2, [r7]
 3441 0044 B968     		ldr	r1, [r7, #8]
 3442 0046 FFF7FEFF 		bl	UTIL_LCD_DrawVLine
 609:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 3443              		.loc 1 609 1
 3444 004a 00BF     		nop
 3445 004c 1037     		adds	r7, r7, #16
 3446              		.cfi_def_cfa_offset 8
 3447 004e BD46     		mov	sp, r7
 3448              		.cfi_def_cfa_register 13
 3449              		@ sp needed
 3450 0050 80BD     		pop	{r7, pc}
 3451              		.cfi_endproc
 3452              	.LFE20:
 3454              		.section	.text.UTIL_LCD_DrawCircle,"ax",%progbits
 3455              		.align	1
 3456              		.global	UTIL_LCD_DrawCircle
 3457              		.syntax unified
 3458              		.thumb
 3459              		.thumb_func
 3461              	UTIL_LCD_DrawCircle:
 3462              	.LFB21:
 610:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 611:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 612:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Draws a circle in currently active layer.
 613:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Xpos    X position
 614:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Ypos    Y position
 615:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Radius  Circle radius
 616:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Color   Draw color
 617:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 618:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_DrawCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
 619:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 3463              		.loc 1 619 1
 3464              		.cfi_startproc
 3465              		@ args = 0, pretend = 0, frame = 32
 3466              		@ frame_needed = 1, uses_anonymous_args = 0
 3467 0000 80B5     		push	{r7, lr}
 3468              		.cfi_def_cfa_offset 8
 3469              		.cfi_offset 7, -8
 3470              		.cfi_offset 14, -4
 3471 0002 88B0     		sub	sp, sp, #32
 3472              		.cfi_def_cfa_offset 40
ARM GAS  /tmp/ccK9mPCc.s 			page 132


 3473 0004 00AF     		add	r7, sp, #0
 3474              		.cfi_def_cfa_register 7
 3475 0006 F860     		str	r0, [r7, #12]
 3476 0008 B960     		str	r1, [r7, #8]
 3477 000a 7A60     		str	r2, [r7, #4]
 3478 000c 3B60     		str	r3, [r7]
 620:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   int32_t   decision;  /* Decision Variable */
 621:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint32_t  current_x; /* Current X Value */
 622:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint32_t  current_y; /* Current Y Value */
 623:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 624:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   decision = 3 - (Radius << 1);
 3479              		.loc 1 624 26
 3480 000e 7B68     		ldr	r3, [r7, #4]
 3481 0010 5B00     		lsls	r3, r3, #1
 3482              		.loc 1 624 16
 3483 0012 C3F10303 		rsb	r3, r3, #3
 3484              		.loc 1 624 12
 3485 0016 FB61     		str	r3, [r7, #28]
 625:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   current_x = 0;
 3486              		.loc 1 625 13
 3487 0018 0023     		movs	r3, #0
 3488 001a BB61     		str	r3, [r7, #24]
 626:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   current_y = Radius;
 3489              		.loc 1 626 13
 3490 001c 7B68     		ldr	r3, [r7, #4]
 3491 001e 7B61     		str	r3, [r7, #20]
 627:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 628:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   while (current_x <= current_y)
 3492              		.loc 1 628 9
 3493 0020 27E1     		b	.L104
 3494              	.L115:
 629:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 630:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     if((Ypos - current_y) < DrawProp[DrawProp->LcdLayer].LcdYsize)
 3495              		.loc 1 630 14
 3496 0022 BA68     		ldr	r2, [r7, #8]
 3497 0024 7B69     		ldr	r3, [r7, #20]
 3498 0026 D21A     		subs	r2, r2, r3
 3499              		.loc 1 630 46
 3500 0028 974B     		ldr	r3, .L116
 3501 002a DB68     		ldr	r3, [r3, #12]
 3502              		.loc 1 630 57
 3503 002c 9649     		ldr	r1, .L116
 3504 002e 5B01     		lsls	r3, r3, #5
 3505 0030 0B44     		add	r3, r3, r1
 3506 0032 1833     		adds	r3, r3, #24
 3507 0034 1B68     		ldr	r3, [r3]
 3508              		.loc 1 630 7
 3509 0036 9A42     		cmp	r2, r3
 3510 0038 37D2     		bcs	.L105
 631:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 632:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       if((Xpos + current_x) < DrawProp[DrawProp->LcdLayer].LcdXsize)
 3511              		.loc 1 632 16
 3512 003a FA68     		ldr	r2, [r7, #12]
 3513 003c BB69     		ldr	r3, [r7, #24]
 3514 003e 1A44     		add	r2, r2, r3
 3515              		.loc 1 632 48
 3516 0040 914B     		ldr	r3, .L116
ARM GAS  /tmp/ccK9mPCc.s 			page 133


 3517 0042 DB68     		ldr	r3, [r3, #12]
 3518              		.loc 1 632 59
 3519 0044 9049     		ldr	r1, .L116
 3520 0046 5B01     		lsls	r3, r3, #5
 3521 0048 0B44     		add	r3, r3, r1
 3522 004a 1433     		adds	r3, r3, #20
 3523 004c 1B68     		ldr	r3, [r3]
 3524              		.loc 1 632 9
 3525 004e 9A42     		cmp	r2, r3
 3526 0050 0FD2     		bcs	.L106
 633:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 634:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         UTIL_LCD_SetPixel((Xpos + current_x), (Ypos - current_y), Color);
 3527              		.loc 1 634 9
 3528 0052 FB68     		ldr	r3, [r7, #12]
 3529 0054 9AB2     		uxth	r2, r3
 3530 0056 BB69     		ldr	r3, [r7, #24]
 3531 0058 9BB2     		uxth	r3, r3
 3532 005a 1344     		add	r3, r3, r2
 3533 005c 98B2     		uxth	r0, r3
 3534 005e BB68     		ldr	r3, [r7, #8]
 3535 0060 9AB2     		uxth	r2, r3
 3536 0062 7B69     		ldr	r3, [r7, #20]
 3537 0064 9BB2     		uxth	r3, r3
 3538 0066 D31A     		subs	r3, r2, r3
 3539 0068 9BB2     		uxth	r3, r3
 3540 006a 3A68     		ldr	r2, [r7]
 3541 006c 1946     		mov	r1, r3
 3542 006e FFF7FEFF 		bl	UTIL_LCD_SetPixel
 3543              	.L106:
 635:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       }
 636:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       if((Xpos - current_x) < DrawProp[DrawProp->LcdLayer].LcdXsize)
 3544              		.loc 1 636 16
 3545 0072 FA68     		ldr	r2, [r7, #12]
 3546 0074 BB69     		ldr	r3, [r7, #24]
 3547 0076 D21A     		subs	r2, r2, r3
 3548              		.loc 1 636 48
 3549 0078 834B     		ldr	r3, .L116
 3550 007a DB68     		ldr	r3, [r3, #12]
 3551              		.loc 1 636 59
 3552 007c 8249     		ldr	r1, .L116
 3553 007e 5B01     		lsls	r3, r3, #5
 3554 0080 0B44     		add	r3, r3, r1
 3555 0082 1433     		adds	r3, r3, #20
 3556 0084 1B68     		ldr	r3, [r3]
 3557              		.loc 1 636 9
 3558 0086 9A42     		cmp	r2, r3
 3559 0088 0FD2     		bcs	.L105
 637:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 638:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         UTIL_LCD_SetPixel((Xpos - current_x), (Ypos - current_y), Color);
 3560              		.loc 1 638 9
 3561 008a FB68     		ldr	r3, [r7, #12]
 3562 008c 9AB2     		uxth	r2, r3
 3563 008e BB69     		ldr	r3, [r7, #24]
 3564 0090 9BB2     		uxth	r3, r3
 3565 0092 D31A     		subs	r3, r2, r3
 3566 0094 98B2     		uxth	r0, r3
 3567 0096 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccK9mPCc.s 			page 134


 3568 0098 9AB2     		uxth	r2, r3
 3569 009a 7B69     		ldr	r3, [r7, #20]
 3570 009c 9BB2     		uxth	r3, r3
 3571 009e D31A     		subs	r3, r2, r3
 3572 00a0 9BB2     		uxth	r3, r3
 3573 00a2 3A68     		ldr	r2, [r7]
 3574 00a4 1946     		mov	r1, r3
 3575 00a6 FFF7FEFF 		bl	UTIL_LCD_SetPixel
 3576              	.L105:
 639:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       }
 640:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 641:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 642:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     if((Ypos - current_x) < DrawProp[DrawProp->LcdLayer].LcdYsize)
 3577              		.loc 1 642 14
 3578 00aa BA68     		ldr	r2, [r7, #8]
 3579 00ac BB69     		ldr	r3, [r7, #24]
 3580 00ae D21A     		subs	r2, r2, r3
 3581              		.loc 1 642 46
 3582 00b0 754B     		ldr	r3, .L116
 3583 00b2 DB68     		ldr	r3, [r3, #12]
 3584              		.loc 1 642 57
 3585 00b4 7449     		ldr	r1, .L116
 3586 00b6 5B01     		lsls	r3, r3, #5
 3587 00b8 0B44     		add	r3, r3, r1
 3588 00ba 1833     		adds	r3, r3, #24
 3589 00bc 1B68     		ldr	r3, [r3]
 3590              		.loc 1 642 7
 3591 00be 9A42     		cmp	r2, r3
 3592 00c0 37D2     		bcs	.L107
 643:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 644:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       if((Xpos + current_y) < DrawProp[DrawProp->LcdLayer].LcdXsize)
 3593              		.loc 1 644 16
 3594 00c2 FA68     		ldr	r2, [r7, #12]
 3595 00c4 7B69     		ldr	r3, [r7, #20]
 3596 00c6 1A44     		add	r2, r2, r3
 3597              		.loc 1 644 48
 3598 00c8 6F4B     		ldr	r3, .L116
 3599 00ca DB68     		ldr	r3, [r3, #12]
 3600              		.loc 1 644 59
 3601 00cc 6E49     		ldr	r1, .L116
 3602 00ce 5B01     		lsls	r3, r3, #5
 3603 00d0 0B44     		add	r3, r3, r1
 3604 00d2 1433     		adds	r3, r3, #20
 3605 00d4 1B68     		ldr	r3, [r3]
 3606              		.loc 1 644 9
 3607 00d6 9A42     		cmp	r2, r3
 3608 00d8 0FD2     		bcs	.L108
 645:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 646:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         UTIL_LCD_SetPixel((Xpos + current_y), (Ypos - current_x), Color);
 3609              		.loc 1 646 9
 3610 00da FB68     		ldr	r3, [r7, #12]
 3611 00dc 9AB2     		uxth	r2, r3
 3612 00de 7B69     		ldr	r3, [r7, #20]
 3613 00e0 9BB2     		uxth	r3, r3
 3614 00e2 1344     		add	r3, r3, r2
 3615 00e4 98B2     		uxth	r0, r3
 3616 00e6 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccK9mPCc.s 			page 135


 3617 00e8 9AB2     		uxth	r2, r3
 3618 00ea BB69     		ldr	r3, [r7, #24]
 3619 00ec 9BB2     		uxth	r3, r3
 3620 00ee D31A     		subs	r3, r2, r3
 3621 00f0 9BB2     		uxth	r3, r3
 3622 00f2 3A68     		ldr	r2, [r7]
 3623 00f4 1946     		mov	r1, r3
 3624 00f6 FFF7FEFF 		bl	UTIL_LCD_SetPixel
 3625              	.L108:
 647:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       }
 648:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       if((Xpos - current_y) < DrawProp[DrawProp->LcdLayer].LcdXsize)
 3626              		.loc 1 648 16
 3627 00fa FA68     		ldr	r2, [r7, #12]
 3628 00fc 7B69     		ldr	r3, [r7, #20]
 3629 00fe D21A     		subs	r2, r2, r3
 3630              		.loc 1 648 48
 3631 0100 614B     		ldr	r3, .L116
 3632 0102 DB68     		ldr	r3, [r3, #12]
 3633              		.loc 1 648 59
 3634 0104 6049     		ldr	r1, .L116
 3635 0106 5B01     		lsls	r3, r3, #5
 3636 0108 0B44     		add	r3, r3, r1
 3637 010a 1433     		adds	r3, r3, #20
 3638 010c 1B68     		ldr	r3, [r3]
 3639              		.loc 1 648 9
 3640 010e 9A42     		cmp	r2, r3
 3641 0110 0FD2     		bcs	.L107
 649:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 650:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         UTIL_LCD_SetPixel((Xpos - current_y), (Ypos - current_x), Color);
 3642              		.loc 1 650 9
 3643 0112 FB68     		ldr	r3, [r7, #12]
 3644 0114 9AB2     		uxth	r2, r3
 3645 0116 7B69     		ldr	r3, [r7, #20]
 3646 0118 9BB2     		uxth	r3, r3
 3647 011a D31A     		subs	r3, r2, r3
 3648 011c 98B2     		uxth	r0, r3
 3649 011e BB68     		ldr	r3, [r7, #8]
 3650 0120 9AB2     		uxth	r2, r3
 3651 0122 BB69     		ldr	r3, [r7, #24]
 3652 0124 9BB2     		uxth	r3, r3
 3653 0126 D31A     		subs	r3, r2, r3
 3654 0128 9BB2     		uxth	r3, r3
 3655 012a 3A68     		ldr	r2, [r7]
 3656 012c 1946     		mov	r1, r3
 3657 012e FFF7FEFF 		bl	UTIL_LCD_SetPixel
 3658              	.L107:
 651:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       }
 652:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 653:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 654:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     if((Ypos + current_y) < DrawProp[DrawProp->LcdLayer].LcdYsize)
 3659              		.loc 1 654 14
 3660 0132 BA68     		ldr	r2, [r7, #8]
 3661 0134 7B69     		ldr	r3, [r7, #20]
 3662 0136 1A44     		add	r2, r2, r3
 3663              		.loc 1 654 46
 3664 0138 534B     		ldr	r3, .L116
 3665 013a DB68     		ldr	r3, [r3, #12]
ARM GAS  /tmp/ccK9mPCc.s 			page 136


 3666              		.loc 1 654 57
 3667 013c 5249     		ldr	r1, .L116
 3668 013e 5B01     		lsls	r3, r3, #5
 3669 0140 0B44     		add	r3, r3, r1
 3670 0142 1833     		adds	r3, r3, #24
 3671 0144 1B68     		ldr	r3, [r3]
 3672              		.loc 1 654 7
 3673 0146 9A42     		cmp	r2, r3
 3674 0148 37D2     		bcs	.L109
 655:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 656:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       if((Xpos + current_x) < DrawProp[DrawProp->LcdLayer].LcdXsize)
 3675              		.loc 1 656 16
 3676 014a FA68     		ldr	r2, [r7, #12]
 3677 014c BB69     		ldr	r3, [r7, #24]
 3678 014e 1A44     		add	r2, r2, r3
 3679              		.loc 1 656 48
 3680 0150 4D4B     		ldr	r3, .L116
 3681 0152 DB68     		ldr	r3, [r3, #12]
 3682              		.loc 1 656 59
 3683 0154 4C49     		ldr	r1, .L116
 3684 0156 5B01     		lsls	r3, r3, #5
 3685 0158 0B44     		add	r3, r3, r1
 3686 015a 1433     		adds	r3, r3, #20
 3687 015c 1B68     		ldr	r3, [r3]
 3688              		.loc 1 656 9
 3689 015e 9A42     		cmp	r2, r3
 3690 0160 0FD2     		bcs	.L110
 657:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 658:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         UTIL_LCD_SetPixel((Xpos + current_x), (Ypos + current_y), Color);
 3691              		.loc 1 658 9
 3692 0162 FB68     		ldr	r3, [r7, #12]
 3693 0164 9AB2     		uxth	r2, r3
 3694 0166 BB69     		ldr	r3, [r7, #24]
 3695 0168 9BB2     		uxth	r3, r3
 3696 016a 1344     		add	r3, r3, r2
 3697 016c 98B2     		uxth	r0, r3
 3698 016e BB68     		ldr	r3, [r7, #8]
 3699 0170 9AB2     		uxth	r2, r3
 3700 0172 7B69     		ldr	r3, [r7, #20]
 3701 0174 9BB2     		uxth	r3, r3
 3702 0176 1344     		add	r3, r3, r2
 3703 0178 9BB2     		uxth	r3, r3
 3704 017a 3A68     		ldr	r2, [r7]
 3705 017c 1946     		mov	r1, r3
 3706 017e FFF7FEFF 		bl	UTIL_LCD_SetPixel
 3707              	.L110:
 659:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       }
 660:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       if((Xpos - current_x) < DrawProp[DrawProp->LcdLayer].LcdXsize)
 3708              		.loc 1 660 16
 3709 0182 FA68     		ldr	r2, [r7, #12]
 3710 0184 BB69     		ldr	r3, [r7, #24]
 3711 0186 D21A     		subs	r2, r2, r3
 3712              		.loc 1 660 48
 3713 0188 3F4B     		ldr	r3, .L116
 3714 018a DB68     		ldr	r3, [r3, #12]
 3715              		.loc 1 660 59
 3716 018c 3E49     		ldr	r1, .L116
ARM GAS  /tmp/ccK9mPCc.s 			page 137


 3717 018e 5B01     		lsls	r3, r3, #5
 3718 0190 0B44     		add	r3, r3, r1
 3719 0192 1433     		adds	r3, r3, #20
 3720 0194 1B68     		ldr	r3, [r3]
 3721              		.loc 1 660 9
 3722 0196 9A42     		cmp	r2, r3
 3723 0198 0FD2     		bcs	.L109
 661:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 662:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         UTIL_LCD_SetPixel((Xpos - current_x), (Ypos + current_y), Color);
 3724              		.loc 1 662 9
 3725 019a FB68     		ldr	r3, [r7, #12]
 3726 019c 9AB2     		uxth	r2, r3
 3727 019e BB69     		ldr	r3, [r7, #24]
 3728 01a0 9BB2     		uxth	r3, r3
 3729 01a2 D31A     		subs	r3, r2, r3
 3730 01a4 98B2     		uxth	r0, r3
 3731 01a6 BB68     		ldr	r3, [r7, #8]
 3732 01a8 9AB2     		uxth	r2, r3
 3733 01aa 7B69     		ldr	r3, [r7, #20]
 3734 01ac 9BB2     		uxth	r3, r3
 3735 01ae 1344     		add	r3, r3, r2
 3736 01b0 9BB2     		uxth	r3, r3
 3737 01b2 3A68     		ldr	r2, [r7]
 3738 01b4 1946     		mov	r1, r3
 3739 01b6 FFF7FEFF 		bl	UTIL_LCD_SetPixel
 3740              	.L109:
 663:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       }
 664:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 665:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 666:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     if((Ypos + current_x) < DrawProp[DrawProp->LcdLayer].LcdYsize)
 3741              		.loc 1 666 14
 3742 01ba BA68     		ldr	r2, [r7, #8]
 3743 01bc BB69     		ldr	r3, [r7, #24]
 3744 01be 1A44     		add	r2, r2, r3
 3745              		.loc 1 666 46
 3746 01c0 314B     		ldr	r3, .L116
 3747 01c2 DB68     		ldr	r3, [r3, #12]
 3748              		.loc 1 666 57
 3749 01c4 3049     		ldr	r1, .L116
 3750 01c6 5B01     		lsls	r3, r3, #5
 3751 01c8 0B44     		add	r3, r3, r1
 3752 01ca 1833     		adds	r3, r3, #24
 3753 01cc 1B68     		ldr	r3, [r3]
 3754              		.loc 1 666 7
 3755 01ce 9A42     		cmp	r2, r3
 3756 01d0 37D2     		bcs	.L111
 667:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 668:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       if((Xpos + current_y) < DrawProp[DrawProp->LcdLayer].LcdXsize)
 3757              		.loc 1 668 16
 3758 01d2 FA68     		ldr	r2, [r7, #12]
 3759 01d4 7B69     		ldr	r3, [r7, #20]
 3760 01d6 1A44     		add	r2, r2, r3
 3761              		.loc 1 668 48
 3762 01d8 2B4B     		ldr	r3, .L116
 3763 01da DB68     		ldr	r3, [r3, #12]
 3764              		.loc 1 668 59
 3765 01dc 2A49     		ldr	r1, .L116
ARM GAS  /tmp/ccK9mPCc.s 			page 138


 3766 01de 5B01     		lsls	r3, r3, #5
 3767 01e0 0B44     		add	r3, r3, r1
 3768 01e2 1433     		adds	r3, r3, #20
 3769 01e4 1B68     		ldr	r3, [r3]
 3770              		.loc 1 668 9
 3771 01e6 9A42     		cmp	r2, r3
 3772 01e8 0FD2     		bcs	.L112
 669:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 670:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         UTIL_LCD_SetPixel((Xpos + current_y), (Ypos + current_x), Color);
 3773              		.loc 1 670 9
 3774 01ea FB68     		ldr	r3, [r7, #12]
 3775 01ec 9AB2     		uxth	r2, r3
 3776 01ee 7B69     		ldr	r3, [r7, #20]
 3777 01f0 9BB2     		uxth	r3, r3
 3778 01f2 1344     		add	r3, r3, r2
 3779 01f4 98B2     		uxth	r0, r3
 3780 01f6 BB68     		ldr	r3, [r7, #8]
 3781 01f8 9AB2     		uxth	r2, r3
 3782 01fa BB69     		ldr	r3, [r7, #24]
 3783 01fc 9BB2     		uxth	r3, r3
 3784 01fe 1344     		add	r3, r3, r2
 3785 0200 9BB2     		uxth	r3, r3
 3786 0202 3A68     		ldr	r2, [r7]
 3787 0204 1946     		mov	r1, r3
 3788 0206 FFF7FEFF 		bl	UTIL_LCD_SetPixel
 3789              	.L112:
 671:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       }
 672:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       if((Xpos - current_y) < DrawProp[DrawProp->LcdLayer].LcdXsize)
 3790              		.loc 1 672 16
 3791 020a FA68     		ldr	r2, [r7, #12]
 3792 020c 7B69     		ldr	r3, [r7, #20]
 3793 020e D21A     		subs	r2, r2, r3
 3794              		.loc 1 672 48
 3795 0210 1D4B     		ldr	r3, .L116
 3796 0212 DB68     		ldr	r3, [r3, #12]
 3797              		.loc 1 672 59
 3798 0214 1C49     		ldr	r1, .L116
 3799 0216 5B01     		lsls	r3, r3, #5
 3800 0218 0B44     		add	r3, r3, r1
 3801 021a 1433     		adds	r3, r3, #20
 3802 021c 1B68     		ldr	r3, [r3]
 3803              		.loc 1 672 9
 3804 021e 9A42     		cmp	r2, r3
 3805 0220 0FD2     		bcs	.L111
 673:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 674:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         UTIL_LCD_SetPixel((Xpos - current_y), (Ypos + current_x), Color);
 3806              		.loc 1 674 9
 3807 0222 FB68     		ldr	r3, [r7, #12]
 3808 0224 9AB2     		uxth	r2, r3
 3809 0226 7B69     		ldr	r3, [r7, #20]
 3810 0228 9BB2     		uxth	r3, r3
 3811 022a D31A     		subs	r3, r2, r3
 3812 022c 98B2     		uxth	r0, r3
 3813 022e BB68     		ldr	r3, [r7, #8]
 3814 0230 9AB2     		uxth	r2, r3
 3815 0232 BB69     		ldr	r3, [r7, #24]
 3816 0234 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccK9mPCc.s 			page 139


 3817 0236 1344     		add	r3, r3, r2
 3818 0238 9BB2     		uxth	r3, r3
 3819 023a 3A68     		ldr	r2, [r7]
 3820 023c 1946     		mov	r1, r3
 3821 023e FFF7FEFF 		bl	UTIL_LCD_SetPixel
 3822              	.L111:
 675:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       }
 676:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 677:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 678:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     if (decision < 0)
 3823              		.loc 1 678 8
 3824 0242 FB69     		ldr	r3, [r7, #28]
 3825 0244 002B     		cmp	r3, #0
 3826 0246 06DA     		bge	.L113
 679:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 680:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       decision += (current_x << 2) + 6;
 3827              		.loc 1 680 30
 3828 0248 BB69     		ldr	r3, [r7, #24]
 3829 024a 9A00     		lsls	r2, r3, #2
 3830              		.loc 1 680 16
 3831 024c FB69     		ldr	r3, [r7, #28]
 3832 024e 1344     		add	r3, r3, r2
 3833 0250 0633     		adds	r3, r3, #6
 3834 0252 FB61     		str	r3, [r7, #28]
 3835 0254 0AE0     		b	.L114
 3836              	.L113:
 681:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 682:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     else
 683:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 684:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       decision += ((current_x - current_y) << 2) + 10;
 3837              		.loc 1 684 31
 3838 0256 BA69     		ldr	r2, [r7, #24]
 3839 0258 7B69     		ldr	r3, [r7, #20]
 3840 025a D31A     		subs	r3, r2, r3
 3841              		.loc 1 684 44
 3842 025c 9A00     		lsls	r2, r3, #2
 3843              		.loc 1 684 16
 3844 025e FB69     		ldr	r3, [r7, #28]
 3845 0260 1344     		add	r3, r3, r2
 3846 0262 0A33     		adds	r3, r3, #10
 3847 0264 FB61     		str	r3, [r7, #28]
 685:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       current_y--;
 3848              		.loc 1 685 16
 3849 0266 7B69     		ldr	r3, [r7, #20]
 3850 0268 013B     		subs	r3, r3, #1
 3851 026a 7B61     		str	r3, [r7, #20]
 3852              	.L114:
 686:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 687:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     current_x++;
 3853              		.loc 1 687 14
 3854 026c BB69     		ldr	r3, [r7, #24]
 3855 026e 0133     		adds	r3, r3, #1
 3856 0270 BB61     		str	r3, [r7, #24]
 3857              	.L104:
 628:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 3858              		.loc 1 628 20
 3859 0272 BA69     		ldr	r2, [r7, #24]
ARM GAS  /tmp/ccK9mPCc.s 			page 140


 3860 0274 7B69     		ldr	r3, [r7, #20]
 3861 0276 9A42     		cmp	r2, r3
 3862 0278 7FF6D3AE 		bls	.L115
 688:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 689:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 3863              		.loc 1 689 1
 3864 027c 00BF     		nop
 3865 027e 00BF     		nop
 3866 0280 2037     		adds	r7, r7, #32
 3867              		.cfi_def_cfa_offset 8
 3868 0282 BD46     		mov	sp, r7
 3869              		.cfi_def_cfa_register 13
 3870              		@ sp needed
 3871 0284 80BD     		pop	{r7, pc}
 3872              	.L117:
 3873 0286 00BF     		.align	2
 3874              	.L116:
 3875 0288 00000000 		.word	DrawProp
 3876              		.cfi_endproc
 3877              	.LFE21:
 3879              		.section	.text.UTIL_LCD_DrawPolygon,"ax",%progbits
 3880              		.align	1
 3881              		.global	UTIL_LCD_DrawPolygon
 3882              		.syntax unified
 3883              		.thumb
 3884              		.thumb_func
 3886              	UTIL_LCD_DrawPolygon:
 3887              	.LFB22:
 690:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 691:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 692:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Draws an poly-line (between many points) in currently active layer.
 693:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Points      Pointer to the points array
 694:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  PointCount  Number of points
 695:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Color       Draw color
 696:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 697:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_DrawPolygon(pPoint Points, uint32_t PointCount, uint32_t Color)
 698:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 3888              		.loc 1 698 1
 3889              		.cfi_startproc
 3890              		@ args = 0, pretend = 0, frame = 24
 3891              		@ frame_needed = 1, uses_anonymous_args = 0
 3892 0000 90B5     		push	{r4, r7, lr}
 3893              		.cfi_def_cfa_offset 12
 3894              		.cfi_offset 4, -12
 3895              		.cfi_offset 7, -8
 3896              		.cfi_offset 14, -4
 3897 0002 89B0     		sub	sp, sp, #36
 3898              		.cfi_def_cfa_offset 48
 3899 0004 02AF     		add	r7, sp, #8
 3900              		.cfi_def_cfa 7, 40
 3901 0006 F860     		str	r0, [r7, #12]
 3902 0008 B960     		str	r1, [r7, #8]
 3903 000a 7A60     		str	r2, [r7, #4]
 699:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   int16_t x_pos = 0, y_pos = 0;
 3904              		.loc 1 699 11
 3905 000c 0023     		movs	r3, #0
 3906 000e FB82     		strh	r3, [r7, #22]	@ movhi
ARM GAS  /tmp/ccK9mPCc.s 			page 141


 3907              		.loc 1 699 22
 3908 0010 0023     		movs	r3, #0
 3909 0012 BB82     		strh	r3, [r7, #20]	@ movhi
 700:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 701:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   if(PointCount < 2)
 3910              		.loc 1 701 5
 3911 0014 BB68     		ldr	r3, [r7, #8]
 3912 0016 012B     		cmp	r3, #1
 3913 0018 43D9     		bls	.L123
 702:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 703:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     return;
 704:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 705:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 706:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   UTIL_LCD_DrawLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y, Color
 3914              		.loc 1 706 27
 3915 001a FB68     		ldr	r3, [r7, #12]
 3916 001c B3F90030 		ldrsh	r3, [r3]
 3917              		.loc 1 706 3
 3918 0020 1846     		mov	r0, r3
 3919              		.loc 1 706 38
 3920 0022 FB68     		ldr	r3, [r7, #12]
 3921 0024 B3F90230 		ldrsh	r3, [r3, #2]
 3922              		.loc 1 706 3
 3923 0028 1946     		mov	r1, r3
 3924              		.loc 1 706 61
 3925 002a BB68     		ldr	r3, [r7, #8]
 3926 002c 03F18043 		add	r3, r3, #1073741824
 3927 0030 013B     		subs	r3, r3, #1
 3928 0032 9B00     		lsls	r3, r3, #2
 3929 0034 FA68     		ldr	r2, [r7, #12]
 3930 0036 1344     		add	r3, r3, r2
 3931              		.loc 1 706 64
 3932 0038 B3F90030 		ldrsh	r3, [r3]
 3933              		.loc 1 706 3
 3934 003c 1C46     		mov	r4, r3
 3935              		.loc 1 706 87
 3936 003e BB68     		ldr	r3, [r7, #8]
 3937 0040 03F18043 		add	r3, r3, #1073741824
 3938 0044 013B     		subs	r3, r3, #1
 3939 0046 9B00     		lsls	r3, r3, #2
 3940 0048 FA68     		ldr	r2, [r7, #12]
 3941 004a 1344     		add	r3, r3, r2
 3942              		.loc 1 706 90
 3943 004c B3F90230 		ldrsh	r3, [r3, #2]
 3944              		.loc 1 706 3
 3945 0050 1A46     		mov	r2, r3
 3946 0052 7B68     		ldr	r3, [r7, #4]
 3947 0054 0093     		str	r3, [sp]
 3948 0056 1346     		mov	r3, r2
 3949 0058 2246     		mov	r2, r4
 3950 005a FFF7FEFF 		bl	UTIL_LCD_DrawLine
 707:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 708:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   while(--PointCount)
 3951              		.loc 1 708 8
 3952 005e 19E0     		b	.L121
 3953              	.L122:
 709:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
ARM GAS  /tmp/ccK9mPCc.s 			page 142


 710:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     x_pos = Points->X;
 3954              		.loc 1 710 11
 3955 0060 FB68     		ldr	r3, [r7, #12]
 3956 0062 1B88     		ldrh	r3, [r3]	@ movhi
 3957 0064 FB82     		strh	r3, [r7, #22]	@ movhi
 711:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     y_pos = Points->Y;
 3958              		.loc 1 711 11
 3959 0066 FB68     		ldr	r3, [r7, #12]
 3960 0068 5B88     		ldrh	r3, [r3, #2]	@ movhi
 3961 006a BB82     		strh	r3, [r7, #20]	@ movhi
 712:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     Points++;
 3962              		.loc 1 712 11
 3963 006c FB68     		ldr	r3, [r7, #12]
 3964 006e 0433     		adds	r3, r3, #4
 3965 0070 FB60     		str	r3, [r7, #12]
 713:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     UTIL_LCD_DrawLine(x_pos, y_pos, Points->X, Points->Y, Color);
 3966              		.loc 1 713 5
 3967 0072 B7F91600 		ldrsh	r0, [r7, #22]
 3968 0076 B7F91410 		ldrsh	r1, [r7, #20]
 3969              		.loc 1 713 43
 3970 007a FB68     		ldr	r3, [r7, #12]
 3971 007c B3F90030 		ldrsh	r3, [r3]
 3972              		.loc 1 713 5
 3973 0080 1A46     		mov	r2, r3
 3974              		.loc 1 713 54
 3975 0082 FB68     		ldr	r3, [r7, #12]
 3976 0084 B3F90230 		ldrsh	r3, [r3, #2]
 3977              		.loc 1 713 5
 3978 0088 1C46     		mov	r4, r3
 3979 008a 7B68     		ldr	r3, [r7, #4]
 3980 008c 0093     		str	r3, [sp]
 3981 008e 2346     		mov	r3, r4
 3982 0090 FFF7FEFF 		bl	UTIL_LCD_DrawLine
 3983              	.L121:
 708:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 3984              		.loc 1 708 9
 3985 0094 BB68     		ldr	r3, [r7, #8]
 3986 0096 013B     		subs	r3, r3, #1
 3987 0098 BB60     		str	r3, [r7, #8]
 3988 009a BB68     		ldr	r3, [r7, #8]
 3989 009c 002B     		cmp	r3, #0
 3990 009e DFD1     		bne	.L122
 3991 00a0 00E0     		b	.L118
 3992              	.L123:
 703:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 3993              		.loc 1 703 5
 3994 00a2 00BF     		nop
 3995              	.L118:
 714:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 715:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 3996              		.loc 1 715 1
 3997 00a4 1C37     		adds	r7, r7, #28
 3998              		.cfi_def_cfa_offset 12
 3999 00a6 BD46     		mov	sp, r7
 4000              		.cfi_def_cfa_register 13
 4001              		@ sp needed
 4002 00a8 90BD     		pop	{r4, r7, pc}
ARM GAS  /tmp/ccK9mPCc.s 			page 143


 4003              		.cfi_endproc
 4004              	.LFE22:
 4006              		.section	.text.UTIL_LCD_DrawEllipse,"ax",%progbits
 4007              		.align	1
 4008              		.global	UTIL_LCD_DrawEllipse
 4009              		.syntax unified
 4010              		.thumb
 4011              		.thumb_func
 4013              	UTIL_LCD_DrawEllipse:
 4014              	.LFB23:
 716:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 717:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 718:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Draws an ellipse on LCD in currently active layer.
 719:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Xpos    X position
 720:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Ypos    Y position
 721:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  XRadius Ellipse X radius
 722:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  YRadius Ellipse Y radius
 723:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Color   Draw color
 724:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 725:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_DrawEllipse(int Xpos, int Ypos, int XRadius, int YRadius, uint32_t Color)
 726:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 4015              		.loc 1 726 1
 4016              		.cfi_startproc
 4017              		@ args = 4, pretend = 0, frame = 48
 4018              		@ frame_needed = 1, uses_anonymous_args = 0
 4019 0000 80B5     		push	{r7, lr}
 4020              		.cfi_def_cfa_offset 8
 4021              		.cfi_offset 7, -8
 4022              		.cfi_offset 14, -4
 4023 0002 8CB0     		sub	sp, sp, #48
 4024              		.cfi_def_cfa_offset 56
 4025 0004 00AF     		add	r7, sp, #0
 4026              		.cfi_def_cfa_register 7
 4027 0006 F860     		str	r0, [r7, #12]
 4028 0008 B960     		str	r1, [r7, #8]
 4029 000a 7A60     		str	r2, [r7, #4]
 4030 000c 3B60     		str	r3, [r7]
 727:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   int x_pos = 0, y_pos = -YRadius, err = 2-2*XRadius, e2;
 4031              		.loc 1 727 7
 4032 000e 0023     		movs	r3, #0
 4033 0010 FB62     		str	r3, [r7, #44]
 4034              		.loc 1 727 18
 4035 0012 3B68     		ldr	r3, [r7]
 4036 0014 5B42     		rsbs	r3, r3, #0
 4037 0016 BB62     		str	r3, [r7, #40]
 4038              		.loc 1 727 43
 4039 0018 7B68     		ldr	r3, [r7, #4]
 4040 001a C3F10103 		rsb	r3, r3, #1
 4041              		.loc 1 727 36
 4042 001e 5B00     		lsls	r3, r3, #1
 4043 0020 7B62     		str	r3, [r7, #36]
 728:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   float k = 0, rad1 = 0, rad2 = 0;
 4044              		.loc 1 728 9
 4045 0022 4FF00003 		mov	r3, #0
 4046 0026 FB61     		str	r3, [r7, #28]	@ float
 4047              		.loc 1 728 16
 4048 0028 4FF00003 		mov	r3, #0
ARM GAS  /tmp/ccK9mPCc.s 			page 144


 4049 002c BB61     		str	r3, [r7, #24]	@ float
 4050              		.loc 1 728 26
 4051 002e 4FF00003 		mov	r3, #0
 4052 0032 7B61     		str	r3, [r7, #20]	@ float
 729:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 730:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   rad1 = XRadius;
 4053              		.loc 1 730 8
 4054 0034 7B68     		ldr	r3, [r7, #4]
 4055 0036 07EE903A 		vmov	s15, r3	@ int
 4056 003a F8EEE77A 		vcvt.f32.s32	s15, s15
 4057 003e C7ED067A 		vstr.32	s15, [r7, #24]
 731:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   rad2 = YRadius;
 4058              		.loc 1 731 8
 4059 0042 3B68     		ldr	r3, [r7]
 4060 0044 07EE903A 		vmov	s15, r3	@ int
 4061 0048 F8EEE77A 		vcvt.f32.s32	s15, s15
 4062 004c C7ED057A 		vstr.32	s15, [r7, #20]
 732:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 733:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   k = (float)(rad2/rad1);
 4063              		.loc 1 733 5
 4064 0050 D7ED056A 		vldr.32	s13, [r7, #20]
 4065 0054 97ED067A 		vldr.32	s14, [r7, #24]
 4066 0058 C6EE877A 		vdiv.f32	s15, s13, s14
 4067 005c C7ED077A 		vstr.32	s15, [r7, #28]
 4068              	.L127:
 734:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 735:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   do
 736:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 737:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     UTIL_LCD_SetPixel((Xpos-(uint32_t)(x_pos/k)), (Ypos + y_pos), Color);
 4069              		.loc 1 737 5
 4070 0060 FB68     		ldr	r3, [r7, #12]
 4071 0062 9AB2     		uxth	r2, r3
 4072              		.loc 1 737 45
 4073 0064 FB6A     		ldr	r3, [r7, #44]
 4074 0066 07EE903A 		vmov	s15, r3	@ int
 4075 006a F8EEE76A 		vcvt.f32.s32	s13, s15
 4076 006e 97ED077A 		vldr.32	s14, [r7, #28]
 4077 0072 C6EE877A 		vdiv.f32	s15, s13, s14
 4078              		.loc 1 737 29
 4079 0076 FCEEE77A 		vcvt.u32.f32	s15, s15
 4080              		.loc 1 737 5
 4081 007a 17EE903A 		vmov	r3, s15	@ int
 4082 007e 9BB2     		uxth	r3, r3
 4083 0080 D31A     		subs	r3, r2, r3
 4084 0082 98B2     		uxth	r0, r3
 4085 0084 BB68     		ldr	r3, [r7, #8]
 4086 0086 9AB2     		uxth	r2, r3
 4087 0088 BB6A     		ldr	r3, [r7, #40]
 4088 008a 9BB2     		uxth	r3, r3
 4089 008c 1344     		add	r3, r3, r2
 4090 008e 9BB2     		uxth	r3, r3
 4091 0090 BA6B     		ldr	r2, [r7, #56]
 4092 0092 1946     		mov	r1, r3
 4093 0094 FFF7FEFF 		bl	UTIL_LCD_SetPixel
 738:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     UTIL_LCD_SetPixel((Xpos+(uint32_t)(x_pos/k)), (Ypos + y_pos), Color);
 4094              		.loc 1 738 45
 4095 0098 FB6A     		ldr	r3, [r7, #44]
ARM GAS  /tmp/ccK9mPCc.s 			page 145


 4096 009a 07EE903A 		vmov	s15, r3	@ int
 4097 009e F8EEE76A 		vcvt.f32.s32	s13, s15
 4098 00a2 97ED077A 		vldr.32	s14, [r7, #28]
 4099 00a6 C6EE877A 		vdiv.f32	s15, s13, s14
 4100              		.loc 1 738 29
 4101 00aa FCEEE77A 		vcvt.u32.f32	s15, s15
 4102              		.loc 1 738 5
 4103 00ae 17EE903A 		vmov	r3, s15	@ int
 4104 00b2 9AB2     		uxth	r2, r3
 4105 00b4 FB68     		ldr	r3, [r7, #12]
 4106 00b6 9BB2     		uxth	r3, r3
 4107 00b8 1344     		add	r3, r3, r2
 4108 00ba 98B2     		uxth	r0, r3
 4109 00bc BB68     		ldr	r3, [r7, #8]
 4110 00be 9AB2     		uxth	r2, r3
 4111 00c0 BB6A     		ldr	r3, [r7, #40]
 4112 00c2 9BB2     		uxth	r3, r3
 4113 00c4 1344     		add	r3, r3, r2
 4114 00c6 9BB2     		uxth	r3, r3
 4115 00c8 BA6B     		ldr	r2, [r7, #56]
 4116 00ca 1946     		mov	r1, r3
 4117 00cc FFF7FEFF 		bl	UTIL_LCD_SetPixel
 739:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     UTIL_LCD_SetPixel((Xpos+(uint32_t)(x_pos/k)), (Ypos - y_pos), Color);
 4118              		.loc 1 739 45
 4119 00d0 FB6A     		ldr	r3, [r7, #44]
 4120 00d2 07EE903A 		vmov	s15, r3	@ int
 4121 00d6 F8EEE76A 		vcvt.f32.s32	s13, s15
 4122 00da 97ED077A 		vldr.32	s14, [r7, #28]
 4123 00de C6EE877A 		vdiv.f32	s15, s13, s14
 4124              		.loc 1 739 29
 4125 00e2 FCEEE77A 		vcvt.u32.f32	s15, s15
 4126              		.loc 1 739 5
 4127 00e6 17EE903A 		vmov	r3, s15	@ int
 4128 00ea 9AB2     		uxth	r2, r3
 4129 00ec FB68     		ldr	r3, [r7, #12]
 4130 00ee 9BB2     		uxth	r3, r3
 4131 00f0 1344     		add	r3, r3, r2
 4132 00f2 98B2     		uxth	r0, r3
 4133 00f4 BB68     		ldr	r3, [r7, #8]
 4134 00f6 9AB2     		uxth	r2, r3
 4135 00f8 BB6A     		ldr	r3, [r7, #40]
 4136 00fa 9BB2     		uxth	r3, r3
 4137 00fc D31A     		subs	r3, r2, r3
 4138 00fe 9BB2     		uxth	r3, r3
 4139 0100 BA6B     		ldr	r2, [r7, #56]
 4140 0102 1946     		mov	r1, r3
 4141 0104 FFF7FEFF 		bl	UTIL_LCD_SetPixel
 740:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     UTIL_LCD_SetPixel((Xpos-(uint32_t)(x_pos/k)), (Ypos - y_pos), Color);
 4142              		.loc 1 740 5
 4143 0108 FB68     		ldr	r3, [r7, #12]
 4144 010a 9AB2     		uxth	r2, r3
 4145              		.loc 1 740 45
 4146 010c FB6A     		ldr	r3, [r7, #44]
 4147 010e 07EE903A 		vmov	s15, r3	@ int
 4148 0112 F8EEE76A 		vcvt.f32.s32	s13, s15
 4149 0116 97ED077A 		vldr.32	s14, [r7, #28]
 4150 011a C6EE877A 		vdiv.f32	s15, s13, s14
ARM GAS  /tmp/ccK9mPCc.s 			page 146


 4151              		.loc 1 740 29
 4152 011e FCEEE77A 		vcvt.u32.f32	s15, s15
 4153              		.loc 1 740 5
 4154 0122 17EE903A 		vmov	r3, s15	@ int
 4155 0126 9BB2     		uxth	r3, r3
 4156 0128 D31A     		subs	r3, r2, r3
 4157 012a 98B2     		uxth	r0, r3
 4158 012c BB68     		ldr	r3, [r7, #8]
 4159 012e 9AB2     		uxth	r2, r3
 4160 0130 BB6A     		ldr	r3, [r7, #40]
 4161 0132 9BB2     		uxth	r3, r3
 4162 0134 D31A     		subs	r3, r2, r3
 4163 0136 9BB2     		uxth	r3, r3
 4164 0138 BA6B     		ldr	r2, [r7, #56]
 4165 013a 1946     		mov	r1, r3
 4166 013c FFF7FEFF 		bl	UTIL_LCD_SetPixel
 741:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 742:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     e2 = err;
 4167              		.loc 1 742 8
 4168 0140 7B6A     		ldr	r3, [r7, #36]
 4169 0142 3B62     		str	r3, [r7, #32]
 743:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     if (e2 <= x_pos)
 4170              		.loc 1 743 8
 4171 0144 3A6A     		ldr	r2, [r7, #32]
 4172 0146 FB6A     		ldr	r3, [r7, #44]
 4173 0148 9A42     		cmp	r2, r3
 4174 014a 13DC     		bgt	.L125
 744:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 745:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       err += ++x_pos*2+1;
 4175              		.loc 1 745 23
 4176 014c FB6A     		ldr	r3, [r7, #44]
 4177 014e 0133     		adds	r3, r3, #1
 4178 0150 FB62     		str	r3, [r7, #44]
 4179              		.loc 1 745 21
 4180 0152 FB6A     		ldr	r3, [r7, #44]
 4181 0154 5B00     		lsls	r3, r3, #1
 4182              		.loc 1 745 23
 4183 0156 0133     		adds	r3, r3, #1
 4184              		.loc 1 745 11
 4185 0158 7A6A     		ldr	r2, [r7, #36]
 4186 015a 1344     		add	r3, r3, r2
 4187 015c 7B62     		str	r3, [r7, #36]
 746:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       if (-y_pos == x_pos && e2 <= y_pos) e2 = 0;
 4188              		.loc 1 746 11
 4189 015e BB6A     		ldr	r3, [r7, #40]
 4190 0160 5B42     		rsbs	r3, r3, #0
 4191              		.loc 1 746 10
 4192 0162 FA6A     		ldr	r2, [r7, #44]
 4193 0164 9A42     		cmp	r2, r3
 4194 0166 05D1     		bne	.L125
 4195              		.loc 1 746 27 discriminator 1
 4196 0168 3A6A     		ldr	r2, [r7, #32]
 4197 016a BB6A     		ldr	r3, [r7, #40]
 4198 016c 9A42     		cmp	r2, r3
 4199 016e 01DC     		bgt	.L125
 4200              		.loc 1 746 46 discriminator 2
 4201 0170 0023     		movs	r3, #0
ARM GAS  /tmp/ccK9mPCc.s 			page 147


 4202 0172 3B62     		str	r3, [r7, #32]
 4203              	.L125:
 747:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 748:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     if (e2 > y_pos)
 4204              		.loc 1 748 8
 4205 0174 3A6A     		ldr	r2, [r7, #32]
 4206 0176 BB6A     		ldr	r3, [r7, #40]
 4207 0178 9A42     		cmp	r2, r3
 4208 017a 08DD     		ble	.L126
 749:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 750:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       err += ++y_pos*2+1;
 4209              		.loc 1 750 23
 4210 017c BB6A     		ldr	r3, [r7, #40]
 4211 017e 0133     		adds	r3, r3, #1
 4212 0180 BB62     		str	r3, [r7, #40]
 4213              		.loc 1 750 21
 4214 0182 BB6A     		ldr	r3, [r7, #40]
 4215 0184 5B00     		lsls	r3, r3, #1
 4216              		.loc 1 750 23
 4217 0186 0133     		adds	r3, r3, #1
 4218              		.loc 1 750 11
 4219 0188 7A6A     		ldr	r2, [r7, #36]
 4220 018a 1344     		add	r3, r3, r2
 4221 018c 7B62     		str	r3, [r7, #36]
 4222              	.L126:
 751:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 752:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }while (y_pos <= 0);
 4223              		.loc 1 752 17
 4224 018e BB6A     		ldr	r3, [r7, #40]
 4225 0190 002B     		cmp	r3, #0
 4226 0192 7FF765AF 		ble	.L127
 753:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 4227              		.loc 1 753 1
 4228 0196 00BF     		nop
 4229 0198 00BF     		nop
 4230 019a 3037     		adds	r7, r7, #48
 4231              		.cfi_def_cfa_offset 8
 4232 019c BD46     		mov	sp, r7
 4233              		.cfi_def_cfa_register 13
 4234              		@ sp needed
 4235 019e 80BD     		pop	{r7, pc}
 4236              		.cfi_endproc
 4237              	.LFE23:
 4239              		.section	.text.UTIL_LCD_DrawBitmap,"ax",%progbits
 4240              		.align	1
 4241              		.global	UTIL_LCD_DrawBitmap
 4242              		.syntax unified
 4243              		.thumb
 4244              		.thumb_func
 4246              	UTIL_LCD_DrawBitmap:
 4247              	.LFB24:
 754:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 755:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 756:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Draws a bitmap picture loaded in the internal Flash (32 bpp) in currently active layer.
 757:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Xpos  Bmp X position in the LCD
 758:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Ypos  Bmp Y position in the LCD
 759:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  pData Pointer to Bmp picture address in the internal Flash
ARM GAS  /tmp/ccK9mPCc.s 			page 148


 760:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 761:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pData)
 762:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 4248              		.loc 1 762 1
 4249              		.cfi_startproc
 4250              		@ args = 0, pretend = 0, frame = 16
 4251              		@ frame_needed = 1, uses_anonymous_args = 0
 4252 0000 90B5     		push	{r4, r7, lr}
 4253              		.cfi_def_cfa_offset 12
 4254              		.cfi_offset 4, -12
 4255              		.cfi_offset 7, -8
 4256              		.cfi_offset 14, -4
 4257 0002 85B0     		sub	sp, sp, #20
 4258              		.cfi_def_cfa_offset 32
 4259 0004 00AF     		add	r7, sp, #0
 4260              		.cfi_def_cfa_register 7
 4261 0006 F860     		str	r0, [r7, #12]
 4262 0008 B960     		str	r1, [r7, #8]
 4263 000a 7A60     		str	r2, [r7, #4]
 763:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   FuncDriver.DrawBitmap(DrawProp->LcdDevice, Xpos, Ypos, pData);
 4264              		.loc 1 763 13
 4265 000c 054B     		ldr	r3, .L129
 4266 000e 1C68     		ldr	r4, [r3]
 4267              		.loc 1 763 3
 4268 0010 054B     		ldr	r3, .L129+4
 4269 0012 1869     		ldr	r0, [r3, #16]
 4270 0014 7B68     		ldr	r3, [r7, #4]
 4271 0016 BA68     		ldr	r2, [r7, #8]
 4272 0018 F968     		ldr	r1, [r7, #12]
 4273 001a A047     		blx	r4
 4274              	.LVL23:
 764:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 4275              		.loc 1 764 1
 4276 001c 00BF     		nop
 4277 001e 1437     		adds	r7, r7, #20
 4278              		.cfi_def_cfa_offset 12
 4279 0020 BD46     		mov	sp, r7
 4280              		.cfi_def_cfa_register 13
 4281              		@ sp needed
 4282 0022 90BD     		pop	{r4, r7, pc}
 4283              	.L130:
 4284              		.align	2
 4285              	.L129:
 4286 0024 00000000 		.word	FuncDriver
 4287 0028 00000000 		.word	DrawProp
 4288              		.cfi_endproc
 4289              	.LFE24:
 4291              		.section	.text.UTIL_LCD_FillRect,"ax",%progbits
 4292              		.align	1
 4293              		.global	UTIL_LCD_FillRect
 4294              		.syntax unified
 4295              		.thumb
 4296              		.thumb_func
 4298              	UTIL_LCD_FillRect:
 4299              	.LFB25:
 765:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 766:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
ARM GAS  /tmp/ccK9mPCc.s 			page 149


 767:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Draws a full rectangle in currently active layer.
 768:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Xpos   X position
 769:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Ypos   Y position
 770:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Width  Rectangle width
 771:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Height Rectangle height
 772:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Color  Draw color
 773:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 774:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Colo
 775:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 4300              		.loc 1 775 1
 4301              		.cfi_startproc
 4302              		@ args = 4, pretend = 0, frame = 16
 4303              		@ frame_needed = 1, uses_anonymous_args = 0
 4304 0000 90B5     		push	{r4, r7, lr}
 4305              		.cfi_def_cfa_offset 12
 4306              		.cfi_offset 4, -12
 4307              		.cfi_offset 7, -8
 4308              		.cfi_offset 14, -4
 4309 0002 87B0     		sub	sp, sp, #28
 4310              		.cfi_def_cfa_offset 40
 4311 0004 02AF     		add	r7, sp, #8
 4312              		.cfi_def_cfa 7, 32
 4313 0006 F860     		str	r0, [r7, #12]
 4314 0008 B960     		str	r1, [r7, #8]
 4315 000a 7A60     		str	r2, [r7, #4]
 4316 000c 3B60     		str	r3, [r7]
 776:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   /* Fill the rectangle */
 777:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 4317              		.loc 1 777 23
 4318 000e 3A4B     		ldr	r3, .L137
 4319 0010 DB68     		ldr	r3, [r3, #12]
 4320              		.loc 1 777 34
 4321 0012 394A     		ldr	r2, .L137
 4322 0014 5B01     		lsls	r3, r3, #5
 4323 0016 1344     		add	r3, r3, r2
 4324 0018 1C33     		adds	r3, r3, #28
 4325 001a 1B68     		ldr	r3, [r3]
 4326              		.loc 1 777 5
 4327 001c 022B     		cmp	r3, #2
 4328 001e 1AD1     		bne	.L132
 778:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 779:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Colo
 4329              		.loc 1 779 15
 4330 0020 364B     		ldr	r3, .L137+4
 4331 0022 1C69     		ldr	r4, [r3, #16]
 4332              		.loc 1 779 5
 4333 0024 344B     		ldr	r3, .L137
 4334 0026 1869     		ldr	r0, [r3, #16]
 4335              		.loc 1 779 73
 4336 0028 3B6A     		ldr	r3, [r7, #32]
 4337 002a DB08     		lsrs	r3, r3, #3
 4338 002c 03F01F02 		and	r2, r3, #31
 4339 0030 3B6A     		ldr	r3, [r7, #32]
 4340 0032 9B0A     		lsrs	r3, r3, #10
 4341 0034 5B01     		lsls	r3, r3, #5
 4342 0036 03F4FC63 		and	r3, r3, #2016
 4343 003a 1A43     		orrs	r2, r2, r3
ARM GAS  /tmp/ccK9mPCc.s 			page 150


 4344 003c 3B6A     		ldr	r3, [r7, #32]
 4345 003e DB0C     		lsrs	r3, r3, #19
 4346 0040 DB02     		lsls	r3, r3, #11
 4347 0042 9BB2     		uxth	r3, r3
 4348              		.loc 1 779 5
 4349 0044 1343     		orrs	r3, r3, r2
 4350 0046 0193     		str	r3, [sp, #4]
 4351 0048 3B68     		ldr	r3, [r7]
 4352 004a 0093     		str	r3, [sp]
 4353 004c 7B68     		ldr	r3, [r7, #4]
 4354 004e BA68     		ldr	r2, [r7, #8]
 4355 0050 F968     		ldr	r1, [r7, #12]
 4356 0052 A047     		blx	r4
 4357              	.LVL24:
 780:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 781:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
 782:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 783:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB888(Colo
 784:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 785:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
 786:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 787:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882ARGB4444(Co
 788:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 789:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   else /*LCD_PIXEL_FORMAT_ARGB8888*/
 790:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 791:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 792:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 793:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 4358              		.loc 1 793 1
 4359 0054 4BE0     		b	.L136
 4360              	.L132:
 781:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 4361              		.loc 1 781 28
 4362 0056 284B     		ldr	r3, .L137
 4363 0058 DB68     		ldr	r3, [r3, #12]
 781:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 4364              		.loc 1 781 39
 4365 005a 274A     		ldr	r2, .L137
 4366 005c 5B01     		lsls	r3, r3, #5
 4367 005e 1344     		add	r3, r3, r2
 4368 0060 1C33     		adds	r3, r3, #28
 4369 0062 1B68     		ldr	r3, [r3]
 781:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 4370              		.loc 1 781 10
 4371 0064 012B     		cmp	r3, #1
 4372 0066 0ED1     		bne	.L134
 783:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 4373              		.loc 1 783 15
 4374 0068 244B     		ldr	r3, .L137+4
 4375 006a 1C69     		ldr	r4, [r3, #16]
 783:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 4376              		.loc 1 783 5
 4377 006c 224B     		ldr	r3, .L137
 4378 006e 1869     		ldr	r0, [r3, #16]
 4379 0070 3B6A     		ldr	r3, [r7, #32]
 4380 0072 23F07F43 		bic	r3, r3, #-16777216
 4381 0076 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccK9mPCc.s 			page 151


 4382 0078 3B68     		ldr	r3, [r7]
 4383 007a 0093     		str	r3, [sp]
 4384 007c 7B68     		ldr	r3, [r7, #4]
 4385 007e BA68     		ldr	r2, [r7, #8]
 4386 0080 F968     		ldr	r1, [r7, #12]
 4387 0082 A047     		blx	r4
 4388              	.LVL25:
 4389              		.loc 1 793 1
 4390 0084 33E0     		b	.L136
 4391              	.L134:
 785:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 4392              		.loc 1 785 28
 4393 0086 1C4B     		ldr	r3, .L137
 4394 0088 DB68     		ldr	r3, [r3, #12]
 785:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 4395              		.loc 1 785 39
 4396 008a 1B4A     		ldr	r2, .L137
 4397 008c 5B01     		lsls	r3, r3, #5
 4398 008e 1344     		add	r3, r3, r2
 4399 0090 1C33     		adds	r3, r3, #28
 4400 0092 1B68     		ldr	r3, [r3]
 785:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 4401              		.loc 1 785 10
 4402 0094 042B     		cmp	r3, #4
 4403 0096 1ED1     		bne	.L135
 787:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 4404              		.loc 1 787 15
 4405 0098 184B     		ldr	r3, .L137+4
 4406 009a 1C69     		ldr	r4, [r3, #16]
 787:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 4407              		.loc 1 787 5
 4408 009c 164B     		ldr	r3, .L137
 4409 009e 1869     		ldr	r0, [r3, #16]
 787:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 4410              		.loc 1 787 73
 4411 00a0 3B6A     		ldr	r3, [r7, #32]
 4412 00a2 1B09     		lsrs	r3, r3, #4
 4413 00a4 03F00F02 		and	r2, r3, #15
 4414 00a8 3B6A     		ldr	r3, [r7, #32]
 4415 00aa 1B0B     		lsrs	r3, r3, #12
 4416 00ac 1B01     		lsls	r3, r3, #4
 4417 00ae DBB2     		uxtb	r3, r3
 4418 00b0 1A43     		orrs	r2, r2, r3
 4419 00b2 3B6A     		ldr	r3, [r7, #32]
 4420 00b4 1B0D     		lsrs	r3, r3, #20
 4421 00b6 1B02     		lsls	r3, r3, #8
 4422 00b8 03F47063 		and	r3, r3, #3840
 4423 00bc 1A43     		orrs	r2, r2, r3
 4424 00be 3B6A     		ldr	r3, [r7, #32]
 4425 00c0 1B0F     		lsrs	r3, r3, #28
 4426 00c2 1B03     		lsls	r3, r3, #12
 787:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 4427              		.loc 1 787 5
 4428 00c4 1343     		orrs	r3, r3, r2
 4429 00c6 0193     		str	r3, [sp, #4]
 4430 00c8 3B68     		ldr	r3, [r7]
 4431 00ca 0093     		str	r3, [sp]
ARM GAS  /tmp/ccK9mPCc.s 			page 152


 4432 00cc 7B68     		ldr	r3, [r7, #4]
 4433 00ce BA68     		ldr	r2, [r7, #8]
 4434 00d0 F968     		ldr	r1, [r7, #12]
 4435 00d2 A047     		blx	r4
 4436              	.LVL26:
 4437              		.loc 1 793 1
 4438 00d4 0BE0     		b	.L136
 4439              	.L135:
 791:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 4440              		.loc 1 791 15
 4441 00d6 094B     		ldr	r3, .L137+4
 4442 00d8 1C69     		ldr	r4, [r3, #16]
 791:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 4443              		.loc 1 791 5
 4444 00da 074B     		ldr	r3, .L137
 4445 00dc 1869     		ldr	r0, [r3, #16]
 4446 00de 3B6A     		ldr	r3, [r7, #32]
 4447 00e0 0193     		str	r3, [sp, #4]
 4448 00e2 3B68     		ldr	r3, [r7]
 4449 00e4 0093     		str	r3, [sp]
 4450 00e6 7B68     		ldr	r3, [r7, #4]
 4451 00e8 BA68     		ldr	r2, [r7, #8]
 4452 00ea F968     		ldr	r1, [r7, #12]
 4453 00ec A047     		blx	r4
 4454              	.LVL27:
 4455              	.L136:
 4456              		.loc 1 793 1
 4457 00ee 00BF     		nop
 4458 00f0 1437     		adds	r7, r7, #20
 4459              		.cfi_def_cfa_offset 12
 4460 00f2 BD46     		mov	sp, r7
 4461              		.cfi_def_cfa_register 13
 4462              		@ sp needed
 4463 00f4 90BD     		pop	{r4, r7, pc}
 4464              	.L138:
 4465 00f6 00BF     		.align	2
 4466              	.L137:
 4467 00f8 00000000 		.word	DrawProp
 4468 00fc 00000000 		.word	FuncDriver
 4469              		.cfi_endproc
 4470              	.LFE25:
 4472              		.section	.text.UTIL_LCD_FillCircle,"ax",%progbits
 4473              		.align	1
 4474              		.global	UTIL_LCD_FillCircle
 4475              		.syntax unified
 4476              		.thumb
 4477              		.thumb_func
 4479              	UTIL_LCD_FillCircle:
 4480              	.LFB26:
 794:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 795:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 796:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Draws a full circle in currently active layer.
 797:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Xpos   X position
 798:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Ypos   Y position
 799:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Radius Circle radius
 800:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Color  Draw color
 801:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
ARM GAS  /tmp/ccK9mPCc.s 			page 153


 802:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_FillCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
 803:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 4481              		.loc 1 803 1
 4482              		.cfi_startproc
 4483              		@ args = 0, pretend = 0, frame = 32
 4484              		@ frame_needed = 1, uses_anonymous_args = 0
 4485 0000 80B5     		push	{r7, lr}
 4486              		.cfi_def_cfa_offset 8
 4487              		.cfi_offset 7, -8
 4488              		.cfi_offset 14, -4
 4489 0002 88B0     		sub	sp, sp, #32
 4490              		.cfi_def_cfa_offset 40
 4491 0004 00AF     		add	r7, sp, #0
 4492              		.cfi_def_cfa_register 7
 4493 0006 F860     		str	r0, [r7, #12]
 4494 0008 B960     		str	r1, [r7, #8]
 4495 000a 7A60     		str	r2, [r7, #4]
 4496 000c 3B60     		str	r3, [r7]
 804:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   int32_t   decision;  /* Decision Variable */
 805:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint32_t  current_x; /* Current X Value */
 806:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint32_t  current_y; /* Current Y Value */
 807:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 808:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   decision = 3 - (Radius << 1);
 4497              		.loc 1 808 26
 4498 000e 7B68     		ldr	r3, [r7, #4]
 4499 0010 5B00     		lsls	r3, r3, #1
 4500              		.loc 1 808 16
 4501 0012 C3F10303 		rsb	r3, r3, #3
 4502              		.loc 1 808 12
 4503 0016 FB61     		str	r3, [r7, #28]
 809:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 810:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   current_x = 0;
 4504              		.loc 1 810 13
 4505 0018 0023     		movs	r3, #0
 4506 001a BB61     		str	r3, [r7, #24]
 811:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   current_y = Radius;
 4507              		.loc 1 811 13
 4508 001c 7B68     		ldr	r3, [r7, #4]
 4509 001e 7B61     		str	r3, [r7, #20]
 812:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 813:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   while (current_x <= current_y)
 4510              		.loc 1 813 9
 4511 0020 8BE0     		b	.L140
 4512              	.L147:
 814:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 815:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     if(current_y > 0)
 4513              		.loc 1 815 7
 4514 0022 7B69     		ldr	r3, [r7, #20]
 4515 0024 002B     		cmp	r3, #0
 4516 0026 36D0     		beq	.L141
 816:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 817:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       if(current_y >= Xpos)
 4517              		.loc 1 817 9
 4518 0028 7A69     		ldr	r2, [r7, #20]
 4519 002a FB68     		ldr	r3, [r7, #12]
 4520 002c 9A42     		cmp	r2, r3
 4521 002e 1CD3     		bcc	.L142
ARM GAS  /tmp/ccK9mPCc.s 			page 154


 818:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 819:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
 4522              		.loc 1 819 9
 4523 0030 BA68     		ldr	r2, [r7, #8]
 4524 0032 BB69     		ldr	r3, [r7, #24]
 4525 0034 D018     		adds	r0, r2, r3
 4526              		.loc 1 819 50
 4527 0036 7B69     		ldr	r3, [r7, #20]
 4528 0038 5A00     		lsls	r2, r3, #1
 4529              		.loc 1 819 74
 4530 003a F968     		ldr	r1, [r7, #12]
 4531 003c 7B69     		ldr	r3, [r7, #20]
 4532 003e CB1A     		subs	r3, r1, r3
 4533              		.loc 1 819 9
 4534 0040 1A44     		add	r2, r2, r3
 4535 0042 3B68     		ldr	r3, [r7]
 4536 0044 0146     		mov	r1, r0
 4537 0046 0020     		movs	r0, #0
 4538 0048 FFF7FEFF 		bl	UTIL_LCD_DrawHLine
 820:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         UTIL_LCD_DrawHLine(0, Ypos - current_x, 2*current_y - (current_y - Xpos), Color);
 4539              		.loc 1 820 9
 4540 004c BA68     		ldr	r2, [r7, #8]
 4541 004e BB69     		ldr	r3, [r7, #24]
 4542 0050 D01A     		subs	r0, r2, r3
 4543              		.loc 1 820 50
 4544 0052 7B69     		ldr	r3, [r7, #20]
 4545 0054 5A00     		lsls	r2, r3, #1
 4546              		.loc 1 820 74
 4547 0056 F968     		ldr	r1, [r7, #12]
 4548 0058 7B69     		ldr	r3, [r7, #20]
 4549 005a CB1A     		subs	r3, r1, r3
 4550              		.loc 1 820 9
 4551 005c 1A44     		add	r2, r2, r3
 4552 005e 3B68     		ldr	r3, [r7]
 4553 0060 0146     		mov	r1, r0
 4554 0062 0020     		movs	r0, #0
 4555 0064 FFF7FEFF 		bl	UTIL_LCD_DrawHLine
 4556 0068 15E0     		b	.L141
 4557              	.L142:
 821:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       }
 822:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       else
 823:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 824:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
 4558              		.loc 1 824 9
 4559 006a FA68     		ldr	r2, [r7, #12]
 4560 006c 7B69     		ldr	r3, [r7, #20]
 4561 006e D01A     		subs	r0, r2, r3
 4562 0070 BA68     		ldr	r2, [r7, #8]
 4563 0072 BB69     		ldr	r3, [r7, #24]
 4564 0074 D118     		adds	r1, r2, r3
 4565 0076 7B69     		ldr	r3, [r7, #20]
 4566 0078 5A00     		lsls	r2, r3, #1
 4567 007a 3B68     		ldr	r3, [r7]
 4568 007c FFF7FEFF 		bl	UTIL_LCD_DrawHLine
 825:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
 4569              		.loc 1 825 9
 4570 0080 FA68     		ldr	r2, [r7, #12]
ARM GAS  /tmp/ccK9mPCc.s 			page 155


 4571 0082 7B69     		ldr	r3, [r7, #20]
 4572 0084 D01A     		subs	r0, r2, r3
 4573 0086 BA68     		ldr	r2, [r7, #8]
 4574 0088 BB69     		ldr	r3, [r7, #24]
 4575 008a D11A     		subs	r1, r2, r3
 4576 008c 7B69     		ldr	r3, [r7, #20]
 4577 008e 5A00     		lsls	r2, r3, #1
 4578 0090 3B68     		ldr	r3, [r7]
 4579 0092 FFF7FEFF 		bl	UTIL_LCD_DrawHLine
 4580              	.L141:
 826:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       }
 827:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 828:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 829:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     if(current_x > 0)
 4581              		.loc 1 829 7
 4582 0096 BB69     		ldr	r3, [r7, #24]
 4583 0098 002B     		cmp	r3, #0
 4584 009a 36D0     		beq	.L143
 830:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 831:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       if(current_x >= Xpos)
 4585              		.loc 1 831 9
 4586 009c BA69     		ldr	r2, [r7, #24]
 4587 009e FB68     		ldr	r3, [r7, #12]
 4588 00a0 9A42     		cmp	r2, r3
 4589 00a2 1CD3     		bcc	.L144
 832:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 833:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
 4590              		.loc 1 833 9
 4591 00a4 BA68     		ldr	r2, [r7, #8]
 4592 00a6 7B69     		ldr	r3, [r7, #20]
 4593 00a8 D01A     		subs	r0, r2, r3
 4594              		.loc 1 833 50
 4595 00aa BB69     		ldr	r3, [r7, #24]
 4596 00ac 5A00     		lsls	r2, r3, #1
 4597              		.loc 1 833 74
 4598 00ae F968     		ldr	r1, [r7, #12]
 4599 00b0 BB69     		ldr	r3, [r7, #24]
 4600 00b2 CB1A     		subs	r3, r1, r3
 4601              		.loc 1 833 9
 4602 00b4 1A44     		add	r2, r2, r3
 4603 00b6 3B68     		ldr	r3, [r7]
 4604 00b8 0146     		mov	r1, r0
 4605 00ba 0020     		movs	r0, #0
 4606 00bc FFF7FEFF 		bl	UTIL_LCD_DrawHLine
 834:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
 4607              		.loc 1 834 9
 4608 00c0 BA68     		ldr	r2, [r7, #8]
 4609 00c2 7B69     		ldr	r3, [r7, #20]
 4610 00c4 D018     		adds	r0, r2, r3
 4611              		.loc 1 834 50
 4612 00c6 BB69     		ldr	r3, [r7, #24]
 4613 00c8 5A00     		lsls	r2, r3, #1
 4614              		.loc 1 834 74
 4615 00ca F968     		ldr	r1, [r7, #12]
 4616 00cc BB69     		ldr	r3, [r7, #24]
 4617 00ce CB1A     		subs	r3, r1, r3
 4618              		.loc 1 834 9
ARM GAS  /tmp/ccK9mPCc.s 			page 156


 4619 00d0 1A44     		add	r2, r2, r3
 4620 00d2 3B68     		ldr	r3, [r7]
 4621 00d4 0146     		mov	r1, r0
 4622 00d6 0020     		movs	r0, #0
 4623 00d8 FFF7FEFF 		bl	UTIL_LCD_DrawHLine
 4624 00dc 15E0     		b	.L143
 4625              	.L144:
 835:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       }
 836:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       else
 837:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 838:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
 4626              		.loc 1 838 9
 4627 00de FA68     		ldr	r2, [r7, #12]
 4628 00e0 BB69     		ldr	r3, [r7, #24]
 4629 00e2 D01A     		subs	r0, r2, r3
 4630 00e4 BA68     		ldr	r2, [r7, #8]
 4631 00e6 7B69     		ldr	r3, [r7, #20]
 4632 00e8 D11A     		subs	r1, r2, r3
 4633 00ea BB69     		ldr	r3, [r7, #24]
 4634 00ec 5A00     		lsls	r2, r3, #1
 4635 00ee 3B68     		ldr	r3, [r7]
 4636 00f0 FFF7FEFF 		bl	UTIL_LCD_DrawHLine
 839:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
 4637              		.loc 1 839 9
 4638 00f4 FA68     		ldr	r2, [r7, #12]
 4639 00f6 BB69     		ldr	r3, [r7, #24]
 4640 00f8 D01A     		subs	r0, r2, r3
 4641 00fa BA68     		ldr	r2, [r7, #8]
 4642 00fc 7B69     		ldr	r3, [r7, #20]
 4643 00fe D118     		adds	r1, r2, r3
 4644 0100 BB69     		ldr	r3, [r7, #24]
 4645 0102 5A00     		lsls	r2, r3, #1
 4646 0104 3B68     		ldr	r3, [r7]
 4647 0106 FFF7FEFF 		bl	UTIL_LCD_DrawHLine
 4648              	.L143:
 840:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       }
 841:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 842:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     if (decision < 0)
 4649              		.loc 1 842 8
 4650 010a FB69     		ldr	r3, [r7, #28]
 4651 010c 002B     		cmp	r3, #0
 4652 010e 06DA     		bge	.L145
 843:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 844:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       decision += (current_x << 2) + 6;
 4653              		.loc 1 844 30
 4654 0110 BB69     		ldr	r3, [r7, #24]
 4655 0112 9A00     		lsls	r2, r3, #2
 4656              		.loc 1 844 16
 4657 0114 FB69     		ldr	r3, [r7, #28]
 4658 0116 1344     		add	r3, r3, r2
 4659 0118 0633     		adds	r3, r3, #6
 4660 011a FB61     		str	r3, [r7, #28]
 4661 011c 0AE0     		b	.L146
 4662              	.L145:
 845:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 846:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     else
 847:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
ARM GAS  /tmp/ccK9mPCc.s 			page 157


 848:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       decision += ((current_x - current_y) << 2) + 10;
 4663              		.loc 1 848 31
 4664 011e BA69     		ldr	r2, [r7, #24]
 4665 0120 7B69     		ldr	r3, [r7, #20]
 4666 0122 D31A     		subs	r3, r2, r3
 4667              		.loc 1 848 44
 4668 0124 9A00     		lsls	r2, r3, #2
 4669              		.loc 1 848 16
 4670 0126 FB69     		ldr	r3, [r7, #28]
 4671 0128 1344     		add	r3, r3, r2
 4672 012a 0A33     		adds	r3, r3, #10
 4673 012c FB61     		str	r3, [r7, #28]
 849:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       current_y--;
 4674              		.loc 1 849 16
 4675 012e 7B69     		ldr	r3, [r7, #20]
 4676 0130 013B     		subs	r3, r3, #1
 4677 0132 7B61     		str	r3, [r7, #20]
 4678              	.L146:
 850:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 851:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     current_x++;
 4679              		.loc 1 851 14
 4680 0134 BB69     		ldr	r3, [r7, #24]
 4681 0136 0133     		adds	r3, r3, #1
 4682 0138 BB61     		str	r3, [r7, #24]
 4683              	.L140:
 813:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 4684              		.loc 1 813 20
 4685 013a BA69     		ldr	r2, [r7, #24]
 4686 013c 7B69     		ldr	r3, [r7, #20]
 4687 013e 9A42     		cmp	r2, r3
 4688 0140 7FF66FAF 		bls	.L147
 852:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 853:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 854:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
 4689              		.loc 1 854 3
 4690 0144 3B68     		ldr	r3, [r7]
 4691 0146 7A68     		ldr	r2, [r7, #4]
 4692 0148 B968     		ldr	r1, [r7, #8]
 4693 014a F868     		ldr	r0, [r7, #12]
 4694 014c FFF7FEFF 		bl	UTIL_LCD_DrawCircle
 855:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 4695              		.loc 1 855 1
 4696 0150 00BF     		nop
 4697 0152 2037     		adds	r7, r7, #32
 4698              		.cfi_def_cfa_offset 8
 4699 0154 BD46     		mov	sp, r7
 4700              		.cfi_def_cfa_register 13
 4701              		@ sp needed
 4702 0156 80BD     		pop	{r7, pc}
 4703              		.cfi_endproc
 4704              	.LFE26:
 4706              		.section	.text.UTIL_LCD_FillPolygon,"ax",%progbits
 4707              		.align	1
 4708              		.global	UTIL_LCD_FillPolygon
 4709              		.syntax unified
 4710              		.thumb
 4711              		.thumb_func
ARM GAS  /tmp/ccK9mPCc.s 			page 158


 4713              	UTIL_LCD_FillPolygon:
 4714              	.LFB27:
 856:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 857:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 858:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Draws a full poly-line (between many points) in currently active layer.
 859:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Points     Pointer to the points array
 860:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  PointCount Number of points
 861:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Color      Draw color
 862:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 863:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_FillPolygon(pPoint Points, uint32_t PointCount, uint32_t Color)
 864:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 4715              		.loc 1 864 1
 4716              		.cfi_startproc
 4717              		@ args = 0, pretend = 0, frame = 80
 4718              		@ frame_needed = 1, uses_anonymous_args = 0
 4719 0000 80B5     		push	{r7, lr}
 4720              		.cfi_def_cfa_offset 8
 4721              		.cfi_offset 7, -8
 4722              		.cfi_offset 14, -4
 4723 0002 94B0     		sub	sp, sp, #80
 4724              		.cfi_def_cfa_offset 88
 4725 0004 00AF     		add	r7, sp, #0
 4726              		.cfi_def_cfa_register 7
 4727 0006 F860     		str	r0, [r7, #12]
 4728 0008 B960     		str	r1, [r7, #8]
 4729 000a 7A60     		str	r2, [r7, #4]
 865:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, x_center = 0, y_center = 0, x_first = 0, y_first = 0, pixel
 4730              		.loc 1 865 11
 4731 000c 0023     		movs	r3, #0
 4732 000e FB86     		strh	r3, [r7, #54]	@ movhi
 4733              		.loc 1 865 18
 4734 0010 0023     		movs	r3, #0
 4735 0012 BB86     		strh	r3, [r7, #52]	@ movhi
 4736              		.loc 1 865 25
 4737 0014 0023     		movs	r3, #0
 4738 0016 A7F84E30 		strh	r3, [r7, #78]	@ movhi
 4739              		.loc 1 865 33
 4740 001a 0023     		movs	r3, #0
 4741 001c A7F84C30 		strh	r3, [r7, #76]	@ movhi
 4742              		.loc 1 865 41
 4743 0020 0023     		movs	r3, #0
 4744 0022 7B86     		strh	r3, [r7, #50]	@ movhi
 4745              		.loc 1 865 55
 4746 0024 0023     		movs	r3, #0
 4747 0026 3B86     		strh	r3, [r7, #48]	@ movhi
 4748              		.loc 1 865 69
 4749 0028 0023     		movs	r3, #0
 4750 002a FB85     		strh	r3, [r7, #46]	@ movhi
 4751              		.loc 1 865 82
 4752 002c 0023     		movs	r3, #0
 4753 002e BB85     		strh	r3, [r7, #44]	@ movhi
 4754              		.loc 1 865 95
 4755 0030 0023     		movs	r3, #0
 4756 0032 7B85     		strh	r3, [r7, #42]	@ movhi
 4757              		.loc 1 865 108
 4758 0034 0023     		movs	r3, #0
 4759 0036 3B85     		strh	r3, [r7, #40]	@ movhi
ARM GAS  /tmp/ccK9mPCc.s 			page 159


 4760              		.loc 1 865 121
 4761 0038 0023     		movs	r3, #0
 4762 003a A7F84A30 		strh	r3, [r7, #74]	@ movhi
 866:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint32_t  image_left = 0, image_right = 0, image_top = 0, image_bottom = 0;
 4763              		.loc 1 866 13
 4764 003e 0023     		movs	r3, #0
 4765 0040 7B64     		str	r3, [r7, #68]
 4766              		.loc 1 866 29
 4767 0042 0023     		movs	r3, #0
 4768 0044 3B64     		str	r3, [r7, #64]
 4769              		.loc 1 866 46
 4770 0046 0023     		movs	r3, #0
 4771 0048 FB63     		str	r3, [r7, #60]
 4772              		.loc 1 866 61
 4773 004a 0023     		movs	r3, #0
 4774 004c BB63     		str	r3, [r7, #56]
 867:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   Triangle_Positions_t positions;
 868:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 869:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   image_left = image_right = Points->X;
 4775              		.loc 1 869 36
 4776 004e FB68     		ldr	r3, [r7, #12]
 4777 0050 B3F90030 		ldrsh	r3, [r3]
 4778              		.loc 1 869 28
 4779 0054 3B64     		str	r3, [r7, #64]
 4780              		.loc 1 869 14
 4781 0056 3B6C     		ldr	r3, [r7, #64]
 4782 0058 7B64     		str	r3, [r7, #68]
 870:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   image_top= image_bottom = Points->Y;
 4783              		.loc 1 870 35
 4784 005a FB68     		ldr	r3, [r7, #12]
 4785 005c B3F90230 		ldrsh	r3, [r3, #2]
 4786              		.loc 1 870 27
 4787 0060 BB63     		str	r3, [r7, #56]
 4788              		.loc 1 870 12
 4789 0062 BB6B     		ldr	r3, [r7, #56]
 4790 0064 FB63     		str	r3, [r7, #60]
 871:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 872:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   for(counter = 1; counter < PointCount; counter++)
 4791              		.loc 1 872 15
 4792 0066 0123     		movs	r3, #1
 4793 0068 A7F84A30 		strh	r3, [r7, #74]	@ movhi
 4794              		.loc 1 872 3
 4795 006c 34E0     		b	.L149
 4796              	.L154:
 873:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 874:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     pixel_x = POLY_X(counter);
 4797              		.loc 1 874 15
 4798 006e B7F94A30 		ldrsh	r3, [r7, #74]
 4799 0072 9B00     		lsls	r3, r3, #2
 4800 0074 FA68     		ldr	r2, [r7, #12]
 4801 0076 1344     		add	r3, r3, r2
 4802              		.loc 1 874 13
 4803 0078 1B88     		ldrh	r3, [r3]	@ movhi
 4804 007a 7B85     		strh	r3, [r7, #42]	@ movhi
 875:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     if(pixel_x < image_left)
 4805              		.loc 1 875 16
 4806 007c B7F92A30 		ldrsh	r3, [r7, #42]
ARM GAS  /tmp/ccK9mPCc.s 			page 160


 4807              		.loc 1 875 7
 4808 0080 7A6C     		ldr	r2, [r7, #68]
 4809 0082 9A42     		cmp	r2, r3
 4810 0084 02D9     		bls	.L150
 876:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 877:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       image_left = pixel_x;
 4811              		.loc 1 877 18
 4812 0086 B7F92A30 		ldrsh	r3, [r7, #42]
 4813 008a 7B64     		str	r3, [r7, #68]
 4814              	.L150:
 878:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 879:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     if(pixel_x > image_right)
 4815              		.loc 1 879 16
 4816 008c B7F92A30 		ldrsh	r3, [r7, #42]
 4817              		.loc 1 879 7
 4818 0090 3A6C     		ldr	r2, [r7, #64]
 4819 0092 9A42     		cmp	r2, r3
 4820 0094 02D2     		bcs	.L151
 880:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 881:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       image_right = pixel_x;
 4821              		.loc 1 881 19
 4822 0096 B7F92A30 		ldrsh	r3, [r7, #42]
 4823 009a 3B64     		str	r3, [r7, #64]
 4824              	.L151:
 882:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 883:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 884:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     pixel_y = POLY_Y(counter);
 4825              		.loc 1 884 15
 4826 009c B7F94A30 		ldrsh	r3, [r7, #74]
 4827 00a0 9B00     		lsls	r3, r3, #2
 4828 00a2 FA68     		ldr	r2, [r7, #12]
 4829 00a4 1344     		add	r3, r3, r2
 4830              		.loc 1 884 13
 4831 00a6 5B88     		ldrh	r3, [r3, #2]	@ movhi
 4832 00a8 3B85     		strh	r3, [r7, #40]	@ movhi
 885:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     if(pixel_y < image_top)
 4833              		.loc 1 885 16
 4834 00aa B7F92830 		ldrsh	r3, [r7, #40]
 4835              		.loc 1 885 7
 4836 00ae FA6B     		ldr	r2, [r7, #60]
 4837 00b0 9A42     		cmp	r2, r3
 4838 00b2 02D9     		bls	.L152
 886:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 887:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       image_top = pixel_y;
 4839              		.loc 1 887 17
 4840 00b4 B7F92830 		ldrsh	r3, [r7, #40]
 4841 00b8 FB63     		str	r3, [r7, #60]
 4842              	.L152:
 888:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 889:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     if(pixel_y > image_bottom)
 4843              		.loc 1 889 16
 4844 00ba B7F92830 		ldrsh	r3, [r7, #40]
 4845              		.loc 1 889 7
 4846 00be BA6B     		ldr	r2, [r7, #56]
 4847 00c0 9A42     		cmp	r2, r3
 4848 00c2 02D2     		bcs	.L153
 890:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
ARM GAS  /tmp/ccK9mPCc.s 			page 161


 891:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       image_bottom = pixel_y;
 4849              		.loc 1 891 20
 4850 00c4 B7F92830 		ldrsh	r3, [r7, #40]
 4851 00c8 BB63     		str	r3, [r7, #56]
 4852              	.L153:
 872:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 4853              		.loc 1 872 49 discriminator 2
 4854 00ca B7F94A30 		ldrsh	r3, [r7, #74]
 4855 00ce 9BB2     		uxth	r3, r3
 4856 00d0 0133     		adds	r3, r3, #1
 4857 00d2 9BB2     		uxth	r3, r3
 4858 00d4 A7F84A30 		strh	r3, [r7, #74]	@ movhi
 4859              	.L149:
 872:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 4860              		.loc 1 872 28 discriminator 1
 4861 00d8 B7F94A30 		ldrsh	r3, [r7, #74]
 4862 00dc BA68     		ldr	r2, [r7, #8]
 4863 00de 9A42     		cmp	r2, r3
 4864 00e0 C5D8     		bhi	.L154
 892:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 893:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 894:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 895:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   if(PointCount < 2)
 4865              		.loc 1 895 5
 4866 00e2 BB68     		ldr	r3, [r7, #8]
 4867 00e4 012B     		cmp	r3, #1
 4868 00e6 40F2AD80 		bls	.L159
 896:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 897:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     return;
 898:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 899:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 900:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   x_center = (image_left + image_right)/2;
 4869              		.loc 1 900 26
 4870 00ea 7A6C     		ldr	r2, [r7, #68]
 4871 00ec 3B6C     		ldr	r3, [r7, #64]
 4872 00ee 1344     		add	r3, r3, r2
 4873              		.loc 1 900 40
 4874 00f0 5B08     		lsrs	r3, r3, #1
 4875              		.loc 1 900 12
 4876 00f2 7B86     		strh	r3, [r7, #50]	@ movhi
 901:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   y_center = (image_bottom + image_top)/2;
 4877              		.loc 1 901 28
 4878 00f4 BA6B     		ldr	r2, [r7, #56]
 4879 00f6 FB6B     		ldr	r3, [r7, #60]
 4880 00f8 1344     		add	r3, r3, r2
 4881              		.loc 1 901 40
 4882 00fa 5B08     		lsrs	r3, r3, #1
 4883              		.loc 1 901 12
 4884 00fc 3B86     		strh	r3, [r7, #48]	@ movhi
 902:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 903:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   x_first = Points->X;
 4885              		.loc 1 903 11
 4886 00fe FB68     		ldr	r3, [r7, #12]
 4887 0100 1B88     		ldrh	r3, [r3]	@ movhi
 4888 0102 FB85     		strh	r3, [r7, #46]	@ movhi
 904:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   y_first = Points->Y;
 4889              		.loc 1 904 11
ARM GAS  /tmp/ccK9mPCc.s 			page 162


 4890 0104 FB68     		ldr	r3, [r7, #12]
 4891 0106 5B88     		ldrh	r3, [r3, #2]	@ movhi
 4892 0108 BB85     		strh	r3, [r7, #44]	@ movhi
 905:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 906:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   while(--PointCount)
 4893              		.loc 1 906 8
 4894 010a 52E0     		b	.L157
 4895              	.L158:
 907:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 908:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     X = Points->X;
 4896              		.loc 1 908 7
 4897 010c FB68     		ldr	r3, [r7, #12]
 4898 010e 1B88     		ldrh	r3, [r3]	@ movhi
 4899 0110 FB86     		strh	r3, [r7, #54]	@ movhi
 909:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     Y = Points->Y;
 4900              		.loc 1 909 7
 4901 0112 FB68     		ldr	r3, [r7, #12]
 4902 0114 5B88     		ldrh	r3, [r3, #2]	@ movhi
 4903 0116 BB86     		strh	r3, [r7, #52]	@ movhi
 910:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     Points++;
 4904              		.loc 1 910 11
 4905 0118 FB68     		ldr	r3, [r7, #12]
 4906 011a 0433     		adds	r3, r3, #4
 4907 011c FB60     		str	r3, [r7, #12]
 911:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     X2 = Points->X;
 4908              		.loc 1 911 8
 4909 011e FB68     		ldr	r3, [r7, #12]
 4910 0120 1B88     		ldrh	r3, [r3]	@ movhi
 4911 0122 A7F84E30 		strh	r3, [r7, #78]	@ movhi
 912:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     Y2 = Points->Y;
 4912              		.loc 1 912 8
 4913 0126 FB68     		ldr	r3, [r7, #12]
 4914 0128 5B88     		ldrh	r3, [r3, #2]	@ movhi
 4915 012a A7F84C30 		strh	r3, [r7, #76]	@ movhi
 913:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.x1 = X;
 4916              		.loc 1 913 18
 4917 012e B7F93630 		ldrsh	r3, [r7, #54]
 4918 0132 3B61     		str	r3, [r7, #16]
 914:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.y1 = Y;
 4919              		.loc 1 914 18
 4920 0134 B7F93430 		ldrsh	r3, [r7, #52]
 4921 0138 7B61     		str	r3, [r7, #20]
 915:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.x2 = X2;
 4922              		.loc 1 915 18
 4923 013a B7F94E30 		ldrsh	r3, [r7, #78]
 4924 013e BB61     		str	r3, [r7, #24]
 916:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.y2 = Y2;
 4925              		.loc 1 916 18
 4926 0140 B7F94C30 		ldrsh	r3, [r7, #76]
 4927 0144 FB61     		str	r3, [r7, #28]
 917:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.x3 = x_center;
 4928              		.loc 1 917 18
 4929 0146 B7F93230 		ldrsh	r3, [r7, #50]
 4930 014a 3B62     		str	r3, [r7, #32]
 918:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.y3 = y_center;
 4931              		.loc 1 918 18
 4932 014c B7F93030 		ldrsh	r3, [r7, #48]
ARM GAS  /tmp/ccK9mPCc.s 			page 163


 4933 0150 7B62     		str	r3, [r7, #36]
 919:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FillTriangle(&positions, Color);
 4934              		.loc 1 919 5
 4935 0152 07F11003 		add	r3, r7, #16
 4936 0156 7968     		ldr	r1, [r7, #4]
 4937 0158 1846     		mov	r0, r3
 4938 015a FFF7FEFF 		bl	FillTriangle
 920:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 921:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.x2 = x_center;
 4939              		.loc 1 921 18
 4940 015e B7F93230 		ldrsh	r3, [r7, #50]
 4941 0162 BB61     		str	r3, [r7, #24]
 922:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.y2 = y_center;
 4942              		.loc 1 922 18
 4943 0164 B7F93030 		ldrsh	r3, [r7, #48]
 4944 0168 FB61     		str	r3, [r7, #28]
 923:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.x3 = X2;
 4945              		.loc 1 923 18
 4946 016a B7F94E30 		ldrsh	r3, [r7, #78]
 4947 016e 3B62     		str	r3, [r7, #32]
 924:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.y3 = Y2;
 4948              		.loc 1 924 18
 4949 0170 B7F94C30 		ldrsh	r3, [r7, #76]
 4950 0174 7B62     		str	r3, [r7, #36]
 925:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FillTriangle(&positions, Color);
 4951              		.loc 1 925 5
 4952 0176 07F11003 		add	r3, r7, #16
 4953 017a 7968     		ldr	r1, [r7, #4]
 4954 017c 1846     		mov	r0, r3
 4955 017e FFF7FEFF 		bl	FillTriangle
 926:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 927:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.x1 = x_center;
 4956              		.loc 1 927 18
 4957 0182 B7F93230 		ldrsh	r3, [r7, #50]
 4958 0186 3B61     		str	r3, [r7, #16]
 928:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.y1 = y_center;
 4959              		.loc 1 928 18
 4960 0188 B7F93030 		ldrsh	r3, [r7, #48]
 4961 018c 7B61     		str	r3, [r7, #20]
 929:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.x2 = X2;
 4962              		.loc 1 929 18
 4963 018e B7F94E30 		ldrsh	r3, [r7, #78]
 4964 0192 BB61     		str	r3, [r7, #24]
 930:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.y2 = Y2;
 4965              		.loc 1 930 18
 4966 0194 B7F94C30 		ldrsh	r3, [r7, #76]
 4967 0198 FB61     		str	r3, [r7, #28]
 931:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.x3 = X;
 4968              		.loc 1 931 18
 4969 019a B7F93630 		ldrsh	r3, [r7, #54]
 4970 019e 3B62     		str	r3, [r7, #32]
 932:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.y3 = Y;
 4971              		.loc 1 932 18
 4972 01a0 B7F93430 		ldrsh	r3, [r7, #52]
 4973 01a4 7B62     		str	r3, [r7, #36]
 933:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FillTriangle(&positions, Color);
 4974              		.loc 1 933 5
ARM GAS  /tmp/ccK9mPCc.s 			page 164


 4975 01a6 07F11003 		add	r3, r7, #16
 4976 01aa 7968     		ldr	r1, [r7, #4]
 4977 01ac 1846     		mov	r0, r3
 4978 01ae FFF7FEFF 		bl	FillTriangle
 4979              	.L157:
 906:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 4980              		.loc 1 906 9
 4981 01b2 BB68     		ldr	r3, [r7, #8]
 4982 01b4 013B     		subs	r3, r3, #1
 4983 01b6 BB60     		str	r3, [r7, #8]
 4984 01b8 BB68     		ldr	r3, [r7, #8]
 4985 01ba 002B     		cmp	r3, #0
 4986 01bc A6D1     		bne	.L158
 934:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 935:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 936:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.x1 = x_first;
 4987              		.loc 1 936 18
 4988 01be B7F92E30 		ldrsh	r3, [r7, #46]
 4989 01c2 3B61     		str	r3, [r7, #16]
 937:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.y1 = y_first;
 4990              		.loc 1 937 18
 4991 01c4 B7F92C30 		ldrsh	r3, [r7, #44]
 4992 01c8 7B61     		str	r3, [r7, #20]
 938:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.x2 = X2;
 4993              		.loc 1 938 18
 4994 01ca B7F94E30 		ldrsh	r3, [r7, #78]
 4995 01ce BB61     		str	r3, [r7, #24]
 939:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.y2 = Y2;
 4996              		.loc 1 939 18
 4997 01d0 B7F94C30 		ldrsh	r3, [r7, #76]
 4998 01d4 FB61     		str	r3, [r7, #28]
 940:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.x3 = x_center;
 4999              		.loc 1 940 18
 5000 01d6 B7F93230 		ldrsh	r3, [r7, #50]
 5001 01da 3B62     		str	r3, [r7, #32]
 941:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.y3 = y_center;
 5002              		.loc 1 941 18
 5003 01dc B7F93030 		ldrsh	r3, [r7, #48]
 5004 01e0 7B62     		str	r3, [r7, #36]
 942:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FillTriangle(&positions, Color);
 5005              		.loc 1 942 5
 5006 01e2 07F11003 		add	r3, r7, #16
 5007 01e6 7968     		ldr	r1, [r7, #4]
 5008 01e8 1846     		mov	r0, r3
 5009 01ea FFF7FEFF 		bl	FillTriangle
 943:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 944:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.x2 = x_center;
 5010              		.loc 1 944 18
 5011 01ee B7F93230 		ldrsh	r3, [r7, #50]
 5012 01f2 BB61     		str	r3, [r7, #24]
 945:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.y2 = y_center;
 5013              		.loc 1 945 18
 5014 01f4 B7F93030 		ldrsh	r3, [r7, #48]
 5015 01f8 FB61     		str	r3, [r7, #28]
 946:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.x3 = X2;
 5016              		.loc 1 946 18
 5017 01fa B7F94E30 		ldrsh	r3, [r7, #78]
ARM GAS  /tmp/ccK9mPCc.s 			page 165


 5018 01fe 3B62     		str	r3, [r7, #32]
 947:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.y3 = Y2;
 5019              		.loc 1 947 18
 5020 0200 B7F94C30 		ldrsh	r3, [r7, #76]
 5021 0204 7B62     		str	r3, [r7, #36]
 948:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FillTriangle(&positions, Color);
 5022              		.loc 1 948 5
 5023 0206 07F11003 		add	r3, r7, #16
 5024 020a 7968     		ldr	r1, [r7, #4]
 5025 020c 1846     		mov	r0, r3
 5026 020e FFF7FEFF 		bl	FillTriangle
 949:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 950:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.x1 = x_center;
 5027              		.loc 1 950 18
 5028 0212 B7F93230 		ldrsh	r3, [r7, #50]
 5029 0216 3B61     		str	r3, [r7, #16]
 951:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.y1 = y_center;
 5030              		.loc 1 951 18
 5031 0218 B7F93030 		ldrsh	r3, [r7, #48]
 5032 021c 7B61     		str	r3, [r7, #20]
 952:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.x2 = X2;
 5033              		.loc 1 952 18
 5034 021e B7F94E30 		ldrsh	r3, [r7, #78]
 5035 0222 BB61     		str	r3, [r7, #24]
 953:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.y2 = Y2;
 5036              		.loc 1 953 18
 5037 0224 B7F94C30 		ldrsh	r3, [r7, #76]
 5038 0228 FB61     		str	r3, [r7, #28]
 954:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.x3 = x_first;
 5039              		.loc 1 954 18
 5040 022a B7F92E30 		ldrsh	r3, [r7, #46]
 5041 022e 3B62     		str	r3, [r7, #32]
 955:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     positions.y3 = y_first;
 5042              		.loc 1 955 18
 5043 0230 B7F92C30 		ldrsh	r3, [r7, #44]
 5044 0234 7B62     		str	r3, [r7, #36]
 956:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     FillTriangle(&positions, Color);
 5045              		.loc 1 956 5
 5046 0236 07F11003 		add	r3, r7, #16
 5047 023a 7968     		ldr	r1, [r7, #4]
 5048 023c 1846     		mov	r0, r3
 5049 023e FFF7FEFF 		bl	FillTriangle
 5050 0242 00E0     		b	.L148
 5051              	.L159:
 897:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 5052              		.loc 1 897 5 discriminator 1
 5053 0244 00BF     		nop
 5054              	.L148:
 957:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 5055              		.loc 1 957 1
 5056 0246 5037     		adds	r7, r7, #80
 5057              		.cfi_def_cfa_offset 8
 5058 0248 BD46     		mov	sp, r7
 5059              		.cfi_def_cfa_register 13
 5060              		@ sp needed
 5061 024a 80BD     		pop	{r7, pc}
 5062              		.cfi_endproc
ARM GAS  /tmp/ccK9mPCc.s 			page 166


 5063              	.LFE27:
 5065              		.section	.text.UTIL_LCD_FillEllipse,"ax",%progbits
 5066              		.align	1
 5067              		.global	UTIL_LCD_FillEllipse
 5068              		.syntax unified
 5069              		.thumb
 5070              		.thumb_func
 5072              	UTIL_LCD_FillEllipse:
 5073              	.LFB28:
 958:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 959:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 960:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Draws a full ellipse in currently active layer.
 961:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Xpos    X position
 962:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Ypos    Y position
 963:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  XRadius Ellipse X radius
 964:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  YRadius Ellipse Y radius
 965:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Color   Draw color
 966:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 967:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** void UTIL_LCD_FillEllipse(int Xpos, int Ypos, int XRadius, int YRadius, uint32_t Color)
 968:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 5074              		.loc 1 968 1
 5075              		.cfi_startproc
 5076              		@ args = 4, pretend = 0, frame = 48
 5077              		@ frame_needed = 1, uses_anonymous_args = 0
 5078 0000 80B5     		push	{r7, lr}
 5079              		.cfi_def_cfa_offset 8
 5080              		.cfi_offset 7, -8
 5081              		.cfi_offset 14, -4
 5082 0002 8CB0     		sub	sp, sp, #48
 5083              		.cfi_def_cfa_offset 56
 5084 0004 00AF     		add	r7, sp, #0
 5085              		.cfi_def_cfa_register 7
 5086 0006 F860     		str	r0, [r7, #12]
 5087 0008 B960     		str	r1, [r7, #8]
 5088 000a 7A60     		str	r2, [r7, #4]
 5089 000c 3B60     		str	r3, [r7]
 969:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   int x_pos = 0, y_pos = -YRadius, err = 2-2*XRadius, e2;
 5090              		.loc 1 969 7
 5091 000e 0023     		movs	r3, #0
 5092 0010 FB62     		str	r3, [r7, #44]
 5093              		.loc 1 969 18
 5094 0012 3B68     		ldr	r3, [r7]
 5095 0014 5B42     		rsbs	r3, r3, #0
 5096 0016 BB62     		str	r3, [r7, #40]
 5097              		.loc 1 969 43
 5098 0018 7B68     		ldr	r3, [r7, #4]
 5099 001a C3F10103 		rsb	r3, r3, #1
 5100              		.loc 1 969 36
 5101 001e 5B00     		lsls	r3, r3, #1
 5102 0020 7B62     		str	r3, [r7, #36]
 970:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   float k = 0, rad1 = 0, rad2 = 0;
 5103              		.loc 1 970 9
 5104 0022 4FF00003 		mov	r3, #0
 5105 0026 FB61     		str	r3, [r7, #28]	@ float
 5106              		.loc 1 970 16
 5107 0028 4FF00003 		mov	r3, #0
 5108 002c BB61     		str	r3, [r7, #24]	@ float
ARM GAS  /tmp/ccK9mPCc.s 			page 167


 5109              		.loc 1 970 26
 5110 002e 4FF00003 		mov	r3, #0
 5111 0032 7B61     		str	r3, [r7, #20]	@ float
 971:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 972:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   rad1 = XRadius;
 5112              		.loc 1 972 8
 5113 0034 7B68     		ldr	r3, [r7, #4]
 5114 0036 07EE903A 		vmov	s15, r3	@ int
 5115 003a F8EEE77A 		vcvt.f32.s32	s15, s15
 5116 003e C7ED067A 		vstr.32	s15, [r7, #24]
 973:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   rad2 = YRadius;
 5117              		.loc 1 973 8
 5118 0042 3B68     		ldr	r3, [r7]
 5119 0044 07EE903A 		vmov	s15, r3	@ int
 5120 0048 F8EEE77A 		vcvt.f32.s32	s15, s15
 5121 004c C7ED057A 		vstr.32	s15, [r7, #20]
 974:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 975:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   k = (float)(rad2/rad1);
 5122              		.loc 1 975 5
 5123 0050 D7ED056A 		vldr.32	s13, [r7, #20]
 5124 0054 97ED067A 		vldr.32	s14, [r7, #24]
 5125 0058 C6EE877A 		vdiv.f32	s15, s13, s14
 5126 005c C7ED077A 		vstr.32	s15, [r7, #28]
 5127              	.L163:
 976:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 977:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   do
 978:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 979:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     UTIL_LCD_DrawHLine((Xpos-(uint32_t)(x_pos/k)), (Ypos + y_pos), (2*(uint32_t)(x_pos/k) + 1), Col
 5128              		.loc 1 979 5
 5129 0060 FB68     		ldr	r3, [r7, #12]
 5130              		.loc 1 979 46
 5131 0062 FA6A     		ldr	r2, [r7, #44]
 5132 0064 07EE902A 		vmov	s15, r2	@ int
 5133 0068 F8EEE76A 		vcvt.f32.s32	s13, s15
 5134 006c 97ED077A 		vldr.32	s14, [r7, #28]
 5135 0070 C6EE877A 		vdiv.f32	s15, s13, s14
 5136              		.loc 1 979 30
 5137 0074 FCEEE77A 		vcvt.u32.f32	s15, s15
 5138 0078 17EE902A 		vmov	r2, s15	@ int
 5139              		.loc 1 979 5
 5140 007c 981A     		subs	r0, r3, r2
 5141              		.loc 1 979 58
 5142 007e BA68     		ldr	r2, [r7, #8]
 5143 0080 BB6A     		ldr	r3, [r7, #40]
 5144 0082 1344     		add	r3, r3, r2
 5145              		.loc 1 979 5
 5146 0084 1946     		mov	r1, r3
 5147              		.loc 1 979 87
 5148 0086 FB6A     		ldr	r3, [r7, #44]
 5149 0088 07EE903A 		vmov	s15, r3	@ int
 5150 008c F8EEE76A 		vcvt.f32.s32	s13, s15
 5151 0090 97ED077A 		vldr.32	s14, [r7, #28]
 5152 0094 C6EE877A 		vdiv.f32	s15, s13, s14
 5153              		.loc 1 979 71
 5154 0098 FCEEE77A 		vcvt.u32.f32	s15, s15
 5155 009c 17EE903A 		vmov	r3, s15	@ int
 5156              		.loc 1 979 70
ARM GAS  /tmp/ccK9mPCc.s 			page 168


 5157 00a0 5B00     		lsls	r3, r3, #1
 5158              		.loc 1 979 5
 5159 00a2 5A1C     		adds	r2, r3, #1
 5160 00a4 BB6B     		ldr	r3, [r7, #56]
 5161 00a6 FFF7FEFF 		bl	UTIL_LCD_DrawHLine
 980:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     UTIL_LCD_DrawHLine((Xpos-(uint32_t)(x_pos/k)), (Ypos - y_pos), (2*(uint32_t)(x_pos/k) + 1), Col
 5162              		.loc 1 980 5
 5163 00aa FB68     		ldr	r3, [r7, #12]
 5164              		.loc 1 980 46
 5165 00ac FA6A     		ldr	r2, [r7, #44]
 5166 00ae 07EE902A 		vmov	s15, r2	@ int
 5167 00b2 F8EEE76A 		vcvt.f32.s32	s13, s15
 5168 00b6 97ED077A 		vldr.32	s14, [r7, #28]
 5169 00ba C6EE877A 		vdiv.f32	s15, s13, s14
 5170              		.loc 1 980 30
 5171 00be FCEEE77A 		vcvt.u32.f32	s15, s15
 5172 00c2 17EE902A 		vmov	r2, s15	@ int
 5173              		.loc 1 980 5
 5174 00c6 981A     		subs	r0, r3, r2
 5175              		.loc 1 980 58
 5176 00c8 BA68     		ldr	r2, [r7, #8]
 5177 00ca BB6A     		ldr	r3, [r7, #40]
 5178 00cc D31A     		subs	r3, r2, r3
 5179              		.loc 1 980 5
 5180 00ce 1946     		mov	r1, r3
 5181              		.loc 1 980 87
 5182 00d0 FB6A     		ldr	r3, [r7, #44]
 5183 00d2 07EE903A 		vmov	s15, r3	@ int
 5184 00d6 F8EEE76A 		vcvt.f32.s32	s13, s15
 5185 00da 97ED077A 		vldr.32	s14, [r7, #28]
 5186 00de C6EE877A 		vdiv.f32	s15, s13, s14
 5187              		.loc 1 980 71
 5188 00e2 FCEEE77A 		vcvt.u32.f32	s15, s15
 5189 00e6 17EE903A 		vmov	r3, s15	@ int
 5190              		.loc 1 980 70
 5191 00ea 5B00     		lsls	r3, r3, #1
 5192              		.loc 1 980 5
 5193 00ec 5A1C     		adds	r2, r3, #1
 5194 00ee BB6B     		ldr	r3, [r7, #56]
 5195 00f0 FFF7FEFF 		bl	UTIL_LCD_DrawHLine
 981:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 982:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     e2 = err;
 5196              		.loc 1 982 8
 5197 00f4 7B6A     		ldr	r3, [r7, #36]
 5198 00f6 3B62     		str	r3, [r7, #32]
 983:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     if (e2 <= x_pos)
 5199              		.loc 1 983 8
 5200 00f8 3A6A     		ldr	r2, [r7, #32]
 5201 00fa FB6A     		ldr	r3, [r7, #44]
 5202 00fc 9A42     		cmp	r2, r3
 5203 00fe 13DC     		bgt	.L161
 984:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
 985:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       err += ++x_pos*2+1;
 5204              		.loc 1 985 23
 5205 0100 FB6A     		ldr	r3, [r7, #44]
 5206 0102 0133     		adds	r3, r3, #1
 5207 0104 FB62     		str	r3, [r7, #44]
ARM GAS  /tmp/ccK9mPCc.s 			page 169


 5208              		.loc 1 985 21
 5209 0106 FB6A     		ldr	r3, [r7, #44]
 5210 0108 5B00     		lsls	r3, r3, #1
 5211              		.loc 1 985 23
 5212 010a 0133     		adds	r3, r3, #1
 5213              		.loc 1 985 11
 5214 010c 7A6A     		ldr	r2, [r7, #36]
 5215 010e 1344     		add	r3, r3, r2
 5216 0110 7B62     		str	r3, [r7, #36]
 986:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       if (-y_pos == x_pos && e2 <= y_pos) e2 = 0;
 5217              		.loc 1 986 11
 5218 0112 BB6A     		ldr	r3, [r7, #40]
 5219 0114 5B42     		rsbs	r3, r3, #0
 5220              		.loc 1 986 10
 5221 0116 FA6A     		ldr	r2, [r7, #44]
 5222 0118 9A42     		cmp	r2, r3
 5223 011a 05D1     		bne	.L161
 5224              		.loc 1 986 27 discriminator 1
 5225 011c 3A6A     		ldr	r2, [r7, #32]
 5226 011e BB6A     		ldr	r3, [r7, #40]
 5227 0120 9A42     		cmp	r2, r3
 5228 0122 01DC     		bgt	.L161
 5229              		.loc 1 986 46 discriminator 2
 5230 0124 0023     		movs	r3, #0
 5231 0126 3B62     		str	r3, [r7, #32]
 5232              	.L161:
 987:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
 988:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     if (e2 > y_pos) err += ++y_pos*2+1;
 5233              		.loc 1 988 8
 5234 0128 3A6A     		ldr	r2, [r7, #32]
 5235 012a BB6A     		ldr	r3, [r7, #40]
 5236 012c 9A42     		cmp	r2, r3
 5237 012e 08DD     		ble	.L162
 5238              		.loc 1 988 37 discriminator 1
 5239 0130 BB6A     		ldr	r3, [r7, #40]
 5240 0132 0133     		adds	r3, r3, #1
 5241 0134 BB62     		str	r3, [r7, #40]
 5242              		.loc 1 988 35 discriminator 1
 5243 0136 BB6A     		ldr	r3, [r7, #40]
 5244 0138 5B00     		lsls	r3, r3, #1
 5245              		.loc 1 988 37 discriminator 1
 5246 013a 0133     		adds	r3, r3, #1
 5247              		.loc 1 988 25 discriminator 1
 5248 013c 7A6A     		ldr	r2, [r7, #36]
 5249 013e 1344     		add	r3, r3, r2
 5250 0140 7B62     		str	r3, [r7, #36]
 5251              	.L162:
 989:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
 990:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   while (y_pos <= 0);
 5252              		.loc 1 990 16
 5253 0142 BB6A     		ldr	r3, [r7, #40]
 5254 0144 002B     		cmp	r3, #0
 5255 0146 8BDD     		ble	.L163
 991:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 5256              		.loc 1 991 1
 5257 0148 00BF     		nop
 5258 014a 00BF     		nop
ARM GAS  /tmp/ccK9mPCc.s 			page 170


 5259 014c 3037     		adds	r7, r7, #48
 5260              		.cfi_def_cfa_offset 8
 5261 014e BD46     		mov	sp, r7
 5262              		.cfi_def_cfa_register 13
 5263              		@ sp needed
 5264 0150 80BD     		pop	{r7, pc}
 5265              		.cfi_endproc
 5266              	.LFE28:
 5268              		.section	.text.DrawChar,"ax",%progbits
 5269              		.align	1
 5270              		.syntax unified
 5271              		.thumb
 5272              		.thumb_func
 5274              	DrawChar:
 5275              	.LFB29:
 992:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
 993:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
 994:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Draws a character on LCD.
 995:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Xpos  Line where to display the character shape
 996:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Ypos  Start column address
 997:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  pData Pointer to the character data
 998:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
 999:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
1000:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 5276              		.loc 1 1000 1
 5277              		.cfi_startproc
 5278              		@ args = 0, pretend = 0, frame = 152
 5279              		@ frame_needed = 1, uses_anonymous_args = 0
 5280 0000 80B5     		push	{r7, lr}
 5281              		.cfi_def_cfa_offset 8
 5282              		.cfi_offset 7, -8
 5283              		.cfi_offset 14, -4
 5284 0002 A8B0     		sub	sp, sp, #160
 5285              		.cfi_def_cfa_offset 168
 5286 0004 02AF     		add	r7, sp, #8
 5287              		.cfi_def_cfa 7, 160
 5288 0006 F860     		str	r0, [r7, #12]
 5289 0008 B960     		str	r1, [r7, #8]
 5290 000a 7A60     		str	r2, [r7, #4]
1001:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint32_t i = 0, j = 0, offset;
 5291              		.loc 1 1001 12
 5292 000c 0023     		movs	r3, #0
 5293 000e C7F89430 		str	r3, [r7, #148]
 5294              		.loc 1 1001 19
 5295 0012 0023     		movs	r3, #0
 5296 0014 C7F89030 		str	r3, [r7, #144]
1002:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint32_t height, width;
1003:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint8_t  *pchar;
1004:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint32_t line;
1005:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
1006:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 5297              		.loc 1 1006 29
 5298 0018 A04B     		ldr	r3, .L192
 5299 001a DB68     		ldr	r3, [r3, #12]
 5300              		.loc 1 1006 40
 5301 001c 9F4A     		ldr	r2, .L192
 5302 001e 5B01     		lsls	r3, r3, #5
ARM GAS  /tmp/ccK9mPCc.s 			page 171


 5303 0020 1344     		add	r3, r3, r2
 5304 0022 0833     		adds	r3, r3, #8
 5305 0024 1B68     		ldr	r3, [r3]
 5306              		.loc 1 1006 46
 5307 0026 DB88     		ldrh	r3, [r3, #6]
 5308              		.loc 1 1006 10
 5309 0028 C7F88830 		str	r3, [r7, #136]
1007:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 5310              		.loc 1 1007 29
 5311 002c 9B4B     		ldr	r3, .L192
 5312 002e DB68     		ldr	r3, [r3, #12]
 5313              		.loc 1 1007 40
 5314 0030 9A4A     		ldr	r2, .L192
 5315 0032 5B01     		lsls	r3, r3, #5
 5316 0034 1344     		add	r3, r3, r2
 5317 0036 0833     		adds	r3, r3, #8
 5318 0038 1B68     		ldr	r3, [r3]
 5319              		.loc 1 1007 46
 5320 003a 9B88     		ldrh	r3, [r3, #4]
 5321              		.loc 1 1007 10
 5322 003c C7F88430 		str	r3, [r7, #132]
1008:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
1009:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint8_t rgb8[24*4];
1010:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint16_t* rgb16 = (uint16_t*)rgb8;
 5323              		.loc 1 1010 13
 5324 0040 07F11003 		add	r3, r7, #16
 5325 0044 C7F88030 		str	r3, [r7, #128]
1011:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint32_t* argb32 = (uint32_t*)rgb8;
 5326              		.loc 1 1011 13
 5327 0048 07F11003 		add	r3, r7, #16
 5328 004c FB67     		str	r3, [r7, #124]
1012:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   uint16_t* argb4444 = (uint16_t*)rgb8;
 5329              		.loc 1 1012 13
 5330 004e 07F11003 		add	r3, r7, #16
 5331 0052 BB67     		str	r3, [r7, #120]
1013:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
1014:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   offset =  8 *((width + 7)/8) -  width ;
 5332              		.loc 1 1014 24
 5333 0054 D7F88430 		ldr	r3, [r7, #132]
 5334 0058 0733     		adds	r3, r3, #7
 5335              		.loc 1 1014 15
 5336 005a 23F00702 		bic	r2, r3, #7
 5337              		.loc 1 1014 10
 5338 005e D7F88430 		ldr	r3, [r7, #132]
 5339 0062 D31A     		subs	r3, r2, r3
 5340 0064 7B67     		str	r3, [r7, #116]
1015:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
1016:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   for(i = 0; i < height; i++)
 5341              		.loc 1 1016 9
 5342 0066 0023     		movs	r3, #0
 5343 0068 C7F89430 		str	r3, [r7, #148]
 5344              		.loc 1 1016 3
 5345 006c 60E2     		b	.L165
 5346              	.L190:
1017:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
1018:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 5347              		.loc 1 1018 40
ARM GAS  /tmp/ccK9mPCc.s 			page 172


 5348 006e D7F88430 		ldr	r3, [r7, #132]
 5349 0072 0733     		adds	r3, r3, #7
 5350              		.loc 1 1018 44
 5351 0074 DB08     		lsrs	r3, r3, #3
 5352              		.loc 1 1018 47
 5353 0076 D7F89420 		ldr	r2, [r7, #148]
 5354 007a 02FB03F3 		mul	r3, r2, r3
 5355              		.loc 1 1018 11
 5356 007e 7A68     		ldr	r2, [r7, #4]
 5357 0080 1344     		add	r3, r3, r2
 5358 0082 3B67     		str	r3, [r7, #112]
1019:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
1020:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     switch(((width + 7)/8))
 5359              		.loc 1 1020 20
 5360 0084 D7F88430 		ldr	r3, [r7, #132]
 5361 0088 0733     		adds	r3, r3, #7
 5362              		.loc 1 1020 24
 5363 008a DB08     		lsrs	r3, r3, #3
 5364              		.loc 1 1020 5
 5365 008c 012B     		cmp	r3, #1
 5366 008e 02D0     		beq	.L166
 5367 0090 022B     		cmp	r3, #2
 5368 0092 05D0     		beq	.L167
 5369 0094 0EE0     		b	.L191
 5370              	.L166:
1021:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
1022:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
1023:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     case 1:
1024:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       line =  pchar[0];
 5371              		.loc 1 1024 20
 5372 0096 3B6F     		ldr	r3, [r7, #112]
 5373 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5374              		.loc 1 1024 12
 5375 009a C7F88C30 		str	r3, [r7, #140]
1025:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       break;
 5376              		.loc 1 1025 7
 5377 009e 18E0     		b	.L169
 5378              	.L167:
1026:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
1027:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     case 2:
1028:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       line =  (pchar[0]<< 8) | pchar[1];
 5379              		.loc 1 1028 21
 5380 00a0 3B6F     		ldr	r3, [r7, #112]
 5381 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5382              		.loc 1 1028 24
 5383 00a4 1B02     		lsls	r3, r3, #8
 5384              		.loc 1 1028 37
 5385 00a6 3A6F     		ldr	r2, [r7, #112]
 5386 00a8 0132     		adds	r2, r2, #1
 5387 00aa 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 5388              		.loc 1 1028 30
 5389 00ac 1343     		orrs	r3, r3, r2
 5390              		.loc 1 1028 12
 5391 00ae C7F88C30 		str	r3, [r7, #140]
1029:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       break;
 5392              		.loc 1 1029 7
 5393 00b2 0EE0     		b	.L169
ARM GAS  /tmp/ccK9mPCc.s 			page 173


 5394              	.L191:
1030:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
1031:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     case 3:
1032:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     default:
1033:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 5395              		.loc 1 1033 21
 5396 00b4 3B6F     		ldr	r3, [r7, #112]
 5397 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5398              		.loc 1 1033 24
 5399 00b8 1A04     		lsls	r2, r3, #16
 5400              		.loc 1 1033 39
 5401 00ba 3B6F     		ldr	r3, [r7, #112]
 5402 00bc 0133     		adds	r3, r3, #1
 5403 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5404              		.loc 1 1033 42
 5405 00c0 1B02     		lsls	r3, r3, #8
 5406              		.loc 1 1033 31
 5407 00c2 1343     		orrs	r3, r3, r2
 5408              		.loc 1 1033 55
 5409 00c4 3A6F     		ldr	r2, [r7, #112]
 5410 00c6 0232     		adds	r2, r2, #2
 5411 00c8 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 5412              		.loc 1 1033 48
 5413 00ca 1343     		orrs	r3, r3, r2
 5414              		.loc 1 1033 12
 5415 00cc C7F88C30 		str	r3, [r7, #140]
1034:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       break;
 5416              		.loc 1 1034 7
 5417 00d0 00BF     		nop
 5418              	.L169:
1035:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
1036:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
1037:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 5419              		.loc 1 1037 25
 5420 00d2 724B     		ldr	r3, .L192
 5421 00d4 DB68     		ldr	r3, [r3, #12]
 5422              		.loc 1 1037 36
 5423 00d6 714A     		ldr	r2, .L192
 5424 00d8 5B01     		lsls	r3, r3, #5
 5425 00da 1344     		add	r3, r3, r2
 5426 00dc 1C33     		adds	r3, r3, #28
 5427 00de 1B68     		ldr	r3, [r3]
 5428              		.loc 1 1037 7
 5429 00e0 022B     		cmp	r3, #2
 5430 00e2 40F08B80 		bne	.L170
1038:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
1039:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       for (j = 0; j < width; j++)
 5431              		.loc 1 1039 14
 5432 00e6 0023     		movs	r3, #0
 5433 00e8 C7F89030 		str	r3, [r7, #144]
 5434              		.loc 1 1039 7
 5435 00ec 73E0     		b	.L171
 5436              	.L174:
1040:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
1041:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         if(line & (1 << (width- j + offset- 1)))
 5437              		.loc 1 1041 31
 5438 00ee D7F88420 		ldr	r2, [r7, #132]
ARM GAS  /tmp/ccK9mPCc.s 			page 174


 5439 00f2 D7F89030 		ldr	r3, [r7, #144]
 5440 00f6 D21A     		subs	r2, r2, r3
 5441              		.loc 1 1041 35
 5442 00f8 7B6F     		ldr	r3, [r7, #116]
 5443 00fa 1344     		add	r3, r3, r2
 5444              		.loc 1 1041 43
 5445 00fc 013B     		subs	r3, r3, #1
 5446              		.loc 1 1041 22
 5447 00fe 0122     		movs	r2, #1
 5448 0100 02FA03F3 		lsl	r3, r2, r3
 5449 0104 1A46     		mov	r2, r3
 5450              		.loc 1 1041 17
 5451 0106 D7F88C30 		ldr	r3, [r7, #140]
 5452 010a 1340     		ands	r3, r3, r2
 5453              		.loc 1 1041 11
 5454 010c 002B     		cmp	r3, #0
 5455 010e 2DD0     		beq	.L172
1042:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         {
1043:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****           rgb16[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 5456              		.loc 1 1043 22
 5457 0110 624B     		ldr	r3, .L192
 5458 0112 DB68     		ldr	r3, [r3, #12]
 5459 0114 614A     		ldr	r2, .L192
 5460 0116 5B01     		lsls	r3, r3, #5
 5461 0118 1344     		add	r3, r3, r2
 5462 011a 1B68     		ldr	r3, [r3]
 5463 011c DB08     		lsrs	r3, r3, #3
 5464 011e 9BB2     		uxth	r3, r3
 5465 0120 03F01F03 		and	r3, r3, #31
 5466 0124 9AB2     		uxth	r2, r3
 5467 0126 5D4B     		ldr	r3, .L192
 5468 0128 DB68     		ldr	r3, [r3, #12]
 5469 012a 5C49     		ldr	r1, .L192
 5470 012c 5B01     		lsls	r3, r3, #5
 5471 012e 0B44     		add	r3, r3, r1
 5472 0130 1B68     		ldr	r3, [r3]
 5473 0132 9B0A     		lsrs	r3, r3, #10
 5474 0134 9BB2     		uxth	r3, r3
 5475 0136 5B01     		lsls	r3, r3, #5
 5476 0138 9BB2     		uxth	r3, r3
 5477 013a 03F4FC63 		and	r3, r3, #2016
 5478 013e 9BB2     		uxth	r3, r3
 5479 0140 1343     		orrs	r3, r3, r2
 5480 0142 99B2     		uxth	r1, r3
 5481 0144 554B     		ldr	r3, .L192
 5482 0146 DB68     		ldr	r3, [r3, #12]
 5483 0148 544A     		ldr	r2, .L192
 5484 014a 5B01     		lsls	r3, r3, #5
 5485 014c 1344     		add	r3, r3, r2
 5486 014e 1B68     		ldr	r3, [r3]
 5487 0150 DB0C     		lsrs	r3, r3, #19
 5488 0152 9BB2     		uxth	r3, r3
 5489 0154 DB02     		lsls	r3, r3, #11
 5490 0156 9AB2     		uxth	r2, r3
 5491              		.loc 1 1043 16
 5492 0158 D7F89030 		ldr	r3, [r7, #144]
 5493 015c 5B00     		lsls	r3, r3, #1
ARM GAS  /tmp/ccK9mPCc.s 			page 175


 5494 015e D7F88000 		ldr	r0, [r7, #128]
 5495 0162 0344     		add	r3, r3, r0
 5496              		.loc 1 1043 22
 5497 0164 0A43     		orrs	r2, r2, r1
 5498 0166 92B2     		uxth	r2, r2
 5499              		.loc 1 1043 20
 5500 0168 1A80     		strh	r2, [r3]	@ movhi
 5501 016a 2FE0     		b	.L173
 5502              	.L172:
1044:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         }
1045:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         else
1046:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         {
1047:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****           rgb16[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 5503              		.loc 1 1047 22
 5504 016c 4B4B     		ldr	r3, .L192
 5505 016e DB68     		ldr	r3, [r3, #12]
 5506 0170 4A4A     		ldr	r2, .L192
 5507 0172 5B01     		lsls	r3, r3, #5
 5508 0174 1344     		add	r3, r3, r2
 5509 0176 0433     		adds	r3, r3, #4
 5510 0178 1B68     		ldr	r3, [r3]
 5511 017a DB08     		lsrs	r3, r3, #3
 5512 017c 9BB2     		uxth	r3, r3
 5513 017e 03F01F03 		and	r3, r3, #31
 5514 0182 9AB2     		uxth	r2, r3
 5515 0184 454B     		ldr	r3, .L192
 5516 0186 DB68     		ldr	r3, [r3, #12]
 5517 0188 4449     		ldr	r1, .L192
 5518 018a 5B01     		lsls	r3, r3, #5
 5519 018c 0B44     		add	r3, r3, r1
 5520 018e 0433     		adds	r3, r3, #4
 5521 0190 1B68     		ldr	r3, [r3]
 5522 0192 9B0A     		lsrs	r3, r3, #10
 5523 0194 9BB2     		uxth	r3, r3
 5524 0196 5B01     		lsls	r3, r3, #5
 5525 0198 9BB2     		uxth	r3, r3
 5526 019a 03F4FC63 		and	r3, r3, #2016
 5527 019e 9BB2     		uxth	r3, r3
 5528 01a0 1343     		orrs	r3, r3, r2
 5529 01a2 99B2     		uxth	r1, r3
 5530 01a4 3D4B     		ldr	r3, .L192
 5531 01a6 DB68     		ldr	r3, [r3, #12]
 5532 01a8 3C4A     		ldr	r2, .L192
 5533 01aa 5B01     		lsls	r3, r3, #5
 5534 01ac 1344     		add	r3, r3, r2
 5535 01ae 0433     		adds	r3, r3, #4
 5536 01b0 1B68     		ldr	r3, [r3]
 5537 01b2 DB0C     		lsrs	r3, r3, #19
 5538 01b4 9BB2     		uxth	r3, r3
 5539 01b6 DB02     		lsls	r3, r3, #11
 5540 01b8 9AB2     		uxth	r2, r3
 5541              		.loc 1 1047 16
 5542 01ba D7F89030 		ldr	r3, [r7, #144]
 5543 01be 5B00     		lsls	r3, r3, #1
 5544 01c0 D7F88000 		ldr	r0, [r7, #128]
 5545 01c4 0344     		add	r3, r3, r0
 5546              		.loc 1 1047 22
ARM GAS  /tmp/ccK9mPCc.s 			page 176


 5547 01c6 0A43     		orrs	r2, r2, r1
 5548 01c8 92B2     		uxth	r2, r2
 5549              		.loc 1 1047 20
 5550 01ca 1A80     		strh	r2, [r3]	@ movhi
 5551              	.L173:
1039:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 5552              		.loc 1 1039 31 discriminator 2
 5553 01cc D7F89030 		ldr	r3, [r7, #144]
 5554 01d0 0133     		adds	r3, r3, #1
 5555 01d2 C7F89030 		str	r3, [r7, #144]
 5556              	.L171:
1039:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 5557              		.loc 1 1039 21 discriminator 1
 5558 01d6 D7F89020 		ldr	r2, [r7, #144]
 5559 01da D7F88430 		ldr	r3, [r7, #132]
 5560 01de 9A42     		cmp	r2, r3
 5561 01e0 85D3     		bcc	.L174
1048:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         }
1049:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       }
1050:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       UTIL_LCD_FillRGBRect(Xpos,  Ypos++, &rgb8[0], width, 1);
 5562              		.loc 1 1050 7
 5563 01e2 B968     		ldr	r1, [r7, #8]
 5564 01e4 4B1C     		adds	r3, r1, #1
 5565 01e6 BB60     		str	r3, [r7, #8]
 5566 01e8 07F11002 		add	r2, r7, #16
 5567 01ec 0123     		movs	r3, #1
 5568 01ee 0093     		str	r3, [sp]
 5569 01f0 D7F88430 		ldr	r3, [r7, #132]
 5570 01f4 F868     		ldr	r0, [r7, #12]
 5571 01f6 FFF7FEFF 		bl	UTIL_LCD_FillRGBRect
 5572 01fa 94E1     		b	.L175
 5573              	.L170:
1051:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
1052:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
 5574              		.loc 1 1052 30
 5575 01fc 274B     		ldr	r3, .L192
 5576 01fe DB68     		ldr	r3, [r3, #12]
 5577              		.loc 1 1052 41
 5578 0200 264A     		ldr	r2, .L192
 5579 0202 5B01     		lsls	r3, r3, #5
 5580 0204 1344     		add	r3, r3, r2
 5581 0206 1C33     		adds	r3, r3, #28
 5582 0208 1B68     		ldr	r3, [r3]
 5583              		.loc 1 1052 12
 5584 020a 012B     		cmp	r3, #1
 5585 020c 40F09580 		bne	.L176
1053:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
1054:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       for (j = 0; j < width*3; j = j+ 3)
 5586              		.loc 1 1054 14
 5587 0210 0023     		movs	r3, #0
 5588 0212 C7F89030 		str	r3, [r7, #144]
 5589              		.loc 1 1054 7
 5590 0216 79E0     		b	.L177
 5591              	.L180:
1055:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
1056:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         if(line & (1 << (width- j/3 + offset- 1)))
 5592              		.loc 1 1056 34
ARM GAS  /tmp/ccK9mPCc.s 			page 177


 5593 0218 D7F89030 		ldr	r3, [r7, #144]
 5594 021c 204A     		ldr	r2, .L192+4
 5595 021e A2FB0323 		umull	r2, r3, r2, r3
 5596 0222 5B08     		lsrs	r3, r3, #1
 5597              		.loc 1 1056 31
 5598 0224 D7F88420 		ldr	r2, [r7, #132]
 5599 0228 D21A     		subs	r2, r2, r3
 5600              		.loc 1 1056 37
 5601 022a 7B6F     		ldr	r3, [r7, #116]
 5602 022c 1344     		add	r3, r3, r2
 5603              		.loc 1 1056 45
 5604 022e 013B     		subs	r3, r3, #1
 5605              		.loc 1 1056 22
 5606 0230 0122     		movs	r2, #1
 5607 0232 02FA03F3 		lsl	r3, r2, r3
 5608 0236 1A46     		mov	r2, r3
 5609              		.loc 1 1056 17
 5610 0238 D7F88C30 		ldr	r3, [r7, #140]
 5611 023c 1340     		ands	r3, r3, r2
 5612              		.loc 1 1056 11
 5613 023e 002B     		cmp	r3, #0
 5614 0240 30D0     		beq	.L178
1057:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         {
1058:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****           rgb8[j] = CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].TextColor)) & 0xFFU;
 5615              		.loc 1 1058 21
 5616 0242 164B     		ldr	r3, .L192
 5617 0244 DB68     		ldr	r3, [r3, #12]
 5618 0246 154A     		ldr	r2, .L192
 5619 0248 5B01     		lsls	r3, r3, #5
 5620 024a 1344     		add	r3, r3, r2
 5621 024c 1B68     		ldr	r3, [r3]
 5622              		.loc 1 1058 19
 5623 024e D9B2     		uxtb	r1, r3
 5624 0250 07F11002 		add	r2, r7, #16
 5625 0254 D7F89030 		ldr	r3, [r7, #144]
 5626 0258 1344     		add	r3, r3, r2
 5627 025a 0A46     		mov	r2, r1
 5628 025c 1A70     		strb	r2, [r3]
1059:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****           rgb8[j + 1U] = (CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].TextColor)) >> 8) & 
 5629              		.loc 1 1059 27
 5630 025e 0F4B     		ldr	r3, .L192
 5631 0260 DB68     		ldr	r3, [r3, #12]
 5632 0262 0E4A     		ldr	r2, .L192
 5633 0264 5B01     		lsls	r3, r3, #5
 5634 0266 1344     		add	r3, r3, r2
 5635 0268 1B68     		ldr	r3, [r3]
 5636              		.loc 1 1059 92
 5637 026a 1A0A     		lsrs	r2, r3, #8
 5638              		.loc 1 1059 18
 5639 026c D7F89030 		ldr	r3, [r7, #144]
 5640 0270 0133     		adds	r3, r3, #1
 5641              		.loc 1 1059 24
 5642 0272 D2B2     		uxtb	r2, r2
 5643 0274 9833     		adds	r3, r3, #152
 5644 0276 3B44     		add	r3, r3, r7
 5645 0278 03F8882C 		strb	r2, [r3, #-136]
1060:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****           rgb8[j + 2U] = (CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].TextColor)) >> 16) &
ARM GAS  /tmp/ccK9mPCc.s 			page 178


 5646              		.loc 1 1060 27
 5647 027c 074B     		ldr	r3, .L192
 5648 027e DB68     		ldr	r3, [r3, #12]
 5649 0280 064A     		ldr	r2, .L192
 5650 0282 5B01     		lsls	r3, r3, #5
 5651 0284 1344     		add	r3, r3, r2
 5652 0286 1B68     		ldr	r3, [r3]
 5653              		.loc 1 1060 92
 5654 0288 1A0C     		lsrs	r2, r3, #16
 5655              		.loc 1 1060 18
 5656 028a D7F89030 		ldr	r3, [r7, #144]
 5657 028e 0233     		adds	r3, r3, #2
 5658              		.loc 1 1060 24
 5659 0290 D2B2     		uxtb	r2, r2
 5660 0292 9833     		adds	r3, r3, #152
 5661 0294 3B44     		add	r3, r3, r7
 5662 0296 03F8882C 		strb	r2, [r3, #-136]
 5663 029a 32E0     		b	.L179
 5664              	.L193:
 5665              		.align	2
 5666              	.L192:
 5667 029c 00000000 		.word	DrawProp
 5668 02a0 ABAAAAAA 		.word	-1431655765
 5669              	.L178:
1061:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         }
1062:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         else
1063:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         {
1064:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****           rgb8[j] = CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].BackColor)) & 0xFFU;
 5670              		.loc 1 1064 21
 5671 02a4 A84B     		ldr	r3, .L194
 5672 02a6 DB68     		ldr	r3, [r3, #12]
 5673 02a8 A74A     		ldr	r2, .L194
 5674 02aa 5B01     		lsls	r3, r3, #5
 5675 02ac 1344     		add	r3, r3, r2
 5676 02ae 0433     		adds	r3, r3, #4
 5677 02b0 1B68     		ldr	r3, [r3]
 5678              		.loc 1 1064 19
 5679 02b2 D9B2     		uxtb	r1, r3
 5680 02b4 07F11002 		add	r2, r7, #16
 5681 02b8 D7F89030 		ldr	r3, [r7, #144]
 5682 02bc 1344     		add	r3, r3, r2
 5683 02be 0A46     		mov	r2, r1
 5684 02c0 1A70     		strb	r2, [r3]
1065:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****           rgb8[j + 1U] = (CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].BackColor)) >> 8) & 
 5685              		.loc 1 1065 27
 5686 02c2 A14B     		ldr	r3, .L194
 5687 02c4 DB68     		ldr	r3, [r3, #12]
 5688 02c6 A04A     		ldr	r2, .L194
 5689 02c8 5B01     		lsls	r3, r3, #5
 5690 02ca 1344     		add	r3, r3, r2
 5691 02cc 0433     		adds	r3, r3, #4
 5692 02ce 1B68     		ldr	r3, [r3]
 5693              		.loc 1 1065 92
 5694 02d0 1A0A     		lsrs	r2, r3, #8
 5695              		.loc 1 1065 18
 5696 02d2 D7F89030 		ldr	r3, [r7, #144]
 5697 02d6 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccK9mPCc.s 			page 179


 5698              		.loc 1 1065 24
 5699 02d8 D2B2     		uxtb	r2, r2
 5700 02da 9833     		adds	r3, r3, #152
 5701 02dc 3B44     		add	r3, r3, r7
 5702 02de 03F8882C 		strb	r2, [r3, #-136]
1066:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****           rgb8[j + 2U] = (CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].BackColor)) >> 16) &
 5703              		.loc 1 1066 27
 5704 02e2 994B     		ldr	r3, .L194
 5705 02e4 DB68     		ldr	r3, [r3, #12]
 5706 02e6 984A     		ldr	r2, .L194
 5707 02e8 5B01     		lsls	r3, r3, #5
 5708 02ea 1344     		add	r3, r3, r2
 5709 02ec 0433     		adds	r3, r3, #4
 5710 02ee 1B68     		ldr	r3, [r3]
 5711              		.loc 1 1066 92
 5712 02f0 1A0C     		lsrs	r2, r3, #16
 5713              		.loc 1 1066 18
 5714 02f2 D7F89030 		ldr	r3, [r7, #144]
 5715 02f6 0233     		adds	r3, r3, #2
 5716              		.loc 1 1066 24
 5717 02f8 D2B2     		uxtb	r2, r2
 5718 02fa 9833     		adds	r3, r3, #152
 5719 02fc 3B44     		add	r3, r3, r7
 5720 02fe 03F8882C 		strb	r2, [r3, #-136]
 5721              	.L179:
1054:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 5722              		.loc 1 1054 34 discriminator 2
 5723 0302 D7F89030 		ldr	r3, [r7, #144]
 5724 0306 0333     		adds	r3, r3, #3
 5725 0308 C7F89030 		str	r3, [r7, #144]
 5726              	.L177:
1054:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 5727              		.loc 1 1054 28 discriminator 1
 5728 030c D7F88420 		ldr	r2, [r7, #132]
 5729 0310 1346     		mov	r3, r2
 5730 0312 5B00     		lsls	r3, r3, #1
 5731 0314 1344     		add	r3, r3, r2
1054:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 5732              		.loc 1 1054 21 discriminator 1
 5733 0316 D7F89020 		ldr	r2, [r7, #144]
 5734 031a 9A42     		cmp	r2, r3
 5735 031c FFF47CAF 		bcc	.L180
1067:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         }
1068:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       }
1069:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
1070:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       UTIL_LCD_FillRGBRect(Xpos,  Ypos++, &rgb8[0], width, 1);
 5736              		.loc 1 1070 7
 5737 0320 B968     		ldr	r1, [r7, #8]
 5738 0322 4B1C     		adds	r3, r1, #1
 5739 0324 BB60     		str	r3, [r7, #8]
 5740 0326 07F11002 		add	r2, r7, #16
 5741 032a 0123     		movs	r3, #1
 5742 032c 0093     		str	r3, [sp]
 5743 032e D7F88430 		ldr	r3, [r7, #132]
 5744 0332 F868     		ldr	r0, [r7, #12]
 5745 0334 FFF7FEFF 		bl	UTIL_LCD_FillRGBRect
 5746 0338 F5E0     		b	.L175
ARM GAS  /tmp/ccK9mPCc.s 			page 180


 5747              	.L176:
1071:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
1072:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
 5748              		.loc 1 1072 30
 5749 033a 834B     		ldr	r3, .L194
 5750 033c DB68     		ldr	r3, [r3, #12]
 5751              		.loc 1 1072 41
 5752 033e 824A     		ldr	r2, .L194
 5753 0340 5B01     		lsls	r3, r3, #5
 5754 0342 1344     		add	r3, r3, r2
 5755 0344 1C33     		adds	r3, r3, #28
 5756 0346 1B68     		ldr	r3, [r3]
 5757              		.loc 1 1072 12
 5758 0348 042B     		cmp	r3, #4
 5759 034a 40F0A680 		bne	.L181
1073:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
1074:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       for (j = 0; j < width; j++)
 5760              		.loc 1 1074 14
 5761 034e 0023     		movs	r3, #0
 5762 0350 C7F89030 		str	r3, [r7, #144]
 5763              		.loc 1 1074 7
 5764 0354 8EE0     		b	.L182
 5765              	.L185:
1075:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
1076:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         if(line & (1 << (width- j + offset- 1)))
 5766              		.loc 1 1076 31
 5767 0356 D7F88420 		ldr	r2, [r7, #132]
 5768 035a D7F89030 		ldr	r3, [r7, #144]
 5769 035e D21A     		subs	r2, r2, r3
 5770              		.loc 1 1076 35
 5771 0360 7B6F     		ldr	r3, [r7, #116]
 5772 0362 1344     		add	r3, r3, r2
 5773              		.loc 1 1076 43
 5774 0364 013B     		subs	r3, r3, #1
 5775              		.loc 1 1076 22
 5776 0366 0122     		movs	r2, #1
 5777 0368 02FA03F3 		lsl	r3, r2, r3
 5778 036c 1A46     		mov	r2, r3
 5779              		.loc 1 1076 17
 5780 036e D7F88C30 		ldr	r3, [r7, #140]
 5781 0372 1340     		ands	r3, r3, r2
 5782              		.loc 1 1076 11
 5783 0374 002B     		cmp	r3, #0
 5784 0376 3AD0     		beq	.L183
1077:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         {
1078:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****           argb4444[j] = CONVERTARGB88882ARGB4444(DrawProp[DrawProp->LcdLayer].TextColor);
 5785              		.loc 1 1078 25
 5786 0378 734B     		ldr	r3, .L194
 5787 037a DB68     		ldr	r3, [r3, #12]
 5788 037c 724A     		ldr	r2, .L194
 5789 037e 5B01     		lsls	r3, r3, #5
 5790 0380 1344     		add	r3, r3, r2
 5791 0382 1B68     		ldr	r3, [r3]
 5792 0384 1B09     		lsrs	r3, r3, #4
 5793 0386 9BB2     		uxth	r3, r3
 5794 0388 03F00F03 		and	r3, r3, #15
 5795 038c 9AB2     		uxth	r2, r3
ARM GAS  /tmp/ccK9mPCc.s 			page 181


 5796 038e 6E4B     		ldr	r3, .L194
 5797 0390 DB68     		ldr	r3, [r3, #12]
 5798 0392 6D49     		ldr	r1, .L194
 5799 0394 5B01     		lsls	r3, r3, #5
 5800 0396 0B44     		add	r3, r3, r1
 5801 0398 1B68     		ldr	r3, [r3]
 5802 039a 1B0B     		lsrs	r3, r3, #12
 5803 039c 9BB2     		uxth	r3, r3
 5804 039e 1B01     		lsls	r3, r3, #4
 5805 03a0 9BB2     		uxth	r3, r3
 5806 03a2 DBB2     		uxtb	r3, r3
 5807 03a4 9BB2     		uxth	r3, r3
 5808 03a6 1343     		orrs	r3, r3, r2
 5809 03a8 9AB2     		uxth	r2, r3
 5810 03aa 674B     		ldr	r3, .L194
 5811 03ac DB68     		ldr	r3, [r3, #12]
 5812 03ae 6649     		ldr	r1, .L194
 5813 03b0 5B01     		lsls	r3, r3, #5
 5814 03b2 0B44     		add	r3, r3, r1
 5815 03b4 1B68     		ldr	r3, [r3]
 5816 03b6 1B0D     		lsrs	r3, r3, #20
 5817 03b8 9BB2     		uxth	r3, r3
 5818 03ba 1B02     		lsls	r3, r3, #8
 5819 03bc 9BB2     		uxth	r3, r3
 5820 03be 03F47063 		and	r3, r3, #3840
 5821 03c2 9BB2     		uxth	r3, r3
 5822 03c4 1343     		orrs	r3, r3, r2
 5823 03c6 99B2     		uxth	r1, r3
 5824 03c8 5F4B     		ldr	r3, .L194
 5825 03ca DB68     		ldr	r3, [r3, #12]
 5826 03cc 5E4A     		ldr	r2, .L194
 5827 03ce 5B01     		lsls	r3, r3, #5
 5828 03d0 1344     		add	r3, r3, r2
 5829 03d2 1B68     		ldr	r3, [r3]
 5830 03d4 1B0F     		lsrs	r3, r3, #28
 5831 03d6 9BB2     		uxth	r3, r3
 5832 03d8 1B03     		lsls	r3, r3, #12
 5833 03da 9AB2     		uxth	r2, r3
 5834              		.loc 1 1078 19
 5835 03dc D7F89030 		ldr	r3, [r7, #144]
 5836 03e0 5B00     		lsls	r3, r3, #1
 5837 03e2 B86F     		ldr	r0, [r7, #120]
 5838 03e4 0344     		add	r3, r3, r0
 5839              		.loc 1 1078 25
 5840 03e6 0A43     		orrs	r2, r2, r1
 5841 03e8 92B2     		uxth	r2, r2
 5842              		.loc 1 1078 23
 5843 03ea 1A80     		strh	r2, [r3]	@ movhi
 5844 03ec 3DE0     		b	.L184
 5845              	.L183:
1079:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         }
1080:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         else
1081:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         {
1082:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****           argb4444[j] = CONVERTARGB88882ARGB4444(DrawProp[DrawProp->LcdLayer].BackColor);
 5846              		.loc 1 1082 25
 5847 03ee 564B     		ldr	r3, .L194
 5848 03f0 DB68     		ldr	r3, [r3, #12]
ARM GAS  /tmp/ccK9mPCc.s 			page 182


 5849 03f2 554A     		ldr	r2, .L194
 5850 03f4 5B01     		lsls	r3, r3, #5
 5851 03f6 1344     		add	r3, r3, r2
 5852 03f8 0433     		adds	r3, r3, #4
 5853 03fa 1B68     		ldr	r3, [r3]
 5854 03fc 1B09     		lsrs	r3, r3, #4
 5855 03fe 9BB2     		uxth	r3, r3
 5856 0400 03F00F03 		and	r3, r3, #15
 5857 0404 9AB2     		uxth	r2, r3
 5858 0406 504B     		ldr	r3, .L194
 5859 0408 DB68     		ldr	r3, [r3, #12]
 5860 040a 4F49     		ldr	r1, .L194
 5861 040c 5B01     		lsls	r3, r3, #5
 5862 040e 0B44     		add	r3, r3, r1
 5863 0410 0433     		adds	r3, r3, #4
 5864 0412 1B68     		ldr	r3, [r3]
 5865 0414 1B0B     		lsrs	r3, r3, #12
 5866 0416 9BB2     		uxth	r3, r3
 5867 0418 1B01     		lsls	r3, r3, #4
 5868 041a 9BB2     		uxth	r3, r3
 5869 041c DBB2     		uxtb	r3, r3
 5870 041e 9BB2     		uxth	r3, r3
 5871 0420 1343     		orrs	r3, r3, r2
 5872 0422 9AB2     		uxth	r2, r3
 5873 0424 484B     		ldr	r3, .L194
 5874 0426 DB68     		ldr	r3, [r3, #12]
 5875 0428 4749     		ldr	r1, .L194
 5876 042a 5B01     		lsls	r3, r3, #5
 5877 042c 0B44     		add	r3, r3, r1
 5878 042e 0433     		adds	r3, r3, #4
 5879 0430 1B68     		ldr	r3, [r3]
 5880 0432 1B0D     		lsrs	r3, r3, #20
 5881 0434 9BB2     		uxth	r3, r3
 5882 0436 1B02     		lsls	r3, r3, #8
 5883 0438 9BB2     		uxth	r3, r3
 5884 043a 03F47063 		and	r3, r3, #3840
 5885 043e 9BB2     		uxth	r3, r3
 5886 0440 1343     		orrs	r3, r3, r2
 5887 0442 99B2     		uxth	r1, r3
 5888 0444 404B     		ldr	r3, .L194
 5889 0446 DB68     		ldr	r3, [r3, #12]
 5890 0448 3F4A     		ldr	r2, .L194
 5891 044a 5B01     		lsls	r3, r3, #5
 5892 044c 1344     		add	r3, r3, r2
 5893 044e 0433     		adds	r3, r3, #4
 5894 0450 1B68     		ldr	r3, [r3]
 5895 0452 1B0F     		lsrs	r3, r3, #28
 5896 0454 9BB2     		uxth	r3, r3
 5897 0456 1B03     		lsls	r3, r3, #12
 5898 0458 9AB2     		uxth	r2, r3
 5899              		.loc 1 1082 19
 5900 045a D7F89030 		ldr	r3, [r7, #144]
 5901 045e 5B00     		lsls	r3, r3, #1
 5902 0460 B86F     		ldr	r0, [r7, #120]
 5903 0462 0344     		add	r3, r3, r0
 5904              		.loc 1 1082 25
 5905 0464 0A43     		orrs	r2, r2, r1
ARM GAS  /tmp/ccK9mPCc.s 			page 183


 5906 0466 92B2     		uxth	r2, r2
 5907              		.loc 1 1082 23
 5908 0468 1A80     		strh	r2, [r3]	@ movhi
 5909              	.L184:
1074:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 5910              		.loc 1 1074 31 discriminator 2
 5911 046a D7F89030 		ldr	r3, [r7, #144]
 5912 046e 0133     		adds	r3, r3, #1
 5913 0470 C7F89030 		str	r3, [r7, #144]
 5914              	.L182:
1074:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 5915              		.loc 1 1074 21 discriminator 1
 5916 0474 D7F89020 		ldr	r2, [r7, #144]
 5917 0478 D7F88430 		ldr	r3, [r7, #132]
 5918 047c 9A42     		cmp	r2, r3
 5919 047e FFF46AAF 		bcc	.L185
1083:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         }
1084:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       }
1085:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb4444[0], width, 1);
 5920              		.loc 1 1085 7
 5921 0482 B968     		ldr	r1, [r7, #8]
 5922 0484 4B1C     		adds	r3, r1, #1
 5923 0486 BB60     		str	r3, [r7, #8]
 5924 0488 0123     		movs	r3, #1
 5925 048a 0093     		str	r3, [sp]
 5926 048c D7F88430 		ldr	r3, [r7, #132]
 5927 0490 BA6F     		ldr	r2, [r7, #120]
 5928 0492 F868     		ldr	r0, [r7, #12]
 5929 0494 FFF7FEFF 		bl	UTIL_LCD_FillRGBRect
 5930 0498 45E0     		b	.L175
 5931              	.L181:
1086:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
1087:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     else /*LCD_PIXEL_FORMAT_ARGB888*/
1088:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
1089:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       for (j = 0; j < width; j++)
 5932              		.loc 1 1089 14
 5933 049a 0023     		movs	r3, #0
 5934 049c C7F89030 		str	r3, [r7, #144]
 5935              		.loc 1 1089 7
 5936 04a0 2FE0     		b	.L186
 5937              	.L189:
1090:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
1091:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         if(line & (1 << (width- j + offset- 1)))
 5938              		.loc 1 1091 31
 5939 04a2 D7F88420 		ldr	r2, [r7, #132]
 5940 04a6 D7F89030 		ldr	r3, [r7, #144]
 5941 04aa D21A     		subs	r2, r2, r3
 5942              		.loc 1 1091 35
 5943 04ac 7B6F     		ldr	r3, [r7, #116]
 5944 04ae 1344     		add	r3, r3, r2
 5945              		.loc 1 1091 43
 5946 04b0 013B     		subs	r3, r3, #1
 5947              		.loc 1 1091 22
 5948 04b2 0122     		movs	r2, #1
 5949 04b4 02FA03F3 		lsl	r3, r2, r3
 5950 04b8 1A46     		mov	r2, r3
 5951              		.loc 1 1091 17
ARM GAS  /tmp/ccK9mPCc.s 			page 184


 5952 04ba D7F88C30 		ldr	r3, [r7, #140]
 5953 04be 1340     		ands	r3, r3, r2
 5954              		.loc 1 1091 11
 5955 04c0 002B     		cmp	r3, #0
 5956 04c2 0CD0     		beq	.L187
1092:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         {
1093:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****           argb32[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 5957              		.loc 1 1093 40
 5958 04c4 204B     		ldr	r3, .L194
 5959 04c6 DA68     		ldr	r2, [r3, #12]
 5960              		.loc 1 1093 17
 5961 04c8 D7F89030 		ldr	r3, [r7, #144]
 5962 04cc 9B00     		lsls	r3, r3, #2
 5963 04ce F96F     		ldr	r1, [r7, #124]
 5964 04d0 0B44     		add	r3, r3, r1
 5965              		.loc 1 1093 51
 5966 04d2 1D49     		ldr	r1, .L194
 5967 04d4 5201     		lsls	r2, r2, #5
 5968 04d6 0A44     		add	r2, r2, r1
 5969 04d8 1268     		ldr	r2, [r2]
 5970              		.loc 1 1093 21
 5971 04da 1A60     		str	r2, [r3]
 5972 04dc 0CE0     		b	.L188
 5973              	.L187:
1094:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         }
1095:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         else
1096:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         {
1097:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****           argb32[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 5974              		.loc 1 1097 40
 5975 04de 1A4B     		ldr	r3, .L194
 5976 04e0 DA68     		ldr	r2, [r3, #12]
 5977              		.loc 1 1097 17
 5978 04e2 D7F89030 		ldr	r3, [r7, #144]
 5979 04e6 9B00     		lsls	r3, r3, #2
 5980 04e8 F96F     		ldr	r1, [r7, #124]
 5981 04ea 0B44     		add	r3, r3, r1
 5982              		.loc 1 1097 51
 5983 04ec 1649     		ldr	r1, .L194
 5984 04ee 5201     		lsls	r2, r2, #5
 5985 04f0 0A44     		add	r2, r2, r1
 5986 04f2 0432     		adds	r2, r2, #4
 5987 04f4 1268     		ldr	r2, [r2]
 5988              		.loc 1 1097 21
 5989 04f6 1A60     		str	r2, [r3]
 5990              	.L188:
1089:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 5991              		.loc 1 1089 31 discriminator 2
 5992 04f8 D7F89030 		ldr	r3, [r7, #144]
 5993 04fc 0133     		adds	r3, r3, #1
 5994 04fe C7F89030 		str	r3, [r7, #144]
 5995              	.L186:
1089:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       {
 5996              		.loc 1 1089 21 discriminator 1
 5997 0502 D7F89020 		ldr	r2, [r7, #144]
 5998 0506 D7F88430 		ldr	r3, [r7, #132]
 5999 050a 9A42     		cmp	r2, r3
 6000 050c C9D3     		bcc	.L189
ARM GAS  /tmp/ccK9mPCc.s 			page 185


1098:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****         }
1099:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       }
1100:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       UTIL_LCD_FillRGBRect(Xpos,  Ypos++, &rgb8[0], width, 1);
 6001              		.loc 1 1100 7
 6002 050e B968     		ldr	r1, [r7, #8]
 6003 0510 4B1C     		adds	r3, r1, #1
 6004 0512 BB60     		str	r3, [r7, #8]
 6005 0514 07F11002 		add	r2, r7, #16
 6006 0518 0123     		movs	r3, #1
 6007 051a 0093     		str	r3, [sp]
 6008 051c D7F88430 		ldr	r3, [r7, #132]
 6009 0520 F868     		ldr	r0, [r7, #12]
 6010 0522 FFF7FEFF 		bl	UTIL_LCD_FillRGBRect
 6011              	.L175:
1016:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 6012              		.loc 1 1016 27 discriminator 2
 6013 0526 D7F89430 		ldr	r3, [r7, #148]
 6014 052a 0133     		adds	r3, r3, #1
 6015 052c C7F89430 		str	r3, [r7, #148]
 6016              	.L165:
1016:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 6017              		.loc 1 1016 16 discriminator 1
 6018 0530 D7F89420 		ldr	r2, [r7, #148]
 6019 0534 D7F88830 		ldr	r3, [r7, #136]
 6020 0538 9A42     		cmp	r2, r3
 6021 053a FFF498AD 		bcc	.L190
1101:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
1102:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
1103:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 6022              		.loc 1 1103 1
 6023 053e 00BF     		nop
 6024 0540 00BF     		nop
 6025 0542 9837     		adds	r7, r7, #152
 6026              		.cfi_def_cfa_offset 8
 6027 0544 BD46     		mov	sp, r7
 6028              		.cfi_def_cfa_register 13
 6029              		@ sp needed
 6030 0546 80BD     		pop	{r7, pc}
 6031              	.L195:
 6032              		.align	2
 6033              	.L194:
 6034 0548 00000000 		.word	DrawProp
 6035              		.cfi_endproc
 6036              	.LFE29:
 6038              		.section	.text.FillTriangle,"ax",%progbits
 6039              		.align	1
 6040              		.syntax unified
 6041              		.thumb
 6042              		.thumb_func
 6044              	FillTriangle:
 6045              	.LFB30:
1104:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
1105:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** /**
1106:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @brief  Fills a triangle (between 3 points).
1107:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Positions  pointer to riangle coordinates
1108:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   * @param  Color      Draw color
1109:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   */
ARM GAS  /tmp/ccK9mPCc.s 			page 186


1110:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** static void FillTriangle(Triangle_Positions_t *Positions, uint32_t Color)
1111:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** {
 6046              		.loc 1 1111 1
 6047              		.cfi_startproc
 6048              		@ args = 0, pretend = 0, frame = 48
 6049              		@ frame_needed = 1, uses_anonymous_args = 0
 6050 0000 90B5     		push	{r4, r7, lr}
 6051              		.cfi_def_cfa_offset 12
 6052              		.cfi_offset 4, -12
 6053              		.cfi_offset 7, -8
 6054              		.cfi_offset 14, -4
 6055 0002 8FB0     		sub	sp, sp, #60
 6056              		.cfi_def_cfa_offset 72
 6057 0004 02AF     		add	r7, sp, #8
 6058              		.cfi_def_cfa 7, 64
 6059 0006 7860     		str	r0, [r7, #4]
 6060 0008 3960     		str	r1, [r7]
1112:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 6061              		.loc 1 1112 11
 6062 000a 0023     		movs	r3, #0
 6063 000c 3B83     		strh	r3, [r7, #24]	@ movhi
 6064              		.loc 1 1112 23
 6065 000e 0023     		movs	r3, #0
 6066 0010 FB82     		strh	r3, [r7, #22]	@ movhi
 6067              		.loc 1 1112 35
 6068 0012 0023     		movs	r3, #0
 6069 0014 FB85     		strh	r3, [r7, #46]	@ movhi
 6070              		.loc 1 1112 42
 6071 0016 0023     		movs	r3, #0
 6072 0018 BB85     		strh	r3, [r7, #44]	@ movhi
 6073              		.loc 1 1112 49
 6074 001a 0023     		movs	r3, #0
 6075 001c 7B85     		strh	r3, [r7, #42]	@ movhi
 6076              		.loc 1 1112 60
 6077 001e 0023     		movs	r3, #0
 6078 0020 3B85     		strh	r3, [r7, #40]	@ movhi
1113:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 6079              		.loc 1 1113 3
 6080 0022 0023     		movs	r3, #0
 6081 0024 FB84     		strh	r3, [r7, #38]	@ movhi
 6082              		.loc 1 1113 14
 6083 0026 0023     		movs	r3, #0
 6084 0028 BB84     		strh	r3, [r7, #36]	@ movhi
 6085              		.loc 1 1113 25
 6086 002a 0023     		movs	r3, #0
 6087 002c 7B84     		strh	r3, [r7, #34]	@ movhi
 6088              		.loc 1 1113 34
 6089 002e 0023     		movs	r3, #0
 6090 0030 3B84     		strh	r3, [r7, #32]	@ movhi
 6091              		.loc 1 1113 43
 6092 0032 0023     		movs	r3, #0
 6093 0034 FB83     		strh	r3, [r7, #30]	@ movhi
 6094              		.loc 1 1113 55
 6095 0036 0023     		movs	r3, #0
 6096 0038 BB83     		strh	r3, [r7, #28]	@ movhi
1114:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   curpixel = 0;
 6097              		.loc 1 1114 3
ARM GAS  /tmp/ccK9mPCc.s 			page 187


 6098 003a 0023     		movs	r3, #0
 6099 003c 7B83     		strh	r3, [r7, #26]	@ movhi
1115:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   int32_t x_diff, y_diff;
1116:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
1117:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   x_diff = Positions->x2 - Positions->x1;
 6100              		.loc 1 1117 21
 6101 003e 7B68     		ldr	r3, [r7, #4]
 6102 0040 9A68     		ldr	r2, [r3, #8]
 6103              		.loc 1 1117 37
 6104 0042 7B68     		ldr	r3, [r7, #4]
 6105 0044 1B68     		ldr	r3, [r3]
 6106              		.loc 1 1117 26
 6107 0046 D31A     		subs	r3, r2, r3
 6108              		.loc 1 1117 10
 6109 0048 3B61     		str	r3, [r7, #16]
1118:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   y_diff = Positions->y2 - Positions->y1;
 6110              		.loc 1 1118 21
 6111 004a 7B68     		ldr	r3, [r7, #4]
 6112 004c DA68     		ldr	r2, [r3, #12]
 6113              		.loc 1 1118 37
 6114 004e 7B68     		ldr	r3, [r7, #4]
 6115 0050 5B68     		ldr	r3, [r3, #4]
 6116              		.loc 1 1118 26
 6117 0052 D31A     		subs	r3, r2, r3
 6118              		.loc 1 1118 10
 6119 0054 FB60     		str	r3, [r7, #12]
1119:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
1120:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   deltax = ABS(x_diff);         /* The absolute difference between the x's */
 6120              		.loc 1 1120 12
 6121 0056 3B69     		ldr	r3, [r7, #16]
 6122 0058 002B     		cmp	r3, #0
 6123 005a B8BF     		it	lt
 6124 005c 5B42     		rsblt	r3, r3, #0
 6125              		.loc 1 1120 10
 6126 005e 3B83     		strh	r3, [r7, #24]	@ movhi
1121:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   deltay = ABS(y_diff);         /* The absolute difference between the y's */
 6127              		.loc 1 1121 12
 6128 0060 FB68     		ldr	r3, [r7, #12]
 6129 0062 002B     		cmp	r3, #0
 6130 0064 B8BF     		it	lt
 6131 0066 5B42     		rsblt	r3, r3, #0
 6132              		.loc 1 1121 10
 6133 0068 FB82     		strh	r3, [r7, #22]	@ movhi
1122:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   x = Positions->x1;                       /* Start x off at the first pixel */
 6134              		.loc 1 1122 16
 6135 006a 7B68     		ldr	r3, [r7, #4]
 6136 006c 1B68     		ldr	r3, [r3]
 6137              		.loc 1 1122 5
 6138 006e FB85     		strh	r3, [r7, #46]	@ movhi
1123:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   y = Positions->y1;                       /* Start y off at the first pixel */
 6139              		.loc 1 1123 16
 6140 0070 7B68     		ldr	r3, [r7, #4]
 6141 0072 5B68     		ldr	r3, [r3, #4]
 6142              		.loc 1 1123 5
 6143 0074 BB85     		strh	r3, [r7, #44]	@ movhi
1124:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
1125:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   if (Positions->x2 >= Positions->x1)                 /* The x-values are increasing */
ARM GAS  /tmp/ccK9mPCc.s 			page 188


 6144              		.loc 1 1125 16
 6145 0076 7B68     		ldr	r3, [r7, #4]
 6146 0078 9A68     		ldr	r2, [r3, #8]
 6147              		.loc 1 1125 33
 6148 007a 7B68     		ldr	r3, [r7, #4]
 6149 007c 1B68     		ldr	r3, [r3]
 6150              		.loc 1 1125 6
 6151 007e 9A42     		cmp	r2, r3
 6152 0080 04D3     		bcc	.L197
1126:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
1127:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     xinc1 = 1;
 6153              		.loc 1 1127 11
 6154 0082 0123     		movs	r3, #1
 6155 0084 7B85     		strh	r3, [r7, #42]	@ movhi
1128:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     xinc2 = 1;
 6156              		.loc 1 1128 11
 6157 0086 0123     		movs	r3, #1
 6158 0088 3B85     		strh	r3, [r7, #40]	@ movhi
 6159 008a 05E0     		b	.L198
 6160              	.L197:
1129:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
1130:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   else                          /* The x-values are decreasing */
1131:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
1132:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     xinc1 = -1;
 6161              		.loc 1 1132 11
 6162 008c 4FF6FF73 		movw	r3, #65535
 6163 0090 7B85     		strh	r3, [r7, #42]	@ movhi
1133:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     xinc2 = -1;
 6164              		.loc 1 1133 11
 6165 0092 4FF6FF73 		movw	r3, #65535
 6166 0096 3B85     		strh	r3, [r7, #40]	@ movhi
 6167              	.L198:
1134:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
1135:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
1136:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   if (Positions->y2 >= Positions->y1)                 /* The y-values are increasing */
 6168              		.loc 1 1136 16
 6169 0098 7B68     		ldr	r3, [r7, #4]
 6170 009a DA68     		ldr	r2, [r3, #12]
 6171              		.loc 1 1136 33
 6172 009c 7B68     		ldr	r3, [r7, #4]
 6173 009e 5B68     		ldr	r3, [r3, #4]
 6174              		.loc 1 1136 6
 6175 00a0 9A42     		cmp	r2, r3
 6176 00a2 04D3     		bcc	.L199
1137:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
1138:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     yinc1 = 1;
 6177              		.loc 1 1138 11
 6178 00a4 0123     		movs	r3, #1
 6179 00a6 FB84     		strh	r3, [r7, #38]	@ movhi
1139:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     yinc2 = 1;
 6180              		.loc 1 1139 11
 6181 00a8 0123     		movs	r3, #1
 6182 00aa BB84     		strh	r3, [r7, #36]	@ movhi
 6183 00ac 05E0     		b	.L200
 6184              	.L199:
1140:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
1141:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   else                          /* The y-values are decreasing */
ARM GAS  /tmp/ccK9mPCc.s 			page 189


1142:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
1143:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     yinc1 = -1;
 6185              		.loc 1 1143 11
 6186 00ae 4FF6FF73 		movw	r3, #65535
 6187 00b2 FB84     		strh	r3, [r7, #38]	@ movhi
1144:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     yinc2 = -1;
 6188              		.loc 1 1144 11
 6189 00b4 4FF6FF73 		movw	r3, #65535
 6190 00b8 BB84     		strh	r3, [r7, #36]	@ movhi
 6191              	.L200:
1145:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
1146:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
1147:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 6192              		.loc 1 1147 6
 6193 00ba B7F91820 		ldrsh	r2, [r7, #24]
 6194 00be B7F91630 		ldrsh	r3, [r7, #22]
 6195 00c2 9A42     		cmp	r2, r3
 6196 00c4 10DB     		blt	.L201
1148:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
1149:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 6197              		.loc 1 1149 11
 6198 00c6 0023     		movs	r3, #0
 6199 00c8 7B85     		strh	r3, [r7, #42]	@ movhi
1150:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     yinc2 = 0;                  /* Don't change the y for every iteration */
 6200              		.loc 1 1150 11
 6201 00ca 0023     		movs	r3, #0
 6202 00cc BB84     		strh	r3, [r7, #36]	@ movhi
1151:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     den = deltax;
 6203              		.loc 1 1151 9
 6204 00ce 3B8B     		ldrh	r3, [r7, #24]	@ movhi
 6205 00d0 7B84     		strh	r3, [r7, #34]	@ movhi
1152:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     num = deltax / 2;
 6206              		.loc 1 1152 9
 6207 00d2 B7F91830 		ldrsh	r3, [r7, #24]
 6208 00d6 DA0F     		lsrs	r2, r3, #31
 6209 00d8 1344     		add	r3, r3, r2
 6210 00da 5B10     		asrs	r3, r3, #1
 6211 00dc 3B84     		strh	r3, [r7, #32]	@ movhi
1153:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     numadd = deltay;
 6212              		.loc 1 1153 12
 6213 00de FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6214 00e0 FB83     		strh	r3, [r7, #30]	@ movhi
1154:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     numpixels = deltax;         /* There are more x-values than y-values */
 6215              		.loc 1 1154 15
 6216 00e2 3B8B     		ldrh	r3, [r7, #24]	@ movhi
 6217 00e4 BB83     		strh	r3, [r7, #28]	@ movhi
 6218 00e6 0FE0     		b	.L202
 6219              	.L201:
1155:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
1156:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   else                          /* There is at least one y-value for every x-value */
1157:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
1158:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     xinc2 = 0;                  /* Don't change the x for every iteration */
 6220              		.loc 1 1158 11
 6221 00e8 0023     		movs	r3, #0
 6222 00ea 3B85     		strh	r3, [r7, #40]	@ movhi
1159:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 6223              		.loc 1 1159 11
ARM GAS  /tmp/ccK9mPCc.s 			page 190


 6224 00ec 0023     		movs	r3, #0
 6225 00ee FB84     		strh	r3, [r7, #38]	@ movhi
1160:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     den = deltay;
 6226              		.loc 1 1160 9
 6227 00f0 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6228 00f2 7B84     		strh	r3, [r7, #34]	@ movhi
1161:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     num = deltay / 2;
 6229              		.loc 1 1161 9
 6230 00f4 B7F91630 		ldrsh	r3, [r7, #22]
 6231 00f8 DA0F     		lsrs	r2, r3, #31
 6232 00fa 1344     		add	r3, r3, r2
 6233 00fc 5B10     		asrs	r3, r3, #1
 6234 00fe 3B84     		strh	r3, [r7, #32]	@ movhi
1162:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     numadd = deltax;
 6235              		.loc 1 1162 12
 6236 0100 3B8B     		ldrh	r3, [r7, #24]	@ movhi
 6237 0102 FB83     		strh	r3, [r7, #30]	@ movhi
1163:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     numpixels = deltay;         /* There are more y-values than x-values */
 6238              		.loc 1 1163 15
 6239 0104 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6240 0106 BB83     		strh	r3, [r7, #28]	@ movhi
 6241              	.L202:
1164:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
1165:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
1166:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   for (curpixel = 0; curpixel <= numpixels; curpixel++)
 6242              		.loc 1 1166 17
 6243 0108 0023     		movs	r3, #0
 6244 010a 7B83     		strh	r3, [r7, #26]	@ movhi
 6245              		.loc 1 1166 3
 6246 010c 36E0     		b	.L203
 6247              	.L205:
1167:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
1168:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     UTIL_LCD_DrawLine(x, y, Positions->x3, Positions->y3, Color);
 6248              		.loc 1 1168 5
 6249 010e B7F92E00 		ldrsh	r0, [r7, #46]
 6250 0112 B7F92C10 		ldrsh	r1, [r7, #44]
 6251 0116 7B68     		ldr	r3, [r7, #4]
 6252 0118 1A69     		ldr	r2, [r3, #16]
 6253 011a 7B68     		ldr	r3, [r7, #4]
 6254 011c 5C69     		ldr	r4, [r3, #20]
 6255 011e 3B68     		ldr	r3, [r7]
 6256 0120 0093     		str	r3, [sp]
 6257 0122 2346     		mov	r3, r4
 6258 0124 FFF7FEFF 		bl	UTIL_LCD_DrawLine
1169:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** 
1170:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     num += numadd;              /* Increase the numerator by the top of the fraction */
 6259              		.loc 1 1170 9
 6260 0128 3A8C     		ldrh	r2, [r7, #32]
 6261 012a FB8B     		ldrh	r3, [r7, #30]
 6262 012c 1344     		add	r3, r3, r2
 6263 012e 9BB2     		uxth	r3, r3
 6264 0130 3B84     		strh	r3, [r7, #32]	@ movhi
1171:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     if (num >= den)             /* Check if numerator >= denominator */
 6265              		.loc 1 1171 8
 6266 0132 B7F92020 		ldrsh	r2, [r7, #32]
 6267 0136 B7F92230 		ldrsh	r3, [r7, #34]
 6268 013a 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccK9mPCc.s 			page 191


 6269 013c 0EDB     		blt	.L204
1172:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     {
1173:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       num -= den;               /* Calculate the new numerator value */
 6270              		.loc 1 1173 11
 6271 013e 3A8C     		ldrh	r2, [r7, #32]
 6272 0140 7B8C     		ldrh	r3, [r7, #34]
 6273 0142 D31A     		subs	r3, r2, r3
 6274 0144 9BB2     		uxth	r3, r3
 6275 0146 3B84     		strh	r3, [r7, #32]	@ movhi
1174:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       x += xinc1;               /* Change the x as appropriate */
 6276              		.loc 1 1174 9
 6277 0148 FA8D     		ldrh	r2, [r7, #46]
 6278 014a 7B8D     		ldrh	r3, [r7, #42]
 6279 014c 1344     		add	r3, r3, r2
 6280 014e 9BB2     		uxth	r3, r3
 6281 0150 FB85     		strh	r3, [r7, #46]	@ movhi
1175:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****       y += yinc1;               /* Change the y as appropriate */
 6282              		.loc 1 1175 9
 6283 0152 BA8D     		ldrh	r2, [r7, #44]
 6284 0154 FB8C     		ldrh	r3, [r7, #38]
 6285 0156 1344     		add	r3, r3, r2
 6286 0158 9BB2     		uxth	r3, r3
 6287 015a BB85     		strh	r3, [r7, #44]	@ movhi
 6288              	.L204:
1176:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     }
1177:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     x += xinc2;                 /* Change the x as appropriate */
 6289              		.loc 1 1177 7
 6290 015c FA8D     		ldrh	r2, [r7, #46]
 6291 015e 3B8D     		ldrh	r3, [r7, #40]
 6292 0160 1344     		add	r3, r3, r2
 6293 0162 9BB2     		uxth	r3, r3
 6294 0164 FB85     		strh	r3, [r7, #46]	@ movhi
1178:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****     y += yinc2;                 /* Change the y as appropriate */
 6295              		.loc 1 1178 7
 6296 0166 BA8D     		ldrh	r2, [r7, #44]
 6297 0168 BB8C     		ldrh	r3, [r7, #36]
 6298 016a 1344     		add	r3, r3, r2
 6299 016c 9BB2     		uxth	r3, r3
 6300 016e BB85     		strh	r3, [r7, #44]	@ movhi
1166:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 6301              		.loc 1 1166 53 discriminator 2
 6302 0170 B7F91A30 		ldrsh	r3, [r7, #26]
 6303 0174 9BB2     		uxth	r3, r3
 6304 0176 0133     		adds	r3, r3, #1
 6305 0178 9BB2     		uxth	r3, r3
 6306 017a 7B83     		strh	r3, [r7, #26]	@ movhi
 6307              	.L203:
1166:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   {
 6308              		.loc 1 1166 31 discriminator 1
 6309 017c B7F91A20 		ldrsh	r2, [r7, #26]
 6310 0180 B7F91C30 		ldrsh	r3, [r7, #28]
 6311 0184 9A42     		cmp	r2, r3
 6312 0186 C2DD     		ble	.L205
1179:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c ****   }
1180:STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.c **** }
 6313              		.loc 1 1180 1
 6314 0188 00BF     		nop
ARM GAS  /tmp/ccK9mPCc.s 			page 192


 6315 018a 00BF     		nop
 6316 018c 3437     		adds	r7, r7, #52
 6317              		.cfi_def_cfa_offset 12
 6318 018e BD46     		mov	sp, r7
 6319              		.cfi_def_cfa_register 13
 6320              		@ sp needed
 6321 0190 90BD     		pop	{r4, r7, pc}
 6322              		.cfi_endproc
 6323              	.LFE30:
 6325              		.text
 6326              	.Letext0:
 6327              		.file 2 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 6328              		.file 3 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 6329              		.file 4 "STM32Cube_FW_N6/Utilities/lcd/../Fonts/fonts.h"
 6330              		.file 5 "STM32Cube_FW_N6/Drivers/BSP/Components/Common/lcd.h"
 6331              		.file 6 "STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.h"
 6332              		.file 7 "STM32Cube_FW_N6/Utilities/lcd/../Fonts/font24.c"
 6333              		.file 8 "STM32Cube_FW_N6/Utilities/lcd/../Fonts/font20.c"
 6334              		.file 9 "STM32Cube_FW_N6/Utilities/lcd/../Fonts/font16.c"
 6335              		.file 10 "STM32Cube_FW_N6/Utilities/lcd/../Fonts/font12.c"
 6336              		.file 11 "STM32Cube_FW_N6/Utilities/lcd/../Fonts/font8.c"
ARM GAS  /tmp/ccK9mPCc.s 			page 193


DEFINED SYMBOLS
                            *ABS*:00000000 stm32_lcd.c
     /tmp/ccK9mPCc.s:30     .rodata.Font24_Table:00000000 Font24_Table
     /tmp/ccK9mPCc.s:27     .rodata.Font24_Table:00000000 $d
     /tmp/ccK9mPCc.s:536    .data.Font24:00000000 Font24
     /tmp/ccK9mPCc.s:533    .data.Font24:00000000 $d
     /tmp/ccK9mPCc.s:545    .rodata.Font20_Table:00000000 Font20_Table
     /tmp/ccK9mPCc.s:542    .rodata.Font20_Table:00000000 $d
     /tmp/ccK9mPCc.s:813    .data.Font20:00000000 Font20
     /tmp/ccK9mPCc.s:810    .data.Font20:00000000 $d
     /tmp/ccK9mPCc.s:822    .rodata.Font16_Table:00000000 Font16_Table
     /tmp/ccK9mPCc.s:819    .rodata.Font16_Table:00000000 $d
     /tmp/ccK9mPCc.s:1040   .data.Font16:00000000 Font16
     /tmp/ccK9mPCc.s:1037   .data.Font16:00000000 $d
     /tmp/ccK9mPCc.s:1049   .rodata.Font12_Table:00000000 Font12_Table
     /tmp/ccK9mPCc.s:1046   .rodata.Font12_Table:00000000 $d
     /tmp/ccK9mPCc.s:1118   .data.Font12:00000000 Font12
     /tmp/ccK9mPCc.s:1115   .data.Font12:00000000 $d
     /tmp/ccK9mPCc.s:1127   .rodata.Font8_Table:00000000 Font8_Table
     /tmp/ccK9mPCc.s:1124   .rodata.Font8_Table:00000000 $d
     /tmp/ccK9mPCc.s:1170   .data.Font8:00000000 Font8
     /tmp/ccK9mPCc.s:1167   .data.Font8:00000000 $d
     /tmp/ccK9mPCc.s:1175   .bss.DrawProp:00000000 $d
     /tmp/ccK9mPCc.s:1178   .bss.DrawProp:00000000 DrawProp
     /tmp/ccK9mPCc.s:1181   .bss.FuncDriver:00000000 $d
     /tmp/ccK9mPCc.s:1184   .bss.FuncDriver:00000000 FuncDriver
     /tmp/ccK9mPCc.s:1187   .text.UTIL_LCD_SetFuncDriver:00000000 $t
     /tmp/ccK9mPCc.s:1193   .text.UTIL_LCD_SetFuncDriver:00000000 UTIL_LCD_SetFuncDriver
     /tmp/ccK9mPCc.s:1340   .text.UTIL_LCD_SetFuncDriver:000000bc $d
     /tmp/ccK9mPCc.s:1346   .text.UTIL_LCD_SetLayer:00000000 $t
     /tmp/ccK9mPCc.s:1352   .text.UTIL_LCD_SetLayer:00000000 UTIL_LCD_SetLayer
     /tmp/ccK9mPCc.s:1456   .text.UTIL_LCD_SetLayer:00000080 $d
     /tmp/ccK9mPCc.s:1462   .text.UTIL_LCD_SetDevice:00000000 $t
     /tmp/ccK9mPCc.s:1468   .text.UTIL_LCD_SetDevice:00000000 UTIL_LCD_SetDevice
     /tmp/ccK9mPCc.s:1516   .text.UTIL_LCD_SetDevice:00000030 $d
     /tmp/ccK9mPCc.s:1524   .text.UTIL_LCD_SetTextColor:00000000 $t
     /tmp/ccK9mPCc.s:1530   .text.UTIL_LCD_SetTextColor:00000000 UTIL_LCD_SetTextColor
     /tmp/ccK9mPCc.s:1568   .text.UTIL_LCD_SetTextColor:00000024 $d
     /tmp/ccK9mPCc.s:1573   .text.UTIL_LCD_GetTextColor:00000000 $t
     /tmp/ccK9mPCc.s:1579   .text.UTIL_LCD_GetTextColor:00000000 UTIL_LCD_GetTextColor
     /tmp/ccK9mPCc.s:1611   .text.UTIL_LCD_GetTextColor:0000001c $d
     /tmp/ccK9mPCc.s:1616   .text.UTIL_LCD_SetBackColor:00000000 $t
     /tmp/ccK9mPCc.s:1622   .text.UTIL_LCD_SetBackColor:00000000 UTIL_LCD_SetBackColor
     /tmp/ccK9mPCc.s:1661   .text.UTIL_LCD_SetBackColor:00000024 $d
     /tmp/ccK9mPCc.s:1666   .text.UTIL_LCD_GetBackColor:00000000 $t
     /tmp/ccK9mPCc.s:1672   .text.UTIL_LCD_GetBackColor:00000000 UTIL_LCD_GetBackColor
     /tmp/ccK9mPCc.s:1705   .text.UTIL_LCD_GetBackColor:0000001c $d
     /tmp/ccK9mPCc.s:1710   .text.UTIL_LCD_SetFont:00000000 $t
     /tmp/ccK9mPCc.s:1716   .text.UTIL_LCD_SetFont:00000000 UTIL_LCD_SetFont
     /tmp/ccK9mPCc.s:1755   .text.UTIL_LCD_SetFont:00000024 $d
     /tmp/ccK9mPCc.s:1760   .text.UTIL_LCD_GetFont:00000000 $t
     /tmp/ccK9mPCc.s:1766   .text.UTIL_LCD_GetFont:00000000 UTIL_LCD_GetFont
     /tmp/ccK9mPCc.s:1799   .text.UTIL_LCD_GetFont:0000001c $d
     /tmp/ccK9mPCc.s:1804   .text.UTIL_LCD_FillRGBRect:00000000 $t
     /tmp/ccK9mPCc.s:1810   .text.UTIL_LCD_FillRGBRect:00000000 UTIL_LCD_FillRGBRect
     /tmp/ccK9mPCc.s:1855   .text.UTIL_LCD_FillRGBRect:00000030 $d
     /tmp/ccK9mPCc.s:1861   .text.UTIL_LCD_DrawHLine:00000000 $t
ARM GAS  /tmp/ccK9mPCc.s 			page 194


     /tmp/ccK9mPCc.s:1867   .text.UTIL_LCD_DrawHLine:00000000 UTIL_LCD_DrawHLine
     /tmp/ccK9mPCc.s:2028   .text.UTIL_LCD_DrawHLine:000000e8 $d
     /tmp/ccK9mPCc.s:2034   .text.UTIL_LCD_DrawVLine:00000000 $t
     /tmp/ccK9mPCc.s:2040   .text.UTIL_LCD_DrawVLine:00000000 UTIL_LCD_DrawVLine
     /tmp/ccK9mPCc.s:2201   .text.UTIL_LCD_DrawVLine:000000e8 $d
     /tmp/ccK9mPCc.s:2207   .text.UTIL_LCD_GetPixel:00000000 $t
     /tmp/ccK9mPCc.s:2213   .text.UTIL_LCD_GetPixel:00000000 UTIL_LCD_GetPixel
     /tmp/ccK9mPCc.s:2383   .text.UTIL_LCD_GetPixel:00000114 $d
     /tmp/ccK9mPCc.s:2389   .text.UTIL_LCD_SetPixel:00000000 $t
     /tmp/ccK9mPCc.s:2395   .text.UTIL_LCD_SetPixel:00000000 UTIL_LCD_SetPixel
     /tmp/ccK9mPCc.s:2552   .text.UTIL_LCD_SetPixel:000000dc $d
     /tmp/ccK9mPCc.s:2558   .text.UTIL_LCD_Clear:00000000 $t
     /tmp/ccK9mPCc.s:2564   .text.UTIL_LCD_Clear:00000000 UTIL_LCD_Clear
     /tmp/ccK9mPCc.s:4298   .text.UTIL_LCD_FillRect:00000000 UTIL_LCD_FillRect
     /tmp/ccK9mPCc.s:2614   .text.UTIL_LCD_Clear:0000003c $d
     /tmp/ccK9mPCc.s:2619   .text.UTIL_LCD_ClearStringLine:00000000 $t
     /tmp/ccK9mPCc.s:2625   .text.UTIL_LCD_ClearStringLine:00000000 UTIL_LCD_ClearStringLine
     /tmp/ccK9mPCc.s:2702   .text.UTIL_LCD_ClearStringLine:00000060 $d
     /tmp/ccK9mPCc.s:2707   .text.UTIL_LCD_DisplayChar:00000000 $t
     /tmp/ccK9mPCc.s:2713   .text.UTIL_LCD_DisplayChar:00000000 UTIL_LCD_DisplayChar
     /tmp/ccK9mPCc.s:5274   .text.DrawChar:00000000 DrawChar
     /tmp/ccK9mPCc.s:2796   .text.UTIL_LCD_DisplayChar:00000068 $d
     /tmp/ccK9mPCc.s:2801   .text.UTIL_LCD_DisplayStringAt:00000000 $t
     /tmp/ccK9mPCc.s:2807   .text.UTIL_LCD_DisplayStringAt:00000000 UTIL_LCD_DisplayStringAt
     /tmp/ccK9mPCc.s:3071   .text.UTIL_LCD_DisplayStringAt:0000016c $d
     /tmp/ccK9mPCc.s:3076   .text.UTIL_LCD_DisplayStringAtLine:00000000 $t
     /tmp/ccK9mPCc.s:3082   .text.UTIL_LCD_DisplayStringAtLine:00000000 UTIL_LCD_DisplayStringAtLine
     /tmp/ccK9mPCc.s:3123   .text.UTIL_LCD_DrawLine:00000000 $t
     /tmp/ccK9mPCc.s:3129   .text.UTIL_LCD_DrawLine:00000000 UTIL_LCD_DrawLine
     /tmp/ccK9mPCc.s:3387   .text.UTIL_LCD_DrawRect:00000000 $t
     /tmp/ccK9mPCc.s:3393   .text.UTIL_LCD_DrawRect:00000000 UTIL_LCD_DrawRect
     /tmp/ccK9mPCc.s:3455   .text.UTIL_LCD_DrawCircle:00000000 $t
     /tmp/ccK9mPCc.s:3461   .text.UTIL_LCD_DrawCircle:00000000 UTIL_LCD_DrawCircle
     /tmp/ccK9mPCc.s:3875   .text.UTIL_LCD_DrawCircle:00000288 $d
     /tmp/ccK9mPCc.s:3880   .text.UTIL_LCD_DrawPolygon:00000000 $t
     /tmp/ccK9mPCc.s:3886   .text.UTIL_LCD_DrawPolygon:00000000 UTIL_LCD_DrawPolygon
     /tmp/ccK9mPCc.s:4007   .text.UTIL_LCD_DrawEllipse:00000000 $t
     /tmp/ccK9mPCc.s:4013   .text.UTIL_LCD_DrawEllipse:00000000 UTIL_LCD_DrawEllipse
     /tmp/ccK9mPCc.s:4240   .text.UTIL_LCD_DrawBitmap:00000000 $t
     /tmp/ccK9mPCc.s:4246   .text.UTIL_LCD_DrawBitmap:00000000 UTIL_LCD_DrawBitmap
     /tmp/ccK9mPCc.s:4286   .text.UTIL_LCD_DrawBitmap:00000024 $d
     /tmp/ccK9mPCc.s:4292   .text.UTIL_LCD_FillRect:00000000 $t
     /tmp/ccK9mPCc.s:4467   .text.UTIL_LCD_FillRect:000000f8 $d
     /tmp/ccK9mPCc.s:4473   .text.UTIL_LCD_FillCircle:00000000 $t
     /tmp/ccK9mPCc.s:4479   .text.UTIL_LCD_FillCircle:00000000 UTIL_LCD_FillCircle
     /tmp/ccK9mPCc.s:4707   .text.UTIL_LCD_FillPolygon:00000000 $t
     /tmp/ccK9mPCc.s:4713   .text.UTIL_LCD_FillPolygon:00000000 UTIL_LCD_FillPolygon
     /tmp/ccK9mPCc.s:6044   .text.FillTriangle:00000000 FillTriangle
     /tmp/ccK9mPCc.s:5066   .text.UTIL_LCD_FillEllipse:00000000 $t
     /tmp/ccK9mPCc.s:5072   .text.UTIL_LCD_FillEllipse:00000000 UTIL_LCD_FillEllipse
     /tmp/ccK9mPCc.s:5269   .text.DrawChar:00000000 $t
     /tmp/ccK9mPCc.s:5667   .text.DrawChar:0000029c $d
     /tmp/ccK9mPCc.s:5671   .text.DrawChar:000002a4 $t
     /tmp/ccK9mPCc.s:6034   .text.DrawChar:00000548 $d
     /tmp/ccK9mPCc.s:6039   .text.FillTriangle:00000000 $t
                           .group:00000000 wm4.0.2a10773746a5c5ebb5552f50e466f80b
                           .group:00000000 wm4._newlib_version.h.4.411db44ea2338a62eca2f0777f81481b
ARM GAS  /tmp/ccK9mPCc.s 			page 195


                           .group:00000000 wm4.features.h.33.e0c9f337c65cb9f22ed5f23d082bc78b
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.lcd.h.21.98701c105e66fef2e089854e5bc0fe32
                           .group:00000000 wm4.stddef.h.39.0dc9006b34572d4d9cae4c8b422c4971
                           .group:00000000 wm4.stm32_lcd.h.55.1a04e503950bf34ef3721d2ebb9542fc

NO UNDEFINED SYMBOLS
