ARM GAS  /tmp/ccsGrD0t.s 			page 1


   1              		.arch armv8.1-m.main
   2              		.fpu fpv5-d16
   3              		.arch_extension dsp
   4              		.arch_extension fp
   5              		.arch_extension fp.dp
   6              		.arch_extension mve
   7              		.arch_extension mve.fp
   8              		.eabi_attribute 5, "cortex-m55"
   9              		.eabi_attribute 28, 1
  10              		.eabi_attribute 20, 1
  11              		.eabi_attribute 21, 1
  12              		.eabi_attribute 23, 3
  13              		.eabi_attribute 24, 1
  14              		.eabi_attribute 25, 1
  15              		.eabi_attribute 26, 1
  16              		.eabi_attribute 30, 6
  17              		.eabi_attribute 34, 1
  18              		.eabi_attribute 38, 1
  19              		.eabi_attribute 18, 4
  20              		.file	"stm32n6xx_hal_pwr_ex.c"
  21              		.text
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.file 1 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c"
  25              		.section	.rodata
  26              		.align	2
  27              	.LC0:
  28 0000 53544D33 		.ascii	"STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/st"
  28      32437562 
  28      655F4657 
  28      5F4E362F 
  28      44726976 
  29 0033 6D33326E 		.ascii	"m32n6xx_hal_pwr_ex.c\000"
  29      3678785F 
  29      68616C5F 
  29      7077725F 
  29      65782E63 
  30              		.section	.text.HAL_PWREx_ConfigSupply,"ax",%progbits
  31              		.align	1
  32              		.global	HAL_PWREx_ConfigSupply
  33              		.syntax unified
  34              		.thumb
  35              		.thumb_func
  37              	HAL_PWREx_ConfigSupply:
  38              	.LFB835:
   1:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
   2:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   ******************************************************************************
   3:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @file    stm32n6xx_hal_pwr_ex.c
   4:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @author  MCD Application Team
   5:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief   Extended PWR HAL module driver.
   6:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *          This file provides firmware functions to manage the following
   7:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *          functionalities of the Power Controller extension peripheral :
   8:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *           + Power Supply Control Functions
   9:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *           + Low Power Control Functions
  10:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *           + Voltage Monitoring Functions
  11:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *           + Memories Retention Functions
  12:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *           + I/O Pull-Up Pull-Down Configuration Functions
ARM GAS  /tmp/ccsGrD0t.s 			page 2


  13:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   ******************************************************************************
  14:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @attention
  15:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *
  16:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * Copyright (c) 2023 STMicroelectronics.
  17:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * All rights reserved.
  18:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *
  19:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * This software is licensed under terms that can be found in the LICENSE file
  20:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * in the root directory of this software component.
  21:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  22:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *
  23:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   ******************************************************************************
  24:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   @verbatim
  25:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   ==============================================================================
  26:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****                         ##### How to use this driver #####
  27:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   ==============================================================================
  28:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   [..]
  29:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ConfigSupply() function to configure the regulator supply
  30:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        with the following different setups according to hardware:
  31:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        (+) PWR_SMPS_SUPPLY
  32:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        (+) PWR_EXTERNAL_SOURCE_SUPPLY
  33:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
  34:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetSupplyConfig() function to get the current supply setup.
  35:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
  36:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ControlVoltageScaling() function to configure the main
  37:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        internal regulator output voltage. The voltage scaling could be one of
  38:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        the following scales :
  39:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE0
  40:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE1
  41:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
  42:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetVoltageRange() function to get the current output
  43:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        voltage applied to the main regulator.
  44:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
  45:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ControlStopModeVoltageScaling() function to configure the main
  46:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        internal regulator output voltage in STOP mode. The voltage scaling could be one of
  47:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        the following scales :
  48:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_STOP_VOLTAGE_SCALE3
  49:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_STOP_VOLTAGE_SCALE5
  50:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
  51:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetStopModeVoltageRange() function to get the current output
  52:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        voltage applied to the main regulator in STOP mode.
  53:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
  54:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableWakeUpPin() functions to enable the Wake-up pin
  55:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        functionality for the selected pin.
  56:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
  57:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableBkupRAMRetention() and HAL_PWREx_DisableBkupRAMRetention()
  58:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        functions to enable and disable BKPSRAM retention in Standby mode.
  59:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
  60:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableTCMRetention() and HAL_PWREx_DisableTCMRetention() functions
  61:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        to enable and disable the I-TCM and D-TCM RAMs retention in Standby mode.
  62:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
  63:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableTCMFLXRetention() and HAL_PWREx_DisableTCMFLXRetention()
  64:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        functions to enable and disable the I-TCM FLEXMEM retention in Standby mode.
  65:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
  66:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_SetPulseLow() function to configure the minimum guaranteed
  67:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        duration of the pwr_on low pulse in Standby mode ( between ~ 0 -> 31 ms).
  68:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
  69:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetPulseLow() function to get the minimum guaranteed
ARM GAS  /tmp/ccsGrD0t.s 			page 3


  70:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        duration of the pwr_on low pulse in Standby mode.
  71:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
  72:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableTCMFLXRetention() and HAL_PWREx_DisableTCMFLXRetention()
  73:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        functions to enable and disable the I-TCM FLEXMEM retention in Standby mode.
  74:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
  75:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableSMPSPWM() and HAL_PWREx_DisableSMPSPWM() functions to
  76:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        enable and disable the SMPS low-power mode in Stop SVOS range 3.
  77:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
  78:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnablePullDownOutput() and HAL_PWREx_DisablePullDownOutput()
  79:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        functions to enable and disable the pull down on output voltage during
  80:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        power-down mode.
  81:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
  82:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableMonitoring() and HAL_PWREx_DisableMonitoring()
  83:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        functions to enable and disable the VBAT and Temperature monitoring.
  84:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        When VBAT and Temperature monitoring feature is enables, use
  85:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        HAL_PWREx_GetTemperatureLevel() and HAL_PWREx_GetVBATLevel() to get
  86:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        respectively the Temperature level and VBAT level.
  87:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
  88:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableVDDCOREMonitoring() and HAL_PWREx_EnableVDDCOREMonitoring()
  89:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        functions to enable and disable the VCORE monitoring.
  90:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        When VDDCORE monitoring feature is enables, use HAL_PWREx_GetVDDCORELevel()
  91:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        function to get the current VDDCORE level.
  92:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
  93:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ConfigVDDCORELevel() function to configure the VDDCORE
  94:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        voltage detector low-level selection.
  95:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
  96:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ConfigVddIORange() functions to configure the Vdd IO range:
  97:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        (+) PWR_VDDIO
  98:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        (+) PWR_VDDIO2
  99:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        (+) PWR_VDDIO3
 100:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        (+) PWR_VDDIO4
 101:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        (+) PWR_VDDIO5
 102:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        The voltage range setting could be one of the following values:
 103:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        (+) PWR_VDDIO_RANGE_3V3
 104:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        (+) PWR_VDDIO_RANGE_1V8
 105:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 106:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetVddIORange() function to get the current
 107:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        voltage range setting on the selected Vdd IO.
 108:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 109:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableVddIO4RangeSTBY() and HAL_PWREx_DisableVddIO4RangeSTBY()
 110:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        functions to enable and disable the VDD IO4 voltage range Standby mode.
 111:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 112:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableVddIO5RangeSTBY() and HAL_PWREx_DisableVddIO5RangeSTBY()
 113:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        functions to enable and disable the VDD IO5 voltage range Standby mode.
 114:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 115:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableVddUSB() and HAL_PWREx_DisableVddUSB()
 116:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        functions to enable and disable the VDD33USB supply valid.
 117:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 118:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableVddIO2() and HAL_PWREx_DisableVddIO2()
 119:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        functions to enable and disable the VDDIO2 supply valid.
 120:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 121:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableVddIO3() and HAL_PWREx_DisableVddIO3()
 122:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        functions to enable and disable the VDDIO3 supply valid.
 123:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 124:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableVddIO4() and HAL_PWREx_DisableVddIO4()
 125:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        functions to enable and disable the VDDIO4 supply valid.
 126:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/ccsGrD0t.s 			page 4


 127:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableVddIO5() and HAL_PWREx_DisableVddIO5()
 128:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        functions to enable and disable the VDDIO5 supply valid.
 129:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 130:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableVddA() and HAL_PWREx_DisableVddA()
 131:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        functions to enable and disable the VDDA18ADC supply valid.
 132:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 133:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ConfigPVM() after setting parameters to be configured
 134:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        (event mode and PVD type) in order to set up the Peripheral Voltage
 135:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        Monitor, then use HAL_PWREx_EnableVddUSBVMEN(), HAL_PWREx_EnableVddIO2VMEN(),
 136:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        HAL_PWREx_EnableVddIO3VMEN(), HAL_PWREx_EnableVddIO4VMEN(),
 137:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        HAL_PWREx_EnableVddIO5VMEN() and HAL_PWREx_EnableVddAVMEN() functions to
 138:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        start the PVM VDDx monitoring.
 139:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        Use HAL_PWREx_DisableVddUSBVMEN(), HAL_PWREx_DisableVddIO2VMEN(),
 140:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        HAL_PWREx_DisableVddIO3VMEN(), HAL_PWREx_DisableVddIO4VMEN(),
 141:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        HAL_PWREx_DisableVddIO5VMEN() and HAL_PWREx_DisableVddAVMEN() to stop
 142:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        the PVM VDDx monitoring.
 143:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        (+) PVM monitored voltages are :
 144:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****              (++) VDDUSB
 145:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****              (++) VDDIO2
 146:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****              (++) VDDIO3
 147:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****              (++) VDDIO4
 148:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****              (++) VDDIO5
 149:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****              (++) VDDA
 150:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 151:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_PVD_PVM_IRQHandler() function to handle the PWR PVD and
 152:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        PVM interrupt request.
 153:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 154:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   @endverbatim
 155:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   ******************************************************************************
 156:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 157:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 158:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /* Includes ------------------------------------------------------------------*/
 159:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** #include "stm32n6xx_hal.h"
 160:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 161:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /** @addtogroup STM32N6xx_HAL_Driver
 162:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @{
 163:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 164:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 165:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /** @defgroup PWREx PWREx
 166:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief    PWR Extended HAL module driver
 167:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @{
 168:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 169:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 170:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** #if defined (HAL_PWR_MODULE_ENABLED)
 171:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 172:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /* Private typedef -----------------------------------------------------------*/
 173:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /* Private define ------------------------------------------------------------*/
 174:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 175:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /** @defgroup PWREx_REG_SET_TIMEOUT PWR Extended Flag Setting Time Out Value
 176:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @{
 177:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 178:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** #define PWR_FLAG_SETTING_DELAY         (1000U)
 179:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 180:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @}
 181:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 182:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 183:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /** @defgroup PWREx_WakeUp_Pins_Offsets PWREx Wake-Up Pins masks and offsets
ARM GAS  /tmp/ccsGrD0t.s 			page 5


 184:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @{
 185:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 186:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /* Wake-Up Pins EXTI register mask */
 187:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** #define PWR_EXTI_WAKEUP_PINS_MASK      (EXTI_IMR2_IM60 | EXTI_IMR2_IM61 |\
 188:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****                                         EXTI_IMR2_IM62 | EXTI_IMR2_IM63 )
 189:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 190:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /* Wake-Up Pins PWR Pin Pull shift offsets */
 191:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** #define PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET (2U)
 192:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 193:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @}
 194:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 195:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 196:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /** @defgroup PWR_PVM_Mode_Mask PWR PVM Mode Mask
 197:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @{
 198:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 199:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** #define PVM_RISING_EDGE                (1U)                                    /*!< Mask for rising
 200:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** #define PVM_FALLING_EDGE               (2U)                                    /*!< Mask for fallin
 201:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** #define PVM_MODE_IT                    (4U)                                    /*!< Mask for interr
 202:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** #define PVM_MODE_EVT                   (8U)                                    /*!< Mask for event 
 203:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 204:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @}
 205:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 206:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 207:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /** @defgroup PWR_VDDCOREVM_Mode_Mask PWR VddCORE VM Mode Mask
 208:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @{
 209:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 210:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** #define VDDCOREVM_RISING_EDGE          (1U)                                    /*!< Mask for rising
 211:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** #define VDDCOREVM_FALLING_EDGE         (2U)                                    /*!< Mask for fallin
 212:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** #define VDDCOREVM_MODE_IT              (4U)                                    /*!< Mask for interr
 213:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** #define VDDCOREVM_MODE_EVT             (8U)                                    /*!< Mask for event 
 214:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 215:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @}
 216:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 217:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 218:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 219:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 220:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /* Private macro -------------------------------------------------------------*/
 221:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /* Private variables ---------------------------------------------------------*/
 222:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /* Private function prototypes -----------------------------------------------*/
 223:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /* Exported functions --------------------------------------------------------*/
 224:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 225:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions PWR Extended Exported Functions
 226:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @{
 227:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 228:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 229:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group1 Power Supply Control Functions
 230:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief    Power supply control functions
 231:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *
 232:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** @verbatim
 233:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****  ===============================================================================
 234:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****                   ##### Power supply control functions #####
 235:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****  ===============================================================================
 236:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     [..]
 237:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        This section provides functions allowing to control power supply.
 238:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 239:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (+) The STM32N6 series devices allows two different supply configurations:
 240:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        Direct SMPS supply and external supply.
ARM GAS  /tmp/ccsGrD0t.s 			page 6


 241:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 242:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    (#) After a system reset, the software must configure the used supply configuration
 243:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        in PWR_CR1 using  HAL_PWREx_ConfigSupply() function before changing VOS in PWR_VOSCR,
 244:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        or the RCC sys_ck frequency.
 245:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 246:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** @endverbatim
 247:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @{
 248:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 249:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 250:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 251:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief Configure the system Power Supply.
 252:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @param  SupplySource : Specifies the Power Supply source to set after a
 253:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *                        system startup.
 254:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values :
 255:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *            @arg @ref PWR_SMPS_SUPPLY            : VCORE power domains are supplied
 256:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *                                                   from SMPS step-down converter
 257:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *                                                   according to VOS.
 258:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *            @arg @ref PWR_EXTERNAL_SOURCE_SUPPLY : VCORE supplied from external source.
 259:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *                                                   SMPS step-down converter disabled.
 260:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note: The power supply configuration can be written only one time after POR.
 261:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note: The power supply configuration is not reset by wakeup from Standby mode and
 262:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *        application reset, but only reset by VDD POR.
 263:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval HAL status.
 264:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 265:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
 266:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
  39              		.loc 1 266 1
  40              		.cfi_startproc
  41              		@ args = 0, pretend = 0, frame = 16
  42              		@ frame_needed = 1, uses_anonymous_args = 0
  43 0000 80B5     		push	{r7, lr}
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 84B0     		sub	sp, sp, #16
  48              		.cfi_def_cfa_offset 24
  49 0004 00AF     		add	r7, sp, #0
  50              		.cfi_def_cfa_register 7
  51 0006 7860     		str	r0, [r7, #4]
 267:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   uint32_t tickstart;
 268:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 269:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check the parameters */
 270:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   assert_param(IS_PWR_SUPPLY(SupplySource));
  52              		.loc 1 270 3
  53 0008 7B68     		ldr	r3, [r7, #4]
  54 000a 042B     		cmp	r3, #4
  55 000c 07D0     		beq	.L2
  56              		.loc 1 270 3 is_stmt 0 discriminator 1
  57 000e 7B68     		ldr	r3, [r7, #4]
  58 0010 002B     		cmp	r3, #0
  59 0012 04D0     		beq	.L2
  60              		.loc 1 270 3 discriminator 2
  61 0014 4FF48771 		mov	r1, #270
  62 0018 1148     		ldr	r0, .L6
  63 001a FFF7FEFF 		bl	assert_failed
  64              	.L2:
 271:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/ccsGrD0t.s 			page 7


 272:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Set the power supply configuration */
 273:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->CR1, PWR_SUPPLY_CONFIG_MASK, SupplySource);
  65              		.loc 1 273 3 is_stmt 1
  66 001e 114B     		ldr	r3, .L6+4
  67 0020 1B68     		ldr	r3, [r3]
  68 0022 23F00402 		bic	r2, r3, #4
  69 0026 0F49     		ldr	r1, .L6+4
  70 0028 7B68     		ldr	r3, [r7, #4]
  71 002a 1343     		orrs	r3, r3, r2
  72 002c 0B60     		str	r3, [r1]
 274:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 275:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Get tick */
 276:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick();
  73              		.loc 1 276 15
  74 002e FFF7FEFF 		bl	HAL_GetTick
  75 0032 F860     		str	r0, [r7, #12]
 277:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 278:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Wait till voltage level flag is set */
 279:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
  76              		.loc 1 279 9
  77 0034 09E0     		b	.L3
  78              	.L5:
 280:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
 281:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
  79              		.loc 1 281 10
  80 0036 FFF7FEFF 		bl	HAL_GetTick
  81 003a 0246     		mov	r2, r0
  82              		.loc 1 281 24 discriminator 1
  83 003c FB68     		ldr	r3, [r7, #12]
  84 003e D31A     		subs	r3, r2, r3
  85              		.loc 1 281 8 discriminator 1
  86 0040 B3F57A7F 		cmp	r3, #1000
  87 0044 01D9     		bls	.L3
 282:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     {
 283:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       return HAL_ERROR;
  88              		.loc 1 283 14
  89 0046 0123     		movs	r3, #1
  90 0048 06E0     		b	.L4
  91              	.L3:
 279:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
  92              		.loc 1 279 14
  93 004a 064B     		ldr	r3, .L6+4
  94 004c 1B6A     		ldr	r3, [r3, #32]
 279:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
  95              		.loc 1 279 22
  96 004e 03F40033 		and	r3, r3, #131072
 279:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
  97              		.loc 1 279 45
  98 0052 002B     		cmp	r3, #0
  99 0054 EFD0     		beq	.L5
 284:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     }
 285:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
 286:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 287:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   return HAL_OK;
 100              		.loc 1 287 10
 101 0056 0023     		movs	r3, #0
 102              	.L4:
ARM GAS  /tmp/ccsGrD0t.s 			page 8


 288:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 103              		.loc 1 288 1
 104 0058 1846     		mov	r0, r3
 105 005a 1037     		adds	r7, r7, #16
 106              		.cfi_def_cfa_offset 8
 107 005c BD46     		mov	sp, r7
 108              		.cfi_def_cfa_register 13
 109              		@ sp needed
 110 005e 80BD     		pop	{r7, pc}
 111              	.L7:
 112              		.align	2
 113              	.L6:
 114 0060 00000000 		.word	.LC0
 115 0064 00480256 		.word	1442990080
 116              		.cfi_endproc
 117              	.LFE835:
 119              		.section	.text.HAL_PWREx_GetSupplyConfig,"ax",%progbits
 120              		.align	1
 121              		.global	HAL_PWREx_GetSupplyConfig
 122              		.syntax unified
 123              		.thumb
 124              		.thumb_func
 126              	HAL_PWREx_GetSupplyConfig:
 127              	.LFB836:
 289:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 290:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 291:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief Get the power supply configuration.
 292:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval The supply configuration.
 293:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 294:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetSupplyConfig(void)
 295:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 128              		.loc 1 295 1
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 1, uses_anonymous_args = 0
 132              		@ link register save eliminated.
 133 0000 80B4     		push	{r7}
 134              		.cfi_def_cfa_offset 4
 135              		.cfi_offset 7, -4
 136 0002 00AF     		add	r7, sp, #0
 137              		.cfi_def_cfa_register 7
 296:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   return (PWR->CR1 & PWR_SUPPLY_CONFIG_MASK);
 138              		.loc 1 296 14
 139 0004 044B     		ldr	r3, .L10
 140 0006 1B68     		ldr	r3, [r3]
 141              		.loc 1 296 20
 142 0008 03F00403 		and	r3, r3, #4
 297:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 143              		.loc 1 297 1
 144 000c 1846     		mov	r0, r3
 145 000e BD46     		mov	sp, r7
 146              		.cfi_def_cfa_register 13
 147              		@ sp needed
 148 0010 5DF8047B 		ldr	r7, [sp], #4
 149              		.cfi_restore 7
 150              		.cfi_def_cfa_offset 0
 151 0014 7047     		bx	lr
ARM GAS  /tmp/ccsGrD0t.s 			page 9


 152              	.L11:
 153 0016 00BF     		.align	2
 154              	.L10:
 155 0018 00480256 		.word	1442990080
 156              		.cfi_endproc
 157              	.LFE836:
 159              		.section	.text.HAL_PWREx_ControlVoltageScaling,"ax",%progbits
 160              		.align	1
 161              		.global	HAL_PWREx_ControlVoltageScaling
 162              		.syntax unified
 163              		.thumb
 164              		.thumb_func
 166              	HAL_PWREx_ControlVoltageScaling:
 167              	.LFB837:
 298:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 299:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 300:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief Configure the main internal regulator output voltage.
 301:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @param  VoltageScaling : Specifies the regulator output voltage to achieve
 302:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *                          a tradeoff between performance and power
 303:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *                          consumption.
 304:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values :
 305:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE0 : Regulator voltage scaling range 0 (highest frequ
 306:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE1 : Regulator voltage scaling range 1 (lowest power)
 307:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note After reset, the system starts from HSI with VOS low.
 308:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note When increasing the performance, the voltage scaling must be changed
 309:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *       before increasing the system frequency.
 310:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *       When decreasing performance, the system frequency must first be decreased
 311:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *       before changing the voltage scaling.
 312:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note When exiting from Stop mode or Standby mode, the Run mode voltage
 313:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *       scaling is reset to the default VOS low value.
 314:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval HAL Status
 315:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 316:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
 317:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 168              		.loc 1 317 1
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 16
 171              		@ frame_needed = 1, uses_anonymous_args = 0
 172 0000 80B5     		push	{r7, lr}
 173              		.cfi_def_cfa_offset 8
 174              		.cfi_offset 7, -8
 175              		.cfi_offset 14, -4
 176 0002 84B0     		sub	sp, sp, #16
 177              		.cfi_def_cfa_offset 24
 178 0004 00AF     		add	r7, sp, #0
 179              		.cfi_def_cfa_register 7
 180 0006 7860     		str	r0, [r7, #4]
 318:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   uint32_t tickstart;
 319:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 320:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check the parameters */
 321:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   assert_param(IS_PWR_REGULATOR_VOLTAGE(VoltageScaling));
 181              		.loc 1 321 3
 182 0008 7B68     		ldr	r3, [r7, #4]
 183 000a 012B     		cmp	r3, #1
 184 000c 07D0     		beq	.L13
 185              		.loc 1 321 3 is_stmt 0 discriminator 1
 186 000e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccsGrD0t.s 			page 10


 187 0010 002B     		cmp	r3, #0
 188 0012 04D0     		beq	.L13
 189              		.loc 1 321 3 discriminator 2
 190 0014 40F24111 		movw	r1, #321
 191 0018 1148     		ldr	r0, .L17
 192 001a FFF7FEFF 		bl	assert_failed
 193              	.L13:
 322:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 323:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Set the voltage range */
 324:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->VOSCR, PWR_VOSCR_VOS, VoltageScaling);
 194              		.loc 1 324 3 is_stmt 1
 195 001e 114B     		ldr	r3, .L17+4
 196 0020 1B6A     		ldr	r3, [r3, #32]
 197 0022 23F00102 		bic	r2, r3, #1
 198 0026 0F49     		ldr	r1, .L17+4
 199 0028 7B68     		ldr	r3, [r7, #4]
 200 002a 1343     		orrs	r3, r3, r2
 201 002c 0B62     		str	r3, [r1, #32]
 325:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 326:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Get tick */
 327:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick();
 202              		.loc 1 327 15
 203 002e FFF7FEFF 		bl	HAL_GetTick
 204 0032 F860     		str	r0, [r7, #12]
 328:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 329:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Wait till voltage level flag is set */
 330:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   while ((PWR->VOSCR & PWR_VOSCR_VOSRDY) == 0U)
 205              		.loc 1 330 9
 206 0034 09E0     		b	.L14
 207              	.L16:
 331:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
 332:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 208              		.loc 1 332 10
 209 0036 FFF7FEFF 		bl	HAL_GetTick
 210 003a 0246     		mov	r2, r0
 211              		.loc 1 332 24 discriminator 1
 212 003c FB68     		ldr	r3, [r7, #12]
 213 003e D31A     		subs	r3, r2, r3
 214              		.loc 1 332 8 discriminator 1
 215 0040 B3F57A7F 		cmp	r3, #1000
 216 0044 01D9     		bls	.L14
 333:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     {
 334:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       return HAL_ERROR;
 217              		.loc 1 334 14
 218 0046 0123     		movs	r3, #1
 219 0048 06E0     		b	.L15
 220              	.L14:
 330:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
 221              		.loc 1 330 14
 222 004a 064B     		ldr	r3, .L17+4
 223 004c 1B6A     		ldr	r3, [r3, #32]
 330:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
 224              		.loc 1 330 22
 225 004e 03F00203 		and	r3, r3, #2
 330:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
 226              		.loc 1 330 42
 227 0052 002B     		cmp	r3, #0
ARM GAS  /tmp/ccsGrD0t.s 			page 11


 228 0054 EFD0     		beq	.L16
 335:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     }
 336:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
 337:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 338:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   return HAL_OK;
 229              		.loc 1 338 10
 230 0056 0023     		movs	r3, #0
 231              	.L15:
 339:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 232              		.loc 1 339 1
 233 0058 1846     		mov	r0, r3
 234 005a 1037     		adds	r7, r7, #16
 235              		.cfi_def_cfa_offset 8
 236 005c BD46     		mov	sp, r7
 237              		.cfi_def_cfa_register 13
 238              		@ sp needed
 239 005e 80BD     		pop	{r7, pc}
 240              	.L18:
 241              		.align	2
 242              	.L17:
 243 0060 00000000 		.word	.LC0
 244 0064 00480256 		.word	1442990080
 245              		.cfi_endproc
 246              	.LFE837:
 248              		.section	.text.HAL_PWREx_GetVoltageRange,"ax",%progbits
 249              		.align	1
 250              		.global	HAL_PWREx_GetVoltageRange
 251              		.syntax unified
 252              		.thumb
 253              		.thumb_func
 255              	HAL_PWREx_GetVoltageRange:
 256              	.LFB838:
 340:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 341:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 342:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief Get the main internal regulator output voltage. Reflecting the last
 343:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *        VOS value applied to the PMU.
 344:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval The current applied VOS selection.
 345:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 346:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetVoltageRange(void)
 347:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 257              		.loc 1 347 1
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 1, uses_anonymous_args = 0
 261              		@ link register save eliminated.
 262 0000 80B4     		push	{r7}
 263              		.cfi_def_cfa_offset 4
 264              		.cfi_offset 7, -4
 265 0002 00AF     		add	r7, sp, #0
 266              		.cfi_def_cfa_register 7
 348:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Get the active voltage scaling */
 349:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   return ((PWR->VOSCR & PWR_VOSCR_ACTVOS) >> PWR_VOSCR_ACTVOS_Pos);
 267              		.loc 1 349 15
 268 0004 044B     		ldr	r3, .L21
 269 0006 1B6A     		ldr	r3, [r3, #32]
 270              		.loc 1 349 43
 271 0008 1B0C     		lsrs	r3, r3, #16
ARM GAS  /tmp/ccsGrD0t.s 			page 12


 272 000a 03F00103 		and	r3, r3, #1
 350:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 273              		.loc 1 350 1
 274 000e 1846     		mov	r0, r3
 275 0010 BD46     		mov	sp, r7
 276              		.cfi_def_cfa_register 13
 277              		@ sp needed
 278 0012 5DF8047B 		ldr	r7, [sp], #4
 279              		.cfi_restore 7
 280              		.cfi_def_cfa_offset 0
 281 0016 7047     		bx	lr
 282              	.L22:
 283              		.align	2
 284              	.L21:
 285 0018 00480256 		.word	1442990080
 286              		.cfi_endproc
 287              	.LFE838:
 289              		.section	.text.HAL_PWREx_ControlStopModeVoltageScaling,"ax",%progbits
 290              		.align	1
 291              		.global	HAL_PWREx_ControlStopModeVoltageScaling
 292              		.syntax unified
 293              		.thumb
 294              		.thumb_func
 296              	HAL_PWREx_ControlStopModeVoltageScaling:
 297              	.LFB839:
 351:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 352:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 353:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief Configure the main internal regulator output voltage in STOP mode.
 354:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @param  VoltageScaling : Specifies the regulator output voltage when the
 355:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *         system enters Stop mode to achieve a tradeoff between performance
 356:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *         and power consumption.
 357:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 358:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_STOP_VOLTAGE_SCALE3 : System Stop mode voltage scaling range 3 (h
 359:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_STOP_VOLTAGE_SCALE5 : System Stop mode voltage scaling range 5 (l
 360:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
 361:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 362:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_ControlStopModeVoltageScaling(uint32_t VoltageScaling)
 363:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 298              		.loc 1 363 1
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 8
 301              		@ frame_needed = 1, uses_anonymous_args = 0
 302 0000 80B5     		push	{r7, lr}
 303              		.cfi_def_cfa_offset 8
 304              		.cfi_offset 7, -8
 305              		.cfi_offset 14, -4
 306 0002 82B0     		sub	sp, sp, #8
 307              		.cfi_def_cfa_offset 16
 308 0004 00AF     		add	r7, sp, #0
 309              		.cfi_def_cfa_register 7
 310 0006 7860     		str	r0, [r7, #4]
 364:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check the parameters */
 365:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   assert_param(IS_PWR_STOP_MODE_REGULATOR_VOLTAGE(VoltageScaling));
 311              		.loc 1 365 3
 312 0008 7B68     		ldr	r3, [r7, #4]
 313 000a B3F5803F 		cmp	r3, #65536
 314 000e 07D0     		beq	.L24
ARM GAS  /tmp/ccsGrD0t.s 			page 13


 315              		.loc 1 365 3 is_stmt 0 discriminator 1
 316 0010 7B68     		ldr	r3, [r7, #4]
 317 0012 002B     		cmp	r3, #0
 318 0014 04D0     		beq	.L24
 319              		.loc 1 365 3 discriminator 2
 320 0016 40F26D11 		movw	r1, #365
 321 001a 0748     		ldr	r0, .L25
 322 001c FFF7FEFF 		bl	assert_failed
 323              	.L24:
 366:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 367:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Return the stop mode voltage range */
 368:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->CPUCR, PWR_CPUCR_SVOS, VoltageScaling);
 324              		.loc 1 368 3 is_stmt 1
 325 0020 064B     		ldr	r3, .L25+4
 326 0022 1B6B     		ldr	r3, [r3, #48]
 327 0024 23F48032 		bic	r2, r3, #65536
 328 0028 0449     		ldr	r1, .L25+4
 329 002a 7B68     		ldr	r3, [r7, #4]
 330 002c 1343     		orrs	r3, r3, r2
 331 002e 0B63     		str	r3, [r1, #48]
 369:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 332              		.loc 1 369 1
 333 0030 00BF     		nop
 334 0032 0837     		adds	r7, r7, #8
 335              		.cfi_def_cfa_offset 8
 336 0034 BD46     		mov	sp, r7
 337              		.cfi_def_cfa_register 13
 338              		@ sp needed
 339 0036 80BD     		pop	{r7, pc}
 340              	.L26:
 341              		.align	2
 342              	.L25:
 343 0038 00000000 		.word	.LC0
 344 003c 00480256 		.word	1442990080
 345              		.cfi_endproc
 346              	.LFE839:
 348              		.section	.text.HAL_PWREx_GetStopModeVoltageRange,"ax",%progbits
 349              		.align	1
 350              		.global	HAL_PWREx_GetStopModeVoltageRange
 351              		.syntax unified
 352              		.thumb
 353              		.thumb_func
 355              	HAL_PWREx_GetStopModeVoltageRange:
 356              	.LFB840:
 370:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 371:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 372:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief Get the main internal regulator output voltage in STOP mode.
 373:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval The actual applied SVOS selection.
 374:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 375:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetStopModeVoltageRange(void)
 376:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 357              		.loc 1 376 1
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 0
 360              		@ frame_needed = 1, uses_anonymous_args = 0
 361              		@ link register save eliminated.
 362 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccsGrD0t.s 			page 14


 363              		.cfi_def_cfa_offset 4
 364              		.cfi_offset 7, -4
 365 0002 00AF     		add	r7, sp, #0
 366              		.cfi_def_cfa_register 7
 377:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Return the stop voltage scaling */
 378:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   return (PWR->CPUCR & PWR_CPUCR_SVOS);
 367              		.loc 1 378 14
 368 0004 044B     		ldr	r3, .L29
 369 0006 1B6B     		ldr	r3, [r3, #48]
 370              		.loc 1 378 22
 371 0008 03F48033 		and	r3, r3, #65536
 379:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 372              		.loc 1 379 1
 373 000c 1846     		mov	r0, r3
 374 000e BD46     		mov	sp, r7
 375              		.cfi_def_cfa_register 13
 376              		@ sp needed
 377 0010 5DF8047B 		ldr	r7, [sp], #4
 378              		.cfi_restore 7
 379              		.cfi_def_cfa_offset 0
 380 0014 7047     		bx	lr
 381              	.L30:
 382 0016 00BF     		.align	2
 383              	.L29:
 384 0018 00480256 		.word	1442990080
 385              		.cfi_endproc
 386              	.LFE840:
 388              		.section	.text.HAL_PWREx_EnableWakeUpPin,"ax",%progbits
 389              		.align	1
 390              		.global	HAL_PWREx_EnableWakeUpPin
 391              		.syntax unified
 392              		.thumb
 393              		.thumb_func
 395              	HAL_PWREx_EnableWakeUpPin:
 396              	.LFB841:
 380:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 381:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @}
 382:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 383:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 384:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group2 Wakeup Pins configuration functions
 385:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief     Wakeup Pins configuration functions
 386:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *
 387:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** @verbatim
 388:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****  ===============================================================================
 389:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****                      ##### Wakeup Pins configuration functions #####
 390:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****  ===============================================================================
 391:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     [..]
 392:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 393:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     *** Wakeup Pins configuration ****
 394:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     ===================================
 395:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     [..]
 396:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       Wakeup pins allow the system to exit from Standby mode. The configuration
 397:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       of wakeup pins is done with the HAL_PWREx_EnableWakeUpPin(sPinParams)
 398:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       function with:
 399:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****        (+) sPinParams: structure to enable and configure a wakeup pin:
 400:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         (++) WakeUpPin: Wakeup pin to be enabled.
 401:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         (++) PinPolarity: Wakeup pin polarity (rising or falling edge).
ARM GAS  /tmp/ccsGrD0t.s 			page 15


 402:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         (++) PinPull: Wakeup pin pull (no pull, pull-up or pull-down).
 403:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     [..]
 404:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       The wakeup pins are internally connected to the EXTI lines [60-63] to
 405:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       generate an interrupt if enabled.
 406:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     [..]
 407:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       When a wakeup pin event is received the HAL_PWR_WAKEUP_PIN_IRQHandler is
 408:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       called and the appropriate flag is set in the PWR_WKUPSR register. Then in
 409:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       the HAL_PWR_WAKEUP_PIN_IRQHandler function the wakeup pin flag will be
 410:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       cleared and the appropriate user callback will be called. The user can add
 411:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       his own code by customization of function pointer HAL_PWR_WKUPx_Callback.
 412:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 413:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** @endverbatim
 414:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @{
 415:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 416:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 417:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief Enable the Wake-up PINx functionality.
 418:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @param  sPinParams : Pointer to a PWREx_WakeupPinTypeDef structure that
 419:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *                      contains the configuration information for the wake-up
 420:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *                      Pin.
 421:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
 422:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 423:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableWakeUpPin(const PWREx_WakeupPinTypeDef *sPinParams)
 424:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 397              		.loc 1 424 1
 398              		.cfi_startproc
 399              		@ args = 0, pretend = 0, frame = 72
 400              		@ frame_needed = 1, uses_anonymous_args = 0
 401 0000 80B5     		push	{r7, lr}
 402              		.cfi_def_cfa_offset 8
 403              		.cfi_offset 7, -8
 404              		.cfi_offset 14, -4
 405 0002 92B0     		sub	sp, sp, #72
 406              		.cfi_def_cfa_offset 80
 407 0004 00AF     		add	r7, sp, #0
 408              		.cfi_def_cfa_register 7
 409 0006 7860     		str	r0, [r7, #4]
 425:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   uint32_t pinConfig;
 426:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   uint32_t regMask;
 427:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   const uint32_t pullMask = PWR_WKUPEPR_WKUPPUPD1;
 410              		.loc 1 427 18
 411 0008 4FF44033 		mov	r3, #196608
 412 000c 7B64     		str	r3, [r7, #68]
 428:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 429:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check the parameters */
 430:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   assert_param(IS_PWR_WAKEUP_PIN(sPinParams->WakeUpPin));
 413              		.loc 1 430 3
 414 000e 7B68     		ldr	r3, [r7, #4]
 415 0010 1B68     		ldr	r3, [r3]
 416 0012 012B     		cmp	r3, #1
 417 0014 38D0     		beq	.L32
 418              		.loc 1 430 3 is_stmt 0 discriminator 1
 419 0016 7B68     		ldr	r3, [r7, #4]
 420 0018 1B68     		ldr	r3, [r3]
 421 001a 022B     		cmp	r3, #2
 422 001c 34D0     		beq	.L32
 423              		.loc 1 430 3 discriminator 2
 424 001e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccsGrD0t.s 			page 16


 425 0020 1B68     		ldr	r3, [r3]
 426 0022 042B     		cmp	r3, #4
 427 0024 30D0     		beq	.L32
 428              		.loc 1 430 3 discriminator 3
 429 0026 7B68     		ldr	r3, [r7, #4]
 430 0028 1B68     		ldr	r3, [r3]
 431 002a 082B     		cmp	r3, #8
 432 002c 2CD0     		beq	.L32
 433              		.loc 1 430 3 discriminator 4
 434 002e 7B68     		ldr	r3, [r7, #4]
 435 0030 1B68     		ldr	r3, [r3]
 436 0032 012B     		cmp	r3, #1
 437 0034 28D0     		beq	.L32
 438              		.loc 1 430 3 discriminator 5
 439 0036 7B68     		ldr	r3, [r7, #4]
 440 0038 1B68     		ldr	r3, [r3]
 441 003a 022B     		cmp	r3, #2
 442 003c 24D0     		beq	.L32
 443              		.loc 1 430 3 discriminator 6
 444 003e 7B68     		ldr	r3, [r7, #4]
 445 0040 1B68     		ldr	r3, [r3]
 446 0042 042B     		cmp	r3, #4
 447 0044 20D0     		beq	.L32
 448              		.loc 1 430 3 discriminator 7
 449 0046 7B68     		ldr	r3, [r7, #4]
 450 0048 1B68     		ldr	r3, [r3]
 451 004a 082B     		cmp	r3, #8
 452 004c 1CD0     		beq	.L32
 453              		.loc 1 430 3 discriminator 8
 454 004e 7B68     		ldr	r3, [r7, #4]
 455 0050 1B68     		ldr	r3, [r3]
 456 0052 40F20112 		movw	r2, #257
 457 0056 9342     		cmp	r3, r2
 458 0058 16D0     		beq	.L32
 459              		.loc 1 430 3 discriminator 9
 460 005a 7B68     		ldr	r3, [r7, #4]
 461 005c 1B68     		ldr	r3, [r3]
 462 005e 40F20222 		movw	r2, #514
 463 0062 9342     		cmp	r3, r2
 464 0064 10D0     		beq	.L32
 465              		.loc 1 430 3 discriminator 10
 466 0066 7B68     		ldr	r3, [r7, #4]
 467 0068 1B68     		ldr	r3, [r3]
 468 006a 40F20442 		movw	r2, #1028
 469 006e 9342     		cmp	r3, r2
 470 0070 0AD0     		beq	.L32
 471              		.loc 1 430 3 discriminator 11
 472 0072 7B68     		ldr	r3, [r7, #4]
 473 0074 1B68     		ldr	r3, [r3]
 474 0076 40F60802 		movw	r2, #2056
 475 007a 9342     		cmp	r3, r2
 476 007c 04D0     		beq	.L32
 477              		.loc 1 430 3 discriminator 12
 478 007e 4FF4D771 		mov	r1, #430
 479 0082 5348     		ldr	r0, .L47
 480 0084 FFF7FEFF 		bl	assert_failed
 481              	.L32:
ARM GAS  /tmp/ccsGrD0t.s 			page 17


 431:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   assert_param(IS_PWR_WAKEUP_PIN_POLARITY(sPinParams->PinPolarity));
 482              		.loc 1 431 3 is_stmt 1
 483 0088 7B68     		ldr	r3, [r7, #4]
 484 008a 5B68     		ldr	r3, [r3, #4]
 485 008c 002B     		cmp	r3, #0
 486 008e 08D0     		beq	.L33
 487              		.loc 1 431 3 is_stmt 0 discriminator 1
 488 0090 7B68     		ldr	r3, [r7, #4]
 489 0092 5B68     		ldr	r3, [r3, #4]
 490 0094 012B     		cmp	r3, #1
 491 0096 04D0     		beq	.L33
 492              		.loc 1 431 3 discriminator 2
 493 0098 40F2AF11 		movw	r1, #431
 494 009c 4C48     		ldr	r0, .L47
 495 009e FFF7FEFF 		bl	assert_failed
 496              	.L33:
 432:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   assert_param(IS_PWR_WAKEUP_PIN_PULL(sPinParams->PinPull));
 497              		.loc 1 432 3 is_stmt 1
 498 00a2 7B68     		ldr	r3, [r7, #4]
 499 00a4 9B68     		ldr	r3, [r3, #8]
 500 00a6 002B     		cmp	r3, #0
 501 00a8 0CD0     		beq	.L34
 502              		.loc 1 432 3 is_stmt 0 discriminator 1
 503 00aa 7B68     		ldr	r3, [r7, #4]
 504 00ac 9B68     		ldr	r3, [r3, #8]
 505 00ae 012B     		cmp	r3, #1
 506 00b0 08D0     		beq	.L34
 507              		.loc 1 432 3 discriminator 2
 508 00b2 7B68     		ldr	r3, [r7, #4]
 509 00b4 9B68     		ldr	r3, [r3, #8]
 510 00b6 022B     		cmp	r3, #2
 511 00b8 04D0     		beq	.L34
 512              		.loc 1 432 3 discriminator 3
 513 00ba 4FF4D871 		mov	r1, #432
 514 00be 4448     		ldr	r0, .L47
 515 00c0 FFF7FEFF 		bl	assert_failed
 516              	.L34:
 433:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 434:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   pinConfig = sPinParams->WakeUpPin | \
 517              		.loc 1 434 25 is_stmt 1
 518 00c4 7B68     		ldr	r3, [r7, #4]
 519 00c6 1A68     		ldr	r2, [r3]
 435:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
 520              		.loc 1 435 26
 521 00c8 7B68     		ldr	r3, [r7, #4]
 522 00ca 5968     		ldr	r1, [r3, #4]
 523              		.loc 1 435 45
 524 00cc 7B68     		ldr	r3, [r7, #4]
 525 00ce 1B68     		ldr	r3, [r3]
 526 00d0 3B61     		str	r3, [r7, #16]
 527              	.LBB18:
 528              	.LBB19:
 529              		.file 2 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h"
   1:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
ARM GAS  /tmp/ccsGrD0t.s 			page 18


   5:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
ARM GAS  /tmp/ccsGrD0t.s 			page 19


  62:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccsGrD0t.s 			page 20


 119:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccsGrD0t.s 			page 21


 176:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
ARM GAS  /tmp/ccsGrD0t.s 			page 22


 233:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
ARM GAS  /tmp/ccsGrD0t.s 			page 23


 290:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
ARM GAS  /tmp/ccsGrD0t.s 			page 24


 347:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 530              		.loc 2 380 4
 531 00d2 3B69     		ldr	r3, [r7, #16]
 532              		.syntax unified
 533              	@ 380 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 534 00d4 93FAA3F3 		rbit r3, r3
 535              	@ 0 "" 2
 536              		.thumb
 537              		.syntax unified
 538 00d8 FB60     		str	r3, [r7, #12]
 381:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 539              		.loc 2 393 10
ARM GAS  /tmp/ccsGrD0t.s 			page 25


 540 00da FB68     		ldr	r3, [r7, #12]
 541 00dc 7B61     		str	r3, [r7, #20]
 542              	.LBE19:
 543              	.LBE18:
 544              	.LBB20:
 545              	.LBB21:
 394:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 546              		.loc 2 414 6
 547 00de 7B69     		ldr	r3, [r7, #20]
 548 00e0 002B     		cmp	r3, #0
 549 00e2 01D1     		bne	.L36
 415:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 550              		.loc 2 416 12
 551 00e4 2023     		movs	r3, #32
 552 00e6 03E0     		b	.L37
 553              	.L36:
 417:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 554              		.loc 2 418 10
 555 00e8 7B69     		ldr	r3, [r7, #20]
 556 00ea B3FA83F3 		clz	r3, r3
 557              		.loc 2 418 10 is_stmt 0 discriminator 1
 558 00ee DBB2     		uxtb	r3, r3
 559              	.L37:
 560              	.LBE21:
 561              	.LBE20:
 562              		.loc 1 435 81 is_stmt 1 discriminator 2
 563 00f0 0833     		adds	r3, r3, #8
 564              		.loc 1 435 107 discriminator 2
 565 00f2 03F01F03 		and	r3, r3, #31
 566              		.loc 1 435 40 discriminator 2
 567 00f6 01FA03F3 		lsl	r3, r1, r3
 434:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
 568              		.loc 1 434 37
 569 00fa 1A43     		orrs	r2, r2, r3
 436:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****               (sPinParams->PinPull << (((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL
ARM GAS  /tmp/ccsGrD0t.s 			page 26


 570              		.loc 1 436 26
 571 00fc 7B68     		ldr	r3, [r7, #4]
 572 00fe 9968     		ldr	r1, [r3, #8]
 573              		.loc 1 436 42
 574 0100 7B68     		ldr	r3, [r7, #4]
 575 0102 1B68     		ldr	r3, [r3]
 576 0104 FB61     		str	r3, [r7, #28]
 577              	.LBB22:
 578              	.LBB23:
 380:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 579              		.loc 2 380 4
 580 0106 FB69     		ldr	r3, [r7, #28]
 581              		.syntax unified
 582              	@ 380 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 583 0108 93FAA3F3 		rbit r3, r3
 584              	@ 0 "" 2
 585              		.thumb
 586              		.syntax unified
 587 010c BB61     		str	r3, [r7, #24]
 393:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 588              		.loc 2 393 10
 589 010e BB69     		ldr	r3, [r7, #24]
 590 0110 3B62     		str	r3, [r7, #32]
 591              	.LBE23:
 592              	.LBE22:
 593              	.LBB24:
 594              	.LBB25:
 414:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 595              		.loc 2 414 6
 596 0112 3B6A     		ldr	r3, [r7, #32]
 597 0114 002B     		cmp	r3, #0
 598 0116 01D1     		bne	.L39
 416:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 599              		.loc 2 416 12
 600 0118 2023     		movs	r3, #32
 601 011a 03E0     		b	.L40
 602              	.L39:
 603              		.loc 2 418 10
 604 011c 3B6A     		ldr	r3, [r7, #32]
 605 011e B3FA83F3 		clz	r3, r3
 606              		.loc 2 418 10 is_stmt 0 discriminator 1
 607 0122 DBB2     		uxtb	r3, r3
 608              	.L40:
 609              	.LBE25:
 610              	.LBE24:
 611              		.loc 1 436 115 is_stmt 1 discriminator 2
 612 0124 0833     		adds	r3, r3, #8
 613 0126 5B00     		lsls	r3, r3, #1
 437:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****                                         PWR_WKUPEPR_WKUPPUPD1_Pos) & 0x1FU));
 614              		.loc 1 437 68
 615 0128 03F01E03 		and	r3, r3, #30
 436:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****                                         PWR_WKUPEPR_WKUPPUPD1_Pos) & 0x1FU));
 616              		.loc 1 436 36
 617 012c 01FA03F3 		lsl	r3, r1, r3
 434:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
 618              		.loc 1 434 13
 619 0130 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccsGrD0t.s 			page 27


 620 0132 3B64     		str	r3, [r7, #64]
 438:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 439:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   regMask   = sPinParams->WakeUpPin | \
 621              		.loc 1 439 25
 622 0134 7B68     		ldr	r3, [r7, #4]
 623 0136 1A68     		ldr	r2, [r3]
 440:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****               (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
 624              		.loc 1 440 39
 625 0138 7B68     		ldr	r3, [r7, #4]
 626 013a 1B68     		ldr	r3, [r3]
 627 013c BB62     		str	r3, [r7, #40]
 628              	.LBB26:
 629              	.LBB27:
 380:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 630              		.loc 2 380 4
 631 013e BB6A     		ldr	r3, [r7, #40]
 632              		.syntax unified
 633              	@ 380 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 634 0140 93FAA3F3 		rbit r3, r3
 635              	@ 0 "" 2
 636              		.thumb
 637              		.syntax unified
 638 0144 7B62     		str	r3, [r7, #36]
 393:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 639              		.loc 2 393 10
 640 0146 7B6A     		ldr	r3, [r7, #36]
 641 0148 FB62     		str	r3, [r7, #44]
 642              	.LBE27:
 643              	.LBE26:
 644              	.LBB28:
 645              	.LBB29:
 414:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 646              		.loc 2 414 6
 647 014a FB6A     		ldr	r3, [r7, #44]
 648 014c 002B     		cmp	r3, #0
 649 014e 01D1     		bne	.L42
 416:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 650              		.loc 2 416 12
 651 0150 2023     		movs	r3, #32
 652 0152 03E0     		b	.L43
 653              	.L42:
 654              		.loc 2 418 10
 655 0154 FB6A     		ldr	r3, [r7, #44]
 656 0156 B3FA83F3 		clz	r3, r3
 657              		.loc 2 418 10 is_stmt 0 discriminator 1
 658 015a DBB2     		uxtb	r3, r3
 659              	.L43:
 660              	.LBE29:
 661              	.LBE28:
 662              		.loc 1 440 75 is_stmt 1 discriminator 2
 663 015c 03F01F03 		and	r3, r3, #31
 664              		.loc 1 440 35 discriminator 2
 665 0160 4FF48071 		mov	r1, #256
 666 0164 01FA03F3 		lsl	r3, r1, r3
 439:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****               (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
 667              		.loc 1 439 37
 668 0168 1A43     		orrs	r2, r2, r3
ARM GAS  /tmp/ccsGrD0t.s 			page 28


 441:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****               (pullMask << ((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSE
 669              		.loc 1 441 30
 670 016a 7B68     		ldr	r3, [r7, #4]
 671 016c 1B68     		ldr	r3, [r3]
 672 016e 7B63     		str	r3, [r7, #52]
 673              	.LBB30:
 674              	.LBB31:
 380:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 675              		.loc 2 380 4
 676 0170 7B6B     		ldr	r3, [r7, #52]
 677              		.syntax unified
 678              	@ 380 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 679 0172 93FAA3F3 		rbit r3, r3
 680              	@ 0 "" 2
 681              		.thumb
 682              		.syntax unified
 683 0176 3B63     		str	r3, [r7, #48]
 393:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 684              		.loc 2 393 10
 685 0178 3B6B     		ldr	r3, [r7, #48]
 686 017a BB63     		str	r3, [r7, #56]
 687              	.LBE31:
 688              	.LBE30:
 689              	.LBB32:
 690              	.LBB33:
 414:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 691              		.loc 2 414 6
 692 017c BB6B     		ldr	r3, [r7, #56]
 693 017e 002B     		cmp	r3, #0
 694 0180 01D1     		bne	.L45
 416:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 695              		.loc 2 416 12
 696 0182 2023     		movs	r3, #32
 697 0184 03E0     		b	.L46
 698              	.L45:
 699              		.loc 2 418 10
 700 0186 BB6B     		ldr	r3, [r7, #56]
 701 0188 B3FA83F3 		clz	r3, r3
 702              		.loc 2 418 10 is_stmt 0 discriminator 1
 703 018c DBB2     		uxtb	r3, r3
 704              	.L46:
 705              	.LBE33:
 706              	.LBE32:
 707              		.loc 1 441 66 is_stmt 1 discriminator 2
 708 018e 5B00     		lsls	r3, r3, #1
 709              		.loc 1 441 103 discriminator 2
 710 0190 03F01E03 		and	r3, r3, #30
 711              		.loc 1 441 25 discriminator 2
 712 0194 796C     		ldr	r1, [r7, #68]
 713 0196 01FA03F3 		lsl	r3, r1, r3
 439:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****               (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
 714              		.loc 1 439 13
 715 019a 1343     		orrs	r3, r3, r2
 716 019c FB63     		str	r3, [r7, #60]
 442:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 443:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Enable and Specify the Wake-Up pin polarity and the pull configuration
 444:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****      for the event detection (rising or falling edge) */
ARM GAS  /tmp/ccsGrD0t.s 			page 29


 445:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->WKUPEPR, regMask, pinConfig);
 717              		.loc 1 445 3
 718 019e 0D4B     		ldr	r3, .L47+4
 719 01a0 9A6D     		ldr	r2, [r3, #88]
 720 01a2 FB6B     		ldr	r3, [r7, #60]
 721 01a4 DB43     		mvns	r3, r3
 722 01a6 1A40     		ands	r2, r2, r3
 723 01a8 0A49     		ldr	r1, .L47+4
 724 01aa 3B6C     		ldr	r3, [r7, #64]
 725 01ac 1343     		orrs	r3, r3, r2
 726 01ae 8B65     		str	r3, [r1, #88]
 446:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 447:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Configure the Wakeup Pin EXTI Line */
 448:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   MODIFY_REG(EXTI->IMR2, PWR_EXTI_WAKEUP_PINS_MASK, (sPinParams->WakeUpPin << EXTI_IMR2_IM60_Pos));
 727              		.loc 1 448 3
 728 01b0 094B     		ldr	r3, .L47+8
 729 01b2 D3F89030 		ldr	r3, [r3, #144]
 730 01b6 23F07042 		bic	r2, r3, #-268435456
 731 01ba 7B68     		ldr	r3, [r7, #4]
 732 01bc 1B68     		ldr	r3, [r3]
 733 01be 1B07     		lsls	r3, r3, #28
 734 01c0 0549     		ldr	r1, .L47+8
 735 01c2 1343     		orrs	r3, r3, r2
 736 01c4 C1F89030 		str	r3, [r1, #144]
 449:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 737              		.loc 1 449 1
 738 01c8 00BF     		nop
 739 01ca 4837     		adds	r7, r7, #72
 740              		.cfi_def_cfa_offset 8
 741 01cc BD46     		mov	sp, r7
 742              		.cfi_def_cfa_register 13
 743              		@ sp needed
 744 01ce 80BD     		pop	{r7, pc}
 745              	.L48:
 746              		.align	2
 747              	.L47:
 748 01d0 00000000 		.word	.LC0
 749 01d4 00480256 		.word	1442990080
 750 01d8 00500256 		.word	1442992128
 751              		.cfi_endproc
 752              	.LFE841:
 754              		.section	.text.HAL_PWREx_EnableBkupRAMRetention,"ax",%progbits
 755              		.align	1
 756              		.global	HAL_PWREx_EnableBkupRAMRetention
 757              		.syntax unified
 758              		.thumb
 759              		.thumb_func
 761              	HAL_PWREx_EnableBkupRAMRetention:
 762              	.LFB842:
 450:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 451:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @}
 452:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 453:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 454:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 455:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group3 Memories Retention Functions
 456:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief    Memories Retention Functions
 457:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *
ARM GAS  /tmp/ccsGrD0t.s 			page 30


 458:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** @verbatim
 459:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****  ===============================================================================
 460:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****                      ##### Memories Retention Functions #####
 461:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****  ===============================================================================
 462:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     [..]
 463:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 464:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     *** Backup RAM (BKPSRAM) retention ****
 465:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     =======================================
 466:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     [..]
 467:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       By default the content of BKPSRAM memories aren't retained in Standby mode.
 468:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       By setting the BKPRBSEN bit in the PWR_BDCR2 register using the
 469:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       HAL_PWREx_EnableBkupRAMRetention() function, the content of these memories
 470:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       are retained even in Standby mode.
 471:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 472:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     *** TCM RAMs and I-TCM FLEXMEM retention ****
 473:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     =======================================
 474:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     [..]
 475:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       By default the content of TCM RAMs and I-TCM FLEXMEM aren't retained in
 476:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       Standby mode.
 477:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 478:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       By setting the TCMRBSEN bit in the PWR_CR4 register using the
 479:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       HAL_PWREx_EnableTCMRetention() function, the content of these memories
 480:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       are retained even in Standby mode.
 481:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 482:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       By setting the TCMFLXRBSEN bit in the PWR_CR4 register using the
 483:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       HAL_PWREx_EnableTCMFLXRetention () function, the content of these memories
 484:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       are retained even in Standby mode.
 485:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 486:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** @endverbatim
 487:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @{
 488:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 489:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 490:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 491:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Enable the Backup RAM retention in Standby and VBAT modes.
 492:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note  After reset, PWR_BDCR2 is write-protected.
 493:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *        DBP must be set in PWR_DBPCR to disable the write protection.
 494:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
 495:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 496:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableBkupRAMRetention(void)
 497:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 763              		.loc 1 497 1
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 0
 766              		@ frame_needed = 1, uses_anonymous_args = 0
 767              		@ link register save eliminated.
 768 0000 80B4     		push	{r7}
 769              		.cfi_def_cfa_offset 4
 770              		.cfi_offset 7, -4
 771 0002 00AF     		add	r7, sp, #0
 772              		.cfi_def_cfa_register 7
 498:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->BDCR2, PWR_BDCR2_BKPRBSEN);
 773              		.loc 1 498 3
 774 0004 054B     		ldr	r3, .L50
 775 0006 9B6A     		ldr	r3, [r3, #40]
 776 0008 044A     		ldr	r2, .L50
 777 000a 43F00103 		orr	r3, r3, #1
 778 000e 9362     		str	r3, [r2, #40]
ARM GAS  /tmp/ccsGrD0t.s 			page 31


 499:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 779              		.loc 1 499 1
 780 0010 00BF     		nop
 781 0012 BD46     		mov	sp, r7
 782              		.cfi_def_cfa_register 13
 783              		@ sp needed
 784 0014 5DF8047B 		ldr	r7, [sp], #4
 785              		.cfi_restore 7
 786              		.cfi_def_cfa_offset 0
 787 0018 7047     		bx	lr
 788              	.L51:
 789 001a 00BF     		.align	2
 790              	.L50:
 791 001c 00480256 		.word	1442990080
 792              		.cfi_endproc
 793              	.LFE842:
 795              		.section	.text.HAL_PWREx_DisableBkupRAMRetention,"ax",%progbits
 796              		.align	1
 797              		.global	HAL_PWREx_DisableBkupRAMRetention
 798              		.syntax unified
 799              		.thumb
 800              		.thumb_func
 802              	HAL_PWREx_DisableBkupRAMRetention:
 803              	.LFB843:
 500:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 501:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 502:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Disable the Backup RAM retention in Standby and VBAT modes.
 503:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note  After reset, PWR_BDCR2 is write-protected.
 504:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *        DBP must be set in PWR_DBPCR to disable the write protection.
 505:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
 506:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 507:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisableBkupRAMRetention(void)
 508:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 804              		.loc 1 508 1
 805              		.cfi_startproc
 806              		@ args = 0, pretend = 0, frame = 0
 807              		@ frame_needed = 1, uses_anonymous_args = 0
 808              		@ link register save eliminated.
 809 0000 80B4     		push	{r7}
 810              		.cfi_def_cfa_offset 4
 811              		.cfi_offset 7, -4
 812 0002 00AF     		add	r7, sp, #0
 813              		.cfi_def_cfa_register 7
 509:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->BDCR2, PWR_BDCR2_BKPRBSEN);
 814              		.loc 1 509 3
 815 0004 054B     		ldr	r3, .L53
 816 0006 9B6A     		ldr	r3, [r3, #40]
 817 0008 044A     		ldr	r2, .L53
 818 000a 23F00103 		bic	r3, r3, #1
 819 000e 9362     		str	r3, [r2, #40]
 510:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 820              		.loc 1 510 1
 821 0010 00BF     		nop
 822 0012 BD46     		mov	sp, r7
 823              		.cfi_def_cfa_register 13
 824              		@ sp needed
 825 0014 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccsGrD0t.s 			page 32


 826              		.cfi_restore 7
 827              		.cfi_def_cfa_offset 0
 828 0018 7047     		bx	lr
 829              	.L54:
 830 001a 00BF     		.align	2
 831              	.L53:
 832 001c 00480256 		.word	1442990080
 833              		.cfi_endproc
 834              	.LFE843:
 836              		.section	.text.HAL_PWREx_EnableTCMRetention,"ax",%progbits
 837              		.align	1
 838              		.global	HAL_PWREx_EnableTCMRetention
 839              		.syntax unified
 840              		.thumb
 841              		.thumb_func
 843              	HAL_PWREx_EnableTCMRetention:
 844              	.LFB844:
 511:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 512:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 513:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief Enable the TCM RAMs retention in Standby mode.
 514:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
 515:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 516:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableTCMRetention(void)
 517:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 845              		.loc 1 517 1
 846              		.cfi_startproc
 847              		@ args = 0, pretend = 0, frame = 0
 848              		@ frame_needed = 1, uses_anonymous_args = 0
 849              		@ link register save eliminated.
 850 0000 80B4     		push	{r7}
 851              		.cfi_def_cfa_offset 4
 852              		.cfi_offset 7, -4
 853 0002 00AF     		add	r7, sp, #0
 854              		.cfi_def_cfa_register 7
 518:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR4, PWR_CR4_TCMRBSEN);
 855              		.loc 1 518 3
 856 0004 054B     		ldr	r3, .L56
 857 0006 DB68     		ldr	r3, [r3, #12]
 858 0008 044A     		ldr	r2, .L56
 859 000a 43F00103 		orr	r3, r3, #1
 860 000e D360     		str	r3, [r2, #12]
 519:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 861              		.loc 1 519 1
 862 0010 00BF     		nop
 863 0012 BD46     		mov	sp, r7
 864              		.cfi_def_cfa_register 13
 865              		@ sp needed
 866 0014 5DF8047B 		ldr	r7, [sp], #4
 867              		.cfi_restore 7
 868              		.cfi_def_cfa_offset 0
 869 0018 7047     		bx	lr
 870              	.L57:
 871 001a 00BF     		.align	2
 872              	.L56:
 873 001c 00480256 		.word	1442990080
 874              		.cfi_endproc
 875              	.LFE844:
ARM GAS  /tmp/ccsGrD0t.s 			page 33


 877              		.section	.text.HAL_PWREx_DisableTCMRetention,"ax",%progbits
 878              		.align	1
 879              		.global	HAL_PWREx_DisableTCMRetention
 880              		.syntax unified
 881              		.thumb
 882              		.thumb_func
 884              	HAL_PWREx_DisableTCMRetention:
 885              	.LFB845:
 520:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 521:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 522:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief Disable the TCM RAMs retention in Standby mode.
 523:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
 524:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 525:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisableTCMRetention(void)
 526:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 886              		.loc 1 526 1
 887              		.cfi_startproc
 888              		@ args = 0, pretend = 0, frame = 0
 889              		@ frame_needed = 1, uses_anonymous_args = 0
 890              		@ link register save eliminated.
 891 0000 80B4     		push	{r7}
 892              		.cfi_def_cfa_offset 4
 893              		.cfi_offset 7, -4
 894 0002 00AF     		add	r7, sp, #0
 895              		.cfi_def_cfa_register 7
 527:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR4, PWR_CR4_TCMRBSEN);
 896              		.loc 1 527 3
 897 0004 054B     		ldr	r3, .L59
 898 0006 DB68     		ldr	r3, [r3, #12]
 899 0008 044A     		ldr	r2, .L59
 900 000a 23F00103 		bic	r3, r3, #1
 901 000e D360     		str	r3, [r2, #12]
 528:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 902              		.loc 1 528 1
 903 0010 00BF     		nop
 904 0012 BD46     		mov	sp, r7
 905              		.cfi_def_cfa_register 13
 906              		@ sp needed
 907 0014 5DF8047B 		ldr	r7, [sp], #4
 908              		.cfi_restore 7
 909              		.cfi_def_cfa_offset 0
 910 0018 7047     		bx	lr
 911              	.L60:
 912 001a 00BF     		.align	2
 913              	.L59:
 914 001c 00480256 		.word	1442990080
 915              		.cfi_endproc
 916              	.LFE845:
 918              		.section	.text.HAL_PWREx_EnableTCMFLXRetention,"ax",%progbits
 919              		.align	1
 920              		.global	HAL_PWREx_EnableTCMFLXRetention
 921              		.syntax unified
 922              		.thumb
 923              		.thumb_func
 925              	HAL_PWREx_EnableTCMFLXRetention:
 926              	.LFB846:
 529:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/ccsGrD0t.s 			page 34


 530:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 531:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief Enable the I-TCM FLEXMEM retention in Standby mode.
 532:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
 533:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 534:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableTCMFLXRetention(void)
 535:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 927              		.loc 1 535 1
 928              		.cfi_startproc
 929              		@ args = 0, pretend = 0, frame = 0
 930              		@ frame_needed = 1, uses_anonymous_args = 0
 931              		@ link register save eliminated.
 932 0000 80B4     		push	{r7}
 933              		.cfi_def_cfa_offset 4
 934              		.cfi_offset 7, -4
 935 0002 00AF     		add	r7, sp, #0
 936              		.cfi_def_cfa_register 7
 536:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR4, PWR_CR4_TCMFLXRBSEN);
 937              		.loc 1 536 3
 938 0004 054B     		ldr	r3, .L62
 939 0006 DB68     		ldr	r3, [r3, #12]
 940 0008 044A     		ldr	r2, .L62
 941 000a 43F01003 		orr	r3, r3, #16
 942 000e D360     		str	r3, [r2, #12]
 537:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 943              		.loc 1 537 1
 944 0010 00BF     		nop
 945 0012 BD46     		mov	sp, r7
 946              		.cfi_def_cfa_register 13
 947              		@ sp needed
 948 0014 5DF8047B 		ldr	r7, [sp], #4
 949              		.cfi_restore 7
 950              		.cfi_def_cfa_offset 0
 951 0018 7047     		bx	lr
 952              	.L63:
 953 001a 00BF     		.align	2
 954              	.L62:
 955 001c 00480256 		.word	1442990080
 956              		.cfi_endproc
 957              	.LFE846:
 959              		.section	.text.HAL_PWREx_DisableTCMFLXRetention,"ax",%progbits
 960              		.align	1
 961              		.global	HAL_PWREx_DisableTCMFLXRetention
 962              		.syntax unified
 963              		.thumb
 964              		.thumb_func
 966              	HAL_PWREx_DisableTCMFLXRetention:
 967              	.LFB847:
 538:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 539:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 540:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief Disable the I-TCM FLEXMEM retention in Standby mode.
 541:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
 542:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 543:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisableTCMFLXRetention(void)
 544:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 968              		.loc 1 544 1
 969              		.cfi_startproc
 970              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccsGrD0t.s 			page 35


 971              		@ frame_needed = 1, uses_anonymous_args = 0
 972              		@ link register save eliminated.
 973 0000 80B4     		push	{r7}
 974              		.cfi_def_cfa_offset 4
 975              		.cfi_offset 7, -4
 976 0002 00AF     		add	r7, sp, #0
 977              		.cfi_def_cfa_register 7
 545:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR4, PWR_CR4_TCMFLXRBSEN);
 978              		.loc 1 545 3
 979 0004 054B     		ldr	r3, .L65
 980 0006 DB68     		ldr	r3, [r3, #12]
 981 0008 044A     		ldr	r2, .L65
 982 000a 23F01003 		bic	r3, r3, #16
 983 000e D360     		str	r3, [r2, #12]
 546:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 984              		.loc 1 546 1
 985 0010 00BF     		nop
 986 0012 BD46     		mov	sp, r7
 987              		.cfi_def_cfa_register 13
 988              		@ sp needed
 989 0014 5DF8047B 		ldr	r7, [sp], #4
 990              		.cfi_restore 7
 991              		.cfi_def_cfa_offset 0
 992 0018 7047     		bx	lr
 993              	.L66:
 994 001a 00BF     		.align	2
 995              	.L65:
 996 001c 00480256 		.word	1442990080
 997              		.cfi_endproc
 998              	.LFE847:
 1000              		.section	.text.HAL_PWREx_SetPulseLow,"ax",%progbits
 1001              		.align	1
 1002              		.global	HAL_PWREx_SetPulseLow
 1003              		.syntax unified
 1004              		.thumb
 1005              		.thumb_func
 1007              	HAL_PWREx_SetPulseLow:
 1008              	.LFB848:
 547:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 548:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @}
 549:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 550:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 551:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 552:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group4 Low Power Control Functions
 553:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief    Low Power Control Functions
 554:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *
 555:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** @verbatim
 556:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****  ===============================================================================
 557:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****                      ##### Low Power Control Functions #####
 558:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****  ===============================================================================
 559:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     [..]
 560:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** @endverbatim
 561:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @{
 562:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 563:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 564:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 565:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief Configure the pwr_on pulse low configuration.
ARM GAS  /tmp/ccsGrD0t.s 			page 36


 566:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @param  Pulselowtime : Specifies minimum guaranteed duration of
 567:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****                            the pwr_on low pulse in Standby mode.
 568:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *          This parameter can be a value between 0 and 31:
 569:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *            0: No guaranteed minimum low time.
 570:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *            1: 1* 32 LSI cycles= ~ 1 ms guaranteed minimum low time.
 571:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *            X: X* 32 LSI cycles= ~ X ms guaranteed minimum low time.
 572:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
 573:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 574:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_SetPulseLow(uint32_t Pulselowtime)
 575:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 1009              		.loc 1 575 1
 1010              		.cfi_startproc
 1011              		@ args = 0, pretend = 0, frame = 8
 1012              		@ frame_needed = 1, uses_anonymous_args = 0
 1013 0000 80B5     		push	{r7, lr}
 1014              		.cfi_def_cfa_offset 8
 1015              		.cfi_offset 7, -8
 1016              		.cfi_offset 14, -4
 1017 0002 82B0     		sub	sp, sp, #8
 1018              		.cfi_def_cfa_offset 16
 1019 0004 00AF     		add	r7, sp, #0
 1020              		.cfi_def_cfa_register 7
 1021 0006 7860     		str	r0, [r7, #4]
 576:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   assert_param(IS_PWR_PULSE_LOW_TIME(Pulselowtime));
 1022              		.loc 1 576 3
 1023 0008 7B68     		ldr	r3, [r7, #4]
 1024 000a 1F2B     		cmp	r3, #31
 1025 000c 04D9     		bls	.L68
 1026              		.loc 1 576 3 is_stmt 0 discriminator 1
 1027 000e 4FF41071 		mov	r1, #576
 1028 0012 0848     		ldr	r0, .L69
 1029 0014 FFF7FEFF 		bl	assert_failed
 1030              	.L68:
 577:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 578:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Set the pwr_on pulse low configuration */
 579:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->CR1, PWR_CR1_POPL_Msk, (Pulselowtime << PWR_CR1_POPL_Pos));
 1031              		.loc 1 579 3 is_stmt 1
 1032 0018 074B     		ldr	r3, .L69+4
 1033 001a 1B68     		ldr	r3, [r3]
 1034 001c 23F4F812 		bic	r2, r3, #2031616
 1035 0020 7B68     		ldr	r3, [r7, #4]
 1036 0022 1B04     		lsls	r3, r3, #16
 1037 0024 0449     		ldr	r1, .L69+4
 1038 0026 1343     		orrs	r3, r3, r2
 1039 0028 0B60     		str	r3, [r1]
 580:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 1040              		.loc 1 580 1
 1041 002a 00BF     		nop
 1042 002c 0837     		adds	r7, r7, #8
 1043              		.cfi_def_cfa_offset 8
 1044 002e BD46     		mov	sp, r7
 1045              		.cfi_def_cfa_register 13
 1046              		@ sp needed
 1047 0030 80BD     		pop	{r7, pc}
 1048              	.L70:
 1049 0032 00BF     		.align	2
 1050              	.L69:
ARM GAS  /tmp/ccsGrD0t.s 			page 37


 1051 0034 00000000 		.word	.LC0
 1052 0038 00480256 		.word	1442990080
 1053              		.cfi_endproc
 1054              	.LFE848:
 1056              		.section	.text.HAL_PWREx_GetPulseLow,"ax",%progbits
 1057              		.align	1
 1058              		.global	HAL_PWREx_GetPulseLow
 1059              		.syntax unified
 1060              		.thumb
 1061              		.thumb_func
 1063              	HAL_PWREx_GetPulseLow:
 1064              	.LFB849:
 581:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 582:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 583:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief Get the pwr_on pulse low configuration.
 584:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval The actual applied minimum guaranteed duration of the
 585:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *         pwr_on low pulse in Standby mode.
 586:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 587:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetPulseLow(void)
 588:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 1065              		.loc 1 588 1
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 0
 1068              		@ frame_needed = 1, uses_anonymous_args = 0
 1069              		@ link register save eliminated.
 1070 0000 80B4     		push	{r7}
 1071              		.cfi_def_cfa_offset 4
 1072              		.cfi_offset 7, -4
 1073 0002 00AF     		add	r7, sp, #0
 1074              		.cfi_def_cfa_register 7
 589:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Return the stop voltage scaling */
 590:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   return ((PWR->CR1 & PWR_CR1_POPL_Msk) >> PWR_CR1_POPL_Pos);
 1075              		.loc 1 590 15
 1076 0004 044B     		ldr	r3, .L73
 1077 0006 1B68     		ldr	r3, [r3]
 1078              		.loc 1 590 41
 1079 0008 1B0C     		lsrs	r3, r3, #16
 1080 000a 03F01F03 		and	r3, r3, #31
 591:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 1081              		.loc 1 591 1
 1082 000e 1846     		mov	r0, r3
 1083 0010 BD46     		mov	sp, r7
 1084              		.cfi_def_cfa_register 13
 1085              		@ sp needed
 1086 0012 5DF8047B 		ldr	r7, [sp], #4
 1087              		.cfi_restore 7
 1088              		.cfi_def_cfa_offset 0
 1089 0016 7047     		bx	lr
 1090              	.L74:
 1091              		.align	2
 1092              	.L73:
 1093 0018 00480256 		.word	1442990080
 1094              		.cfi_endproc
 1095              	.LFE849:
 1097              		.section	.text.HAL_PWREx_EnableSMPSPWM,"ax",%progbits
 1098              		.align	1
 1099              		.global	HAL_PWREx_EnableSMPSPWM
ARM GAS  /tmp/ccsGrD0t.s 			page 38


 1100              		.syntax unified
 1101              		.thumb
 1102              		.thumb_func
 1104              	HAL_PWREx_EnableSMPSPWM:
 1105              	.LFB850:
 592:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 593:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 594:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Enable SMPS low-power mode (SVOS range 3 only).
 595:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note   LPDS08V bit is used to keep the SMPS in PWM mode (MR) in Stop SVOS range 3.
 596:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
 597:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 598:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableSMPSPWM(void)
 599:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 1106              		.loc 1 599 1
 1107              		.cfi_startproc
 1108              		@ args = 0, pretend = 0, frame = 0
 1109              		@ frame_needed = 1, uses_anonymous_args = 0
 1110              		@ link register save eliminated.
 1111 0000 80B4     		push	{r7}
 1112              		.cfi_def_cfa_offset 4
 1113              		.cfi_offset 7, -4
 1114 0002 00AF     		add	r7, sp, #0
 1115              		.cfi_def_cfa_register 7
 600:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR1, PWR_CR1_LPDS08V);
 1116              		.loc 1 600 3
 1117 0004 054B     		ldr	r3, .L76
 1118 0006 1B68     		ldr	r3, [r3]
 1119 0008 044A     		ldr	r2, .L76
 1120 000a 43F02003 		orr	r3, r3, #32
 1121 000e 1360     		str	r3, [r2]
 601:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 1122              		.loc 1 601 1
 1123 0010 00BF     		nop
 1124 0012 BD46     		mov	sp, r7
 1125              		.cfi_def_cfa_register 13
 1126              		@ sp needed
 1127 0014 5DF8047B 		ldr	r7, [sp], #4
 1128              		.cfi_restore 7
 1129              		.cfi_def_cfa_offset 0
 1130 0018 7047     		bx	lr
 1131              	.L77:
 1132 001a 00BF     		.align	2
 1133              	.L76:
 1134 001c 00480256 		.word	1442990080
 1135              		.cfi_endproc
 1136              	.LFE850:
 1138              		.section	.text.HAL_PWREx_DisableSMPSPWM,"ax",%progbits
 1139              		.align	1
 1140              		.global	HAL_PWREx_DisableSMPSPWM
 1141              		.syntax unified
 1142              		.thumb
 1143              		.thumb_func
 1145              	HAL_PWREx_DisableSMPSPWM:
 1146              	.LFB851:
 602:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 603:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 604:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Disable SMPS low-power mode (SVOS range 3 only).
ARM GAS  /tmp/ccsGrD0t.s 			page 39


 605:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
 606:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 607:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisableSMPSPWM(void)
 608:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 1147              		.loc 1 608 1
 1148              		.cfi_startproc
 1149              		@ args = 0, pretend = 0, frame = 0
 1150              		@ frame_needed = 1, uses_anonymous_args = 0
 1151              		@ link register save eliminated.
 1152 0000 80B4     		push	{r7}
 1153              		.cfi_def_cfa_offset 4
 1154              		.cfi_offset 7, -4
 1155 0002 00AF     		add	r7, sp, #0
 1156              		.cfi_def_cfa_register 7
 609:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR1, PWR_CR1_LPDS08V);
 1157              		.loc 1 609 3
 1158 0004 054B     		ldr	r3, .L79
 1159 0006 1B68     		ldr	r3, [r3]
 1160 0008 044A     		ldr	r2, .L79
 1161 000a 23F02003 		bic	r3, r3, #32
 1162 000e 1360     		str	r3, [r2]
 610:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 1163              		.loc 1 610 1
 1164 0010 00BF     		nop
 1165 0012 BD46     		mov	sp, r7
 1166              		.cfi_def_cfa_register 13
 1167              		@ sp needed
 1168 0014 5DF8047B 		ldr	r7, [sp], #4
 1169              		.cfi_restore 7
 1170              		.cfi_def_cfa_offset 0
 1171 0018 7047     		bx	lr
 1172              	.L80:
 1173 001a 00BF     		.align	2
 1174              	.L79:
 1175 001c 00480256 		.word	1442990080
 1176              		.cfi_endproc
 1177              	.LFE851:
 1179              		.section	.text.HAL_PWREx_EnablePullDownOutput,"ax",%progbits
 1180              		.align	1
 1181              		.global	HAL_PWREx_EnablePullDownOutput
 1182              		.syntax unified
 1183              		.thumb
 1184              		.thumb_func
 1186              	HAL_PWREx_EnablePullDownOutput:
 1187              	.LFB852:
 611:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 612:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 613:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Enable the pull down on output voltage during power-down mode.
 614:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
 615:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 616:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnablePullDownOutput(void)
 617:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 1188              		.loc 1 617 1
 1189              		.cfi_startproc
 1190              		@ args = 0, pretend = 0, frame = 0
 1191              		@ frame_needed = 1, uses_anonymous_args = 0
 1192              		@ link register save eliminated.
ARM GAS  /tmp/ccsGrD0t.s 			page 40


 1193 0000 80B4     		push	{r7}
 1194              		.cfi_def_cfa_offset 4
 1195              		.cfi_offset 7, -4
 1196 0002 00AF     		add	r7, sp, #0
 1197              		.cfi_def_cfa_register 7
 618:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR1, PWR_CR1_MODE_PDN);
 1198              		.loc 1 618 3
 1199 0004 054B     		ldr	r3, .L82
 1200 0006 1B68     		ldr	r3, [r3]
 1201 0008 044A     		ldr	r2, .L82
 1202 000a 43F01003 		orr	r3, r3, #16
 1203 000e 1360     		str	r3, [r2]
 619:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 1204              		.loc 1 619 1
 1205 0010 00BF     		nop
 1206 0012 BD46     		mov	sp, r7
 1207              		.cfi_def_cfa_register 13
 1208              		@ sp needed
 1209 0014 5DF8047B 		ldr	r7, [sp], #4
 1210              		.cfi_restore 7
 1211              		.cfi_def_cfa_offset 0
 1212 0018 7047     		bx	lr
 1213              	.L83:
 1214 001a 00BF     		.align	2
 1215              	.L82:
 1216 001c 00480256 		.word	1442990080
 1217              		.cfi_endproc
 1218              	.LFE852:
 1220              		.section	.text.HAL_PWREx_DisablePullDownOutput,"ax",%progbits
 1221              		.align	1
 1222              		.global	HAL_PWREx_DisablePullDownOutput
 1223              		.syntax unified
 1224              		.thumb
 1225              		.thumb_func
 1227              	HAL_PWREx_DisablePullDownOutput:
 1228              	.LFB853:
 620:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 621:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 622:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Disable the pull down on output voltage during power-down mode.
 623:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
 624:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 625:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisablePullDownOutput(void)
 626:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 1229              		.loc 1 626 1
 1230              		.cfi_startproc
 1231              		@ args = 0, pretend = 0, frame = 0
 1232              		@ frame_needed = 1, uses_anonymous_args = 0
 1233              		@ link register save eliminated.
 1234 0000 80B4     		push	{r7}
 1235              		.cfi_def_cfa_offset 4
 1236              		.cfi_offset 7, -4
 1237 0002 00AF     		add	r7, sp, #0
 1238              		.cfi_def_cfa_register 7
 627:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR1, PWR_CR1_MODE_PDN);
 1239              		.loc 1 627 3
 1240 0004 054B     		ldr	r3, .L85
 1241 0006 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccsGrD0t.s 			page 41


 1242 0008 044A     		ldr	r2, .L85
 1243 000a 23F01003 		bic	r3, r3, #16
 1244 000e 1360     		str	r3, [r2]
 628:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 1245              		.loc 1 628 1
 1246 0010 00BF     		nop
 1247 0012 BD46     		mov	sp, r7
 1248              		.cfi_def_cfa_register 13
 1249              		@ sp needed
 1250 0014 5DF8047B 		ldr	r7, [sp], #4
 1251              		.cfi_restore 7
 1252              		.cfi_def_cfa_offset 0
 1253 0018 7047     		bx	lr
 1254              	.L86:
 1255 001a 00BF     		.align	2
 1256              	.L85:
 1257 001c 00480256 		.word	1442990080
 1258              		.cfi_endproc
 1259              	.LFE853:
 1261              		.section	.text.HAL_PWREx_EnableMonitoring,"ax",%progbits
 1262              		.align	1
 1263              		.global	HAL_PWREx_EnableMonitoring
 1264              		.syntax unified
 1265              		.thumb
 1266              		.thumb_func
 1268              	HAL_PWREx_EnableMonitoring:
 1269              	.LFB854:
 629:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 630:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @}
 631:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 632:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 633:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group5 Power Monitoring functions
 634:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief    Power Monitoring functions
 635:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *
 636:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** @verbatim
 637:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****  ===============================================================================
 638:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****                  ##### Power Monitoring functions #####
 639:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****  ===============================================================================
 640:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 641:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     *** VBAT and Temperature supervision ***
 642:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     ========================================
 643:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     [..]
 644:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       (+) The VBAT battery voltage supply can be monitored by comparing it with
 645:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****           two threshold levels: VBAThigh and VBATlow. VBATH flag and VBATL flags
 646:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****           in the PWR control register 2 (PWR_BDCR1), indicate if VBAT is higher or
 647:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****           lower than the threshold.
 648:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       (+) The temperature can be monitored by comparing it with two threshold
 649:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****           levels, TEMPhigh and TEMPlow. TEMPH and TEMPL flags, in the PWR
 650:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****           control register 2 (PWR_BDCR1), indicate whether the device temperature
 651:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****           is higher or lower than the threshold.
 652:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       (+) The VBAT and the temperature monitoring is enabled by
 653:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****           HAL_PWREx_EnableMonitoring() function and disabled by
 654:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****           HAL_PWREx_DisableMonitoring() function.
 655:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       (+) The HAL_PWREx_GetVBATLevel() function returns the VBAT level which can
 656:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****           be : PWR_VBAT_BELOW_LOW_THRESHOLD or PWR_VBAT_ABOVE_HIGH_THRESHOLD or
 657:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****           PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD.
 658:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       (+) The HAL_PWREx_GetTemperatureLevel() function returns the Temperature
ARM GAS  /tmp/ccsGrD0t.s 			page 42


 659:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****           level which can be :
 660:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****           PWR_TEMP_BELOW_LOW_THRESHOLD or PWR_TEMP_ABOVE_HIGH_THRESHOLD or
 661:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****           PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD.
 662:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 663:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** @endverbatim
 664:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @{
 665:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 666:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 667:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 668:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief Enable the VBAT and temperature monitoring.
 669:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note  After reset, PWR_BDCR1 is write-protected.
 670:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *        DBP must be set in PWR_DBPCR to disable the write protection.
 671:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval HAL status.
 672:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 673:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableMonitoring(void)
 674:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 1270              		.loc 1 674 1
 1271              		.cfi_startproc
 1272              		@ args = 0, pretend = 0, frame = 0
 1273              		@ frame_needed = 1, uses_anonymous_args = 0
 1274              		@ link register save eliminated.
 1275 0000 80B4     		push	{r7}
 1276              		.cfi_def_cfa_offset 4
 1277              		.cfi_offset 7, -4
 1278 0002 00AF     		add	r7, sp, #0
 1279              		.cfi_def_cfa_register 7
 675:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Enable the VBAT and Temperature monitoring */
 676:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->BDCR1, PWR_BDCR1_MONEN);
 1280              		.loc 1 676 3
 1281 0004 054B     		ldr	r3, .L88
 1282 0006 5B6A     		ldr	r3, [r3, #36]
 1283 0008 044A     		ldr	r2, .L88
 1284 000a 43F00103 		orr	r3, r3, #1
 1285 000e 5362     		str	r3, [r2, #36]
 677:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 1286              		.loc 1 677 1
 1287 0010 00BF     		nop
 1288 0012 BD46     		mov	sp, r7
 1289              		.cfi_def_cfa_register 13
 1290              		@ sp needed
 1291 0014 5DF8047B 		ldr	r7, [sp], #4
 1292              		.cfi_restore 7
 1293              		.cfi_def_cfa_offset 0
 1294 0018 7047     		bx	lr
 1295              	.L89:
 1296 001a 00BF     		.align	2
 1297              	.L88:
 1298 001c 00480256 		.word	1442990080
 1299              		.cfi_endproc
 1300              	.LFE854:
 1302              		.section	.text.HAL_PWREx_DisableMonitoring,"ax",%progbits
 1303              		.align	1
 1304              		.global	HAL_PWREx_DisableMonitoring
 1305              		.syntax unified
 1306              		.thumb
 1307              		.thumb_func
 1309              	HAL_PWREx_DisableMonitoring:
ARM GAS  /tmp/ccsGrD0t.s 			page 43


 1310              	.LFB855:
 678:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 679:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 680:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief Disable the VBAT and temperature monitoring.
 681:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note  After reset, PWR_BDCR1 is write-protected.
 682:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *        DBP must be set in PWR_DBPCR to disable the write protection.
 683:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval HAL status.
 684:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 685:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisableMonitoring(void)
 686:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 1311              		.loc 1 686 1
 1312              		.cfi_startproc
 1313              		@ args = 0, pretend = 0, frame = 0
 1314              		@ frame_needed = 1, uses_anonymous_args = 0
 1315              		@ link register save eliminated.
 1316 0000 80B4     		push	{r7}
 1317              		.cfi_def_cfa_offset 4
 1318              		.cfi_offset 7, -4
 1319 0002 00AF     		add	r7, sp, #0
 1320              		.cfi_def_cfa_register 7
 687:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Disable the VBAT and Temperature monitoring */
 688:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->BDCR1, PWR_BDCR1_MONEN);
 1321              		.loc 1 688 3
 1322 0004 054B     		ldr	r3, .L91
 1323 0006 5B6A     		ldr	r3, [r3, #36]
 1324 0008 044A     		ldr	r2, .L91
 1325 000a 23F00103 		bic	r3, r3, #1
 1326 000e 5362     		str	r3, [r2, #36]
 689:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 1327              		.loc 1 689 1
 1328 0010 00BF     		nop
 1329 0012 BD46     		mov	sp, r7
 1330              		.cfi_def_cfa_register 13
 1331              		@ sp needed
 1332 0014 5DF8047B 		ldr	r7, [sp], #4
 1333              		.cfi_restore 7
 1334              		.cfi_def_cfa_offset 0
 1335 0018 7047     		bx	lr
 1336              	.L92:
 1337 001a 00BF     		.align	2
 1338              	.L91:
 1339 001c 00480256 		.word	1442990080
 1340              		.cfi_endproc
 1341              	.LFE855:
 1343              		.section	.text.HAL_PWREx_GetTemperatureLevel,"ax",%progbits
 1344              		.align	1
 1345              		.global	HAL_PWREx_GetTemperatureLevel
 1346              		.syntax unified
 1347              		.thumb
 1348              		.thumb_func
 1350              	HAL_PWREx_GetTemperatureLevel:
 1351              	.LFB856:
 690:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 691:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 692:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief Indicate whether the junction temperature is between, above or below
 693:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *        the thresholds.
 694:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval Temperature level.
ARM GAS  /tmp/ccsGrD0t.s 			page 44


 695:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 696:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetTemperatureLevel(void)
 697:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 1352              		.loc 1 697 1
 1353              		.cfi_startproc
 1354              		@ args = 0, pretend = 0, frame = 8
 1355              		@ frame_needed = 1, uses_anonymous_args = 0
 1356              		@ link register save eliminated.
 1357 0000 80B4     		push	{r7}
 1358              		.cfi_def_cfa_offset 4
 1359              		.cfi_offset 7, -4
 1360 0002 83B0     		sub	sp, sp, #12
 1361              		.cfi_def_cfa_offset 16
 1362 0004 00AF     		add	r7, sp, #0
 1363              		.cfi_def_cfa_register 7
 698:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   uint32_t tempLevel;
 699:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   uint32_t regValue;
 700:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 701:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Read the temperature flags */
 702:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   regValue = READ_BIT(PWR->BDCR1, (PWR_BDCR1_TEMPH | PWR_BDCR1_TEMPL));
 1364              		.loc 1 702 14
 1365 0006 0F4B     		ldr	r3, .L98
 1366 0008 5B6A     		ldr	r3, [r3, #36]
 1367              		.loc 1 702 12
 1368 000a 03F44023 		and	r3, r3, #786432
 1369 000e 3B60     		str	r3, [r7]
 703:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 704:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check if the temperature is below the threshold */
 705:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if (regValue == PWR_BDCR1_TEMPL)
 1370              		.loc 1 705 6
 1371 0010 3B68     		ldr	r3, [r7]
 1372 0012 B3F5802F 		cmp	r3, #262144
 1373 0016 03D1     		bne	.L94
 706:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
 707:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_BELOW_LOW_THRESHOLD;
 1374              		.loc 1 707 15
 1375 0018 4FF48023 		mov	r3, #262144
 1376 001c 7B60     		str	r3, [r7, #4]
 1377 001e 09E0     		b	.L95
 1378              	.L94:
 708:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
 709:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check if the temperature is above the threshold */
 710:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   else if (regValue == PWR_BDCR1_TEMPH)
 1379              		.loc 1 710 11
 1380 0020 3B68     		ldr	r3, [r7]
 1381 0022 B3F5002F 		cmp	r3, #524288
 1382 0026 03D1     		bne	.L96
 711:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
 712:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_ABOVE_HIGH_THRESHOLD;
 1383              		.loc 1 712 15
 1384 0028 4FF40023 		mov	r3, #524288
 1385 002c 7B60     		str	r3, [r7, #4]
 1386 002e 01E0     		b	.L95
 1387              	.L96:
 713:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
 714:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* The temperature is between the thresholds */
 715:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   else
ARM GAS  /tmp/ccsGrD0t.s 			page 45


 716:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
 717:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD;
 1388              		.loc 1 717 15
 1389 0030 0023     		movs	r3, #0
 1390 0032 7B60     		str	r3, [r7, #4]
 1391              	.L95:
 718:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
 719:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 720:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   return tempLevel;
 1392              		.loc 1 720 10
 1393 0034 7B68     		ldr	r3, [r7, #4]
 721:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 1394              		.loc 1 721 1
 1395 0036 1846     		mov	r0, r3
 1396 0038 0C37     		adds	r7, r7, #12
 1397              		.cfi_def_cfa_offset 4
 1398 003a BD46     		mov	sp, r7
 1399              		.cfi_def_cfa_register 13
 1400              		@ sp needed
 1401 003c 5DF8047B 		ldr	r7, [sp], #4
 1402              		.cfi_restore 7
 1403              		.cfi_def_cfa_offset 0
 1404 0040 7047     		bx	lr
 1405              	.L99:
 1406 0042 00BF     		.align	2
 1407              	.L98:
 1408 0044 00480256 		.word	1442990080
 1409              		.cfi_endproc
 1410              	.LFE856:
 1412              		.section	.text.HAL_PWREx_GetVBATLevel,"ax",%progbits
 1413              		.align	1
 1414              		.global	HAL_PWREx_GetVBATLevel
 1415              		.syntax unified
 1416              		.thumb
 1417              		.thumb_func
 1419              	HAL_PWREx_GetVBATLevel:
 1420              	.LFB857:
 722:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 723:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 724:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief Indicate whether the Battery voltage level is between, above or below
 725:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *        the thresholds.
 726:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval VBAT level.
 727:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 728:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetVBATLevel(void)
 729:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 1421              		.loc 1 729 1
 1422              		.cfi_startproc
 1423              		@ args = 0, pretend = 0, frame = 8
 1424              		@ frame_needed = 1, uses_anonymous_args = 0
 1425              		@ link register save eliminated.
 1426 0000 80B4     		push	{r7}
 1427              		.cfi_def_cfa_offset 4
 1428              		.cfi_offset 7, -4
 1429 0002 83B0     		sub	sp, sp, #12
 1430              		.cfi_def_cfa_offset 16
 1431 0004 00AF     		add	r7, sp, #0
 1432              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccsGrD0t.s 			page 46


 730:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   uint32_t vbatLevel;
 731:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   uint32_t regValue;
 732:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 733:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Read the VBAT flags */
 734:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   regValue = READ_BIT(PWR->BDCR1, (PWR_BDCR1_VBATH | PWR_BDCR1_VBATL));
 1433              		.loc 1 734 14
 1434 0006 0F4B     		ldr	r3, .L105
 1435 0008 5B6A     		ldr	r3, [r3, #36]
 1436              		.loc 1 734 12
 1437 000a 03F44033 		and	r3, r3, #196608
 1438 000e 3B60     		str	r3, [r7]
 735:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 736:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check if the VBAT is below the threshold */
 737:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if (regValue == PWR_BDCR1_VBATL)
 1439              		.loc 1 737 6
 1440 0010 3B68     		ldr	r3, [r7]
 1441 0012 B3F5803F 		cmp	r3, #65536
 1442 0016 03D1     		bne	.L101
 738:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
 739:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     vbatLevel = PWR_VBAT_BELOW_LOW_THRESHOLD;
 1443              		.loc 1 739 15
 1444 0018 4FF48033 		mov	r3, #65536
 1445 001c 7B60     		str	r3, [r7, #4]
 1446 001e 09E0     		b	.L102
 1447              	.L101:
 740:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
 741:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check if the VBAT is above the threshold */
 742:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   else if (regValue == PWR_BDCR1_VBATH)
 1448              		.loc 1 742 11
 1449 0020 3B68     		ldr	r3, [r7]
 1450 0022 B3F5003F 		cmp	r3, #131072
 1451 0026 03D1     		bne	.L103
 743:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
 744:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     vbatLevel = PWR_VBAT_ABOVE_HIGH_THRESHOLD;
 1452              		.loc 1 744 15
 1453 0028 4FF40033 		mov	r3, #131072
 1454 002c 7B60     		str	r3, [r7, #4]
 1455 002e 01E0     		b	.L102
 1456              	.L103:
 745:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
 746:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* The VBAT is between the thresholds */
 747:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   else
 748:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
 749:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     vbatLevel = PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD;
 1457              		.loc 1 749 15
 1458 0030 0023     		movs	r3, #0
 1459 0032 7B60     		str	r3, [r7, #4]
 1460              	.L102:
 750:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
 751:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 752:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   return vbatLevel;
 1461              		.loc 1 752 10
 1462 0034 7B68     		ldr	r3, [r7, #4]
 753:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 1463              		.loc 1 753 1
 1464 0036 1846     		mov	r0, r3
 1465 0038 0C37     		adds	r7, r7, #12
ARM GAS  /tmp/ccsGrD0t.s 			page 47


 1466              		.cfi_def_cfa_offset 4
 1467 003a BD46     		mov	sp, r7
 1468              		.cfi_def_cfa_register 13
 1469              		@ sp needed
 1470 003c 5DF8047B 		ldr	r7, [sp], #4
 1471              		.cfi_restore 7
 1472              		.cfi_def_cfa_offset 0
 1473 0040 7047     		bx	lr
 1474              	.L106:
 1475 0042 00BF     		.align	2
 1476              	.L105:
 1477 0044 00480256 		.word	1442990080
 1478              		.cfi_endproc
 1479              	.LFE857:
 1481              		.section	.text.HAL_PWREx_EnableVDDCOREMonitoring,"ax",%progbits
 1482              		.align	1
 1483              		.global	HAL_PWREx_EnableVDDCOREMonitoring
 1484              		.syntax unified
 1485              		.thumb
 1486              		.thumb_func
 1488              	HAL_PWREx_EnableVDDCOREMonitoring:
 1489              	.LFB858:
 754:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 755:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 756:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief Enable the VDDCORE monitoring.
 757:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval HAL status.
 758:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 759:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableVDDCOREMonitoring(void)
 760:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 1490              		.loc 1 760 1
 1491              		.cfi_startproc
 1492              		@ args = 0, pretend = 0, frame = 0
 1493              		@ frame_needed = 1, uses_anonymous_args = 0
 1494              		@ link register save eliminated.
 1495 0000 80B4     		push	{r7}
 1496              		.cfi_def_cfa_offset 4
 1497              		.cfi_offset 7, -4
 1498 0002 00AF     		add	r7, sp, #0
 1499              		.cfi_def_cfa_register 7
 761:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Enable the VDDCORE monitoring */
 762:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR3, PWR_CR3_VCOREMONEN);
 1500              		.loc 1 762 3
 1501 0004 054B     		ldr	r3, .L108
 1502 0006 9B68     		ldr	r3, [r3, #8]
 1503 0008 044A     		ldr	r2, .L108
 1504 000a 43F00103 		orr	r3, r3, #1
 1505 000e 9360     		str	r3, [r2, #8]
 763:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 1506              		.loc 1 763 1
 1507 0010 00BF     		nop
 1508 0012 BD46     		mov	sp, r7
 1509              		.cfi_def_cfa_register 13
 1510              		@ sp needed
 1511 0014 5DF8047B 		ldr	r7, [sp], #4
 1512              		.cfi_restore 7
 1513              		.cfi_def_cfa_offset 0
 1514 0018 7047     		bx	lr
ARM GAS  /tmp/ccsGrD0t.s 			page 48


 1515              	.L109:
 1516 001a 00BF     		.align	2
 1517              	.L108:
 1518 001c 00480256 		.word	1442990080
 1519              		.cfi_endproc
 1520              	.LFE858:
 1522              		.section	.text.HAL_PWREx_DisableVDDCOREMonitoring,"ax",%progbits
 1523              		.align	1
 1524              		.global	HAL_PWREx_DisableVDDCOREMonitoring
 1525              		.syntax unified
 1526              		.thumb
 1527              		.thumb_func
 1529              	HAL_PWREx_DisableVDDCOREMonitoring:
 1530              	.LFB859:
 764:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 765:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 766:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief Disable the VDDCORE monitoring.
 767:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval HAL status.
 768:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 769:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisableVDDCOREMonitoring(void)
 770:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 1531              		.loc 1 770 1
 1532              		.cfi_startproc
 1533              		@ args = 0, pretend = 0, frame = 0
 1534              		@ frame_needed = 1, uses_anonymous_args = 0
 1535              		@ link register save eliminated.
 1536 0000 80B4     		push	{r7}
 1537              		.cfi_def_cfa_offset 4
 1538              		.cfi_offset 7, -4
 1539 0002 00AF     		add	r7, sp, #0
 1540              		.cfi_def_cfa_register 7
 771:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Disable the VDDCORE monitoring */
 772:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR3, PWR_CR3_VCOREMONEN);
 1541              		.loc 1 772 3
 1542 0004 054B     		ldr	r3, .L111
 1543 0006 9B68     		ldr	r3, [r3, #8]
 1544 0008 044A     		ldr	r2, .L111
 1545 000a 23F00103 		bic	r3, r3, #1
 1546 000e 9360     		str	r3, [r2, #8]
 773:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 1547              		.loc 1 773 1
 1548 0010 00BF     		nop
 1549 0012 BD46     		mov	sp, r7
 1550              		.cfi_def_cfa_register 13
 1551              		@ sp needed
 1552 0014 5DF8047B 		ldr	r7, [sp], #4
 1553              		.cfi_restore 7
 1554              		.cfi_def_cfa_offset 0
 1555 0018 7047     		bx	lr
 1556              	.L112:
 1557 001a 00BF     		.align	2
 1558              	.L111:
 1559 001c 00480256 		.word	1442990080
 1560              		.cfi_endproc
 1561              	.LFE859:
 1563              		.section	.text.HAL_PWREx_ConfigVDDCOREVM,"ax",%progbits
 1564              		.align	1
ARM GAS  /tmp/ccsGrD0t.s 			page 49


 1565              		.global	HAL_PWREx_ConfigVDDCOREVM
 1566              		.syntax unified
 1567              		.thumb
 1568              		.thumb_func
 1570              	HAL_PWREx_ConfigVDDCOREVM:
 1571              	.LFB860:
 774:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 775:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 776:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Configure the VDDCORE voltage detector low-level selection.
 777:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @param  pConfigVddCOREVM : Pointer to a PWR_VddCOREVMTypeDef structure that contains the
 778:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *                            PVM configuration information (LowVoltageThreshold and Mode).
 779:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
 780:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 781:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_ConfigVDDCOREVM(const PWR_VddCOREVMTypeDef *pConfigVddCOREVM)
 782:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 1572              		.loc 1 782 1
 1573              		.cfi_startproc
 1574              		@ args = 0, pretend = 0, frame = 8
 1575              		@ frame_needed = 1, uses_anonymous_args = 0
 1576 0000 80B5     		push	{r7, lr}
 1577              		.cfi_def_cfa_offset 8
 1578              		.cfi_offset 7, -8
 1579              		.cfi_offset 14, -4
 1580 0002 82B0     		sub	sp, sp, #8
 1581              		.cfi_def_cfa_offset 16
 1582 0004 00AF     		add	r7, sp, #0
 1583              		.cfi_def_cfa_register 7
 1584 0006 7860     		str	r0, [r7, #4]
 783:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   assert_param(IS_PWR_VDDCOREVM_LEVEL(pConfigVddCOREVM->LowVoltageThreshold));
 1585              		.loc 1 783 3
 1586 0008 7B68     		ldr	r3, [r7, #4]
 1587 000a 1B68     		ldr	r3, [r3]
 1588 000c 102B     		cmp	r3, #16
 1589 000e 08D0     		beq	.L114
 1590              		.loc 1 783 3 is_stmt 0 discriminator 1
 1591 0010 7B68     		ldr	r3, [r7, #4]
 1592 0012 1B68     		ldr	r3, [r3]
 1593 0014 002B     		cmp	r3, #0
 1594 0016 04D0     		beq	.L114
 1595              		.loc 1 783 3 discriminator 2
 1596 0018 40F20F31 		movw	r1, #783
 1597 001c 4048     		ldr	r0, .L121
 1598 001e FFF7FEFF 		bl	assert_failed
 1599              	.L114:
 784:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   assert_param(IS_PWR_VDDCOREVM_MODE(pConfigVddCOREVM->Mode));
 1600              		.loc 1 784 3 is_stmt 1
 1601 0022 7B68     		ldr	r3, [r7, #4]
 1602 0024 5B68     		ldr	r3, [r3, #4]
 1603 0026 002B     		cmp	r3, #0
 1604 0028 1CD0     		beq	.L115
 1605              		.loc 1 784 3 is_stmt 0 discriminator 1
 1606 002a 7B68     		ldr	r3, [r7, #4]
 1607 002c 5B68     		ldr	r3, [r3, #4]
 1608 002e 052B     		cmp	r3, #5
 1609 0030 18D0     		beq	.L115
 1610              		.loc 1 784 3 discriminator 2
 1611 0032 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccsGrD0t.s 			page 50


 1612 0034 5B68     		ldr	r3, [r3, #4]
 1613 0036 062B     		cmp	r3, #6
 1614 0038 14D0     		beq	.L115
 1615              		.loc 1 784 3 discriminator 3
 1616 003a 7B68     		ldr	r3, [r7, #4]
 1617 003c 5B68     		ldr	r3, [r3, #4]
 1618 003e 072B     		cmp	r3, #7
 1619 0040 10D0     		beq	.L115
 1620              		.loc 1 784 3 discriminator 4
 1621 0042 7B68     		ldr	r3, [r7, #4]
 1622 0044 5B68     		ldr	r3, [r3, #4]
 1623 0046 092B     		cmp	r3, #9
 1624 0048 0CD0     		beq	.L115
 1625              		.loc 1 784 3 discriminator 5
 1626 004a 7B68     		ldr	r3, [r7, #4]
 1627 004c 5B68     		ldr	r3, [r3, #4]
 1628 004e 0A2B     		cmp	r3, #10
 1629 0050 08D0     		beq	.L115
 1630              		.loc 1 784 3 discriminator 6
 1631 0052 7B68     		ldr	r3, [r7, #4]
 1632 0054 5B68     		ldr	r3, [r3, #4]
 1633 0056 0B2B     		cmp	r3, #11
 1634 0058 04D0     		beq	.L115
 1635              		.loc 1 784 3 discriminator 7
 1636 005a 4FF44471 		mov	r1, #784
 1637 005e 3048     		ldr	r0, .L121
 1638 0060 FFF7FEFF 		bl	assert_failed
 1639              	.L115:
 785:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 786:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Disable VDDCORE monitoring Event/Interrupt */
 787:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   __HAL_PWR_VCOREVM_EXTI_DISABLE_EVENT();
 1640              		.loc 1 787 3 is_stmt 1
 1641 0064 2F4B     		ldr	r3, .L121+4
 1642 0066 D3F8A430 		ldr	r3, [r3, #164]
 1643 006a 2E4A     		ldr	r2, .L121+4
 1644 006c 23F01003 		bic	r3, r3, #16
 1645 0070 C2F8A430 		str	r3, [r2, #164]
 788:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   __HAL_PWR_VCOREVM_EXTI_DISABLE_IT();
 1646              		.loc 1 788 3
 1647 0074 2B4B     		ldr	r3, .L121+4
 1648 0076 D3F8A030 		ldr	r3, [r3, #160]
 1649 007a 2A4A     		ldr	r2, .L121+4
 1650 007c 23F01003 		bic	r3, r3, #16
 1651 0080 C2F8A030 		str	r3, [r2, #160]
 789:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   __HAL_PWR_VCOREVM_EXTI_DISABLE_RISING_EDGE();
 1652              		.loc 1 789 3
 1653 0084 274B     		ldr	r3, .L121+4
 1654 0086 1B6C     		ldr	r3, [r3, #64]
 1655 0088 264A     		ldr	r2, .L121+4
 1656 008a 23F01003 		bic	r3, r3, #16
 1657 008e 1364     		str	r3, [r2, #64]
 790:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   __HAL_PWR_VCOREVM_EXTI_DISABLE_FALLING_EDGE();
 1658              		.loc 1 790 3
 1659 0090 244B     		ldr	r3, .L121+4
 1660 0092 5B6C     		ldr	r3, [r3, #68]
 1661 0094 234A     		ldr	r2, .L121+4
 1662 0096 23F01003 		bic	r3, r3, #16
ARM GAS  /tmp/ccsGrD0t.s 			page 51


 1663 009a 5364     		str	r3, [r2, #68]
 791:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 792:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Set the VDDCORE voltage detector low-level selection */
 793:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->CR3, PWR_CR3_VCORELLS_Msk, pConfigVddCOREVM->LowVoltageThreshold);
 1664              		.loc 1 793 3
 1665 009c 224B     		ldr	r3, .L121+8
 1666 009e 9B68     		ldr	r3, [r3, #8]
 1667 00a0 23F01002 		bic	r2, r3, #16
 1668 00a4 7B68     		ldr	r3, [r7, #4]
 1669 00a6 1B68     		ldr	r3, [r3]
 1670 00a8 1F49     		ldr	r1, .L121+8
 1671 00aa 1343     		orrs	r3, r3, r2
 1672 00ac 8B60     		str	r3, [r1, #8]
 794:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 795:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Configure the VDDCORE monitoring in interrupt mode */
 796:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if ((pConfigVddCOREVM->Mode & VDDCOREVM_MODE_IT) == VDDCOREVM_MODE_IT)
 1673              		.loc 1 796 24
 1674 00ae 7B68     		ldr	r3, [r7, #4]
 1675 00b0 5B68     		ldr	r3, [r3, #4]
 1676              		.loc 1 796 31
 1677 00b2 03F00403 		and	r3, r3, #4
 1678              		.loc 1 796 6
 1679 00b6 002B     		cmp	r3, #0
 1680 00b8 07D0     		beq	.L116
 797:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
 798:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     __HAL_PWR_VCOREVM_EXTI_ENABLE_IT();
 1681              		.loc 1 798 5
 1682 00ba 1A4B     		ldr	r3, .L121+4
 1683 00bc D3F8A030 		ldr	r3, [r3, #160]
 1684 00c0 184A     		ldr	r2, .L121+4
 1685 00c2 43F01003 		orr	r3, r3, #16
 1686 00c6 C2F8A030 		str	r3, [r2, #160]
 1687              	.L116:
 799:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
 800:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 801:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Configure the VDDCORE monitoring in event mode */
 802:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if ((pConfigVddCOREVM->Mode & VDDCOREVM_MODE_EVT) == VDDCOREVM_MODE_EVT)
 1688              		.loc 1 802 24
 1689 00ca 7B68     		ldr	r3, [r7, #4]
 1690 00cc 5B68     		ldr	r3, [r3, #4]
 1691              		.loc 1 802 31
 1692 00ce 03F00803 		and	r3, r3, #8
 1693              		.loc 1 802 6
 1694 00d2 002B     		cmp	r3, #0
 1695 00d4 07D0     		beq	.L117
 803:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
 804:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     __HAL_PWR_VCOREVM_EXTI_ENABLE_EVENT();
 1696              		.loc 1 804 5
 1697 00d6 134B     		ldr	r3, .L121+4
 1698 00d8 D3F8A430 		ldr	r3, [r3, #164]
 1699 00dc 114A     		ldr	r2, .L121+4
 1700 00de 43F01003 		orr	r3, r3, #16
 1701 00e2 C2F8A430 		str	r3, [r2, #164]
 1702              	.L117:
 805:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
 806:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 807:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Rising edge configuration */
ARM GAS  /tmp/ccsGrD0t.s 			page 52


 808:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if ((pConfigVddCOREVM->Mode & VDDCOREVM_RISING_EDGE) == VDDCOREVM_RISING_EDGE)
 1703              		.loc 1 808 24
 1704 00e6 7B68     		ldr	r3, [r7, #4]
 1705 00e8 5B68     		ldr	r3, [r3, #4]
 1706              		.loc 1 808 31
 1707 00ea 03F00103 		and	r3, r3, #1
 1708              		.loc 1 808 6
 1709 00ee 002B     		cmp	r3, #0
 1710 00f0 05D0     		beq	.L118
 809:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
 810:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     __HAL_PWR_VCOREVM_EXTI_ENABLE_RISING_EDGE();
 1711              		.loc 1 810 5
 1712 00f2 0C4B     		ldr	r3, .L121+4
 1713 00f4 1B6C     		ldr	r3, [r3, #64]
 1714 00f6 0B4A     		ldr	r2, .L121+4
 1715 00f8 43F01003 		orr	r3, r3, #16
 1716 00fc 1364     		str	r3, [r2, #64]
 1717              	.L118:
 811:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
 812:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 813:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Falling edge configuration */
 814:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if ((pConfigVddCOREVM->Mode & VDDCOREVM_FALLING_EDGE) == VDDCOREVM_FALLING_EDGE)
 1718              		.loc 1 814 24
 1719 00fe 7B68     		ldr	r3, [r7, #4]
 1720 0100 5B68     		ldr	r3, [r3, #4]
 1721              		.loc 1 814 31
 1722 0102 03F00203 		and	r3, r3, #2
 1723              		.loc 1 814 6
 1724 0106 002B     		cmp	r3, #0
 1725 0108 05D0     		beq	.L120
 815:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
 816:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     __HAL_PWR_VCOREVM_EXTI_ENABLE_FALLING_EDGE();
 1726              		.loc 1 816 5
 1727 010a 064B     		ldr	r3, .L121+4
 1728 010c 5B6C     		ldr	r3, [r3, #68]
 1729 010e 054A     		ldr	r2, .L121+4
 1730 0110 43F01003 		orr	r3, r3, #16
 1731 0114 5364     		str	r3, [r2, #68]
 1732              	.L120:
 817:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
 818:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 1733              		.loc 1 818 1
 1734 0116 00BF     		nop
 1735 0118 0837     		adds	r7, r7, #8
 1736              		.cfi_def_cfa_offset 8
 1737 011a BD46     		mov	sp, r7
 1738              		.cfi_def_cfa_register 13
 1739              		@ sp needed
 1740 011c 80BD     		pop	{r7, pc}
 1741              	.L122:
 1742 011e 00BF     		.align	2
 1743              	.L121:
 1744 0120 00000000 		.word	.LC0
 1745 0124 00500256 		.word	1442992128
 1746 0128 00480256 		.word	1442990080
 1747              		.cfi_endproc
 1748              	.LFE860:
ARM GAS  /tmp/ccsGrD0t.s 			page 53


 1750              		.section	.text.HAL_PWREx_GetVDDCORELevel,"ax",%progbits
 1751              		.align	1
 1752              		.global	HAL_PWREx_GetVDDCORELevel
 1753              		.syntax unified
 1754              		.thumb
 1755              		.thumb_func
 1757              	HAL_PWREx_GetVDDCORELevel:
 1758              	.LFB861:
 819:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 820:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 821:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief Indicate whether the VDDCORE level is between, above or below
 822:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *        the thresholds.
 823:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval VDDCORE level.
 824:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 825:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetVDDCORELevel(void)
 826:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 1759              		.loc 1 826 1
 1760              		.cfi_startproc
 1761              		@ args = 0, pretend = 0, frame = 8
 1762              		@ frame_needed = 1, uses_anonymous_args = 0
 1763              		@ link register save eliminated.
 1764 0000 80B4     		push	{r7}
 1765              		.cfi_def_cfa_offset 4
 1766              		.cfi_offset 7, -4
 1767 0002 83B0     		sub	sp, sp, #12
 1768              		.cfi_def_cfa_offset 16
 1769 0004 00AF     		add	r7, sp, #0
 1770              		.cfi_def_cfa_register 7
 827:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   uint32_t vcoreLevel;
 828:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   uint32_t regValue;
 829:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 830:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Read the VCORE flags */
 831:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   regValue = READ_BIT(PWR->CR3, (PWR_CR3_VCOREH | PWR_CR3_VCOREL));
 1771              		.loc 1 831 14
 1772 0006 0F4B     		ldr	r3, .L128
 1773 0008 9B68     		ldr	r3, [r3, #8]
 1774              		.loc 1 831 12
 1775 000a 03F44073 		and	r3, r3, #768
 1776 000e 3B60     		str	r3, [r7]
 832:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 833:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check if the VCORE is below the threshold */
 834:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if (regValue == PWR_CR3_VCOREL)
 1777              		.loc 1 834 6
 1778 0010 3B68     		ldr	r3, [r7]
 1779 0012 B3F5807F 		cmp	r3, #256
 1780 0016 03D1     		bne	.L124
 835:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
 836:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     vcoreLevel = PWR_VDDCORE_BELOW_LOW_THRESHOLD;
 1781              		.loc 1 836 16
 1782 0018 4FF48073 		mov	r3, #256
 1783 001c 7B60     		str	r3, [r7, #4]
 1784 001e 09E0     		b	.L125
 1785              	.L124:
 837:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
 838:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check if the VCORE is above the threshold */
 839:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   else if (regValue == PWR_CR3_VCOREH)
 1786              		.loc 1 839 11
ARM GAS  /tmp/ccsGrD0t.s 			page 54


 1787 0020 3B68     		ldr	r3, [r7]
 1788 0022 B3F5007F 		cmp	r3, #512
 1789 0026 03D1     		bne	.L126
 840:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
 841:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     vcoreLevel = PWR_VDDCORE_ABOVE_HIGH_THRESHOLD;
 1790              		.loc 1 841 16
 1791 0028 4FF40073 		mov	r3, #512
 1792 002c 7B60     		str	r3, [r7, #4]
 1793 002e 01E0     		b	.L125
 1794              	.L126:
 842:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
 843:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* The VCORE is between the thresholds */
 844:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   else
 845:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
 846:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     vcoreLevel = PWR_VDDCORE_BETWEEN_HIGH_LOW_THRESHOLD;
 1795              		.loc 1 846 16
 1796 0030 0023     		movs	r3, #0
 1797 0032 7B60     		str	r3, [r7, #4]
 1798              	.L125:
 847:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
 848:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 849:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   return vcoreLevel;
 1799              		.loc 1 849 10
 1800 0034 7B68     		ldr	r3, [r7, #4]
 850:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 1801              		.loc 1 850 1
 1802 0036 1846     		mov	r0, r3
 1803 0038 0C37     		adds	r7, r7, #12
 1804              		.cfi_def_cfa_offset 4
 1805 003a BD46     		mov	sp, r7
 1806              		.cfi_def_cfa_register 13
 1807              		@ sp needed
 1808 003c 5DF8047B 		ldr	r7, [sp], #4
 1809              		.cfi_restore 7
 1810              		.cfi_def_cfa_offset 0
 1811 0040 7047     		bx	lr
 1812              	.L129:
 1813 0042 00BF     		.align	2
 1814              	.L128:
 1815 0044 00480256 		.word	1442990080
 1816              		.cfi_endproc
 1817              	.LFE861:
 1819              		.section	.text.HAL_PWREx_ConfigVddIORange,"ax",%progbits
 1820              		.align	1
 1821              		.global	HAL_PWREx_ConfigVddIORange
 1822              		.syntax unified
 1823              		.thumb
 1824              		.thumb_func
 1826              	HAL_PWREx_ConfigVddIORange:
 1827              	.LFB862:
 851:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 852:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 853:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Configure the VDD I/O voltage range.
 854:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @param  VddIOPort VDD I/O
 855:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
 856:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *           @arg @ref PWR_VDDIO           Vdd IO
 857:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *           @arg @ref PWR_VDDIO2          Vdd IO2
ARM GAS  /tmp/ccsGrD0t.s 			page 55


 858:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *           @arg @ref PWR_VDDIO3          Vdd IO3
 859:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *           @arg @ref PWR_VDDIO4          Vdd IO4
 860:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *           @arg @ref PWR_VDDIO5          Vdd IO5
 861:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @param  VoltageRange Voltage range
 862:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
 863:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *           @arg @ref PWR_VDDIO_RANGE_3V3   3v3 voltage range
 864:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *           @arg @ref PWR_VDDIO_RANGE_1V8   1v8 voltage range
 865:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note   HSLV_VDDIOx option bit must be set to allow 1v8 voltage
 866:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *         range operation.
 867:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note   Setting this configuration while VDDIOx is in 3v3 range
 868:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *         damages the device.
 869:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
 870:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 871:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_ConfigVddIORange(uint32_t VddIOPort, uint32_t VoltageRange)
 872:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 1828              		.loc 1 872 1
 1829              		.cfi_startproc
 1830              		@ args = 0, pretend = 0, frame = 8
 1831              		@ frame_needed = 1, uses_anonymous_args = 0
 1832 0000 80B5     		push	{r7, lr}
 1833              		.cfi_def_cfa_offset 8
 1834              		.cfi_offset 7, -8
 1835              		.cfi_offset 14, -4
 1836 0002 82B0     		sub	sp, sp, #8
 1837              		.cfi_def_cfa_offset 16
 1838 0004 00AF     		add	r7, sp, #0
 1839              		.cfi_def_cfa_register 7
 1840 0006 7860     		str	r0, [r7, #4]
 1841 0008 3960     		str	r1, [r7]
 873:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check the parameters */
 874:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   assert_param(IS_PWR_VDDIO(VddIOPort));
 1842              		.loc 1 874 3
 1843 000a 7B68     		ldr	r3, [r7, #4]
 1844 000c 002B     		cmp	r3, #0
 1845 000e 10D0     		beq	.L131
 1846              		.loc 1 874 3 is_stmt 0 discriminator 1
 1847 0010 7B68     		ldr	r3, [r7, #4]
 1848 0012 012B     		cmp	r3, #1
 1849 0014 0DD0     		beq	.L131
 1850              		.loc 1 874 3 discriminator 2
 1851 0016 7B68     		ldr	r3, [r7, #4]
 1852 0018 022B     		cmp	r3, #2
 1853 001a 0AD0     		beq	.L131
 1854              		.loc 1 874 3 discriminator 3
 1855 001c 7B68     		ldr	r3, [r7, #4]
 1856 001e 032B     		cmp	r3, #3
 1857 0020 07D0     		beq	.L131
 1858              		.loc 1 874 3 discriminator 4
 1859 0022 7B68     		ldr	r3, [r7, #4]
 1860 0024 042B     		cmp	r3, #4
 1861 0026 04D0     		beq	.L131
 1862              		.loc 1 874 3 discriminator 5
 1863 0028 40F26A31 		movw	r1, #874
 1864 002c 2A48     		ldr	r0, .L142
 1865 002e FFF7FEFF 		bl	assert_failed
 1866              	.L131:
 875:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
ARM GAS  /tmp/ccsGrD0t.s 			page 56


 1867              		.loc 1 875 3 is_stmt 1
 1868 0032 3B68     		ldr	r3, [r7]
 1869 0034 002B     		cmp	r3, #0
 1870 0036 07D0     		beq	.L132
 1871              		.loc 1 875 3 is_stmt 0 discriminator 1
 1872 0038 3B68     		ldr	r3, [r7]
 1873 003a 012B     		cmp	r3, #1
 1874 003c 04D0     		beq	.L132
 1875              		.loc 1 875 3 discriminator 2
 1876 003e 40F26B31 		movw	r1, #875
 1877 0042 2548     		ldr	r0, .L142
 1878 0044 FFF7FEFF 		bl	assert_failed
 1879              	.L132:
 876:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 877:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   switch (VddIOPort)
 1880              		.loc 1 877 3 is_stmt 1
 1881 0048 7B68     		ldr	r3, [r7, #4]
 1882 004a 042B     		cmp	r3, #4
 1883 004c 3ED8     		bhi	.L141
 1884 004e 01A2     		adr	r2, .L135
 1885 0050 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1886              		.p2align 2
 1887              	.L135:
 1888 0054 69000000 		.word	.L139+1
 1889 0058 7D000000 		.word	.L138+1
 1890 005c 91000000 		.word	.L137+1
 1891 0060 A5000000 		.word	.L136+1
 1892 0064 B9000000 		.word	.L134+1
 1893              		.p2align 1
 1894              	.L139:
 878:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
 879:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     case PWR_VDDIO:
 880:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIOVRSEL, VoltageRange << PWR_SVMCR3_VDDIOVRSEL_Pos);
 1895              		.loc 1 880 7
 1896 0068 1C4B     		ldr	r3, .L142+4
 1897 006a DB6B     		ldr	r3, [r3, #60]
 1898 006c 23F08072 		bic	r2, r3, #16777216
 1899 0070 3B68     		ldr	r3, [r7]
 1900 0072 1B06     		lsls	r3, r3, #24
 1901 0074 1949     		ldr	r1, .L142+4
 1902 0076 1343     		orrs	r3, r3, r2
 1903 0078 CB63     		str	r3, [r1, #60]
 881:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       break;
 1904              		.loc 1 881 7
 1905 007a 28E0     		b	.L140
 1906              	.L138:
 882:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 883:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     case PWR_VDDIO2:
 884:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
 1907              		.loc 1 884 7
 1908 007c 174B     		ldr	r3, .L142+4
 1909 007e DB6B     		ldr	r3, [r3, #60]
 1910 0080 23F00072 		bic	r2, r3, #33554432
 1911 0084 3B68     		ldr	r3, [r7]
 1912 0086 5B06     		lsls	r3, r3, #25
 1913 0088 1449     		ldr	r1, .L142+4
 1914 008a 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccsGrD0t.s 			page 57


 1915 008c CB63     		str	r3, [r1, #60]
 885:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       break;
 1916              		.loc 1 885 7
 1917 008e 1EE0     		b	.L140
 1918              	.L137:
 886:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 887:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     case PWR_VDDIO3:
 888:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
 1919              		.loc 1 888 7
 1920 0090 124B     		ldr	r3, .L142+4
 1921 0092 DB6B     		ldr	r3, [r3, #60]
 1922 0094 23F08062 		bic	r2, r3, #67108864
 1923 0098 3B68     		ldr	r3, [r7]
 1924 009a 9B06     		lsls	r3, r3, #26
 1925 009c 0F49     		ldr	r1, .L142+4
 1926 009e 1343     		orrs	r3, r3, r2
 1927 00a0 CB63     		str	r3, [r1, #60]
 889:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       break;
 1928              		.loc 1 889 7
 1929 00a2 14E0     		b	.L140
 1930              	.L136:
 890:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 891:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     case PWR_VDDIO4:
 892:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       MODIFY_REG(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSEL, VoltageRange << PWR_SVMCR1_VDDIO4VRSEL_Pos);
 1931              		.loc 1 892 7
 1932 00a4 0D4B     		ldr	r3, .L142+4
 1933 00a6 5B6B     		ldr	r3, [r3, #52]
 1934 00a8 23F08072 		bic	r2, r3, #16777216
 1935 00ac 3B68     		ldr	r3, [r7]
 1936 00ae 1B06     		lsls	r3, r3, #24
 1937 00b0 0A49     		ldr	r1, .L142+4
 1938 00b2 1343     		orrs	r3, r3, r2
 1939 00b4 4B63     		str	r3, [r1, #52]
 893:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       break;
 1940              		.loc 1 893 7
 1941 00b6 0AE0     		b	.L140
 1942              	.L134:
 894:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 895:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     case PWR_VDDIO5:
 896:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       MODIFY_REG(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSEL, VoltageRange << PWR_SVMCR2_VDDIO5VRSEL_Pos);
 1943              		.loc 1 896 7
 1944 00b8 084B     		ldr	r3, .L142+4
 1945 00ba 9B6B     		ldr	r3, [r3, #56]
 1946 00bc 23F08072 		bic	r2, r3, #16777216
 1947 00c0 3B68     		ldr	r3, [r7]
 1948 00c2 1B06     		lsls	r3, r3, #24
 1949 00c4 0549     		ldr	r1, .L142+4
 1950 00c6 1343     		orrs	r3, r3, r2
 1951 00c8 8B63     		str	r3, [r1, #56]
 897:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       break;
 1952              		.loc 1 897 7
 1953 00ca 00E0     		b	.L140
 1954              	.L141:
 898:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 899:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     default:
 900:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       break;
 1955              		.loc 1 900 7
ARM GAS  /tmp/ccsGrD0t.s 			page 58


 1956 00cc 00BF     		nop
 1957              	.L140:
 901:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
 902:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 1958              		.loc 1 902 1
 1959 00ce 00BF     		nop
 1960 00d0 0837     		adds	r7, r7, #8
 1961              		.cfi_def_cfa_offset 8
 1962 00d2 BD46     		mov	sp, r7
 1963              		.cfi_def_cfa_register 13
 1964              		@ sp needed
 1965 00d4 80BD     		pop	{r7, pc}
 1966              	.L143:
 1967 00d6 00BF     		.align	2
 1968              	.L142:
 1969 00d8 00000000 		.word	.LC0
 1970 00dc 00480256 		.word	1442990080
 1971              		.cfi_endproc
 1972              	.LFE862:
 1974              		.section	.text.HAL_PWREx_GetVddIORange,"ax",%progbits
 1975              		.align	1
 1976              		.global	HAL_PWREx_GetVddIORange
 1977              		.syntax unified
 1978              		.thumb
 1979              		.thumb_func
 1981              	HAL_PWREx_GetVddIORange:
 1982              	.LFB863:
 903:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 904:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 905:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Configure the VDD I/O voltage range.
 906:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @param  VddIOPort VDD I/O
 907:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
 908:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *           @arg @ref PWR_VDDIO           Vdd IO
 909:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *           @arg @ref PWR_VDDIO2          Vdd IO2
 910:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *           @arg @ref PWR_VDDIO3          Vdd IO3
 911:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *           @arg @ref PWR_VDDIO4          Vdd IO4
 912:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *           @arg @ref PWR_VDDIO5          Vdd IO5
 913:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval The voltage range:
 914:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *           @arg @ref PWR_VDDIO_RANGE_3V3   3v3 voltage range
 915:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *           @arg @ref PWR_VDDIO_RANGE_1V8   1v8 voltage range
 916:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 917:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetVddIORange(uint32_t VddIOPort)
 918:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 1983              		.loc 1 918 1
 1984              		.cfi_startproc
 1985              		@ args = 0, pretend = 0, frame = 16
 1986              		@ frame_needed = 1, uses_anonymous_args = 0
 1987 0000 80B5     		push	{r7, lr}
 1988              		.cfi_def_cfa_offset 8
 1989              		.cfi_offset 7, -8
 1990              		.cfi_offset 14, -4
 1991 0002 84B0     		sub	sp, sp, #16
 1992              		.cfi_def_cfa_offset 24
 1993 0004 00AF     		add	r7, sp, #0
 1994              		.cfi_def_cfa_register 7
 1995 0006 7860     		str	r0, [r7, #4]
 919:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   uint32_t voltage_range = 0U;
ARM GAS  /tmp/ccsGrD0t.s 			page 59


 1996              		.loc 1 919 12
 1997 0008 0023     		movs	r3, #0
 1998 000a FB60     		str	r3, [r7, #12]
 920:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 921:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check the parameters */
 922:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   assert_param(IS_PWR_VDDIO(VddIOPort));
 1999              		.loc 1 922 3
 2000 000c 7B68     		ldr	r3, [r7, #4]
 2001 000e 002B     		cmp	r3, #0
 2002 0010 10D0     		beq	.L145
 2003              		.loc 1 922 3 is_stmt 0 discriminator 1
 2004 0012 7B68     		ldr	r3, [r7, #4]
 2005 0014 012B     		cmp	r3, #1
 2006 0016 0DD0     		beq	.L145
 2007              		.loc 1 922 3 discriminator 2
 2008 0018 7B68     		ldr	r3, [r7, #4]
 2009 001a 022B     		cmp	r3, #2
 2010 001c 0AD0     		beq	.L145
 2011              		.loc 1 922 3 discriminator 3
 2012 001e 7B68     		ldr	r3, [r7, #4]
 2013 0020 032B     		cmp	r3, #3
 2014 0022 07D0     		beq	.L145
 2015              		.loc 1 922 3 discriminator 4
 2016 0024 7B68     		ldr	r3, [r7, #4]
 2017 0026 042B     		cmp	r3, #4
 2018 0028 04D0     		beq	.L145
 2019              		.loc 1 922 3 discriminator 5
 2020 002a 40F29A31 		movw	r1, #922
 2021 002e 1E48     		ldr	r0, .L156
 2022 0030 FFF7FEFF 		bl	assert_failed
 2023              	.L145:
 923:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 924:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   switch (VddIOPort)
 2024              		.loc 1 924 3 is_stmt 1
 2025 0034 7B68     		ldr	r3, [r7, #4]
 2026 0036 042B     		cmp	r3, #4
 2027 0038 2FD8     		bhi	.L155
 2028 003a 01A2     		adr	r2, .L148
 2029 003c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2030              		.p2align 2
 2031              	.L148:
 2032 0040 55000000 		.word	.L152+1
 2033 0044 63000000 		.word	.L151+1
 2034 0048 71000000 		.word	.L150+1
 2035 004c 7F000000 		.word	.L149+1
 2036 0050 8D000000 		.word	.L147+1
 2037              		.p2align 1
 2038              	.L152:
 925:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
 926:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     case PWR_VDDIO:
 927:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       voltage_range = (READ_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIOVRSEL) >> PWR_SVMCR3_VDDIOVRSEL_Pos);
 2039              		.loc 1 927 24
 2040 0054 154B     		ldr	r3, .L156+4
 2041 0056 DB6B     		ldr	r3, [r3, #60]
 2042              		.loc 1 927 69
 2043 0058 1B0E     		lsrs	r3, r3, #24
 2044              		.loc 1 927 21
ARM GAS  /tmp/ccsGrD0t.s 			page 60


 2045 005a 03F00103 		and	r3, r3, #1
 2046 005e FB60     		str	r3, [r7, #12]
 928:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       break;
 2047              		.loc 1 928 7
 2048 0060 1CE0     		b	.L153
 2049              	.L151:
 929:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 930:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     case PWR_VDDIO2:
 931:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       voltage_range = (READ_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL) >> PWR_SVMCR3_VDDIO2VRSEL_Pos)
 2050              		.loc 1 931 24
 2051 0062 124B     		ldr	r3, .L156+4
 2052 0064 DB6B     		ldr	r3, [r3, #60]
 2053              		.loc 1 931 70
 2054 0066 5B0E     		lsrs	r3, r3, #25
 2055              		.loc 1 931 21
 2056 0068 03F00103 		and	r3, r3, #1
 2057 006c FB60     		str	r3, [r7, #12]
 932:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       break;
 2058              		.loc 1 932 7
 2059 006e 15E0     		b	.L153
 2060              	.L150:
 933:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 934:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     case PWR_VDDIO3:
 935:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       voltage_range = (READ_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL) >> PWR_SVMCR3_VDDIO3VRSEL_Pos)
 2061              		.loc 1 935 24
 2062 0070 0E4B     		ldr	r3, .L156+4
 2063 0072 DB6B     		ldr	r3, [r3, #60]
 2064              		.loc 1 935 70
 2065 0074 9B0E     		lsrs	r3, r3, #26
 2066              		.loc 1 935 21
 2067 0076 03F00103 		and	r3, r3, #1
 2068 007a FB60     		str	r3, [r7, #12]
 936:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       break;
 2069              		.loc 1 936 7
 2070 007c 0EE0     		b	.L153
 2071              	.L149:
 937:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 938:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     case PWR_VDDIO4:
 939:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       voltage_range = (READ_BIT(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSEL) >> PWR_SVMCR1_VDDIO4VRSEL_Pos)
 2072              		.loc 1 939 24
 2073 007e 0B4B     		ldr	r3, .L156+4
 2074 0080 5B6B     		ldr	r3, [r3, #52]
 2075              		.loc 1 939 70
 2076 0082 1B0E     		lsrs	r3, r3, #24
 2077              		.loc 1 939 21
 2078 0084 03F00103 		and	r3, r3, #1
 2079 0088 FB60     		str	r3, [r7, #12]
 940:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       break;
 2080              		.loc 1 940 7
 2081 008a 07E0     		b	.L153
 2082              	.L147:
 941:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 942:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     case PWR_VDDIO5:
 943:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       voltage_range = (READ_BIT(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSEL) >> PWR_SVMCR2_VDDIO5VRSEL_Pos)
 2083              		.loc 1 943 24
 2084 008c 074B     		ldr	r3, .L156+4
 2085 008e 9B6B     		ldr	r3, [r3, #56]
ARM GAS  /tmp/ccsGrD0t.s 			page 61


 2086              		.loc 1 943 70
 2087 0090 1B0E     		lsrs	r3, r3, #24
 2088              		.loc 1 943 21
 2089 0092 03F00103 		and	r3, r3, #1
 2090 0096 FB60     		str	r3, [r7, #12]
 944:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       break;
 2091              		.loc 1 944 7
 2092 0098 00E0     		b	.L153
 2093              	.L155:
 945:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 946:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     default:
 947:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       break;
 2094              		.loc 1 947 7
 2095 009a 00BF     		nop
 2096              	.L153:
 948:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
 949:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   return voltage_range;
 2097              		.loc 1 949 10
 2098 009c FB68     		ldr	r3, [r7, #12]
 950:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2099              		.loc 1 950 1
 2100 009e 1846     		mov	r0, r3
 2101 00a0 1037     		adds	r7, r7, #16
 2102              		.cfi_def_cfa_offset 8
 2103 00a2 BD46     		mov	sp, r7
 2104              		.cfi_def_cfa_register 13
 2105              		@ sp needed
 2106 00a4 80BD     		pop	{r7, pc}
 2107              	.L157:
 2108 00a6 00BF     		.align	2
 2109              	.L156:
 2110 00a8 00000000 		.word	.LC0
 2111 00ac 00480256 		.word	1442990080
 2112              		.cfi_endproc
 2113              	.LFE863:
 2115              		.section	.text.HAL_PWREx_EnableVddIO4RangeSTBY,"ax",%progbits
 2116              		.align	1
 2117              		.global	HAL_PWREx_EnableVddIO4RangeSTBY
 2118              		.syntax unified
 2119              		.thumb
 2120              		.thumb_func
 2122              	HAL_PWREx_EnableVddIO4RangeSTBY:
 2123              	.LFB864:
 951:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 952:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 953:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Enable VDD IO4 voltage range Standby mode.
 954:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note   When this bit is set, the VDDIO4VRSEL configuration
 955:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *         is retained in Standby mode.
 956:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note   This bit must be set if the VDDIO4 is in 1v8 range
 957:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *         in Standby mode, and when exiting Standby mode.
 958:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note   It must not be set when VDDIO4 is in 3v3 range in
 959:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *         Standby mode, or when exiting Standby mode.
 960:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
 961:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 962:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableVddIO4RangeSTBY(void)
 963:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2124              		.loc 1 963 1
ARM GAS  /tmp/ccsGrD0t.s 			page 62


 2125              		.cfi_startproc
 2126              		@ args = 0, pretend = 0, frame = 0
 2127              		@ frame_needed = 1, uses_anonymous_args = 0
 2128              		@ link register save eliminated.
 2129 0000 80B4     		push	{r7}
 2130              		.cfi_def_cfa_offset 4
 2131              		.cfi_offset 7, -4
 2132 0002 00AF     		add	r7, sp, #0
 2133              		.cfi_def_cfa_register 7
 964:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSTBY);
 2134              		.loc 1 964 3
 2135 0004 054B     		ldr	r3, .L159
 2136 0006 5B6B     		ldr	r3, [r3, #52]
 2137 0008 044A     		ldr	r2, .L159
 2138 000a 43F00073 		orr	r3, r3, #33554432
 2139 000e 5363     		str	r3, [r2, #52]
 965:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2140              		.loc 1 965 1
 2141 0010 00BF     		nop
 2142 0012 BD46     		mov	sp, r7
 2143              		.cfi_def_cfa_register 13
 2144              		@ sp needed
 2145 0014 5DF8047B 		ldr	r7, [sp], #4
 2146              		.cfi_restore 7
 2147              		.cfi_def_cfa_offset 0
 2148 0018 7047     		bx	lr
 2149              	.L160:
 2150 001a 00BF     		.align	2
 2151              	.L159:
 2152 001c 00480256 		.word	1442990080
 2153              		.cfi_endproc
 2154              	.LFE864:
 2156              		.section	.text.HAL_PWREx_DisableVddIO4RangeSTBY,"ax",%progbits
 2157              		.align	1
 2158              		.global	HAL_PWREx_DisableVddIO4RangeSTBY
 2159              		.syntax unified
 2160              		.thumb
 2161              		.thumb_func
 2163              	HAL_PWREx_DisableVddIO4RangeSTBY:
 2164              	.LFB865:
 966:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 967:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 968:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Disable VDD IO4 voltage range Standby mode.
 969:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
 970:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 971:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisableVddIO4RangeSTBY(void)
 972:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2165              		.loc 1 972 1
 2166              		.cfi_startproc
 2167              		@ args = 0, pretend = 0, frame = 0
 2168              		@ frame_needed = 1, uses_anonymous_args = 0
 2169              		@ link register save eliminated.
 2170 0000 80B4     		push	{r7}
 2171              		.cfi_def_cfa_offset 4
 2172              		.cfi_offset 7, -4
 2173 0002 00AF     		add	r7, sp, #0
 2174              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccsGrD0t.s 			page 63


 973:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSTBY);
 2175              		.loc 1 973 3
 2176 0004 054B     		ldr	r3, .L162
 2177 0006 5B6B     		ldr	r3, [r3, #52]
 2178 0008 044A     		ldr	r2, .L162
 2179 000a 23F00073 		bic	r3, r3, #33554432
 2180 000e 5363     		str	r3, [r2, #52]
 974:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2181              		.loc 1 974 1
 2182 0010 00BF     		nop
 2183 0012 BD46     		mov	sp, r7
 2184              		.cfi_def_cfa_register 13
 2185              		@ sp needed
 2186 0014 5DF8047B 		ldr	r7, [sp], #4
 2187              		.cfi_restore 7
 2188              		.cfi_def_cfa_offset 0
 2189 0018 7047     		bx	lr
 2190              	.L163:
 2191 001a 00BF     		.align	2
 2192              	.L162:
 2193 001c 00480256 		.word	1442990080
 2194              		.cfi_endproc
 2195              	.LFE865:
 2197              		.section	.text.HAL_PWREx_EnableVddIO5RangeSTBY,"ax",%progbits
 2198              		.align	1
 2199              		.global	HAL_PWREx_EnableVddIO5RangeSTBY
 2200              		.syntax unified
 2201              		.thumb
 2202              		.thumb_func
 2204              	HAL_PWREx_EnableVddIO5RangeSTBY:
 2205              	.LFB866:
 975:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 976:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 977:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Enable VDD IO5 voltage range Standby mode.
 978:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note   When this bit is set, the VDDIO5VRSEL configuration
 979:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *         is retained in Standby mode.
 980:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note   This bit must be set if the VDDIO5 is in 1v8 range
 981:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *         in Standby mode, and when exiting Standby mode.
 982:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note   It must not be set when VDDIO5 is in 3v3 range in
 983:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *         Standby mode, or when exiting Standby mode.
 984:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
 985:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 986:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableVddIO5RangeSTBY(void)
 987:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2206              		.loc 1 987 1
 2207              		.cfi_startproc
 2208              		@ args = 0, pretend = 0, frame = 0
 2209              		@ frame_needed = 1, uses_anonymous_args = 0
 2210              		@ link register save eliminated.
 2211 0000 80B4     		push	{r7}
 2212              		.cfi_def_cfa_offset 4
 2213              		.cfi_offset 7, -4
 2214 0002 00AF     		add	r7, sp, #0
 2215              		.cfi_def_cfa_register 7
 988:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSTBY);
 2216              		.loc 1 988 3
 2217 0004 054B     		ldr	r3, .L165
ARM GAS  /tmp/ccsGrD0t.s 			page 64


 2218 0006 9B6B     		ldr	r3, [r3, #56]
 2219 0008 044A     		ldr	r2, .L165
 2220 000a 43F00073 		orr	r3, r3, #33554432
 2221 000e 9363     		str	r3, [r2, #56]
 989:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2222              		.loc 1 989 1
 2223 0010 00BF     		nop
 2224 0012 BD46     		mov	sp, r7
 2225              		.cfi_def_cfa_register 13
 2226              		@ sp needed
 2227 0014 5DF8047B 		ldr	r7, [sp], #4
 2228              		.cfi_restore 7
 2229              		.cfi_def_cfa_offset 0
 2230 0018 7047     		bx	lr
 2231              	.L166:
 2232 001a 00BF     		.align	2
 2233              	.L165:
 2234 001c 00480256 		.word	1442990080
 2235              		.cfi_endproc
 2236              	.LFE866:
 2238              		.section	.text.HAL_PWREx_DisableVddIO5RangeSTBY,"ax",%progbits
 2239              		.align	1
 2240              		.global	HAL_PWREx_DisableVddIO5RangeSTBY
 2241              		.syntax unified
 2242              		.thumb
 2243              		.thumb_func
 2245              	HAL_PWREx_DisableVddIO5RangeSTBY:
 2246              	.LFB867:
 990:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 991:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
 992:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Disable VDD IO5 voltage range Standby mode.
 993:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
 994:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
 995:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisableVddIO5RangeSTBY(void)
 996:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2247              		.loc 1 996 1
 2248              		.cfi_startproc
 2249              		@ args = 0, pretend = 0, frame = 0
 2250              		@ frame_needed = 1, uses_anonymous_args = 0
 2251              		@ link register save eliminated.
 2252 0000 80B4     		push	{r7}
 2253              		.cfi_def_cfa_offset 4
 2254              		.cfi_offset 7, -4
 2255 0002 00AF     		add	r7, sp, #0
 2256              		.cfi_def_cfa_register 7
 997:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSTBY);
 2257              		.loc 1 997 3
 2258 0004 054B     		ldr	r3, .L168
 2259 0006 9B6B     		ldr	r3, [r3, #56]
 2260 0008 044A     		ldr	r2, .L168
 2261 000a 23F00073 		bic	r3, r3, #33554432
 2262 000e 9363     		str	r3, [r2, #56]
 998:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2263              		.loc 1 998 1
 2264 0010 00BF     		nop
 2265 0012 BD46     		mov	sp, r7
 2266              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccsGrD0t.s 			page 65


 2267              		@ sp needed
 2268 0014 5DF8047B 		ldr	r7, [sp], #4
 2269              		.cfi_restore 7
 2270              		.cfi_def_cfa_offset 0
 2271 0018 7047     		bx	lr
 2272              	.L169:
 2273 001a 00BF     		.align	2
 2274              	.L168:
 2275 001c 00480256 		.word	1442990080
 2276              		.cfi_endproc
 2277              	.LFE867:
 2279              		.section	.text.HAL_PWREx_EnableVddUSB,"ax",%progbits
 2280              		.align	1
 2281              		.global	HAL_PWREx_EnableVddUSB
 2282              		.syntax unified
 2283              		.thumb
 2284              		.thumb_func
 2286              	HAL_PWREx_EnableVddUSB:
 2287              	.LFB868:
 999:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1000:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1001:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Enable VDDUSB supply valid.
1002:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note   Setting this bit is mandatory to use the USB2 HS PHYs.
1003:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *         is present for consumption saving.
1004:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1005:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1006:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableVddUSB(void)
1007:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2288              		.loc 1 1007 1
 2289              		.cfi_startproc
 2290              		@ args = 0, pretend = 0, frame = 0
 2291              		@ frame_needed = 1, uses_anonymous_args = 0
 2292              		@ link register save eliminated.
 2293 0000 80B4     		push	{r7}
 2294              		.cfi_def_cfa_offset 4
 2295              		.cfi_offset 7, -4
 2296 0002 00AF     		add	r7, sp, #0
 2297              		.cfi_def_cfa_register 7
1008:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->SVMCR3, PWR_SVMCR3_USB33SV);
 2298              		.loc 1 1008 3
 2299 0004 054B     		ldr	r3, .L171
 2300 0006 DB6B     		ldr	r3, [r3, #60]
 2301 0008 044A     		ldr	r2, .L171
 2302 000a 43F48063 		orr	r3, r3, #1024
 2303 000e D363     		str	r3, [r2, #60]
1009:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2304              		.loc 1 1009 1
 2305 0010 00BF     		nop
 2306 0012 BD46     		mov	sp, r7
 2307              		.cfi_def_cfa_register 13
 2308              		@ sp needed
 2309 0014 5DF8047B 		ldr	r7, [sp], #4
 2310              		.cfi_restore 7
 2311              		.cfi_def_cfa_offset 0
 2312 0018 7047     		bx	lr
 2313              	.L172:
 2314 001a 00BF     		.align	2
ARM GAS  /tmp/ccsGrD0t.s 			page 66


 2315              	.L171:
 2316 001c 00480256 		.word	1442990080
 2317              		.cfi_endproc
 2318              	.LFE868:
 2320              		.section	.text.HAL_PWREx_DisableVddUSB,"ax",%progbits
 2321              		.align	1
 2322              		.global	HAL_PWREx_DisableVddUSB
 2323              		.syntax unified
 2324              		.thumb
 2325              		.thumb_func
 2327              	HAL_PWREx_DisableVddUSB:
 2328              	.LFB869:
1010:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1011:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1012:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Disable VDDUSB supply valid.
1013:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1014:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1015:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisableVddUSB(void)
1016:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2329              		.loc 1 1016 1
 2330              		.cfi_startproc
 2331              		@ args = 0, pretend = 0, frame = 0
 2332              		@ frame_needed = 1, uses_anonymous_args = 0
 2333              		@ link register save eliminated.
 2334 0000 80B4     		push	{r7}
 2335              		.cfi_def_cfa_offset 4
 2336              		.cfi_offset 7, -4
 2337 0002 00AF     		add	r7, sp, #0
 2338              		.cfi_def_cfa_register 7
1017:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->SVMCR3, PWR_SVMCR3_USB33SV);
 2339              		.loc 1 1017 3
 2340 0004 054B     		ldr	r3, .L174
 2341 0006 DB6B     		ldr	r3, [r3, #60]
 2342 0008 044A     		ldr	r2, .L174
 2343 000a 23F48063 		bic	r3, r3, #1024
 2344 000e D363     		str	r3, [r2, #60]
1018:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2345              		.loc 1 1018 1
 2346 0010 00BF     		nop
 2347 0012 BD46     		mov	sp, r7
 2348              		.cfi_def_cfa_register 13
 2349              		@ sp needed
 2350 0014 5DF8047B 		ldr	r7, [sp], #4
 2351              		.cfi_restore 7
 2352              		.cfi_def_cfa_offset 0
 2353 0018 7047     		bx	lr
 2354              	.L175:
 2355 001a 00BF     		.align	2
 2356              	.L174:
 2357 001c 00480256 		.word	1442990080
 2358              		.cfi_endproc
 2359              	.LFE869:
 2361              		.section	.text.HAL_PWREx_EnableVddIO2,"ax",%progbits
 2362              		.align	1
 2363              		.global	HAL_PWREx_EnableVddIO2
 2364              		.syntax unified
 2365              		.thumb
ARM GAS  /tmp/ccsGrD0t.s 			page 67


 2366              		.thumb_func
 2368              	HAL_PWREx_EnableVddIO2:
 2369              	.LFB870:
1019:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1020:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1021:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Enable VDDIO2 supply valid.
1022:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note   Setting this bit is mandatory to use PO[5:0] and PP[15:0] I/Os.
1023:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1024:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1025:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableVddIO2(void)
1026:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2370              		.loc 1 1026 1
 2371              		.cfi_startproc
 2372              		@ args = 0, pretend = 0, frame = 0
 2373              		@ frame_needed = 1, uses_anonymous_args = 0
 2374              		@ link register save eliminated.
 2375 0000 80B4     		push	{r7}
 2376              		.cfi_def_cfa_offset 4
 2377              		.cfi_offset 7, -4
 2378 0002 00AF     		add	r7, sp, #0
 2379              		.cfi_def_cfa_register 7
1027:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2SV);
 2380              		.loc 1 1027 3
 2381 0004 054B     		ldr	r3, .L177
 2382 0006 DB6B     		ldr	r3, [r3, #60]
 2383 0008 044A     		ldr	r2, .L177
 2384 000a 43F48073 		orr	r3, r3, #256
 2385 000e D363     		str	r3, [r2, #60]
1028:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2386              		.loc 1 1028 1
 2387 0010 00BF     		nop
 2388 0012 BD46     		mov	sp, r7
 2389              		.cfi_def_cfa_register 13
 2390              		@ sp needed
 2391 0014 5DF8047B 		ldr	r7, [sp], #4
 2392              		.cfi_restore 7
 2393              		.cfi_def_cfa_offset 0
 2394 0018 7047     		bx	lr
 2395              	.L178:
 2396 001a 00BF     		.align	2
 2397              	.L177:
 2398 001c 00480256 		.word	1442990080
 2399              		.cfi_endproc
 2400              	.LFE870:
 2402              		.section	.text.HAL_PWREx_DisableVddIO2,"ax",%progbits
 2403              		.align	1
 2404              		.global	HAL_PWREx_DisableVddIO2
 2405              		.syntax unified
 2406              		.thumb
 2407              		.thumb_func
 2409              	HAL_PWREx_DisableVddIO2:
 2410              	.LFB871:
1029:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1030:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1031:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Disable VDDIO2 supply valid.
1032:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1033:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
ARM GAS  /tmp/ccsGrD0t.s 			page 68


1034:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisableVddIO2(void)
1035:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2411              		.loc 1 1035 1
 2412              		.cfi_startproc
 2413              		@ args = 0, pretend = 0, frame = 0
 2414              		@ frame_needed = 1, uses_anonymous_args = 0
 2415              		@ link register save eliminated.
 2416 0000 80B4     		push	{r7}
 2417              		.cfi_def_cfa_offset 4
 2418              		.cfi_offset 7, -4
 2419 0002 00AF     		add	r7, sp, #0
 2420              		.cfi_def_cfa_register 7
1036:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2SV);
 2421              		.loc 1 1036 3
 2422 0004 054B     		ldr	r3, .L180
 2423 0006 DB6B     		ldr	r3, [r3, #60]
 2424 0008 044A     		ldr	r2, .L180
 2425 000a 23F48073 		bic	r3, r3, #256
 2426 000e D363     		str	r3, [r2, #60]
1037:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2427              		.loc 1 1037 1
 2428 0010 00BF     		nop
 2429 0012 BD46     		mov	sp, r7
 2430              		.cfi_def_cfa_register 13
 2431              		@ sp needed
 2432 0014 5DF8047B 		ldr	r7, [sp], #4
 2433              		.cfi_restore 7
 2434              		.cfi_def_cfa_offset 0
 2435 0018 7047     		bx	lr
 2436              	.L181:
 2437 001a 00BF     		.align	2
 2438              	.L180:
 2439 001c 00480256 		.word	1442990080
 2440              		.cfi_endproc
 2441              	.LFE871:
 2443              		.section	.text.HAL_PWREx_EnableVddIO3,"ax",%progbits
 2444              		.align	1
 2445              		.global	HAL_PWREx_EnableVddIO3
 2446              		.syntax unified
 2447              		.thumb
 2448              		.thumb_func
 2450              	HAL_PWREx_EnableVddIO3:
 2451              	.LFB872:
1038:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1039:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1040:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Enable VDDIO3 supply valid.
1041:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
1042:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1043:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1044:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableVddIO3(void)
1045:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2452              		.loc 1 1045 1
 2453              		.cfi_startproc
 2454              		@ args = 0, pretend = 0, frame = 0
 2455              		@ frame_needed = 1, uses_anonymous_args = 0
 2456              		@ link register save eliminated.
 2457 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccsGrD0t.s 			page 69


 2458              		.cfi_def_cfa_offset 4
 2459              		.cfi_offset 7, -4
 2460 0002 00AF     		add	r7, sp, #0
 2461              		.cfi_def_cfa_register 7
1046:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
 2462              		.loc 1 1046 3
 2463 0004 054B     		ldr	r3, .L183
 2464 0006 DB6B     		ldr	r3, [r3, #60]
 2465 0008 044A     		ldr	r2, .L183
 2466 000a 43F40073 		orr	r3, r3, #512
 2467 000e D363     		str	r3, [r2, #60]
1047:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2468              		.loc 1 1047 1
 2469 0010 00BF     		nop
 2470 0012 BD46     		mov	sp, r7
 2471              		.cfi_def_cfa_register 13
 2472              		@ sp needed
 2473 0014 5DF8047B 		ldr	r7, [sp], #4
 2474              		.cfi_restore 7
 2475              		.cfi_def_cfa_offset 0
 2476 0018 7047     		bx	lr
 2477              	.L184:
 2478 001a 00BF     		.align	2
 2479              	.L183:
 2480 001c 00480256 		.word	1442990080
 2481              		.cfi_endproc
 2482              	.LFE872:
 2484              		.section	.text.HAL_PWREx_DisableVddIO3,"ax",%progbits
 2485              		.align	1
 2486              		.global	HAL_PWREx_DisableVddIO3
 2487              		.syntax unified
 2488              		.thumb
 2489              		.thumb_func
 2491              	HAL_PWREx_DisableVddIO3:
 2492              	.LFB873:
1048:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1049:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1050:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Disable VDDIO3 supply valid.
1051:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1052:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1053:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisableVddIO3(void)
1054:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2493              		.loc 1 1054 1
 2494              		.cfi_startproc
 2495              		@ args = 0, pretend = 0, frame = 0
 2496              		@ frame_needed = 1, uses_anonymous_args = 0
 2497              		@ link register save eliminated.
 2498 0000 80B4     		push	{r7}
 2499              		.cfi_def_cfa_offset 4
 2500              		.cfi_offset 7, -4
 2501 0002 00AF     		add	r7, sp, #0
 2502              		.cfi_def_cfa_register 7
1055:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
 2503              		.loc 1 1055 3
 2504 0004 054B     		ldr	r3, .L186
 2505 0006 DB6B     		ldr	r3, [r3, #60]
 2506 0008 044A     		ldr	r2, .L186
ARM GAS  /tmp/ccsGrD0t.s 			page 70


 2507 000a 23F40073 		bic	r3, r3, #512
 2508 000e D363     		str	r3, [r2, #60]
1056:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2509              		.loc 1 1056 1
 2510 0010 00BF     		nop
 2511 0012 BD46     		mov	sp, r7
 2512              		.cfi_def_cfa_register 13
 2513              		@ sp needed
 2514 0014 5DF8047B 		ldr	r7, [sp], #4
 2515              		.cfi_restore 7
 2516              		.cfi_def_cfa_offset 0
 2517 0018 7047     		bx	lr
 2518              	.L187:
 2519 001a 00BF     		.align	2
 2520              	.L186:
 2521 001c 00480256 		.word	1442990080
 2522              		.cfi_endproc
 2523              	.LFE873:
 2525              		.section	.text.HAL_PWREx_EnableVddIO4,"ax",%progbits
 2526              		.align	1
 2527              		.global	HAL_PWREx_EnableVddIO4
 2528              		.syntax unified
 2529              		.thumb
 2530              		.thumb_func
 2532              	HAL_PWREx_EnableVddIO4:
 2533              	.LFB874:
1057:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1058:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1059:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Enable VDDIO4 supply valid.
1060:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note   Setting this bit is mandatory to use PB[9,8], PC[12:6], and PD[2] I/Os.
1061:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1062:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1063:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableVddIO4(void)
1064:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2534              		.loc 1 1064 1
 2535              		.cfi_startproc
 2536              		@ args = 0, pretend = 0, frame = 0
 2537              		@ frame_needed = 1, uses_anonymous_args = 0
 2538              		@ link register save eliminated.
 2539 0000 80B4     		push	{r7}
 2540              		.cfi_def_cfa_offset 4
 2541              		.cfi_offset 7, -4
 2542 0002 00AF     		add	r7, sp, #0
 2543              		.cfi_def_cfa_register 7
1065:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->SVMCR1, PWR_SVMCR1_VDDIO4SV);
 2544              		.loc 1 1065 3
 2545 0004 054B     		ldr	r3, .L189
 2546 0006 5B6B     		ldr	r3, [r3, #52]
 2547 0008 044A     		ldr	r2, .L189
 2548 000a 43F48073 		orr	r3, r3, #256
 2549 000e 5363     		str	r3, [r2, #52]
1066:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2550              		.loc 1 1066 1
 2551 0010 00BF     		nop
 2552 0012 BD46     		mov	sp, r7
 2553              		.cfi_def_cfa_register 13
 2554              		@ sp needed
ARM GAS  /tmp/ccsGrD0t.s 			page 71


 2555 0014 5DF8047B 		ldr	r7, [sp], #4
 2556              		.cfi_restore 7
 2557              		.cfi_def_cfa_offset 0
 2558 0018 7047     		bx	lr
 2559              	.L190:
 2560 001a 00BF     		.align	2
 2561              	.L189:
 2562 001c 00480256 		.word	1442990080
 2563              		.cfi_endproc
 2564              	.LFE874:
 2566              		.section	.text.HAL_PWREx_DisableVddIO4,"ax",%progbits
 2567              		.align	1
 2568              		.global	HAL_PWREx_DisableVddIO4
 2569              		.syntax unified
 2570              		.thumb
 2571              		.thumb_func
 2573              	HAL_PWREx_DisableVddIO4:
 2574              	.LFB875:
1067:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1068:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1069:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Disable VDDIO4 supply valid.
1070:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1071:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1072:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisableVddIO4(void)
1073:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2575              		.loc 1 1073 1
 2576              		.cfi_startproc
 2577              		@ args = 0, pretend = 0, frame = 0
 2578              		@ frame_needed = 1, uses_anonymous_args = 0
 2579              		@ link register save eliminated.
 2580 0000 80B4     		push	{r7}
 2581              		.cfi_def_cfa_offset 4
 2582              		.cfi_offset 7, -4
 2583 0002 00AF     		add	r7, sp, #0
 2584              		.cfi_def_cfa_register 7
1074:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->SVMCR1, PWR_SVMCR1_VDDIO4SV);
 2585              		.loc 1 1074 3
 2586 0004 054B     		ldr	r3, .L192
 2587 0006 5B6B     		ldr	r3, [r3, #52]
 2588 0008 044A     		ldr	r2, .L192
 2589 000a 23F48073 		bic	r3, r3, #256
 2590 000e 5363     		str	r3, [r2, #52]
1075:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2591              		.loc 1 1075 1
 2592 0010 00BF     		nop
 2593 0012 BD46     		mov	sp, r7
 2594              		.cfi_def_cfa_register 13
 2595              		@ sp needed
 2596 0014 5DF8047B 		ldr	r7, [sp], #4
 2597              		.cfi_restore 7
 2598              		.cfi_def_cfa_offset 0
 2599 0018 7047     		bx	lr
 2600              	.L193:
 2601 001a 00BF     		.align	2
 2602              	.L192:
 2603 001c 00480256 		.word	1442990080
 2604              		.cfi_endproc
ARM GAS  /tmp/ccsGrD0t.s 			page 72


 2605              	.LFE875:
 2607              		.section	.text.HAL_PWREx_EnableVddIO5,"ax",%progbits
 2608              		.align	1
 2609              		.global	HAL_PWREx_EnableVddIO5
 2610              		.syntax unified
 2611              		.thumb
 2612              		.thumb_func
 2614              	HAL_PWREx_EnableVddIO5:
 2615              	.LFB876:
1076:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1077:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1078:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Enable VDDIO5 supply valid.
1079:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
1080:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1081:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1082:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableVddIO5(void)
1083:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2616              		.loc 1 1083 1
 2617              		.cfi_startproc
 2618              		@ args = 0, pretend = 0, frame = 0
 2619              		@ frame_needed = 1, uses_anonymous_args = 0
 2620              		@ link register save eliminated.
 2621 0000 80B4     		push	{r7}
 2622              		.cfi_def_cfa_offset 4
 2623              		.cfi_offset 7, -4
 2624 0002 00AF     		add	r7, sp, #0
 2625              		.cfi_def_cfa_register 7
1084:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->SVMCR2, PWR_SVMCR2_VDDIO5SV);
 2626              		.loc 1 1084 3
 2627 0004 054B     		ldr	r3, .L195
 2628 0006 9B6B     		ldr	r3, [r3, #56]
 2629 0008 044A     		ldr	r2, .L195
 2630 000a 43F48073 		orr	r3, r3, #256
 2631 000e 9363     		str	r3, [r2, #56]
1085:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2632              		.loc 1 1085 1
 2633 0010 00BF     		nop
 2634 0012 BD46     		mov	sp, r7
 2635              		.cfi_def_cfa_register 13
 2636              		@ sp needed
 2637 0014 5DF8047B 		ldr	r7, [sp], #4
 2638              		.cfi_restore 7
 2639              		.cfi_def_cfa_offset 0
 2640 0018 7047     		bx	lr
 2641              	.L196:
 2642 001a 00BF     		.align	2
 2643              	.L195:
 2644 001c 00480256 		.word	1442990080
 2645              		.cfi_endproc
 2646              	.LFE876:
 2648              		.section	.text.HAL_PWREx_DisableVddIO5,"ax",%progbits
 2649              		.align	1
 2650              		.global	HAL_PWREx_DisableVddIO5
 2651              		.syntax unified
 2652              		.thumb
 2653              		.thumb_func
 2655              	HAL_PWREx_DisableVddIO5:
ARM GAS  /tmp/ccsGrD0t.s 			page 73


 2656              	.LFB877:
1086:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1087:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1088:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Disable VDDIO5 supply valid.
1089:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1090:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1091:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisableVddIO5(void)
1092:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2657              		.loc 1 1092 1
 2658              		.cfi_startproc
 2659              		@ args = 0, pretend = 0, frame = 0
 2660              		@ frame_needed = 1, uses_anonymous_args = 0
 2661              		@ link register save eliminated.
 2662 0000 80B4     		push	{r7}
 2663              		.cfi_def_cfa_offset 4
 2664              		.cfi_offset 7, -4
 2665 0002 00AF     		add	r7, sp, #0
 2666              		.cfi_def_cfa_register 7
1093:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->SVMCR2, PWR_SVMCR2_VDDIO5SV);
 2667              		.loc 1 1093 3
 2668 0004 054B     		ldr	r3, .L198
 2669 0006 9B6B     		ldr	r3, [r3, #56]
 2670 0008 044A     		ldr	r2, .L198
 2671 000a 23F48073 		bic	r3, r3, #256
 2672 000e 9363     		str	r3, [r2, #56]
1094:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2673              		.loc 1 1094 1
 2674 0010 00BF     		nop
 2675 0012 BD46     		mov	sp, r7
 2676              		.cfi_def_cfa_register 13
 2677              		@ sp needed
 2678 0014 5DF8047B 		ldr	r7, [sp], #4
 2679              		.cfi_restore 7
 2680              		.cfi_def_cfa_offset 0
 2681 0018 7047     		bx	lr
 2682              	.L199:
 2683 001a 00BF     		.align	2
 2684              	.L198:
 2685 001c 00480256 		.word	1442990080
 2686              		.cfi_endproc
 2687              	.LFE877:
 2689              		.section	.text.HAL_PWREx_EnableVddA,"ax",%progbits
 2690              		.align	1
 2691              		.global	HAL_PWREx_EnableVddA
 2692              		.syntax unified
 2693              		.thumb
 2694              		.thumb_func
 2696              	HAL_PWREx_EnableVddA:
 2697              	.LFB878:
1095:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1096:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1097:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Enable VDDA supply valid.
1098:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @note   Setting this bit is mandatory to use the analog to digital converters.
1099:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1100:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1101:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableVddA(void)
1102:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
ARM GAS  /tmp/ccsGrD0t.s 			page 74


 2698              		.loc 1 1102 1
 2699              		.cfi_startproc
 2700              		@ args = 0, pretend = 0, frame = 0
 2701              		@ frame_needed = 1, uses_anonymous_args = 0
 2702              		@ link register save eliminated.
 2703 0000 80B4     		push	{r7}
 2704              		.cfi_def_cfa_offset 4
 2705              		.cfi_offset 7, -4
 2706 0002 00AF     		add	r7, sp, #0
 2707              		.cfi_def_cfa_register 7
1103:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->SVMCR3, PWR_SVMCR3_ASV);
 2708              		.loc 1 1103 3
 2709 0004 054B     		ldr	r3, .L201
 2710 0006 DB6B     		ldr	r3, [r3, #60]
 2711 0008 044A     		ldr	r2, .L201
 2712 000a 43F48053 		orr	r3, r3, #4096
 2713 000e D363     		str	r3, [r2, #60]
1104:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2714              		.loc 1 1104 1
 2715 0010 00BF     		nop
 2716 0012 BD46     		mov	sp, r7
 2717              		.cfi_def_cfa_register 13
 2718              		@ sp needed
 2719 0014 5DF8047B 		ldr	r7, [sp], #4
 2720              		.cfi_restore 7
 2721              		.cfi_def_cfa_offset 0
 2722 0018 7047     		bx	lr
 2723              	.L202:
 2724 001a 00BF     		.align	2
 2725              	.L201:
 2726 001c 00480256 		.word	1442990080
 2727              		.cfi_endproc
 2728              	.LFE878:
 2730              		.section	.text.HAL_PWREx_DisableVddA,"ax",%progbits
 2731              		.align	1
 2732              		.global	HAL_PWREx_DisableVddA
 2733              		.syntax unified
 2734              		.thumb
 2735              		.thumb_func
 2737              	HAL_PWREx_DisableVddA:
 2738              	.LFB879:
1105:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1106:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1107:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Disable VDDA supply valid.
1108:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1109:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1110:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisableVddA(void)
1111:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2739              		.loc 1 1111 1
 2740              		.cfi_startproc
 2741              		@ args = 0, pretend = 0, frame = 0
 2742              		@ frame_needed = 1, uses_anonymous_args = 0
 2743              		@ link register save eliminated.
 2744 0000 80B4     		push	{r7}
 2745              		.cfi_def_cfa_offset 4
 2746              		.cfi_offset 7, -4
 2747 0002 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccsGrD0t.s 			page 75


 2748              		.cfi_def_cfa_register 7
1112:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->SVMCR3, PWR_SVMCR3_ASV);
 2749              		.loc 1 1112 3
 2750 0004 054B     		ldr	r3, .L204
 2751 0006 DB6B     		ldr	r3, [r3, #60]
 2752 0008 044A     		ldr	r2, .L204
 2753 000a 23F48053 		bic	r3, r3, #4096
 2754 000e D363     		str	r3, [r2, #60]
1113:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2755              		.loc 1 1113 1
 2756 0010 00BF     		nop
 2757 0012 BD46     		mov	sp, r7
 2758              		.cfi_def_cfa_register 13
 2759              		@ sp needed
 2760 0014 5DF8047B 		ldr	r7, [sp], #4
 2761              		.cfi_restore 7
 2762              		.cfi_def_cfa_offset 0
 2763 0018 7047     		bx	lr
 2764              	.L205:
 2765 001a 00BF     		.align	2
 2766              	.L204:
 2767 001c 00480256 		.word	1442990080
 2768              		.cfi_endproc
 2769              	.LFE879:
 2771              		.section	.text.HAL_PWREx_EnableVddUSBVMEN,"ax",%progbits
 2772              		.align	1
 2773              		.global	HAL_PWREx_EnableVddUSBVMEN
 2774              		.syntax unified
 2775              		.thumb
 2776              		.thumb_func
 2778              	HAL_PWREx_EnableVddUSBVMEN:
 2779              	.LFB880:
1114:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1115:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1116:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Enable the VDD33USB independent USB 33 voltage monitor.
1117:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1118:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1119:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableVddUSBVMEN(void)
1120:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2780              		.loc 1 1120 1
 2781              		.cfi_startproc
 2782              		@ args = 0, pretend = 0, frame = 0
 2783              		@ frame_needed = 1, uses_anonymous_args = 0
 2784              		@ link register save eliminated.
 2785 0000 80B4     		push	{r7}
 2786              		.cfi_def_cfa_offset 4
 2787              		.cfi_offset 7, -4
 2788 0002 00AF     		add	r7, sp, #0
 2789              		.cfi_def_cfa_register 7
1121:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->SVMCR3, PWR_SVMCR3_USB33VMEN);
 2790              		.loc 1 1121 3
 2791 0004 054B     		ldr	r3, .L207
 2792 0006 DB6B     		ldr	r3, [r3, #60]
 2793 0008 044A     		ldr	r2, .L207
 2794 000a 43F00403 		orr	r3, r3, #4
 2795 000e D363     		str	r3, [r2, #60]
1122:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
ARM GAS  /tmp/ccsGrD0t.s 			page 76


 2796              		.loc 1 1122 1
 2797 0010 00BF     		nop
 2798 0012 BD46     		mov	sp, r7
 2799              		.cfi_def_cfa_register 13
 2800              		@ sp needed
 2801 0014 5DF8047B 		ldr	r7, [sp], #4
 2802              		.cfi_restore 7
 2803              		.cfi_def_cfa_offset 0
 2804 0018 7047     		bx	lr
 2805              	.L208:
 2806 001a 00BF     		.align	2
 2807              	.L207:
 2808 001c 00480256 		.word	1442990080
 2809              		.cfi_endproc
 2810              	.LFE880:
 2812              		.section	.text.HAL_PWREx_DisableVddUSBVMEN,"ax",%progbits
 2813              		.align	1
 2814              		.global	HAL_PWREx_DisableVddUSBVMEN
 2815              		.syntax unified
 2816              		.thumb
 2817              		.thumb_func
 2819              	HAL_PWREx_DisableVddUSBVMEN:
 2820              	.LFB881:
1123:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1124:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1125:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Disable the VDD33USB independent USB 33 voltage monitor.
1126:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1127:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1128:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisableVddUSBVMEN(void)
1129:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2821              		.loc 1 1129 1
 2822              		.cfi_startproc
 2823              		@ args = 0, pretend = 0, frame = 0
 2824              		@ frame_needed = 1, uses_anonymous_args = 0
 2825              		@ link register save eliminated.
 2826 0000 80B4     		push	{r7}
 2827              		.cfi_def_cfa_offset 4
 2828              		.cfi_offset 7, -4
 2829 0002 00AF     		add	r7, sp, #0
 2830              		.cfi_def_cfa_register 7
1130:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->SVMCR3, PWR_SVMCR3_USB33VMEN);
 2831              		.loc 1 1130 3
 2832 0004 054B     		ldr	r3, .L210
 2833 0006 DB6B     		ldr	r3, [r3, #60]
 2834 0008 044A     		ldr	r2, .L210
 2835 000a 23F00403 		bic	r3, r3, #4
 2836 000e D363     		str	r3, [r2, #60]
1131:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2837              		.loc 1 1131 1
 2838 0010 00BF     		nop
 2839 0012 BD46     		mov	sp, r7
 2840              		.cfi_def_cfa_register 13
 2841              		@ sp needed
 2842 0014 5DF8047B 		ldr	r7, [sp], #4
 2843              		.cfi_restore 7
 2844              		.cfi_def_cfa_offset 0
 2845 0018 7047     		bx	lr
ARM GAS  /tmp/ccsGrD0t.s 			page 77


 2846              	.L211:
 2847 001a 00BF     		.align	2
 2848              	.L210:
 2849 001c 00480256 		.word	1442990080
 2850              		.cfi_endproc
 2851              	.LFE881:
 2853              		.section	.text.HAL_PWREx_EnableVddIO2VMEN,"ax",%progbits
 2854              		.align	1
 2855              		.global	HAL_PWREx_EnableVddIO2VMEN
 2856              		.syntax unified
 2857              		.thumb
 2858              		.thumb_func
 2860              	HAL_PWREx_EnableVddIO2VMEN:
 2861              	.LFB882:
1132:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1133:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1134:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Enable the VDDIO2 independent voltage monitor.
1135:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1136:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1137:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableVddIO2VMEN(void)
1138:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2862              		.loc 1 1138 1
 2863              		.cfi_startproc
 2864              		@ args = 0, pretend = 0, frame = 0
 2865              		@ frame_needed = 1, uses_anonymous_args = 0
 2866              		@ link register save eliminated.
 2867 0000 80B4     		push	{r7}
 2868              		.cfi_def_cfa_offset 4
 2869              		.cfi_offset 7, -4
 2870 0002 00AF     		add	r7, sp, #0
 2871              		.cfi_def_cfa_register 7
1139:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VMEN);
 2872              		.loc 1 1139 3
 2873 0004 054B     		ldr	r3, .L213
 2874 0006 DB6B     		ldr	r3, [r3, #60]
 2875 0008 044A     		ldr	r2, .L213
 2876 000a 43F00103 		orr	r3, r3, #1
 2877 000e D363     		str	r3, [r2, #60]
1140:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2878              		.loc 1 1140 1
 2879 0010 00BF     		nop
 2880 0012 BD46     		mov	sp, r7
 2881              		.cfi_def_cfa_register 13
 2882              		@ sp needed
 2883 0014 5DF8047B 		ldr	r7, [sp], #4
 2884              		.cfi_restore 7
 2885              		.cfi_def_cfa_offset 0
 2886 0018 7047     		bx	lr
 2887              	.L214:
 2888 001a 00BF     		.align	2
 2889              	.L213:
 2890 001c 00480256 		.word	1442990080
 2891              		.cfi_endproc
 2892              	.LFE882:
 2894              		.section	.text.HAL_PWREx_DisableVddIO2VMEN,"ax",%progbits
 2895              		.align	1
 2896              		.global	HAL_PWREx_DisableVddIO2VMEN
ARM GAS  /tmp/ccsGrD0t.s 			page 78


 2897              		.syntax unified
 2898              		.thumb
 2899              		.thumb_func
 2901              	HAL_PWREx_DisableVddIO2VMEN:
 2902              	.LFB883:
1141:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1142:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1143:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Disable the VDDIO2 independent voltage monitor.
1144:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1145:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1146:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisableVddIO2VMEN(void)
1147:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2903              		.loc 1 1147 1
 2904              		.cfi_startproc
 2905              		@ args = 0, pretend = 0, frame = 0
 2906              		@ frame_needed = 1, uses_anonymous_args = 0
 2907              		@ link register save eliminated.
 2908 0000 80B4     		push	{r7}
 2909              		.cfi_def_cfa_offset 4
 2910              		.cfi_offset 7, -4
 2911 0002 00AF     		add	r7, sp, #0
 2912              		.cfi_def_cfa_register 7
1148:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VMEN);
 2913              		.loc 1 1148 3
 2914 0004 054B     		ldr	r3, .L216
 2915 0006 DB6B     		ldr	r3, [r3, #60]
 2916 0008 044A     		ldr	r2, .L216
 2917 000a 23F00103 		bic	r3, r3, #1
 2918 000e D363     		str	r3, [r2, #60]
1149:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2919              		.loc 1 1149 1
 2920 0010 00BF     		nop
 2921 0012 BD46     		mov	sp, r7
 2922              		.cfi_def_cfa_register 13
 2923              		@ sp needed
 2924 0014 5DF8047B 		ldr	r7, [sp], #4
 2925              		.cfi_restore 7
 2926              		.cfi_def_cfa_offset 0
 2927 0018 7047     		bx	lr
 2928              	.L217:
 2929 001a 00BF     		.align	2
 2930              	.L216:
 2931 001c 00480256 		.word	1442990080
 2932              		.cfi_endproc
 2933              	.LFE883:
 2935              		.section	.text.HAL_PWREx_EnableVddIO3VMEN,"ax",%progbits
 2936              		.align	1
 2937              		.global	HAL_PWREx_EnableVddIO3VMEN
 2938              		.syntax unified
 2939              		.thumb
 2940              		.thumb_func
 2942              	HAL_PWREx_EnableVddIO3VMEN:
 2943              	.LFB884:
1150:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1151:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1152:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Enable the VDDIO3 independent voltage monitor.
1153:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
ARM GAS  /tmp/ccsGrD0t.s 			page 79


1154:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1155:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableVddIO3VMEN(void)
1156:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2944              		.loc 1 1156 1
 2945              		.cfi_startproc
 2946              		@ args = 0, pretend = 0, frame = 0
 2947              		@ frame_needed = 1, uses_anonymous_args = 0
 2948              		@ link register save eliminated.
 2949 0000 80B4     		push	{r7}
 2950              		.cfi_def_cfa_offset 4
 2951              		.cfi_offset 7, -4
 2952 0002 00AF     		add	r7, sp, #0
 2953              		.cfi_def_cfa_register 7
1157:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VMEN);
 2954              		.loc 1 1157 3
 2955 0004 054B     		ldr	r3, .L219
 2956 0006 DB6B     		ldr	r3, [r3, #60]
 2957 0008 044A     		ldr	r2, .L219
 2958 000a 43F00203 		orr	r3, r3, #2
 2959 000e D363     		str	r3, [r2, #60]
1158:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 2960              		.loc 1 1158 1
 2961 0010 00BF     		nop
 2962 0012 BD46     		mov	sp, r7
 2963              		.cfi_def_cfa_register 13
 2964              		@ sp needed
 2965 0014 5DF8047B 		ldr	r7, [sp], #4
 2966              		.cfi_restore 7
 2967              		.cfi_def_cfa_offset 0
 2968 0018 7047     		bx	lr
 2969              	.L220:
 2970 001a 00BF     		.align	2
 2971              	.L219:
 2972 001c 00480256 		.word	1442990080
 2973              		.cfi_endproc
 2974              	.LFE884:
 2976              		.section	.text.HAL_PWREx_DisableVddIO3VMEN,"ax",%progbits
 2977              		.align	1
 2978              		.global	HAL_PWREx_DisableVddIO3VMEN
 2979              		.syntax unified
 2980              		.thumb
 2981              		.thumb_func
 2983              	HAL_PWREx_DisableVddIO3VMEN:
 2984              	.LFB885:
1159:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1160:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1161:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Disable the VDDIO3 independent voltage monitor.
1162:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1163:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1164:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisableVddIO3VMEN(void)
1165:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 2985              		.loc 1 1165 1
 2986              		.cfi_startproc
 2987              		@ args = 0, pretend = 0, frame = 0
 2988              		@ frame_needed = 1, uses_anonymous_args = 0
 2989              		@ link register save eliminated.
 2990 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccsGrD0t.s 			page 80


 2991              		.cfi_def_cfa_offset 4
 2992              		.cfi_offset 7, -4
 2993 0002 00AF     		add	r7, sp, #0
 2994              		.cfi_def_cfa_register 7
1166:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VMEN);
 2995              		.loc 1 1166 3
 2996 0004 054B     		ldr	r3, .L222
 2997 0006 DB6B     		ldr	r3, [r3, #60]
 2998 0008 044A     		ldr	r2, .L222
 2999 000a 23F00203 		bic	r3, r3, #2
 3000 000e D363     		str	r3, [r2, #60]
1167:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 3001              		.loc 1 1167 1
 3002 0010 00BF     		nop
 3003 0012 BD46     		mov	sp, r7
 3004              		.cfi_def_cfa_register 13
 3005              		@ sp needed
 3006 0014 5DF8047B 		ldr	r7, [sp], #4
 3007              		.cfi_restore 7
 3008              		.cfi_def_cfa_offset 0
 3009 0018 7047     		bx	lr
 3010              	.L223:
 3011 001a 00BF     		.align	2
 3012              	.L222:
 3013 001c 00480256 		.word	1442990080
 3014              		.cfi_endproc
 3015              	.LFE885:
 3017              		.section	.text.HAL_PWREx_EnableVddIO4VMEN,"ax",%progbits
 3018              		.align	1
 3019              		.global	HAL_PWREx_EnableVddIO4VMEN
 3020              		.syntax unified
 3021              		.thumb
 3022              		.thumb_func
 3024              	HAL_PWREx_EnableVddIO4VMEN:
 3025              	.LFB886:
1168:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1169:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1170:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Enable the VDDIO4 independent voltage monitor.
1171:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1172:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1173:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableVddIO4VMEN(void)
1174:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 3026              		.loc 1 1174 1
 3027              		.cfi_startproc
 3028              		@ args = 0, pretend = 0, frame = 0
 3029              		@ frame_needed = 1, uses_anonymous_args = 0
 3030              		@ link register save eliminated.
 3031 0000 80B4     		push	{r7}
 3032              		.cfi_def_cfa_offset 4
 3033              		.cfi_offset 7, -4
 3034 0002 00AF     		add	r7, sp, #0
 3035              		.cfi_def_cfa_register 7
1175:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VMEN);
 3036              		.loc 1 1175 3
 3037 0004 054B     		ldr	r3, .L225
 3038 0006 5B6B     		ldr	r3, [r3, #52]
 3039 0008 044A     		ldr	r2, .L225
ARM GAS  /tmp/ccsGrD0t.s 			page 81


 3040 000a 43F00103 		orr	r3, r3, #1
 3041 000e 5363     		str	r3, [r2, #52]
1176:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 3042              		.loc 1 1176 1
 3043 0010 00BF     		nop
 3044 0012 BD46     		mov	sp, r7
 3045              		.cfi_def_cfa_register 13
 3046              		@ sp needed
 3047 0014 5DF8047B 		ldr	r7, [sp], #4
 3048              		.cfi_restore 7
 3049              		.cfi_def_cfa_offset 0
 3050 0018 7047     		bx	lr
 3051              	.L226:
 3052 001a 00BF     		.align	2
 3053              	.L225:
 3054 001c 00480256 		.word	1442990080
 3055              		.cfi_endproc
 3056              	.LFE886:
 3058              		.section	.text.HAL_PWREx_DisableVddIO4VMEN,"ax",%progbits
 3059              		.align	1
 3060              		.global	HAL_PWREx_DisableVddIO4VMEN
 3061              		.syntax unified
 3062              		.thumb
 3063              		.thumb_func
 3065              	HAL_PWREx_DisableVddIO4VMEN:
 3066              	.LFB887:
1177:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1178:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1179:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Disable the VDDIO4 independent voltage monitor.
1180:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1181:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1182:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisableVddIO4VMEN(void)
1183:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 3067              		.loc 1 1183 1
 3068              		.cfi_startproc
 3069              		@ args = 0, pretend = 0, frame = 0
 3070              		@ frame_needed = 1, uses_anonymous_args = 0
 3071              		@ link register save eliminated.
 3072 0000 80B4     		push	{r7}
 3073              		.cfi_def_cfa_offset 4
 3074              		.cfi_offset 7, -4
 3075 0002 00AF     		add	r7, sp, #0
 3076              		.cfi_def_cfa_register 7
1184:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VMEN);
 3077              		.loc 1 1184 3
 3078 0004 054B     		ldr	r3, .L228
 3079 0006 5B6B     		ldr	r3, [r3, #52]
 3080 0008 044A     		ldr	r2, .L228
 3081 000a 23F00103 		bic	r3, r3, #1
 3082 000e 5363     		str	r3, [r2, #52]
1185:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 3083              		.loc 1 1185 1
 3084 0010 00BF     		nop
 3085 0012 BD46     		mov	sp, r7
 3086              		.cfi_def_cfa_register 13
 3087              		@ sp needed
 3088 0014 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccsGrD0t.s 			page 82


 3089              		.cfi_restore 7
 3090              		.cfi_def_cfa_offset 0
 3091 0018 7047     		bx	lr
 3092              	.L229:
 3093 001a 00BF     		.align	2
 3094              	.L228:
 3095 001c 00480256 		.word	1442990080
 3096              		.cfi_endproc
 3097              	.LFE887:
 3099              		.section	.text.HAL_PWREx_EnableVddIO5VMEN,"ax",%progbits
 3100              		.align	1
 3101              		.global	HAL_PWREx_EnableVddIO5VMEN
 3102              		.syntax unified
 3103              		.thumb
 3104              		.thumb_func
 3106              	HAL_PWREx_EnableVddIO5VMEN:
 3107              	.LFB888:
1186:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1187:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1188:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Enable the VDDIO5 independent voltage monitor.
1189:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1190:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1191:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableVddIO5VMEN(void)
1192:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 3108              		.loc 1 1192 1
 3109              		.cfi_startproc
 3110              		@ args = 0, pretend = 0, frame = 0
 3111              		@ frame_needed = 1, uses_anonymous_args = 0
 3112              		@ link register save eliminated.
 3113 0000 80B4     		push	{r7}
 3114              		.cfi_def_cfa_offset 4
 3115              		.cfi_offset 7, -4
 3116 0002 00AF     		add	r7, sp, #0
 3117              		.cfi_def_cfa_register 7
1193:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VMEN);
 3118              		.loc 1 1193 3
 3119 0004 054B     		ldr	r3, .L231
 3120 0006 9B6B     		ldr	r3, [r3, #56]
 3121 0008 044A     		ldr	r2, .L231
 3122 000a 43F00103 		orr	r3, r3, #1
 3123 000e 9363     		str	r3, [r2, #56]
1194:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 3124              		.loc 1 1194 1
 3125 0010 00BF     		nop
 3126 0012 BD46     		mov	sp, r7
 3127              		.cfi_def_cfa_register 13
 3128              		@ sp needed
 3129 0014 5DF8047B 		ldr	r7, [sp], #4
 3130              		.cfi_restore 7
 3131              		.cfi_def_cfa_offset 0
 3132 0018 7047     		bx	lr
 3133              	.L232:
 3134 001a 00BF     		.align	2
 3135              	.L231:
 3136 001c 00480256 		.word	1442990080
 3137              		.cfi_endproc
 3138              	.LFE888:
ARM GAS  /tmp/ccsGrD0t.s 			page 83


 3140              		.section	.text.HAL_PWREx_DisableVddIO5VMEN,"ax",%progbits
 3141              		.align	1
 3142              		.global	HAL_PWREx_DisableVddIO5VMEN
 3143              		.syntax unified
 3144              		.thumb
 3145              		.thumb_func
 3147              	HAL_PWREx_DisableVddIO5VMEN:
 3148              	.LFB889:
1195:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1196:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1197:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Disable the VDDIO5 independent voltage monitor.
1198:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1199:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1200:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisableVddIO5VMEN(void)
1201:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 3149              		.loc 1 1201 1
 3150              		.cfi_startproc
 3151              		@ args = 0, pretend = 0, frame = 0
 3152              		@ frame_needed = 1, uses_anonymous_args = 0
 3153              		@ link register save eliminated.
 3154 0000 80B4     		push	{r7}
 3155              		.cfi_def_cfa_offset 4
 3156              		.cfi_offset 7, -4
 3157 0002 00AF     		add	r7, sp, #0
 3158              		.cfi_def_cfa_register 7
1202:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VMEN);
 3159              		.loc 1 1202 3
 3160 0004 054B     		ldr	r3, .L234
 3161 0006 9B6B     		ldr	r3, [r3, #56]
 3162 0008 044A     		ldr	r2, .L234
 3163 000a 23F00103 		bic	r3, r3, #1
 3164 000e 9363     		str	r3, [r2, #56]
1203:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 3165              		.loc 1 1203 1
 3166 0010 00BF     		nop
 3167 0012 BD46     		mov	sp, r7
 3168              		.cfi_def_cfa_register 13
 3169              		@ sp needed
 3170 0014 5DF8047B 		ldr	r7, [sp], #4
 3171              		.cfi_restore 7
 3172              		.cfi_def_cfa_offset 0
 3173 0018 7047     		bx	lr
 3174              	.L235:
 3175 001a 00BF     		.align	2
 3176              	.L234:
 3177 001c 00480256 		.word	1442990080
 3178              		.cfi_endproc
 3179              	.LFE889:
 3181              		.section	.text.HAL_PWREx_EnableVddAVMEN,"ax",%progbits
 3182              		.align	1
 3183              		.global	HAL_PWREx_EnableVddAVMEN
 3184              		.syntax unified
 3185              		.thumb
 3186              		.thumb_func
 3188              	HAL_PWREx_EnableVddAVMEN:
 3189              	.LFB890:
1204:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/ccsGrD0t.s 			page 84


1205:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1206:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Enable the VDDA18ADC independent ADC voltage monitor.
1207:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1208:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1209:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_EnableVddAVMEN(void)
1210:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 3190              		.loc 1 1210 1
 3191              		.cfi_startproc
 3192              		@ args = 0, pretend = 0, frame = 0
 3193              		@ frame_needed = 1, uses_anonymous_args = 0
 3194              		@ link register save eliminated.
 3195 0000 80B4     		push	{r7}
 3196              		.cfi_def_cfa_offset 4
 3197              		.cfi_offset 7, -4
 3198 0002 00AF     		add	r7, sp, #0
 3199              		.cfi_def_cfa_register 7
1211:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   SET_BIT(PWR->SVMCR3, PWR_SVMCR3_AVMEN);
 3200              		.loc 1 1211 3
 3201 0004 054B     		ldr	r3, .L237
 3202 0006 DB6B     		ldr	r3, [r3, #60]
 3203 0008 044A     		ldr	r2, .L237
 3204 000a 43F01003 		orr	r3, r3, #16
 3205 000e D363     		str	r3, [r2, #60]
1212:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 3206              		.loc 1 1212 1
 3207 0010 00BF     		nop
 3208 0012 BD46     		mov	sp, r7
 3209              		.cfi_def_cfa_register 13
 3210              		@ sp needed
 3211 0014 5DF8047B 		ldr	r7, [sp], #4
 3212              		.cfi_restore 7
 3213              		.cfi_def_cfa_offset 0
 3214 0018 7047     		bx	lr
 3215              	.L238:
 3216 001a 00BF     		.align	2
 3217              	.L237:
 3218 001c 00480256 		.word	1442990080
 3219              		.cfi_endproc
 3220              	.LFE890:
 3222              		.section	.text.HAL_PWREx_DisableVddAVMEN,"ax",%progbits
 3223              		.align	1
 3224              		.global	HAL_PWREx_DisableVddAVMEN
 3225              		.syntax unified
 3226              		.thumb
 3227              		.thumb_func
 3229              	HAL_PWREx_DisableVddAVMEN:
 3230              	.LFB891:
1213:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1214:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1215:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Disable the VDDA18ADC independent ADC voltage monitor.
1216:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1217:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1218:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_DisableVddAVMEN(void)
1219:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 3231              		.loc 1 1219 1
 3232              		.cfi_startproc
 3233              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccsGrD0t.s 			page 85


 3234              		@ frame_needed = 1, uses_anonymous_args = 0
 3235              		@ link register save eliminated.
 3236 0000 80B4     		push	{r7}
 3237              		.cfi_def_cfa_offset 4
 3238              		.cfi_offset 7, -4
 3239 0002 00AF     		add	r7, sp, #0
 3240              		.cfi_def_cfa_register 7
1220:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->SVMCR3, PWR_SVMCR3_AVMEN);
 3241              		.loc 1 1220 3
 3242 0004 054B     		ldr	r3, .L240
 3243 0006 DB6B     		ldr	r3, [r3, #60]
 3244 0008 044A     		ldr	r2, .L240
 3245 000a 23F01003 		bic	r3, r3, #16
 3246 000e D363     		str	r3, [r2, #60]
1221:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 3247              		.loc 1 1221 1
 3248 0010 00BF     		nop
 3249 0012 BD46     		mov	sp, r7
 3250              		.cfi_def_cfa_register 13
 3251              		@ sp needed
 3252 0014 5DF8047B 		ldr	r7, [sp], #4
 3253              		.cfi_restore 7
 3254              		.cfi_def_cfa_offset 0
 3255 0018 7047     		bx	lr
 3256              	.L241:
 3257 001a 00BF     		.align	2
 3258              	.L240:
 3259 001c 00480256 		.word	1442990080
 3260              		.cfi_endproc
 3261              	.LFE891:
 3263              		.section	.text.HAL_PWREx_ConfigPVM,"ax",%progbits
 3264              		.align	1
 3265              		.global	HAL_PWREx_ConfigPVM
 3266              		.syntax unified
 3267              		.thumb
 3268              		.thumb_func
 3270              	HAL_PWREx_ConfigPVM:
 3271              	.LFB892:
1222:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1223:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1224:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  Configure the voltage monitor threshold detected by the Peripheral
1225:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *         voltage monitoring (PVM).
1226:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @param  pConfigPVM : Pointer to a PWR_PVMTypeDef structure that contains the
1227:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   *                      PVM configuration information (PVMType and EventMode).
1228:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval HAL Status.
1229:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1230:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ConfigPVM(const PWR_PVMTypeDef *pConfigPVM)
1231:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 3272              		.loc 1 1231 1
 3273              		.cfi_startproc
 3274              		@ args = 0, pretend = 0, frame = 8
 3275              		@ frame_needed = 1, uses_anonymous_args = 0
 3276 0000 80B5     		push	{r7, lr}
 3277              		.cfi_def_cfa_offset 8
 3278              		.cfi_offset 7, -8
 3279              		.cfi_offset 14, -4
 3280 0002 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccsGrD0t.s 			page 86


 3281              		.cfi_def_cfa_offset 16
 3282 0004 00AF     		add	r7, sp, #0
 3283              		.cfi_def_cfa_register 7
 3284 0006 7860     		str	r0, [r7, #4]
1232:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1233:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check the parameters */
1234:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   assert_param(IS_PWR_PVM_TYPE(pConfigPVM->PVMType));
 3285              		.loc 1 1234 3
 3286 0008 7B68     		ldr	r3, [r7, #4]
 3287 000a 1B68     		ldr	r3, [r3]
 3288 000c 002B     		cmp	r3, #0
 3289 000e 18D0     		beq	.L243
 3290              		.loc 1 1234 3 is_stmt 0 discriminator 1
 3291 0010 7B68     		ldr	r3, [r7, #4]
 3292 0012 1B68     		ldr	r3, [r3]
 3293 0014 012B     		cmp	r3, #1
 3294 0016 14D0     		beq	.L243
 3295              		.loc 1 1234 3 discriminator 2
 3296 0018 7B68     		ldr	r3, [r7, #4]
 3297 001a 1B68     		ldr	r3, [r3]
 3298 001c 022B     		cmp	r3, #2
 3299 001e 10D0     		beq	.L243
 3300              		.loc 1 1234 3 discriminator 3
 3301 0020 7B68     		ldr	r3, [r7, #4]
 3302 0022 1B68     		ldr	r3, [r3]
 3303 0024 032B     		cmp	r3, #3
 3304 0026 0CD0     		beq	.L243
 3305              		.loc 1 1234 3 discriminator 4
 3306 0028 7B68     		ldr	r3, [r7, #4]
 3307 002a 1B68     		ldr	r3, [r3]
 3308 002c 042B     		cmp	r3, #4
 3309 002e 08D0     		beq	.L243
 3310              		.loc 1 1234 3 discriminator 5
 3311 0030 7B68     		ldr	r3, [r7, #4]
 3312 0032 1B68     		ldr	r3, [r3]
 3313 0034 052B     		cmp	r3, #5
 3314 0036 04D0     		beq	.L243
 3315              		.loc 1 1234 3 discriminator 6
 3316 0038 40F2D241 		movw	r1, #1234
 3317 003c 9648     		ldr	r0, .L285
 3318 003e FFF7FEFF 		bl	assert_failed
 3319              	.L243:
1235:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   assert_param(IS_PWR_PVM_MODE(pConfigPVM->Mode));
 3320              		.loc 1 1235 3 is_stmt 1
 3321 0042 7B68     		ldr	r3, [r7, #4]
 3322 0044 5B68     		ldr	r3, [r3, #4]
 3323 0046 002B     		cmp	r3, #0
 3324 0048 1CD0     		beq	.L244
 3325              		.loc 1 1235 3 is_stmt 0 discriminator 1
 3326 004a 7B68     		ldr	r3, [r7, #4]
 3327 004c 5B68     		ldr	r3, [r3, #4]
 3328 004e 052B     		cmp	r3, #5
 3329 0050 18D0     		beq	.L244
 3330              		.loc 1 1235 3 discriminator 2
 3331 0052 7B68     		ldr	r3, [r7, #4]
 3332 0054 5B68     		ldr	r3, [r3, #4]
 3333 0056 062B     		cmp	r3, #6
ARM GAS  /tmp/ccsGrD0t.s 			page 87


 3334 0058 14D0     		beq	.L244
 3335              		.loc 1 1235 3 discriminator 3
 3336 005a 7B68     		ldr	r3, [r7, #4]
 3337 005c 5B68     		ldr	r3, [r3, #4]
 3338 005e 072B     		cmp	r3, #7
 3339 0060 10D0     		beq	.L244
 3340              		.loc 1 1235 3 discriminator 4
 3341 0062 7B68     		ldr	r3, [r7, #4]
 3342 0064 5B68     		ldr	r3, [r3, #4]
 3343 0066 092B     		cmp	r3, #9
 3344 0068 0CD0     		beq	.L244
 3345              		.loc 1 1235 3 discriminator 5
 3346 006a 7B68     		ldr	r3, [r7, #4]
 3347 006c 5B68     		ldr	r3, [r3, #4]
 3348 006e 0A2B     		cmp	r3, #10
 3349 0070 08D0     		beq	.L244
 3350              		.loc 1 1235 3 discriminator 6
 3351 0072 7B68     		ldr	r3, [r7, #4]
 3352 0074 5B68     		ldr	r3, [r3, #4]
 3353 0076 0B2B     		cmp	r3, #11
 3354 0078 04D0     		beq	.L244
 3355              		.loc 1 1235 3 discriminator 7
 3356 007a 40F2D341 		movw	r1, #1235
 3357 007e 8648     		ldr	r0, .L285
 3358 0080 FFF7FEFF 		bl	assert_failed
 3359              	.L244:
1236:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1237:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check the peripheral voltage monitor type */
1238:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   switch (pConfigPVM->PVMType)
 3360              		.loc 1 1238 21 is_stmt 1
 3361 0084 7B68     		ldr	r3, [r7, #4]
 3362 0086 1B68     		ldr	r3, [r3]
 3363              		.loc 1 1238 3
 3364 0088 052B     		cmp	r3, #5
 3365 008a 00F2FD81 		bhi	.L245
 3366 008e 01A2     		adr	r2, .L247
 3367 0090 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3368              		.p2align 2
 3369              	.L247:
 3370 0094 AD000000 		.word	.L252+1
 3371 0098 51010000 		.word	.L251+1
 3372 009c F5010000 		.word	.L250+1
 3373 00a0 A1020000 		.word	.L249+1
 3374 00a4 45030000 		.word	.L248+1
 3375 00a8 E7030000 		.word	.L246+1
 3376              		.p2align 1
 3377              	.L252:
1239:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
1240:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     case PWR_VDDUSB_VM: /* Independent USB voltage monitor */
1241:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1242:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Disable EXTI USBVM event and interrupt */
1243:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_USBVM_EXTI_DISABLE_EVENT();
 3378              		.loc 1 1243 7
 3379 00ac 7B4B     		ldr	r3, .L285+4
 3380 00ae D3F8A430 		ldr	r3, [r3, #164]
 3381 00b2 7A4A     		ldr	r2, .L285+4
 3382 00b4 23F40073 		bic	r3, r3, #512
ARM GAS  /tmp/ccsGrD0t.s 			page 88


 3383 00b8 C2F8A430 		str	r3, [r2, #164]
1244:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_USBVM_EXTI_DISABLE_IT();
 3384              		.loc 1 1244 7
 3385 00bc 774B     		ldr	r3, .L285+4
 3386 00be D3F8A030 		ldr	r3, [r3, #160]
 3387 00c2 764A     		ldr	r2, .L285+4
 3388 00c4 23F40073 		bic	r3, r3, #512
 3389 00c8 C2F8A030 		str	r3, [r2, #160]
1245:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_USBVM_EXTI_DISABLE_RISING_EDGE();
 3390              		.loc 1 1245 7
 3391 00cc 734B     		ldr	r3, .L285+4
 3392 00ce 1B6C     		ldr	r3, [r3, #64]
 3393 00d0 724A     		ldr	r2, .L285+4
 3394 00d2 23F40073 		bic	r3, r3, #512
 3395 00d6 1364     		str	r3, [r2, #64]
1246:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_USBVM_EXTI_DISABLE_FALLING_EDGE();
 3396              		.loc 1 1246 7
 3397 00d8 704B     		ldr	r3, .L285+4
 3398 00da 5B6C     		ldr	r3, [r3, #68]
 3399 00dc 6F4A     		ldr	r2, .L285+4
 3400 00de 23F40073 		bic	r3, r3, #512
 3401 00e2 5364     		str	r3, [r2, #68]
1247:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1248:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the USBVM in interrupt mode */
1249:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 3402              		.loc 1 1249 22
 3403 00e4 7B68     		ldr	r3, [r7, #4]
 3404 00e6 5B68     		ldr	r3, [r3, #4]
 3405              		.loc 1 1249 29
 3406 00e8 03F00403 		and	r3, r3, #4
 3407              		.loc 1 1249 10
 3408 00ec 002B     		cmp	r3, #0
 3409 00ee 07D0     		beq	.L253
1250:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1251:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_USBVM_EXTI_ENABLE_IT();
 3410              		.loc 1 1251 9
 3411 00f0 6A4B     		ldr	r3, .L285+4
 3412 00f2 D3F8A030 		ldr	r3, [r3, #160]
 3413 00f6 694A     		ldr	r2, .L285+4
 3414 00f8 43F40073 		orr	r3, r3, #512
 3415 00fc C2F8A030 		str	r3, [r2, #160]
 3416              	.L253:
1252:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1253:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1254:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the USBVM in event mode */
1255:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 3417              		.loc 1 1255 22
 3418 0100 7B68     		ldr	r3, [r7, #4]
 3419 0102 5B68     		ldr	r3, [r3, #4]
 3420              		.loc 1 1255 29
 3421 0104 03F00803 		and	r3, r3, #8
 3422              		.loc 1 1255 10
 3423 0108 002B     		cmp	r3, #0
 3424 010a 07D0     		beq	.L254
1256:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1257:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_USBVM_EXTI_ENABLE_EVENT();
 3425              		.loc 1 1257 9
ARM GAS  /tmp/ccsGrD0t.s 			page 89


 3426 010c 634B     		ldr	r3, .L285+4
 3427 010e D3F8A430 		ldr	r3, [r3, #164]
 3428 0112 624A     		ldr	r2, .L285+4
 3429 0114 43F40073 		orr	r3, r3, #512
 3430 0118 C2F8A430 		str	r3, [r2, #164]
 3431              	.L254:
1258:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1259:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1260:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the USBVM in rising edge */
1261:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 3432              		.loc 1 1261 22
 3433 011c 7B68     		ldr	r3, [r7, #4]
 3434 011e 5B68     		ldr	r3, [r3, #4]
 3435              		.loc 1 1261 29
 3436 0120 03F00103 		and	r3, r3, #1
 3437              		.loc 1 1261 10
 3438 0124 002B     		cmp	r3, #0
 3439 0126 05D0     		beq	.L255
1262:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1263:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_USBVM_EXTI_ENABLE_RISING_EDGE();
 3440              		.loc 1 1263 9
 3441 0128 5C4B     		ldr	r3, .L285+4
 3442 012a 1B6C     		ldr	r3, [r3, #64]
 3443 012c 5B4A     		ldr	r2, .L285+4
 3444 012e 43F40073 		orr	r3, r3, #512
 3445 0132 1364     		str	r3, [r2, #64]
 3446              	.L255:
1264:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1265:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1266:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the USBVM in falling edge */
1267:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 3447              		.loc 1 1267 22
 3448 0134 7B68     		ldr	r3, [r7, #4]
 3449 0136 5B68     		ldr	r3, [r3, #4]
 3450              		.loc 1 1267 29
 3451 0138 03F00203 		and	r3, r3, #2
 3452              		.loc 1 1267 10
 3453 013c 002B     		cmp	r3, #0
 3454 013e 00F0A581 		beq	.L279
1268:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1269:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_USBVM_EXTI_ENABLE_FALLING_EDGE();
 3455              		.loc 1 1269 9
 3456 0142 564B     		ldr	r3, .L285+4
 3457 0144 5B6C     		ldr	r3, [r3, #68]
 3458 0146 554A     		ldr	r2, .L285+4
 3459 0148 43F40073 		orr	r3, r3, #512
 3460 014c 5364     		str	r3, [r2, #68]
1270:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1271:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       break;
 3461              		.loc 1 1271 7
 3462 014e 9DE1     		b	.L279
 3463              	.L251:
1272:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1273:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     case PWR_VDDIO2_VM: /* Independent I/Os voltage monitor */
1274:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1275:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Disable EXTI IO2VM event and interrupt */
1276:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_IO2VM_EXTI_DISABLE_EVENT();
ARM GAS  /tmp/ccsGrD0t.s 			page 90


 3464              		.loc 1 1276 7
 3465 0150 524B     		ldr	r3, .L285+4
 3466 0152 D3F8A430 		ldr	r3, [r3, #164]
 3467 0156 514A     		ldr	r2, .L285+4
 3468 0158 23F02003 		bic	r3, r3, #32
 3469 015c C2F8A430 		str	r3, [r2, #164]
1277:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_IO2VM_EXTI_DISABLE_IT();
 3470              		.loc 1 1277 7
 3471 0160 4E4B     		ldr	r3, .L285+4
 3472 0162 D3F8A030 		ldr	r3, [r3, #160]
 3473 0166 4D4A     		ldr	r2, .L285+4
 3474 0168 23F02003 		bic	r3, r3, #32
 3475 016c C2F8A030 		str	r3, [r2, #160]
1278:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_IO2VM_EXTI_DISABLE_RISING_EDGE();
 3476              		.loc 1 1278 7
 3477 0170 4A4B     		ldr	r3, .L285+4
 3478 0172 1B6C     		ldr	r3, [r3, #64]
 3479 0174 494A     		ldr	r2, .L285+4
 3480 0176 23F02003 		bic	r3, r3, #32
 3481 017a 1364     		str	r3, [r2, #64]
1279:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_IO2VM_EXTI_DISABLE_FALLING_EDGE();
 3482              		.loc 1 1279 7
 3483 017c 474B     		ldr	r3, .L285+4
 3484 017e 5B6C     		ldr	r3, [r3, #68]
 3485 0180 464A     		ldr	r2, .L285+4
 3486 0182 23F02003 		bic	r3, r3, #32
 3487 0186 5364     		str	r3, [r2, #68]
1280:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1281:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the IO2VM in interrupt mode */
1282:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 3488              		.loc 1 1282 22
 3489 0188 7B68     		ldr	r3, [r7, #4]
 3490 018a 5B68     		ldr	r3, [r3, #4]
 3491              		.loc 1 1282 29
 3492 018c 03F00403 		and	r3, r3, #4
 3493              		.loc 1 1282 10
 3494 0190 002B     		cmp	r3, #0
 3495 0192 07D0     		beq	.L258
1283:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1284:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_IO2VM_EXTI_ENABLE_IT();
 3496              		.loc 1 1284 9
 3497 0194 414B     		ldr	r3, .L285+4
 3498 0196 D3F8A030 		ldr	r3, [r3, #160]
 3499 019a 404A     		ldr	r2, .L285+4
 3500 019c 43F02003 		orr	r3, r3, #32
 3501 01a0 C2F8A030 		str	r3, [r2, #160]
 3502              	.L258:
1285:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1286:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1287:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the IO2VM in event mode */
1288:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 3503              		.loc 1 1288 22
 3504 01a4 7B68     		ldr	r3, [r7, #4]
 3505 01a6 5B68     		ldr	r3, [r3, #4]
 3506              		.loc 1 1288 29
 3507 01a8 03F00803 		and	r3, r3, #8
 3508              		.loc 1 1288 10
ARM GAS  /tmp/ccsGrD0t.s 			page 91


 3509 01ac 002B     		cmp	r3, #0
 3510 01ae 07D0     		beq	.L259
1289:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1290:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_IO2VM_EXTI_ENABLE_EVENT();
 3511              		.loc 1 1290 9
 3512 01b0 3A4B     		ldr	r3, .L285+4
 3513 01b2 D3F8A430 		ldr	r3, [r3, #164]
 3514 01b6 394A     		ldr	r2, .L285+4
 3515 01b8 43F02003 		orr	r3, r3, #32
 3516 01bc C2F8A430 		str	r3, [r2, #164]
 3517              	.L259:
1291:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1292:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1293:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the IO2VM in rising edge */
1294:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 3518              		.loc 1 1294 22
 3519 01c0 7B68     		ldr	r3, [r7, #4]
 3520 01c2 5B68     		ldr	r3, [r3, #4]
 3521              		.loc 1 1294 29
 3522 01c4 03F00103 		and	r3, r3, #1
 3523              		.loc 1 1294 10
 3524 01c8 002B     		cmp	r3, #0
 3525 01ca 05D0     		beq	.L260
1295:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1296:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_IO2VM_EXTI_ENABLE_RISING_EDGE();
 3526              		.loc 1 1296 9
 3527 01cc 334B     		ldr	r3, .L285+4
 3528 01ce 1B6C     		ldr	r3, [r3, #64]
 3529 01d0 324A     		ldr	r2, .L285+4
 3530 01d2 43F02003 		orr	r3, r3, #32
 3531 01d6 1364     		str	r3, [r2, #64]
 3532              	.L260:
1297:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1298:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1299:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the IO2VM in falling edge */
1300:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 3533              		.loc 1 1300 22
 3534 01d8 7B68     		ldr	r3, [r7, #4]
 3535 01da 5B68     		ldr	r3, [r3, #4]
 3536              		.loc 1 1300 29
 3537 01dc 03F00203 		and	r3, r3, #2
 3538              		.loc 1 1300 10
 3539 01e0 002B     		cmp	r3, #0
 3540 01e2 00F05581 		beq	.L280
1301:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1302:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_IO2VM_EXTI_ENABLE_FALLING_EDGE();
 3541              		.loc 1 1302 9
 3542 01e6 2D4B     		ldr	r3, .L285+4
 3543 01e8 5B6C     		ldr	r3, [r3, #68]
 3544 01ea 2C4A     		ldr	r2, .L285+4
 3545 01ec 43F02003 		orr	r3, r3, #32
 3546 01f0 5364     		str	r3, [r2, #68]
1303:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1304:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       break;
 3547              		.loc 1 1304 7
 3548 01f2 4DE1     		b	.L280
 3549              	.L250:
ARM GAS  /tmp/ccsGrD0t.s 			page 92


1305:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1306:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     case PWR_VDDIO3_VM: /* Independent I/Os voltage monitor */
1307:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1308:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Disable EXTI IO3VM event and interrupt */
1309:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_IO3VM_EXTI_DISABLE_EVENT();
 3550              		.loc 1 1309 7
 3551 01f4 294B     		ldr	r3, .L285+4
 3552 01f6 D3F8A430 		ldr	r3, [r3, #164]
 3553 01fa 284A     		ldr	r2, .L285+4
 3554 01fc 23F04003 		bic	r3, r3, #64
 3555 0200 C2F8A430 		str	r3, [r2, #164]
1310:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_IO3VM_EXTI_DISABLE_IT();
 3556              		.loc 1 1310 7
 3557 0204 254B     		ldr	r3, .L285+4
 3558 0206 D3F8A030 		ldr	r3, [r3, #160]
 3559 020a 244A     		ldr	r2, .L285+4
 3560 020c 23F04003 		bic	r3, r3, #64
 3561 0210 C2F8A030 		str	r3, [r2, #160]
1311:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_IO3VM_EXTI_DISABLE_RISING_EDGE();
 3562              		.loc 1 1311 7
 3563 0214 214B     		ldr	r3, .L285+4
 3564 0216 1B6C     		ldr	r3, [r3, #64]
 3565 0218 204A     		ldr	r2, .L285+4
 3566 021a 23F04003 		bic	r3, r3, #64
 3567 021e 1364     		str	r3, [r2, #64]
1312:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_IO3VM_EXTI_DISABLE_FALLING_EDGE();
 3568              		.loc 1 1312 7
 3569 0220 1E4B     		ldr	r3, .L285+4
 3570 0222 5B6C     		ldr	r3, [r3, #68]
 3571 0224 1D4A     		ldr	r2, .L285+4
 3572 0226 23F04003 		bic	r3, r3, #64
 3573 022a 5364     		str	r3, [r2, #68]
1313:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1314:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the IO3VM in interrupt mode */
1315:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 3574              		.loc 1 1315 22
 3575 022c 7B68     		ldr	r3, [r7, #4]
 3576 022e 5B68     		ldr	r3, [r3, #4]
 3577              		.loc 1 1315 29
 3578 0230 03F00403 		and	r3, r3, #4
 3579              		.loc 1 1315 10
 3580 0234 002B     		cmp	r3, #0
 3581 0236 07D0     		beq	.L262
1316:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1317:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_IO3VM_EXTI_ENABLE_IT();
 3582              		.loc 1 1317 9
 3583 0238 184B     		ldr	r3, .L285+4
 3584 023a D3F8A030 		ldr	r3, [r3, #160]
 3585 023e 174A     		ldr	r2, .L285+4
 3586 0240 43F04003 		orr	r3, r3, #64
 3587 0244 C2F8A030 		str	r3, [r2, #160]
 3588              	.L262:
1318:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1319:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1320:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the IO3VM in event mode */
1321:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 3589              		.loc 1 1321 22
ARM GAS  /tmp/ccsGrD0t.s 			page 93


 3590 0248 7B68     		ldr	r3, [r7, #4]
 3591 024a 5B68     		ldr	r3, [r3, #4]
 3592              		.loc 1 1321 29
 3593 024c 03F00803 		and	r3, r3, #8
 3594              		.loc 1 1321 10
 3595 0250 002B     		cmp	r3, #0
 3596 0252 07D0     		beq	.L263
1322:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1323:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_IO3VM_EXTI_ENABLE_EVENT();
 3597              		.loc 1 1323 9
 3598 0254 114B     		ldr	r3, .L285+4
 3599 0256 D3F8A430 		ldr	r3, [r3, #164]
 3600 025a 104A     		ldr	r2, .L285+4
 3601 025c 43F04003 		orr	r3, r3, #64
 3602 0260 C2F8A430 		str	r3, [r2, #164]
 3603              	.L263:
1324:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1325:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1326:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the IO3VM in rising edge */
1327:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 3604              		.loc 1 1327 22
 3605 0264 7B68     		ldr	r3, [r7, #4]
 3606 0266 5B68     		ldr	r3, [r3, #4]
 3607              		.loc 1 1327 29
 3608 0268 03F00103 		and	r3, r3, #1
 3609              		.loc 1 1327 10
 3610 026c 002B     		cmp	r3, #0
 3611 026e 05D0     		beq	.L264
1328:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1329:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_IO3VM_EXTI_ENABLE_RISING_EDGE();
 3612              		.loc 1 1329 9
 3613 0270 0A4B     		ldr	r3, .L285+4
 3614 0272 1B6C     		ldr	r3, [r3, #64]
 3615 0274 094A     		ldr	r2, .L285+4
 3616 0276 43F04003 		orr	r3, r3, #64
 3617 027a 1364     		str	r3, [r2, #64]
 3618              	.L264:
1330:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1331:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1332:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the IO3VM in falling edge */
1333:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 3619              		.loc 1 1333 22
 3620 027c 7B68     		ldr	r3, [r7, #4]
 3621 027e 5B68     		ldr	r3, [r3, #4]
 3622              		.loc 1 1333 29
 3623 0280 03F00203 		and	r3, r3, #2
 3624              		.loc 1 1333 10
 3625 0284 002B     		cmp	r3, #0
 3626 0286 00F00581 		beq	.L281
1334:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1335:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_IO3VM_EXTI_ENABLE_FALLING_EDGE();
 3627              		.loc 1 1335 9
 3628 028a 044B     		ldr	r3, .L285+4
 3629 028c 5B6C     		ldr	r3, [r3, #68]
 3630 028e 034A     		ldr	r2, .L285+4
 3631 0290 43F04003 		orr	r3, r3, #64
 3632 0294 5364     		str	r3, [r2, #68]
ARM GAS  /tmp/ccsGrD0t.s 			page 94


1336:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1337:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       break;
 3633              		.loc 1 1337 7
 3634 0296 FDE0     		b	.L281
 3635              	.L286:
 3636              		.align	2
 3637              	.L285:
 3638 0298 00000000 		.word	.LC0
 3639 029c 00500256 		.word	1442992128
 3640              	.L249:
1338:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1339:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     case PWR_VDDIO4_VM: /* Independent I/Os voltage monitor */
1340:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1341:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Disable EXTI IO4VM event and interrupt */
1342:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_IO4VM_EXTI_DISABLE_EVENT();
 3641              		.loc 1 1342 7
 3642 02a0 824B     		ldr	r3, .L287
 3643 02a2 D3F8A430 		ldr	r3, [r3, #164]
 3644 02a6 814A     		ldr	r2, .L287
 3645 02a8 23F08003 		bic	r3, r3, #128
 3646 02ac C2F8A430 		str	r3, [r2, #164]
1343:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_IO4VM_EXTI_DISABLE_IT();
 3647              		.loc 1 1343 7
 3648 02b0 7E4B     		ldr	r3, .L287
 3649 02b2 D3F8A030 		ldr	r3, [r3, #160]
 3650 02b6 7D4A     		ldr	r2, .L287
 3651 02b8 23F08003 		bic	r3, r3, #128
 3652 02bc C2F8A030 		str	r3, [r2, #160]
1344:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_IO4VM_EXTI_DISABLE_RISING_EDGE();
 3653              		.loc 1 1344 7
 3654 02c0 7A4B     		ldr	r3, .L287
 3655 02c2 1B6C     		ldr	r3, [r3, #64]
 3656 02c4 794A     		ldr	r2, .L287
 3657 02c6 23F08003 		bic	r3, r3, #128
 3658 02ca 1364     		str	r3, [r2, #64]
1345:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_IO4VM_EXTI_DISABLE_FALLING_EDGE();
 3659              		.loc 1 1345 7
 3660 02cc 774B     		ldr	r3, .L287
 3661 02ce 5B6C     		ldr	r3, [r3, #68]
 3662 02d0 764A     		ldr	r2, .L287
 3663 02d2 23F08003 		bic	r3, r3, #128
 3664 02d6 5364     		str	r3, [r2, #68]
1346:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1347:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the IO4VM in interrupt mode */
1348:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 3665              		.loc 1 1348 22
 3666 02d8 7B68     		ldr	r3, [r7, #4]
 3667 02da 5B68     		ldr	r3, [r3, #4]
 3668              		.loc 1 1348 29
 3669 02dc 03F00403 		and	r3, r3, #4
 3670              		.loc 1 1348 10
 3671 02e0 002B     		cmp	r3, #0
 3672 02e2 07D0     		beq	.L266
1349:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1350:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_IO4VM_EXTI_ENABLE_IT();
 3673              		.loc 1 1350 9
 3674 02e4 714B     		ldr	r3, .L287
ARM GAS  /tmp/ccsGrD0t.s 			page 95


 3675 02e6 D3F8A030 		ldr	r3, [r3, #160]
 3676 02ea 704A     		ldr	r2, .L287
 3677 02ec 43F08003 		orr	r3, r3, #128
 3678 02f0 C2F8A030 		str	r3, [r2, #160]
 3679              	.L266:
1351:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1352:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1353:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the IO4VM in event mode */
1354:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 3680              		.loc 1 1354 22
 3681 02f4 7B68     		ldr	r3, [r7, #4]
 3682 02f6 5B68     		ldr	r3, [r3, #4]
 3683              		.loc 1 1354 29
 3684 02f8 03F00803 		and	r3, r3, #8
 3685              		.loc 1 1354 10
 3686 02fc 002B     		cmp	r3, #0
 3687 02fe 07D0     		beq	.L267
1355:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1356:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_IO4VM_EXTI_ENABLE_EVENT();
 3688              		.loc 1 1356 9
 3689 0300 6A4B     		ldr	r3, .L287
 3690 0302 D3F8A430 		ldr	r3, [r3, #164]
 3691 0306 694A     		ldr	r2, .L287
 3692 0308 43F08003 		orr	r3, r3, #128
 3693 030c C2F8A430 		str	r3, [r2, #164]
 3694              	.L267:
1357:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1358:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1359:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the IO4VM in rising edge */
1360:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 3695              		.loc 1 1360 22
 3696 0310 7B68     		ldr	r3, [r7, #4]
 3697 0312 5B68     		ldr	r3, [r3, #4]
 3698              		.loc 1 1360 29
 3699 0314 03F00103 		and	r3, r3, #1
 3700              		.loc 1 1360 10
 3701 0318 002B     		cmp	r3, #0
 3702 031a 05D0     		beq	.L268
1361:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1362:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_IO4VM_EXTI_ENABLE_RISING_EDGE();
 3703              		.loc 1 1362 9
 3704 031c 634B     		ldr	r3, .L287
 3705 031e 1B6C     		ldr	r3, [r3, #64]
 3706 0320 624A     		ldr	r2, .L287
 3707 0322 43F08003 		orr	r3, r3, #128
 3708 0326 1364     		str	r3, [r2, #64]
 3709              	.L268:
1363:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1364:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1365:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the IO4VM in falling edge */
1366:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 3710              		.loc 1 1366 22
 3711 0328 7B68     		ldr	r3, [r7, #4]
 3712 032a 5B68     		ldr	r3, [r3, #4]
 3713              		.loc 1 1366 29
 3714 032c 03F00203 		and	r3, r3, #2
 3715              		.loc 1 1366 10
ARM GAS  /tmp/ccsGrD0t.s 			page 96


 3716 0330 002B     		cmp	r3, #0
 3717 0332 00F0B180 		beq	.L282
1367:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1368:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_IO4VM_EXTI_ENABLE_FALLING_EDGE();
 3718              		.loc 1 1368 9
 3719 0336 5D4B     		ldr	r3, .L287
 3720 0338 5B6C     		ldr	r3, [r3, #68]
 3721 033a 5C4A     		ldr	r2, .L287
 3722 033c 43F08003 		orr	r3, r3, #128
 3723 0340 5364     		str	r3, [r2, #68]
1369:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1370:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       break;
 3724              		.loc 1 1370 7
 3725 0342 A9E0     		b	.L282
 3726              	.L248:
1371:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1372:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     case PWR_VDDIO5_VM: /* Independent I/Os voltage monitor */
1373:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1374:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Disable EXTI IO5VM event and interrupt */
1375:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_IO5VM_EXTI_DISABLE_EVENT();
 3727              		.loc 1 1375 7
 3728 0344 594B     		ldr	r3, .L287
 3729 0346 D3F8A430 		ldr	r3, [r3, #164]
 3730 034a 584A     		ldr	r2, .L287
 3731 034c 23F48073 		bic	r3, r3, #256
 3732 0350 C2F8A430 		str	r3, [r2, #164]
1376:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_IO5VM_EXTI_DISABLE_IT();
 3733              		.loc 1 1376 7
 3734 0354 554B     		ldr	r3, .L287
 3735 0356 D3F8A030 		ldr	r3, [r3, #160]
 3736 035a 544A     		ldr	r2, .L287
 3737 035c 23F48073 		bic	r3, r3, #256
 3738 0360 C2F8A030 		str	r3, [r2, #160]
1377:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_IO5VM_EXTI_DISABLE_RISING_EDGE();
 3739              		.loc 1 1377 7
 3740 0364 514B     		ldr	r3, .L287
 3741 0366 1B6C     		ldr	r3, [r3, #64]
 3742 0368 504A     		ldr	r2, .L287
 3743 036a 23F48073 		bic	r3, r3, #256
 3744 036e 1364     		str	r3, [r2, #64]
1378:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_IO5VM_EXTI_DISABLE_FALLING_EDGE();
 3745              		.loc 1 1378 7
 3746 0370 4E4B     		ldr	r3, .L287
 3747 0372 5B6C     		ldr	r3, [r3, #68]
 3748 0374 4D4A     		ldr	r2, .L287
 3749 0376 23F48073 		bic	r3, r3, #256
 3750 037a 5364     		str	r3, [r2, #68]
1379:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1380:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the IO5VM in interrupt mode */
1381:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 3751              		.loc 1 1381 22
 3752 037c 7B68     		ldr	r3, [r7, #4]
 3753 037e 5B68     		ldr	r3, [r3, #4]
 3754              		.loc 1 1381 29
 3755 0380 03F00403 		and	r3, r3, #4
 3756              		.loc 1 1381 10
 3757 0384 002B     		cmp	r3, #0
ARM GAS  /tmp/ccsGrD0t.s 			page 97


 3758 0386 07D0     		beq	.L270
1382:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1383:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_IO5VM_EXTI_ENABLE_IT();
 3759              		.loc 1 1383 9
 3760 0388 484B     		ldr	r3, .L287
 3761 038a D3F8A030 		ldr	r3, [r3, #160]
 3762 038e 474A     		ldr	r2, .L287
 3763 0390 43F48073 		orr	r3, r3, #256
 3764 0394 C2F8A030 		str	r3, [r2, #160]
 3765              	.L270:
1384:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1385:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1386:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the IO5VM in event mode */
1387:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 3766              		.loc 1 1387 22
 3767 0398 7B68     		ldr	r3, [r7, #4]
 3768 039a 5B68     		ldr	r3, [r3, #4]
 3769              		.loc 1 1387 29
 3770 039c 03F00803 		and	r3, r3, #8
 3771              		.loc 1 1387 10
 3772 03a0 002B     		cmp	r3, #0
 3773 03a2 07D0     		beq	.L271
1388:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1389:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_IO5VM_EXTI_ENABLE_EVENT();
 3774              		.loc 1 1389 9
 3775 03a4 414B     		ldr	r3, .L287
 3776 03a6 D3F8A430 		ldr	r3, [r3, #164]
 3777 03aa 404A     		ldr	r2, .L287
 3778 03ac 43F48073 		orr	r3, r3, #256
 3779 03b0 C2F8A430 		str	r3, [r2, #164]
 3780              	.L271:
1390:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1391:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1392:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the IO5VM in rising edge */
1393:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 3781              		.loc 1 1393 22
 3782 03b4 7B68     		ldr	r3, [r7, #4]
 3783 03b6 5B68     		ldr	r3, [r3, #4]
 3784              		.loc 1 1393 29
 3785 03b8 03F00103 		and	r3, r3, #1
 3786              		.loc 1 1393 10
 3787 03bc 002B     		cmp	r3, #0
 3788 03be 05D0     		beq	.L272
1394:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1395:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_IO5VM_EXTI_ENABLE_RISING_EDGE();
 3789              		.loc 1 1395 9
 3790 03c0 3A4B     		ldr	r3, .L287
 3791 03c2 1B6C     		ldr	r3, [r3, #64]
 3792 03c4 394A     		ldr	r2, .L287
 3793 03c6 43F48073 		orr	r3, r3, #256
 3794 03ca 1364     		str	r3, [r2, #64]
 3795              	.L272:
1396:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1397:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1398:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the IO5VM in falling edge */
1399:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 3796              		.loc 1 1399 22
ARM GAS  /tmp/ccsGrD0t.s 			page 98


 3797 03cc 7B68     		ldr	r3, [r7, #4]
 3798 03ce 5B68     		ldr	r3, [r3, #4]
 3799              		.loc 1 1399 29
 3800 03d0 03F00203 		and	r3, r3, #2
 3801              		.loc 1 1399 10
 3802 03d4 002B     		cmp	r3, #0
 3803 03d6 61D0     		beq	.L283
1400:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1401:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_IO5VM_EXTI_ENABLE_FALLING_EDGE();
 3804              		.loc 1 1401 9
 3805 03d8 344B     		ldr	r3, .L287
 3806 03da 5B6C     		ldr	r3, [r3, #68]
 3807 03dc 334A     		ldr	r2, .L287
 3808 03de 43F48073 		orr	r3, r3, #256
 3809 03e2 5364     		str	r3, [r2, #68]
1402:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1403:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       break;
 3810              		.loc 1 1403 7
 3811 03e4 5AE0     		b	.L283
 3812              	.L246:
1404:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1405:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     case PWR_VDDA_VM: /* Independent ADC voltage monitor */
1406:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1407:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Disable EXTI ADCVM event and interrupt */
1408:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_ADCVM_EXTI_DISABLE_EVENT();
 3813              		.loc 1 1408 7
 3814 03e6 314B     		ldr	r3, .L287
 3815 03e8 D3F8A430 		ldr	r3, [r3, #164]
 3816 03ec 2F4A     		ldr	r2, .L287
 3817 03ee 23F48063 		bic	r3, r3, #1024
 3818 03f2 C2F8A430 		str	r3, [r2, #164]
1409:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_ADCVM_EXTI_DISABLE_IT();
 3819              		.loc 1 1409 7
 3820 03f6 2D4B     		ldr	r3, .L287
 3821 03f8 D3F8A030 		ldr	r3, [r3, #160]
 3822 03fc 2B4A     		ldr	r2, .L287
 3823 03fe 23F48063 		bic	r3, r3, #1024
 3824 0402 C2F8A030 		str	r3, [r2, #160]
1410:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_ADCVM_EXTI_DISABLE_RISING_EDGE();
 3825              		.loc 1 1410 7
 3826 0406 294B     		ldr	r3, .L287
 3827 0408 1B6C     		ldr	r3, [r3, #64]
 3828 040a 284A     		ldr	r2, .L287
 3829 040c 23F48063 		bic	r3, r3, #1024
 3830 0410 1364     		str	r3, [r2, #64]
1411:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       __HAL_PWR_ADCVM_EXTI_DISABLE_FALLING_EDGE();
 3831              		.loc 1 1411 7
 3832 0412 264B     		ldr	r3, .L287
 3833 0414 5B6C     		ldr	r3, [r3, #68]
 3834 0416 254A     		ldr	r2, .L287
 3835 0418 23F48063 		bic	r3, r3, #1024
 3836 041c 5364     		str	r3, [r2, #68]
1412:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1413:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the ADCVM in interrupt mode */
1414:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 3837              		.loc 1 1414 22
 3838 041e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccsGrD0t.s 			page 99


 3839 0420 5B68     		ldr	r3, [r3, #4]
 3840              		.loc 1 1414 29
 3841 0422 03F00403 		and	r3, r3, #4
 3842              		.loc 1 1414 10
 3843 0426 002B     		cmp	r3, #0
 3844 0428 07D0     		beq	.L274
1415:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1416:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_ADCVM_EXTI_ENABLE_IT();
 3845              		.loc 1 1416 9
 3846 042a 204B     		ldr	r3, .L287
 3847 042c D3F8A030 		ldr	r3, [r3, #160]
 3848 0430 1E4A     		ldr	r2, .L287
 3849 0432 43F48063 		orr	r3, r3, #1024
 3850 0436 C2F8A030 		str	r3, [r2, #160]
 3851              	.L274:
1417:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1418:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1419:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the ADCVM in event mode */
1420:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 3852              		.loc 1 1420 22
 3853 043a 7B68     		ldr	r3, [r7, #4]
 3854 043c 5B68     		ldr	r3, [r3, #4]
 3855              		.loc 1 1420 29
 3856 043e 03F00803 		and	r3, r3, #8
 3857              		.loc 1 1420 10
 3858 0442 002B     		cmp	r3, #0
 3859 0444 07D0     		beq	.L275
1421:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1422:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_ADCVM_EXTI_ENABLE_EVENT();
 3860              		.loc 1 1422 9
 3861 0446 194B     		ldr	r3, .L287
 3862 0448 D3F8A430 		ldr	r3, [r3, #164]
 3863 044c 174A     		ldr	r2, .L287
 3864 044e 43F48063 		orr	r3, r3, #1024
 3865 0452 C2F8A430 		str	r3, [r2, #164]
 3866              	.L275:
1423:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1424:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1425:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the ADCVM in rising edge */
1426:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 3867              		.loc 1 1426 22
 3868 0456 7B68     		ldr	r3, [r7, #4]
 3869 0458 5B68     		ldr	r3, [r3, #4]
 3870              		.loc 1 1426 29
 3871 045a 03F00103 		and	r3, r3, #1
 3872              		.loc 1 1426 10
 3873 045e 002B     		cmp	r3, #0
 3874 0460 05D0     		beq	.L276
1427:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1428:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_ADCVM_EXTI_ENABLE_RISING_EDGE();
 3875              		.loc 1 1428 9
 3876 0462 124B     		ldr	r3, .L287
 3877 0464 1B6C     		ldr	r3, [r3, #64]
 3878 0466 114A     		ldr	r2, .L287
 3879 0468 43F48063 		orr	r3, r3, #1024
 3880 046c 1364     		str	r3, [r2, #64]
 3881              	.L276:
ARM GAS  /tmp/ccsGrD0t.s 			page 100


1429:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1430:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1431:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       /* Configure the ADCVM in falling edge */
1432:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       if ((pConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 3882              		.loc 1 1432 22
 3883 046e 7B68     		ldr	r3, [r7, #4]
 3884 0470 5B68     		ldr	r3, [r3, #4]
 3885              		.loc 1 1432 29
 3886 0472 03F00203 		and	r3, r3, #2
 3887              		.loc 1 1432 10
 3888 0476 002B     		cmp	r3, #0
 3889 0478 12D0     		beq	.L284
1433:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       {
1434:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****         __HAL_PWR_ADCVM_EXTI_ENABLE_FALLING_EDGE();
 3890              		.loc 1 1434 9
 3891 047a 0C4B     		ldr	r3, .L287
 3892 047c 5B6C     		ldr	r3, [r3, #68]
 3893 047e 0B4A     		ldr	r2, .L287
 3894 0480 43F48063 		orr	r3, r3, #1024
 3895 0484 5364     		str	r3, [r2, #68]
1435:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       }
1436:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       break;
 3896              		.loc 1 1436 7
 3897 0486 0BE0     		b	.L284
 3898              	.L245:
1437:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1438:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     default: /* No valid voltage monitor selected */
1439:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       return HAL_ERROR;
 3899              		.loc 1 1439 14
 3900 0488 0123     		movs	r3, #1
 3901 048a 0BE0     		b	.L278
 3902              	.L279:
1271:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 3903              		.loc 1 1271 7
 3904 048c 00BF     		nop
 3905 048e 08E0     		b	.L257
 3906              	.L280:
1304:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 3907              		.loc 1 1304 7
 3908 0490 00BF     		nop
 3909 0492 06E0     		b	.L257
 3910              	.L281:
1337:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 3911              		.loc 1 1337 7
 3912 0494 00BF     		nop
 3913 0496 04E0     		b	.L257
 3914              	.L282:
1370:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 3915              		.loc 1 1370 7
 3916 0498 00BF     		nop
 3917 049a 02E0     		b	.L257
 3918              	.L283:
1403:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 3919              		.loc 1 1403 7
 3920 049c 00BF     		nop
 3921 049e 00E0     		b	.L257
 3922              	.L284:
ARM GAS  /tmp/ccsGrD0t.s 			page 101


1436:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
 3923              		.loc 1 1436 7
 3924 04a0 00BF     		nop
 3925              	.L257:
1440:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****       break;
1441:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
1442:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1443:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   return HAL_OK;
 3926              		.loc 1 1443 10
 3927 04a2 0023     		movs	r3, #0
 3928              	.L278:
1444:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 3929              		.loc 1 1444 1
 3930 04a4 1846     		mov	r0, r3
 3931 04a6 0837     		adds	r7, r7, #8
 3932              		.cfi_def_cfa_offset 8
 3933 04a8 BD46     		mov	sp, r7
 3934              		.cfi_def_cfa_register 13
 3935              		@ sp needed
 3936 04aa 80BD     		pop	{r7, pc}
 3937              	.L288:
 3938              		.align	2
 3939              	.L287:
 3940 04ac 00500256 		.word	1442992128
 3941              		.cfi_endproc
 3942              	.LFE892:
 3944              		.section	.text.HAL_PWREx_PVD_PVM_IRQHandler,"ax",%progbits
 3945              		.align	1
 3946              		.global	HAL_PWREx_PVD_PVM_IRQHandler
 3947              		.syntax unified
 3948              		.thumb
 3949              		.thumb_func
 3951              	HAL_PWREx_PVD_PVM_IRQHandler:
 3952              	.LFB893:
1445:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1446:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1447:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  This function handles the PWR PVD/PVM interrupt request.
1448:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1449:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1450:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** void HAL_PWREx_PVD_PVM_IRQHandler(void)
1451:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 3953              		.loc 1 1451 1
 3954              		.cfi_startproc
 3955              		@ args = 0, pretend = 0, frame = 8
 3956              		@ frame_needed = 1, uses_anonymous_args = 0
 3957 0000 80B5     		push	{r7, lr}
 3958              		.cfi_def_cfa_offset 8
 3959              		.cfi_offset 7, -8
 3960              		.cfi_offset 14, -4
 3961 0002 82B0     		sub	sp, sp, #8
 3962              		.cfi_def_cfa_offset 16
 3963 0004 00AF     		add	r7, sp, #0
 3964              		.cfi_def_cfa_register 7
1452:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   uint32_t  rising_flag;
1453:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   uint32_t  falling_flag;
1454:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1455:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   rising_flag  = READ_REG(EXTI->RPR3);
ARM GAS  /tmp/ccsGrD0t.s 			page 102


 3965              		.loc 1 1455 18
 3966 0006 584B     		ldr	r3, .L307
 3967              		.loc 1 1455 16
 3968 0008 DB6C     		ldr	r3, [r3, #76]
 3969 000a 7B60     		str	r3, [r7, #4]
1456:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   falling_flag = READ_REG(EXTI->FPR3);
 3970              		.loc 1 1456 18
 3971 000c 564B     		ldr	r3, .L307
 3972              		.loc 1 1456 16
 3973 000e 1B6D     		ldr	r3, [r3, #80]
 3974 0010 3B60     		str	r3, [r7]
1457:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1458:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check PWR VDDCORE monitoring exti rising flag */
1459:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if ((rising_flag & PWR_EXTI_LINE_VCOREVM) != 0U)
 3975              		.loc 1 1459 20
 3976 0012 7B68     		ldr	r3, [r7, #4]
 3977 0014 03F01003 		and	r3, r3, #16
 3978              		.loc 1 1459 6
 3979 0018 002B     		cmp	r3, #0
 3980 001a 04D0     		beq	.L290
1460:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
1461:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* Clear VDDCORE monitoring exti pending bit */
1462:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     __HAL_PWR_VCOREVM_EXTI_CLEAR_RISING_FLAG();
 3981              		.loc 1 1462 5
 3982 001c 524B     		ldr	r3, .L307
 3983 001e 1022     		movs	r2, #16
 3984 0020 DA64     		str	r2, [r3, #76]
1463:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1464:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* PWR VDDCORE monitoring interrupt rising user callback */
1465:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     HAL_PWREx_VDDCORE_Rising_Callback();
 3985              		.loc 1 1465 5
 3986 0022 FFF7FEFF 		bl	HAL_PWREx_VDDCORE_Rising_Callback
 3987              	.L290:
1466:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
1467:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1468:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check PWR VDDCORE monitoring exti falling flag */
1469:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if ((falling_flag & PWR_EXTI_LINE_VCOREVM) != 0U)
 3988              		.loc 1 1469 21
 3989 0026 3B68     		ldr	r3, [r7]
 3990 0028 03F01003 		and	r3, r3, #16
 3991              		.loc 1 1469 6
 3992 002c 002B     		cmp	r3, #0
 3993 002e 04D0     		beq	.L291
1470:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
1471:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* Clear VDDCORE monitoring exti pending bit */
1472:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     __HAL_PWR_VCOREVM_EXTI_CLEAR_FALLING_FLAG();
 3994              		.loc 1 1472 5
 3995 0030 4D4B     		ldr	r3, .L307
 3996 0032 1022     		movs	r2, #16
 3997 0034 1A65     		str	r2, [r3, #80]
1473:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1474:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* PWR VDDCORE monitoring interrupt falling user callback */
1475:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     HAL_PWREx_VDDCORE_Falling_Callback();
 3998              		.loc 1 1475 5
 3999 0036 FFF7FEFF 		bl	HAL_PWREx_VDDCORE_Falling_Callback
 4000              	.L291:
1476:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
ARM GAS  /tmp/ccsGrD0t.s 			page 103


1477:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1478:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check PWR PVD exti rising flag */
1479:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if ((rising_flag & PWR_EXTI_LINE_PVD) != 0U)
 4001              		.loc 1 1479 20
 4002 003a 7B68     		ldr	r3, [r7, #4]
 4003 003c 03F00403 		and	r3, r3, #4
 4004              		.loc 1 1479 6
 4005 0040 002B     		cmp	r3, #0
 4006 0042 04D0     		beq	.L292
1480:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
1481:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* Clear PVD exti pending bit */
1482:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     __HAL_PWR_PVD_EXTI_CLEAR_RISING_FLAG();
 4007              		.loc 1 1482 5
 4008 0044 484B     		ldr	r3, .L307
 4009 0046 0422     		movs	r2, #4
 4010 0048 DA64     		str	r2, [r3, #76]
1483:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1484:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* PWR PVD interrupt rising user callback */
1485:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     HAL_PWR_PVD_Rising_Callback();
 4011              		.loc 1 1485 5
 4012 004a FFF7FEFF 		bl	HAL_PWR_PVD_Rising_Callback
 4013              	.L292:
1486:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
1487:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1488:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check PWR PVD exti falling flag */
1489:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if ((falling_flag & PWR_EXTI_LINE_PVD) != 0U)
 4014              		.loc 1 1489 21
 4015 004e 3B68     		ldr	r3, [r7]
 4016 0050 03F00403 		and	r3, r3, #4
 4017              		.loc 1 1489 6
 4018 0054 002B     		cmp	r3, #0
 4019 0056 04D0     		beq	.L293
1490:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
1491:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* Clear PVD exti pending bit */
1492:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     __HAL_PWR_PVD_EXTI_CLEAR_FALLING_FLAG();
 4020              		.loc 1 1492 5
 4021 0058 434B     		ldr	r3, .L307
 4022 005a 0422     		movs	r2, #4
 4023 005c 1A65     		str	r2, [r3, #80]
1493:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1494:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* PWR PVD interrupt falling user callback */
1495:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     HAL_PWR_PVD_Falling_Callback();
 4024              		.loc 1 1495 5
 4025 005e FFF7FEFF 		bl	HAL_PWR_PVD_Falling_Callback
 4026              	.L293:
1496:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
1497:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1498:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check PWR PVM USB exti rising flag */
1499:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if ((rising_flag & PWR_EXTI_LINE_PVM_VDDUSB) != 0U)
 4027              		.loc 1 1499 20
 4028 0062 7B68     		ldr	r3, [r7, #4]
 4029 0064 03F40073 		and	r3, r3, #512
 4030              		.loc 1 1499 6
 4031 0068 002B     		cmp	r3, #0
 4032 006a 05D0     		beq	.L294
1500:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
1501:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* Clear PVM USB exti pending bit */
ARM GAS  /tmp/ccsGrD0t.s 			page 104


1502:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     __HAL_PWR_USBVM_EXTI_CLEAR_RISING_FLAG();
 4033              		.loc 1 1502 5
 4034 006c 3E4B     		ldr	r3, .L307
 4035 006e 4FF40072 		mov	r2, #512
 4036 0072 DA64     		str	r2, [r3, #76]
1503:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1504:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* PWR PVM USB interrupt rising user callback */
1505:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     HAL_PWREx_USBVM_Rising_Callback();
 4037              		.loc 1 1505 5
 4038 0074 FFF7FEFF 		bl	HAL_PWREx_USBVM_Rising_Callback
 4039              	.L294:
1506:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
1507:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1508:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check PWR PVM USB exti falling flag */
1509:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if ((falling_flag & PWR_EXTI_LINE_PVM_VDDUSB) != 0U)
 4040              		.loc 1 1509 21
 4041 0078 3B68     		ldr	r3, [r7]
 4042 007a 03F40073 		and	r3, r3, #512
 4043              		.loc 1 1509 6
 4044 007e 002B     		cmp	r3, #0
 4045 0080 05D0     		beq	.L295
1510:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
1511:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* Clear PVM USB exti pending bit */
1512:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     __HAL_PWR_USBVM_EXTI_CLEAR_FALLING_FLAG();
 4046              		.loc 1 1512 5
 4047 0082 394B     		ldr	r3, .L307
 4048 0084 4FF40072 		mov	r2, #512
 4049 0088 1A65     		str	r2, [r3, #80]
1513:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1514:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* PWR PVM USB interrupt falling user callback */
1515:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     HAL_PWREx_USBVM_Falling_Callback();
 4050              		.loc 1 1515 5
 4051 008a FFF7FEFF 		bl	HAL_PWREx_USBVM_Falling_Callback
 4052              	.L295:
1516:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
1517:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1518:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check PWR PVM IO2 exti rising flag */
1519:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if ((rising_flag & PWR_EXTI_LINE_PVM_VDDIO2) != 0U)
 4053              		.loc 1 1519 20
 4054 008e 7B68     		ldr	r3, [r7, #4]
 4055 0090 03F02003 		and	r3, r3, #32
 4056              		.loc 1 1519 6
 4057 0094 002B     		cmp	r3, #0
 4058 0096 04D0     		beq	.L296
1520:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
1521:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* Clear PVM IO2 exti pending bit */
1522:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     __HAL_PWR_IO2VM_EXTI_CLEAR_RISING_FLAG();
 4059              		.loc 1 1522 5
 4060 0098 334B     		ldr	r3, .L307
 4061 009a 2022     		movs	r2, #32
 4062 009c DA64     		str	r2, [r3, #76]
1523:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1524:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* PWR PVM IO2 interrupt rising user callback */
1525:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     HAL_PWREx_IO2VM_Rising_Callback();
 4063              		.loc 1 1525 5
 4064 009e FFF7FEFF 		bl	HAL_PWREx_IO2VM_Rising_Callback
 4065              	.L296:
ARM GAS  /tmp/ccsGrD0t.s 			page 105


1526:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
1527:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1528:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check PWR PVM IO2 exti falling flag */
1529:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if ((falling_flag & PWR_EXTI_LINE_PVM_VDDIO2) != 0U)
 4066              		.loc 1 1529 21
 4067 00a2 3B68     		ldr	r3, [r7]
 4068 00a4 03F02003 		and	r3, r3, #32
 4069              		.loc 1 1529 6
 4070 00a8 002B     		cmp	r3, #0
 4071 00aa 04D0     		beq	.L297
1530:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
1531:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* Clear PVM IO2 exti pending bit */
1532:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     __HAL_PWR_IO2VM_EXTI_CLEAR_FALLING_FLAG();
 4072              		.loc 1 1532 5
 4073 00ac 2E4B     		ldr	r3, .L307
 4074 00ae 2022     		movs	r2, #32
 4075 00b0 1A65     		str	r2, [r3, #80]
1533:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1534:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* PWR PVM IO2 interrupt falling user callback */
1535:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     HAL_PWREx_IO2VM_Falling_Callback();
 4076              		.loc 1 1535 5
 4077 00b2 FFF7FEFF 		bl	HAL_PWREx_IO2VM_Falling_Callback
 4078              	.L297:
1536:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
1537:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1538:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check PWR PVM IO3 exti rising flag */
1539:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if ((rising_flag & PWR_EXTI_LINE_PVM_VDDIO3) != 0U)
 4079              		.loc 1 1539 20
 4080 00b6 7B68     		ldr	r3, [r7, #4]
 4081 00b8 03F04003 		and	r3, r3, #64
 4082              		.loc 1 1539 6
 4083 00bc 002B     		cmp	r3, #0
 4084 00be 04D0     		beq	.L298
1540:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
1541:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* Clear PVM IO3 exti pending bit */
1542:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     __HAL_PWR_IO3VM_EXTI_CLEAR_RISING_FLAG();
 4085              		.loc 1 1542 5
 4086 00c0 294B     		ldr	r3, .L307
 4087 00c2 4022     		movs	r2, #64
 4088 00c4 DA64     		str	r2, [r3, #76]
1543:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1544:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* PWR PVM IO3 interrupt rising user callback */
1545:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     HAL_PWREx_IO3VM_Rising_Callback();
 4089              		.loc 1 1545 5
 4090 00c6 FFF7FEFF 		bl	HAL_PWREx_IO3VM_Rising_Callback
 4091              	.L298:
1546:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
1547:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1548:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check PWR PVM IO3 exti falling flag */
1549:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if ((falling_flag & PWR_EXTI_LINE_PVM_VDDIO3) != 0U)
 4092              		.loc 1 1549 21
 4093 00ca 3B68     		ldr	r3, [r7]
 4094 00cc 03F04003 		and	r3, r3, #64
 4095              		.loc 1 1549 6
 4096 00d0 002B     		cmp	r3, #0
 4097 00d2 04D0     		beq	.L299
1550:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
ARM GAS  /tmp/ccsGrD0t.s 			page 106


1551:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* Clear PVM IO3 exti pending bit */
1552:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     __HAL_PWR_IO3VM_EXTI_CLEAR_FALLING_FLAG();
 4098              		.loc 1 1552 5
 4099 00d4 244B     		ldr	r3, .L307
 4100 00d6 4022     		movs	r2, #64
 4101 00d8 1A65     		str	r2, [r3, #80]
1553:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1554:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* PWR PVM IO3 interrupt falling user callback */
1555:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     HAL_PWREx_IO3VM_Falling_Callback();
 4102              		.loc 1 1555 5
 4103 00da FFF7FEFF 		bl	HAL_PWREx_IO3VM_Falling_Callback
 4104              	.L299:
1556:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
1557:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1558:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check PWR PVM IO4 exti rising flag */
1559:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if ((rising_flag & PWR_EXTI_LINE_PVM_VDDIO4) != 0U)
 4105              		.loc 1 1559 20
 4106 00de 7B68     		ldr	r3, [r7, #4]
 4107 00e0 03F08003 		and	r3, r3, #128
 4108              		.loc 1 1559 6
 4109 00e4 002B     		cmp	r3, #0
 4110 00e6 04D0     		beq	.L300
1560:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
1561:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* Clear PVM IO4 exti pending bit */
1562:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     __HAL_PWR_IO4VM_EXTI_CLEAR_RISING_FLAG();
 4111              		.loc 1 1562 5
 4112 00e8 1F4B     		ldr	r3, .L307
 4113 00ea 8022     		movs	r2, #128
 4114 00ec DA64     		str	r2, [r3, #76]
1563:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1564:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* PWR PVM IO4 interrupt rising user callback */
1565:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     HAL_PWREx_IO4VM_Rising_Callback();
 4115              		.loc 1 1565 5
 4116 00ee FFF7FEFF 		bl	HAL_PWREx_IO4VM_Rising_Callback
 4117              	.L300:
1566:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
1567:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1568:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check PWR PVM IO4 exti falling flag */
1569:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if ((falling_flag & PWR_EXTI_LINE_PVM_VDDIO4) != 0U)
 4118              		.loc 1 1569 21
 4119 00f2 3B68     		ldr	r3, [r7]
 4120 00f4 03F08003 		and	r3, r3, #128
 4121              		.loc 1 1569 6
 4122 00f8 002B     		cmp	r3, #0
 4123 00fa 04D0     		beq	.L301
1570:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
1571:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* Clear PVM IO4 exti pending bit */
1572:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     __HAL_PWR_IO4VM_EXTI_CLEAR_FALLING_FLAG();
 4124              		.loc 1 1572 5
 4125 00fc 1A4B     		ldr	r3, .L307
 4126 00fe 8022     		movs	r2, #128
 4127 0100 1A65     		str	r2, [r3, #80]
1573:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1574:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* PWR PVM IO4 interrupt falling user callback */
1575:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     HAL_PWREx_IO4VM_Falling_Callback();
 4128              		.loc 1 1575 5
 4129 0102 FFF7FEFF 		bl	HAL_PWREx_IO4VM_Falling_Callback
ARM GAS  /tmp/ccsGrD0t.s 			page 107


 4130              	.L301:
1576:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
1577:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1578:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check PWR PVM IO5 exti rising flag */
1579:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if ((rising_flag & PWR_EXTI_LINE_PVM_VDDIO5) != 0U)
 4131              		.loc 1 1579 20
 4132 0106 7B68     		ldr	r3, [r7, #4]
 4133 0108 03F48073 		and	r3, r3, #256
 4134              		.loc 1 1579 6
 4135 010c 002B     		cmp	r3, #0
 4136 010e 05D0     		beq	.L302
1580:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
1581:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* Clear PVM IO5 exti pending bit */
1582:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     __HAL_PWR_IO5VM_EXTI_CLEAR_RISING_FLAG();
 4137              		.loc 1 1582 5
 4138 0110 154B     		ldr	r3, .L307
 4139 0112 4FF48072 		mov	r2, #256
 4140 0116 DA64     		str	r2, [r3, #76]
1583:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1584:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* PWR PVM IO5 interrupt rising user callback */
1585:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     HAL_PWREx_IO5VM_Rising_Callback();
 4141              		.loc 1 1585 5
 4142 0118 FFF7FEFF 		bl	HAL_PWREx_IO5VM_Rising_Callback
 4143              	.L302:
1586:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
1587:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1588:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check PWR PVM IO5 exti falling flag */
1589:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if ((falling_flag & PWR_EXTI_LINE_PVM_VDDIO5) != 0U)
 4144              		.loc 1 1589 21
 4145 011c 3B68     		ldr	r3, [r7]
 4146 011e 03F48073 		and	r3, r3, #256
 4147              		.loc 1 1589 6
 4148 0122 002B     		cmp	r3, #0
 4149 0124 05D0     		beq	.L303
1590:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
1591:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* Clear PVM IO5 exti pending bit */
1592:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     __HAL_PWR_IO5VM_EXTI_CLEAR_FALLING_FLAG();
 4150              		.loc 1 1592 5
 4151 0126 104B     		ldr	r3, .L307
 4152 0128 4FF48072 		mov	r2, #256
 4153 012c 1A65     		str	r2, [r3, #80]
1593:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1594:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* PWR PVM IO5 interrupt falling user callback */
1595:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     HAL_PWREx_IO5VM_Falling_Callback();
 4154              		.loc 1 1595 5
 4155 012e FFF7FEFF 		bl	HAL_PWREx_IO5VM_Falling_Callback
 4156              	.L303:
1596:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1597:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
1598:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1599:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check PWR PVM ADC VM exti rising flag */
1600:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if ((rising_flag & PWR_EXTI_LINE_PVM_VDDA) != 0U)
 4157              		.loc 1 1600 20
 4158 0132 7B68     		ldr	r3, [r7, #4]
 4159 0134 03F48063 		and	r3, r3, #1024
 4160              		.loc 1 1600 6
 4161 0138 002B     		cmp	r3, #0
ARM GAS  /tmp/ccsGrD0t.s 			page 108


 4162 013a 05D0     		beq	.L304
1601:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
1602:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* Clear PVM ADC VM exti pending bit */
1603:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     __HAL_PWR_ADCVM_EXTI_CLEAR_RISING_FLAG();
 4163              		.loc 1 1603 5
 4164 013c 0A4B     		ldr	r3, .L307
 4165 013e 4FF48062 		mov	r2, #1024
 4166 0142 DA64     		str	r2, [r3, #76]
1604:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1605:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* PWR PVM ADC VM interrupt rising user callback */
1606:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     HAL_PWREx_ADCVM_Rising_Callback();
 4167              		.loc 1 1606 5
 4168 0144 FFF7FEFF 		bl	HAL_PWREx_ADCVM_Rising_Callback
 4169              	.L304:
1607:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
1608:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1609:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* Check PWR PVM ADC VM exti falling flag */
1610:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   if ((falling_flag & PWR_EXTI_LINE_PVM_VDDA) != 0U)
 4170              		.loc 1 1610 21
 4171 0148 3B68     		ldr	r3, [r7]
 4172 014a 03F48063 		and	r3, r3, #1024
 4173              		.loc 1 1610 6
 4174 014e 002B     		cmp	r3, #0
 4175 0150 05D0     		beq	.L306
1611:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   {
1612:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* Clear PVM ADC VM exti pending bit */
1613:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     __HAL_PWR_ADCVM_EXTI_CLEAR_FALLING_FLAG();
 4176              		.loc 1 1613 5
 4177 0152 054B     		ldr	r3, .L307
 4178 0154 4FF48062 		mov	r2, #1024
 4179 0158 1A65     		str	r2, [r3, #80]
1614:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1615:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     /* PWR PVM ADC VM interrupt falling user callback */
1616:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****     HAL_PWREx_ADCVM_Falling_Callback();
 4180              		.loc 1 1616 5
 4181 015a FFF7FEFF 		bl	HAL_PWREx_ADCVM_Falling_Callback
 4182              	.L306:
1617:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   }
1618:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 4183              		.loc 1 1618 1
 4184 015e 00BF     		nop
 4185 0160 0837     		adds	r7, r7, #8
 4186              		.cfi_def_cfa_offset 8
 4187 0162 BD46     		mov	sp, r7
 4188              		.cfi_def_cfa_register 13
 4189              		@ sp needed
 4190 0164 80BD     		pop	{r7, pc}
 4191              	.L308:
 4192 0166 00BF     		.align	2
 4193              	.L307:
 4194 0168 00500256 		.word	1442992128
 4195              		.cfi_endproc
 4196              	.LFE893:
 4198              		.section	.text.HAL_PWREx_VDDCORE_Rising_Callback,"ax",%progbits
 4199              		.align	1
 4200              		.weak	HAL_PWREx_VDDCORE_Rising_Callback
 4201              		.syntax unified
ARM GAS  /tmp/ccsGrD0t.s 			page 109


 4202              		.thumb
 4203              		.thumb_func
 4205              	HAL_PWREx_VDDCORE_Rising_Callback:
 4206              	.LFB894:
1619:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1620:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1621:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  PWR VDDCORE interrupt Rising callback.
1622:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1623:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1624:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** __weak void HAL_PWREx_VDDCORE_Rising_Callback(void)
1625:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 4207              		.loc 1 1625 1
 4208              		.cfi_startproc
 4209              		@ args = 0, pretend = 0, frame = 0
 4210              		@ frame_needed = 1, uses_anonymous_args = 0
 4211              		@ link register save eliminated.
 4212 0000 80B4     		push	{r7}
 4213              		.cfi_def_cfa_offset 4
 4214              		.cfi_offset 7, -4
 4215 0002 00AF     		add	r7, sp, #0
 4216              		.cfi_def_cfa_register 7
1626:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified; when the callback is needed,
1627:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****             HAL_PWREx_VDDCORE_Rising_Callback() API can be implemented in the user file
1628:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    */
1629:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 4217              		.loc 1 1629 1
 4218 0004 00BF     		nop
 4219 0006 BD46     		mov	sp, r7
 4220              		.cfi_def_cfa_register 13
 4221              		@ sp needed
 4222 0008 5DF8047B 		ldr	r7, [sp], #4
 4223              		.cfi_restore 7
 4224              		.cfi_def_cfa_offset 0
 4225 000c 7047     		bx	lr
 4226              		.cfi_endproc
 4227              	.LFE894:
 4229              		.section	.text.HAL_PWREx_VDDCORE_Falling_Callback,"ax",%progbits
 4230              		.align	1
 4231              		.weak	HAL_PWREx_VDDCORE_Falling_Callback
 4232              		.syntax unified
 4233              		.thumb
 4234              		.thumb_func
 4236              	HAL_PWREx_VDDCORE_Falling_Callback:
 4237              	.LFB895:
1630:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1631:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1632:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  PWR VDDCORE interrupt Falling callback.
1633:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1634:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1635:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** __weak void HAL_PWREx_VDDCORE_Falling_Callback(void)
1636:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 4238              		.loc 1 1636 1
 4239              		.cfi_startproc
 4240              		@ args = 0, pretend = 0, frame = 0
 4241              		@ frame_needed = 1, uses_anonymous_args = 0
 4242              		@ link register save eliminated.
 4243 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccsGrD0t.s 			page 110


 4244              		.cfi_def_cfa_offset 4
 4245              		.cfi_offset 7, -4
 4246 0002 00AF     		add	r7, sp, #0
 4247              		.cfi_def_cfa_register 7
1637:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified; when the callback is needed,
1638:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****             HAL_PWREx_VDDCORE_Falling_Callback() API can be implemented in the user file
1639:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    */
1640:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 4248              		.loc 1 1640 1
 4249 0004 00BF     		nop
 4250 0006 BD46     		mov	sp, r7
 4251              		.cfi_def_cfa_register 13
 4252              		@ sp needed
 4253 0008 5DF8047B 		ldr	r7, [sp], #4
 4254              		.cfi_restore 7
 4255              		.cfi_def_cfa_offset 0
 4256 000c 7047     		bx	lr
 4257              		.cfi_endproc
 4258              	.LFE895:
 4260              		.section	.text.HAL_PWREx_USBVM_Rising_Callback,"ax",%progbits
 4261              		.align	1
 4262              		.weak	HAL_PWREx_USBVM_Rising_Callback
 4263              		.syntax unified
 4264              		.thumb
 4265              		.thumb_func
 4267              	HAL_PWREx_USBVM_Rising_Callback:
 4268              	.LFB896:
1641:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1642:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1643:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  PWR USBVM interrupt Rising callback.
1644:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1645:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1646:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** __weak void HAL_PWREx_USBVM_Rising_Callback(void)
1647:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 4269              		.loc 1 1647 1
 4270              		.cfi_startproc
 4271              		@ args = 0, pretend = 0, frame = 0
 4272              		@ frame_needed = 1, uses_anonymous_args = 0
 4273              		@ link register save eliminated.
 4274 0000 80B4     		push	{r7}
 4275              		.cfi_def_cfa_offset 4
 4276              		.cfi_offset 7, -4
 4277 0002 00AF     		add	r7, sp, #0
 4278              		.cfi_def_cfa_register 7
1648:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified; when the callback is needed,
1649:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****             HAL_PWREx_USBVM_Rising_Callback() API can be implemented in the user file
1650:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    */
1651:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 4279              		.loc 1 1651 1
 4280 0004 00BF     		nop
 4281 0006 BD46     		mov	sp, r7
 4282              		.cfi_def_cfa_register 13
 4283              		@ sp needed
 4284 0008 5DF8047B 		ldr	r7, [sp], #4
 4285              		.cfi_restore 7
 4286              		.cfi_def_cfa_offset 0
 4287 000c 7047     		bx	lr
ARM GAS  /tmp/ccsGrD0t.s 			page 111


 4288              		.cfi_endproc
 4289              	.LFE896:
 4291              		.section	.text.HAL_PWREx_USBVM_Falling_Callback,"ax",%progbits
 4292              		.align	1
 4293              		.weak	HAL_PWREx_USBVM_Falling_Callback
 4294              		.syntax unified
 4295              		.thumb
 4296              		.thumb_func
 4298              	HAL_PWREx_USBVM_Falling_Callback:
 4299              	.LFB897:
1652:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1653:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1654:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  PWR USBVM interrupt Falling callback.
1655:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1656:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1657:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** __weak void HAL_PWREx_USBVM_Falling_Callback(void)
1658:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 4300              		.loc 1 1658 1
 4301              		.cfi_startproc
 4302              		@ args = 0, pretend = 0, frame = 0
 4303              		@ frame_needed = 1, uses_anonymous_args = 0
 4304              		@ link register save eliminated.
 4305 0000 80B4     		push	{r7}
 4306              		.cfi_def_cfa_offset 4
 4307              		.cfi_offset 7, -4
 4308 0002 00AF     		add	r7, sp, #0
 4309              		.cfi_def_cfa_register 7
1659:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified; when the callback is needed,
1660:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****             HAL_PWREx_USBVM_Falling_Callback() API can be implemented in the user file
1661:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    */
1662:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 4310              		.loc 1 1662 1
 4311 0004 00BF     		nop
 4312 0006 BD46     		mov	sp, r7
 4313              		.cfi_def_cfa_register 13
 4314              		@ sp needed
 4315 0008 5DF8047B 		ldr	r7, [sp], #4
 4316              		.cfi_restore 7
 4317              		.cfi_def_cfa_offset 0
 4318 000c 7047     		bx	lr
 4319              		.cfi_endproc
 4320              	.LFE897:
 4322              		.section	.text.HAL_PWREx_IO2VM_Rising_Callback,"ax",%progbits
 4323              		.align	1
 4324              		.weak	HAL_PWREx_IO2VM_Rising_Callback
 4325              		.syntax unified
 4326              		.thumb
 4327              		.thumb_func
 4329              	HAL_PWREx_IO2VM_Rising_Callback:
 4330              	.LFB898:
1663:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1664:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1665:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  PWR IO2VM interrupt Rising callback.
1666:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1667:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1668:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** __weak void HAL_PWREx_IO2VM_Rising_Callback(void)
1669:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
ARM GAS  /tmp/ccsGrD0t.s 			page 112


 4331              		.loc 1 1669 1
 4332              		.cfi_startproc
 4333              		@ args = 0, pretend = 0, frame = 0
 4334              		@ frame_needed = 1, uses_anonymous_args = 0
 4335              		@ link register save eliminated.
 4336 0000 80B4     		push	{r7}
 4337              		.cfi_def_cfa_offset 4
 4338              		.cfi_offset 7, -4
 4339 0002 00AF     		add	r7, sp, #0
 4340              		.cfi_def_cfa_register 7
1670:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified; when the callback is needed,
1671:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****             HAL_PWREx_IO2VM_Rising_Callback() API can be implemented in the user file
1672:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    */
1673:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 4341              		.loc 1 1673 1
 4342 0004 00BF     		nop
 4343 0006 BD46     		mov	sp, r7
 4344              		.cfi_def_cfa_register 13
 4345              		@ sp needed
 4346 0008 5DF8047B 		ldr	r7, [sp], #4
 4347              		.cfi_restore 7
 4348              		.cfi_def_cfa_offset 0
 4349 000c 7047     		bx	lr
 4350              		.cfi_endproc
 4351              	.LFE898:
 4353              		.section	.text.HAL_PWREx_IO2VM_Falling_Callback,"ax",%progbits
 4354              		.align	1
 4355              		.weak	HAL_PWREx_IO2VM_Falling_Callback
 4356              		.syntax unified
 4357              		.thumb
 4358              		.thumb_func
 4360              	HAL_PWREx_IO2VM_Falling_Callback:
 4361              	.LFB899:
1674:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1675:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1676:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  PWR IO2VM interrupt Falling callback.
1677:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1678:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1679:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** __weak void HAL_PWREx_IO2VM_Falling_Callback(void)
1680:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 4362              		.loc 1 1680 1
 4363              		.cfi_startproc
 4364              		@ args = 0, pretend = 0, frame = 0
 4365              		@ frame_needed = 1, uses_anonymous_args = 0
 4366              		@ link register save eliminated.
 4367 0000 80B4     		push	{r7}
 4368              		.cfi_def_cfa_offset 4
 4369              		.cfi_offset 7, -4
 4370 0002 00AF     		add	r7, sp, #0
 4371              		.cfi_def_cfa_register 7
1681:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified; when the callback is needed,
1682:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****             HAL_PWREx_IO2VM_Falling_Callback() API can be implemented in the user file
1683:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    */
1684:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 4372              		.loc 1 1684 1
 4373 0004 00BF     		nop
 4374 0006 BD46     		mov	sp, r7
ARM GAS  /tmp/ccsGrD0t.s 			page 113


 4375              		.cfi_def_cfa_register 13
 4376              		@ sp needed
 4377 0008 5DF8047B 		ldr	r7, [sp], #4
 4378              		.cfi_restore 7
 4379              		.cfi_def_cfa_offset 0
 4380 000c 7047     		bx	lr
 4381              		.cfi_endproc
 4382              	.LFE899:
 4384              		.section	.text.HAL_PWREx_IO3VM_Rising_Callback,"ax",%progbits
 4385              		.align	1
 4386              		.weak	HAL_PWREx_IO3VM_Rising_Callback
 4387              		.syntax unified
 4388              		.thumb
 4389              		.thumb_func
 4391              	HAL_PWREx_IO3VM_Rising_Callback:
 4392              	.LFB900:
1685:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1686:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1687:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  PWR IO3VM interrupt Rising callback.
1688:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1689:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1690:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** __weak void HAL_PWREx_IO3VM_Rising_Callback(void)
1691:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 4393              		.loc 1 1691 1
 4394              		.cfi_startproc
 4395              		@ args = 0, pretend = 0, frame = 0
 4396              		@ frame_needed = 1, uses_anonymous_args = 0
 4397              		@ link register save eliminated.
 4398 0000 80B4     		push	{r7}
 4399              		.cfi_def_cfa_offset 4
 4400              		.cfi_offset 7, -4
 4401 0002 00AF     		add	r7, sp, #0
 4402              		.cfi_def_cfa_register 7
1692:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified; when the callback is needed,
1693:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****             HAL_PWREx_IO3VM_Rising_Callback() API can be implemented in the user file
1694:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    */
1695:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 4403              		.loc 1 1695 1
 4404 0004 00BF     		nop
 4405 0006 BD46     		mov	sp, r7
 4406              		.cfi_def_cfa_register 13
 4407              		@ sp needed
 4408 0008 5DF8047B 		ldr	r7, [sp], #4
 4409              		.cfi_restore 7
 4410              		.cfi_def_cfa_offset 0
 4411 000c 7047     		bx	lr
 4412              		.cfi_endproc
 4413              	.LFE900:
 4415              		.section	.text.HAL_PWREx_IO3VM_Falling_Callback,"ax",%progbits
 4416              		.align	1
 4417              		.weak	HAL_PWREx_IO3VM_Falling_Callback
 4418              		.syntax unified
 4419              		.thumb
 4420              		.thumb_func
 4422              	HAL_PWREx_IO3VM_Falling_Callback:
 4423              	.LFB901:
1696:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/ccsGrD0t.s 			page 114


1697:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1698:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  PWR IO3VM interrupt Falling callback.
1699:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1700:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1701:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** __weak void HAL_PWREx_IO3VM_Falling_Callback(void)
1702:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 4424              		.loc 1 1702 1
 4425              		.cfi_startproc
 4426              		@ args = 0, pretend = 0, frame = 0
 4427              		@ frame_needed = 1, uses_anonymous_args = 0
 4428              		@ link register save eliminated.
 4429 0000 80B4     		push	{r7}
 4430              		.cfi_def_cfa_offset 4
 4431              		.cfi_offset 7, -4
 4432 0002 00AF     		add	r7, sp, #0
 4433              		.cfi_def_cfa_register 7
1703:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified; when the callback is needed,
1704:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****             HAL_PWREx_IO3VM_Falling_Callback() API can be implemented in the user file
1705:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    */
1706:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 4434              		.loc 1 1706 1
 4435 0004 00BF     		nop
 4436 0006 BD46     		mov	sp, r7
 4437              		.cfi_def_cfa_register 13
 4438              		@ sp needed
 4439 0008 5DF8047B 		ldr	r7, [sp], #4
 4440              		.cfi_restore 7
 4441              		.cfi_def_cfa_offset 0
 4442 000c 7047     		bx	lr
 4443              		.cfi_endproc
 4444              	.LFE901:
 4446              		.section	.text.HAL_PWREx_IO4VM_Rising_Callback,"ax",%progbits
 4447              		.align	1
 4448              		.weak	HAL_PWREx_IO4VM_Rising_Callback
 4449              		.syntax unified
 4450              		.thumb
 4451              		.thumb_func
 4453              	HAL_PWREx_IO4VM_Rising_Callback:
 4454              	.LFB902:
1707:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1708:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1709:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  PWR IO4VM interrupt Rising callback.
1710:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1711:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1712:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** __weak void HAL_PWREx_IO4VM_Rising_Callback(void)
1713:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 4455              		.loc 1 1713 1
 4456              		.cfi_startproc
 4457              		@ args = 0, pretend = 0, frame = 0
 4458              		@ frame_needed = 1, uses_anonymous_args = 0
 4459              		@ link register save eliminated.
 4460 0000 80B4     		push	{r7}
 4461              		.cfi_def_cfa_offset 4
 4462              		.cfi_offset 7, -4
 4463 0002 00AF     		add	r7, sp, #0
 4464              		.cfi_def_cfa_register 7
1714:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified; when the callback is needed,
ARM GAS  /tmp/ccsGrD0t.s 			page 115


1715:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****             HAL_PWREx_IO4VM_Rising_Callback() API can be implemented in the user file
1716:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    */
1717:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 4465              		.loc 1 1717 1
 4466 0004 00BF     		nop
 4467 0006 BD46     		mov	sp, r7
 4468              		.cfi_def_cfa_register 13
 4469              		@ sp needed
 4470 0008 5DF8047B 		ldr	r7, [sp], #4
 4471              		.cfi_restore 7
 4472              		.cfi_def_cfa_offset 0
 4473 000c 7047     		bx	lr
 4474              		.cfi_endproc
 4475              	.LFE902:
 4477              		.section	.text.HAL_PWREx_IO4VM_Falling_Callback,"ax",%progbits
 4478              		.align	1
 4479              		.weak	HAL_PWREx_IO4VM_Falling_Callback
 4480              		.syntax unified
 4481              		.thumb
 4482              		.thumb_func
 4484              	HAL_PWREx_IO4VM_Falling_Callback:
 4485              	.LFB903:
1718:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1719:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1720:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  PWR IO4VM interrupt Falling callback.
1721:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1722:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1723:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** __weak void HAL_PWREx_IO4VM_Falling_Callback(void)
1724:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 4486              		.loc 1 1724 1
 4487              		.cfi_startproc
 4488              		@ args = 0, pretend = 0, frame = 0
 4489              		@ frame_needed = 1, uses_anonymous_args = 0
 4490              		@ link register save eliminated.
 4491 0000 80B4     		push	{r7}
 4492              		.cfi_def_cfa_offset 4
 4493              		.cfi_offset 7, -4
 4494 0002 00AF     		add	r7, sp, #0
 4495              		.cfi_def_cfa_register 7
1725:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified; when the callback is needed,
1726:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****             HAL_PWREx_IO4VM_Falling_Callback() API can be implemented in the user file
1727:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    */
1728:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 4496              		.loc 1 1728 1
 4497 0004 00BF     		nop
 4498 0006 BD46     		mov	sp, r7
 4499              		.cfi_def_cfa_register 13
 4500              		@ sp needed
 4501 0008 5DF8047B 		ldr	r7, [sp], #4
 4502              		.cfi_restore 7
 4503              		.cfi_def_cfa_offset 0
 4504 000c 7047     		bx	lr
 4505              		.cfi_endproc
 4506              	.LFE903:
 4508              		.section	.text.HAL_PWREx_IO5VM_Rising_Callback,"ax",%progbits
 4509              		.align	1
 4510              		.weak	HAL_PWREx_IO5VM_Rising_Callback
ARM GAS  /tmp/ccsGrD0t.s 			page 116


 4511              		.syntax unified
 4512              		.thumb
 4513              		.thumb_func
 4515              	HAL_PWREx_IO5VM_Rising_Callback:
 4516              	.LFB904:
1729:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1730:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1731:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  PWR IO5VM interrupt Rising callback.
1732:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1733:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1734:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** __weak void HAL_PWREx_IO5VM_Rising_Callback(void)
1735:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 4517              		.loc 1 1735 1
 4518              		.cfi_startproc
 4519              		@ args = 0, pretend = 0, frame = 0
 4520              		@ frame_needed = 1, uses_anonymous_args = 0
 4521              		@ link register save eliminated.
 4522 0000 80B4     		push	{r7}
 4523              		.cfi_def_cfa_offset 4
 4524              		.cfi_offset 7, -4
 4525 0002 00AF     		add	r7, sp, #0
 4526              		.cfi_def_cfa_register 7
1736:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified; when the callback is needed,
1737:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****             HAL_PWREx_IO5VM_Rising_Callback() API can be implemented in the user file
1738:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    */
1739:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 4527              		.loc 1 1739 1
 4528 0004 00BF     		nop
 4529 0006 BD46     		mov	sp, r7
 4530              		.cfi_def_cfa_register 13
 4531              		@ sp needed
 4532 0008 5DF8047B 		ldr	r7, [sp], #4
 4533              		.cfi_restore 7
 4534              		.cfi_def_cfa_offset 0
 4535 000c 7047     		bx	lr
 4536              		.cfi_endproc
 4537              	.LFE904:
 4539              		.section	.text.HAL_PWREx_IO5VM_Falling_Callback,"ax",%progbits
 4540              		.align	1
 4541              		.weak	HAL_PWREx_IO5VM_Falling_Callback
 4542              		.syntax unified
 4543              		.thumb
 4544              		.thumb_func
 4546              	HAL_PWREx_IO5VM_Falling_Callback:
 4547              	.LFB905:
1740:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1741:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1742:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  PWR IO5VM interrupt Falling callback.
1743:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1744:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1745:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** __weak void HAL_PWREx_IO5VM_Falling_Callback(void)
1746:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 4548              		.loc 1 1746 1
 4549              		.cfi_startproc
 4550              		@ args = 0, pretend = 0, frame = 0
 4551              		@ frame_needed = 1, uses_anonymous_args = 0
 4552              		@ link register save eliminated.
ARM GAS  /tmp/ccsGrD0t.s 			page 117


 4553 0000 80B4     		push	{r7}
 4554              		.cfi_def_cfa_offset 4
 4555              		.cfi_offset 7, -4
 4556 0002 00AF     		add	r7, sp, #0
 4557              		.cfi_def_cfa_register 7
1747:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified; when the callback is needed,
1748:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****             HAL_PWREx_IO5VM_Falling_Callback() API can be implemented in the user file
1749:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    */
1750:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 4558              		.loc 1 1750 1
 4559 0004 00BF     		nop
 4560 0006 BD46     		mov	sp, r7
 4561              		.cfi_def_cfa_register 13
 4562              		@ sp needed
 4563 0008 5DF8047B 		ldr	r7, [sp], #4
 4564              		.cfi_restore 7
 4565              		.cfi_def_cfa_offset 0
 4566 000c 7047     		bx	lr
 4567              		.cfi_endproc
 4568              	.LFE905:
 4570              		.section	.text.HAL_PWREx_ADCVM_Rising_Callback,"ax",%progbits
 4571              		.align	1
 4572              		.weak	HAL_PWREx_ADCVM_Rising_Callback
 4573              		.syntax unified
 4574              		.thumb
 4575              		.thumb_func
 4577              	HAL_PWREx_ADCVM_Rising_Callback:
 4578              	.LFB906:
1751:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1752:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1753:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  PWR ADCVM interrupt Rising callback.
1754:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1755:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1756:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** __weak void HAL_PWREx_ADCVM_Rising_Callback(void)
1757:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 4579              		.loc 1 1757 1
 4580              		.cfi_startproc
 4581              		@ args = 0, pretend = 0, frame = 0
 4582              		@ frame_needed = 1, uses_anonymous_args = 0
 4583              		@ link register save eliminated.
 4584 0000 80B4     		push	{r7}
 4585              		.cfi_def_cfa_offset 4
 4586              		.cfi_offset 7, -4
 4587 0002 00AF     		add	r7, sp, #0
 4588              		.cfi_def_cfa_register 7
1758:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified; when the callback is needed,
1759:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****             HAL_PWREx_ADCVM_Rising_Callback() API can be implemented in the user file
1760:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    */
1761:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 4589              		.loc 1 1761 1
 4590 0004 00BF     		nop
 4591 0006 BD46     		mov	sp, r7
 4592              		.cfi_def_cfa_register 13
 4593              		@ sp needed
 4594 0008 5DF8047B 		ldr	r7, [sp], #4
 4595              		.cfi_restore 7
 4596              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccsGrD0t.s 			page 118


 4597 000c 7047     		bx	lr
 4598              		.cfi_endproc
 4599              	.LFE906:
 4601              		.section	.text.HAL_PWREx_ADCVM_Falling_Callback,"ax",%progbits
 4602              		.align	1
 4603              		.weak	HAL_PWREx_ADCVM_Falling_Callback
 4604              		.syntax unified
 4605              		.thumb
 4606              		.thumb_func
 4608              	HAL_PWREx_ADCVM_Falling_Callback:
 4609              	.LFB907:
1762:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** 
1763:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** /**
1764:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @brief  PWR ADCVM interrupt Falling callback.
1765:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   * @retval None.
1766:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   */
1767:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** __weak void HAL_PWREx_ADCVM_Falling_Callback(void)
1768:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** {
 4610              		.loc 1 1768 1
 4611              		.cfi_startproc
 4612              		@ args = 0, pretend = 0, frame = 0
 4613              		@ frame_needed = 1, uses_anonymous_args = 0
 4614              		@ link register save eliminated.
 4615 0000 80B4     		push	{r7}
 4616              		.cfi_def_cfa_offset 4
 4617              		.cfi_offset 7, -4
 4618 0002 00AF     		add	r7, sp, #0
 4619              		.cfi_def_cfa_register 7
1769:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified; when the callback is needed,
1770:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****             HAL_PWREx_ADCVM_Falling_Callback() API can be implemented in the user file
1771:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c ****    */
1772:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr_ex.c **** }
 4620              		.loc 1 1772 1
 4621 0004 00BF     		nop
 4622 0006 BD46     		mov	sp, r7
 4623              		.cfi_def_cfa_register 13
 4624              		@ sp needed
 4625 0008 5DF8047B 		ldr	r7, [sp], #4
 4626              		.cfi_restore 7
 4627              		.cfi_def_cfa_offset 0
 4628 000c 7047     		bx	lr
 4629              		.cfi_endproc
 4630              	.LFE907:
 4632              		.text
 4633              	.Letext0:
 4634              		.file 3 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 4635              		.file 4 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 4636              		.file 5 "STM32Cube_FW_N6/Drivers/CMSIS/Device/ST/STM32N6xx/Include/stm32n657xx.h"
 4637              		.file 6 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_def.h"
 4638              		.file 7 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_pwr_ex.h"
 4639              		.file 8 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_pwr.h"
 4640              		.file 9 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal.h"
 4641              		.file 10 "Inc/stm32n6xx_hal_conf.h"
ARM GAS  /tmp/ccsGrD0t.s 			page 119


DEFINED SYMBOLS
                            *ABS*:00000000 stm32n6xx_hal_pwr_ex.c
     /tmp/ccsGrD0t.s:26     .rodata:00000000 $d
     /tmp/ccsGrD0t.s:31     .text.HAL_PWREx_ConfigSupply:00000000 $t
     /tmp/ccsGrD0t.s:37     .text.HAL_PWREx_ConfigSupply:00000000 HAL_PWREx_ConfigSupply
     /tmp/ccsGrD0t.s:114    .text.HAL_PWREx_ConfigSupply:00000060 $d
     /tmp/ccsGrD0t.s:120    .text.HAL_PWREx_GetSupplyConfig:00000000 $t
     /tmp/ccsGrD0t.s:126    .text.HAL_PWREx_GetSupplyConfig:00000000 HAL_PWREx_GetSupplyConfig
     /tmp/ccsGrD0t.s:155    .text.HAL_PWREx_GetSupplyConfig:00000018 $d
     /tmp/ccsGrD0t.s:160    .text.HAL_PWREx_ControlVoltageScaling:00000000 $t
     /tmp/ccsGrD0t.s:166    .text.HAL_PWREx_ControlVoltageScaling:00000000 HAL_PWREx_ControlVoltageScaling
     /tmp/ccsGrD0t.s:243    .text.HAL_PWREx_ControlVoltageScaling:00000060 $d
     /tmp/ccsGrD0t.s:249    .text.HAL_PWREx_GetVoltageRange:00000000 $t
     /tmp/ccsGrD0t.s:255    .text.HAL_PWREx_GetVoltageRange:00000000 HAL_PWREx_GetVoltageRange
     /tmp/ccsGrD0t.s:285    .text.HAL_PWREx_GetVoltageRange:00000018 $d
     /tmp/ccsGrD0t.s:290    .text.HAL_PWREx_ControlStopModeVoltageScaling:00000000 $t
     /tmp/ccsGrD0t.s:296    .text.HAL_PWREx_ControlStopModeVoltageScaling:00000000 HAL_PWREx_ControlStopModeVoltageScaling
     /tmp/ccsGrD0t.s:343    .text.HAL_PWREx_ControlStopModeVoltageScaling:00000038 $d
     /tmp/ccsGrD0t.s:349    .text.HAL_PWREx_GetStopModeVoltageRange:00000000 $t
     /tmp/ccsGrD0t.s:355    .text.HAL_PWREx_GetStopModeVoltageRange:00000000 HAL_PWREx_GetStopModeVoltageRange
     /tmp/ccsGrD0t.s:384    .text.HAL_PWREx_GetStopModeVoltageRange:00000018 $d
     /tmp/ccsGrD0t.s:389    .text.HAL_PWREx_EnableWakeUpPin:00000000 $t
     /tmp/ccsGrD0t.s:395    .text.HAL_PWREx_EnableWakeUpPin:00000000 HAL_PWREx_EnableWakeUpPin
     /tmp/ccsGrD0t.s:748    .text.HAL_PWREx_EnableWakeUpPin:000001d0 $d
     /tmp/ccsGrD0t.s:755    .text.HAL_PWREx_EnableBkupRAMRetention:00000000 $t
     /tmp/ccsGrD0t.s:761    .text.HAL_PWREx_EnableBkupRAMRetention:00000000 HAL_PWREx_EnableBkupRAMRetention
     /tmp/ccsGrD0t.s:791    .text.HAL_PWREx_EnableBkupRAMRetention:0000001c $d
     /tmp/ccsGrD0t.s:796    .text.HAL_PWREx_DisableBkupRAMRetention:00000000 $t
     /tmp/ccsGrD0t.s:802    .text.HAL_PWREx_DisableBkupRAMRetention:00000000 HAL_PWREx_DisableBkupRAMRetention
     /tmp/ccsGrD0t.s:832    .text.HAL_PWREx_DisableBkupRAMRetention:0000001c $d
     /tmp/ccsGrD0t.s:837    .text.HAL_PWREx_EnableTCMRetention:00000000 $t
     /tmp/ccsGrD0t.s:843    .text.HAL_PWREx_EnableTCMRetention:00000000 HAL_PWREx_EnableTCMRetention
     /tmp/ccsGrD0t.s:873    .text.HAL_PWREx_EnableTCMRetention:0000001c $d
     /tmp/ccsGrD0t.s:878    .text.HAL_PWREx_DisableTCMRetention:00000000 $t
     /tmp/ccsGrD0t.s:884    .text.HAL_PWREx_DisableTCMRetention:00000000 HAL_PWREx_DisableTCMRetention
     /tmp/ccsGrD0t.s:914    .text.HAL_PWREx_DisableTCMRetention:0000001c $d
     /tmp/ccsGrD0t.s:919    .text.HAL_PWREx_EnableTCMFLXRetention:00000000 $t
     /tmp/ccsGrD0t.s:925    .text.HAL_PWREx_EnableTCMFLXRetention:00000000 HAL_PWREx_EnableTCMFLXRetention
     /tmp/ccsGrD0t.s:955    .text.HAL_PWREx_EnableTCMFLXRetention:0000001c $d
     /tmp/ccsGrD0t.s:960    .text.HAL_PWREx_DisableTCMFLXRetention:00000000 $t
     /tmp/ccsGrD0t.s:966    .text.HAL_PWREx_DisableTCMFLXRetention:00000000 HAL_PWREx_DisableTCMFLXRetention
     /tmp/ccsGrD0t.s:996    .text.HAL_PWREx_DisableTCMFLXRetention:0000001c $d
     /tmp/ccsGrD0t.s:1001   .text.HAL_PWREx_SetPulseLow:00000000 $t
     /tmp/ccsGrD0t.s:1007   .text.HAL_PWREx_SetPulseLow:00000000 HAL_PWREx_SetPulseLow
     /tmp/ccsGrD0t.s:1051   .text.HAL_PWREx_SetPulseLow:00000034 $d
     /tmp/ccsGrD0t.s:1057   .text.HAL_PWREx_GetPulseLow:00000000 $t
     /tmp/ccsGrD0t.s:1063   .text.HAL_PWREx_GetPulseLow:00000000 HAL_PWREx_GetPulseLow
     /tmp/ccsGrD0t.s:1093   .text.HAL_PWREx_GetPulseLow:00000018 $d
     /tmp/ccsGrD0t.s:1098   .text.HAL_PWREx_EnableSMPSPWM:00000000 $t
     /tmp/ccsGrD0t.s:1104   .text.HAL_PWREx_EnableSMPSPWM:00000000 HAL_PWREx_EnableSMPSPWM
     /tmp/ccsGrD0t.s:1134   .text.HAL_PWREx_EnableSMPSPWM:0000001c $d
     /tmp/ccsGrD0t.s:1139   .text.HAL_PWREx_DisableSMPSPWM:00000000 $t
     /tmp/ccsGrD0t.s:1145   .text.HAL_PWREx_DisableSMPSPWM:00000000 HAL_PWREx_DisableSMPSPWM
     /tmp/ccsGrD0t.s:1175   .text.HAL_PWREx_DisableSMPSPWM:0000001c $d
     /tmp/ccsGrD0t.s:1180   .text.HAL_PWREx_EnablePullDownOutput:00000000 $t
     /tmp/ccsGrD0t.s:1186   .text.HAL_PWREx_EnablePullDownOutput:00000000 HAL_PWREx_EnablePullDownOutput
     /tmp/ccsGrD0t.s:1216   .text.HAL_PWREx_EnablePullDownOutput:0000001c $d
ARM GAS  /tmp/ccsGrD0t.s 			page 120


     /tmp/ccsGrD0t.s:1221   .text.HAL_PWREx_DisablePullDownOutput:00000000 $t
     /tmp/ccsGrD0t.s:1227   .text.HAL_PWREx_DisablePullDownOutput:00000000 HAL_PWREx_DisablePullDownOutput
     /tmp/ccsGrD0t.s:1257   .text.HAL_PWREx_DisablePullDownOutput:0000001c $d
     /tmp/ccsGrD0t.s:1262   .text.HAL_PWREx_EnableMonitoring:00000000 $t
     /tmp/ccsGrD0t.s:1268   .text.HAL_PWREx_EnableMonitoring:00000000 HAL_PWREx_EnableMonitoring
     /tmp/ccsGrD0t.s:1298   .text.HAL_PWREx_EnableMonitoring:0000001c $d
     /tmp/ccsGrD0t.s:1303   .text.HAL_PWREx_DisableMonitoring:00000000 $t
     /tmp/ccsGrD0t.s:1309   .text.HAL_PWREx_DisableMonitoring:00000000 HAL_PWREx_DisableMonitoring
     /tmp/ccsGrD0t.s:1339   .text.HAL_PWREx_DisableMonitoring:0000001c $d
     /tmp/ccsGrD0t.s:1344   .text.HAL_PWREx_GetTemperatureLevel:00000000 $t
     /tmp/ccsGrD0t.s:1350   .text.HAL_PWREx_GetTemperatureLevel:00000000 HAL_PWREx_GetTemperatureLevel
     /tmp/ccsGrD0t.s:1408   .text.HAL_PWREx_GetTemperatureLevel:00000044 $d
     /tmp/ccsGrD0t.s:1413   .text.HAL_PWREx_GetVBATLevel:00000000 $t
     /tmp/ccsGrD0t.s:1419   .text.HAL_PWREx_GetVBATLevel:00000000 HAL_PWREx_GetVBATLevel
     /tmp/ccsGrD0t.s:1477   .text.HAL_PWREx_GetVBATLevel:00000044 $d
     /tmp/ccsGrD0t.s:1482   .text.HAL_PWREx_EnableVDDCOREMonitoring:00000000 $t
     /tmp/ccsGrD0t.s:1488   .text.HAL_PWREx_EnableVDDCOREMonitoring:00000000 HAL_PWREx_EnableVDDCOREMonitoring
     /tmp/ccsGrD0t.s:1518   .text.HAL_PWREx_EnableVDDCOREMonitoring:0000001c $d
     /tmp/ccsGrD0t.s:1523   .text.HAL_PWREx_DisableVDDCOREMonitoring:00000000 $t
     /tmp/ccsGrD0t.s:1529   .text.HAL_PWREx_DisableVDDCOREMonitoring:00000000 HAL_PWREx_DisableVDDCOREMonitoring
     /tmp/ccsGrD0t.s:1559   .text.HAL_PWREx_DisableVDDCOREMonitoring:0000001c $d
     /tmp/ccsGrD0t.s:1564   .text.HAL_PWREx_ConfigVDDCOREVM:00000000 $t
     /tmp/ccsGrD0t.s:1570   .text.HAL_PWREx_ConfigVDDCOREVM:00000000 HAL_PWREx_ConfigVDDCOREVM
     /tmp/ccsGrD0t.s:1744   .text.HAL_PWREx_ConfigVDDCOREVM:00000120 $d
     /tmp/ccsGrD0t.s:1751   .text.HAL_PWREx_GetVDDCORELevel:00000000 $t
     /tmp/ccsGrD0t.s:1757   .text.HAL_PWREx_GetVDDCORELevel:00000000 HAL_PWREx_GetVDDCORELevel
     /tmp/ccsGrD0t.s:1815   .text.HAL_PWREx_GetVDDCORELevel:00000044 $d
     /tmp/ccsGrD0t.s:1820   .text.HAL_PWREx_ConfigVddIORange:00000000 $t
     /tmp/ccsGrD0t.s:1826   .text.HAL_PWREx_ConfigVddIORange:00000000 HAL_PWREx_ConfigVddIORange
     /tmp/ccsGrD0t.s:1888   .text.HAL_PWREx_ConfigVddIORange:00000054 $d
     /tmp/ccsGrD0t.s:1893   .text.HAL_PWREx_ConfigVddIORange:00000068 $t
     /tmp/ccsGrD0t.s:1969   .text.HAL_PWREx_ConfigVddIORange:000000d8 $d
     /tmp/ccsGrD0t.s:1975   .text.HAL_PWREx_GetVddIORange:00000000 $t
     /tmp/ccsGrD0t.s:1981   .text.HAL_PWREx_GetVddIORange:00000000 HAL_PWREx_GetVddIORange
     /tmp/ccsGrD0t.s:2032   .text.HAL_PWREx_GetVddIORange:00000040 $d
     /tmp/ccsGrD0t.s:2037   .text.HAL_PWREx_GetVddIORange:00000054 $t
     /tmp/ccsGrD0t.s:2110   .text.HAL_PWREx_GetVddIORange:000000a8 $d
     /tmp/ccsGrD0t.s:2116   .text.HAL_PWREx_EnableVddIO4RangeSTBY:00000000 $t
     /tmp/ccsGrD0t.s:2122   .text.HAL_PWREx_EnableVddIO4RangeSTBY:00000000 HAL_PWREx_EnableVddIO4RangeSTBY
     /tmp/ccsGrD0t.s:2152   .text.HAL_PWREx_EnableVddIO4RangeSTBY:0000001c $d
     /tmp/ccsGrD0t.s:2157   .text.HAL_PWREx_DisableVddIO4RangeSTBY:00000000 $t
     /tmp/ccsGrD0t.s:2163   .text.HAL_PWREx_DisableVddIO4RangeSTBY:00000000 HAL_PWREx_DisableVddIO4RangeSTBY
     /tmp/ccsGrD0t.s:2193   .text.HAL_PWREx_DisableVddIO4RangeSTBY:0000001c $d
     /tmp/ccsGrD0t.s:2198   .text.HAL_PWREx_EnableVddIO5RangeSTBY:00000000 $t
     /tmp/ccsGrD0t.s:2204   .text.HAL_PWREx_EnableVddIO5RangeSTBY:00000000 HAL_PWREx_EnableVddIO5RangeSTBY
     /tmp/ccsGrD0t.s:2234   .text.HAL_PWREx_EnableVddIO5RangeSTBY:0000001c $d
     /tmp/ccsGrD0t.s:2239   .text.HAL_PWREx_DisableVddIO5RangeSTBY:00000000 $t
     /tmp/ccsGrD0t.s:2245   .text.HAL_PWREx_DisableVddIO5RangeSTBY:00000000 HAL_PWREx_DisableVddIO5RangeSTBY
     /tmp/ccsGrD0t.s:2275   .text.HAL_PWREx_DisableVddIO5RangeSTBY:0000001c $d
     /tmp/ccsGrD0t.s:2280   .text.HAL_PWREx_EnableVddUSB:00000000 $t
     /tmp/ccsGrD0t.s:2286   .text.HAL_PWREx_EnableVddUSB:00000000 HAL_PWREx_EnableVddUSB
     /tmp/ccsGrD0t.s:2316   .text.HAL_PWREx_EnableVddUSB:0000001c $d
     /tmp/ccsGrD0t.s:2321   .text.HAL_PWREx_DisableVddUSB:00000000 $t
     /tmp/ccsGrD0t.s:2327   .text.HAL_PWREx_DisableVddUSB:00000000 HAL_PWREx_DisableVddUSB
     /tmp/ccsGrD0t.s:2357   .text.HAL_PWREx_DisableVddUSB:0000001c $d
     /tmp/ccsGrD0t.s:2362   .text.HAL_PWREx_EnableVddIO2:00000000 $t
     /tmp/ccsGrD0t.s:2368   .text.HAL_PWREx_EnableVddIO2:00000000 HAL_PWREx_EnableVddIO2
ARM GAS  /tmp/ccsGrD0t.s 			page 121


     /tmp/ccsGrD0t.s:2398   .text.HAL_PWREx_EnableVddIO2:0000001c $d
     /tmp/ccsGrD0t.s:2403   .text.HAL_PWREx_DisableVddIO2:00000000 $t
     /tmp/ccsGrD0t.s:2409   .text.HAL_PWREx_DisableVddIO2:00000000 HAL_PWREx_DisableVddIO2
     /tmp/ccsGrD0t.s:2439   .text.HAL_PWREx_DisableVddIO2:0000001c $d
     /tmp/ccsGrD0t.s:2444   .text.HAL_PWREx_EnableVddIO3:00000000 $t
     /tmp/ccsGrD0t.s:2450   .text.HAL_PWREx_EnableVddIO3:00000000 HAL_PWREx_EnableVddIO3
     /tmp/ccsGrD0t.s:2480   .text.HAL_PWREx_EnableVddIO3:0000001c $d
     /tmp/ccsGrD0t.s:2485   .text.HAL_PWREx_DisableVddIO3:00000000 $t
     /tmp/ccsGrD0t.s:2491   .text.HAL_PWREx_DisableVddIO3:00000000 HAL_PWREx_DisableVddIO3
     /tmp/ccsGrD0t.s:2521   .text.HAL_PWREx_DisableVddIO3:0000001c $d
     /tmp/ccsGrD0t.s:2526   .text.HAL_PWREx_EnableVddIO4:00000000 $t
     /tmp/ccsGrD0t.s:2532   .text.HAL_PWREx_EnableVddIO4:00000000 HAL_PWREx_EnableVddIO4
     /tmp/ccsGrD0t.s:2562   .text.HAL_PWREx_EnableVddIO4:0000001c $d
     /tmp/ccsGrD0t.s:2567   .text.HAL_PWREx_DisableVddIO4:00000000 $t
     /tmp/ccsGrD0t.s:2573   .text.HAL_PWREx_DisableVddIO4:00000000 HAL_PWREx_DisableVddIO4
     /tmp/ccsGrD0t.s:2603   .text.HAL_PWREx_DisableVddIO4:0000001c $d
     /tmp/ccsGrD0t.s:2608   .text.HAL_PWREx_EnableVddIO5:00000000 $t
     /tmp/ccsGrD0t.s:2614   .text.HAL_PWREx_EnableVddIO5:00000000 HAL_PWREx_EnableVddIO5
     /tmp/ccsGrD0t.s:2644   .text.HAL_PWREx_EnableVddIO5:0000001c $d
     /tmp/ccsGrD0t.s:2649   .text.HAL_PWREx_DisableVddIO5:00000000 $t
     /tmp/ccsGrD0t.s:2655   .text.HAL_PWREx_DisableVddIO5:00000000 HAL_PWREx_DisableVddIO5
     /tmp/ccsGrD0t.s:2685   .text.HAL_PWREx_DisableVddIO5:0000001c $d
     /tmp/ccsGrD0t.s:2690   .text.HAL_PWREx_EnableVddA:00000000 $t
     /tmp/ccsGrD0t.s:2696   .text.HAL_PWREx_EnableVddA:00000000 HAL_PWREx_EnableVddA
     /tmp/ccsGrD0t.s:2726   .text.HAL_PWREx_EnableVddA:0000001c $d
     /tmp/ccsGrD0t.s:2731   .text.HAL_PWREx_DisableVddA:00000000 $t
     /tmp/ccsGrD0t.s:2737   .text.HAL_PWREx_DisableVddA:00000000 HAL_PWREx_DisableVddA
     /tmp/ccsGrD0t.s:2767   .text.HAL_PWREx_DisableVddA:0000001c $d
     /tmp/ccsGrD0t.s:2772   .text.HAL_PWREx_EnableVddUSBVMEN:00000000 $t
     /tmp/ccsGrD0t.s:2778   .text.HAL_PWREx_EnableVddUSBVMEN:00000000 HAL_PWREx_EnableVddUSBVMEN
     /tmp/ccsGrD0t.s:2808   .text.HAL_PWREx_EnableVddUSBVMEN:0000001c $d
     /tmp/ccsGrD0t.s:2813   .text.HAL_PWREx_DisableVddUSBVMEN:00000000 $t
     /tmp/ccsGrD0t.s:2819   .text.HAL_PWREx_DisableVddUSBVMEN:00000000 HAL_PWREx_DisableVddUSBVMEN
     /tmp/ccsGrD0t.s:2849   .text.HAL_PWREx_DisableVddUSBVMEN:0000001c $d
     /tmp/ccsGrD0t.s:2854   .text.HAL_PWREx_EnableVddIO2VMEN:00000000 $t
     /tmp/ccsGrD0t.s:2860   .text.HAL_PWREx_EnableVddIO2VMEN:00000000 HAL_PWREx_EnableVddIO2VMEN
     /tmp/ccsGrD0t.s:2890   .text.HAL_PWREx_EnableVddIO2VMEN:0000001c $d
     /tmp/ccsGrD0t.s:2895   .text.HAL_PWREx_DisableVddIO2VMEN:00000000 $t
     /tmp/ccsGrD0t.s:2901   .text.HAL_PWREx_DisableVddIO2VMEN:00000000 HAL_PWREx_DisableVddIO2VMEN
     /tmp/ccsGrD0t.s:2931   .text.HAL_PWREx_DisableVddIO2VMEN:0000001c $d
     /tmp/ccsGrD0t.s:2936   .text.HAL_PWREx_EnableVddIO3VMEN:00000000 $t
     /tmp/ccsGrD0t.s:2942   .text.HAL_PWREx_EnableVddIO3VMEN:00000000 HAL_PWREx_EnableVddIO3VMEN
     /tmp/ccsGrD0t.s:2972   .text.HAL_PWREx_EnableVddIO3VMEN:0000001c $d
     /tmp/ccsGrD0t.s:2977   .text.HAL_PWREx_DisableVddIO3VMEN:00000000 $t
     /tmp/ccsGrD0t.s:2983   .text.HAL_PWREx_DisableVddIO3VMEN:00000000 HAL_PWREx_DisableVddIO3VMEN
     /tmp/ccsGrD0t.s:3013   .text.HAL_PWREx_DisableVddIO3VMEN:0000001c $d
     /tmp/ccsGrD0t.s:3018   .text.HAL_PWREx_EnableVddIO4VMEN:00000000 $t
     /tmp/ccsGrD0t.s:3024   .text.HAL_PWREx_EnableVddIO4VMEN:00000000 HAL_PWREx_EnableVddIO4VMEN
     /tmp/ccsGrD0t.s:3054   .text.HAL_PWREx_EnableVddIO4VMEN:0000001c $d
     /tmp/ccsGrD0t.s:3059   .text.HAL_PWREx_DisableVddIO4VMEN:00000000 $t
     /tmp/ccsGrD0t.s:3065   .text.HAL_PWREx_DisableVddIO4VMEN:00000000 HAL_PWREx_DisableVddIO4VMEN
     /tmp/ccsGrD0t.s:3095   .text.HAL_PWREx_DisableVddIO4VMEN:0000001c $d
     /tmp/ccsGrD0t.s:3100   .text.HAL_PWREx_EnableVddIO5VMEN:00000000 $t
     /tmp/ccsGrD0t.s:3106   .text.HAL_PWREx_EnableVddIO5VMEN:00000000 HAL_PWREx_EnableVddIO5VMEN
     /tmp/ccsGrD0t.s:3136   .text.HAL_PWREx_EnableVddIO5VMEN:0000001c $d
     /tmp/ccsGrD0t.s:3141   .text.HAL_PWREx_DisableVddIO5VMEN:00000000 $t
     /tmp/ccsGrD0t.s:3147   .text.HAL_PWREx_DisableVddIO5VMEN:00000000 HAL_PWREx_DisableVddIO5VMEN
ARM GAS  /tmp/ccsGrD0t.s 			page 122


     /tmp/ccsGrD0t.s:3177   .text.HAL_PWREx_DisableVddIO5VMEN:0000001c $d
     /tmp/ccsGrD0t.s:3182   .text.HAL_PWREx_EnableVddAVMEN:00000000 $t
     /tmp/ccsGrD0t.s:3188   .text.HAL_PWREx_EnableVddAVMEN:00000000 HAL_PWREx_EnableVddAVMEN
     /tmp/ccsGrD0t.s:3218   .text.HAL_PWREx_EnableVddAVMEN:0000001c $d
     /tmp/ccsGrD0t.s:3223   .text.HAL_PWREx_DisableVddAVMEN:00000000 $t
     /tmp/ccsGrD0t.s:3229   .text.HAL_PWREx_DisableVddAVMEN:00000000 HAL_PWREx_DisableVddAVMEN
     /tmp/ccsGrD0t.s:3259   .text.HAL_PWREx_DisableVddAVMEN:0000001c $d
     /tmp/ccsGrD0t.s:3264   .text.HAL_PWREx_ConfigPVM:00000000 $t
     /tmp/ccsGrD0t.s:3270   .text.HAL_PWREx_ConfigPVM:00000000 HAL_PWREx_ConfigPVM
     /tmp/ccsGrD0t.s:3370   .text.HAL_PWREx_ConfigPVM:00000094 $d
     /tmp/ccsGrD0t.s:3376   .text.HAL_PWREx_ConfigPVM:000000ac $t
     /tmp/ccsGrD0t.s:3638   .text.HAL_PWREx_ConfigPVM:00000298 $d
     /tmp/ccsGrD0t.s:3642   .text.HAL_PWREx_ConfigPVM:000002a0 $t
     /tmp/ccsGrD0t.s:3940   .text.HAL_PWREx_ConfigPVM:000004ac $d
     /tmp/ccsGrD0t.s:3945   .text.HAL_PWREx_PVD_PVM_IRQHandler:00000000 $t
     /tmp/ccsGrD0t.s:3951   .text.HAL_PWREx_PVD_PVM_IRQHandler:00000000 HAL_PWREx_PVD_PVM_IRQHandler
     /tmp/ccsGrD0t.s:4205   .text.HAL_PWREx_VDDCORE_Rising_Callback:00000000 HAL_PWREx_VDDCORE_Rising_Callback
     /tmp/ccsGrD0t.s:4236   .text.HAL_PWREx_VDDCORE_Falling_Callback:00000000 HAL_PWREx_VDDCORE_Falling_Callback
     /tmp/ccsGrD0t.s:4267   .text.HAL_PWREx_USBVM_Rising_Callback:00000000 HAL_PWREx_USBVM_Rising_Callback
     /tmp/ccsGrD0t.s:4298   .text.HAL_PWREx_USBVM_Falling_Callback:00000000 HAL_PWREx_USBVM_Falling_Callback
     /tmp/ccsGrD0t.s:4329   .text.HAL_PWREx_IO2VM_Rising_Callback:00000000 HAL_PWREx_IO2VM_Rising_Callback
     /tmp/ccsGrD0t.s:4360   .text.HAL_PWREx_IO2VM_Falling_Callback:00000000 HAL_PWREx_IO2VM_Falling_Callback
     /tmp/ccsGrD0t.s:4391   .text.HAL_PWREx_IO3VM_Rising_Callback:00000000 HAL_PWREx_IO3VM_Rising_Callback
     /tmp/ccsGrD0t.s:4422   .text.HAL_PWREx_IO3VM_Falling_Callback:00000000 HAL_PWREx_IO3VM_Falling_Callback
     /tmp/ccsGrD0t.s:4453   .text.HAL_PWREx_IO4VM_Rising_Callback:00000000 HAL_PWREx_IO4VM_Rising_Callback
     /tmp/ccsGrD0t.s:4484   .text.HAL_PWREx_IO4VM_Falling_Callback:00000000 HAL_PWREx_IO4VM_Falling_Callback
     /tmp/ccsGrD0t.s:4515   .text.HAL_PWREx_IO5VM_Rising_Callback:00000000 HAL_PWREx_IO5VM_Rising_Callback
     /tmp/ccsGrD0t.s:4546   .text.HAL_PWREx_IO5VM_Falling_Callback:00000000 HAL_PWREx_IO5VM_Falling_Callback
     /tmp/ccsGrD0t.s:4577   .text.HAL_PWREx_ADCVM_Rising_Callback:00000000 HAL_PWREx_ADCVM_Rising_Callback
     /tmp/ccsGrD0t.s:4608   .text.HAL_PWREx_ADCVM_Falling_Callback:00000000 HAL_PWREx_ADCVM_Falling_Callback
     /tmp/ccsGrD0t.s:4194   .text.HAL_PWREx_PVD_PVM_IRQHandler:00000168 $d
     /tmp/ccsGrD0t.s:4199   .text.HAL_PWREx_VDDCORE_Rising_Callback:00000000 $t
     /tmp/ccsGrD0t.s:4230   .text.HAL_PWREx_VDDCORE_Falling_Callback:00000000 $t
     /tmp/ccsGrD0t.s:4261   .text.HAL_PWREx_USBVM_Rising_Callback:00000000 $t
     /tmp/ccsGrD0t.s:4292   .text.HAL_PWREx_USBVM_Falling_Callback:00000000 $t
     /tmp/ccsGrD0t.s:4323   .text.HAL_PWREx_IO2VM_Rising_Callback:00000000 $t
     /tmp/ccsGrD0t.s:4354   .text.HAL_PWREx_IO2VM_Falling_Callback:00000000 $t
     /tmp/ccsGrD0t.s:4385   .text.HAL_PWREx_IO3VM_Rising_Callback:00000000 $t
     /tmp/ccsGrD0t.s:4416   .text.HAL_PWREx_IO3VM_Falling_Callback:00000000 $t
     /tmp/ccsGrD0t.s:4447   .text.HAL_PWREx_IO4VM_Rising_Callback:00000000 $t
     /tmp/ccsGrD0t.s:4478   .text.HAL_PWREx_IO4VM_Falling_Callback:00000000 $t
     /tmp/ccsGrD0t.s:4509   .text.HAL_PWREx_IO5VM_Rising_Callback:00000000 $t
     /tmp/ccsGrD0t.s:4540   .text.HAL_PWREx_IO5VM_Falling_Callback:00000000 $t
     /tmp/ccsGrD0t.s:4571   .text.HAL_PWREx_ADCVM_Rising_Callback:00000000 $t
     /tmp/ccsGrD0t.s:4602   .text.HAL_PWREx_ADCVM_Falling_Callback:00000000 $t
                           .group:00000000 wm4.0.2a10773746a5c5ebb5552f50e466f80b
                           .group:00000000 wm4.stm32n6xx_hal_conf.h.21.004a06df6e15ac197e03f723792da58a
                           .group:00000000 wm4.stddef.h.39.0dc9006b34572d4d9cae4c8b422c4971
                           .group:00000000 wm4.arm_cmse.h.103.a0d15a79c4c9a67da8d5831704d7248e
                           .group:00000000 wm4.stm32n6xx.h.34.80585dd08aa426c932f6311fdb7386da
                           .group:00000000 wm4.stm32n657xx.h.26.acd272cb67318cc1a4791ce2f0720ca6
                           .group:00000000 wm4._newlib_version.h.4.411db44ea2338a62eca2f0777f81481b
                           .group:00000000 wm4.features.h.33.e0c9f337c65cb9f22ed5f23d082bc78b
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
ARM GAS  /tmp/ccsGrD0t.s 			page 123


                           .group:00000000 wm4.cmsis_version.h.32.0ac195c83bb4537824e6ad1c47474b79
                           .group:00000000 wm4.core_cm55.h.68.832d5cf835639cc0d28219c3d2867330
                           .group:00000000 wm4.cmsis_gcc.h.26.7a5fd1a99dbedde687044a4433ab3e15
                           .group:00000000 wm4.core_cm55.h.196.52e437a270752da561676e507b35baeb
                           .group:00000000 wm4.mpu_armv8.h.32.9d72426c8e2b47753456dcb84802c5b3
                           .group:00000000 wm4.pmu_armv8.h.32.eaa95f88a71b29390b135fd81c071b6b
                           .group:00000000 wm4.core_cm55.h.4411.860dad8650880893dd57b815844f7186
                           .group:00000000 wm4.cachel1_armv7.h.32.abd77761a989e008b0c60891114a33c7
                           .group:00000000 wm4.stm32n657xx.h.575.1c2a5e6bedffc6f9083dcc857bc6d09d
                           .group:00000000 wm4.stm32n6xx.h.114.5cf793d8af485e14f110e3e24bde1aa5
                           .group:00000000 wm4.stm32_hal_legacy.h.22.87fb12bf5a1a1e00fc134f22bc9aa8c4
                           .group:00000000 wm4.newlib.h.7.591ac1bd65c1f5b34864757667a05252
                           .group:00000000 wm4.ieeefp.h.77.bd5feb87d9990dd328793ced294f6a87
                           .group:00000000 wm4.config.h.224.10ee1ad185d877c6e334e6581faab44d
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.cdefs.h.49.70fc7af612f78ddcace70fdd90b5623b
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.158.6f8e08a347b1cff664332fa350bfceb3
                           .group:00000000 wm4._types.h.127.3bdfe3ff8ea2d0985b03d9cbe93480e3
                           .group:00000000 wm4.reent.h.18.25503cdc8b7e55dd0d6ea7b3e5af7a03
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.78.6b87466b04591b1f1cb88c14fdf2ba9e
                           .group:00000000 wm4.math.h.13.47cfc34cae8a1153323939c4d32cf7c2
                           .group:00000000 wm4.stm32n6xx_hal_def.h.63.3a8f01490e8852464e9fcb69092e9c75
                           .group:00000000 wm4.stm32n6xx_ll_bus.h.38.2366a295ee4cdb04833997d3787fcd2d
                           .group:00000000 wm4.stm32n6xx_ll_rcc.h.21.002e22a16fd7f67dde6dce41e8ba9620
                           .group:00000000 wm4.stm32n6xx_hal_rcc.h.194.1cb1283e40f9bebcd3fba2a9a961838e
                           .group:00000000 wm4.stm32n6xx_hal_rcc_ex.h.21.79aa32178dfef625fbd20d362449acfa
                           .group:00000000 wm4.stm32n6xx_hal_rcc.h.4359.3f0b7ad33826d95438602c9aebc08af9
                           .group:00000000 wm4.stm32n6xx_hal_gpio.h.21.89d54af663b98eb8fc098192053f7eeb
                           .group:00000000 wm4.stm32n6xx_hal_gpio_ex.h.22.4acb2e3511a98bb48b81cfc8e09fd59e
                           .group:00000000 wm4.stm32n6xx_hal_rif.h.21.424d0bafb874a777dee3742a22e13037
                           .group:00000000 wm4.stm32n6xx_hal_dma.h.21.61e48c5c2e8d25d22177834b232fe45c
                           .group:00000000 wm4.stm32n6xx_hal_dma_ex.h.21.66e597beb090a165329d6ccf665e41bc
                           .group:00000000 wm4.stm32n6xx_hal_dma.h.1020.87e2180c009560b617c1f8208140c950
                           .group:00000000 wm4.stm32n6xx_hal_cortex.h.21.f493623cc58f9454ab4eae41e395c5cc
                           .group:00000000 wm4.stm32n6xx_hal_bsec.h.21.61b309e67dd810e28897a01b1b21a97f
                           .group:00000000 wm4.stm32n6xx_hal_dcmipp.h.21.f538bfd785c6469670251ac9bc7af55d
                           .group:00000000 wm4.stm32n6xx_hal_dma2d.h.21.75c8d46cdbb72970123b3f34ae2043d7
                           .group:00000000 wm4.stm32n6xx_hal_exti.h.21.fda87e715ea6b98239ec30171d1df594
                           .group:00000000 wm4.stm32n6xx_hal_gfxmmu.h.21.9784a9103143d48bd3c37389d0e0b8e6
                           .group:00000000 wm4.stm32n6xx_hal_i2c.h.21.3f483626ff64c5bf027265bb2e1d1331
                           .group:00000000 wm4.stm32n6xx_hal_i2c_ex.h.21.79e9196c22282cdaf6b4047893638c45
                           .group:00000000 wm4.stm32n6xx_hal_i2c.h.741.1084702632703acc669e4282b3043372
                           .group:00000000 wm4.stm32n6xx_hal_icache.h.21.194b4ec6e76f32b14f65c85616854850
                           .group:00000000 wm4.stm32n6xx_hal_ltdc.h.21.ae1eb09930e7e550e48e418ac5849e4d
                           .group:00000000 wm4.stm32n6xx_hal_ltdc.h.1002.b13ede7fc94ed5ad1c6768a157d2149a
                           .group:00000000 wm4.stm32n6xx_ll_usb.h.21.d518a5d97876c2ff49040c20a2c4a120
                           .group:00000000 wm4.stm32n6xx_hal_pcd.h.155.27040aac6844effe2af8c180caf1dd2e
                           .group:00000000 wm4.stm32n6xx_hal_pwr.h.21.cdb73e4869c3fed3fc84f901ec0e5f0a
                           .group:00000000 wm4.stm32n6xx_hal_pwr_ex.h.21.1a673224a58b0c1e5fad8eeda6514208
                           .group:00000000 wm4.stm32n6xx_hal_ramcfg.h.21.a62dfbb4d2c14e9a8c634a215e37bd3d
                           .group:00000000 wm4.stm32n6xx_hal_spi.h.21.9f810303326e2d91749800e9911f8e4d
                           .group:00000000 wm4.stm32n6xx_hal_spi.h.906.93ec0695066db4253cdbcb7d84358a0b
                           .group:00000000 wm4.stm32n6xx_hal_tim.h.21.839dd2b2a70382fb2c44f8f293a84d5f
                           .group:00000000 wm4.stm32n6xx_hal_tim_ex.h.21.e372d5ac63c13441211ea4ecbd353150
                           .group:00000000 wm4.stm32n6xx_hal_uart.h.21.230f549bfa0d5ebfd77bfb311b2aca15
ARM GAS  /tmp/ccsGrD0t.s 			page 124


                           .group:00000000 wm4.stm32n6xx_hal_uart_ex.h.21.a0d5511e1d0703b7b5278c8f5472b96d
                           .group:00000000 wm4.stm32n6xx_hal_xspi.h.21.e17898be2073b6b6b19faf30b4e304e9
                           .group:00000000 wm4.stm32n6xx_hal_cacheaxi.h.21.7c3375b7903ec42376e4883320997f74
                           .group:00000000 wm4.stm32n6xx_hal_gpu2d.h.21.48d0249122abad294a630c39cc4ebaed
                           .group:00000000 wm4.stm32n6xx_hal.h.81.5e59143eba07faca3e9aeaa5470826c8

UNDEFINED SYMBOLS
assert_failed
HAL_GetTick
HAL_PWR_PVD_Rising_Callback
HAL_PWR_PVD_Falling_Callback
