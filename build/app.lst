ARM GAS  /tmp/ccrysqwW.s 			page 1


   1              		.arch armv8.1-m.main
   2              		.fpu fpv5-d16
   3              		.arch_extension dsp
   4              		.arch_extension fp
   5              		.arch_extension fp.dp
   6              		.arch_extension mve
   7              		.arch_extension mve.fp
   8              		.eabi_attribute 5, "cortex-m55"
   9              		.eabi_attribute 28, 1
  10              		.eabi_attribute 20, 1
  11              		.eabi_attribute 21, 1
  12              		.eabi_attribute 23, 3
  13              		.eabi_attribute 24, 1
  14              		.eabi_attribute 25, 1
  15              		.eabi_attribute 26, 1
  16              		.eabi_attribute 30, 6
  17              		.eabi_attribute 34, 1
  18              		.eabi_attribute 38, 1
  19              		.eabi_attribute 18, 4
  20              		.file	"app.c"
  21              		.text
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.file 1 "Src/app.c"
  25              		.section	.text.LL_Buffer_addr_base,"ax",%progbits
  26              		.align	1
  27              		.syntax unified
  28              		.thumb
  29              		.thumb_func
  31              	LL_Buffer_addr_base:
  32              	.LFB2659:
  33              		.file 2 "Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h"
   1:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** /**
   2:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****  ******************************************************************************
   3:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****  * @file    ll_aton_NN_interface.h
   4:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****  * @author  SRA Artificial Intelligence & Embedded Architectures
   5:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****  * @brief   Interface that defines a NN generated by the AtoNN Compiler.
   6:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****  ******************************************************************************
   7:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****  * @attention
   8:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****  *
   9:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****  * Copyright (c) 2024 STMicroelectronics.
  10:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****  * All rights reserved.
  11:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****  *
  12:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****  * in the root directory of this software component.
  14:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****  *
  16:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****  ******************************************************************************
  17:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****  */
  18:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
  19:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** #ifndef __LL_ATON_NN_INTERFACE_H
  20:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** #define __LL_ATON_NN_INTERFACE_H
  21:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
  22:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** #ifdef __cplusplus
  23:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** extern "C"
  24:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** {
  25:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** #endif
ARM GAS  /tmp/ccrysqwW.s 			page 2


  26:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
  27:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** #include <assert.h>
  28:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** #include <stdbool.h>
  29:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** #include <stddef.h>
  30:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** #include <stdint.h>
  31:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
  32:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** #include "ll_aton_config.h"
  33:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
  34:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** #include "ll_aton_attributes.h"
  35:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** #include "ll_aton_util.h"
  36:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
  37:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /** @defgroup User I/O Return Values & Callback Event Types
  38:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @{
  39:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
  40:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
  41:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef enum LL_ATON_User_IO_Result
  42:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
  43:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     LL_ATON_User_IO_NOERROR,     /**< */
  44:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     LL_ATON_User_IO_WRONG_ALIGN, /**< */
  45:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     LL_ATON_User_IO_WRONG_SIZE,  /**< */
  46:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     LL_ATON_User_IO_WRONG_INDEX, /**< */
  47:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   } LL_ATON_User_IO_Result_t;
  48:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
  49:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef enum LL_ATON_RT_Callbacktype
  50:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
  51:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     LL_ATON_RT_Callbacktype_PRE_START,  /**< Callback called before start_epoch_block */
  52:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     LL_ATON_RT_Callbacktype_POST_START, /**< Callback called after start_epoch_block */
  53:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     LL_ATON_RT_Callbacktype_PRE_END,    /**< Callback called before end_epoch_block */
  54:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     LL_ATON_RT_Callbacktype_POST_END,   /**< Callback called after end_epoch_block */
  55:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     LL_ATON_RT_Callbacktype_NN_Init,    /**< Callback called after `LL_ATON_RT_Init_Network`,
  56:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****                                          *     NOTE: 3rd parameter passed is `NULL` */
  57:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     LL_ATON_RT_Callbacktype_NN_DeInit,  /**< Callback called after `LL_ATON_RT_DeInit_Network`,
  58:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****                                          *     NOTE: 3rd parameter passed is `NULL` */
  59:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     LL_ATON_RT_Callbacktype_RT_Init,    /**< Callback called after `LL_ATON_RT_RuntimeInit` */
  60:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     LL_ATON_RT_Callbacktype_RT_Deinit,  /**< Callback called before `LL_ATON_RT_RuntimeDeInit` */
  61:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   } LL_ATON_RT_Callbacktype_t;
  62:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
  63:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
  64:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @}
  65:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
  66:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
  67:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /** @defgroup Handle-style Data Types for Epoch Blocks
  68:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @{
  69:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
  70:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
  71:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /* this is needed to avoid some compilers (e.g. KEIL) that observe a strict semantic about conver
  72:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * pointers to integers in cost initializers
  73:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
  74:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef union
  75:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
  76:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     unsigned char *p;
  77:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uintptr_t i;
  78:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   } __LL_address_t;
  79:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
  80:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef void (*EpochBlock_FuncPtr_t)(const void *epoch_block);
  81:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
  82:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef enum
ARM GAS  /tmp/ccrysqwW.s 			page 3


  83:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
  84:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     EpochBlock_Flags_NONE = 0x0,                 /**< */
  85:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     EpochBlock_Flags_epoch_start = (0x1 << 0),   /**< First EpochBlock of an Epoch */
  86:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     EpochBlock_Flags_epoch_end = (0x1 << 1),     /**< Last EpochBlock of an Epoch */
  87:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     EpochBlock_Flags_blob = (0x1 << 2),          /**< Item is an Epoch Blob */
  88:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     EpochBlock_Flags_last_eb = (0x1 << 3),       /**< Last EpochBlock */
  89:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     EpochBlock_Flags_pure_hw = (0x1 << 4),       /**< Pure HW EpochBlock */
  90:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     EpochBlock_Flags_pure_sw = (0x1 << 5),       /**< Pure SW EpochBlock */
  91:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     EpochBlock_Flags_hybrid = (0x1 << 6),        /**< Hybrid EpochBlock (i.e. mixed HW/SW) */
  92:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     EpochBlock_Flags_internal = (0x1 << 7),      /**< ATON lib internal EpochBlock (used to impleme
  93:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     EpochBlock_Flags_blob_encrypted = (0x1 << 8) /**< The blob is encrypted and must be decrypted o
  94:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   } EpochBlock_Flags_t;
  95:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
  96:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef struct
  97:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
  98:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     EpochBlock_FuncPtr_t start_epoch_block; /**< Method to execute the EpochBlock */
  99:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     EpochBlock_FuncPtr_t end_epoch_block;   /**< Method to be executed when the EpochBlock ends */
 100:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uintptr_t blob_address;                 /**< Blob address (in case this EpochBlock represents a
 101:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uint32_t wait_mask;                     /**< Mask needed to check when an EpochBlock ends
 102:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****                                              *    - if epoch blob: number (not bitmask) of epoch co
 103:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****                                              *    - otherwise: bitmask with all output streaming en
 104:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uint16_t flags;                         /**< EpochBlock flags */
 105:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** #ifdef LL_ATON_EB_DBG_INFO
 106:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     int16_t epoch_num;             /**< Epoch number / First epoch number within blob */
 107:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     int16_t last_epoch_num;        /**< Epoch number / Last epoch number within blob */
 108:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uint32_t in_streng_mask;       /**< Debug information about input streaming engines used in epo
 109:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uint32_t out_streng_mask;      /**< Debug information about output streaming engines used in ep
 110:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uint64_t estimated_npu_cycles; /**< Debug information estimates for NPU cycles in epoch w/o mem
 111:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uint64_t estimated_tot_cycles; /**< Debug information estimates for NPU cycles in epoch w/ memo
 112:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** #endif                             // LL_ATON_EB_DBG_INFO
 113:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   } EpochBlock_ItemTypeDef;
 114:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef EpochBlock_ItemTypeDef LL_ATON_RT_EpochBlockItem_t;
 115:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 116:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 117:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @}
 118:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 119:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 120:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /** @defgroup Helper Function Declarations for User Callbacks
 121:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @{
 122:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 123:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 124:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 125:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief Checks if the pointed element is the last one of an array of `const EpochBlock_ItemType
 126:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    *
 127:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 128:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline bool EpochBlock_IsLastEpochBlock(const EpochBlock_ItemTypeDef *eb);
 129:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 130:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 131:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief Checks if the pointed element is the first EpochBlock of an Epoch
 132:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    *
 133:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 134:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline bool EpochBlock_IsEpochStart(const EpochBlock_ItemTypeDef *eb);
 135:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 136:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 137:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief Checks if the pointed element is the last EpochBlock of an Epoch
 138:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    *
 139:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
ARM GAS  /tmp/ccrysqwW.s 			page 4


 140:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline bool EpochBlock_IsEpochEnd(const EpochBlock_ItemTypeDef *eb);
 141:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 142:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 143:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief Checks if the pointed element is the an Epoch Blob
 144:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    *
 145:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 146:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline bool EpochBlock_IsEpochBlob(const EpochBlock_ItemTypeDef *eb);
 147:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 148:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 149:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief Checks if - in case this epoch is a blob (see above) - the blob is encrypted
 150:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    *
 151:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 152:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline bool EpochBlock_IsBlobEncrypted(const EpochBlock_ItemTypeDef *eb);
 153:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 154:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 155:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief Checks if the pointed element is pure SW epoch
 156:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    *
 157:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 158:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline bool EpochBlock_IsEpochPureSW(const EpochBlock_ItemTypeDef *eb);
 159:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 160:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 161:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief Checks if the pointed element is a pure HW or mixed SW/HW epoch
 162:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    *
 163:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 164:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline bool EpochBlock_IsEpochPureHW(const EpochBlock_ItemTypeDef *eb);
 165:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 166:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 167:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief Checks if the pointed element is a hybrid epoch
 168:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    *
 169:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 170:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline bool EpochBlock_IsEpochHybrid(const EpochBlock_ItemTypeDef *eb);
 171:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 172:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 173:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief Checks if the pointed element is an internal epoch
 174:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    *
 175:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 176:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline bool EpochBlock_IsEpochInternal(const EpochBlock_ItemTypeDef *eb);
 177:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 178:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 179:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief Returns the Epoch controller id to use
 180:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    *
 181:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 182:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline uint32_t EpochBlock_EpochControllerUnit(const EpochBlock_ItemTypeDef *eb);
 183:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 184:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 185:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief Returns the address of the configuration of the epoch controller (the blob address)
 186:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    *
 187:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 188:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline uintptr_t EpochBlock_EpochBlobAddr(const EpochBlock_ItemTypeDef *eb);
 189:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 190:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 191:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief ATON buffer types definition
 192:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 193:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 194:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 195:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @}
 196:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
ARM GAS  /tmp/ccrysqwW.s 			page 5


 197:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 198:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /** @defgroup Handle-style Data Types for Input, Output, and Internal Buffers
 199:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @{
 200:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 201:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 202:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef enum
 203:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
 204:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_UNDEFINED = 0,
 205:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_FLOAT = 1,
 206:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_UINT2 = 2,
 207:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_INT2 = 3,
 208:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_UINT4 = 4,
 209:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_INT4 = 5,
 210:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_UINT8 = 6,
 211:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_INT8 = 7,
 212:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_UINT16 = 8,
 213:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_INT16 = 9,
 214:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_INT32 = 10,
 215:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_INT64 = 11,
 216:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_STRING = 12,
 217:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_BOOL = 13,
 218:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_FLOAT16 = 14,
 219:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_DOUBLE = 15,
 220:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_UINT32 = 16,
 221:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_UINT64 = 17,
 222:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_COMPLEX64 = 18,
 223:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_COMPLEX128 = 19,
 224:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_BFLOAT16 = 20,
 225:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     DataType_FXP = 100 // AtoNN specific
 226:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   } Buffer_DataType_TypeDef;
 227:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 228:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 229:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief ATON buffer Channel position
 230:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 231:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 232:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef enum
 233:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
 234:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     CHPos_UNDEFINED = 0, /**< No channel present */
 235:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     CHPos_First = 1,     /**< Channel First         ( ...B C H W )*/
 236:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     CHPos_Last = 2,      /**< Channel Last          ( ...B H W C ) */
 237:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     CHPos_Mixed = 3,     /**< Channel with Batch(b) ( ...B C/b H W b ) */
 238:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   } Buffer_CHPos_TypeDef;
 239:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 240:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 241:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief ATON buffer definition
 242:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 243:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef struct
 244:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
 245:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     const char *name;             /**< Buffer name. NULL if end of list */
 246:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     __LL_address_t addr_base;     /**< Buffer base address */
 247:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uint32_t offset_start;        /**< Offset of the buffer start address from the base address */
 248:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uint32_t offset_end;          /**< Offset of the buffer end address from the base address
 249:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****                                    *   (first bytes address beyond buffer length) */
 250:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uint32_t offset_limit;        /**< Offset of the limiter address from the base address,
 251:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****                                    *   (needed for configuring streaming engines) */
 252:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uint8_t is_user_allocated;    /**< */
 253:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uint8_t is_param;             /**< */
ARM GAS  /tmp/ccrysqwW.s 			page 6


 254:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uint16_t epoch;               /**< */
 255:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uint32_t batch;               /**< */
 256:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     const uint32_t *mem_shape;    /**< shape as seen by the user in memory (only valid for input/ou
 257:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uint16_t mem_ndims;           /**< Number of dimensions of mem_shape (Length of mem_shape) */
 258:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     Buffer_CHPos_TypeDef chpos;   /**< Position  of channels dimension in mem shape */
 259:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     Buffer_DataType_TypeDef type; /**< */
 260:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     int8_t Qm;                    /**< */
 261:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     int8_t Qn;                    /**< */
 262:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uint8_t Qunsigned;            /**< */
 263:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uint8_t ndims;                /**< */
 264:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uint8_t nbits;                /**< */
 265:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uint8_t per_channel;          /**< */
 266:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     const uint32_t *shape;        /**< */
 267:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     const float *scale;           /**< */
 268:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     const int16_t *offset;        /**< This can become int8 or uint8 based on the Qunsigned field.
 269:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****                                    *   (This field Must have the same format of the quantized value
 270:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   } LL_Buffer_InfoTypeDef;
 271:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 272:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 273:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @}
 274:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 275:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 276:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /** @defgroup Helper Function Declarations for Buffer Analysis
 277:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @{
 278:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 279:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 280:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 281:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief returns the base address of the mem pool the buffer is allocated in
 282:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    *
 283:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 284:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline unsigned char *LL_Buffer_addr_base(const LL_Buffer_InfoTypeDef *buf);
 285:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 286:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 287:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief returns the start address of the buffer
 288:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    *
 289:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 290:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline unsigned char *LL_Buffer_addr_start(const LL_Buffer_InfoTypeDef *buf);
 291:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 292:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 293:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief returns the end address of the buffer
 294:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    *
 295:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 296:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline unsigned char *LL_Buffer_addr_end(const LL_Buffer_InfoTypeDef *buf);
 297:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 298:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 299:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief returns the limit address of the buffer
 300:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    *
 301:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 302:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline unsigned char *LL_Buffer_addr_limit(const LL_Buffer_InfoTypeDef *buf);
 303:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 304:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 305:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief returns the length of the buffer
 306:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    *
 307:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 308:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline uint32_t LL_Buffer_len(const LL_Buffer_InfoTypeDef *buf);
 309:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 310:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
ARM GAS  /tmp/ccrysqwW.s 			page 7


 311:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief returns the buffer elements number of bits
 312:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    *
 313:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 314:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline uint32_t LL_Buffer_bits(const LL_Buffer_InfoTypeDef *buf);
 315:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 316:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 317:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @}
 318:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 319:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 320:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /** @defgroup Handle-style Data Types and Declaration Macros for ATON Runtime Execution & User AP
 321:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @{
 322:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 323:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 324:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   struct __nn_instance_struct; // forward declaration
 325:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef struct __nn_instance_struct NN_Instance_TypeDef;
 326:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 327:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** /**
 328:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****  * @brief Declare the function prototypes for named NN interface functions generated by the AtoNN c
 329:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****  * @param network_name name of the network as provided by option `--network-name`
 330:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****  */
 331:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** #define LL_ATON_DECLARE_NAMED_NN_PROTOS(network_name)                                              
 332:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   extern bool LL_ATON_EC_Network_Init_##network_name(void);                                        
 333:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   extern bool LL_ATON_EC_Inference_Init_##network_name(void);                                      
 334:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   extern LL_ATON_User_IO_Result_t LL_ATON_Set_User_Input_Buffer_##network_name(uint32_t num, void *
 335:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****                                                                                uint32_t size);     
 336:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   extern void *LL_ATON_Get_User_Input_Buffer_##network_name(uint32_t num);                         
 337:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   extern LL_ATON_User_IO_Result_t LL_ATON_Set_User_Output_Buffer_##network_name(uint32_t num, void 
 338:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****                                                                                 uint32_t size);    
 339:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   extern void *LL_ATON_Get_User_Output_Buffer_##network_name(uint32_t num);                        
 340:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   extern const EpochBlock_ItemTypeDef *LL_ATON_EpochBlockItems_##network_name(void);               
 341:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   extern const LL_Buffer_InfoTypeDef *LL_ATON_Output_Buffers_Info_##network_name(void);            
 342:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   extern const LL_Buffer_InfoTypeDef *LL_ATON_Input_Buffers_Info_##network_name(void);             
 343:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   extern const LL_Buffer_InfoTypeDef *LL_ATON_Internal_Buffers_Info_##network_name(void);
 344:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 345:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 346:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @brief  Type definitions for NN interface functions
 347:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 348:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef bool (*NN_EC_Hook_TypeDef)(void);
 349:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef LL_ATON_User_IO_Result_t (*NN_InputSetter_TypeDef)(uint32_t num, void *buffer, uint32_t s
 350:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef void *(*NN_InputGetter_TypeDef)(uint32_t num);
 351:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef LL_ATON_User_IO_Result_t (*NN_OutputSetter_TypeDef)(uint32_t num, void *buffer, uint32_t 
 352:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef void *(*NN_OutputGetter_TypeDef)(uint32_t num);
 353:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef const EpochBlock_ItemTypeDef *(*NN_EpochBlockItems_TypeDef)(void);
 354:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef const LL_Buffer_InfoTypeDef *(*NN_Buffers_Info_TypeDef)(void);
 355:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 356:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef void (*TraceRuntime_FuncPtr_t)(LL_ATON_RT_Callbacktype_t ctype);
 357:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 358:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef void (*TraceEpochBlock_FuncPtr_t)(LL_ATON_RT_Callbacktype_t ctype, const NN_Instance_Type
 359:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****                                             const EpochBlock_ItemTypeDef *epoch_block);
 360:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 361:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef struct
 362:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
 363:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     const char *network_name;
 364:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     NN_EC_Hook_TypeDef ec_network_init;
 365:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     NN_EC_Hook_TypeDef ec_inference_init;
 366:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     NN_InputSetter_TypeDef input_setter;
 367:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     NN_InputGetter_TypeDef input_getter;
ARM GAS  /tmp/ccrysqwW.s 			page 8


 368:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     NN_OutputSetter_TypeDef output_setter;
 369:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     NN_OutputGetter_TypeDef output_getter;
 370:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     NN_EpochBlockItems_TypeDef epoch_block_items;
 371:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     NN_Buffers_Info_TypeDef output_buffers_info;
 372:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     NN_Buffers_Info_TypeDef input_buffers_info;
 373:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     NN_Buffers_Info_TypeDef internal_buffers_info;
 374:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   } NN_Interface_TypeDef;
 375:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 376:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   typedef struct
 377:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
 378:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     const EpochBlock_ItemTypeDef *volatile current_epoch_block; // pointer to current epoch block
 379:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     const EpochBlock_ItemTypeDef *volatile first_epoch_block;   // pointer to first epoch block in 
 380:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     const EpochBlock_ItemTypeDef *volatile next_epoch_block;    // pointer to epoch block to be ins
 381:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 382:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     const EpochBlock_ItemTypeDef *volatile saved_current_epoch_block; // pointer to saved current e
 383:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     const EpochBlock_ItemTypeDef
 384:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****         *volatile saved_first_epoch_block; // pointer to saved first epoch block in current epoch l
 385:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 386:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     bool inference_started; // inference has been started
 387:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 388:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** #if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
 389:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     volatile uint32_t triggered_events;        // currently triggered events/IRQs in current epoch
 390:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     volatile bool current_epoch_block_started; // has current epoch block already been started
 391:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** #endif                                         // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
 392:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 393:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** #ifndef NDEBUG
 394:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     volatile uint32_t
 395:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****         nr_of_epoch_blocks; // number of epoch blocks in network (includes also terminating empty e
 396:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     volatile uint32_t saved_nr_of_epoch_blocks; // number of epoch blocks in saved network (include
 397:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****                                                 // empty epoch block)
 398:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** #endif                                          // NDEBUG
 399:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 400:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     TraceEpochBlock_FuncPtr_t epoch_callback_function; // epoch callback function
 401:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 402:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** #if defined(LL_ATON_RT_RELOC)
 403:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     uint32_t inst_reloc;
 404:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** #endif
 405:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 406:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   } NN_Execution_State_TypeDef;
 407:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 408:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   struct __nn_instance_struct
 409:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
 410:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     const NN_Interface_TypeDef *network;
 411:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     NN_Execution_State_TypeDef exec_state;
 412:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   };
 413:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 414:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /**
 415:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @}
 416:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 417:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 418:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   /** @defgroup Helper Function Inline Implementations
 419:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    * @{
 420:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****    */
 421:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 422:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline bool EpochBlock_IsLastEpochBlock(const EpochBlock_ItemTypeDef *eb)
 423:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
 424:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     return ((eb->flags & EpochBlock_Flags_last_eb) != 0);
ARM GAS  /tmp/ccrysqwW.s 			page 9


 425:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   }
 426:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 427:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline bool EpochBlock_IsEpochStart(const EpochBlock_ItemTypeDef *eb)
 428:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
 429:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     return ((eb->flags & EpochBlock_Flags_epoch_start) != 0);
 430:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   }
 431:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 432:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline bool EpochBlock_IsEpochEnd(const EpochBlock_ItemTypeDef *eb)
 433:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
 434:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     return ((eb->flags & EpochBlock_Flags_epoch_end) != 0);
 435:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   }
 436:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 437:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline bool EpochBlock_IsEpochBlob(const EpochBlock_ItemTypeDef *eb)
 438:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
 439:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     return ((eb->flags & EpochBlock_Flags_blob) != 0);
 440:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   }
 441:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 442:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline bool EpochBlock_IsBlobEncrypted(const EpochBlock_ItemTypeDef *eb)
 443:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
 444:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     return ((eb->flags & EpochBlock_Flags_blob_encrypted) != 0);
 445:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   }
 446:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 447:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline bool EpochBlock_IsEpochPureSW(const EpochBlock_ItemTypeDef *eb)
 448:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
 449:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     return ((eb->flags & EpochBlock_Flags_pure_sw) != 0);
 450:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   }
 451:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 452:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline bool EpochBlock_IsEpochPureHW(const EpochBlock_ItemTypeDef *eb)
 453:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
 454:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     return ((eb->flags & EpochBlock_Flags_pure_hw) != 0);
 455:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   }
 456:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 457:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline bool EpochBlock_IsEpochHybrid(const EpochBlock_ItemTypeDef *eb)
 458:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
 459:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     return ((eb->flags & EpochBlock_Flags_hybrid) != 0);
 460:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   }
 461:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 462:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline bool EpochBlock_IsEpochInternal(const EpochBlock_ItemTypeDef *eb)
 463:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
 464:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     return ((eb->flags & EpochBlock_Flags_internal) != 0);
 465:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   }
 466:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 467:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline uint32_t EpochBlock_EpochControllerUnit(const EpochBlock_ItemTypeDef *eb)
 468:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
 469:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
 470:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     return eb->wait_mask;
 471:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   }
 472:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 473:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline uintptr_t EpochBlock_EpochBlobAddr(const EpochBlock_ItemTypeDef *eb)
 474:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
 475:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
 476:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     return eb->blob_address;
 477:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   }
 478:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 479:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline unsigned char *LL_Buffer_addr_base(const LL_Buffer_InfoTypeDef *buf)
 480:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
  34              		.loc 2 480 3
ARM GAS  /tmp/ccrysqwW.s 			page 10


  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 16
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38              		@ link register save eliminated.
  39 0000 80B4     		push	{r7}
  40              		.cfi_def_cfa_offset 4
  41              		.cfi_offset 7, -4
  42 0002 85B0     		sub	sp, sp, #20
  43              		.cfi_def_cfa_offset 24
  44 0004 00AF     		add	r7, sp, #0
  45              		.cfi_def_cfa_register 7
  46 0006 7860     		str	r0, [r7, #4]
 481:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     if (buf->is_user_allocated)
  47              		.loc 2 481 12
  48 0008 7B68     		ldr	r3, [r7, #4]
  49 000a 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
  50              		.loc 2 481 8
  51 000c 002B     		cmp	r3, #0
  52 000e 05D0     		beq	.L2
  53              	.LBB108:
 482:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     {
 483:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****       unsigned char **tmp = (unsigned char **)buf->addr_base.p;
  54              		.loc 2 483 23
  55 0010 7B68     		ldr	r3, [r7, #4]
  56 0012 5B68     		ldr	r3, [r3, #4]
  57 0014 FB60     		str	r3, [r7, #12]
 484:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****       return *tmp;
  58              		.loc 2 484 14
  59 0016 FB68     		ldr	r3, [r7, #12]
  60 0018 1B68     		ldr	r3, [r3]
  61 001a 01E0     		b	.L3
  62              	.L2:
  63              	.LBE108:
 485:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     }
 486:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     return buf->addr_base.p;
  64              		.loc 2 486 26
  65 001c 7B68     		ldr	r3, [r7, #4]
  66 001e 5B68     		ldr	r3, [r3, #4]
  67              	.L3:
 487:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   }
  68              		.loc 2 487 3
  69 0020 1846     		mov	r0, r3
  70 0022 1437     		adds	r7, r7, #20
  71              		.cfi_def_cfa_offset 4
  72 0024 BD46     		mov	sp, r7
  73              		.cfi_def_cfa_register 13
  74              		@ sp needed
  75 0026 5DF8047B 		ldr	r7, [sp], #4
  76              		.cfi_restore 7
  77              		.cfi_def_cfa_offset 0
  78 002a 7047     		bx	lr
  79              		.cfi_endproc
  80              	.LFE2659:
  82              		.section	.text.LL_Buffer_addr_start,"ax",%progbits
  83              		.align	1
  84              		.syntax unified
  85              		.thumb
ARM GAS  /tmp/ccrysqwW.s 			page 11


  86              		.thumb_func
  88              	LL_Buffer_addr_start:
  89              	.LFB2660:
 488:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 489:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline unsigned char *LL_Buffer_addr_start(const LL_Buffer_InfoTypeDef *buf)
 490:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
  90              		.loc 2 490 3
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 8
  93              		@ frame_needed = 1, uses_anonymous_args = 0
  94 0000 80B5     		push	{r7, lr}
  95              		.cfi_def_cfa_offset 8
  96              		.cfi_offset 7, -8
  97              		.cfi_offset 14, -4
  98 0002 82B0     		sub	sp, sp, #8
  99              		.cfi_def_cfa_offset 16
 100 0004 00AF     		add	r7, sp, #0
 101              		.cfi_def_cfa_register 7
 102 0006 7860     		str	r0, [r7, #4]
 491:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     return LL_Buffer_addr_base(buf) + buf->offset_start;
 103              		.loc 2 491 12
 104 0008 7868     		ldr	r0, [r7, #4]
 105 000a FFF7FEFF 		bl	LL_Buffer_addr_base
 106 000e 0246     		mov	r2, r0
 107              		.loc 2 491 42 discriminator 1
 108 0010 7B68     		ldr	r3, [r7, #4]
 109 0012 9B68     		ldr	r3, [r3, #8]
 110              		.loc 2 491 37 discriminator 1
 111 0014 1344     		add	r3, r3, r2
 492:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   }
 112              		.loc 2 492 3
 113 0016 1846     		mov	r0, r3
 114 0018 0837     		adds	r7, r7, #8
 115              		.cfi_def_cfa_offset 8
 116 001a BD46     		mov	sp, r7
 117              		.cfi_def_cfa_register 13
 118              		@ sp needed
 119 001c 80BD     		pop	{r7, pc}
 120              		.cfi_endproc
 121              	.LFE2660:
 123              		.section	.text.LL_Buffer_len,"ax",%progbits
 124              		.align	1
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 129              	LL_Buffer_len:
 130              	.LFB2663:
 493:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 494:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline unsigned char *LL_Buffer_addr_end(const LL_Buffer_InfoTypeDef *buf)
 495:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
 496:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     return LL_Buffer_addr_base(buf) + buf->offset_end;
 497:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   }
 498:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 499:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline unsigned char *LL_Buffer_addr_limit(const LL_Buffer_InfoTypeDef *buf)
 500:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
 501:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     return LL_Buffer_addr_base(buf) + buf->offset_limit;
 502:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   }
ARM GAS  /tmp/ccrysqwW.s 			page 12


 503:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h **** 
 504:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   static inline uint32_t LL_Buffer_len(const LL_Buffer_InfoTypeDef *buf)
 505:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   {
 131              		.loc 2 505 3
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 8
 134              		@ frame_needed = 1, uses_anonymous_args = 0
 135              		@ link register save eliminated.
 136 0000 80B4     		push	{r7}
 137              		.cfi_def_cfa_offset 4
 138              		.cfi_offset 7, -4
 139 0002 83B0     		sub	sp, sp, #12
 140              		.cfi_def_cfa_offset 16
 141 0004 00AF     		add	r7, sp, #0
 142              		.cfi_def_cfa_register 7
 143 0006 7860     		str	r0, [r7, #4]
 506:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****     return buf->offset_end - buf->offset_start;
 144              		.loc 2 506 15
 145 0008 7B68     		ldr	r3, [r7, #4]
 146 000a DA68     		ldr	r2, [r3, #12]
 147              		.loc 2 506 33
 148 000c 7B68     		ldr	r3, [r7, #4]
 149 000e 9B68     		ldr	r3, [r3, #8]
 150              		.loc 2 506 28
 151 0010 D31A     		subs	r3, r2, r3
 507:Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h ****   }
 152              		.loc 2 507 3
 153 0012 1846     		mov	r0, r3
 154 0014 0C37     		adds	r7, r7, #12
 155              		.cfi_def_cfa_offset 4
 156 0016 BD46     		mov	sp, r7
 157              		.cfi_def_cfa_register 13
 158              		@ sp needed
 159 0018 5DF8047B 		ldr	r7, [sp], #4
 160              		.cfi_restore 7
 161              		.cfi_def_cfa_offset 0
 162 001c 7047     		bx	lr
 163              		.cfi_endproc
 164              	.LFE2663:
 166              		.section	.text.nema_set_blend_blit,"ax",%progbits
 167              		.align	1
 168              		.syntax unified
 169              		.thumb
 170              		.thumb_func
 172              	nema_set_blend_blit:
 173              	.LFB7356:
 174              		.file 3 "Lib/NemaGFX/include/nema_blender.h"
   1:Lib/NemaGFX/include/nema_blender.h **** /* TSI 2023.xmo */
   2:Lib/NemaGFX/include/nema_blender.h **** /*******************************************************************************
   3:Lib/NemaGFX/include/nema_blender.h ****  * Copyright (c) 2023 Think Silicon Single Member PC
   4:Lib/NemaGFX/include/nema_blender.h ****  *
   5:Lib/NemaGFX/include/nema_blender.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
   6:Lib/NemaGFX/include/nema_blender.h ****  * of this header file and/or associated documentation files to use, copy,
   7:Lib/NemaGFX/include/nema_blender.h ****  * modify, merge, publish, distribute, sublicense, and/or sell copies of the
   8:Lib/NemaGFX/include/nema_blender.h ****  * Materials, and to permit persons to whom the Materials are furnished to do
   9:Lib/NemaGFX/include/nema_blender.h ****  * so, subject to the following conditions:
  10:Lib/NemaGFX/include/nema_blender.h ****  *
ARM GAS  /tmp/ccrysqwW.s 			page 13


  11:Lib/NemaGFX/include/nema_blender.h ****  * The above copyright notice and this permission notice shall be included in
  12:Lib/NemaGFX/include/nema_blender.h ****  * all copies or substantial portions of the Materials.
  13:Lib/NemaGFX/include/nema_blender.h ****  *
  14:Lib/NemaGFX/include/nema_blender.h ****  * MODIFICATIONS TO THIS FILE MAY MEAN IT NO LONGER ACCURATELY REFLECTS
  15:Lib/NemaGFX/include/nema_blender.h ****  * NEMAGFX API. THE UNMODIFIED, NORMATIVE VERSIONS OF THINK-SILICON NEMAGFX
  16:Lib/NemaGFX/include/nema_blender.h ****  * SPECIFICATIONS AND HEADER INFORMATION ARE LOCATED AT:
  17:Lib/NemaGFX/include/nema_blender.h ****  *   https://think-silicon.com/products/software/nemagfx-api
  18:Lib/NemaGFX/include/nema_blender.h ****  *
  19:Lib/NemaGFX/include/nema_blender.h ****  *  The software is provided 'as is', without warranty of any kind, express or
  20:Lib/NemaGFX/include/nema_blender.h ****  *  implied, including but not limited to the warranties of merchantability,
  21:Lib/NemaGFX/include/nema_blender.h ****  *  fitness for a particular purpose and noninfringement. In no event shall
  22:Lib/NemaGFX/include/nema_blender.h ****  *  Think Silicon Single Member PC be liable for any claim, damages or other
  23:Lib/NemaGFX/include/nema_blender.h ****  *  liability, whether in an action of contract, tort or otherwise, arising
  24:Lib/NemaGFX/include/nema_blender.h ****  *  from, out of or in connection with the software or the use or other dealings
  25:Lib/NemaGFX/include/nema_blender.h ****  *  in the software.
  26:Lib/NemaGFX/include/nema_blender.h ****  ******************************************************************************/
  27:Lib/NemaGFX/include/nema_blender.h **** 
  28:Lib/NemaGFX/include/nema_blender.h **** 
  29:Lib/NemaGFX/include/nema_blender.h **** #ifndef NEMA_BLENDER_H__
  30:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BLENDER_H__
  31:Lib/NemaGFX/include/nema_blender.h **** 
  32:Lib/NemaGFX/include/nema_blender.h **** #include "nema_sys_defs.h"
  33:Lib/NemaGFX/include/nema_blender.h **** #include "nema_graphics.h"
  34:Lib/NemaGFX/include/nema_blender.h **** 
  35:Lib/NemaGFX/include/nema_blender.h **** #ifdef __cplusplus
  36:Lib/NemaGFX/include/nema_blender.h **** extern "C" {
  37:Lib/NemaGFX/include/nema_blender.h **** #endif
  38:Lib/NemaGFX/include/nema_blender.h **** 
  39:Lib/NemaGFX/include/nema_blender.h **** // Blending Factor Selector
  40:Lib/NemaGFX/include/nema_blender.h **** //-------------------------------------------------------------------------------------------------
  41:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BF_ZERO         (0x0U) /**< 0 */
  42:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BF_ONE          (0x1U) /**< 1 */
  43:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BF_SRCCOLOR     (0x2U) /**< Sc */
  44:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BF_INVSRCCOLOR  (0x3U) /**< (1-Sc) */
  45:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BF_SRCALPHA     (0x4U) /**< Sa */
  46:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BF_INVSRCALPHA  (0x5U) /**< (1-Sa) */
  47:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BF_DESTALPHA    (0x6U) /**< Da */
  48:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BF_INVDESTALPHA (0x7U) /**< (1-Da) */
  49:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BF_DESTCOLOR    (0x8U) /**< Dc */
  50:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BF_INVDESTCOLOR (0x9U) /**< (1-Dc) */
  51:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BF_CONSTCOLOR   (0xaU) /**< Cc */
  52:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BF_CONSTALPHA   (0xbU) /**< Ca */
  53:Lib/NemaGFX/include/nema_blender.h **** 
  54:Lib/NemaGFX/include/nema_blender.h ****     /*                  source factor         destination factor */
  55:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BL_SIMPLE     (  (uint32_t)NEMA_BF_SRCALPHA      |   ((uint32_t)NEMA_BF_INVSRCALPHA  <
  56:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BL_CLEAR      (  (uint32_t)NEMA_BF_ZERO        /*|   ((uint32_t)NEMA_BF_ZERO         <
  57:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BL_SRC        (  (uint32_t)NEMA_BF_ONE         /*|   ((uint32_t)NEMA_BF_ZERO         <
  58:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BL_SRC_OVER   (  (uint32_t)NEMA_BF_ONE           |   ((uint32_t)NEMA_BF_INVSRCALPHA  <
  59:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BL_DST_OVER   (  (uint32_t)NEMA_BF_INVDESTALPHA  |   ((uint32_t)NEMA_BF_ONE          <
  60:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BL_SRC_IN     (  (uint32_t)NEMA_BF_DESTALPHA   /*|   ((uint32_t)NEMA_BF_ZERO         <
  61:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BL_DST_IN     (/*(uint32_t)NEMA_BF_ZERO          |*/ ((uint32_t)NEMA_BF_SRCALPHA     <
  62:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BL_SRC_OUT    (  (uint32_t)NEMA_BF_INVDESTALPHA/*|   ((uint32_t)NEMA_BF_ZERO         <
  63:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BL_DST_OUT    (/*(uint32_t)NEMA_BF_ZERO          |*/ ((uint32_t)NEMA_BF_INVSRCALPHA  <
  64:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BL_SRC_ATOP   (  (uint32_t)NEMA_BF_DESTALPHA     |   ((uint32_t)NEMA_BF_INVSRCALPHA  <
  65:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BL_DST_ATOP   (  (uint32_t)NEMA_BF_INVDESTALPHA  |   ((uint32_t)NEMA_BF_SRCALPHA     <
  66:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BL_ADD        (  (uint32_t)NEMA_BF_ONE           |   ((uint32_t)NEMA_BF_ONE          <
  67:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BL_XOR        (  (uint32_t)NEMA_BF_INVDESTALPHA  |   ((uint32_t)NEMA_BF_INVSRCALPHA  <
ARM GAS  /tmp/ccrysqwW.s 			page 14


  68:Lib/NemaGFX/include/nema_blender.h **** 
  69:Lib/NemaGFX/include/nema_blender.h **** 
  70:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BLOP_NONE         (0U)           /**< No extra blending operation */
  71:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BLOP_RECOLOR      (0x00100000U)  /**< Cconst*Aconst + Csrc*(1-Aconst). Overrides MODUL
  72:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BLOP_LUT          (0x00200000U)  /**< src_tex as index, src2_tex as palette */
  73:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BLOP_STENCIL_XY   (0x00400000U)  /**< Use TEX3 as mask/stencil */
  74:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BLOP_STENCIL_TXTY (0x00800000U)  /**< Use TEX3 as mask/stencil */
  75:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BLOP_NO_USE_ROPBL (0x01000000U)  /**< Don't use Rop Blender even if present */
  76:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BLOP_DST_CKEY_NEG (0x02000000U)  /**< Apply Inverse Destination Color Keying - draw on
  77:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BLOP_SRC_PREMULT  (0x04000000U)  /**< Premultiply Source Color with Source Alpha (cann
  78:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BLOP_MODULATE_A   (0x08000000U)  /**< Modulate by Constant Alpha value*/
  79:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BLOP_FORCE_A      (0x10000000U)  /**< Force Constant Alpha value */
  80:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BLOP_MODULATE_RGB (0x20000000U)  /**< Modulate by Constant Color (RGB) values */
  81:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BLOP_SRC_CKEY     (0x40000000U)  /**< Apply Source Color Keying - draw only when src c
  82:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BLOP_DST_CKEY     (0x80000000U)  /**< Apply Destination Color Keying - draw only when 
  83:Lib/NemaGFX/include/nema_blender.h **** #define NEMA_BLOP_MASK         (0xfff00000U)
  84:Lib/NemaGFX/include/nema_blender.h **** 
  85:Lib/NemaGFX/include/nema_blender.h **** /** \brief Return blending mode given source and destination blending factors and additional blendi
  86:Lib/NemaGFX/include/nema_blender.h ****  *
  87:Lib/NemaGFX/include/nema_blender.h ****  * \param src Source Blending Factor
  88:Lib/NemaGFX/include/nema_blender.h ****  * \param dst Destination Blending Factor
  89:Lib/NemaGFX/include/nema_blender.h ****  * \param ops Additional Blending Operations
  90:Lib/NemaGFX/include/nema_blender.h ****  * \return Final Blending Mode
  91:Lib/NemaGFX/include/nema_blender.h ****  *
  92:Lib/NemaGFX/include/nema_blender.h ****  */
  93:Lib/NemaGFX/include/nema_blender.h **** static inline uint32_t nema_blending_mode(uint32_t src_bf, uint32_t dst_bf, uint32_t blops) {
  94:Lib/NemaGFX/include/nema_blender.h ****     return ( (src_bf) | (dst_bf << 8) | (blops&NEMA_BLOP_MASK) );
  95:Lib/NemaGFX/include/nema_blender.h **** }
  96:Lib/NemaGFX/include/nema_blender.h **** 
  97:Lib/NemaGFX/include/nema_blender.h **** /** \brief Set blending mode
  98:Lib/NemaGFX/include/nema_blender.h ****  *
  99:Lib/NemaGFX/include/nema_blender.h ****  * \param blending_mode Blending mode to be set
 100:Lib/NemaGFX/include/nema_blender.h ****  * \param dst_tex Destination Texture
 101:Lib/NemaGFX/include/nema_blender.h ****  * \param fg_tex Foreground (source) Texture
 102:Lib/NemaGFX/include/nema_blender.h ****  * \param bg_tex Background (source2) Texture
 103:Lib/NemaGFX/include/nema_blender.h ****  *
 104:Lib/NemaGFX/include/nema_blender.h ****  */
 105:Lib/NemaGFX/include/nema_blender.h **** void nema_set_blend(uint32_t blending_mode, nema_tex_t dst_tex, nema_tex_t fg_tex, nema_tex_t bg_te
 106:Lib/NemaGFX/include/nema_blender.h **** 
 107:Lib/NemaGFX/include/nema_blender.h **** /** \brief Set blending mode for filling
 108:Lib/NemaGFX/include/nema_blender.h ****  *
 109:Lib/NemaGFX/include/nema_blender.h ****  * \param blending_mode Blending mode to be set
 110:Lib/NemaGFX/include/nema_blender.h ****  *
 111:Lib/NemaGFX/include/nema_blender.h ****  */
 112:Lib/NemaGFX/include/nema_blender.h **** static inline void nema_set_blend_fill(uint32_t blending_mode) {
 113:Lib/NemaGFX/include/nema_blender.h ****     nema_set_blend(blending_mode, NEMA_TEX0, NEMA_NOTEX, NEMA_NOTEX);
 114:Lib/NemaGFX/include/nema_blender.h **** }
 115:Lib/NemaGFX/include/nema_blender.h **** 
 116:Lib/NemaGFX/include/nema_blender.h **** /** \brief Set blending mode for filling with composing
 117:Lib/NemaGFX/include/nema_blender.h ****  *
 118:Lib/NemaGFX/include/nema_blender.h ****  * \param blending_mode Blending mode to be set
 119:Lib/NemaGFX/include/nema_blender.h ****  *
 120:Lib/NemaGFX/include/nema_blender.h ****  */
 121:Lib/NemaGFX/include/nema_blender.h **** static inline void nema_set_blend_fill_compose(uint32_t blending_mode) {
 122:Lib/NemaGFX/include/nema_blender.h ****     nema_set_blend(blending_mode, NEMA_TEX0, NEMA_NOTEX, NEMA_TEX2);
 123:Lib/NemaGFX/include/nema_blender.h **** }
 124:Lib/NemaGFX/include/nema_blender.h **** 
ARM GAS  /tmp/ccrysqwW.s 			page 15


 125:Lib/NemaGFX/include/nema_blender.h **** /** \brief Set blending mode for blitting
 126:Lib/NemaGFX/include/nema_blender.h ****  *
 127:Lib/NemaGFX/include/nema_blender.h ****  * \param blending_mode Blending mode to be set
 128:Lib/NemaGFX/include/nema_blender.h ****  *
 129:Lib/NemaGFX/include/nema_blender.h ****  */
 130:Lib/NemaGFX/include/nema_blender.h **** static inline void nema_set_blend_blit(uint32_t blending_mode) {
 175              		.loc 3 130 64
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 8
 178              		@ frame_needed = 1, uses_anonymous_args = 0
 179 0000 80B5     		push	{r7, lr}
 180              		.cfi_def_cfa_offset 8
 181              		.cfi_offset 7, -8
 182              		.cfi_offset 14, -4
 183 0002 82B0     		sub	sp, sp, #8
 184              		.cfi_def_cfa_offset 16
 185 0004 00AF     		add	r7, sp, #0
 186              		.cfi_def_cfa_register 7
 187 0006 7860     		str	r0, [r7, #4]
 131:Lib/NemaGFX/include/nema_blender.h ****     nema_set_blend(blending_mode, NEMA_TEX0, NEMA_TEX1, NEMA_NOTEX);
 188              		.loc 3 131 5
 189 0008 4FF0FF33 		mov	r3, #-1
 190 000c 0122     		movs	r2, #1
 191 000e 0021     		movs	r1, #0
 192 0010 7868     		ldr	r0, [r7, #4]
 193 0012 FFF7FEFF 		bl	nema_set_blend
 132:Lib/NemaGFX/include/nema_blender.h **** }
 194              		.loc 3 132 1
 195 0016 00BF     		nop
 196 0018 0837     		adds	r7, r7, #8
 197              		.cfi_def_cfa_offset 8
 198 001a BD46     		mov	sp, r7
 199              		.cfi_def_cfa_register 13
 200              		@ sp needed
 201 001c 80BD     		pop	{r7, pc}
 202              		.cfi_endproc
 203              	.LFE7356:
 205              		.section	.data.lcd_bg_area,"aw"
 206              		.align	2
 209              	lcd_bg_area:
 210 0000 00000000 		.word	0
 211 0004 00000000 		.word	0
 212 0008 20030000 		.word	800
 213 000c E0010000 		.word	480
 214              		.section	.data.lcd_fg_area,"aw"
 215              		.align	2
 218              	lcd_fg_area:
 219 0000 00000000 		.word	0
 220 0004 00000000 		.word	0
 221 0008 20030000 		.word	800
 222 000c E0010000 		.word	480
 223              		.section	.psram_bss,"aw"
 224              		.align	5
 227              	lcd_bg_buffer:
 228 0000 00000000 		.space	6144000
 228      00000000 
 228      00000000 
ARM GAS  /tmp/ccrysqwW.s 			page 16


 228      00000000 
 228      00000000 
 229              		.section	.data.lcd_bg_buffer_disp_idx,"aw"
 230              		.align	2
 233              	lcd_bg_buffer_disp_idx:
 234 0000 01000000 		.word	1
 235              		.section	.bss.lcd_bg_buffer_capt_idx,"aw",%nobits
 236              		.align	2
 239              	lcd_bg_buffer_capt_idx:
 240 0000 00000000 		.space	4
 241              		.section	.psram_bss
 242              		.align	5
 245              	lcd_fg_buffer:
 246 5dc000 00000000 		.space	1536000
 246      00000000 
 246      00000000 
 246      00000000 
 246      00000000 
 247              		.section	.bss.lcd_fg_buffer_rd_idx,"aw",%nobits
 248              		.align	2
 251              	lcd_fg_buffer_rd_idx:
 252 0000 00000000 		.space	4
 253              		.section	.data.disp,"aw"
 254              		.align	2
 257              	disp:
 258 0000 00000000 		.space	168
 258      00000000 
 258      00000000 
 258      00000000 
 258      00000000 
 259 00a8 00000000 		.space	20
 259      00000000 
 259      00000000 
 259      00000000 
 259      00000000 
 260 00bc 01000000 		.word	1
 261 00c0 00000000 		.word	0
 262 00c4 00000000 		.space	3800
 262      00000000 
 262      00000000 
 262      00000000 
 262      00000000 
 263              		.section	.bss.cpu_load,"aw",%nobits
 264              		.align	3
 267              	cpu_load:
 268 0000 00000000 		.space	224
 268      00000000 
 268      00000000 
 268      00000000 
 268      00000000 
 269              		.section	.psram_bss
 270              		.align	5
 273              	screen_buffer:
 274 753000 00000000 		.space	768000
 274      00000000 
 274      00000000 
 274      00000000 
ARM GAS  /tmp/ccrysqwW.s 			page 17


 274      00000000 
 275              		.section	.rodata
 276              		.align	2
 277              	.LC4:
 278 0000 796F6C6F 		.ascii	"yolo_detector\000"
 278      5F646574 
 278      6563746F 
 278      7200
 279              		.section	.rodata.NN_Interface_yolo_detector,"a"
 280              		.align	2
 283              	NN_Interface_yolo_detector:
 284 0000 00000000 		.word	.LC4
 285 0004 00000000 		.word	LL_ATON_EC_Network_Init_yolo_detector
 286 0008 00000000 		.word	LL_ATON_EC_Inference_Init_yolo_detector
 287 000c 00000000 		.word	LL_ATON_Set_User_Input_Buffer_yolo_detector
 288 0010 00000000 		.word	LL_ATON_Get_User_Input_Buffer_yolo_detector
 289 0014 00000000 		.word	LL_ATON_Set_User_Output_Buffer_yolo_detector
 290 0018 00000000 		.word	LL_ATON_Get_User_Output_Buffer_yolo_detector
 291 001c 00000000 		.word	LL_ATON_EpochBlockItems_yolo_detector
 292 0020 00000000 		.word	LL_ATON_Output_Buffers_Info_yolo_detector
 293 0024 00000000 		.word	LL_ATON_Input_Buffers_Info_yolo_detector
 294 0028 00000000 		.word	LL_ATON_Internal_Buffers_Info_yolo_detector
 295              		.section	.data.NN_Instance_yolo_detector,"aw"
 296              		.align	2
 299              	NN_Instance_yolo_detector:
 300 0000 00000000 		.word	NN_Interface_yolo_detector
 301 0004 00000000 		.word	0
 302 0008 00000000 		.space	40
 302      00000000 
 302      00000000 
 302      00000000 
 302      00000000 
 303              		.section	.rodata
 304 000e 0000     		.align	2
 305              	.LC5:
 306 0010 66616365 		.ascii	"face_landmark\000"
 306      5F6C616E 
 306      646D6172 
 306      6B00
 307              		.section	.rodata.NN_Interface_face_landmark,"a"
 308              		.align	2
 311              	NN_Interface_face_landmark:
 312 0000 10000000 		.word	.LC5
 313 0004 00000000 		.word	LL_ATON_EC_Network_Init_face_landmark
 314 0008 00000000 		.word	LL_ATON_EC_Inference_Init_face_landmark
 315 000c 00000000 		.word	LL_ATON_Set_User_Input_Buffer_face_landmark
 316 0010 00000000 		.word	LL_ATON_Get_User_Input_Buffer_face_landmark
 317 0014 00000000 		.word	LL_ATON_Set_User_Output_Buffer_face_landmark
 318 0018 00000000 		.word	LL_ATON_Get_User_Output_Buffer_face_landmark
 319 001c 00000000 		.word	LL_ATON_EpochBlockItems_face_landmark
 320 0020 00000000 		.word	LL_ATON_Output_Buffers_Info_face_landmark
 321 0024 00000000 		.word	LL_ATON_Input_Buffers_Info_face_landmark
 322 0028 00000000 		.word	LL_ATON_Internal_Buffers_Info_face_landmark
 323              		.section	.data.NN_Instance_face_landmark,"aw"
 324              		.align	2
 327              	NN_Instance_face_landmark:
 328 0000 00000000 		.word	NN_Interface_face_landmark
ARM GAS  /tmp/ccrysqwW.s 			page 18


 329 0004 00000000 		.word	0
 330 0008 00000000 		.space	40
 330      00000000 
 330      00000000 
 330      00000000 
 330      00000000 
 331              		.section	.bss.rois,"aw",%nobits
 332              		.align	2
 335              	rois:
 336 0000 00000000 		.space	20
 336      00000000 
 336      00000000 
 336      00000000 
 336      00000000 
 337              		.section	.bss.ld_landmarks,"aw",%nobits
 338              		.align	2
 341              	ld_landmarks:
 342 0000 00000000 		.space	3744
 342      00000000 
 342      00000000 
 342      00000000 
 342      00000000 
 343              		.section	.bss.frame_event_nb,"aw",%nobits
 344              		.align	2
 347              	frame_event_nb:
 348 0000 00000000 		.space	4
 349              		.section	.bss.frame_event_nb_for_resize,"aw",%nobits
 350              		.align	2
 353              	frame_event_nb_for_resize:
 354 0000 00000000 		.space	4
 355              		.section	.psram_bss
 356              		.align	5
 359              	nn_input_buffers:
 360 80e800 00000000 		.space	614400
 360      00000000 
 360      00000000 
 360      00000000 
 360      00000000 
 361              		.section	.bss.nn_input_queue,"aw",%nobits
 362              		.align	2
 365              	nn_input_queue:
 366 0000 00000000 		.space	188
 366      00000000 
 366      00000000 
 366      00000000 
 366      00000000 
 367              		.section	.bss.nn_thread,"aw",%nobits
 368              		.align	2
 371              	nn_thread:
 372 0000 00000000 		.space	96
 372      00000000 
 372      00000000 
 372      00000000 
 372      00000000 
 373              		.section	.bss.nn_thread_stack,"aw",%nobits
 374              		.align	2
 377              	nn_thread_stack:
ARM GAS  /tmp/ccrysqwW.s 			page 19


 378 0000 00000000 		.space	16384
 378      00000000 
 378      00000000 
 378      00000000 
 378      00000000 
 379              		.section	.bss.dp_thread,"aw",%nobits
 380              		.align	2
 383              	dp_thread:
 384 0000 00000000 		.space	96
 384      00000000 
 384      00000000 
 384      00000000 
 384      00000000 
 385              		.section	.bss.dp_thread_stack,"aw",%nobits
 386              		.align	2
 389              	dp_thread_stack:
 390 0000 00000000 		.space	8192
 390      00000000 
 390      00000000 
 390      00000000 
 390      00000000 
 391              		.section	.bss.isp_thread,"aw",%nobits
 392              		.align	2
 395              	isp_thread:
 396 0000 00000000 		.space	96
 396      00000000 
 396      00000000 
 396      00000000 
 396      00000000 
 397              		.section	.bss.isp_thread_stack,"aw",%nobits
 398              		.align	2
 401              	isp_thread_stack:
 402 0000 00000000 		.space	8192
 402      00000000 
 402      00000000 
 402      00000000 
 402      00000000 
 403              		.section	.bss.isp_sem,"aw",%nobits
 404              		.align	2
 407              	isp_sem:
 408 0000 00000000 		.space	4
 409              		.section	.bss.isp_sem_buffer,"aw",%nobits
 410              		.align	2
 413              	isp_sem_buffer:
 414 0000 00000000 		.space	80
 414      00000000 
 414      00000000 
 414      00000000 
 414      00000000 
 415              		.section	.bss.hgfxmmu,"aw",%nobits
 416              		.align	2
 419              	hgfxmmu:
 420 0000 00000000 		.space	48
 420      00000000 
 420      00000000 
 420      00000000 
 420      00000000 
ARM GAS  /tmp/ccrysqwW.s 			page 20


 421              		.section	.bss.cl,"aw",%nobits
 422              		.align	2
 425              	cl:
 426 0000 00000000 		.space	60
 426      00000000 
 426      00000000 
 426      00000000 
 426      00000000 
 427              		.section	.text.is_cache_enable,"ax",%progbits
 428              		.align	1
 429              		.syntax unified
 430              		.thumb
 431              		.thumb_func
 433              	is_cache_enable:
 434              	.LFB7358:
   1:Src/app.c     **** /**
   2:Src/app.c     ****   ******************************************************************************
   3:Src/app.c     ****   * @file    app.c
   4:Src/app.c     ****   * @author  MDG Application Team
   5:Src/app.c     ****   ******************************************************************************
   6:Src/app.c     ****   * @attention
   7:Src/app.c     ****   *
   8:Src/app.c     ****   * Copyright (c) 2024 STMicroelectronics.
   9:Src/app.c     ****   * All rights reserved.
  10:Src/app.c     ****   *
  11:Src/app.c     ****   * This software is licensed under terms that can be found in the LICENSE file
  12:Src/app.c     ****   * in the root directory of this software component.
  13:Src/app.c     ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  14:Src/app.c     ****   *
  15:Src/app.c     ****   ******************************************************************************
  16:Src/app.c     ****   */
  17:Src/app.c     **** 
  18:Src/app.c     **** #include "app.h"
  19:Src/app.c     **** 
  20:Src/app.c     **** #include <stdint.h>
  21:Src/app.c     **** #include <stdio.h>
  22:Src/app.c     **** 
  23:Src/app.c     **** #include "app_cam.h"
  24:Src/app.c     **** #include "app_config.h"
  25:Src/app.c     **** #include "IPL_resize.h"
  26:Src/app.c     **** #include "app_postprocess.h"
  27:Src/app.c     **** #include "isp_api.h"
  28:Src/app.c     **** #include "ld.h"
  29:Src/app.c     **** #include "ll_aton_runtime.h"
  30:Src/app.c     **** #include "cmw_camera.h"
  31:Src/app.c     **** #include "scrl.h"
  32:Src/app.c     **** #ifdef STM32N6570_DK_REV
  33:Src/app.c     **** #include "stm32n6570_discovery.h"
  34:Src/app.c     **** #else
  35:Src/app.c     **** #include "stm32n6xx_nucleo.h"
  36:Src/app.c     **** #endif
  37:Src/app.c     **** #include "stm32_lcd.h"
  38:Src/app.c     **** #include "stm32_lcd_ex.h"
  39:Src/app.c     **** #include "stm32n6xx_hal.h"
  40:Src/app.c     **** #include "FreeRTOS.h"
  41:Src/app.c     **** #include "task.h"
  42:Src/app.c     **** #include "semphr.h"
ARM GAS  /tmp/ccrysqwW.s 			page 21


  43:Src/app.c     **** #include "utils.h"
  44:Src/app.c     **** 
  45:Src/app.c     **** #define FREERTOS_PRIORITY(p) ((UBaseType_t)((int)tskIDLE_PRIORITY + configMAX_PRIORITIES / 2 + (p))
  46:Src/app.c     **** 
  47:Src/app.c     **** #ifndef M_PI
  48:Src/app.c     **** #define M_PI 3.14159265358979323846
  49:Src/app.c     **** #endif
  50:Src/app.c     **** 
  51:Src/app.c     **** #if HAS_ROTATION_SUPPORT == 1
  52:Src/app.c     **** #include "nema_core.h"
  53:Src/app.c     **** #include "nema_error.h"
  54:Src/app.c     **** void nema_enable_tiling(int);
  55:Src/app.c     **** #endif
  56:Src/app.c     **** 
  57:Src/app.c     **** #define LCD_FG_WIDTH LCD_BG_WIDTH
  58:Src/app.c     **** #define LCD_FG_HEIGHT LCD_BG_HEIGHT
  59:Src/app.c     **** 
  60:Src/app.c     **** #define CACHE_OP(__op__) do { \
  61:Src/app.c     ****   if (is_cache_enable()) { \
  62:Src/app.c     ****     __op__; \
  63:Src/app.c     ****   } \
  64:Src/app.c     **** } while (0)
  65:Src/app.c     **** 
  66:Src/app.c     **** #define DBG_INFO 0
  67:Src/app.c     **** #define USE_FILTERED_TS 1
  68:Src/app.c     **** 
  69:Src/app.c     **** #define BQUEUE_MAX_BUFFERS 2
  70:Src/app.c     **** #define CPU_LOAD_HISTORY_DEPTH 8
  71:Src/app.c     **** 
  72:Src/app.c     **** #define DISPLAY_BUFFER_NB (DISPLAY_DELAY + 2)
  73:Src/app.c     **** 
  74:Src/app.c     **** /* palm detector */
  75:Src/app.c     **** #define PD_MAX_HAND_NB 1
  76:Src/app.c     **** 
  77:Src/app.c     **** #if HAS_ROTATION_SUPPORT == 1
  78:Src/app.c     **** typedef float app_v3_t[3];
  79:Src/app.c     **** #endif
  80:Src/app.c     **** 
  81:Src/app.c     **** typedef struct {
  82:Src/app.c     ****   float cx;
  83:Src/app.c     ****   float cy;
  84:Src/app.c     ****   float w;
  85:Src/app.c     ****   float h;
  86:Src/app.c     ****   float rotation;
  87:Src/app.c     **** } roi_t;
  88:Src/app.c     **** 
  89:Src/app.c     **** #define UTIL_LCD_COLOR_TRANSPARENT 0
  90:Src/app.c     **** 
  91:Src/app.c     **** #ifdef STM32N6570_DK_REV
  92:Src/app.c     **** #define LCD_FONT Font20
  93:Src/app.c     **** #define DISK_RADIUS 2
  94:Src/app.c     **** #else
  95:Src/app.c     **** #define LCD_FONT Font12
  96:Src/app.c     **** #define DISK_RADIUS 1
  97:Src/app.c     **** #endif
  98:Src/app.c     **** 
  99:Src/app.c     **** typedef struct
ARM GAS  /tmp/ccrysqwW.s 			page 22


 100:Src/app.c     **** {
 101:Src/app.c     ****   uint32_t X0;
 102:Src/app.c     ****   uint32_t Y0;
 103:Src/app.c     ****   uint32_t XSize;
 104:Src/app.c     ****   uint32_t YSize;
 105:Src/app.c     **** } Rectangle_TypeDef;
 106:Src/app.c     **** 
 107:Src/app.c     **** typedef struct {
 108:Src/app.c     ****   SemaphoreHandle_t free;
 109:Src/app.c     ****   StaticSemaphore_t free_buffer;
 110:Src/app.c     ****   SemaphoreHandle_t ready;
 111:Src/app.c     ****   StaticSemaphore_t ready_buffer;
 112:Src/app.c     ****   int buffer_nb;
 113:Src/app.c     ****   uint8_t *buffers[BQUEUE_MAX_BUFFERS];
 114:Src/app.c     ****   int free_idx;
 115:Src/app.c     ****   int ready_idx;
 116:Src/app.c     **** } bqueue_t;
 117:Src/app.c     **** 
 118:Src/app.c     **** typedef struct {
 119:Src/app.c     ****   uint64_t current_total;
 120:Src/app.c     ****   uint64_t current_thread_total;
 121:Src/app.c     ****   uint64_t prev_total;
 122:Src/app.c     ****   uint64_t prev_thread_total;
 123:Src/app.c     ****   struct {
 124:Src/app.c     ****     uint64_t total;
 125:Src/app.c     ****     uint64_t thread;
 126:Src/app.c     ****     uint32_t tick;
 127:Src/app.c     ****   } history[CPU_LOAD_HISTORY_DEPTH];
 128:Src/app.c     **** } cpuload_info_t;
 129:Src/app.c     **** 
 130:Src/app.c     **** typedef struct {
 131:Src/app.c     ****   int is_valid;
 132:Src/app.c     ****   pd_pp_box_t pd_hands;
 133:Src/app.c     ****   roi_t roi;
 134:Src/app.c     ****   ld_point_t ld_landmarks[LD_LANDMARK_NB];
 135:Src/app.c     **** } hand_info_t;
 136:Src/app.c     **** 
 137:Src/app.c     **** typedef struct {
 138:Src/app.c     ****   float nn_period_ms;
 139:Src/app.c     ****   uint32_t pd_ms;
 140:Src/app.c     ****   uint32_t hl_ms;
 141:Src/app.c     ****   uint32_t pp_ms;
 142:Src/app.c     ****   uint32_t disp_ms;
 143:Src/app.c     ****   int is_ld_displayed;
 144:Src/app.c     ****   int is_pd_displayed;
 145:Src/app.c     ****   int pd_hand_nb;
 146:Src/app.c     ****   float pd_max_prob;
 147:Src/app.c     ****   hand_info_t hands[PD_MAX_HAND_NB];
 148:Src/app.c     **** } display_info_t;
 149:Src/app.c     **** 
 150:Src/app.c     **** typedef struct {
 151:Src/app.c     ****   SemaphoreHandle_t update;
 152:Src/app.c     ****   StaticSemaphore_t update_buffer;
 153:Src/app.c     ****   SemaphoreHandle_t lock;
 154:Src/app.c     ****   StaticSemaphore_t lock_buffer;
 155:Src/app.c     ****   display_info_t info;
 156:Src/app.c     **** } display_t;
ARM GAS  /tmp/ccrysqwW.s 			page 23


 157:Src/app.c     **** 
 158:Src/app.c     **** typedef struct {
 159:Src/app.c     ****   uint32_t nn_in_len;
 160:Src/app.c     ****   float *prob_out;
 161:Src/app.c     ****   uint32_t prob_out_len;
 162:Src/app.c     ****   float *boxes_out;
 163:Src/app.c     ****   uint32_t boxes_out_len;
 164:Src/app.c     ****   pd_model_pp_static_param_t static_param;
 165:Src/app.c     ****   pd_pp_out_t pd_out;
 166:Src/app.c     **** } pd_model_info_t;
 167:Src/app.c     **** 
 168:Src/app.c     **** /**
 169:Src/app.c     ****  * @brief  YOLO detector model context struct
 170:Src/app.c     ****  */
 171:Src/app.c     **** typedef struct {
 172:Src/app.c     ****   // Input buffer info
 173:Src/app.c     ****   uint32_t nn_in_len;
 174:Src/app.c     **** 
 175:Src/app.c     ****   // Raw output buffer info from the model
 176:Src/app.c     ****   float *raw_detections_out;
 177:Src/app.c     ****   uint32_t raw_detections_out_len;
 178:Src/app.c     **** 
 179:Src/app.c     ****   // Post-processing parameters and final output
 180:Src/app.c     ****   od_yolov8_pp_static_param_t static_param;
 181:Src/app.c     ****   od_pp_out_t yolo_out; 
 182:Src/app.c     **** } yolo_detector_info_t;
 183:Src/app.c     **** 
 184:Src/app.c     **** typedef struct {
 185:Src/app.c     ****   uint8_t *nn_in;
 186:Src/app.c     ****   uint32_t nn_in_len;
 187:Src/app.c     ****   float *prob_out;
 188:Src/app.c     ****   uint32_t prob_out_len;
 189:Src/app.c     ****   float *landmarks_out;
 190:Src/app.c     ****   uint32_t landmarks_out_len;
 191:Src/app.c     **** } hl_model_info_t;
 192:Src/app.c     **** 
 193:Src/app.c     **** typedef struct {
 194:Src/app.c     ****   uint8_t *nn_in;
 195:Src/app.c     ****   uint32_t nn_in_len;
 196:Src/app.c     ****   float *prob_out;
 197:Src/app.c     ****   uint32_t prob_out_len;
 198:Src/app.c     ****   int8_t *landmarks_out; // CHANGE THIS from float* to int8_t*
 199:Src/app.c     ****   size_t landmarks_out_len;
 200:Src/app.c     **** } fl_model_info_t;
 201:Src/app.c     **** 
 202:Src/app.c     **** typedef struct {
 203:Src/app.c     ****   Button_TypeDef button_id;
 204:Src/app.c     ****   int prev_state;
 205:Src/app.c     ****   void (*on_click_handler)(void *cb_args);
 206:Src/app.c     ****   void *cb_args;
 207:Src/app.c     **** } button_t;
 208:Src/app.c     **** 
 209:Src/app.c     **** /* Globals */
 210:Src/app.c     **** /* Lcd Background area */
 211:Src/app.c     **** static Rectangle_TypeDef lcd_bg_area = {
 212:Src/app.c     ****   .X0 = 0,
 213:Src/app.c     ****   .Y0 = 0,
ARM GAS  /tmp/ccrysqwW.s 			page 24


 214:Src/app.c     ****   .XSize = LCD_BG_WIDTH,
 215:Src/app.c     ****   .YSize = LCD_BG_HEIGHT,
 216:Src/app.c     **** };
 217:Src/app.c     **** /* Lcd Foreground area */
 218:Src/app.c     **** static Rectangle_TypeDef lcd_fg_area = {
 219:Src/app.c     ****   .X0 = 0,
 220:Src/app.c     ****   .Y0 = 0,
 221:Src/app.c     ****   .XSize = LCD_FG_WIDTH,
 222:Src/app.c     ****   .YSize = LCD_FG_HEIGHT,
 223:Src/app.c     **** };
 224:Src/app.c     **** /* Lcd Background Buffer */
 225:Src/app.c     **** static uint8_t lcd_bg_buffer[DISPLAY_BUFFER_NB][LCD_BG_WIDTH * LCD_BG_HEIGHT * DISPLAY_BPP] ALIGN_3
 226:Src/app.c     **** static int lcd_bg_buffer_disp_idx = 1;
 227:Src/app.c     **** static int lcd_bg_buffer_capt_idx = 0;
 228:Src/app.c     **** /* Lcd Foreground Buffer */
 229:Src/app.c     **** static uint8_t lcd_fg_buffer[2][LCD_FG_WIDTH * LCD_FG_HEIGHT* 2] ALIGN_32 IN_PSRAM;
 230:Src/app.c     **** static int lcd_fg_buffer_rd_idx;
 231:Src/app.c     **** static display_t disp = {
 232:Src/app.c     ****   .info.is_ld_displayed = 1,
 233:Src/app.c     ****   .info.is_pd_displayed = 0,
 234:Src/app.c     **** };
 235:Src/app.c     **** static cpuload_info_t cpu_load;
 236:Src/app.c     **** /* screen buffer */
 237:Src/app.c     **** static uint8_t screen_buffer[LCD_BG_WIDTH * LCD_BG_HEIGHT * 2] ALIGN_32 IN_PSRAM;
 238:Src/app.c     **** 
 239:Src/app.c     **** /* model */
 240:Src/app.c     **** LL_ATON_DECLARE_NAMED_NN_INSTANCE_AND_INTERFACE(yolo_detector);
 241:Src/app.c     **** LL_ATON_DECLARE_NAMED_NN_INSTANCE_AND_INTERFACE(face_landmark);
 242:Src/app.c     **** static roi_t rois[PD_MAX_HAND_NB];
 243:Src/app.c     ****  /* hand landmark */
 244:Src/app.c     **** //LL_ATON_DECLARE_NAMED_NN_INSTANCE_AND_INTERFACE(hand_landmark);
 245:Src/app.c     **** static ld_point_t ld_landmarks[PD_MAX_HAND_NB][LD_LANDMARK_NB];
 246:Src/app.c     **** static uint32_t frame_event_nb;
 247:Src/app.c     **** static volatile uint32_t frame_event_nb_for_resize;
 248:Src/app.c     **** 
 249:Src/app.c     ****  /* nn input buffers */
 250:Src/app.c     **** static uint8_t nn_input_buffers[2][NN_WIDTH * NN_HEIGHT * NN_BPP] ALIGN_32 IN_PSRAM;
 251:Src/app.c     **** static bqueue_t nn_input_queue;
 252:Src/app.c     **** 
 253:Src/app.c     ****  /* rtos */
 254:Src/app.c     **** static StaticTask_t nn_thread;
 255:Src/app.c     **** static StackType_t nn_thread_stack[4 * configMINIMAL_STACK_SIZE];
 256:Src/app.c     **** static StaticTask_t dp_thread;
 257:Src/app.c     **** static StackType_t dp_thread_stack[2 *configMINIMAL_STACK_SIZE];
 258:Src/app.c     **** static StaticTask_t isp_thread;
 259:Src/app.c     **** static StackType_t isp_thread_stack[2 *configMINIMAL_STACK_SIZE];
 260:Src/app.c     **** static SemaphoreHandle_t isp_sem;
 261:Src/app.c     **** static StaticSemaphore_t isp_sem_buffer;
 262:Src/app.c     **** 
 263:Src/app.c     **** #if HAS_ROTATION_SUPPORT == 1
 264:Src/app.c     **** static GFXMMU_HandleTypeDef hgfxmmu;
 265:Src/app.c     **** static nema_cmdlist_t cl;
 266:Src/app.c     **** #endif
 267:Src/app.c     **** 
 268:Src/app.c     **** static int is_cache_enable()
 269:Src/app.c     **** {
 435              		.loc 1 269 1
ARM GAS  /tmp/ccrysqwW.s 			page 25


 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 0
 438              		@ frame_needed = 1, uses_anonymous_args = 0
 439              		@ link register save eliminated.
 440 0000 80B4     		push	{r7}
 441              		.cfi_def_cfa_offset 4
 442              		.cfi_offset 7, -4
 443 0002 00AF     		add	r7, sp, #0
 444              		.cfi_def_cfa_register 7
 270:Src/app.c     **** #if defined(USE_DCACHE)
 271:Src/app.c     ****   return 1;
 445              		.loc 1 271 10
 446 0004 0123     		movs	r3, #1
 272:Src/app.c     **** #else
 273:Src/app.c     ****   return 0;
 274:Src/app.c     **** #endif
 275:Src/app.c     **** }
 447              		.loc 1 275 1
 448 0006 1846     		mov	r0, r3
 449 0008 BD46     		mov	sp, r7
 450              		.cfi_def_cfa_register 13
 451              		@ sp needed
 452 000a 5DF8047B 		ldr	r7, [sp], #4
 453              		.cfi_restore 7
 454              		.cfi_def_cfa_offset 0
 455 000e 7047     		bx	lr
 456              		.cfi_endproc
 457              	.LFE7358:
 459              		.section	.text.pd_normalize_angle,"ax",%progbits
 460              		.align	1
 461              		.syntax unified
 462              		.thumb
 463              		.thumb_func
 465              	pd_normalize_angle:
 466              	.LFB7359:
 276:Src/app.c     **** 
 277:Src/app.c     **** static float pd_normalize_angle(float angle)
 278:Src/app.c     **** {
 467              		.loc 1 278 1
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 8
 470              		@ frame_needed = 1, uses_anonymous_args = 0
 471 0000 80B5     		push	{r7, lr}
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 7, -8
 474              		.cfi_offset 14, -4
 475 0002 2DED028B 		vpush.64	{d8}
 476              		.cfi_def_cfa_offset 16
 477              		.cfi_offset 80, -16
 478              		.cfi_offset 81, -12
 479 0006 82B0     		sub	sp, sp, #8
 480              		.cfi_def_cfa_offset 24
 481 0008 00AF     		add	r7, sp, #0
 482              		.cfi_def_cfa_register 7
 483 000a 87ED010A 		vstr.32	s0, [r7, #4]
 279:Src/app.c     ****   return angle - 2 * M_PI * floorf((angle - (-M_PI)) / (2 * M_PI));
 484              		.loc 1 279 16
ARM GAS  /tmp/ccrysqwW.s 			page 26


 485 000e D7ED017A 		vldr.32	s15, [r7, #4]
 486 0012 B7EEE78A 		vcvt.f64.f32	d8, s15
 487              		.loc 1 279 43
 488 0016 D7ED017A 		vldr.32	s15, [r7, #4]
 489 001a B7EEE77A 		vcvt.f64.f32	d7, s15
 490 001e 9FED106B 		vldr.64	d6, .L13
 491 0022 37EE066B 		vadd.f64	d6, d7, d6
 492              		.loc 1 279 54
 493 0026 9FED105B 		vldr.64	d5, .L13+8
 494 002a 86EE057B 		vdiv.f64	d7, d6, d5
 495              		.loc 1 279 29
 496 002e F7EEC77B 		vcvt.f32.f64	s15, d7
 497 0032 B0EE670A 		vmov.f32	s0, s15
 498 0036 FFF7FEFF 		bl	floorf
 499 003a F0EE407A 		vmov.f32	s15, s0
 500              		.loc 1 279 29 is_stmt 0 discriminator 1
 501 003e B7EEE77A 		vcvt.f64.f32	d7, s15
 502              		.loc 1 279 27 is_stmt 1 discriminator 1
 503 0042 9FED096B 		vldr.64	d6, .L13+8
 504 0046 27EE067B 		vmul.f64	d7, d7, d6
 505              		.loc 1 279 16 discriminator 1
 506 004a 38EE477B 		vsub.f64	d7, d8, d7
 507 004e F7EEC77B 		vcvt.f32.f64	s15, d7
 280:Src/app.c     **** }
 508              		.loc 1 280 1
 509 0052 B0EE670A 		vmov.f32	s0, s15
 510 0056 0837     		adds	r7, r7, #8
 511              		.cfi_def_cfa_offset 16
 512 0058 BD46     		mov	sp, r7
 513              		.cfi_def_cfa_register 13
 514              		@ sp needed
 515 005a BDEC028B 		vldm	sp!, {d8}
 516              		.cfi_restore 80
 517              		.cfi_restore 81
 518              		.cfi_def_cfa_offset 8
 519 005e 80BD     		pop	{r7, pc}
 520              	.L14:
 521              		.align	3
 522              	.L13:
 523 0060 182D4454 		.word	1413754136
 524 0064 FB210940 		.word	1074340347
 525 0068 182D4454 		.word	1413754136
 526 006c FB211940 		.word	1075388923
 527              		.cfi_endproc
 528              	.LFE7359:
 530              		.section	.text.pd_cook_rotation,"ax",%progbits
 531              		.align	1
 532              		.syntax unified
 533              		.thumb
 534              		.thumb_func
 536              	pd_cook_rotation:
 537              	.LFB7360:
 281:Src/app.c     **** 
 282:Src/app.c     **** /* Without rotation support allow limited amount of angles */
 283:Src/app.c     **** #if HAS_ROTATION_SUPPORT == 0
 284:Src/app.c     **** static float pd_cook_rotation(float angle)
 285:Src/app.c     **** {
ARM GAS  /tmp/ccrysqwW.s 			page 27


 286:Src/app.c     ****   if (angle >= (3 * M_PI) / 4)
 287:Src/app.c     ****     angle = M_PI;
 288:Src/app.c     ****   else if (angle >= (1 * M_PI) / 4)
 289:Src/app.c     ****     angle = M_PI / 2;
 290:Src/app.c     ****   else if (angle >= -(1 * M_PI) / 4)
 291:Src/app.c     ****     angle = 0;
 292:Src/app.c     ****   else if (angle >= -(3 * M_PI) / 4)
 293:Src/app.c     ****     angle = -M_PI / 2;
 294:Src/app.c     ****   else
 295:Src/app.c     ****     angle = -M_PI;
 296:Src/app.c     **** 
 297:Src/app.c     ****   return angle;
 298:Src/app.c     **** }
 299:Src/app.c     **** #else
 300:Src/app.c     **** static float pd_cook_rotation(float angle)
 301:Src/app.c     **** {
 538              		.loc 1 301 1
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 8
 541              		@ frame_needed = 1, uses_anonymous_args = 0
 542              		@ link register save eliminated.
 543 0000 80B4     		push	{r7}
 544              		.cfi_def_cfa_offset 4
 545              		.cfi_offset 7, -4
 546 0002 83B0     		sub	sp, sp, #12
 547              		.cfi_def_cfa_offset 16
 548 0004 00AF     		add	r7, sp, #0
 549              		.cfi_def_cfa_register 7
 550 0006 87ED010A 		vstr.32	s0, [r7, #4]
 302:Src/app.c     ****   return angle;
 551              		.loc 1 302 10
 552 000a 7B68     		ldr	r3, [r7, #4]	@ float
 553              		.loc 1 302 10 is_stmt 0 discriminator 1
 554 000c 07EE903A 		vmov	s15, r3
 303:Src/app.c     **** }
 555              		.loc 1 303 1 is_stmt 1
 556 0010 B0EE670A 		vmov.f32	s0, s15
 557 0014 0C37     		adds	r7, r7, #12
 558              		.cfi_def_cfa_offset 4
 559 0016 BD46     		mov	sp, r7
 560              		.cfi_def_cfa_register 13
 561              		@ sp needed
 562 0018 5DF8047B 		ldr	r7, [sp], #4
 563              		.cfi_restore 7
 564              		.cfi_def_cfa_offset 0
 565 001c 7047     		bx	lr
 566              		.cfi_endproc
 567              	.LFE7360:
 569              		.section	.text.pd_compute_rotation,"ax",%progbits
 570              		.align	1
 571              		.syntax unified
 572              		.thumb
 573              		.thumb_func
 575              	pd_compute_rotation:
 576              	.LFB7361:
 304:Src/app.c     **** #endif
 305:Src/app.c     **** 
ARM GAS  /tmp/ccrysqwW.s 			page 28


 306:Src/app.c     **** static float pd_compute_rotation(pd_pp_box_t *box)
 307:Src/app.c     **** {
 577              		.loc 1 307 1
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 32
 580              		@ frame_needed = 1, uses_anonymous_args = 0
 581 0000 80B5     		push	{r7, lr}
 582              		.cfi_def_cfa_offset 8
 583              		.cfi_offset 7, -8
 584              		.cfi_offset 14, -4
 585 0002 88B0     		sub	sp, sp, #32
 586              		.cfi_def_cfa_offset 40
 587 0004 00AF     		add	r7, sp, #0
 588              		.cfi_def_cfa_register 7
 589 0006 7860     		str	r0, [r7, #4]
 308:Src/app.c     ****   float x0, y0, x1, y1;
 309:Src/app.c     ****   float rotation;
 310:Src/app.c     **** 
 311:Src/app.c     ****   x0 = box->pKps[0].x;
 590              		.loc 1 311 11
 591 0008 7B68     		ldr	r3, [r7, #4]
 592 000a 5B69     		ldr	r3, [r3, #20]
 593              		.loc 1 311 6
 594 000c 1B68     		ldr	r3, [r3]	@ float
 595 000e FB61     		str	r3, [r7, #28]	@ float
 312:Src/app.c     ****   y0 = box->pKps[0].y;
 596              		.loc 1 312 11
 597 0010 7B68     		ldr	r3, [r7, #4]
 598 0012 5B69     		ldr	r3, [r3, #20]
 599              		.loc 1 312 6
 600 0014 5B68     		ldr	r3, [r3, #4]	@ float
 601 0016 BB61     		str	r3, [r7, #24]	@ float
 313:Src/app.c     ****   x1 = box->pKps[2].x;
 602              		.loc 1 313 11
 603 0018 7B68     		ldr	r3, [r7, #4]
 604 001a 5B69     		ldr	r3, [r3, #20]
 605              		.loc 1 313 17
 606 001c 1033     		adds	r3, r3, #16
 607              		.loc 1 313 6
 608 001e 1B68     		ldr	r3, [r3]	@ float
 609 0020 7B61     		str	r3, [r7, #20]	@ float
 314:Src/app.c     ****   y1 = box->pKps[2].y;
 610              		.loc 1 314 11
 611 0022 7B68     		ldr	r3, [r7, #4]
 612 0024 5B69     		ldr	r3, [r3, #20]
 613              		.loc 1 314 17
 614 0026 1033     		adds	r3, r3, #16
 615              		.loc 1 314 6
 616 0028 5B68     		ldr	r3, [r3, #4]	@ float
 617 002a 3B61     		str	r3, [r7, #16]	@ float
 315:Src/app.c     **** 
 316:Src/app.c     ****   rotation = M_PI * 0.5 - atan2f(-(y1 - y0), x1 - x0);
 618              		.loc 1 316 39
 619 002c 97ED047A 		vldr.32	s14, [r7, #16]
 620 0030 D7ED067A 		vldr.32	s15, [r7, #24]
 621 0034 77EE677A 		vsub.f32	s15, s14, s15
 622              		.loc 1 316 27
ARM GAS  /tmp/ccrysqwW.s 			page 29


 623 0038 F1EE676A 		vneg.f32	s13, s15
 624 003c 97ED057A 		vldr.32	s14, [r7, #20]
 625 0040 D7ED077A 		vldr.32	s15, [r7, #28]
 626 0044 77EE677A 		vsub.f32	s15, s14, s15
 627 0048 F0EE670A 		vmov.f32	s1, s15
 628 004c B0EE660A 		vmov.f32	s0, s13
 629 0050 FFF7FEFF 		bl	atan2f
 630 0054 F0EE407A 		vmov.f32	s15, s0
 631              		.loc 1 316 27 is_stmt 0 discriminator 1
 632 0058 B7EEE77A 		vcvt.f64.f32	d7, s15
 633              		.loc 1 316 25 is_stmt 1 discriminator 1
 634 005c 9FED0C6B 		vldr.64	d6, .L19
 635 0060 36EE477B 		vsub.f64	d7, d6, d7
 636              		.loc 1 316 12 discriminator 1
 637 0064 F7EEC77B 		vcvt.f32.f64	s15, d7
 638 0068 C7ED037A 		vstr.32	s15, [r7, #12]
 317:Src/app.c     **** 
 318:Src/app.c     ****   return pd_cook_rotation(pd_normalize_angle(rotation));
 639              		.loc 1 318 10
 640 006c 97ED030A 		vldr.32	s0, [r7, #12]
 641 0070 FFF7FEFF 		bl	pd_normalize_angle
 642 0074 F0EE407A 		vmov.f32	s15, s0
 643              		.loc 1 318 10 is_stmt 0 discriminator 1
 644 0078 B0EE670A 		vmov.f32	s0, s15
 645 007c FFF7FEFF 		bl	pd_cook_rotation
 646 0080 F0EE407A 		vmov.f32	s15, s0
 319:Src/app.c     **** }
 647              		.loc 1 319 1 is_stmt 1
 648 0084 B0EE670A 		vmov.f32	s0, s15
 649 0088 2037     		adds	r7, r7, #32
 650              		.cfi_def_cfa_offset 8
 651 008a BD46     		mov	sp, r7
 652              		.cfi_def_cfa_register 13
 653              		@ sp needed
 654 008c 80BD     		pop	{r7, pc}
 655              	.L20:
 656 008e 00BF     		.align	3
 657              	.L19:
 658 0090 182D4454 		.word	1413754136
 659 0094 FB21F93F 		.word	1073291771
 660              		.cfi_endproc
 661              	.LFE7361:
 663              		.section	.text.cvt_pd_coord_to_screen_coord,"ax",%progbits
 664              		.align	1
 665              		.syntax unified
 666              		.thumb
 667              		.thumb_func
 669              	cvt_pd_coord_to_screen_coord:
 670              	.LFB7362:
 320:Src/app.c     **** 
 321:Src/app.c     **** static void cvt_pd_coord_to_screen_coord(pd_pp_box_t *box)
 322:Src/app.c     **** {
 671              		.loc 1 322 1
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 16
 674              		@ frame_needed = 1, uses_anonymous_args = 0
 675              		@ link register save eliminated.
ARM GAS  /tmp/ccrysqwW.s 			page 30


 676 0000 80B4     		push	{r7}
 677              		.cfi_def_cfa_offset 4
 678              		.cfi_offset 7, -4
 679 0002 85B0     		sub	sp, sp, #20
 680              		.cfi_def_cfa_offset 24
 681 0004 00AF     		add	r7, sp, #0
 682              		.cfi_def_cfa_register 7
 683 0006 7860     		str	r0, [r7, #4]
 323:Src/app.c     ****   int i;
 324:Src/app.c     **** 
 325:Src/app.c     ****   /* This is not a typo. Since screen aspect ratio was conserved. We really want to use LCD_BG_WIDT
 326:Src/app.c     ****    * y positions.
 327:Src/app.c     ****    */
 328:Src/app.c     **** 
 329:Src/app.c     ****   box->x_center *= LCD_BG_WIDTH;
 684              		.loc 1 329 6
 685 0008 7B68     		ldr	r3, [r7, #4]
 686 000a D3ED017A 		vldr.32	s15, [r3, #4]
 687              		.loc 1 329 17
 688 000e 9FED2C7A 		vldr.32	s14, .L24
 689 0012 67EE877A 		vmul.f32	s15, s15, s14
 690 0016 7B68     		ldr	r3, [r7, #4]
 691 0018 C3ED017A 		vstr.32	s15, [r3, #4]
 330:Src/app.c     ****   box->y_center *= LCD_BG_WIDTH;
 692              		.loc 1 330 6
 693 001c 7B68     		ldr	r3, [r7, #4]
 694 001e D3ED027A 		vldr.32	s15, [r3, #8]
 695              		.loc 1 330 17
 696 0022 9FED277A 		vldr.32	s14, .L24
 697 0026 67EE877A 		vmul.f32	s15, s15, s14
 698 002a 7B68     		ldr	r3, [r7, #4]
 699 002c C3ED027A 		vstr.32	s15, [r3, #8]
 331:Src/app.c     ****   box->width *= LCD_BG_WIDTH;
 700              		.loc 1 331 6
 701 0030 7B68     		ldr	r3, [r7, #4]
 702 0032 D3ED037A 		vldr.32	s15, [r3, #12]
 703              		.loc 1 331 14
 704 0036 9FED227A 		vldr.32	s14, .L24
 705 003a 67EE877A 		vmul.f32	s15, s15, s14
 706 003e 7B68     		ldr	r3, [r7, #4]
 707 0040 C3ED037A 		vstr.32	s15, [r3, #12]
 332:Src/app.c     ****   box->height *= LCD_BG_WIDTH;
 708              		.loc 1 332 6
 709 0044 7B68     		ldr	r3, [r7, #4]
 710 0046 D3ED047A 		vldr.32	s15, [r3, #16]
 711              		.loc 1 332 15
 712 004a 9FED1D7A 		vldr.32	s14, .L24
 713 004e 67EE877A 		vmul.f32	s15, s15, s14
 714 0052 7B68     		ldr	r3, [r7, #4]
 715 0054 C3ED047A 		vstr.32	s15, [r3, #16]
 333:Src/app.c     ****   for (i = 0; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++) {
 716              		.loc 1 333 10
 717 0058 0023     		movs	r3, #0
 718 005a FB60     		str	r3, [r7, #12]
 719              		.loc 1 333 3
 720 005c 26E0     		b	.L22
 721              	.L23:
ARM GAS  /tmp/ccrysqwW.s 			page 31


 334:Src/app.c     ****     box->pKps[i].x *= LCD_BG_WIDTH;
 722              		.loc 1 334 8
 723 005e 7B68     		ldr	r3, [r7, #4]
 724 0060 5A69     		ldr	r2, [r3, #20]
 725              		.loc 1 334 14
 726 0062 FB68     		ldr	r3, [r7, #12]
 727 0064 DB00     		lsls	r3, r3, #3
 728 0066 1344     		add	r3, r3, r2
 729              		.loc 1 334 17
 730 0068 D3ED007A 		vldr.32	s15, [r3]
 731              		.loc 1 334 8
 732 006c 7B68     		ldr	r3, [r7, #4]
 733 006e 5A69     		ldr	r2, [r3, #20]
 734              		.loc 1 334 14
 735 0070 FB68     		ldr	r3, [r7, #12]
 736 0072 DB00     		lsls	r3, r3, #3
 737 0074 1344     		add	r3, r3, r2
 738              		.loc 1 334 20
 739 0076 9FED127A 		vldr.32	s14, .L24
 740 007a 67EE877A 		vmul.f32	s15, s15, s14
 741 007e C3ED007A 		vstr.32	s15, [r3]
 335:Src/app.c     ****     box->pKps[i].y *= LCD_BG_WIDTH;
 742              		.loc 1 335 8
 743 0082 7B68     		ldr	r3, [r7, #4]
 744 0084 5A69     		ldr	r2, [r3, #20]
 745              		.loc 1 335 14
 746 0086 FB68     		ldr	r3, [r7, #12]
 747 0088 DB00     		lsls	r3, r3, #3
 748 008a 1344     		add	r3, r3, r2
 749              		.loc 1 335 17
 750 008c D3ED017A 		vldr.32	s15, [r3, #4]
 751              		.loc 1 335 8
 752 0090 7B68     		ldr	r3, [r7, #4]
 753 0092 5A69     		ldr	r2, [r3, #20]
 754              		.loc 1 335 14
 755 0094 FB68     		ldr	r3, [r7, #12]
 756 0096 DB00     		lsls	r3, r3, #3
 757 0098 1344     		add	r3, r3, r2
 758              		.loc 1 335 20
 759 009a 9FED097A 		vldr.32	s14, .L24
 760 009e 67EE877A 		vmul.f32	s15, s15, s14
 761 00a2 C3ED017A 		vstr.32	s15, [r3, #4]
 333:Src/app.c     ****   for (i = 0; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++) {
 762              		.loc 1 333 49 discriminator 3
 763 00a6 FB68     		ldr	r3, [r7, #12]
 764 00a8 0133     		adds	r3, r3, #1
 765 00aa FB60     		str	r3, [r7, #12]
 766              	.L22:
 333:Src/app.c     ****   for (i = 0; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++) {
 767              		.loc 1 333 17 discriminator 1
 768 00ac FB68     		ldr	r3, [r7, #12]
 769 00ae 062B     		cmp	r3, #6
 770 00b0 D5DD     		ble	.L23
 336:Src/app.c     ****   }
 337:Src/app.c     **** }
 771              		.loc 1 337 1
 772 00b2 00BF     		nop
ARM GAS  /tmp/ccrysqwW.s 			page 32


 773 00b4 00BF     		nop
 774 00b6 1437     		adds	r7, r7, #20
 775              		.cfi_def_cfa_offset 4
 776 00b8 BD46     		mov	sp, r7
 777              		.cfi_def_cfa_register 13
 778              		@ sp needed
 779 00ba 5DF8047B 		ldr	r7, [sp], #4
 780              		.cfi_restore 7
 781              		.cfi_def_cfa_offset 0
 782 00be 7047     		bx	lr
 783              	.L25:
 784              		.align	2
 785              	.L24:
 786 00c0 00004844 		.word	1145569280
 787              		.cfi_endproc
 788              	.LFE7362:
 790              		.section	.text.roi_shift_and_scale,"ax",%progbits
 791              		.align	1
 792              		.syntax unified
 793              		.thumb
 794              		.thumb_func
 796              	roi_shift_and_scale:
 797              	.LFB7363:
 338:Src/app.c     **** 
 339:Src/app.c     **** static void roi_shift_and_scale(roi_t *roi, float shift_x, float shift_y, float scale_x, float scal
 340:Src/app.c     **** {
 798              		.loc 1 340 1
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 40
 801              		@ frame_needed = 1, uses_anonymous_args = 0
 802 0000 80B5     		push	{r7, lr}
 803              		.cfi_def_cfa_offset 8
 804              		.cfi_offset 7, -8
 805              		.cfi_offset 14, -4
 806 0002 2DED048B 		vpush.64	{d8, d9}
 807              		.cfi_def_cfa_offset 24
 808              		.cfi_offset 80, -24
 809              		.cfi_offset 81, -20
 810              		.cfi_offset 82, -16
 811              		.cfi_offset 83, -12
 812 0006 8AB0     		sub	sp, sp, #40
 813              		.cfi_def_cfa_offset 64
 814 0008 00AF     		add	r7, sp, #0
 815              		.cfi_def_cfa_register 7
 816 000a 7861     		str	r0, [r7, #20]
 817 000c 87ED040A 		vstr.32	s0, [r7, #16]
 818 0010 C7ED030A 		vstr.32	s1, [r7, #12]
 819 0014 87ED021A 		vstr.32	s2, [r7, #8]
 820 0018 C7ED011A 		vstr.32	s3, [r7, #4]
 341:Src/app.c     ****   float long_side;
 342:Src/app.c     ****   float sx, sy;
 343:Src/app.c     **** 
 344:Src/app.c     ****   sx = (roi->w * shift_x * cos(roi->rotation) - roi->h * shift_y * sin(roi->rotation));
 821              		.loc 1 344 12
 822 001c 7B69     		ldr	r3, [r7, #20]
 823 001e 93ED027A 		vldr.32	s14, [r3, #8]
 824              		.loc 1 344 16
ARM GAS  /tmp/ccrysqwW.s 			page 33


 825 0022 D7ED047A 		vldr.32	s15, [r7, #16]
 826 0026 67EE277A 		vmul.f32	s15, s14, s15
 827 002a B7EEE78A 		vcvt.f64.f32	d8, s15
 828              		.loc 1 344 35
 829 002e 7B69     		ldr	r3, [r7, #20]
 830 0030 D3ED047A 		vldr.32	s15, [r3, #16]
 831              		.loc 1 344 28
 832 0034 B7EEE77A 		vcvt.f64.f32	d7, s15
 833 0038 B0EE470B 		vmov.f64	d0, d7
 834 003c FFF7FEFF 		bl	cos
 835 0040 B0EE407B 		vmov.f64	d7, d0
 836              		.loc 1 344 26 discriminator 1
 837 0044 28EE078B 		vmul.f64	d8, d8, d7
 838              		.loc 1 344 52 discriminator 1
 839 0048 7B69     		ldr	r3, [r7, #20]
 840 004a 93ED037A 		vldr.32	s14, [r3, #12]
 841              		.loc 1 344 56 discriminator 1
 842 004e D7ED037A 		vldr.32	s15, [r7, #12]
 843 0052 67EE277A 		vmul.f32	s15, s14, s15
 844 0056 B7EEE79A 		vcvt.f64.f32	d9, s15
 845              		.loc 1 344 75 discriminator 1
 846 005a 7B69     		ldr	r3, [r7, #20]
 847 005c D3ED047A 		vldr.32	s15, [r3, #16]
 848              		.loc 1 344 68 discriminator 1
 849 0060 B7EEE77A 		vcvt.f64.f32	d7, s15
 850 0064 B0EE470B 		vmov.f64	d0, d7
 851 0068 FFF7FEFF 		bl	sin
 852 006c B0EE407B 		vmov.f64	d7, d0
 853              		.loc 1 344 66 discriminator 2
 854 0070 29EE077B 		vmul.f64	d7, d9, d7
 855              		.loc 1 344 47 discriminator 2
 856 0074 38EE477B 		vsub.f64	d7, d8, d7
 857              		.loc 1 344 6 discriminator 2
 858 0078 F7EEC77B 		vcvt.f32.f64	s15, d7
 859 007c C7ED097A 		vstr.32	s15, [r7, #36]
 345:Src/app.c     ****   sy = (roi->w * shift_x * sin(roi->rotation) + roi->h * shift_y * cos(roi->rotation));
 860              		.loc 1 345 12
 861 0080 7B69     		ldr	r3, [r7, #20]
 862 0082 93ED027A 		vldr.32	s14, [r3, #8]
 863              		.loc 1 345 16
 864 0086 D7ED047A 		vldr.32	s15, [r7, #16]
 865 008a 67EE277A 		vmul.f32	s15, s14, s15
 866 008e B7EEE78A 		vcvt.f64.f32	d8, s15
 867              		.loc 1 345 35
 868 0092 7B69     		ldr	r3, [r7, #20]
 869 0094 D3ED047A 		vldr.32	s15, [r3, #16]
 870              		.loc 1 345 28
 871 0098 B7EEE77A 		vcvt.f64.f32	d7, s15
 872 009c B0EE470B 		vmov.f64	d0, d7
 873 00a0 FFF7FEFF 		bl	sin
 874 00a4 B0EE407B 		vmov.f64	d7, d0
 875              		.loc 1 345 26 discriminator 1
 876 00a8 28EE078B 		vmul.f64	d8, d8, d7
 877              		.loc 1 345 52 discriminator 1
 878 00ac 7B69     		ldr	r3, [r7, #20]
 879 00ae 93ED037A 		vldr.32	s14, [r3, #12]
 880              		.loc 1 345 56 discriminator 1
ARM GAS  /tmp/ccrysqwW.s 			page 34


 881 00b2 D7ED037A 		vldr.32	s15, [r7, #12]
 882 00b6 67EE277A 		vmul.f32	s15, s14, s15
 883 00ba B7EEE79A 		vcvt.f64.f32	d9, s15
 884              		.loc 1 345 75 discriminator 1
 885 00be 7B69     		ldr	r3, [r7, #20]
 886 00c0 D3ED047A 		vldr.32	s15, [r3, #16]
 887              		.loc 1 345 68 discriminator 1
 888 00c4 B7EEE77A 		vcvt.f64.f32	d7, s15
 889 00c8 B0EE470B 		vmov.f64	d0, d7
 890 00cc FFF7FEFF 		bl	cos
 891 00d0 B0EE407B 		vmov.f64	d7, d0
 892              		.loc 1 345 66 discriminator 2
 893 00d4 29EE077B 		vmul.f64	d7, d9, d7
 894              		.loc 1 345 47 discriminator 2
 895 00d8 38EE077B 		vadd.f64	d7, d8, d7
 896              		.loc 1 345 6 discriminator 2
 897 00dc F7EEC77B 		vcvt.f32.f64	s15, d7
 898 00e0 C7ED087A 		vstr.32	s15, [r7, #32]
 346:Src/app.c     **** 
 347:Src/app.c     ****   roi->cx += sx;
 899              		.loc 1 347 6
 900 00e4 7B69     		ldr	r3, [r7, #20]
 901 00e6 93ED007A 		vldr.32	s14, [r3]
 902              		.loc 1 347 11
 903 00ea D7ED097A 		vldr.32	s15, [r7, #36]
 904 00ee 77EE277A 		vadd.f32	s15, s14, s15
 905 00f2 7B69     		ldr	r3, [r7, #20]
 906 00f4 C3ED007A 		vstr.32	s15, [r3]
 348:Src/app.c     ****   roi->cy += sy;
 907              		.loc 1 348 6
 908 00f8 7B69     		ldr	r3, [r7, #20]
 909 00fa 93ED017A 		vldr.32	s14, [r3, #4]
 910              		.loc 1 348 11
 911 00fe D7ED087A 		vldr.32	s15, [r7, #32]
 912 0102 77EE277A 		vadd.f32	s15, s14, s15
 913 0106 7B69     		ldr	r3, [r7, #20]
 914 0108 C3ED017A 		vstr.32	s15, [r3, #4]
 349:Src/app.c     **** 
 350:Src/app.c     ****   long_side = MAX(roi->w, roi->h);
 915              		.loc 1 350 15
 916 010c 7B69     		ldr	r3, [r7, #20]
 917 010e 93ED027A 		vldr.32	s14, [r3, #8]
 918 0112 7B69     		ldr	r3, [r7, #20]
 919 0114 D3ED037A 		vldr.32	s15, [r3, #12]
 920 0118 B4EEE77A 		vcmpe.f32	s14, s15
 921 011c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 922 0120 02DD     		ble	.L31
 923              		.loc 1 350 15 is_stmt 0 discriminator 1
 924 0122 7B69     		ldr	r3, [r7, #20]
 925 0124 9B68     		ldr	r3, [r3, #8]	@ float
 926 0126 01E0     		b	.L29
 927              	.L31:
 928              		.loc 1 350 15 discriminator 2
 929 0128 7B69     		ldr	r3, [r7, #20]
 930 012a DB68     		ldr	r3, [r3, #12]	@ float
 931              	.L29:
 932              		.loc 1 350 13 is_stmt 1 discriminator 4
ARM GAS  /tmp/ccrysqwW.s 			page 35


 933 012c FB61     		str	r3, [r7, #28]	@ float
 351:Src/app.c     ****   roi->w = long_side;
 934              		.loc 1 351 10
 935 012e 7B69     		ldr	r3, [r7, #20]
 936 0130 FA69     		ldr	r2, [r7, #28]	@ float
 937 0132 9A60     		str	r2, [r3, #8]	@ float
 352:Src/app.c     ****   roi->h = long_side;
 938              		.loc 1 352 10
 939 0134 7B69     		ldr	r3, [r7, #20]
 940 0136 FA69     		ldr	r2, [r7, #28]	@ float
 941 0138 DA60     		str	r2, [r3, #12]	@ float
 353:Src/app.c     **** 
 354:Src/app.c     ****   roi->w *= scale_x;
 942              		.loc 1 354 6
 943 013a 7B69     		ldr	r3, [r7, #20]
 944 013c 93ED027A 		vldr.32	s14, [r3, #8]
 945              		.loc 1 354 10
 946 0140 D7ED027A 		vldr.32	s15, [r7, #8]
 947 0144 67EE277A 		vmul.f32	s15, s14, s15
 948 0148 7B69     		ldr	r3, [r7, #20]
 949 014a C3ED027A 		vstr.32	s15, [r3, #8]
 355:Src/app.c     ****   roi->h *= scale_y;
 950              		.loc 1 355 6
 951 014e 7B69     		ldr	r3, [r7, #20]
 952 0150 93ED037A 		vldr.32	s14, [r3, #12]
 953              		.loc 1 355 10
 954 0154 D7ED017A 		vldr.32	s15, [r7, #4]
 955 0158 67EE277A 		vmul.f32	s15, s14, s15
 956 015c 7B69     		ldr	r3, [r7, #20]
 957 015e C3ED037A 		vstr.32	s15, [r3, #12]
 356:Src/app.c     **** }
 958              		.loc 1 356 1
 959 0162 00BF     		nop
 960 0164 2837     		adds	r7, r7, #40
 961              		.cfi_def_cfa_offset 24
 962 0166 BD46     		mov	sp, r7
 963              		.cfi_def_cfa_register 13
 964              		@ sp needed
 965 0168 BDEC048B 		vldm	sp!, {d8-d9}
 966              		.cfi_restore 82
 967              		.cfi_restore 83
 968              		.cfi_restore 80
 969              		.cfi_restore 81
 970              		.cfi_def_cfa_offset 8
 971 016c 80BD     		pop	{r7, pc}
 972              		.cfi_endproc
 973              	.LFE7363:
 975              		.section	.text.pd_box_to_roi,"ax",%progbits
 976              		.align	1
 977              		.syntax unified
 978              		.thumb
 979              		.thumb_func
 981              	pd_box_to_roi:
 982              	.LFB7364:
 357:Src/app.c     **** 
 358:Src/app.c     **** static void pd_box_to_roi(pd_pp_box_t *box,  roi_t *roi)
 359:Src/app.c     **** {
ARM GAS  /tmp/ccrysqwW.s 			page 36


 983              		.loc 1 359 1
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 24
 986              		@ frame_needed = 1, uses_anonymous_args = 0
 987 0000 80B5     		push	{r7, lr}
 988              		.cfi_def_cfa_offset 8
 989              		.cfi_offset 7, -8
 990              		.cfi_offset 14, -4
 991 0002 86B0     		sub	sp, sp, #24
 992              		.cfi_def_cfa_offset 32
 993 0004 00AF     		add	r7, sp, #0
 994              		.cfi_def_cfa_register 7
 995 0006 7860     		str	r0, [r7, #4]
 996 0008 3960     		str	r1, [r7]
 360:Src/app.c     ****   const float shift_x = 0;
 997              		.loc 1 360 15
 998 000a 4FF00003 		mov	r3, #0
 999 000e 7B61     		str	r3, [r7, #20]	@ float
 361:Src/app.c     ****   const float shift_y = -0.5;
 1000              		.loc 1 361 15
 1001 0010 4FF03F43 		mov	r3, #-1090519040
 1002 0014 3B61     		str	r3, [r7, #16]	@ float
 362:Src/app.c     ****   const float scale = 2.6;
 1003              		.loc 1 362 15
 1004 0016 144B     		ldr	r3, .L33
 1005 0018 FB60     		str	r3, [r7, #12]	@ float
 363:Src/app.c     **** 
 364:Src/app.c     ****   roi->cx = box->x_center;
 1006              		.loc 1 364 16
 1007 001a 7B68     		ldr	r3, [r7, #4]
 1008 001c 5A68     		ldr	r2, [r3, #4]	@ float
 1009              		.loc 1 364 11
 1010 001e 3B68     		ldr	r3, [r7]
 1011 0020 1A60     		str	r2, [r3]	@ float
 365:Src/app.c     ****   roi->cy = box->y_center;
 1012              		.loc 1 365 16
 1013 0022 7B68     		ldr	r3, [r7, #4]
 1014 0024 9A68     		ldr	r2, [r3, #8]	@ float
 1015              		.loc 1 365 11
 1016 0026 3B68     		ldr	r3, [r7]
 1017 0028 5A60     		str	r2, [r3, #4]	@ float
 366:Src/app.c     ****   roi->w = box->width;
 1018              		.loc 1 366 15
 1019 002a 7B68     		ldr	r3, [r7, #4]
 1020 002c DA68     		ldr	r2, [r3, #12]	@ float
 1021              		.loc 1 366 10
 1022 002e 3B68     		ldr	r3, [r7]
 1023 0030 9A60     		str	r2, [r3, #8]	@ float
 367:Src/app.c     ****   roi->h = box->height;
 1024              		.loc 1 367 15
 1025 0032 7B68     		ldr	r3, [r7, #4]
 1026 0034 1A69     		ldr	r2, [r3, #16]	@ float
 1027              		.loc 1 367 10
 1028 0036 3B68     		ldr	r3, [r7]
 1029 0038 DA60     		str	r2, [r3, #12]	@ float
 368:Src/app.c     ****   roi->rotation = pd_compute_rotation(box);
 1030              		.loc 1 368 19
ARM GAS  /tmp/ccrysqwW.s 			page 37


 1031 003a 7868     		ldr	r0, [r7, #4]
 1032 003c FFF7FEFF 		bl	pd_compute_rotation
 1033 0040 F0EE407A 		vmov.f32	s15, s0
 1034              		.loc 1 368 17 discriminator 1
 1035 0044 3B68     		ldr	r3, [r7]
 1036 0046 C3ED047A 		vstr.32	s15, [r3, #16]
 369:Src/app.c     **** 
 370:Src/app.c     ****   roi_shift_and_scale(roi, shift_x, shift_y, scale, scale);
 1037              		.loc 1 370 3
 1038 004a D7ED031A 		vldr.32	s3, [r7, #12]
 1039 004e 97ED031A 		vldr.32	s2, [r7, #12]
 1040 0052 D7ED040A 		vldr.32	s1, [r7, #16]
 1041 0056 97ED050A 		vldr.32	s0, [r7, #20]
 1042 005a 3868     		ldr	r0, [r7]
 1043 005c FFF7FEFF 		bl	roi_shift_and_scale
 371:Src/app.c     **** 
 372:Src/app.c     **** #if HAS_ROTATION_SUPPORT == 0
 373:Src/app.c     ****   /* In that case we can cancel rotation. This ensure corners are corrected oriented */
 374:Src/app.c     ****   roi->rotation = 0;
 375:Src/app.c     **** #endif
 376:Src/app.c     **** }
 1044              		.loc 1 376 1
 1045 0060 00BF     		nop
 1046 0062 1837     		adds	r7, r7, #24
 1047              		.cfi_def_cfa_offset 8
 1048 0064 BD46     		mov	sp, r7
 1049              		.cfi_def_cfa_register 13
 1050              		@ sp needed
 1051 0066 80BD     		pop	{r7, pc}
 1052              	.L34:
 1053              		.align	2
 1054              	.L33:
 1055 0068 66662640 		.word	1076258406
 1056              		.cfi_endproc
 1057              	.LFE7364:
 1059              		.section	.text.copy_yolo_box,"ax",%progbits
 1060              		.align	1
 1061              		.syntax unified
 1062              		.thumb
 1063              		.thumb_func
 1065              	copy_yolo_box:
 1066              	.LFB7365:
 377:Src/app.c     **** 
 378:Src/app.c     **** static void copy_yolo_box(od_pp_outBuffer_t *dst, const od_pp_outBuffer_t *src)
 379:Src/app.c     **** {
 1067              		.loc 1 379 1
 1068              		.cfi_startproc
 1069              		@ args = 0, pretend = 0, frame = 8
 1070              		@ frame_needed = 1, uses_anonymous_args = 0
 1071              		@ link register save eliminated.
 1072 0000 80B4     		push	{r7}
 1073              		.cfi_def_cfa_offset 4
 1074              		.cfi_offset 7, -4
 1075 0002 83B0     		sub	sp, sp, #12
 1076              		.cfi_def_cfa_offset 16
 1077 0004 00AF     		add	r7, sp, #0
 1078              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccrysqwW.s 			page 38


 1079 0006 7860     		str	r0, [r7, #4]
 1080 0008 3960     		str	r1, [r7]
 380:Src/app.c     ****   dst->conf = src->conf;
 1081              		.loc 1 380 18
 1082 000a 3B68     		ldr	r3, [r7]
 1083 000c 1A69     		ldr	r2, [r3, #16]	@ float
 1084              		.loc 1 380 13
 1085 000e 7B68     		ldr	r3, [r7, #4]
 1086 0010 1A61     		str	r2, [r3, #16]	@ float
 381:Src/app.c     ****   dst->x_center = src->x_center;
 1087              		.loc 1 381 22
 1088 0012 3B68     		ldr	r3, [r7]
 1089 0014 1A68     		ldr	r2, [r3]	@ float
 1090              		.loc 1 381 17
 1091 0016 7B68     		ldr	r3, [r7, #4]
 1092 0018 1A60     		str	r2, [r3]	@ float
 382:Src/app.c     ****   dst->y_center = src->y_center;
 1093              		.loc 1 382 22
 1094 001a 3B68     		ldr	r3, [r7]
 1095 001c 5A68     		ldr	r2, [r3, #4]	@ float
 1096              		.loc 1 382 17
 1097 001e 7B68     		ldr	r3, [r7, #4]
 1098 0020 5A60     		str	r2, [r3, #4]	@ float
 383:Src/app.c     ****   dst->width = src->width;
 1099              		.loc 1 383 19
 1100 0022 3B68     		ldr	r3, [r7]
 1101 0024 9A68     		ldr	r2, [r3, #8]	@ float
 1102              		.loc 1 383 14
 1103 0026 7B68     		ldr	r3, [r7, #4]
 1104 0028 9A60     		str	r2, [r3, #8]	@ float
 384:Src/app.c     ****   dst->height = src->height;
 1105              		.loc 1 384 20
 1106 002a 3B68     		ldr	r3, [r7]
 1107 002c DA68     		ldr	r2, [r3, #12]	@ float
 1108              		.loc 1 384 15
 1109 002e 7B68     		ldr	r3, [r7, #4]
 1110 0030 DA60     		str	r2, [r3, #12]	@ float
 385:Src/app.c     ****   dst->class_index = src->class_index;
 1111              		.loc 1 385 25
 1112 0032 3B68     		ldr	r3, [r7]
 1113 0034 5A69     		ldr	r2, [r3, #20]
 1114              		.loc 1 385 20
 1115 0036 7B68     		ldr	r3, [r7, #4]
 1116 0038 5A61     		str	r2, [r3, #20]
 386:Src/app.c     **** }
 1117              		.loc 1 386 1
 1118 003a 00BF     		nop
 1119 003c 0C37     		adds	r7, r7, #12
 1120              		.cfi_def_cfa_offset 4
 1121 003e BD46     		mov	sp, r7
 1122              		.cfi_def_cfa_register 13
 1123              		@ sp needed
 1124 0040 5DF8047B 		ldr	r7, [sp], #4
 1125              		.cfi_restore 7
 1126              		.cfi_def_cfa_offset 0
 1127 0044 7047     		bx	lr
 1128              		.cfi_endproc
ARM GAS  /tmp/ccrysqwW.s 			page 39


 1129              	.LFE7365:
 1131              		.section	.text.copy_pd_box,"ax",%progbits
 1132              		.align	1
 1133              		.syntax unified
 1134              		.thumb
 1135              		.thumb_func
 1137              	copy_pd_box:
 1138              	.LFB7366:
 387:Src/app.c     **** 
 388:Src/app.c     **** static void copy_pd_box(pd_pp_box_t *dst, pd_pp_box_t *src)
 389:Src/app.c     **** {
 1139              		.loc 1 389 1
 1140              		.cfi_startproc
 1141              		@ args = 0, pretend = 0, frame = 16
 1142              		@ frame_needed = 1, uses_anonymous_args = 0
 1143              		@ link register save eliminated.
 1144 0000 80B4     		push	{r7}
 1145              		.cfi_def_cfa_offset 4
 1146              		.cfi_offset 7, -4
 1147 0002 85B0     		sub	sp, sp, #20
 1148              		.cfi_def_cfa_offset 24
 1149 0004 00AF     		add	r7, sp, #0
 1150              		.cfi_def_cfa_register 7
 1151 0006 7860     		str	r0, [r7, #4]
 1152 0008 3960     		str	r1, [r7]
 390:Src/app.c     ****   int i;
 391:Src/app.c     **** 
 392:Src/app.c     ****   dst->prob = src->prob;
 1153              		.loc 1 392 18
 1154 000a 3B68     		ldr	r3, [r7]
 1155 000c 1A68     		ldr	r2, [r3]	@ float
 1156              		.loc 1 392 13
 1157 000e 7B68     		ldr	r3, [r7, #4]
 1158 0010 1A60     		str	r2, [r3]	@ float
 393:Src/app.c     ****   dst->x_center = src->x_center;
 1159              		.loc 1 393 22
 1160 0012 3B68     		ldr	r3, [r7]
 1161 0014 5A68     		ldr	r2, [r3, #4]	@ float
 1162              		.loc 1 393 17
 1163 0016 7B68     		ldr	r3, [r7, #4]
 1164 0018 5A60     		str	r2, [r3, #4]	@ float
 394:Src/app.c     ****   dst->y_center = src->y_center;
 1165              		.loc 1 394 22
 1166 001a 3B68     		ldr	r3, [r7]
 1167 001c 9A68     		ldr	r2, [r3, #8]	@ float
 1168              		.loc 1 394 17
 1169 001e 7B68     		ldr	r3, [r7, #4]
 1170 0020 9A60     		str	r2, [r3, #8]	@ float
 395:Src/app.c     ****   dst->width = src->width;
 1171              		.loc 1 395 19
 1172 0022 3B68     		ldr	r3, [r7]
 1173 0024 DA68     		ldr	r2, [r3, #12]	@ float
 1174              		.loc 1 395 14
 1175 0026 7B68     		ldr	r3, [r7, #4]
 1176 0028 DA60     		str	r2, [r3, #12]	@ float
 396:Src/app.c     ****   dst->height = src->height;
 1177              		.loc 1 396 20
ARM GAS  /tmp/ccrysqwW.s 			page 40


 1178 002a 3B68     		ldr	r3, [r7]
 1179 002c 1A69     		ldr	r2, [r3, #16]	@ float
 1180              		.loc 1 396 15
 1181 002e 7B68     		ldr	r3, [r7, #4]
 1182 0030 1A61     		str	r2, [r3, #16]	@ float
 397:Src/app.c     ****   for (i = 0 ; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++)
 1183              		.loc 1 397 10
 1184 0032 0023     		movs	r3, #0
 1185 0034 FB60     		str	r3, [r7, #12]
 1186              		.loc 1 397 3
 1187 0036 11E0     		b	.L37
 1188              	.L38:
 398:Src/app.c     ****     dst->pKps[i] = src->pKps[i];
 1189              		.loc 1 398 23
 1190 0038 3B68     		ldr	r3, [r7]
 1191 003a 5A69     		ldr	r2, [r3, #20]
 1192              		.loc 1 398 29
 1193 003c FB68     		ldr	r3, [r7, #12]
 1194 003e DB00     		lsls	r3, r3, #3
 1195 0040 D118     		adds	r1, r2, r3
 1196              		.loc 1 398 8
 1197 0042 7B68     		ldr	r3, [r7, #4]
 1198 0044 5A69     		ldr	r2, [r3, #20]
 1199              		.loc 1 398 14
 1200 0046 FB68     		ldr	r3, [r7, #12]
 1201 0048 DB00     		lsls	r3, r3, #3
 1202 004a 1344     		add	r3, r3, r2
 1203              		.loc 1 398 18
 1204 004c 0A46     		mov	r2, r1
 1205 004e 92E80300 		ldm	r2, {r0, r1}
 1206 0052 83E80300 		stm	r3, {r0, r1}
 397:Src/app.c     ****   for (i = 0 ; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++)
 1207              		.loc 1 397 50 discriminator 3
 1208 0056 FB68     		ldr	r3, [r7, #12]
 1209 0058 0133     		adds	r3, r3, #1
 1210 005a FB60     		str	r3, [r7, #12]
 1211              	.L37:
 397:Src/app.c     ****   for (i = 0 ; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++)
 1212              		.loc 1 397 18 discriminator 1
 1213 005c FB68     		ldr	r3, [r7, #12]
 1214 005e 062B     		cmp	r3, #6
 1215 0060 EADD     		ble	.L38
 399:Src/app.c     **** }
 1216              		.loc 1 399 1
 1217 0062 00BF     		nop
 1218 0064 00BF     		nop
 1219 0066 1437     		adds	r7, r7, #20
 1220              		.cfi_def_cfa_offset 4
 1221 0068 BD46     		mov	sp, r7
 1222              		.cfi_def_cfa_register 13
 1223              		@ sp needed
 1224 006a 5DF8047B 		ldr	r7, [sp], #4
 1225              		.cfi_restore 7
 1226              		.cfi_def_cfa_offset 0
 1227 006e 7047     		bx	lr
 1228              		.cfi_endproc
 1229              	.LFE7366:
ARM GAS  /tmp/ccrysqwW.s 			page 41


 1231              		.section	.rodata
 1232 001e 0000     		.align	2
 1233              	.LC6:
 1234 0020 72657420 		.ascii	"ret == BSP_ERROR_NONE\000"
 1234      3D3D2042 
 1234      53505F45 
 1234      52524F52 
 1234      5F4E4F4E 
 1235 0036 0000     		.align	2
 1236              	.LC7:
 1237 0038 5372632F 		.ascii	"Src/app.c\000"
 1237      6170702E 
 1237      6300
 1238              		.section	.text.button_init,"ax",%progbits
 1239              		.align	1
 1240              		.syntax unified
 1241              		.thumb
 1242              		.thumb_func
 1244              	button_init:
 1245              	.LFB7367:
 400:Src/app.c     **** 
 401:Src/app.c     **** static void button_init(button_t *b, Button_TypeDef id, void (*on_click_handler)(void *), void *cb_
 402:Src/app.c     **** {
 1246              		.loc 1 402 1
 1247              		.cfi_startproc
 1248              		@ args = 0, pretend = 0, frame = 24
 1249              		@ frame_needed = 1, uses_anonymous_args = 0
 1250 0000 80B5     		push	{r7, lr}
 1251              		.cfi_def_cfa_offset 8
 1252              		.cfi_offset 7, -8
 1253              		.cfi_offset 14, -4
 1254 0002 86B0     		sub	sp, sp, #24
 1255              		.cfi_def_cfa_offset 32
 1256 0004 00AF     		add	r7, sp, #0
 1257              		.cfi_def_cfa_register 7
 1258 0006 F860     		str	r0, [r7, #12]
 1259 0008 7A60     		str	r2, [r7, #4]
 1260 000a 3B60     		str	r3, [r7]
 1261 000c 0B46     		mov	r3, r1
 1262 000e FB72     		strb	r3, [r7, #11]
 403:Src/app.c     ****   int ret;
 404:Src/app.c     **** 
 405:Src/app.c     ****   ret = BSP_PB_Init(id, BUTTON_MODE_GPIO);
 1263              		.loc 1 405 9
 1264 0010 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1265 0012 0021     		movs	r1, #0
 1266 0014 1846     		mov	r0, r3
 1267 0016 FFF7FEFF 		bl	BSP_PB_Init
 1268 001a 7861     		str	r0, [r7, #20]
 406:Src/app.c     ****   assert(ret == BSP_ERROR_NONE);
 1269              		.loc 1 406 3
 1270 001c 7B69     		ldr	r3, [r7, #20]
 1271 001e 002B     		cmp	r3, #0
 1272 0020 06D0     		beq	.L40
 1273              		.loc 1 406 3 is_stmt 0 discriminator 1
 1274 0022 0B4B     		ldr	r3, .L41
 1275 0024 0B4A     		ldr	r2, .L41+4
ARM GAS  /tmp/ccrysqwW.s 			page 42


 1276 0026 4FF4CB71 		mov	r1, #406
 1277 002a 0B48     		ldr	r0, .L41+8
 1278 002c FFF7FEFF 		bl	__assert_func
 1279              	.L40:
 407:Src/app.c     **** 
 408:Src/app.c     ****   b->button_id = id;
 1280              		.loc 1 408 16 is_stmt 1
 1281 0030 FB68     		ldr	r3, [r7, #12]
 1282 0032 FA7A     		ldrb	r2, [r7, #11]
 1283 0034 1A70     		strb	r2, [r3]
 409:Src/app.c     ****   b->on_click_handler = on_click_handler;
 1284              		.loc 1 409 23
 1285 0036 FB68     		ldr	r3, [r7, #12]
 1286 0038 7A68     		ldr	r2, [r7, #4]
 1287 003a 9A60     		str	r2, [r3, #8]
 410:Src/app.c     ****   b->prev_state = 0;
 1288              		.loc 1 410 17
 1289 003c FB68     		ldr	r3, [r7, #12]
 1290 003e 0022     		movs	r2, #0
 1291 0040 5A60     		str	r2, [r3, #4]
 411:Src/app.c     ****   b->cb_args = cb_args;
 1292              		.loc 1 411 14
 1293 0042 FB68     		ldr	r3, [r7, #12]
 1294 0044 3A68     		ldr	r2, [r7]
 1295 0046 DA60     		str	r2, [r3, #12]
 412:Src/app.c     **** }
 1296              		.loc 1 412 1
 1297 0048 00BF     		nop
 1298 004a 1837     		adds	r7, r7, #24
 1299              		.cfi_def_cfa_offset 8
 1300 004c BD46     		mov	sp, r7
 1301              		.cfi_def_cfa_register 13
 1302              		@ sp needed
 1303 004e 80BD     		pop	{r7, pc}
 1304              	.L42:
 1305              		.align	2
 1306              	.L41:
 1307 0050 20000000 		.word	.LC6
 1308 0054 00000000 		.word	__func__.25
 1309 0058 38000000 		.word	.LC7
 1310              		.cfi_endproc
 1311              	.LFE7367:
 1313              		.section	.text.button_process,"ax",%progbits
 1314              		.align	1
 1315              		.syntax unified
 1316              		.thumb
 1317              		.thumb_func
 1319              	button_process:
 1320              	.LFB7368:
 413:Src/app.c     **** 
 414:Src/app.c     **** static void button_process(button_t *b)
 415:Src/app.c     **** {
 1321              		.loc 1 415 1
 1322              		.cfi_startproc
 1323              		@ args = 0, pretend = 0, frame = 16
 1324              		@ frame_needed = 1, uses_anonymous_args = 0
 1325 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccrysqwW.s 			page 43


 1326              		.cfi_def_cfa_offset 8
 1327              		.cfi_offset 7, -8
 1328              		.cfi_offset 14, -4
 1329 0002 84B0     		sub	sp, sp, #16
 1330              		.cfi_def_cfa_offset 24
 1331 0004 00AF     		add	r7, sp, #0
 1332              		.cfi_def_cfa_register 7
 1333 0006 7860     		str	r0, [r7, #4]
 416:Src/app.c     ****   int state = BSP_PB_GetState(b->button_id);
 1334              		.loc 1 416 15
 1335 0008 7B68     		ldr	r3, [r7, #4]
 1336 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1337 000c 1846     		mov	r0, r3
 1338 000e FFF7FEFF 		bl	BSP_PB_GetState
 1339 0012 0346     		mov	r3, r0
 1340              		.loc 1 416 7 discriminator 1
 1341 0014 FB60     		str	r3, [r7, #12]
 417:Src/app.c     **** 
 418:Src/app.c     ****   if (state != b->prev_state && state && b->on_click_handler)
 1342              		.loc 1 418 17
 1343 0016 7B68     		ldr	r3, [r7, #4]
 1344 0018 5B68     		ldr	r3, [r3, #4]
 1345              		.loc 1 418 6
 1346 001a FA68     		ldr	r2, [r7, #12]
 1347 001c 9A42     		cmp	r2, r3
 1348 001e 0CD0     		beq	.L44
 1349              		.loc 1 418 30 discriminator 1
 1350 0020 FB68     		ldr	r3, [r7, #12]
 1351 0022 002B     		cmp	r3, #0
 1352 0024 09D0     		beq	.L44
 1353              		.loc 1 418 43 discriminator 2
 1354 0026 7B68     		ldr	r3, [r7, #4]
 1355 0028 9B68     		ldr	r3, [r3, #8]
 1356              		.loc 1 418 39 discriminator 2
 1357 002a 002B     		cmp	r3, #0
 1358 002c 05D0     		beq	.L44
 419:Src/app.c     ****     b->on_click_handler(b->cb_args);
 1359              		.loc 1 419 6
 1360 002e 7B68     		ldr	r3, [r7, #4]
 1361 0030 9B68     		ldr	r3, [r3, #8]
 1362              		.loc 1 419 5
 1363 0032 7A68     		ldr	r2, [r7, #4]
 1364 0034 D268     		ldr	r2, [r2, #12]
 1365 0036 1046     		mov	r0, r2
 1366 0038 9847     		blx	r3
 1367              	.LVL0:
 1368              	.L44:
 420:Src/app.c     **** 
 421:Src/app.c     ****   b->prev_state = state;
 1369              		.loc 1 421 17
 1370 003a 7B68     		ldr	r3, [r7, #4]
 1371 003c FA68     		ldr	r2, [r7, #12]
 1372 003e 5A60     		str	r2, [r3, #4]
 422:Src/app.c     **** }
 1373              		.loc 1 422 1
 1374 0040 00BF     		nop
 1375 0042 1037     		adds	r7, r7, #16
ARM GAS  /tmp/ccrysqwW.s 			page 44


 1376              		.cfi_def_cfa_offset 8
 1377 0044 BD46     		mov	sp, r7
 1378              		.cfi_def_cfa_register 13
 1379              		@ sp needed
 1380 0046 80BD     		pop	{r7, pc}
 1381              		.cfi_endproc
 1382              	.LFE7368:
 1384              		.section	.text.cpuload_init,"ax",%progbits
 1385              		.align	1
 1386              		.syntax unified
 1387              		.thumb
 1388              		.thumb_func
 1390              	cpuload_init:
 1391              	.LFB7369:
 423:Src/app.c     **** 
 424:Src/app.c     **** static void cpuload_init(cpuload_info_t *cpu_load)
 425:Src/app.c     **** {
 1392              		.loc 1 425 1
 1393              		.cfi_startproc
 1394              		@ args = 0, pretend = 0, frame = 8
 1395              		@ frame_needed = 1, uses_anonymous_args = 0
 1396 0000 80B5     		push	{r7, lr}
 1397              		.cfi_def_cfa_offset 8
 1398              		.cfi_offset 7, -8
 1399              		.cfi_offset 14, -4
 1400 0002 82B0     		sub	sp, sp, #8
 1401              		.cfi_def_cfa_offset 16
 1402 0004 00AF     		add	r7, sp, #0
 1403              		.cfi_def_cfa_register 7
 1404 0006 7860     		str	r0, [r7, #4]
 426:Src/app.c     ****   memset(cpu_load, 0, sizeof(cpuload_info_t));
 1405              		.loc 1 426 3
 1406 0008 E022     		movs	r2, #224
 1407 000a 0021     		movs	r1, #0
 1408 000c 7868     		ldr	r0, [r7, #4]
 1409 000e FFF7FEFF 		bl	memset
 427:Src/app.c     **** }
 1410              		.loc 1 427 1
 1411 0012 00BF     		nop
 1412 0014 0837     		adds	r7, r7, #8
 1413              		.cfi_def_cfa_offset 8
 1414 0016 BD46     		mov	sp, r7
 1415              		.cfi_def_cfa_register 13
 1416              		@ sp needed
 1417 0018 80BD     		pop	{r7, pc}
 1418              		.cfi_endproc
 1419              	.LFE7369:
 1421              		.section	.text.cpuload_update,"ax",%progbits
 1422              		.align	1
 1423              		.syntax unified
 1424              		.thumb
 1425              		.thumb_func
 1427              	cpuload_update:
 1428              	.LFB7370:
 428:Src/app.c     **** 
 429:Src/app.c     **** static void cpuload_update(cpuload_info_t *cpu_load)
 430:Src/app.c     **** {
ARM GAS  /tmp/ccrysqwW.s 			page 45


 1429              		.loc 1 430 1
 1430              		.cfi_startproc
 1431              		@ args = 0, pretend = 0, frame = 24
 1432              		@ frame_needed = 1, uses_anonymous_args = 0
 1433 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, r10, fp, lr}
 1434              		.cfi_def_cfa_offset 32
 1435              		.cfi_offset 4, -32
 1436              		.cfi_offset 5, -28
 1437              		.cfi_offset 7, -24
 1438              		.cfi_offset 8, -20
 1439              		.cfi_offset 9, -16
 1440              		.cfi_offset 10, -12
 1441              		.cfi_offset 11, -8
 1442              		.cfi_offset 14, -4
 1443 0004 86B0     		sub	sp, sp, #24
 1444              		.cfi_def_cfa_offset 56
 1445 0006 00AF     		add	r7, sp, #0
 1446              		.cfi_def_cfa_register 7
 1447 0008 F860     		str	r0, [r7, #12]
 431:Src/app.c     ****   int i;
 432:Src/app.c     **** 
 433:Src/app.c     ****   cpu_load->history[1] = cpu_load->history[0];
 1448              		.loc 1 433 24
 1449 000a FA68     		ldr	r2, [r7, #12]
 1450 000c FB68     		ldr	r3, [r7, #12]
 1451 000e 02F13804 		add	r4, r2, #56
 1452 0012 03F12005 		add	r5, r3, #32
 1453 0016 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1454 0018 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1455 001a 95E80300 		ldm	r5, {r0, r1}
 1456 001e 84E80300 		stm	r4, {r0, r1}
 434:Src/app.c     ****   cpu_load->history[0].total = portGET_RUN_TIME_COUNTER_VALUE();
 1457              		.loc 1 434 32
 1458 0022 FFF7FEFF 		bl	TIM4_Get_Value
 1459 0026 0346     		mov	r3, r0
 1460              		.loc 1 434 32 is_stmt 0 discriminator 1
 1461 0028 0022     		movs	r2, #0
 1462 002a 3B60     		str	r3, [r7]
 1463 002c 7A60     		str	r2, [r7, #4]
 1464              		.loc 1 434 30 is_stmt 1 discriminator 1
 1465 002e FB68     		ldr	r3, [r7, #12]
 1466 0030 D7E90001 		ldrd	r0, [r7]
 1467 0034 C3E90801 		strd	r0, [r3, #32]
 435:Src/app.c     ****   cpu_load->history[0].thread = cpu_load->history[0].total - ulTaskGetIdleRunTimeCounter();
 1468              		.loc 1 435 53
 1469 0038 FB68     		ldr	r3, [r7, #12]
 1470 003a D3E90845 		ldrd	r4, [r3, #32]
 1471              		.loc 1 435 62
 1472 003e FFF7FEFF 		bl	ulTaskGetIdleRunTimeCounter
 1473 0042 0346     		mov	r3, r0
 1474              		.loc 1 435 62 is_stmt 0 discriminator 1
 1475 0044 0022     		movs	r2, #0
 1476 0046 9846     		mov	r8, r3
 1477 0048 9146     		mov	r9, r2
 1478              		.loc 1 435 60 is_stmt 1 discriminator 1
 1479 004a B4EB080A 		subs	r10, r4, r8
 1480 004e 65EB090B 		sbc	fp, r5, r9
ARM GAS  /tmp/ccrysqwW.s 			page 46


 1481              		.loc 1 435 31 discriminator 1
 1482 0052 FB68     		ldr	r3, [r7, #12]
 1483 0054 C3E90AAB 		strd	r10, [r3, #40]
 436:Src/app.c     ****   cpu_load->history[0].tick = HAL_GetTick();
 1484              		.loc 1 436 31
 1485 0058 FFF7FEFF 		bl	HAL_GetTick
 1486 005c 0246     		mov	r2, r0
 1487              		.loc 1 436 29 discriminator 1
 1488 005e FB68     		ldr	r3, [r7, #12]
 1489 0060 1A63     		str	r2, [r3, #48]
 437:Src/app.c     **** 
 438:Src/app.c     ****   if (cpu_load->history[1].tick - cpu_load->history[2].tick < 1000)
 1490              		.loc 1 438 27
 1491 0062 FB68     		ldr	r3, [r7, #12]
 1492 0064 9A6C     		ldr	r2, [r3, #72]
 1493              		.loc 1 438 55
 1494 0066 FB68     		ldr	r3, [r7, #12]
 1495 0068 1B6E     		ldr	r3, [r3, #96]
 1496              		.loc 1 438 33
 1497 006a D31A     		subs	r3, r2, r3
 1498              		.loc 1 438 6
 1499 006c B3F57A7F 		cmp	r3, #1000
 1500 0070 26D3     		bcc	.L51
 439:Src/app.c     ****     return ;
 440:Src/app.c     **** 
 441:Src/app.c     ****   for (i = 0; i < CPU_LOAD_HISTORY_DEPTH - 2; i++)
 1501              		.loc 1 441 10
 1502 0072 0023     		movs	r3, #0
 1503 0074 7B61     		str	r3, [r7, #20]
 1504              		.loc 1 441 3
 1505 0076 1FE0     		b	.L49
 1506              	.L50:
 442:Src/app.c     ****     cpu_load->history[CPU_LOAD_HISTORY_DEPTH - 1 - i] = cpu_load->history[CPU_LOAD_HISTORY_DEPTH - 
 1507              		.loc 1 442 106
 1508 0078 7B69     		ldr	r3, [r7, #20]
 1509 007a C3F10602 		rsb	r2, r3, #6
 1510              		.loc 1 442 50
 1511 007e 7B69     		ldr	r3, [r7, #20]
 1512 0080 C3F10701 		rsb	r1, r3, #7
 1513              		.loc 1 442 55
 1514 0084 F868     		ldr	r0, [r7, #12]
 1515 0086 0B46     		mov	r3, r1
 1516 0088 5B00     		lsls	r3, r3, #1
 1517 008a 0B44     		add	r3, r3, r1
 1518 008c DB00     		lsls	r3, r3, #3
 1519 008e 0344     		add	r3, r3, r0
 1520 0090 03F12000 		add	r0, r3, #32
 1521 0094 F968     		ldr	r1, [r7, #12]
 1522 0096 1346     		mov	r3, r2
 1523 0098 5B00     		lsls	r3, r3, #1
 1524 009a 1344     		add	r3, r3, r2
 1525 009c DB00     		lsls	r3, r3, #3
 1526 009e 0B44     		add	r3, r3, r1
 1527 00a0 2033     		adds	r3, r3, #32
 1528 00a2 0446     		mov	r4, r0
 1529 00a4 1D46     		mov	r5, r3
 1530 00a6 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
ARM GAS  /tmp/ccrysqwW.s 			page 47


 1531 00a8 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1532 00aa 95E80300 		ldm	r5, {r0, r1}
 1533 00ae 84E80300 		stm	r4, {r0, r1}
 441:Src/app.c     ****     cpu_load->history[CPU_LOAD_HISTORY_DEPTH - 1 - i] = cpu_load->history[CPU_LOAD_HISTORY_DEPTH - 
 1534              		.loc 1 441 48 discriminator 3
 1535 00b2 7B69     		ldr	r3, [r7, #20]
 1536 00b4 0133     		adds	r3, r3, #1
 1537 00b6 7B61     		str	r3, [r7, #20]
 1538              	.L49:
 441:Src/app.c     ****     cpu_load->history[CPU_LOAD_HISTORY_DEPTH - 1 - i] = cpu_load->history[CPU_LOAD_HISTORY_DEPTH - 
 1539              		.loc 1 441 17 discriminator 1
 1540 00b8 7B69     		ldr	r3, [r7, #20]
 1541 00ba 052B     		cmp	r3, #5
 1542 00bc DCDD     		ble	.L50
 1543 00be 00E0     		b	.L46
 1544              	.L51:
 439:Src/app.c     ****     return ;
 1545              		.loc 1 439 5
 1546 00c0 00BF     		nop
 1547              	.L46:
 443:Src/app.c     **** }
 1548              		.loc 1 443 1
 1549 00c2 1837     		adds	r7, r7, #24
 1550              		.cfi_def_cfa_offset 32
 1551 00c4 BD46     		mov	sp, r7
 1552              		.cfi_def_cfa_register 13
 1553              		@ sp needed
 1554 00c6 BDE8B08F 		pop	{r4, r5, r7, r8, r9, r10, fp, pc}
 1555              		.cfi_endproc
 1556              	.LFE7370:
 1558              		.global	__aeabi_ul2d
 1559              		.section	.text.cpuload_get_info,"ax",%progbits
 1560              		.align	1
 1561              		.syntax unified
 1562              		.thumb
 1563              		.thumb_func
 1565              	cpuload_get_info:
 1566              	.LFB7371:
 444:Src/app.c     **** 
 445:Src/app.c     **** static void cpuload_get_info(cpuload_info_t *cpu_load, float *cpu_load_last, float *cpu_load_last_s
 446:Src/app.c     ****                              float *cpu_load_last_five_seconds)
 447:Src/app.c     **** {
 1567              		.loc 1 447 1
 1568              		.cfi_startproc
 1569              		@ args = 0, pretend = 0, frame = 40
 1570              		@ frame_needed = 1, uses_anonymous_args = 0
 1571 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1572              		.cfi_def_cfa_offset 36
 1573              		.cfi_offset 4, -36
 1574              		.cfi_offset 5, -32
 1575              		.cfi_offset 6, -28
 1576              		.cfi_offset 7, -24
 1577              		.cfi_offset 8, -20
 1578              		.cfi_offset 9, -16
 1579              		.cfi_offset 10, -12
 1580              		.cfi_offset 11, -8
 1581              		.cfi_offset 14, -4
ARM GAS  /tmp/ccrysqwW.s 			page 48


 1582 0004 2DED028B 		vpush.64	{d8}
 1583              		.cfi_def_cfa_offset 44
 1584              		.cfi_offset 80, -44
 1585              		.cfi_offset 81, -40
 1586 0008 8BB0     		sub	sp, sp, #44
 1587              		.cfi_def_cfa_offset 88
 1588 000a 00AF     		add	r7, sp, #0
 1589              		.cfi_def_cfa_register 7
 1590 000c 7862     		str	r0, [r7, #36]
 1591 000e 3962     		str	r1, [r7, #32]
 1592 0010 FA61     		str	r2, [r7, #28]
 1593 0012 BB61     		str	r3, [r7, #24]
 448:Src/app.c     ****   if (cpu_load_last)
 1594              		.loc 1 448 6
 1595 0014 3B6A     		ldr	r3, [r7, #32]
 1596 0016 002B     		cmp	r3, #0
 1597 0018 2CD0     		beq	.L53
 449:Src/app.c     ****     *cpu_load_last = 100.0 * (cpu_load->history[0].thread - cpu_load->history[1].thread) /
 1598              		.loc 1 449 51
 1599 001a 7B6A     		ldr	r3, [r7, #36]
 1600 001c D3E90A01 		ldrd	r0, [r3, #40]
 1601              		.loc 1 449 81
 1602 0020 7B6A     		ldr	r3, [r7, #36]
 1603 0022 D3E91023 		ldrd	r2, [r3, #64]
 1604              		.loc 1 449 59
 1605 0026 861A     		subs	r6, r0, r2
 1606 0028 3E61     		str	r6, [r7, #16]
 1607 002a 61EB0303 		sbc	r3, r1, r3
 1608 002e 7B61     		str	r3, [r7, #20]
 1609              		.loc 1 449 28
 1610 0030 D7E90401 		ldrd	r0, [r7, #16]
 1611 0034 FFF7FEFF 		bl	__aeabi_ul2d
 1612 0038 41EC160B 		vmov	d6, r0, r1
 1613 003c 9FED407B 		vldr.64	d7, .L57
 1614 0040 26EE078B 		vmul.f64	d8, d6, d7
 450:Src/app.c     ****                      (cpu_load->history[0].total - cpu_load->history[1].total);
 1615              		.loc 1 450 43
 1616 0044 7B6A     		ldr	r3, [r7, #36]
 1617 0046 D3E90801 		ldrd	r0, [r3, #32]
 1618              		.loc 1 450 72
 1619 004a 7B6A     		ldr	r3, [r7, #36]
 1620 004c D3E90E23 		ldrd	r2, [r3, #56]
 1621              		.loc 1 450 50
 1622 0050 861A     		subs	r6, r0, r2
 1623 0052 BE60     		str	r6, [r7, #8]
 1624 0054 61EB0303 		sbc	r3, r1, r3
 1625 0058 FB60     		str	r3, [r7, #12]
 449:Src/app.c     ****     *cpu_load_last = 100.0 * (cpu_load->history[0].thread - cpu_load->history[1].thread) /
 1626              		.loc 1 449 90
 1627 005a D7E90201 		ldrd	r0, [r7, #8]
 1628 005e FFF7FEFF 		bl	__aeabi_ul2d
 1629 0062 41EC160B 		vmov	d6, r0, r1
 1630 0066 88EE067B 		vdiv.f64	d7, d8, d6
 1631 006a F7EEC77B 		vcvt.f32.f64	s15, d7
 449:Src/app.c     ****     *cpu_load_last = 100.0 * (cpu_load->history[0].thread - cpu_load->history[1].thread) /
 1632              		.loc 1 449 20
 1633 006e 3B6A     		ldr	r3, [r7, #32]
ARM GAS  /tmp/ccrysqwW.s 			page 49


 1634 0070 C3ED007A 		vstr.32	s15, [r3]
 1635              	.L53:
 451:Src/app.c     ****   if (cpu_load_last_second)
 1636              		.loc 1 451 6
 1637 0074 FB69     		ldr	r3, [r7, #28]
 1638 0076 002B     		cmp	r3, #0
 1639 0078 2BD0     		beq	.L54
 452:Src/app.c     ****     *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
 1640              		.loc 1 452 58
 1641 007a 7B6A     		ldr	r3, [r7, #36]
 1642 007c D3E91601 		ldrd	r0, [r3, #88]
 1643              		.loc 1 452 88
 1644 0080 7B6A     		ldr	r3, [r7, #36]
 1645 0082 D3E91C23 		ldrd	r2, [r3, #112]
 1646              		.loc 1 452 66
 1647 0086 861A     		subs	r6, r0, r2
 1648 0088 3E60     		str	r6, [r7]
 1649 008a 61EB0303 		sbc	r3, r1, r3
 1650 008e 7B60     		str	r3, [r7, #4]
 1651              		.loc 1 452 35
 1652 0090 D7E90001 		ldrd	r0, [r7]
 1653 0094 FFF7FEFF 		bl	__aeabi_ul2d
 1654 0098 41EC160B 		vmov	d6, r0, r1
 1655 009c 9FED287B 		vldr.64	d7, .L57
 1656 00a0 26EE078B 		vmul.f64	d8, d6, d7
 453:Src/app.c     ****                      (cpu_load->history[2].total - cpu_load->history[3].total);
 1657              		.loc 1 453 43
 1658 00a4 7B6A     		ldr	r3, [r7, #36]
 1659 00a6 D3E91401 		ldrd	r0, [r3, #80]
 1660              		.loc 1 453 72
 1661 00aa 7B6A     		ldr	r3, [r7, #36]
 1662 00ac D3E91A23 		ldrd	r2, [r3, #104]
 1663              		.loc 1 453 50
 1664 00b0 B0EB020A 		subs	r10, r0, r2
 1665 00b4 61EB030B 		sbc	fp, r1, r3
 452:Src/app.c     ****     *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
 1666              		.loc 1 452 97
 1667 00b8 5046     		mov	r0, r10
 1668 00ba 5946     		mov	r1, fp
 1669 00bc FFF7FEFF 		bl	__aeabi_ul2d
 1670 00c0 41EC160B 		vmov	d6, r0, r1
 1671 00c4 88EE067B 		vdiv.f64	d7, d8, d6
 1672 00c8 F7EEC77B 		vcvt.f32.f64	s15, d7
 452:Src/app.c     ****     *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
 1673              		.loc 1 452 27
 1674 00cc FB69     		ldr	r3, [r7, #28]
 1675 00ce C3ED007A 		vstr.32	s15, [r3]
 1676              	.L54:
 454:Src/app.c     ****   if (cpu_load_last_five_seconds)
 1677              		.loc 1 454 6
 1678 00d2 BB69     		ldr	r3, [r7, #24]
 1679 00d4 002B     		cmp	r3, #0
 1680 00d6 29D0     		beq	.L56
 455:Src/app.c     ****     *cpu_load_last_five_seconds = 100.0 * (cpu_load->history[2].thread - cpu_load->history[7].threa
 1681              		.loc 1 455 64
 1682 00d8 7B6A     		ldr	r3, [r7, #36]
 1683 00da D3E91601 		ldrd	r0, [r3, #88]
ARM GAS  /tmp/ccrysqwW.s 			page 50


 1684              		.loc 1 455 94
 1685 00de 7B6A     		ldr	r3, [r7, #36]
 1686 00e0 D3E93423 		ldrd	r2, [r3, #208]
 1687              		.loc 1 455 72
 1688 00e4 B0EB0208 		subs	r8, r0, r2
 1689 00e8 61EB0309 		sbc	r9, r1, r3
 1690              		.loc 1 455 41
 1691 00ec 4046     		mov	r0, r8
 1692 00ee 4946     		mov	r1, r9
 1693 00f0 FFF7FEFF 		bl	__aeabi_ul2d
 1694 00f4 41EC160B 		vmov	d6, r0, r1
 1695 00f8 9FED117B 		vldr.64	d7, .L57
 1696 00fc 26EE078B 		vmul.f64	d8, d6, d7
 456:Src/app.c     ****                      (cpu_load->history[2].total - cpu_load->history[7].total);
 1697              		.loc 1 456 43
 1698 0100 7B6A     		ldr	r3, [r7, #36]
 1699 0102 D3E91401 		ldrd	r0, [r3, #80]
 1700              		.loc 1 456 72
 1701 0106 7B6A     		ldr	r3, [r7, #36]
 1702 0108 D3E93223 		ldrd	r2, [r3, #200]
 1703              		.loc 1 456 50
 1704 010c 841A     		subs	r4, r0, r2
 1705 010e 61EB0305 		sbc	r5, r1, r3
 455:Src/app.c     ****     *cpu_load_last_five_seconds = 100.0 * (cpu_load->history[2].thread - cpu_load->history[7].threa
 1706              		.loc 1 455 103
 1707 0112 2046     		mov	r0, r4
 1708 0114 2946     		mov	r1, r5
 1709 0116 FFF7FEFF 		bl	__aeabi_ul2d
 1710 011a 41EC160B 		vmov	d6, r0, r1
 1711 011e 88EE067B 		vdiv.f64	d7, d8, d6
 1712 0122 F7EEC77B 		vcvt.f32.f64	s15, d7
 455:Src/app.c     ****     *cpu_load_last_five_seconds = 100.0 * (cpu_load->history[2].thread - cpu_load->history[7].threa
 1713              		.loc 1 455 33
 1714 0126 BB69     		ldr	r3, [r7, #24]
 1715 0128 C3ED007A 		vstr.32	s15, [r3]
 1716              	.L56:
 457:Src/app.c     **** }
 1717              		.loc 1 457 1
 1718 012c 00BF     		nop
 1719 012e 2C37     		adds	r7, r7, #44
 1720              		.cfi_def_cfa_offset 44
 1721 0130 BD46     		mov	sp, r7
 1722              		.cfi_def_cfa_register 13
 1723              		@ sp needed
 1724 0132 BDEC028B 		vldm	sp!, {d8}
 1725              		.cfi_restore 80
 1726              		.cfi_restore 81
 1727              		.cfi_def_cfa_offset 36
 1728 0136 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1729              	.L58:
 1730 013a 00BFAFF3 		.align	3
 1730      0080
 1731              	.L57:
 1732 0140 00000000 		.word	0
 1733 0144 00005940 		.word	1079574528
 1734              		.cfi_endproc
 1735              	.LFE7371:
ARM GAS  /tmp/ccrysqwW.s 			page 51


 1737              		.section	.rodata
 1738 0042 0000     		.align	2
 1739              	.LC8:
 1740 0044 62756666 		.ascii	"buffers[i]\000"
 1740      6572735B 
 1740      695D00
 1741              		.section	.text.bqueue_init,"ax",%progbits
 1742              		.align	1
 1743              		.syntax unified
 1744              		.thumb
 1745              		.thumb_func
 1747              	bqueue_init:
 1748              	.LFB7372:
 458:Src/app.c     **** 
 459:Src/app.c     **** static int bqueue_init(bqueue_t *bq, int buffer_nb, uint8_t **buffers)
 460:Src/app.c     **** {
 1749              		.loc 1 460 1
 1750              		.cfi_startproc
 1751              		@ args = 0, pretend = 0, frame = 24
 1752              		@ frame_needed = 1, uses_anonymous_args = 0
 1753 0000 80B5     		push	{r7, lr}
 1754              		.cfi_def_cfa_offset 8
 1755              		.cfi_offset 7, -8
 1756              		.cfi_offset 14, -4
 1757 0002 86B0     		sub	sp, sp, #24
 1758              		.cfi_def_cfa_offset 32
 1759 0004 00AF     		add	r7, sp, #0
 1760              		.cfi_def_cfa_register 7
 1761 0006 F860     		str	r0, [r7, #12]
 1762 0008 B960     		str	r1, [r7, #8]
 1763 000a 7A60     		str	r2, [r7, #4]
 461:Src/app.c     ****   int i;
 462:Src/app.c     **** 
 463:Src/app.c     ****   if (buffer_nb > BQUEUE_MAX_BUFFERS)
 1764              		.loc 1 463 6
 1765 000c BB68     		ldr	r3, [r7, #8]
 1766 000e 022B     		cmp	r3, #2
 1767 0010 02DD     		ble	.L60
 464:Src/app.c     ****     return -1;
 1768              		.loc 1 464 12
 1769 0012 4FF0FF33 		mov	r3, #-1
 1770 0016 56E0     		b	.L61
 1771              	.L60:
 465:Src/app.c     **** 
 466:Src/app.c     ****   bq->free = xSemaphoreCreateCountingStatic(buffer_nb, buffer_nb, &bq->free_buffer);
 1772              		.loc 1 466 14
 1773 0018 B868     		ldr	r0, [r7, #8]
 1774 001a B968     		ldr	r1, [r7, #8]
 1775 001c FB68     		ldr	r3, [r7, #12]
 1776 001e 0433     		adds	r3, r3, #4
 1777 0020 1A46     		mov	r2, r3
 1778 0022 FFF7FEFF 		bl	xQueueCreateCountingSemaphoreStatic
 1779 0026 0246     		mov	r2, r0
 1780              		.loc 1 466 12 discriminator 1
 1781 0028 FB68     		ldr	r3, [r7, #12]
 1782 002a 1A60     		str	r2, [r3]
 467:Src/app.c     ****   if (!bq->free)
ARM GAS  /tmp/ccrysqwW.s 			page 52


 1783              		.loc 1 467 10
 1784 002c FB68     		ldr	r3, [r7, #12]
 1785 002e 1B68     		ldr	r3, [r3]
 1786              		.loc 1 467 6
 1787 0030 002B     		cmp	r3, #0
 1788 0032 45D0     		beq	.L70
 468:Src/app.c     ****     goto free_sem_error;
 469:Src/app.c     ****   bq->ready = xSemaphoreCreateCountingStatic(buffer_nb, 0, &bq->ready_buffer);
 1789              		.loc 1 469 15
 1790 0034 B868     		ldr	r0, [r7, #8]
 1791 0036 FB68     		ldr	r3, [r7, #12]
 1792 0038 5833     		adds	r3, r3, #88
 1793 003a 1A46     		mov	r2, r3
 1794 003c 0021     		movs	r1, #0
 1795 003e FFF7FEFF 		bl	xQueueCreateCountingSemaphoreStatic
 1796 0042 0246     		mov	r2, r0
 1797              		.loc 1 469 13 discriminator 1
 1798 0044 FB68     		ldr	r3, [r7, #12]
 1799 0046 5A65     		str	r2, [r3, #84]
 470:Src/app.c     ****   if (!bq->ready)
 1800              		.loc 1 470 10
 1801 0048 FB68     		ldr	r3, [r7, #12]
 1802 004a 5B6D     		ldr	r3, [r3, #84]
 1803              		.loc 1 470 6
 1804 004c 002B     		cmp	r3, #0
 1805 004e 30D0     		beq	.L71
 471:Src/app.c     ****     goto ready_sem_error;
 472:Src/app.c     **** 
 473:Src/app.c     ****   bq->buffer_nb = buffer_nb;
 1806              		.loc 1 473 17
 1807 0050 FB68     		ldr	r3, [r7, #12]
 1808 0052 BA68     		ldr	r2, [r7, #8]
 1809 0054 C3F8A820 		str	r2, [r3, #168]
 474:Src/app.c     ****   for (i = 0; i < buffer_nb; i++) {
 1810              		.loc 1 474 10
 1811 0058 0023     		movs	r3, #0
 1812 005a 7B61     		str	r3, [r7, #20]
 1813              		.loc 1 474 3
 1814 005c 1BE0     		b	.L66
 1815              	.L68:
 475:Src/app.c     ****     assert(buffers[i]);
 1816              		.loc 1 475 5
 1817 005e 7B69     		ldr	r3, [r7, #20]
 1818 0060 9B00     		lsls	r3, r3, #2
 1819 0062 7A68     		ldr	r2, [r7, #4]
 1820 0064 1344     		add	r3, r3, r2
 1821 0066 1B68     		ldr	r3, [r3]
 1822 0068 002B     		cmp	r3, #0
 1823 006a 06D1     		bne	.L67
 1824              		.loc 1 475 5 is_stmt 0 discriminator 1
 1825 006c 184B     		ldr	r3, .L72
 1826 006e 194A     		ldr	r2, .L72+4
 1827 0070 40F2DB11 		movw	r1, #475
 1828 0074 1848     		ldr	r0, .L72+8
 1829 0076 FFF7FEFF 		bl	__assert_func
 1830              	.L67:
 476:Src/app.c     ****     bq->buffers[i] = buffers[i];
ARM GAS  /tmp/ccrysqwW.s 			page 53


 1831              		.loc 1 476 29 is_stmt 1
 1832 007a 7B69     		ldr	r3, [r7, #20]
 1833 007c 9B00     		lsls	r3, r3, #2
 1834 007e 7A68     		ldr	r2, [r7, #4]
 1835 0080 1344     		add	r3, r3, r2
 1836 0082 1A68     		ldr	r2, [r3]
 1837              		.loc 1 476 20
 1838 0084 F968     		ldr	r1, [r7, #12]
 1839 0086 7B69     		ldr	r3, [r7, #20]
 1840 0088 2A33     		adds	r3, r3, #42
 1841 008a 9B00     		lsls	r3, r3, #2
 1842 008c 0B44     		add	r3, r3, r1
 1843 008e 5A60     		str	r2, [r3, #4]
 474:Src/app.c     ****   for (i = 0; i < buffer_nb; i++) {
 1844              		.loc 1 474 31 discriminator 2
 1845 0090 7B69     		ldr	r3, [r7, #20]
 1846 0092 0133     		adds	r3, r3, #1
 1847 0094 7B61     		str	r3, [r7, #20]
 1848              	.L66:
 474:Src/app.c     ****   for (i = 0; i < buffer_nb; i++) {
 1849              		.loc 1 474 17 discriminator 1
 1850 0096 7A69     		ldr	r2, [r7, #20]
 1851 0098 BB68     		ldr	r3, [r7, #8]
 1852 009a 9A42     		cmp	r2, r3
 1853 009c DFDB     		blt	.L68
 477:Src/app.c     ****   }
 478:Src/app.c     ****   bq->free_idx = 0;
 1854              		.loc 1 478 16
 1855 009e FB68     		ldr	r3, [r7, #12]
 1856 00a0 0022     		movs	r2, #0
 1857 00a2 C3F8B420 		str	r2, [r3, #180]
 479:Src/app.c     ****   bq->ready_idx = 0;
 1858              		.loc 1 479 17
 1859 00a6 FB68     		ldr	r3, [r7, #12]
 1860 00a8 0022     		movs	r2, #0
 1861 00aa C3F8B820 		str	r2, [r3, #184]
 480:Src/app.c     **** 
 481:Src/app.c     ****   return 0;
 1862              		.loc 1 481 10
 1863 00ae 0023     		movs	r3, #0
 1864 00b0 09E0     		b	.L61
 1865              	.L71:
 471:Src/app.c     **** 
 1866              		.loc 1 471 5
 1867 00b2 00BF     		nop
 1868              	.L65:
 482:Src/app.c     **** 
 483:Src/app.c     **** ready_sem_error:
 484:Src/app.c     ****   vSemaphoreDelete(bq->free);
 1869              		.loc 1 484 3
 1870 00b4 FB68     		ldr	r3, [r7, #12]
 1871 00b6 1B68     		ldr	r3, [r3]
 1872 00b8 1846     		mov	r0, r3
 1873 00ba FFF7FEFF 		bl	vQueueDelete
 1874 00be 00E0     		b	.L63
 1875              	.L70:
 468:Src/app.c     ****   bq->ready = xSemaphoreCreateCountingStatic(buffer_nb, 0, &bq->ready_buffer);
ARM GAS  /tmp/ccrysqwW.s 			page 54


 1876              		.loc 1 468 5
 1877 00c0 00BF     		nop
 1878              	.L63:
 485:Src/app.c     **** free_sem_error:
 486:Src/app.c     ****   return -1;
 1879              		.loc 1 486 10
 1880 00c2 4FF0FF33 		mov	r3, #-1
 1881              	.L61:
 487:Src/app.c     **** }
 1882              		.loc 1 487 1
 1883 00c6 1846     		mov	r0, r3
 1884 00c8 1837     		adds	r7, r7, #24
 1885              		.cfi_def_cfa_offset 8
 1886 00ca BD46     		mov	sp, r7
 1887              		.cfi_def_cfa_register 13
 1888              		@ sp needed
 1889 00cc 80BD     		pop	{r7, pc}
 1890              	.L73:
 1891 00ce 00BF     		.align	2
 1892              	.L72:
 1893 00d0 44000000 		.word	.LC8
 1894 00d4 00000000 		.word	__func__.24
 1895 00d8 38000000 		.word	.LC7
 1896              		.cfi_endproc
 1897              	.LFE7372:
 1899              		.section	.text.bqueue_get_free,"ax",%progbits
 1900              		.align	1
 1901              		.syntax unified
 1902              		.thumb
 1903              		.thumb_func
 1905              	bqueue_get_free:
 1906              	.LFB7373:
 488:Src/app.c     **** 
 489:Src/app.c     **** static uint8_t *bqueue_get_free(bqueue_t *bq, int is_blocking)
 490:Src/app.c     **** {
 1907              		.loc 1 490 1
 1908              		.cfi_startproc
 1909              		@ args = 0, pretend = 0, frame = 16
 1910              		@ frame_needed = 1, uses_anonymous_args = 0
 1911 0000 80B5     		push	{r7, lr}
 1912              		.cfi_def_cfa_offset 8
 1913              		.cfi_offset 7, -8
 1914              		.cfi_offset 14, -4
 1915 0002 84B0     		sub	sp, sp, #16
 1916              		.cfi_def_cfa_offset 24
 1917 0004 00AF     		add	r7, sp, #0
 1918              		.cfi_def_cfa_register 7
 1919 0006 7860     		str	r0, [r7, #4]
 1920 0008 3960     		str	r1, [r7]
 491:Src/app.c     ****   uint8_t *res;
 492:Src/app.c     ****   int ret;
 493:Src/app.c     **** 
 494:Src/app.c     ****   ret = xSemaphoreTake(bq->free, is_blocking ? portMAX_DELAY : 0);
 1921              		.loc 1 494 9
 1922 000a 7B68     		ldr	r3, [r7, #4]
 1923 000c 1A68     		ldr	r2, [r3]
 1924 000e 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccrysqwW.s 			page 55


 1925 0010 002B     		cmp	r3, #0
 1926 0012 02D0     		beq	.L75
 1927              		.loc 1 494 9 is_stmt 0 discriminator 1
 1928 0014 4FF0FF33 		mov	r3, #-1
 1929 0018 00E0     		b	.L76
 1930              	.L75:
 1931              		.loc 1 494 9 discriminator 2
 1932 001a 0023     		movs	r3, #0
 1933              	.L76:
 1934              		.loc 1 494 9 discriminator 4
 1935 001c 1946     		mov	r1, r3
 1936 001e 1046     		mov	r0, r2
 1937 0020 FFF7FEFF 		bl	xQueueSemaphoreTake
 1938 0024 F860     		str	r0, [r7, #12]
 495:Src/app.c     ****   if (ret == pdFALSE)
 1939              		.loc 1 495 6 is_stmt 1
 1940 0026 FB68     		ldr	r3, [r7, #12]
 1941 0028 002B     		cmp	r3, #0
 1942 002a 01D1     		bne	.L77
 496:Src/app.c     ****     return NULL;
 1943              		.loc 1 496 12
 1944 002c 0023     		movs	r3, #0
 1945 002e 18E0     		b	.L78
 1946              	.L77:
 497:Src/app.c     **** 
 498:Src/app.c     ****   res = bq->buffers[bq->free_idx];
 1947              		.loc 1 498 23
 1948 0030 7B68     		ldr	r3, [r7, #4]
 1949 0032 D3F8B430 		ldr	r3, [r3, #180]
 1950              		.loc 1 498 7
 1951 0036 7A68     		ldr	r2, [r7, #4]
 1952 0038 2A33     		adds	r3, r3, #42
 1953 003a 9B00     		lsls	r3, r3, #2
 1954 003c 1344     		add	r3, r3, r2
 1955 003e 5B68     		ldr	r3, [r3, #4]
 1956 0040 BB60     		str	r3, [r7, #8]
 499:Src/app.c     ****   bq->free_idx = (bq->free_idx + 1) % bq->buffer_nb;
 1957              		.loc 1 499 21
 1958 0042 7B68     		ldr	r3, [r7, #4]
 1959 0044 D3F8B430 		ldr	r3, [r3, #180]
 1960              		.loc 1 499 32
 1961 0048 0133     		adds	r3, r3, #1
 1962              		.loc 1 499 41
 1963 004a 7A68     		ldr	r2, [r7, #4]
 1964 004c D2F8A820 		ldr	r2, [r2, #168]
 1965              		.loc 1 499 37
 1966 0050 93FBF2F1 		sdiv	r1, r3, r2
 1967 0054 01FB02F2 		mul	r2, r1, r2
 1968 0058 9A1A     		subs	r2, r3, r2
 1969              		.loc 1 499 16
 1970 005a 7B68     		ldr	r3, [r7, #4]
 1971 005c C3F8B420 		str	r2, [r3, #180]
 500:Src/app.c     **** 
 501:Src/app.c     ****   return res;
 1972              		.loc 1 501 10
 1973 0060 BB68     		ldr	r3, [r7, #8]
 1974              	.L78:
ARM GAS  /tmp/ccrysqwW.s 			page 56


 502:Src/app.c     **** }
 1975              		.loc 1 502 1
 1976 0062 1846     		mov	r0, r3
 1977 0064 1037     		adds	r7, r7, #16
 1978              		.cfi_def_cfa_offset 8
 1979 0066 BD46     		mov	sp, r7
 1980              		.cfi_def_cfa_register 13
 1981              		@ sp needed
 1982 0068 80BD     		pop	{r7, pc}
 1983              		.cfi_endproc
 1984              	.LFE7373:
 1986              		.section	.rodata
 1987 004f 00       		.align	2
 1988              	.LC9:
 1989 0050 72657420 		.ascii	"ret == pdTRUE\000"
 1989      3D3D2070 
 1989      64545255 
 1989      4500
 1990              		.section	.text.bqueue_put_free,"ax",%progbits
 1991              		.align	1
 1992              		.syntax unified
 1993              		.thumb
 1994              		.thumb_func
 1996              	bqueue_put_free:
 1997              	.LFB7374:
 503:Src/app.c     **** 
 504:Src/app.c     **** static void bqueue_put_free(bqueue_t *bq)
 505:Src/app.c     **** {
 1998              		.loc 1 505 1
 1999              		.cfi_startproc
 2000              		@ args = 0, pretend = 0, frame = 16
 2001              		@ frame_needed = 1, uses_anonymous_args = 0
 2002 0000 80B5     		push	{r7, lr}
 2003              		.cfi_def_cfa_offset 8
 2004              		.cfi_offset 7, -8
 2005              		.cfi_offset 14, -4
 2006 0002 84B0     		sub	sp, sp, #16
 2007              		.cfi_def_cfa_offset 24
 2008 0004 00AF     		add	r7, sp, #0
 2009              		.cfi_def_cfa_register 7
 2010 0006 7860     		str	r0, [r7, #4]
 506:Src/app.c     ****   int ret;
 507:Src/app.c     **** 
 508:Src/app.c     ****   ret = xSemaphoreGive(bq->free);
 2011              		.loc 1 508 9
 2012 0008 7B68     		ldr	r3, [r7, #4]
 2013 000a 1868     		ldr	r0, [r3]
 2014 000c 0023     		movs	r3, #0
 2015 000e 0022     		movs	r2, #0
 2016 0010 0021     		movs	r1, #0
 2017 0012 FFF7FEFF 		bl	xQueueGenericSend
 2018 0016 F860     		str	r0, [r7, #12]
 509:Src/app.c     ****   assert(ret == pdTRUE);
 2019              		.loc 1 509 3
 2020 0018 FB68     		ldr	r3, [r7, #12]
 2021 001a 012B     		cmp	r3, #1
 2022 001c 06D0     		beq	.L81
ARM GAS  /tmp/ccrysqwW.s 			page 57


 2023              		.loc 1 509 3 is_stmt 0 discriminator 1
 2024 001e 054B     		ldr	r3, .L82
 2025 0020 054A     		ldr	r2, .L82+4
 2026 0022 40F2FD11 		movw	r1, #509
 2027 0026 0548     		ldr	r0, .L82+8
 2028 0028 FFF7FEFF 		bl	__assert_func
 2029              	.L81:
 510:Src/app.c     **** }
 2030              		.loc 1 510 1 is_stmt 1
 2031 002c 00BF     		nop
 2032 002e 1037     		adds	r7, r7, #16
 2033              		.cfi_def_cfa_offset 8
 2034 0030 BD46     		mov	sp, r7
 2035              		.cfi_def_cfa_register 13
 2036              		@ sp needed
 2037 0032 80BD     		pop	{r7, pc}
 2038              	.L83:
 2039              		.align	2
 2040              	.L82:
 2041 0034 50000000 		.word	.LC9
 2042 0038 00000000 		.word	__func__.23
 2043 003c 38000000 		.word	.LC7
 2044              		.cfi_endproc
 2045              	.LFE7374:
 2047              		.section	.text.bqueue_get_ready,"ax",%progbits
 2048              		.align	1
 2049              		.syntax unified
 2050              		.thumb
 2051              		.thumb_func
 2053              	bqueue_get_ready:
 2054              	.LFB7375:
 511:Src/app.c     **** 
 512:Src/app.c     **** static uint8_t *bqueue_get_ready(bqueue_t *bq)
 513:Src/app.c     **** {
 2055              		.loc 1 513 1
 2056              		.cfi_startproc
 2057              		@ args = 0, pretend = 0, frame = 16
 2058              		@ frame_needed = 1, uses_anonymous_args = 0
 2059 0000 80B5     		push	{r7, lr}
 2060              		.cfi_def_cfa_offset 8
 2061              		.cfi_offset 7, -8
 2062              		.cfi_offset 14, -4
 2063 0002 84B0     		sub	sp, sp, #16
 2064              		.cfi_def_cfa_offset 24
 2065 0004 00AF     		add	r7, sp, #0
 2066              		.cfi_def_cfa_register 7
 2067 0006 7860     		str	r0, [r7, #4]
 514:Src/app.c     ****   uint8_t *res;
 515:Src/app.c     ****   int ret;
 516:Src/app.c     **** 
 517:Src/app.c     ****   ret = xSemaphoreTake(bq->ready, portMAX_DELAY);
 2068              		.loc 1 517 9
 2069 0008 7B68     		ldr	r3, [r7, #4]
 2070 000a 5B6D     		ldr	r3, [r3, #84]
 2071 000c 4FF0FF31 		mov	r1, #-1
 2072 0010 1846     		mov	r0, r3
 2073 0012 FFF7FEFF 		bl	xQueueSemaphoreTake
ARM GAS  /tmp/ccrysqwW.s 			page 58


 2074 0016 F860     		str	r0, [r7, #12]
 518:Src/app.c     ****   assert(ret == pdTRUE);
 2075              		.loc 1 518 3
 2076 0018 FB68     		ldr	r3, [r7, #12]
 2077 001a 012B     		cmp	r3, #1
 2078 001c 06D0     		beq	.L85
 2079              		.loc 1 518 3 is_stmt 0 discriminator 1
 2080 001e 124B     		ldr	r3, .L87
 2081 0020 124A     		ldr	r2, .L87+4
 2082 0022 40F20621 		movw	r1, #518
 2083 0026 1248     		ldr	r0, .L87+8
 2084 0028 FFF7FEFF 		bl	__assert_func
 2085              	.L85:
 519:Src/app.c     **** 
 520:Src/app.c     ****   res = bq->buffers[bq->ready_idx];
 2086              		.loc 1 520 23 is_stmt 1
 2087 002c 7B68     		ldr	r3, [r7, #4]
 2088 002e D3F8B830 		ldr	r3, [r3, #184]
 2089              		.loc 1 520 7
 2090 0032 7A68     		ldr	r2, [r7, #4]
 2091 0034 2A33     		adds	r3, r3, #42
 2092 0036 9B00     		lsls	r3, r3, #2
 2093 0038 1344     		add	r3, r3, r2
 2094 003a 5B68     		ldr	r3, [r3, #4]
 2095 003c BB60     		str	r3, [r7, #8]
 521:Src/app.c     ****   bq->ready_idx = (bq->ready_idx + 1) % bq->buffer_nb;
 2096              		.loc 1 521 22
 2097 003e 7B68     		ldr	r3, [r7, #4]
 2098 0040 D3F8B830 		ldr	r3, [r3, #184]
 2099              		.loc 1 521 34
 2100 0044 0133     		adds	r3, r3, #1
 2101              		.loc 1 521 43
 2102 0046 7A68     		ldr	r2, [r7, #4]
 2103 0048 D2F8A820 		ldr	r2, [r2, #168]
 2104              		.loc 1 521 39
 2105 004c 93FBF2F1 		sdiv	r1, r3, r2
 2106 0050 01FB02F2 		mul	r2, r1, r2
 2107 0054 9A1A     		subs	r2, r3, r2
 2108              		.loc 1 521 17
 2109 0056 7B68     		ldr	r3, [r7, #4]
 2110 0058 C3F8B820 		str	r2, [r3, #184]
 522:Src/app.c     **** 
 523:Src/app.c     ****   return res;
 2111              		.loc 1 523 10
 2112 005c BB68     		ldr	r3, [r7, #8]
 524:Src/app.c     **** }
 2113              		.loc 1 524 1
 2114 005e 1846     		mov	r0, r3
 2115 0060 1037     		adds	r7, r7, #16
 2116              		.cfi_def_cfa_offset 8
 2117 0062 BD46     		mov	sp, r7
 2118              		.cfi_def_cfa_register 13
 2119              		@ sp needed
 2120 0064 80BD     		pop	{r7, pc}
 2121              	.L88:
 2122 0066 00BF     		.align	2
 2123              	.L87:
ARM GAS  /tmp/ccrysqwW.s 			page 59


 2124 0068 50000000 		.word	.LC9
 2125 006c 00000000 		.word	__func__.22
 2126 0070 38000000 		.word	.LC7
 2127              		.cfi_endproc
 2128              	.LFE7375:
 2130              		.section	.text.bqueue_put_ready,"ax",%progbits
 2131              		.align	1
 2132              		.syntax unified
 2133              		.thumb
 2134              		.thumb_func
 2136              	bqueue_put_ready:
 2137              	.LFB7376:
 525:Src/app.c     **** 
 526:Src/app.c     **** static void bqueue_put_ready(bqueue_t *bq)
 527:Src/app.c     **** {
 2138              		.loc 1 527 1
 2139              		.cfi_startproc
 2140              		@ args = 0, pretend = 0, frame = 16
 2141              		@ frame_needed = 1, uses_anonymous_args = 0
 2142 0000 80B5     		push	{r7, lr}
 2143              		.cfi_def_cfa_offset 8
 2144              		.cfi_offset 7, -8
 2145              		.cfi_offset 14, -4
 2146 0002 84B0     		sub	sp, sp, #16
 2147              		.cfi_def_cfa_offset 24
 2148 0004 00AF     		add	r7, sp, #0
 2149              		.cfi_def_cfa_register 7
 2150 0006 7860     		str	r0, [r7, #4]
 528:Src/app.c     ****   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 2151              		.loc 1 528 14
 2152 0008 0023     		movs	r3, #0
 2153 000a BB60     		str	r3, [r7, #8]
 529:Src/app.c     ****   int ret;
 530:Src/app.c     **** 
 531:Src/app.c     ****   if (xPortIsInsideInterrupt()) {
 2154              		.loc 1 531 7
 2155 000c FFF7FEFF 		bl	xPortIsInsideInterrupt
 2156 0010 0346     		mov	r3, r0
 2157              		.loc 1 531 6 discriminator 1
 2158 0012 002B     		cmp	r3, #0
 2159 0014 1AD0     		beq	.L90
 532:Src/app.c     ****     ret = xSemaphoreGiveFromISR(bq->ready, &xHigherPriorityTaskWoken);
 2160              		.loc 1 532 11
 2161 0016 7B68     		ldr	r3, [r7, #4]
 2162 0018 5B6D     		ldr	r3, [r3, #84]
 2163 001a 07F10802 		add	r2, r7, #8
 2164 001e 1146     		mov	r1, r2
 2165 0020 1846     		mov	r0, r3
 2166 0022 FFF7FEFF 		bl	xQueueGiveFromISR
 2167 0026 F860     		str	r0, [r7, #12]
 533:Src/app.c     ****     assert(ret == pdTRUE);
 2168              		.loc 1 533 5
 2169 0028 FB68     		ldr	r3, [r7, #12]
 2170 002a 012B     		cmp	r3, #1
 2171 002c 06D0     		beq	.L91
 2172              		.loc 1 533 5 is_stmt 0 discriminator 1
 2173 002e 124B     		ldr	r3, .L94
ARM GAS  /tmp/ccrysqwW.s 			page 60


 2174 0030 124A     		ldr	r2, .L94+4
 2175 0032 40F21521 		movw	r1, #533
 2176 0036 1248     		ldr	r0, .L94+8
 2177 0038 FFF7FEFF 		bl	__assert_func
 2178              	.L91:
 534:Src/app.c     ****     portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 2179              		.loc 1 534 5 is_stmt 1
 2180 003c BB68     		ldr	r3, [r7, #8]
 2181 003e 002B     		cmp	r3, #0
 2182 0040 16D0     		beq	.L93
 2183              		.loc 1 534 5 is_stmt 0 discriminator 1
 2184 0042 104B     		ldr	r3, .L94+12
 2185 0044 4FF08052 		mov	r2, #268435456
 2186 0048 1A60     		str	r2, [r3]
 535:Src/app.c     ****   } else {
 536:Src/app.c     ****     ret = xSemaphoreGive(bq->ready);
 537:Src/app.c     ****     assert(ret == pdTRUE);
 538:Src/app.c     ****   }
 539:Src/app.c     **** }
 2187              		.loc 1 539 1 is_stmt 1
 2188 004a 11E0     		b	.L93
 2189              	.L90:
 536:Src/app.c     ****     assert(ret == pdTRUE);
 2190              		.loc 1 536 11
 2191 004c 7B68     		ldr	r3, [r7, #4]
 2192 004e 586D     		ldr	r0, [r3, #84]
 2193 0050 0023     		movs	r3, #0
 2194 0052 0022     		movs	r2, #0
 2195 0054 0021     		movs	r1, #0
 2196 0056 FFF7FEFF 		bl	xQueueGenericSend
 2197 005a F860     		str	r0, [r7, #12]
 537:Src/app.c     ****   }
 2198              		.loc 1 537 5
 2199 005c FB68     		ldr	r3, [r7, #12]
 2200 005e 012B     		cmp	r3, #1
 2201 0060 06D0     		beq	.L93
 537:Src/app.c     ****   }
 2202              		.loc 1 537 5 is_stmt 0 discriminator 1
 2203 0062 054B     		ldr	r3, .L94
 2204 0064 054A     		ldr	r2, .L94+4
 2205 0066 40F21921 		movw	r1, #537
 2206 006a 0548     		ldr	r0, .L94+8
 2207 006c FFF7FEFF 		bl	__assert_func
 2208              	.L93:
 2209              		.loc 1 539 1 is_stmt 1
 2210 0070 00BF     		nop
 2211 0072 1037     		adds	r7, r7, #16
 2212              		.cfi_def_cfa_offset 8
 2213 0074 BD46     		mov	sp, r7
 2214              		.cfi_def_cfa_register 13
 2215              		@ sp needed
 2216 0076 80BD     		pop	{r7, pc}
 2217              	.L95:
 2218              		.align	2
 2219              	.L94:
 2220 0078 50000000 		.word	.LC9
 2221 007c 00000000 		.word	__func__.21
ARM GAS  /tmp/ccrysqwW.s 			page 61


 2222 0080 38000000 		.word	.LC7
 2223 0084 04ED00E0 		.word	-536810236
 2224              		.cfi_endproc
 2225              	.LFE7376:
 2227              		.section	.rodata
 2228 005e 0000     		.align	2
 2229              	.LC10:
 2230 0060 72657420 		.ascii	"ret == 0\000"
 2230      3D3D2030 
 2230      00
 2231              		.section	.text.reload_bg_layer,"ax",%progbits
 2232              		.align	1
 2233              		.syntax unified
 2234              		.thumb
 2235              		.thumb_func
 2237              	reload_bg_layer:
 2238              	.LFB7377:
 540:Src/app.c     **** 
 541:Src/app.c     **** static void reload_bg_layer(int next_disp_idx)
 542:Src/app.c     **** {
 2239              		.loc 1 542 1
 2240              		.cfi_startproc
 2241              		@ args = 0, pretend = 0, frame = 16
 2242              		@ frame_needed = 1, uses_anonymous_args = 0
 2243 0000 80B5     		push	{r7, lr}
 2244              		.cfi_def_cfa_offset 8
 2245              		.cfi_offset 7, -8
 2246              		.cfi_offset 14, -4
 2247 0002 84B0     		sub	sp, sp, #16
 2248              		.cfi_def_cfa_offset 24
 2249 0004 00AF     		add	r7, sp, #0
 2250              		.cfi_def_cfa_register 7
 2251 0006 7860     		str	r0, [r7, #4]
 543:Src/app.c     ****   int ret;
 544:Src/app.c     **** 
 545:Src/app.c     ****   ret = SCRL_SetAddress_NoReload(lcd_bg_buffer[next_disp_idx], SCRL_LAYER_0);
 2252              		.loc 1 545 47
 2253 0008 7B68     		ldr	r3, [r7, #4]
 2254 000a 194A     		ldr	r2, .L101
 2255 000c 02FB03F3 		mul	r3, r2, r3
 2256 0010 184A     		ldr	r2, .L101+4
 2257 0012 1344     		add	r3, r3, r2
 2258              		.loc 1 545 9
 2259 0014 0021     		movs	r1, #0
 2260 0016 1846     		mov	r0, r3
 2261 0018 FFF7FEFF 		bl	SCRL_SetAddress_NoReload
 2262 001c F860     		str	r0, [r7, #12]
 546:Src/app.c     ****   assert(ret == 0);
 2263              		.loc 1 546 3
 2264 001e FB68     		ldr	r3, [r7, #12]
 2265 0020 002B     		cmp	r3, #0
 2266 0022 06D0     		beq	.L97
 2267              		.loc 1 546 3 is_stmt 0 discriminator 1
 2268 0024 144B     		ldr	r3, .L101+8
 2269 0026 154A     		ldr	r2, .L101+12
 2270 0028 40F22221 		movw	r1, #546
 2271 002c 1448     		ldr	r0, .L101+16
ARM GAS  /tmp/ccrysqwW.s 			page 62


 2272 002e FFF7FEFF 		bl	__assert_func
 2273              	.L97:
 547:Src/app.c     ****   ret = SCRL_ReloadLayer(SCRL_LAYER_0);
 2274              		.loc 1 547 9 is_stmt 1
 2275 0032 0020     		movs	r0, #0
 2276 0034 FFF7FEFF 		bl	SCRL_ReloadLayer
 2277 0038 F860     		str	r0, [r7, #12]
 548:Src/app.c     ****   assert(ret == 0);
 2278              		.loc 1 548 3
 2279 003a FB68     		ldr	r3, [r7, #12]
 2280 003c 002B     		cmp	r3, #0
 2281 003e 06D0     		beq	.L98
 2282              		.loc 1 548 3 is_stmt 0 discriminator 1
 2283 0040 0D4B     		ldr	r3, .L101+8
 2284 0042 0E4A     		ldr	r2, .L101+12
 2285 0044 4FF40971 		mov	r1, #548
 2286 0048 0D48     		ldr	r0, .L101+16
 2287 004a FFF7FEFF 		bl	__assert_func
 2288              	.L98:
 549:Src/app.c     **** 
 550:Src/app.c     ****   ret = SRCL_Update();
 2289              		.loc 1 550 9 is_stmt 1
 2290 004e FFF7FEFF 		bl	SRCL_Update
 2291 0052 F860     		str	r0, [r7, #12]
 551:Src/app.c     ****   assert(ret == 0);
 2292              		.loc 1 551 3
 2293 0054 FB68     		ldr	r3, [r7, #12]
 2294 0056 002B     		cmp	r3, #0
 2295 0058 06D0     		beq	.L100
 2296              		.loc 1 551 3 is_stmt 0 discriminator 1
 2297 005a 074B     		ldr	r3, .L101+8
 2298 005c 074A     		ldr	r2, .L101+12
 2299 005e 40F22721 		movw	r1, #551
 2300 0062 0748     		ldr	r0, .L101+16
 2301 0064 FFF7FEFF 		bl	__assert_func
 2302              	.L100:
 552:Src/app.c     **** }
 2303              		.loc 1 552 1 is_stmt 1
 2304 0068 00BF     		nop
 2305 006a 1037     		adds	r7, r7, #16
 2306              		.cfi_def_cfa_offset 8
 2307 006c BD46     		mov	sp, r7
 2308              		.cfi_def_cfa_register 13
 2309              		@ sp needed
 2310 006e 80BD     		pop	{r7, pc}
 2311              	.L102:
 2312              		.align	2
 2313              	.L101:
 2314 0070 00701700 		.word	1536000
 2315 0074 00000000 		.word	lcd_bg_buffer
 2316 0078 60000000 		.word	.LC10
 2317 007c 00000000 		.word	__func__.20
 2318 0080 38000000 		.word	.LC7
 2319              		.cfi_endproc
 2320              	.LFE7377:
 2322              		.section	.rodata
 2323 0069 000000   		.align	2
ARM GAS  /tmp/ccrysqwW.s 			page 63


 2324              	.LC11:
 2325 006c 72657420 		.ascii	"ret == HAL_OK\000"
 2325      3D3D2048 
 2325      414C5F4F 
 2325      4B00
 2326              		.section	.text.app_main_pipe_frame_event,"ax",%progbits
 2327              		.align	1
 2328              		.syntax unified
 2329              		.thumb
 2330              		.thumb_func
 2332              	app_main_pipe_frame_event:
 2333              	.LFB7378:
 553:Src/app.c     **** 
 554:Src/app.c     **** static void app_main_pipe_frame_event()
 555:Src/app.c     **** {
 2334              		.loc 1 555 1
 2335              		.cfi_startproc
 2336              		@ args = 0, pretend = 0, frame = 16
 2337              		@ frame_needed = 1, uses_anonymous_args = 0
 2338 0000 80B5     		push	{r7, lr}
 2339              		.cfi_def_cfa_offset 8
 2340              		.cfi_offset 7, -8
 2341              		.cfi_offset 14, -4
 2342 0002 84B0     		sub	sp, sp, #16
 2343              		.cfi_def_cfa_offset 24
 2344 0004 00AF     		add	r7, sp, #0
 2345              		.cfi_def_cfa_register 7
 556:Src/app.c     ****   int next_disp_idx = (lcd_bg_buffer_disp_idx + 1) % DISPLAY_BUFFER_NB;
 2346              		.loc 1 556 47
 2347 0006 204B     		ldr	r3, .L105
 2348 0008 1B68     		ldr	r3, [r3]
 2349 000a 0133     		adds	r3, r3, #1
 2350              		.loc 1 556 7
 2351 000c 5A42     		rsbs	r2, r3, #0
 2352 000e 03F00303 		and	r3, r3, #3
 2353 0012 02F00302 		and	r2, r2, #3
 2354 0016 53EA42B3 		csneg	r3, r3, r2, mi
 2355 001a FB60     		str	r3, [r7, #12]
 557:Src/app.c     ****   int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
 2356              		.loc 1 557 47
 2357 001c 1B4B     		ldr	r3, .L105+4
 2358 001e 1B68     		ldr	r3, [r3]
 2359 0020 0133     		adds	r3, r3, #1
 2360              		.loc 1 557 7
 2361 0022 5A42     		rsbs	r2, r3, #0
 2362 0024 03F00303 		and	r3, r3, #3
 2363 0028 02F00302 		and	r2, r2, #3
 2364 002c 53EA42B3 		csneg	r3, r3, r2, mi
 2365 0030 BB60     		str	r3, [r7, #8]
 558:Src/app.c     ****   int ret;
 559:Src/app.c     **** 
 560:Src/app.c     ****   ret = HAL_DCMIPP_PIPE_SetMemoryAddress(CMW_CAMERA_GetDCMIPPHandle(), DCMIPP_PIPE1,
 2366              		.loc 1 560 9
 2367 0032 FFF7FEFF 		bl	CMW_CAMERA_GetDCMIPPHandle
 561:Src/app.c     ****                                          DCMIPP_MEMORY_ADDRESS_0, (uint32_t) lcd_bg_buffer[next_cap
 2368              		.loc 1 561 78
 2369 0036 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccrysqwW.s 			page 64


 2370 0038 154A     		ldr	r2, .L105+8
 2371 003a 02FB03F3 		mul	r3, r2, r3
 2372 003e 154A     		ldr	r2, .L105+12
 2373 0040 1344     		add	r3, r3, r2
 560:Src/app.c     ****                                          DCMIPP_MEMORY_ADDRESS_0, (uint32_t) lcd_bg_buffer[next_cap
 2374              		.loc 1 560 9
 2375 0042 0022     		movs	r2, #0
 2376 0044 0121     		movs	r1, #1
 2377 0046 FFF7FEFF 		bl	HAL_DCMIPP_PIPE_SetMemoryAddress
 2378 004a 0346     		mov	r3, r0
 560:Src/app.c     ****                                          DCMIPP_MEMORY_ADDRESS_0, (uint32_t) lcd_bg_buffer[next_cap
 2379              		.loc 1 560 7 discriminator 2
 2380 004c 7B60     		str	r3, [r7, #4]
 562:Src/app.c     ****   assert(ret == HAL_OK);
 2381              		.loc 1 562 3
 2382 004e 7B68     		ldr	r3, [r7, #4]
 2383 0050 002B     		cmp	r3, #0
 2384 0052 06D0     		beq	.L104
 2385              		.loc 1 562 3 is_stmt 0 discriminator 1
 2386 0054 104B     		ldr	r3, .L105+16
 2387 0056 114A     		ldr	r2, .L105+20
 2388 0058 40F23221 		movw	r1, #562
 2389 005c 1048     		ldr	r0, .L105+24
 2390 005e FFF7FEFF 		bl	__assert_func
 2391              	.L104:
 563:Src/app.c     **** 
 564:Src/app.c     ****   reload_bg_layer(next_disp_idx);
 2392              		.loc 1 564 3 is_stmt 1
 2393 0062 F868     		ldr	r0, [r7, #12]
 2394 0064 FFF7FEFF 		bl	reload_bg_layer
 565:Src/app.c     ****   lcd_bg_buffer_disp_idx = next_disp_idx;
 2395              		.loc 1 565 26
 2396 0068 074A     		ldr	r2, .L105
 2397 006a FB68     		ldr	r3, [r7, #12]
 2398 006c 1360     		str	r3, [r2]
 566:Src/app.c     ****   lcd_bg_buffer_capt_idx = next_capt_idx;
 2399              		.loc 1 566 26
 2400 006e 074A     		ldr	r2, .L105+4
 2401 0070 BB68     		ldr	r3, [r7, #8]
 2402 0072 1360     		str	r3, [r2]
 567:Src/app.c     **** 
 568:Src/app.c     ****   frame_event_nb++;
 2403              		.loc 1 568 17
 2404 0074 0B4B     		ldr	r3, .L105+28
 2405 0076 1B68     		ldr	r3, [r3]
 2406 0078 0133     		adds	r3, r3, #1
 2407 007a 0A4A     		ldr	r2, .L105+28
 2408 007c 1360     		str	r3, [r2]
 569:Src/app.c     **** }
 2409              		.loc 1 569 1
 2410 007e 00BF     		nop
 2411 0080 1037     		adds	r7, r7, #16
 2412              		.cfi_def_cfa_offset 8
 2413 0082 BD46     		mov	sp, r7
 2414              		.cfi_def_cfa_register 13
 2415              		@ sp needed
 2416 0084 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccrysqwW.s 			page 65


 2417              	.L106:
 2418 0086 00BF     		.align	2
 2419              	.L105:
 2420 0088 00000000 		.word	lcd_bg_buffer_disp_idx
 2421 008c 00000000 		.word	lcd_bg_buffer_capt_idx
 2422 0090 00701700 		.word	1536000
 2423 0094 00000000 		.word	lcd_bg_buffer
 2424 0098 6C000000 		.word	.LC11
 2425 009c 00000000 		.word	__func__.19
 2426 00a0 38000000 		.word	.LC7
 2427 00a4 00000000 		.word	frame_event_nb
 2428              		.cfi_endproc
 2429              	.LFE7378:
 2431              		.section	.text.app_ancillary_pipe_frame_event,"ax",%progbits
 2432              		.align	1
 2433              		.syntax unified
 2434              		.thumb
 2435              		.thumb_func
 2437              	app_ancillary_pipe_frame_event:
 2438              	.LFB7379:
 570:Src/app.c     **** 
 571:Src/app.c     **** 
 572:Src/app.c     **** static void app_ancillary_pipe_frame_event()
 573:Src/app.c     **** {
 2439              		.loc 1 573 1
 2440              		.cfi_startproc
 2441              		@ args = 0, pretend = 0, frame = 8
 2442              		@ frame_needed = 1, uses_anonymous_args = 0
 2443 0000 80B5     		push	{r7, lr}
 2444              		.cfi_def_cfa_offset 8
 2445              		.cfi_offset 7, -8
 2446              		.cfi_offset 14, -4
 2447 0002 82B0     		sub	sp, sp, #8
 2448              		.cfi_def_cfa_offset 16
 2449 0004 00AF     		add	r7, sp, #0
 2450              		.cfi_def_cfa_register 7
 574:Src/app.c     ****   uint8_t *next_buffer;
 575:Src/app.c     ****   int ret;
 576:Src/app.c     **** 
 577:Src/app.c     ****   next_buffer = bqueue_get_free(&nn_input_queue, 0);
 2451              		.loc 1 577 17
 2452 0006 0021     		movs	r1, #0
 2453 0008 1248     		ldr	r0, .L111
 2454 000a FFF7FEFF 		bl	bqueue_get_free
 2455 000e 7860     		str	r0, [r7, #4]
 578:Src/app.c     ****   if (next_buffer) {
 2456              		.loc 1 578 6
 2457 0010 7B68     		ldr	r3, [r7, #4]
 2458 0012 002B     		cmp	r3, #0
 2459 0014 1AD0     		beq	.L110
 579:Src/app.c     ****     ret = HAL_DCMIPP_PIPE_SetMemoryAddress(CMW_CAMERA_GetDCMIPPHandle(), DCMIPP_PIPE2,
 2460              		.loc 1 579 11
 2461 0016 FFF7FEFF 		bl	CMW_CAMERA_GetDCMIPPHandle
 2462              		.loc 1 579 11 is_stmt 0 discriminator 1
 2463 001a 7B68     		ldr	r3, [r7, #4]
 2464 001c 0022     		movs	r2, #0
 2465 001e 0221     		movs	r1, #2
ARM GAS  /tmp/ccrysqwW.s 			page 66


 2466 0020 FFF7FEFF 		bl	HAL_DCMIPP_PIPE_SetMemoryAddress
 2467 0024 0346     		mov	r3, r0
 2468              		.loc 1 579 9 is_stmt 1 discriminator 2
 2469 0026 3B60     		str	r3, [r7]
 580:Src/app.c     ****                                            DCMIPP_MEMORY_ADDRESS_0, (uint32_t) next_buffer);
 581:Src/app.c     ****     assert(ret == HAL_OK);
 2470              		.loc 1 581 5
 2471 0028 3B68     		ldr	r3, [r7]
 2472 002a 002B     		cmp	r3, #0
 2473 002c 06D0     		beq	.L109
 2474              		.loc 1 581 5 is_stmt 0 discriminator 1
 2475 002e 0A4B     		ldr	r3, .L111+4
 2476 0030 0A4A     		ldr	r2, .L111+8
 2477 0032 40F24521 		movw	r1, #581
 2478 0036 0A48     		ldr	r0, .L111+12
 2479 0038 FFF7FEFF 		bl	__assert_func
 2480              	.L109:
 582:Src/app.c     ****     /* minus 1 since app_main_pipe_frame_event occur before app_ancillary_pipe_frame_event() */
 583:Src/app.c     ****     frame_event_nb_for_resize = frame_event_nb - 1;
 2481              		.loc 1 583 48 is_stmt 1
 2482 003c 094B     		ldr	r3, .L111+16
 2483 003e 1B68     		ldr	r3, [r3]
 2484 0040 013B     		subs	r3, r3, #1
 2485              		.loc 1 583 31
 2486 0042 094A     		ldr	r2, .L111+20
 2487 0044 1360     		str	r3, [r2]
 584:Src/app.c     ****     bqueue_put_ready(&nn_input_queue);
 2488              		.loc 1 584 5
 2489 0046 0348     		ldr	r0, .L111
 2490 0048 FFF7FEFF 		bl	bqueue_put_ready
 2491              	.L110:
 585:Src/app.c     ****   }
 586:Src/app.c     **** }
 2492              		.loc 1 586 1
 2493 004c 00BF     		nop
 2494 004e 0837     		adds	r7, r7, #8
 2495              		.cfi_def_cfa_offset 8
 2496 0050 BD46     		mov	sp, r7
 2497              		.cfi_def_cfa_register 13
 2498              		@ sp needed
 2499 0052 80BD     		pop	{r7, pc}
 2500              	.L112:
 2501              		.align	2
 2502              	.L111:
 2503 0054 00000000 		.word	nn_input_queue
 2504 0058 6C000000 		.word	.LC11
 2505 005c 00000000 		.word	__func__.18
 2506 0060 38000000 		.word	.LC7
 2507 0064 00000000 		.word	frame_event_nb
 2508 0068 00000000 		.word	frame_event_nb_for_resize
 2509              		.cfi_endproc
 2510              	.LFE7379:
 2512              		.section	.text.app_main_pipe_vsync_event,"ax",%progbits
 2513              		.align	1
 2514              		.syntax unified
 2515              		.thumb
 2516              		.thumb_func
ARM GAS  /tmp/ccrysqwW.s 			page 67


 2518              	app_main_pipe_vsync_event:
 2519              	.LFB7380:
 587:Src/app.c     **** 
 588:Src/app.c     **** static void app_main_pipe_vsync_event()
 589:Src/app.c     **** {
 2520              		.loc 1 589 1
 2521              		.cfi_startproc
 2522              		@ args = 0, pretend = 0, frame = 8
 2523              		@ frame_needed = 1, uses_anonymous_args = 0
 2524 0000 80B5     		push	{r7, lr}
 2525              		.cfi_def_cfa_offset 8
 2526              		.cfi_offset 7, -8
 2527              		.cfi_offset 14, -4
 2528 0002 82B0     		sub	sp, sp, #8
 2529              		.cfi_def_cfa_offset 16
 2530 0004 00AF     		add	r7, sp, #0
 2531              		.cfi_def_cfa_register 7
 590:Src/app.c     ****   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 2532              		.loc 1 590 14
 2533 0006 0023     		movs	r3, #0
 2534 0008 3B60     		str	r3, [r7]
 591:Src/app.c     ****   int ret;
 592:Src/app.c     **** 
 593:Src/app.c     ****   ret = xSemaphoreGiveFromISR(isp_sem, &xHigherPriorityTaskWoken);
 2535              		.loc 1 593 9
 2536 000a 0B4B     		ldr	r3, .L116
 2537 000c 1B68     		ldr	r3, [r3]
 2538 000e 3A46     		mov	r2, r7
 2539 0010 1146     		mov	r1, r2
 2540 0012 1846     		mov	r0, r3
 2541 0014 FFF7FEFF 		bl	xQueueGiveFromISR
 2542 0018 7860     		str	r0, [r7, #4]
 594:Src/app.c     ****   if (ret == pdTRUE)
 2543              		.loc 1 594 6
 2544 001a 7B68     		ldr	r3, [r7, #4]
 2545 001c 012B     		cmp	r3, #1
 2546 001e 06D1     		bne	.L115
 595:Src/app.c     ****     portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 2547              		.loc 1 595 5
 2548 0020 3B68     		ldr	r3, [r7]
 2549 0022 002B     		cmp	r3, #0
 2550 0024 03D0     		beq	.L115
 2551              		.loc 1 595 5 is_stmt 0 discriminator 1
 2552 0026 054B     		ldr	r3, .L116+4
 2553 0028 4FF08052 		mov	r2, #268435456
 2554 002c 1A60     		str	r2, [r3]
 2555              	.L115:
 596:Src/app.c     **** }
 2556              		.loc 1 596 1 is_stmt 1
 2557 002e 00BF     		nop
 2558 0030 0837     		adds	r7, r7, #8
 2559              		.cfi_def_cfa_offset 8
 2560 0032 BD46     		mov	sp, r7
 2561              		.cfi_def_cfa_register 13
 2562              		@ sp needed
 2563 0034 80BD     		pop	{r7, pc}
 2564              	.L117:
ARM GAS  /tmp/ccrysqwW.s 			page 68


 2565 0036 00BF     		.align	2
 2566              	.L116:
 2567 0038 00000000 		.word	isp_sem
 2568 003c 04ED00E0 		.word	-536810236
 2569              		.cfi_endproc
 2570              	.LFE7380:
 2572              		.section	.text.clamp_point,"ax",%progbits
 2573              		.align	1
 2574              		.syntax unified
 2575              		.thumb
 2576              		.thumb_func
 2578              	clamp_point:
 2579              	.LFB7381:
 597:Src/app.c     **** 
 598:Src/app.c     **** static int clamp_point(int *x, int *y)
 599:Src/app.c     **** {
 2580              		.loc 1 599 1
 2581              		.cfi_startproc
 2582              		@ args = 0, pretend = 0, frame = 16
 2583              		@ frame_needed = 1, uses_anonymous_args = 0
 2584              		@ link register save eliminated.
 2585 0000 80B4     		push	{r7}
 2586              		.cfi_def_cfa_offset 4
 2587              		.cfi_offset 7, -4
 2588 0002 85B0     		sub	sp, sp, #20
 2589              		.cfi_def_cfa_offset 24
 2590 0004 00AF     		add	r7, sp, #0
 2591              		.cfi_def_cfa_register 7
 2592 0006 7860     		str	r0, [r7, #4]
 2593 0008 3960     		str	r1, [r7]
 600:Src/app.c     ****   int xi = *x;
 2594              		.loc 1 600 7
 2595 000a 7B68     		ldr	r3, [r7, #4]
 2596 000c 1B68     		ldr	r3, [r3]
 2597 000e FB60     		str	r3, [r7, #12]
 601:Src/app.c     ****   int yi = *y;
 2598              		.loc 1 601 7
 2599 0010 3B68     		ldr	r3, [r7]
 2600 0012 1B68     		ldr	r3, [r3]
 2601 0014 BB60     		str	r3, [r7, #8]
 602:Src/app.c     **** 
 603:Src/app.c     ****   if (*x < 0)
 2602              		.loc 1 603 7
 2603 0016 7B68     		ldr	r3, [r7, #4]
 2604 0018 1B68     		ldr	r3, [r3]
 2605              		.loc 1 603 6
 2606 001a 002B     		cmp	r3, #0
 2607 001c 02DA     		bge	.L119
 604:Src/app.c     ****     *x = 0;
 2608              		.loc 1 604 8
 2609 001e 7B68     		ldr	r3, [r7, #4]
 2610 0020 0022     		movs	r2, #0
 2611 0022 1A60     		str	r2, [r3]
 2612              	.L119:
 605:Src/app.c     ****   if (*y < 0)
 2613              		.loc 1 605 7
 2614 0024 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccrysqwW.s 			page 69


 2615 0026 1B68     		ldr	r3, [r3]
 2616              		.loc 1 605 6
 2617 0028 002B     		cmp	r3, #0
 2618 002a 02DA     		bge	.L120
 606:Src/app.c     ****     *y = 0;
 2619              		.loc 1 606 8
 2620 002c 3B68     		ldr	r3, [r7]
 2621 002e 0022     		movs	r2, #0
 2622 0030 1A60     		str	r2, [r3]
 2623              	.L120:
 607:Src/app.c     ****   if (*x >= lcd_bg_area.XSize)
 2624              		.loc 1 607 7
 2625 0032 7B68     		ldr	r3, [r7, #4]
 2626 0034 1B68     		ldr	r3, [r3]
 2627 0036 1A46     		mov	r2, r3
 2628              		.loc 1 607 24
 2629 0038 144B     		ldr	r3, .L127
 2630 003a 9B68     		ldr	r3, [r3, #8]
 2631              		.loc 1 607 6
 2632 003c 9A42     		cmp	r2, r3
 2633 003e 05D3     		bcc	.L121
 608:Src/app.c     ****     *x = lcd_bg_area.XSize - 1;
 2634              		.loc 1 608 21
 2635 0040 124B     		ldr	r3, .L127
 2636 0042 9B68     		ldr	r3, [r3, #8]
 2637              		.loc 1 608 28
 2638 0044 013B     		subs	r3, r3, #1
 2639 0046 1A46     		mov	r2, r3
 2640              		.loc 1 608 8
 2641 0048 7B68     		ldr	r3, [r7, #4]
 2642 004a 1A60     		str	r2, [r3]
 2643              	.L121:
 609:Src/app.c     ****   if (*y >= lcd_bg_area.YSize)
 2644              		.loc 1 609 7
 2645 004c 3B68     		ldr	r3, [r7]
 2646 004e 1B68     		ldr	r3, [r3]
 2647 0050 1A46     		mov	r2, r3
 2648              		.loc 1 609 24
 2649 0052 0E4B     		ldr	r3, .L127
 2650 0054 DB68     		ldr	r3, [r3, #12]
 2651              		.loc 1 609 6
 2652 0056 9A42     		cmp	r2, r3
 2653 0058 05D3     		bcc	.L122
 610:Src/app.c     ****     *y = lcd_bg_area.YSize - 1;
 2654              		.loc 1 610 21
 2655 005a 0C4B     		ldr	r3, .L127
 2656 005c DB68     		ldr	r3, [r3, #12]
 2657              		.loc 1 610 28
 2658 005e 013B     		subs	r3, r3, #1
 2659 0060 1A46     		mov	r2, r3
 2660              		.loc 1 610 8
 2661 0062 3B68     		ldr	r3, [r7]
 2662 0064 1A60     		str	r2, [r3]
 2663              	.L122:
 611:Src/app.c     **** 
 612:Src/app.c     ****   return (xi != *x) || (yi != *y);
 2664              		.loc 1 612 17
ARM GAS  /tmp/ccrysqwW.s 			page 70


 2665 0066 7B68     		ldr	r3, [r7, #4]
 2666 0068 1B68     		ldr	r3, [r3]
 2667              		.loc 1 612 21
 2668 006a FA68     		ldr	r2, [r7, #12]
 2669 006c 9A42     		cmp	r2, r3
 2670 006e 04D1     		bne	.L123
 2671              		.loc 1 612 31 discriminator 2
 2672 0070 3B68     		ldr	r3, [r7]
 2673 0072 1B68     		ldr	r3, [r3]
 2674              		.loc 1 612 21 discriminator 2
 2675 0074 BA68     		ldr	r2, [r7, #8]
 2676 0076 9A42     		cmp	r2, r3
 2677 0078 01D0     		beq	.L124
 2678              	.L123:
 2679              		.loc 1 612 21 is_stmt 0 discriminator 3
 2680 007a 0123     		movs	r3, #1
 2681              		.loc 1 612 21
 2682 007c 00E0     		b	.L126
 2683              	.L124:
 2684              		.loc 1 612 21 discriminator 4
 2685 007e 0023     		movs	r3, #0
 2686              	.L126:
 613:Src/app.c     **** }
 2687              		.loc 1 613 1 is_stmt 1
 2688 0080 1846     		mov	r0, r3
 2689 0082 1437     		adds	r7, r7, #20
 2690              		.cfi_def_cfa_offset 4
 2691 0084 BD46     		mov	sp, r7
 2692              		.cfi_def_cfa_register 13
 2693              		@ sp needed
 2694 0086 5DF8047B 		ldr	r7, [sp], #4
 2695              		.cfi_restore 7
 2696              		.cfi_def_cfa_offset 0
 2697 008a 7047     		bx	lr
 2698              	.L128:
 2699              		.align	2
 2700              	.L127:
 2701 008c 00000000 		.word	lcd_bg_area
 2702              		.cfi_endproc
 2703              	.LFE7381:
 2705              		.section	.text.clamp_point_with_margin,"ax",%progbits
 2706              		.align	1
 2707              		.syntax unified
 2708              		.thumb
 2709              		.thumb_func
 2711              	clamp_point_with_margin:
 2712              	.LFB7382:
 614:Src/app.c     **** 
 615:Src/app.c     **** static int clamp_point_with_margin(int *x, int *y, int margin)
 616:Src/app.c     **** {
 2713              		.loc 1 616 1
 2714              		.cfi_startproc
 2715              		@ args = 0, pretend = 0, frame = 24
 2716              		@ frame_needed = 1, uses_anonymous_args = 0
 2717              		@ link register save eliminated.
 2718 0000 80B4     		push	{r7}
 2719              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccrysqwW.s 			page 71


 2720              		.cfi_offset 7, -4
 2721 0002 87B0     		sub	sp, sp, #28
 2722              		.cfi_def_cfa_offset 32
 2723 0004 00AF     		add	r7, sp, #0
 2724              		.cfi_def_cfa_register 7
 2725 0006 F860     		str	r0, [r7, #12]
 2726 0008 B960     		str	r1, [r7, #8]
 2727 000a 7A60     		str	r2, [r7, #4]
 617:Src/app.c     ****   int xi = *x;
 2728              		.loc 1 617 7
 2729 000c FB68     		ldr	r3, [r7, #12]
 2730 000e 1B68     		ldr	r3, [r3]
 2731 0010 7B61     		str	r3, [r7, #20]
 618:Src/app.c     ****   int yi = *y;
 2732              		.loc 1 618 7
 2733 0012 BB68     		ldr	r3, [r7, #8]
 2734 0014 1B68     		ldr	r3, [r3]
 2735 0016 3B61     		str	r3, [r7, #16]
 619:Src/app.c     **** 
 620:Src/app.c     ****   if (*x < margin)
 2736              		.loc 1 620 7
 2737 0018 FB68     		ldr	r3, [r7, #12]
 2738 001a 1B68     		ldr	r3, [r3]
 2739              		.loc 1 620 6
 2740 001c 7A68     		ldr	r2, [r7, #4]
 2741 001e 9A42     		cmp	r2, r3
 2742 0020 02DD     		ble	.L130
 621:Src/app.c     ****     *x = margin;
 2743              		.loc 1 621 8
 2744 0022 FB68     		ldr	r3, [r7, #12]
 2745 0024 7A68     		ldr	r2, [r7, #4]
 2746 0026 1A60     		str	r2, [r3]
 2747              	.L130:
 622:Src/app.c     ****   if (*y < margin)
 2748              		.loc 1 622 7
 2749 0028 BB68     		ldr	r3, [r7, #8]
 2750 002a 1B68     		ldr	r3, [r3]
 2751              		.loc 1 622 6
 2752 002c 7A68     		ldr	r2, [r7, #4]
 2753 002e 9A42     		cmp	r2, r3
 2754 0030 02DD     		ble	.L131
 623:Src/app.c     ****     *y = margin;
 2755              		.loc 1 623 8
 2756 0032 BB68     		ldr	r3, [r7, #8]
 2757 0034 7A68     		ldr	r2, [r7, #4]
 2758 0036 1A60     		str	r2, [r3]
 2759              	.L131:
 624:Src/app.c     ****   if (*x >= lcd_bg_area.XSize - margin)
 2760              		.loc 1 624 7
 2761 0038 FB68     		ldr	r3, [r7, #12]
 2762 003a 1B68     		ldr	r3, [r3]
 2763 003c 1946     		mov	r1, r3
 2764              		.loc 1 624 24
 2765 003e 194B     		ldr	r3, .L138
 2766 0040 9A68     		ldr	r2, [r3, #8]
 2767              		.loc 1 624 31
 2768 0042 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccrysqwW.s 			page 72


 2769 0044 D31A     		subs	r3, r2, r3
 2770              		.loc 1 624 6
 2771 0046 9942     		cmp	r1, r3
 2772 0048 07D3     		bcc	.L132
 625:Src/app.c     ****     *x = lcd_bg_area.XSize - margin - 1;
 2773              		.loc 1 625 21
 2774 004a 164B     		ldr	r3, .L138
 2775 004c 9A68     		ldr	r2, [r3, #8]
 2776              		.loc 1 625 28
 2777 004e 7B68     		ldr	r3, [r7, #4]
 2778 0050 D31A     		subs	r3, r2, r3
 2779              		.loc 1 625 37
 2780 0052 013B     		subs	r3, r3, #1
 2781 0054 1A46     		mov	r2, r3
 2782              		.loc 1 625 8
 2783 0056 FB68     		ldr	r3, [r7, #12]
 2784 0058 1A60     		str	r2, [r3]
 2785              	.L132:
 626:Src/app.c     ****   if (*y >= lcd_bg_area.YSize - margin)
 2786              		.loc 1 626 7
 2787 005a BB68     		ldr	r3, [r7, #8]
 2788 005c 1B68     		ldr	r3, [r3]
 2789 005e 1946     		mov	r1, r3
 2790              		.loc 1 626 24
 2791 0060 104B     		ldr	r3, .L138
 2792 0062 DA68     		ldr	r2, [r3, #12]
 2793              		.loc 1 626 31
 2794 0064 7B68     		ldr	r3, [r7, #4]
 2795 0066 D31A     		subs	r3, r2, r3
 2796              		.loc 1 626 6
 2797 0068 9942     		cmp	r1, r3
 2798 006a 07D3     		bcc	.L133
 627:Src/app.c     ****     *y = lcd_bg_area.YSize - margin - 1;
 2799              		.loc 1 627 21
 2800 006c 0D4B     		ldr	r3, .L138
 2801 006e DA68     		ldr	r2, [r3, #12]
 2802              		.loc 1 627 28
 2803 0070 7B68     		ldr	r3, [r7, #4]
 2804 0072 D31A     		subs	r3, r2, r3
 2805              		.loc 1 627 37
 2806 0074 013B     		subs	r3, r3, #1
 2807 0076 1A46     		mov	r2, r3
 2808              		.loc 1 627 8
 2809 0078 BB68     		ldr	r3, [r7, #8]
 2810 007a 1A60     		str	r2, [r3]
 2811              	.L133:
 628:Src/app.c     **** 
 629:Src/app.c     ****   return (xi != *x) || (yi != *y);
 2812              		.loc 1 629 17
 2813 007c FB68     		ldr	r3, [r7, #12]
 2814 007e 1B68     		ldr	r3, [r3]
 2815              		.loc 1 629 21
 2816 0080 7A69     		ldr	r2, [r7, #20]
 2817 0082 9A42     		cmp	r2, r3
 2818 0084 04D1     		bne	.L134
 2819              		.loc 1 629 31 discriminator 2
 2820 0086 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccrysqwW.s 			page 73


 2821 0088 1B68     		ldr	r3, [r3]
 2822              		.loc 1 629 21 discriminator 2
 2823 008a 3A69     		ldr	r2, [r7, #16]
 2824 008c 9A42     		cmp	r2, r3
 2825 008e 01D0     		beq	.L135
 2826              	.L134:
 2827              		.loc 1 629 21 is_stmt 0 discriminator 3
 2828 0090 0123     		movs	r3, #1
 2829              		.loc 1 629 21
 2830 0092 00E0     		b	.L137
 2831              	.L135:
 2832              		.loc 1 629 21 discriminator 4
 2833 0094 0023     		movs	r3, #0
 2834              	.L137:
 630:Src/app.c     **** }
 2835              		.loc 1 630 1 is_stmt 1
 2836 0096 1846     		mov	r0, r3
 2837 0098 1C37     		adds	r7, r7, #28
 2838              		.cfi_def_cfa_offset 4
 2839 009a BD46     		mov	sp, r7
 2840              		.cfi_def_cfa_register 13
 2841              		@ sp needed
 2842 009c 5DF8047B 		ldr	r7, [sp], #4
 2843              		.cfi_restore 7
 2844              		.cfi_def_cfa_offset 0
 2845 00a0 7047     		bx	lr
 2846              	.L139:
 2847 00a2 00BF     		.align	2
 2848              	.L138:
 2849 00a4 00000000 		.word	lcd_bg_area
 2850              		.cfi_endproc
 2851              	.LFE7382:
 2853              		.section	.text.display_pd_hand,"ax",%progbits
 2854              		.align	1
 2855              		.syntax unified
 2856              		.thumb
 2857              		.thumb_func
 2859              	display_pd_hand:
 2860              	.LFB7383:
 631:Src/app.c     **** 
 632:Src/app.c     **** static void display_pd_hand(pd_pp_box_t *hand)
 633:Src/app.c     **** {
 2861              		.loc 1 633 1
 2862              		.cfi_startproc
 2863              		@ args = 0, pretend = 0, frame = 48
 2864              		@ frame_needed = 1, uses_anonymous_args = 0
 2865 0000 90B5     		push	{r4, r7, lr}
 2866              		.cfi_def_cfa_offset 12
 2867              		.cfi_offset 4, -12
 2868              		.cfi_offset 7, -8
 2869              		.cfi_offset 14, -4
 2870 0002 8FB0     		sub	sp, sp, #60
 2871              		.cfi_def_cfa_offset 72
 2872 0004 02AF     		add	r7, sp, #8
 2873              		.cfi_def_cfa 7, 64
 2874 0006 7860     		str	r0, [r7, #4]
 634:Src/app.c     ****   int xc, yc;
ARM GAS  /tmp/ccrysqwW.s 			page 74


 635:Src/app.c     ****   int x0, y0;
 636:Src/app.c     ****   int x1, y1;
 637:Src/app.c     ****   int w, h;
 638:Src/app.c     ****   int i;
 639:Src/app.c     **** 
 640:Src/app.c     ****   /* display box around palm */
 641:Src/app.c     ****   xc = (int)hand->x_center;
 2875              		.loc 1 641 17
 2876 0008 7B68     		ldr	r3, [r7, #4]
 2877 000a D3ED017A 		vldr.32	s15, [r3, #4]
 2878              		.loc 1 641 6
 2879 000e FDEEE77A 		vcvt.s32.f32	s15, s15
 2880 0012 17EE903A 		vmov	r3, s15	@ int
 2881 0016 BB62     		str	r3, [r7, #40]
 642:Src/app.c     ****   yc = (int)hand->y_center;
 2882              		.loc 1 642 17
 2883 0018 7B68     		ldr	r3, [r7, #4]
 2884 001a D3ED027A 		vldr.32	s15, [r3, #8]
 2885              		.loc 1 642 6
 2886 001e FDEEE77A 		vcvt.s32.f32	s15, s15
 2887 0022 17EE903A 		vmov	r3, s15	@ int
 2888 0026 7B62     		str	r3, [r7, #36]
 643:Src/app.c     ****   w = (int)hand->width;
 2889              		.loc 1 643 16
 2890 0028 7B68     		ldr	r3, [r7, #4]
 2891 002a D3ED037A 		vldr.32	s15, [r3, #12]
 2892              		.loc 1 643 5
 2893 002e FDEEE77A 		vcvt.s32.f32	s15, s15
 2894 0032 17EE903A 		vmov	r3, s15	@ int
 2895 0036 3B62     		str	r3, [r7, #32]
 644:Src/app.c     ****   h = (int)hand->height;
 2896              		.loc 1 644 16
 2897 0038 7B68     		ldr	r3, [r7, #4]
 2898 003a D3ED047A 		vldr.32	s15, [r3, #16]
 2899              		.loc 1 644 5
 2900 003e FDEEE77A 		vcvt.s32.f32	s15, s15
 2901 0042 17EE903A 		vmov	r3, s15	@ int
 2902 0046 FB61     		str	r3, [r7, #28]
 645:Src/app.c     ****   x0 = xc - (w + 1) / 2;
 2903              		.loc 1 645 16
 2904 0048 3B6A     		ldr	r3, [r7, #32]
 2905 004a 0133     		adds	r3, r3, #1
 2906              		.loc 1 645 21
 2907 004c DA0F     		lsrs	r2, r3, #31
 2908 004e 1344     		add	r3, r3, r2
 2909 0050 5B10     		asrs	r3, r3, #1
 2910 0052 5B42     		rsbs	r3, r3, #0
 2911 0054 1A46     		mov	r2, r3
 2912              		.loc 1 645 11
 2913 0056 BB6A     		ldr	r3, [r7, #40]
 2914 0058 1344     		add	r3, r3, r2
 2915              		.loc 1 645 6
 2916 005a 7B61     		str	r3, [r7, #20]
 646:Src/app.c     ****   y0 = yc - (h + 1) / 2;
 2917              		.loc 1 646 16
 2918 005c FB69     		ldr	r3, [r7, #28]
 2919 005e 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccrysqwW.s 			page 75


 2920              		.loc 1 646 21
 2921 0060 DA0F     		lsrs	r2, r3, #31
 2922 0062 1344     		add	r3, r3, r2
 2923 0064 5B10     		asrs	r3, r3, #1
 2924 0066 5B42     		rsbs	r3, r3, #0
 2925 0068 1A46     		mov	r2, r3
 2926              		.loc 1 646 11
 2927 006a 7B6A     		ldr	r3, [r7, #36]
 2928 006c 1344     		add	r3, r3, r2
 2929              		.loc 1 646 6
 2930 006e 3B61     		str	r3, [r7, #16]
 647:Src/app.c     ****   x1 = xc + (w + 1) / 2;
 2931              		.loc 1 647 16
 2932 0070 3B6A     		ldr	r3, [r7, #32]
 2933 0072 0133     		adds	r3, r3, #1
 2934              		.loc 1 647 21
 2935 0074 DA0F     		lsrs	r2, r3, #31
 2936 0076 1344     		add	r3, r3, r2
 2937 0078 5B10     		asrs	r3, r3, #1
 2938 007a 1A46     		mov	r2, r3
 2939              		.loc 1 647 11
 2940 007c BB6A     		ldr	r3, [r7, #40]
 2941 007e 1344     		add	r3, r3, r2
 2942              		.loc 1 647 6
 2943 0080 FB60     		str	r3, [r7, #12]
 648:Src/app.c     ****   y1 = yc + (h + 1) / 2;
 2944              		.loc 1 648 16
 2945 0082 FB69     		ldr	r3, [r7, #28]
 2946 0084 0133     		adds	r3, r3, #1
 2947              		.loc 1 648 21
 2948 0086 DA0F     		lsrs	r2, r3, #31
 2949 0088 1344     		add	r3, r3, r2
 2950 008a 5B10     		asrs	r3, r3, #1
 2951 008c 1A46     		mov	r2, r3
 2952              		.loc 1 648 11
 2953 008e 7B6A     		ldr	r3, [r7, #36]
 2954 0090 1344     		add	r3, r3, r2
 2955              		.loc 1 648 6
 2956 0092 BB60     		str	r3, [r7, #8]
 649:Src/app.c     ****   clamp_point(&x0, &y0);
 2957              		.loc 1 649 3
 2958 0094 07F11002 		add	r2, r7, #16
 2959 0098 07F11403 		add	r3, r7, #20
 2960 009c 1146     		mov	r1, r2
 2961 009e 1846     		mov	r0, r3
 2962 00a0 FFF7FEFF 		bl	clamp_point
 650:Src/app.c     ****   clamp_point(&x1, &y1);
 2963              		.loc 1 650 3
 2964 00a4 07F10802 		add	r2, r7, #8
 2965 00a8 07F10C03 		add	r3, r7, #12
 2966 00ac 1146     		mov	r1, r2
 2967 00ae 1846     		mov	r0, r3
 2968 00b0 FFF7FEFF 		bl	clamp_point
 651:Src/app.c     ****   UTIL_LCD_DrawRect(x0, y0, x1 - x0, y1 - y0, UTIL_LCD_COLOR_GREEN);
 2969              		.loc 1 651 3
 2970 00b4 7B69     		ldr	r3, [r7, #20]
 2971 00b6 1846     		mov	r0, r3
ARM GAS  /tmp/ccrysqwW.s 			page 76


 2972 00b8 3B69     		ldr	r3, [r7, #16]
 2973 00ba 1946     		mov	r1, r3
 2974              		.loc 1 651 32
 2975 00bc FA68     		ldr	r2, [r7, #12]
 2976 00be 7B69     		ldr	r3, [r7, #20]
 2977 00c0 D31A     		subs	r3, r2, r3
 2978              		.loc 1 651 3
 2979 00c2 1C46     		mov	r4, r3
 2980              		.loc 1 651 41
 2981 00c4 BA68     		ldr	r2, [r7, #8]
 2982 00c6 3B69     		ldr	r3, [r7, #16]
 2983 00c8 D31A     		subs	r3, r2, r3
 2984              		.loc 1 651 3
 2985 00ca 1A46     		mov	r2, r3
 2986 00cc 4FF0FF23 		mov	r3, #-16711936
 2987 00d0 0093     		str	r3, [sp]
 2988 00d2 1346     		mov	r3, r2
 2989 00d4 2246     		mov	r2, r4
 2990 00d6 FFF7FEFF 		bl	UTIL_LCD_DrawRect
 652:Src/app.c     **** 
 653:Src/app.c     ****   /* display palm key points */
 654:Src/app.c     ****   for (i = 0; i < 7; i++) {
 2991              		.loc 1 654 10
 2992 00da 0023     		movs	r3, #0
 2993 00dc FB62     		str	r3, [r7, #44]
 2994              		.loc 1 654 3
 2995 00de 34E0     		b	.L141
 2996              	.L144:
 2997              	.LBB109:
 655:Src/app.c     ****     uint32_t color = (i != 0 && i != 2) ? UTIL_LCD_COLOR_RED : UTIL_LCD_COLOR_BLUE;
 2998              		.loc 1 655 62
 2999 00e0 FB6A     		ldr	r3, [r7, #44]
 3000 00e2 002B     		cmp	r3, #0
 3001 00e4 04D0     		beq	.L142
 3002              		.loc 1 655 30 discriminator 1
 3003 00e6 FB6A     		ldr	r3, [r7, #44]
 3004 00e8 022B     		cmp	r3, #2
 3005 00ea 01D0     		beq	.L142
 3006              		.loc 1 655 62 discriminator 3
 3007 00ec 1B4B     		ldr	r3, .L145
 3008              		.loc 1 655 62 is_stmt 0
 3009 00ee 00E0     		b	.L143
 3010              	.L142:
 3011              		.loc 1 655 62 discriminator 4
 3012 00f0 1B4B     		ldr	r3, .L145+4
 3013              	.L143:
 3014              		.loc 1 655 14 is_stmt 1 discriminator 6
 3015 00f2 BB61     		str	r3, [r7, #24]
 656:Src/app.c     **** 
 657:Src/app.c     ****     x0 = (int)hand->pKps[i].x;
 3016              		.loc 1 657 19
 3017 00f4 7B68     		ldr	r3, [r7, #4]
 3018 00f6 5A69     		ldr	r2, [r3, #20]
 3019              		.loc 1 657 25
 3020 00f8 FB6A     		ldr	r3, [r7, #44]
 3021 00fa DB00     		lsls	r3, r3, #3
 3022 00fc 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccrysqwW.s 			page 77


 3023              		.loc 1 657 28
 3024 00fe D3ED007A 		vldr.32	s15, [r3]
 3025              		.loc 1 657 10
 3026 0102 FDEEE77A 		vcvt.s32.f32	s15, s15
 3027 0106 17EE903A 		vmov	r3, s15	@ int
 3028              		.loc 1 657 8
 3029 010a 7B61     		str	r3, [r7, #20]
 658:Src/app.c     ****     y0 = (int)hand->pKps[i].y;
 3030              		.loc 1 658 19
 3031 010c 7B68     		ldr	r3, [r7, #4]
 3032 010e 5A69     		ldr	r2, [r3, #20]
 3033              		.loc 1 658 25
 3034 0110 FB6A     		ldr	r3, [r7, #44]
 3035 0112 DB00     		lsls	r3, r3, #3
 3036 0114 1344     		add	r3, r3, r2
 3037              		.loc 1 658 28
 3038 0116 D3ED017A 		vldr.32	s15, [r3, #4]
 3039              		.loc 1 658 10
 3040 011a FDEEE77A 		vcvt.s32.f32	s15, s15
 3041 011e 17EE903A 		vmov	r3, s15	@ int
 3042              		.loc 1 658 8
 3043 0122 3B61     		str	r3, [r7, #16]
 659:Src/app.c     ****     clamp_point(&x0, &y0);
 3044              		.loc 1 659 5
 3045 0124 07F11002 		add	r2, r7, #16
 3046 0128 07F11403 		add	r3, r7, #20
 3047 012c 1146     		mov	r1, r2
 3048 012e 1846     		mov	r0, r3
 3049 0130 FFF7FEFF 		bl	clamp_point
 660:Src/app.c     ****     UTIL_LCD_FillCircle(x0, y0, 2, color);
 3050              		.loc 1 660 5
 3051 0134 7B69     		ldr	r3, [r7, #20]
 3052 0136 1846     		mov	r0, r3
 3053 0138 3B69     		ldr	r3, [r7, #16]
 3054 013a 1946     		mov	r1, r3
 3055 013c BB69     		ldr	r3, [r7, #24]
 3056 013e 0222     		movs	r2, #2
 3057 0140 FFF7FEFF 		bl	UTIL_LCD_FillCircle
 3058              	.LBE109:
 654:Src/app.c     ****     uint32_t color = (i != 0 && i != 2) ? UTIL_LCD_COLOR_RED : UTIL_LCD_COLOR_BLUE;
 3059              		.loc 1 654 23 discriminator 2
 3060 0144 FB6A     		ldr	r3, [r7, #44]
 3061 0146 0133     		adds	r3, r3, #1
 3062 0148 FB62     		str	r3, [r7, #44]
 3063              	.L141:
 654:Src/app.c     ****     uint32_t color = (i != 0 && i != 2) ? UTIL_LCD_COLOR_RED : UTIL_LCD_COLOR_BLUE;
 3064              		.loc 1 654 17 discriminator 1
 3065 014a FB6A     		ldr	r3, [r7, #44]
 3066 014c 062B     		cmp	r3, #6
 3067 014e C7DD     		ble	.L144
 661:Src/app.c     ****   }
 662:Src/app.c     **** }
 3068              		.loc 1 662 1
 3069 0150 00BF     		nop
 3070 0152 00BF     		nop
 3071 0154 3437     		adds	r7, r7, #52
 3072              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccrysqwW.s 			page 78


 3073 0156 BD46     		mov	sp, r7
 3074              		.cfi_def_cfa_register 13
 3075              		@ sp needed
 3076 0158 90BD     		pop	{r4, r7, pc}
 3077              	.L146:
 3078 015a 00BF     		.align	2
 3079              	.L145:
 3080 015c 0000FFFF 		.word	-65536
 3081 0160 FF0000FF 		.word	-16776961
 3082              		.cfi_endproc
 3083              	.LFE7383:
 3085              		.section	.text.rotate_point,"ax",%progbits
 3086              		.align	1
 3087              		.syntax unified
 3088              		.thumb
 3089              		.thumb_func
 3091              	rotate_point:
 3092              	.LFB7384:
 663:Src/app.c     **** 
 664:Src/app.c     **** static void rotate_point(float pt[2], float rotation)
 665:Src/app.c     **** {
 3093              		.loc 1 665 1
 3094              		.cfi_startproc
 3095              		@ args = 0, pretend = 0, frame = 16
 3096              		@ frame_needed = 1, uses_anonymous_args = 0
 3097 0000 80B5     		push	{r7, lr}
 3098              		.cfi_def_cfa_offset 8
 3099              		.cfi_offset 7, -8
 3100              		.cfi_offset 14, -4
 3101 0002 2DED028B 		vpush.64	{d8}
 3102              		.cfi_def_cfa_offset 16
 3103              		.cfi_offset 80, -16
 3104              		.cfi_offset 81, -12
 3105 0006 84B0     		sub	sp, sp, #16
 3106              		.cfi_def_cfa_offset 32
 3107 0008 00AF     		add	r7, sp, #0
 3108              		.cfi_def_cfa_register 7
 3109 000a 7860     		str	r0, [r7, #4]
 3110 000c 87ED000A 		vstr.32	s0, [r7]
 666:Src/app.c     ****   float x = pt[0];
 3111              		.loc 1 666 9
 3112 0010 7B68     		ldr	r3, [r7, #4]
 3113 0012 1B68     		ldr	r3, [r3]	@ float
 3114 0014 FB60     		str	r3, [r7, #12]	@ float
 667:Src/app.c     ****   float y = pt[1];
 3115              		.loc 1 667 9
 3116 0016 7B68     		ldr	r3, [r7, #4]
 3117 0018 5B68     		ldr	r3, [r3, #4]	@ float
 3118 001a BB60     		str	r3, [r7, #8]	@ float
 668:Src/app.c     **** 
 669:Src/app.c     ****   pt[0] = cos(rotation) * x - sin(rotation) * y;
 3119              		.loc 1 669 11
 3120 001c D7ED007A 		vldr.32	s15, [r7]
 3121 0020 B7EEE77A 		vcvt.f64.f32	d7, s15
 3122 0024 B0EE470B 		vmov.f64	d0, d7
 3123 0028 FFF7FEFF 		bl	cos
 3124 002c B0EE406B 		vmov.f64	d6, d0
ARM GAS  /tmp/ccrysqwW.s 			page 79


 3125              		.loc 1 669 25 discriminator 1
 3126 0030 D7ED037A 		vldr.32	s15, [r7, #12]
 3127 0034 B7EEE77A 		vcvt.f64.f32	d7, s15
 3128 0038 26EE078B 		vmul.f64	d8, d6, d7
 3129              		.loc 1 669 31 discriminator 1
 3130 003c D7ED007A 		vldr.32	s15, [r7]
 3131 0040 B7EEE77A 		vcvt.f64.f32	d7, s15
 3132 0044 B0EE470B 		vmov.f64	d0, d7
 3133 0048 FFF7FEFF 		bl	sin
 3134 004c B0EE406B 		vmov.f64	d6, d0
 3135              		.loc 1 669 45 discriminator 2
 3136 0050 D7ED027A 		vldr.32	s15, [r7, #8]
 3137 0054 B7EEE77A 		vcvt.f64.f32	d7, s15
 3138 0058 26EE077B 		vmul.f64	d7, d6, d7
 3139              		.loc 1 669 29 discriminator 2
 3140 005c 38EE477B 		vsub.f64	d7, d8, d7
 3141 0060 F7EEC77B 		vcvt.f32.f64	s15, d7
 3142              		.loc 1 669 9 discriminator 2
 3143 0064 7B68     		ldr	r3, [r7, #4]
 3144 0066 C3ED007A 		vstr.32	s15, [r3]
 670:Src/app.c     ****   pt[1] = sin(rotation) * x + cos(rotation) * y;
 3145              		.loc 1 670 11
 3146 006a D7ED007A 		vldr.32	s15, [r7]
 3147 006e B7EEE77A 		vcvt.f64.f32	d7, s15
 3148 0072 B0EE470B 		vmov.f64	d0, d7
 3149 0076 FFF7FEFF 		bl	sin
 3150 007a B0EE406B 		vmov.f64	d6, d0
 3151              		.loc 1 670 25 discriminator 1
 3152 007e D7ED037A 		vldr.32	s15, [r7, #12]
 3153 0082 B7EEE77A 		vcvt.f64.f32	d7, s15
 3154 0086 26EE078B 		vmul.f64	d8, d6, d7
 3155              		.loc 1 670 31 discriminator 1
 3156 008a D7ED007A 		vldr.32	s15, [r7]
 3157 008e B7EEE77A 		vcvt.f64.f32	d7, s15
 3158 0092 B0EE470B 		vmov.f64	d0, d7
 3159 0096 FFF7FEFF 		bl	cos
 3160 009a B0EE406B 		vmov.f64	d6, d0
 3161              		.loc 1 670 45 discriminator 2
 3162 009e D7ED027A 		vldr.32	s15, [r7, #8]
 3163 00a2 B7EEE77A 		vcvt.f64.f32	d7, s15
 3164 00a6 26EE077B 		vmul.f64	d7, d6, d7
 3165              		.loc 1 670 29 discriminator 2
 3166 00aa 38EE077B 		vadd.f64	d7, d8, d7
 3167              		.loc 1 670 5 discriminator 2
 3168 00ae 7B68     		ldr	r3, [r7, #4]
 3169 00b0 0433     		adds	r3, r3, #4
 3170              		.loc 1 670 29 discriminator 2
 3171 00b2 F7EEC77B 		vcvt.f32.f64	s15, d7
 3172              		.loc 1 670 9 discriminator 2
 3173 00b6 C3ED007A 		vstr.32	s15, [r3]
 671:Src/app.c     **** }
 3174              		.loc 1 671 1
 3175 00ba 00BF     		nop
 3176 00bc 1037     		adds	r7, r7, #16
 3177              		.cfi_def_cfa_offset 16
 3178 00be BD46     		mov	sp, r7
 3179              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccrysqwW.s 			page 80


 3180              		@ sp needed
 3181 00c0 BDEC028B 		vldm	sp!, {d8}
 3182              		.cfi_restore 80
 3183              		.cfi_restore 81
 3184              		.cfi_def_cfa_offset 8
 3185 00c4 80BD     		pop	{r7, pc}
 3186              		.cfi_endproc
 3187              	.LFE7384:
 3189              		.section	.text.roi_to_corners,"ax",%progbits
 3190              		.align	1
 3191              		.syntax unified
 3192              		.thumb
 3193              		.thumb_func
 3195              	roi_to_corners:
 3196              	.LFB7385:
 672:Src/app.c     **** 
 673:Src/app.c     **** static void roi_to_corners(roi_t *roi, float corners[4][2])
 674:Src/app.c     **** {
 3197              		.loc 1 674 1
 3198              		.cfi_startproc
 3199              		@ args = 0, pretend = 0, frame = 48
 3200              		@ frame_needed = 1, uses_anonymous_args = 0
 3201 0000 80B5     		push	{r7, lr}
 3202              		.cfi_def_cfa_offset 8
 3203              		.cfi_offset 7, -8
 3204              		.cfi_offset 14, -4
 3205 0002 8CB0     		sub	sp, sp, #48
 3206              		.cfi_def_cfa_offset 56
 3207 0004 00AF     		add	r7, sp, #0
 3208              		.cfi_def_cfa_register 7
 3209 0006 7860     		str	r0, [r7, #4]
 3210 0008 3960     		str	r1, [r7]
 675:Src/app.c     ****   const float corners_init[4][2] = {
 676:Src/app.c     ****     {-roi->w / 2, -roi->h / 2},
 3211              		.loc 1 676 10
 3212 000a 7B68     		ldr	r3, [r7, #4]
 3213 000c D3ED027A 		vldr.32	s15, [r3, #8]
 3214              		.loc 1 676 6
 3215 0010 B1EE677A 		vneg.f32	s14, s15
 3216              		.loc 1 676 14
 3217 0014 F0EE006A 		vmov.f32	s13, #2.0e+0
 3218 0018 C7EE267A 		vdiv.f32	s15, s14, s13
 675:Src/app.c     ****   const float corners_init[4][2] = {
 3219              		.loc 1 675 15
 3220 001c C7ED037A 		vstr.32	s15, [r7, #12]
 3221              		.loc 1 676 23
 3222 0020 7B68     		ldr	r3, [r7, #4]
 3223 0022 D3ED037A 		vldr.32	s15, [r3, #12]
 3224              		.loc 1 676 19
 3225 0026 B1EE677A 		vneg.f32	s14, s15
 3226              		.loc 1 676 27
 3227 002a F0EE006A 		vmov.f32	s13, #2.0e+0
 3228 002e C7EE267A 		vdiv.f32	s15, s14, s13
 675:Src/app.c     ****   const float corners_init[4][2] = {
 3229              		.loc 1 675 15
 3230 0032 C7ED047A 		vstr.32	s15, [r7, #16]
 677:Src/app.c     ****     { roi->w / 2, -roi->h / 2},
ARM GAS  /tmp/ccrysqwW.s 			page 81


 3231              		.loc 1 677 10
 3232 0036 7B68     		ldr	r3, [r7, #4]
 3233 0038 93ED027A 		vldr.32	s14, [r3, #8]
 3234              		.loc 1 677 14
 3235 003c F0EE006A 		vmov.f32	s13, #2.0e+0
 3236 0040 C7EE267A 		vdiv.f32	s15, s14, s13
 675:Src/app.c     ****   const float corners_init[4][2] = {
 3237              		.loc 1 675 15
 3238 0044 C7ED057A 		vstr.32	s15, [r7, #20]
 3239              		.loc 1 677 23
 3240 0048 7B68     		ldr	r3, [r7, #4]
 3241 004a D3ED037A 		vldr.32	s15, [r3, #12]
 3242              		.loc 1 677 19
 3243 004e B1EE677A 		vneg.f32	s14, s15
 3244              		.loc 1 677 27
 3245 0052 F0EE006A 		vmov.f32	s13, #2.0e+0
 3246 0056 C7EE267A 		vdiv.f32	s15, s14, s13
 675:Src/app.c     ****   const float corners_init[4][2] = {
 3247              		.loc 1 675 15
 3248 005a C7ED067A 		vstr.32	s15, [r7, #24]
 678:Src/app.c     ****     { roi->w / 2,  roi->h / 2},
 3249              		.loc 1 678 10
 3250 005e 7B68     		ldr	r3, [r7, #4]
 3251 0060 93ED027A 		vldr.32	s14, [r3, #8]
 3252              		.loc 1 678 14
 3253 0064 F0EE006A 		vmov.f32	s13, #2.0e+0
 3254 0068 C7EE267A 		vdiv.f32	s15, s14, s13
 675:Src/app.c     ****   const float corners_init[4][2] = {
 3255              		.loc 1 675 15
 3256 006c C7ED077A 		vstr.32	s15, [r7, #28]
 3257              		.loc 1 678 23
 3258 0070 7B68     		ldr	r3, [r7, #4]
 3259 0072 93ED037A 		vldr.32	s14, [r3, #12]
 3260              		.loc 1 678 27
 3261 0076 F0EE006A 		vmov.f32	s13, #2.0e+0
 3262 007a C7EE267A 		vdiv.f32	s15, s14, s13
 675:Src/app.c     ****   const float corners_init[4][2] = {
 3263              		.loc 1 675 15
 3264 007e C7ED087A 		vstr.32	s15, [r7, #32]
 679:Src/app.c     ****     {-roi->w / 2,  roi->h / 2},
 3265              		.loc 1 679 10
 3266 0082 7B68     		ldr	r3, [r7, #4]
 3267 0084 D3ED027A 		vldr.32	s15, [r3, #8]
 3268              		.loc 1 679 6
 3269 0088 B1EE677A 		vneg.f32	s14, s15
 3270              		.loc 1 679 14
 3271 008c F0EE006A 		vmov.f32	s13, #2.0e+0
 3272 0090 C7EE267A 		vdiv.f32	s15, s14, s13
 675:Src/app.c     ****     {-roi->w / 2, -roi->h / 2},
 3273              		.loc 1 675 15
 3274 0094 C7ED097A 		vstr.32	s15, [r7, #36]
 3275              		.loc 1 679 23
 3276 0098 7B68     		ldr	r3, [r7, #4]
 3277 009a 93ED037A 		vldr.32	s14, [r3, #12]
 3278              		.loc 1 679 27
 3279 009e F0EE006A 		vmov.f32	s13, #2.0e+0
 3280 00a2 C7EE267A 		vdiv.f32	s15, s14, s13
ARM GAS  /tmp/ccrysqwW.s 			page 82


 675:Src/app.c     ****     {-roi->w / 2, -roi->h / 2},
 3281              		.loc 1 675 15
 3282 00a6 C7ED0A7A 		vstr.32	s15, [r7, #40]
 680:Src/app.c     ****   };
 681:Src/app.c     ****   int i;
 682:Src/app.c     **** 
 683:Src/app.c     ****   memcpy(corners, corners_init, sizeof(corners_init));
 3283              		.loc 1 683 3
 3284 00aa 07F10C03 		add	r3, r7, #12
 3285 00ae 2022     		movs	r2, #32
 3286 00b0 1946     		mov	r1, r3
 3287 00b2 3868     		ldr	r0, [r7]
 3288 00b4 FFF7FEFF 		bl	memcpy
 684:Src/app.c     ****   /* rotate */
 685:Src/app.c     ****   /*
 686:Src/app.c     ****   for (i = 0; i < 4; i++)
 687:Src/app.c     ****     rotate_point(corners[i], roi->rotation);
 688:Src/app.c     ****   */
 689:Src/app.c     ****   /* shift */
 690:Src/app.c     ****   for (i = 0; i < 4; i++) {
 3289              		.loc 1 690 10
 3290 00b8 0023     		movs	r3, #0
 3291 00ba FB62     		str	r3, [r7, #44]
 3292              		.loc 1 690 3
 3293 00bc 24E0     		b	.L149
 3294              	.L150:
 691:Src/app.c     ****     corners[i][0] += roi->cx;
 3295              		.loc 1 691 12
 3296 00be FB6A     		ldr	r3, [r7, #44]
 3297 00c0 DB00     		lsls	r3, r3, #3
 3298 00c2 3A68     		ldr	r2, [r7]
 3299 00c4 1344     		add	r3, r3, r2
 3300              		.loc 1 691 15
 3301 00c6 93ED007A 		vldr.32	s14, [r3]
 3302              		.loc 1 691 25
 3303 00ca 7B68     		ldr	r3, [r7, #4]
 3304 00cc D3ED007A 		vldr.32	s15, [r3]
 3305              		.loc 1 691 12
 3306 00d0 FB6A     		ldr	r3, [r7, #44]
 3307 00d2 DB00     		lsls	r3, r3, #3
 3308 00d4 3A68     		ldr	r2, [r7]
 3309 00d6 1344     		add	r3, r3, r2
 3310              		.loc 1 691 19
 3311 00d8 77EE277A 		vadd.f32	s15, s14, s15
 3312 00dc C3ED007A 		vstr.32	s15, [r3]
 692:Src/app.c     ****     corners[i][1] += roi->cy;
 3313              		.loc 1 692 12
 3314 00e0 FB6A     		ldr	r3, [r7, #44]
 3315 00e2 DB00     		lsls	r3, r3, #3
 3316 00e4 3A68     		ldr	r2, [r7]
 3317 00e6 1344     		add	r3, r3, r2
 3318              		.loc 1 692 15
 3319 00e8 93ED017A 		vldr.32	s14, [r3, #4]
 3320              		.loc 1 692 25
 3321 00ec 7B68     		ldr	r3, [r7, #4]
 3322 00ee D3ED017A 		vldr.32	s15, [r3, #4]
 3323              		.loc 1 692 12
ARM GAS  /tmp/ccrysqwW.s 			page 83


 3324 00f2 FB6A     		ldr	r3, [r7, #44]
 3325 00f4 DB00     		lsls	r3, r3, #3
 3326 00f6 3A68     		ldr	r2, [r7]
 3327 00f8 1344     		add	r3, r3, r2
 3328              		.loc 1 692 19
 3329 00fa 77EE277A 		vadd.f32	s15, s14, s15
 3330 00fe C3ED017A 		vstr.32	s15, [r3, #4]
 690:Src/app.c     ****     corners[i][0] += roi->cx;
 3331              		.loc 1 690 23 discriminator 3
 3332 0102 FB6A     		ldr	r3, [r7, #44]
 3333 0104 0133     		adds	r3, r3, #1
 3334 0106 FB62     		str	r3, [r7, #44]
 3335              	.L149:
 690:Src/app.c     ****     corners[i][0] += roi->cx;
 3336              		.loc 1 690 17 discriminator 1
 3337 0108 FB6A     		ldr	r3, [r7, #44]
 3338 010a 032B     		cmp	r3, #3
 3339 010c D7DD     		ble	.L150
 693:Src/app.c     ****   }
 694:Src/app.c     **** }
 3340              		.loc 1 694 1
 3341 010e 00BF     		nop
 3342 0110 00BF     		nop
 3343 0112 3037     		adds	r7, r7, #48
 3344              		.cfi_def_cfa_offset 8
 3345 0114 BD46     		mov	sp, r7
 3346              		.cfi_def_cfa_register 13
 3347              		@ sp needed
 3348 0116 80BD     		pop	{r7, pc}
 3349              		.cfi_endproc
 3350              	.LFE7385:
 3352              		.section	.text.clamp_corners,"ax",%progbits
 3353              		.align	1
 3354              		.syntax unified
 3355              		.thumb
 3356              		.thumb_func
 3358              	clamp_corners:
 3359              	.LFB7386:
 695:Src/app.c     **** 
 696:Src/app.c     **** static int clamp_corners(float corners_in[4][2], int corners_out[4][2])
 697:Src/app.c     **** {
 3360              		.loc 1 697 1
 3361              		.cfi_startproc
 3362              		@ args = 0, pretend = 0, frame = 16
 3363              		@ frame_needed = 1, uses_anonymous_args = 0
 3364 0000 80B5     		push	{r7, lr}
 3365              		.cfi_def_cfa_offset 8
 3366              		.cfi_offset 7, -8
 3367              		.cfi_offset 14, -4
 3368 0002 84B0     		sub	sp, sp, #16
 3369              		.cfi_def_cfa_offset 24
 3370 0004 00AF     		add	r7, sp, #0
 3371              		.cfi_def_cfa_register 7
 3372 0006 7860     		str	r0, [r7, #4]
 3373 0008 3960     		str	r1, [r7]
 698:Src/app.c     ****   int is_clamp = 0;
 3374              		.loc 1 698 7
ARM GAS  /tmp/ccrysqwW.s 			page 84


 3375 000a 0023     		movs	r3, #0
 3376 000c FB60     		str	r3, [r7, #12]
 699:Src/app.c     ****   int i;
 700:Src/app.c     **** 
 701:Src/app.c     ****   for (i = 0; i < 4; i++) {
 3377              		.loc 1 701 10
 3378 000e 0023     		movs	r3, #0
 3379 0010 BB60     		str	r3, [r7, #8]
 3380              		.loc 1 701 3
 3381 0012 31E0     		b	.L152
 3382              	.L153:
 702:Src/app.c     ****     corners_out[i][0] = (int)corners_in[i][0];
 3383              		.loc 1 702 40
 3384 0014 BB68     		ldr	r3, [r7, #8]
 3385 0016 DB00     		lsls	r3, r3, #3
 3386 0018 7A68     		ldr	r2, [r7, #4]
 3387 001a 1344     		add	r3, r3, r2
 3388              		.loc 1 702 43
 3389 001c D3ED007A 		vldr.32	s15, [r3]
 3390              		.loc 1 702 16
 3391 0020 BB68     		ldr	r3, [r7, #8]
 3392 0022 DB00     		lsls	r3, r3, #3
 3393 0024 3A68     		ldr	r2, [r7]
 3394 0026 1344     		add	r3, r3, r2
 3395              		.loc 1 702 25
 3396 0028 FDEEE77A 		vcvt.s32.f32	s15, s15
 3397 002c 17EE902A 		vmov	r2, s15	@ int
 3398              		.loc 1 702 23
 3399 0030 1A60     		str	r2, [r3]
 703:Src/app.c     ****     corners_out[i][1] = (int)corners_in[i][1];
 3400              		.loc 1 703 40
 3401 0032 BB68     		ldr	r3, [r7, #8]
 3402 0034 DB00     		lsls	r3, r3, #3
 3403 0036 7A68     		ldr	r2, [r7, #4]
 3404 0038 1344     		add	r3, r3, r2
 3405              		.loc 1 703 43
 3406 003a D3ED017A 		vldr.32	s15, [r3, #4]
 3407              		.loc 1 703 16
 3408 003e BB68     		ldr	r3, [r7, #8]
 3409 0040 DB00     		lsls	r3, r3, #3
 3410 0042 3A68     		ldr	r2, [r7]
 3411 0044 1344     		add	r3, r3, r2
 3412              		.loc 1 703 25
 3413 0046 FDEEE77A 		vcvt.s32.f32	s15, s15
 3414 004a 17EE902A 		vmov	r2, s15	@ int
 3415              		.loc 1 703 23
 3416 004e 5A60     		str	r2, [r3, #4]
 704:Src/app.c     ****     is_clamp |= clamp_point(&corners_out[i][0], &corners_out[i][1]);
 3417              		.loc 1 704 41
 3418 0050 BB68     		ldr	r3, [r7, #8]
 3419 0052 DB00     		lsls	r3, r3, #3
 3420 0054 3A68     		ldr	r2, [r7]
 3421 0056 1344     		add	r3, r3, r2
 3422              		.loc 1 704 17
 3423 0058 1846     		mov	r0, r3
 3424              		.loc 1 704 61
 3425 005a BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccrysqwW.s 			page 85


 3426 005c DB00     		lsls	r3, r3, #3
 3427 005e 3A68     		ldr	r2, [r7]
 3428 0060 1344     		add	r3, r3, r2
 3429              		.loc 1 704 17
 3430 0062 0433     		adds	r3, r3, #4
 3431 0064 1946     		mov	r1, r3
 3432 0066 FFF7FEFF 		bl	clamp_point
 3433 006a 0246     		mov	r2, r0
 3434              		.loc 1 704 14 discriminator 1
 3435 006c FB68     		ldr	r3, [r7, #12]
 3436 006e 1343     		orrs	r3, r3, r2
 3437 0070 FB60     		str	r3, [r7, #12]
 701:Src/app.c     ****     corners_out[i][0] = (int)corners_in[i][0];
 3438              		.loc 1 701 23 discriminator 3
 3439 0072 BB68     		ldr	r3, [r7, #8]
 3440 0074 0133     		adds	r3, r3, #1
 3441 0076 BB60     		str	r3, [r7, #8]
 3442              	.L152:
 701:Src/app.c     ****     corners_out[i][0] = (int)corners_in[i][0];
 3443              		.loc 1 701 17 discriminator 1
 3444 0078 BB68     		ldr	r3, [r7, #8]
 3445 007a 032B     		cmp	r3, #3
 3446 007c CADD     		ble	.L153
 705:Src/app.c     ****   }
 706:Src/app.c     **** 
 707:Src/app.c     ****   return is_clamp;
 3447              		.loc 1 707 10
 3448 007e FB68     		ldr	r3, [r7, #12]
 708:Src/app.c     **** }
 3449              		.loc 1 708 1
 3450 0080 1846     		mov	r0, r3
 3451 0082 1037     		adds	r7, r7, #16
 3452              		.cfi_def_cfa_offset 8
 3453 0084 BD46     		mov	sp, r7
 3454              		.cfi_def_cfa_register 13
 3455              		@ sp needed
 3456 0086 80BD     		pop	{r7, pc}
 3457              		.cfi_endproc
 3458              	.LFE7386:
 3460              		.section	.text.display_roi,"ax",%progbits
 3461              		.align	1
 3462              		.syntax unified
 3463              		.thumb
 3464              		.thumb_func
 3466              	display_roi:
 3467              	.LFB7387:
 709:Src/app.c     **** 
 710:Src/app.c     **** static void display_roi(roi_t *roi)
 711:Src/app.c     **** {
 3468              		.loc 1 711 1
 3469              		.cfi_startproc
 3470              		@ args = 0, pretend = 0, frame = 80
 3471              		@ frame_needed = 1, uses_anonymous_args = 0
 3472 0000 90B5     		push	{r4, r7, lr}
 3473              		.cfi_def_cfa_offset 12
 3474              		.cfi_offset 4, -12
 3475              		.cfi_offset 7, -8
ARM GAS  /tmp/ccrysqwW.s 			page 86


 3476              		.cfi_offset 14, -4
 3477 0002 97B0     		sub	sp, sp, #92
 3478              		.cfi_def_cfa_offset 104
 3479 0004 02AF     		add	r7, sp, #8
 3480              		.cfi_def_cfa 7, 96
 3481 0006 7860     		str	r0, [r7, #4]
 712:Src/app.c     ****   float corners_f[4][2];
 713:Src/app.c     ****   int corners[4][2];
 714:Src/app.c     ****   int is_clamp;
 715:Src/app.c     ****   int i;
 716:Src/app.c     **** 
 717:Src/app.c     ****   /* compute box corners */
 718:Src/app.c     ****   roi_to_corners(roi, corners_f);
 3482              		.loc 1 718 3
 3483 0008 07F12803 		add	r3, r7, #40
 3484 000c 1946     		mov	r1, r3
 3485 000e 7868     		ldr	r0, [r7, #4]
 3486 0010 FFF7FEFF 		bl	roi_to_corners
 719:Src/app.c     **** 
 720:Src/app.c     ****   /* clamp */
 721:Src/app.c     ****   is_clamp = clamp_corners(corners_f, corners);
 3487              		.loc 1 721 14
 3488 0014 07F10802 		add	r2, r7, #8
 3489 0018 07F12803 		add	r3, r7, #40
 3490 001c 1146     		mov	r1, r2
 3491 001e 1846     		mov	r0, r3
 3492 0020 FFF7FEFF 		bl	clamp_corners
 3493 0024 B864     		str	r0, [r7, #72]
 722:Src/app.c     ****   if (is_clamp)
 3494              		.loc 1 722 6
 3495 0026 BB6C     		ldr	r3, [r7, #72]
 3496 0028 002B     		cmp	r3, #0
 3497 002a 3BD1     		bne	.L160
 723:Src/app.c     ****     return ;
 724:Src/app.c     **** 
 725:Src/app.c     ****   /* display */
 726:Src/app.c     ****   for (i = 0; i < 4; i++)
 3498              		.loc 1 726 10
 3499 002c 0023     		movs	r3, #0
 3500 002e FB64     		str	r3, [r7, #76]
 3501              		.loc 1 726 3
 3502 0030 34E0     		b	.L158
 3503              	.L159:
 727:Src/app.c     ****     UTIL_LCD_DrawLine(corners[i][0], corners[i][1], corners[(i + 1) % 4][0], corners[(i + 1) % 4][1
 3504              		.loc 1 727 33
 3505 0032 FB6C     		ldr	r3, [r7, #76]
 3506 0034 DB00     		lsls	r3, r3, #3
 3507 0036 5033     		adds	r3, r3, #80
 3508 0038 3B44     		add	r3, r3, r7
 3509 003a 53F8483C 		ldr	r3, [r3, #-72]
 3510              		.loc 1 727 5
 3511 003e 1846     		mov	r0, r3
 3512              		.loc 1 727 48
 3513 0040 FB6C     		ldr	r3, [r7, #76]
 3514 0042 DB00     		lsls	r3, r3, #3
 3515 0044 5033     		adds	r3, r3, #80
 3516 0046 3B44     		add	r3, r3, r7
ARM GAS  /tmp/ccrysqwW.s 			page 87


 3517 0048 53F8443C 		ldr	r3, [r3, #-68]
 3518              		.loc 1 727 5
 3519 004c 1946     		mov	r1, r3
 3520              		.loc 1 727 64
 3521 004e FB6C     		ldr	r3, [r7, #76]
 3522 0050 0133     		adds	r3, r3, #1
 3523              		.loc 1 727 69
 3524 0052 5A42     		rsbs	r2, r3, #0
 3525 0054 03F00303 		and	r3, r3, #3
 3526 0058 02F00302 		and	r2, r2, #3
 3527 005c 53EA42B3 		csneg	r3, r3, r2, mi
 3528              		.loc 1 727 73
 3529 0060 DB00     		lsls	r3, r3, #3
 3530 0062 5033     		adds	r3, r3, #80
 3531 0064 3B44     		add	r3, r3, r7
 3532 0066 53F8483C 		ldr	r3, [r3, #-72]
 3533              		.loc 1 727 5
 3534 006a 1C46     		mov	r4, r3
 3535              		.loc 1 727 89
 3536 006c FB6C     		ldr	r3, [r7, #76]
 3537 006e 0133     		adds	r3, r3, #1
 3538              		.loc 1 727 94
 3539 0070 5A42     		rsbs	r2, r3, #0
 3540 0072 03F00303 		and	r3, r3, #3
 3541 0076 02F00302 		and	r2, r2, #3
 3542 007a 53EA42B3 		csneg	r3, r3, r2, mi
 3543              		.loc 1 727 98
 3544 007e DB00     		lsls	r3, r3, #3
 3545 0080 5033     		adds	r3, r3, #80
 3546 0082 3B44     		add	r3, r3, r7
 3547 0084 53F8443C 		ldr	r3, [r3, #-68]
 3548              		.loc 1 727 5
 3549 0088 1A46     		mov	r2, r3
 3550 008a 084B     		ldr	r3, .L161
 3551 008c 0093     		str	r3, [sp]
 3552 008e 1346     		mov	r3, r2
 3553 0090 2246     		mov	r2, r4
 3554 0092 FFF7FEFF 		bl	UTIL_LCD_DrawLine
 726:Src/app.c     ****     UTIL_LCD_DrawLine(corners[i][0], corners[i][1], corners[(i + 1) % 4][0], corners[(i + 1) % 4][1
 3555              		.loc 1 726 23 discriminator 3
 3556 0096 FB6C     		ldr	r3, [r7, #76]
 3557 0098 0133     		adds	r3, r3, #1
 3558 009a FB64     		str	r3, [r7, #76]
 3559              	.L158:
 726:Src/app.c     ****     UTIL_LCD_DrawLine(corners[i][0], corners[i][1], corners[(i + 1) % 4][0], corners[(i + 1) % 4][1
 3560              		.loc 1 726 17 discriminator 1
 3561 009c FB6C     		ldr	r3, [r7, #76]
 3562 009e 032B     		cmp	r3, #3
 3563 00a0 C7DD     		ble	.L159
 3564 00a2 00E0     		b	.L155
 3565              	.L160:
 723:Src/app.c     ****     return ;
 3566              		.loc 1 723 5 discriminator 1
 3567 00a4 00BF     		nop
 3568              	.L155:
 728:Src/app.c     ****                       UTIL_LCD_COLOR_RED);
 729:Src/app.c     **** }
ARM GAS  /tmp/ccrysqwW.s 			page 88


 3569              		.loc 1 729 1
 3570 00a6 5437     		adds	r7, r7, #84
 3571              		.cfi_def_cfa_offset 12
 3572 00a8 BD46     		mov	sp, r7
 3573              		.cfi_def_cfa_register 13
 3574              		@ sp needed
 3575 00aa 90BD     		pop	{r4, r7, pc}
 3576              	.L162:
 3577              		.align	2
 3578              	.L161:
 3579 00ac 0000FFFF 		.word	-65536
 3580              		.cfi_endproc
 3581              	.LFE7387:
 3583              		.section	.text.decode_ld_landmark,"ax",%progbits
 3584              		.align	1
 3585              		.syntax unified
 3586              		.thumb
 3587              		.thumb_func
 3589              	decode_ld_landmark:
 3590              	.LFB7388:
 730:Src/app.c     **** 
 731:Src/app.c     **** static void decode_ld_landmark(roi_t *roi, ld_point_t *lm, ld_point_t *decoded)
 732:Src/app.c     **** {
 3591              		.loc 1 732 1
 3592              		.cfi_startproc
 3593              		@ args = 0, pretend = 0, frame = 32
 3594              		@ frame_needed = 1, uses_anonymous_args = 0
 3595 0000 80B5     		push	{r7, lr}
 3596              		.cfi_def_cfa_offset 8
 3597              		.cfi_offset 7, -8
 3598              		.cfi_offset 14, -4
 3599 0002 2DED048B 		vpush.64	{d8, d9}
 3600              		.cfi_def_cfa_offset 24
 3601              		.cfi_offset 80, -24
 3602              		.cfi_offset 81, -20
 3603              		.cfi_offset 82, -16
 3604              		.cfi_offset 83, -12
 3605 0006 88B0     		sub	sp, sp, #32
 3606              		.cfi_def_cfa_offset 56
 3607 0008 00AF     		add	r7, sp, #0
 3608              		.cfi_def_cfa_register 7
 3609 000a F860     		str	r0, [r7, #12]
 3610 000c B960     		str	r1, [r7, #8]
 3611 000e 7A60     		str	r2, [r7, #4]
 733:Src/app.c     ****   float rotation = roi->rotation;
 3612              		.loc 1 733 9
 3613 0010 FB68     		ldr	r3, [r7, #12]
 3614 0012 1B69     		ldr	r3, [r3, #16]	@ float
 3615 0014 FB61     		str	r3, [r7, #28]	@ float
 734:Src/app.c     ****   float w = roi->w;
 3616              		.loc 1 734 9
 3617 0016 FB68     		ldr	r3, [r7, #12]
 3618 0018 9B68     		ldr	r3, [r3, #8]	@ float
 3619 001a BB61     		str	r3, [r7, #24]	@ float
 735:Src/app.c     ****   float h = roi->h;
 3620              		.loc 1 735 9
 3621 001c FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccrysqwW.s 			page 89


 3622 001e DB68     		ldr	r3, [r3, #12]	@ float
 3623 0020 7B61     		str	r3, [r7, #20]	@ float
 736:Src/app.c     **** 
 737:Src/app.c     ****   decoded->x = roi->cx + (lm->x - 0.5) * w * cos(rotation) - (lm->y - 0.5) * h * sin(rotation);
 3624              		.loc 1 737 19
 3625 0022 FB68     		ldr	r3, [r7, #12]
 3626 0024 D3ED007A 		vldr.32	s15, [r3]
 3627 0028 B7EEE78A 		vcvt.f64.f32	d8, s15
 3628              		.loc 1 737 29
 3629 002c BB68     		ldr	r3, [r7, #8]
 3630 002e D3ED007A 		vldr.32	s15, [r3]
 3631 0032 B7EEE77A 		vcvt.f64.f32	d7, s15
 3632              		.loc 1 737 33
 3633 0036 B6EE006B 		vmov.f64	d6, #5.0e-1
 3634 003a 37EE466B 		vsub.f64	d6, d7, d6
 3635              		.loc 1 737 40
 3636 003e D7ED067A 		vldr.32	s15, [r7, #24]
 3637 0042 B7EEE77A 		vcvt.f64.f32	d7, s15
 3638 0046 26EE079B 		vmul.f64	d9, d6, d7
 3639              		.loc 1 737 46
 3640 004a D7ED077A 		vldr.32	s15, [r7, #28]
 3641 004e B7EEE77A 		vcvt.f64.f32	d7, s15
 3642 0052 B0EE470B 		vmov.f64	d0, d7
 3643 0056 FFF7FEFF 		bl	cos
 3644 005a B0EE407B 		vmov.f64	d7, d0
 3645              		.loc 1 737 44 discriminator 1
 3646 005e 29EE077B 		vmul.f64	d7, d9, d7
 3647              		.loc 1 737 24 discriminator 1
 3648 0062 38EE078B 		vadd.f64	d8, d8, d7
 3649              		.loc 1 737 65 discriminator 1
 3650 0066 BB68     		ldr	r3, [r7, #8]
 3651 0068 D3ED017A 		vldr.32	s15, [r3, #4]
 3652 006c B7EEE77A 		vcvt.f64.f32	d7, s15
 3653              		.loc 1 737 69 discriminator 1
 3654 0070 B6EE006B 		vmov.f64	d6, #5.0e-1
 3655 0074 37EE466B 		vsub.f64	d6, d7, d6
 3656              		.loc 1 737 76 discriminator 1
 3657 0078 D7ED057A 		vldr.32	s15, [r7, #20]
 3658 007c B7EEE77A 		vcvt.f64.f32	d7, s15
 3659 0080 26EE079B 		vmul.f64	d9, d6, d7
 3660              		.loc 1 737 82 discriminator 1
 3661 0084 D7ED077A 		vldr.32	s15, [r7, #28]
 3662 0088 B7EEE77A 		vcvt.f64.f32	d7, s15
 3663 008c B0EE470B 		vmov.f64	d0, d7
 3664 0090 FFF7FEFF 		bl	sin
 3665 0094 B0EE407B 		vmov.f64	d7, d0
 3666              		.loc 1 737 80 discriminator 2
 3667 0098 29EE077B 		vmul.f64	d7, d9, d7
 3668              		.loc 1 737 60 discriminator 2
 3669 009c 38EE477B 		vsub.f64	d7, d8, d7
 3670 00a0 F7EEC77B 		vcvt.f32.f64	s15, d7
 3671              		.loc 1 737 14 discriminator 2
 3672 00a4 7B68     		ldr	r3, [r7, #4]
 3673 00a6 C3ED007A 		vstr.32	s15, [r3]
 738:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 3674              		.loc 1 738 19
 3675 00aa FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccrysqwW.s 			page 90


 3676 00ac D3ED017A 		vldr.32	s15, [r3, #4]
 3677 00b0 B7EEE78A 		vcvt.f64.f32	d8, s15
 3678              		.loc 1 738 29
 3679 00b4 BB68     		ldr	r3, [r7, #8]
 3680 00b6 D3ED007A 		vldr.32	s15, [r3]
 3681 00ba B7EEE77A 		vcvt.f64.f32	d7, s15
 3682              		.loc 1 738 33
 3683 00be B6EE006B 		vmov.f64	d6, #5.0e-1
 3684 00c2 37EE466B 		vsub.f64	d6, d7, d6
 3685              		.loc 1 738 40
 3686 00c6 D7ED067A 		vldr.32	s15, [r7, #24]
 3687 00ca B7EEE77A 		vcvt.f64.f32	d7, s15
 3688 00ce 26EE079B 		vmul.f64	d9, d6, d7
 3689              		.loc 1 738 46
 3690 00d2 D7ED077A 		vldr.32	s15, [r7, #28]
 3691 00d6 B7EEE77A 		vcvt.f64.f32	d7, s15
 3692 00da B0EE470B 		vmov.f64	d0, d7
 3693 00de FFF7FEFF 		bl	sin
 3694 00e2 B0EE407B 		vmov.f64	d7, d0
 3695              		.loc 1 738 44 discriminator 1
 3696 00e6 29EE077B 		vmul.f64	d7, d9, d7
 3697              		.loc 1 738 24 discriminator 1
 3698 00ea 38EE078B 		vadd.f64	d8, d8, d7
 3699              		.loc 1 738 65 discriminator 1
 3700 00ee BB68     		ldr	r3, [r7, #8]
 3701 00f0 D3ED017A 		vldr.32	s15, [r3, #4]
 3702 00f4 B7EEE77A 		vcvt.f64.f32	d7, s15
 3703              		.loc 1 738 69 discriminator 1
 3704 00f8 B6EE006B 		vmov.f64	d6, #5.0e-1
 3705 00fc 37EE466B 		vsub.f64	d6, d7, d6
 3706              		.loc 1 738 76 discriminator 1
 3707 0100 D7ED057A 		vldr.32	s15, [r7, #20]
 3708 0104 B7EEE77A 		vcvt.f64.f32	d7, s15
 3709 0108 26EE079B 		vmul.f64	d9, d6, d7
 3710              		.loc 1 738 82 discriminator 1
 3711 010c D7ED077A 		vldr.32	s15, [r7, #28]
 3712 0110 B7EEE77A 		vcvt.f64.f32	d7, s15
 3713 0114 B0EE470B 		vmov.f64	d0, d7
 3714 0118 FFF7FEFF 		bl	cos
 3715 011c B0EE407B 		vmov.f64	d7, d0
 3716              		.loc 1 738 80 discriminator 2
 3717 0120 29EE077B 		vmul.f64	d7, d9, d7
 3718              		.loc 1 738 60 discriminator 2
 3719 0124 38EE077B 		vadd.f64	d7, d8, d7
 3720 0128 F7EEC77B 		vcvt.f32.f64	s15, d7
 3721              		.loc 1 738 14 discriminator 2
 3722 012c 7B68     		ldr	r3, [r7, #4]
 3723 012e C3ED017A 		vstr.32	s15, [r3, #4]
 739:Src/app.c     **** }
 3724              		.loc 1 739 1
 3725 0132 00BF     		nop
 3726 0134 2037     		adds	r7, r7, #32
 3727              		.cfi_def_cfa_offset 24
 3728 0136 BD46     		mov	sp, r7
 3729              		.cfi_def_cfa_register 13
 3730              		@ sp needed
 3731 0138 BDEC048B 		vldm	sp!, {d8-d9}
ARM GAS  /tmp/ccrysqwW.s 			page 91


 3732              		.cfi_restore 82
 3733              		.cfi_restore 83
 3734              		.cfi_restore 80
 3735              		.cfi_restore 81
 3736              		.cfi_def_cfa_offset 8
 3737 013c 80BD     		pop	{r7, pc}
 3738              		.cfi_endproc
 3739              	.LFE7388:
 3741              		.section	.text.display_ld_hand,"ax",%progbits
 3742              		.align	1
 3743              		.syntax unified
 3744              		.thumb
 3745              		.thumb_func
 3747              	display_ld_hand:
 3748              	.LFB7389:
 740:Src/app.c     **** 
 741:Src/app.c     **** static void display_ld_hand(hand_info_t *hand)
 742:Src/app.c     **** {
 3749              		.loc 1 742 1
 3750              		.cfi_startproc
 3751              		@ args = 0, pretend = 0, frame = 32
 3752              		@ frame_needed = 1, uses_anonymous_args = 0
 3753 0000 80B5     		push	{r7, lr}
 3754              		.cfi_def_cfa_offset 8
 3755              		.cfi_offset 7, -8
 3756              		.cfi_offset 14, -4
 3757 0002 88B0     		sub	sp, sp, #32
 3758              		.cfi_def_cfa_offset 40
 3759 0004 00AF     		add	r7, sp, #0
 3760              		.cfi_def_cfa_register 7
 3761 0006 7860     		str	r0, [r7, #4]
 743:Src/app.c     ****   const int disk_radius = DISK_RADIUS;
 3762              		.loc 1 743 13
 3763 0008 0223     		movs	r3, #2
 3764 000a BB61     		str	r3, [r7, #24]
 744:Src/app.c     ****   roi_t *roi = &hand->roi;
 3765              		.loc 1 744 10
 3766 000c 7B68     		ldr	r3, [r7, #4]
 3767 000e 1C33     		adds	r3, r3, #28
 3768 0010 7B61     		str	r3, [r7, #20]
 745:Src/app.c     ****   static int x[LD_LANDMARK_NB];
 746:Src/app.c     ****   static int y[LD_LANDMARK_NB];
 747:Src/app.c     ****   static int is_clamped[LD_LANDMARK_NB];
 748:Src/app.c     ****   ld_point_t decoded;
 749:Src/app.c     ****   int i;
 750:Src/app.c     **** 
 751:Src/app.c     ****   for (i = 0; i < LD_LANDMARK_NB; i++) {
 3769              		.loc 1 751 10
 3770 0012 0023     		movs	r3, #0
 3771 0014 FB61     		str	r3, [r7, #28]
 3772              		.loc 1 751 3
 3773 0016 32E0     		b	.L165
 3774              	.L166:
 752:Src/app.c     ****     decode_ld_landmark(roi, &hand->ld_landmarks[i], &decoded);
 3775              		.loc 1 752 5
 3776 0018 FB69     		ldr	r3, [r7, #28]
 3777 001a 0633     		adds	r3, r3, #6
ARM GAS  /tmp/ccrysqwW.s 			page 92


 3778 001c DB00     		lsls	r3, r3, #3
 3779 001e 7A68     		ldr	r2, [r7, #4]
 3780 0020 1344     		add	r3, r3, r2
 3781 0022 07F10C02 		add	r2, r7, #12
 3782 0026 1946     		mov	r1, r3
 3783 0028 7869     		ldr	r0, [r7, #20]
 3784 002a FFF7FEFF 		bl	decode_ld_landmark
 753:Src/app.c     ****     x[i] = (int)decoded.x;
 3785              		.loc 1 753 24
 3786 002e D7ED037A 		vldr.32	s15, [r7, #12]
 3787              		.loc 1 753 12
 3788 0032 FDEEE77A 		vcvt.s32.f32	s15, s15
 3789 0036 17EE901A 		vmov	r1, s15	@ int
 3790              		.loc 1 753 10
 3791 003a 264A     		ldr	r2, .L172
 3792 003c FB69     		ldr	r3, [r7, #28]
 3793 003e 42F82310 		str	r1, [r2, r3, lsl #2]
 754:Src/app.c     ****     y[i] = (int)decoded.y;
 3794              		.loc 1 754 24
 3795 0042 D7ED047A 		vldr.32	s15, [r7, #16]
 3796              		.loc 1 754 12
 3797 0046 FDEEE77A 		vcvt.s32.f32	s15, s15
 3798 004a 17EE901A 		vmov	r1, s15	@ int
 3799              		.loc 1 754 10
 3800 004e 224A     		ldr	r2, .L172+4
 3801 0050 FB69     		ldr	r3, [r7, #28]
 3802 0052 42F82310 		str	r1, [r2, r3, lsl #2]
 755:Src/app.c     ****     is_clamped[i] = clamp_point_with_margin(&x[i], &y[i], disk_radius);
 3803              		.loc 1 755 21
 3804 0056 FB69     		ldr	r3, [r7, #28]
 3805 0058 9B00     		lsls	r3, r3, #2
 3806 005a 1E4A     		ldr	r2, .L172
 3807 005c 9818     		adds	r0, r3, r2
 3808 005e FB69     		ldr	r3, [r7, #28]
 3809 0060 9B00     		lsls	r3, r3, #2
 3810 0062 1D4A     		ldr	r2, .L172+4
 3811 0064 1344     		add	r3, r3, r2
 3812 0066 BA69     		ldr	r2, [r7, #24]
 3813 0068 1946     		mov	r1, r3
 3814 006a FFF7FEFF 		bl	clamp_point_with_margin
 3815 006e 0246     		mov	r2, r0
 3816              		.loc 1 755 19 discriminator 1
 3817 0070 1A49     		ldr	r1, .L172+8
 3818 0072 FB69     		ldr	r3, [r7, #28]
 3819 0074 41F82320 		str	r2, [r1, r3, lsl #2]
 751:Src/app.c     ****     decode_ld_landmark(roi, &hand->ld_landmarks[i], &decoded);
 3820              		.loc 1 751 36 discriminator 3
 3821 0078 FB69     		ldr	r3, [r7, #28]
 3822 007a 0133     		adds	r3, r3, #1
 3823 007c FB61     		str	r3, [r7, #28]
 3824              	.L165:
 751:Src/app.c     ****     decode_ld_landmark(roi, &hand->ld_landmarks[i], &decoded);
 3825              		.loc 1 751 17 discriminator 1
 3826 007e FB69     		ldr	r3, [r7, #28]
 3827 0080 B3F5EA7F 		cmp	r3, #468
 3828 0084 C8DB     		blt	.L166
 756:Src/app.c     ****   }
ARM GAS  /tmp/ccrysqwW.s 			page 93


 757:Src/app.c     **** 
 758:Src/app.c     ****   for (i = 0; i < LD_LANDMARK_NB; i++) {
 3829              		.loc 1 758 10
 3830 0086 0023     		movs	r3, #0
 3831 0088 FB61     		str	r3, [r7, #28]
 3832              		.loc 1 758 3
 3833 008a 19E0     		b	.L167
 3834              	.L170:
 759:Src/app.c     ****     if (is_clamped[i])
 3835              		.loc 1 759 19
 3836 008c 134A     		ldr	r2, .L172+8
 3837 008e FB69     		ldr	r3, [r7, #28]
 3838 0090 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3839              		.loc 1 759 8
 3840 0094 002B     		cmp	r3, #0
 3841 0096 0FD1     		bne	.L171
 760:Src/app.c     ****       continue;
 761:Src/app.c     ****     UTIL_LCD_FillCircle(x[i], y[i], disk_radius, UTIL_LCD_COLOR_YELLOW);
 3842              		.loc 1 761 26
 3843 0098 0E4A     		ldr	r2, .L172
 3844 009a FB69     		ldr	r3, [r7, #28]
 3845 009c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3846              		.loc 1 761 5
 3847 00a0 1846     		mov	r0, r3
 3848              		.loc 1 761 32
 3849 00a2 0D4A     		ldr	r2, .L172+4
 3850 00a4 FB69     		ldr	r3, [r7, #28]
 3851 00a6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3852              		.loc 1 761 5
 3853 00aa 1946     		mov	r1, r3
 3854 00ac BA69     		ldr	r2, [r7, #24]
 3855 00ae 6FF0FF03 		mvn	r3, #255
 3856 00b2 FFF7FEFF 		bl	UTIL_LCD_FillCircle
 3857 00b6 00E0     		b	.L169
 3858              	.L171:
 760:Src/app.c     ****       continue;
 3859              		.loc 1 760 7
 3860 00b8 00BF     		nop
 3861              	.L169:
 758:Src/app.c     ****     if (is_clamped[i])
 3862              		.loc 1 758 36 discriminator 2
 3863 00ba FB69     		ldr	r3, [r7, #28]
 3864 00bc 0133     		adds	r3, r3, #1
 3865 00be FB61     		str	r3, [r7, #28]
 3866              	.L167:
 758:Src/app.c     ****     if (is_clamped[i])
 3867              		.loc 1 758 17 discriminator 1
 3868 00c0 FB69     		ldr	r3, [r7, #28]
 3869 00c2 B3F5EA7F 		cmp	r3, #468
 3870 00c6 E1DB     		blt	.L170
 762:Src/app.c     ****   }
 763:Src/app.c     **** }
 3871              		.loc 1 763 1
 3872 00c8 00BF     		nop
 3873 00ca 00BF     		nop
 3874 00cc 2037     		adds	r7, r7, #32
 3875              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccrysqwW.s 			page 94


 3876 00ce BD46     		mov	sp, r7
 3877              		.cfi_def_cfa_register 13
 3878              		@ sp needed
 3879 00d0 80BD     		pop	{r7, pc}
 3880              	.L173:
 3881 00d2 00BF     		.align	2
 3882              	.L172:
 3883 00d4 00000000 		.word	x.17
 3884 00d8 00000000 		.word	y.16
 3885 00dc 00000000 		.word	is_clamped.15
 3886              		.cfi_endproc
 3887              	.LFE7389:
 3889              		.section	.text.display_hand,"ax",%progbits
 3890              		.align	1
 3891              		.global	display_hand
 3892              		.syntax unified
 3893              		.thumb
 3894              		.thumb_func
 3896              	display_hand:
 3897              	.LFB7390:
 764:Src/app.c     **** 
 765:Src/app.c     **** void display_hand(display_info_t *info, hand_info_t *hand)
 766:Src/app.c     **** {
 3898              		.loc 1 766 1
 3899              		.cfi_startproc
 3900              		@ args = 0, pretend = 0, frame = 8
 3901              		@ frame_needed = 1, uses_anonymous_args = 0
 3902 0000 80B5     		push	{r7, lr}
 3903              		.cfi_def_cfa_offset 8
 3904              		.cfi_offset 7, -8
 3905              		.cfi_offset 14, -4
 3906 0002 82B0     		sub	sp, sp, #8
 3907              		.cfi_def_cfa_offset 16
 3908 0004 00AF     		add	r7, sp, #0
 3909              		.cfi_def_cfa_register 7
 3910 0006 7860     		str	r0, [r7, #4]
 3911 0008 3960     		str	r1, [r7]
 767:Src/app.c     ****   if (info->is_pd_displayed) {
 3912              		.loc 1 767 11
 3913 000a 7B68     		ldr	r3, [r7, #4]
 3914 000c 9B69     		ldr	r3, [r3, #24]
 3915              		.loc 1 767 6
 3916 000e 002B     		cmp	r3, #0
 3917 0010 09D0     		beq	.L175
 768:Src/app.c     ****     display_pd_hand(&hand->pd_hands);
 3918              		.loc 1 768 5
 3919 0012 3B68     		ldr	r3, [r7]
 3920 0014 0433     		adds	r3, r3, #4
 3921 0016 1846     		mov	r0, r3
 3922 0018 FFF7FEFF 		bl	display_pd_hand
 769:Src/app.c     ****     display_roi(&hand->roi);
 3923              		.loc 1 769 5
 3924 001c 3B68     		ldr	r3, [r7]
 3925 001e 1C33     		adds	r3, r3, #28
 3926 0020 1846     		mov	r0, r3
 3927 0022 FFF7FEFF 		bl	display_roi
 3928              	.L175:
ARM GAS  /tmp/ccrysqwW.s 			page 95


 770:Src/app.c     ****   }
 771:Src/app.c     ****   if (info->is_ld_displayed)
 3929              		.loc 1 771 11
 3930 0026 7B68     		ldr	r3, [r7, #4]
 3931 0028 5B69     		ldr	r3, [r3, #20]
 3932              		.loc 1 771 6
 3933 002a 002B     		cmp	r3, #0
 3934 002c 02D0     		beq	.L177
 772:Src/app.c     ****     display_ld_hand(hand);
 3935              		.loc 1 772 5
 3936 002e 3868     		ldr	r0, [r7]
 3937 0030 FFF7FEFF 		bl	display_ld_hand
 3938              	.L177:
 773:Src/app.c     **** }
 3939              		.loc 1 773 1
 3940 0034 00BF     		nop
 3941 0036 0837     		adds	r7, r7, #8
 3942              		.cfi_def_cfa_offset 8
 3943 0038 BD46     		mov	sp, r7
 3944              		.cfi_def_cfa_register 13
 3945              		@ sp needed
 3946 003a 80BD     		pop	{r7, pc}
 3947              		.cfi_endproc
 3948              	.LFE7390:
 3950              		.section	.rodata
 3951 007a 0000     		.align	2
 3952              	.LC12:
 3953 007c 43707520 		.ascii	"Cpu load\000"
 3953      6C6F6164 
 3953      00
 3954 0085 000000   		.align	2
 3955              	.LC13:
 3956 0088 20202025 		.ascii	"   %.1f%%\000"
 3956      2E316625 
 3956      2500
 3957 0092 0000     		.align	2
 3958              	.LC14:
 3959 0094 496E6665 		.ascii	"Inferences\000"
 3959      72656E63 
 3959      657300
 3960 009f 00       		.align	2
 3961              	.LC15:
 3962 00a0 20666163 		.ascii	" face_conf %2u\000"
 3962      655F636F 
 3962      6E662025 
 3962      327500
 3963 00af 00       		.align	2
 3964              	.LC16:
 3965 00b0 20796F6C 		.ascii	" yolo_num_detections %2u\000"
 3965      6F5F6E75 
 3965      6D5F6465 
 3965      74656374 
 3965      696F6E73 
 3966 00c9 000000   		.align	2
 3967              	.LC17:
 3968 00cc 2020252E 		.ascii	"  %.1f FPS\000"
 3968      31662046 
ARM GAS  /tmp/ccrysqwW.s 			page 96


 3968      505300
 3969              		.section	.text.Display_NetworkOutput,"ax",%progbits
 3970              		.align	1
 3971              		.syntax unified
 3972              		.thumb
 3973              		.thumb_func
 3975              	Display_NetworkOutput:
 3976              	.LFB7391:
 774:Src/app.c     **** 
 775:Src/app.c     **** static void Display_NetworkOutput(display_info_t *info)
 776:Src/app.c     **** {
 3977              		.loc 1 776 1
 3978              		.cfi_startproc
 3979              		@ args = 0, pretend = 0, frame = 24
 3980              		@ frame_needed = 1, uses_anonymous_args = 0
 3981 0000 90B5     		push	{r4, r7, lr}
 3982              		.cfi_def_cfa_offset 12
 3983              		.cfi_offset 4, -12
 3984              		.cfi_offset 7, -8
 3985              		.cfi_offset 14, -4
 3986 0002 89B0     		sub	sp, sp, #36
 3987              		.cfi_def_cfa_offset 48
 3988 0004 02AF     		add	r7, sp, #8
 3989              		.cfi_def_cfa 7, 40
 3990 0006 7860     		str	r0, [r7, #4]
 777:Src/app.c     ****   float cpu_load_one_second;
 778:Src/app.c     ****   int line_nb = 0;
 3991              		.loc 1 778 7
 3992 0008 0023     		movs	r3, #0
 3993 000a 3B61     		str	r3, [r7, #16]
 779:Src/app.c     ****   float nn_fps;
 780:Src/app.c     ****   int i;
 781:Src/app.c     **** 
 782:Src/app.c     ****   /* clear previous ui */
 783:Src/app.c     ****   UTIL_LCD_FillRect(lcd_fg_area.X0, lcd_fg_area.Y0, lcd_fg_area.XSize, lcd_fg_area.YSize, 0x0000000
 3994              		.loc 1 783 3
 3995 000c 5F4B     		ldr	r3, .L182
 3996 000e 1868     		ldr	r0, [r3]
 3997 0010 5E4B     		ldr	r3, .L182
 3998 0012 5968     		ldr	r1, [r3, #4]
 3999 0014 5D4B     		ldr	r3, .L182
 4000 0016 9A68     		ldr	r2, [r3, #8]
 4001 0018 5C4B     		ldr	r3, .L182
 4002 001a DB68     		ldr	r3, [r3, #12]
 4003 001c 0024     		movs	r4, #0
 4004 001e 0094     		str	r4, [sp]
 4005 0020 FFF7FEFF 		bl	UTIL_LCD_FillRect
 784:Src/app.c     **** 
 785:Src/app.c     ****   /* cpu load */
 786:Src/app.c     ****   cpuload_update(&cpu_load);
 4006              		.loc 1 786 3
 4007 0024 5A48     		ldr	r0, .L182+4
 4008 0026 FFF7FEFF 		bl	cpuload_update
 787:Src/app.c     ****   cpuload_get_info(&cpu_load, NULL, &cpu_load_one_second, NULL);
 4009              		.loc 1 787 3
 4010 002a 07F10802 		add	r2, r7, #8
 4011 002e 0023     		movs	r3, #0
ARM GAS  /tmp/ccrysqwW.s 			page 97


 4012 0030 0021     		movs	r1, #0
 4013 0032 5748     		ldr	r0, .L182+4
 4014 0034 FFF7FEFF 		bl	cpuload_get_info
 788:Src/app.c     **** 
 789:Src/app.c     ****   /* draw metrics */
 790:Src/app.c     ****   nn_fps = 1000.0 / info->nn_period_ms;
 4015              		.loc 1 790 25
 4016 0038 7B68     		ldr	r3, [r7, #4]
 4017 003a 93ED007A 		vldr.32	s14, [r3]
 4018              		.loc 1 790 10
 4019 003e DFED556A 		vldr.32	s13, .L182+8
 4020 0042 C6EE877A 		vdiv.f32	s15, s13, s14
 4021 0046 C7ED057A 		vstr.32	s15, [r7, #20]
 791:Src/app.c     ****   UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "Cpu load");
 4022              		.loc 1 791 26
 4023 004a FFF7FEFF 		bl	UTIL_LCD_GetFont
 4024 004e 0346     		mov	r3, r0
 4025              		.loc 1 791 26 is_stmt 0 discriminator 1
 4026 0050 DB88     		ldrh	r3, [r3, #6]
 4027 0052 1A46     		mov	r2, r3
 4028 0054 3B69     		ldr	r3, [r7, #16]
 4029 0056 02FB03F3 		mul	r3, r2, r3
 4030              		.loc 1 791 3 is_stmt 1 discriminator 1
 4031 005a 1946     		mov	r1, r3
 4032 005c 4E4B     		ldr	r3, .L182+12
 4033 005e 0222     		movs	r2, #2
 4034 0060 0020     		movs	r0, #0
 4035 0062 FFF7FEFF 		bl	UTIL_LCDEx_PrintfAt
 792:Src/app.c     ****   line_nb += 1;
 4036              		.loc 1 792 11
 4037 0066 3B69     		ldr	r3, [r7, #16]
 4038 0068 0133     		adds	r3, r3, #1
 4039 006a 3B61     		str	r3, [r7, #16]
 793:Src/app.c     ****   UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "   %.1f%%", cpu_load_one_second);
 4040              		.loc 1 793 26
 4041 006c FFF7FEFF 		bl	UTIL_LCD_GetFont
 4042 0070 0346     		mov	r3, r0
 4043              		.loc 1 793 26 is_stmt 0 discriminator 1
 4044 0072 DB88     		ldrh	r3, [r3, #6]
 4045 0074 1A46     		mov	r2, r3
 4046 0076 3B69     		ldr	r3, [r7, #16]
 4047 0078 02FB03F3 		mul	r3, r2, r3
 4048              		.loc 1 793 3 is_stmt 1 discriminator 1
 4049 007c 1946     		mov	r1, r3
 4050 007e D7ED027A 		vldr.32	s15, [r7, #8]
 4051 0082 B7EEE77A 		vcvt.f64.f32	d7, s15
 4052 0086 8DED007B 		vstr.64	d7, [sp]
 4053 008a 444B     		ldr	r3, .L182+16
 4054 008c 0222     		movs	r2, #2
 4055 008e 0020     		movs	r0, #0
 4056 0090 FFF7FEFF 		bl	UTIL_LCDEx_PrintfAt
 794:Src/app.c     ****   line_nb += 2;
 4057              		.loc 1 794 11
 4058 0094 3B69     		ldr	r3, [r7, #16]
 4059 0096 0233     		adds	r3, r3, #2
 4060 0098 3B61     		str	r3, [r7, #16]
 795:Src/app.c     ****   UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "Inferences");
ARM GAS  /tmp/ccrysqwW.s 			page 98


 4061              		.loc 1 795 26
 4062 009a FFF7FEFF 		bl	UTIL_LCD_GetFont
 4063 009e 0346     		mov	r3, r0
 4064              		.loc 1 795 26 is_stmt 0 discriminator 1
 4065 00a0 DB88     		ldrh	r3, [r3, #6]
 4066 00a2 1A46     		mov	r2, r3
 4067 00a4 3B69     		ldr	r3, [r7, #16]
 4068 00a6 02FB03F3 		mul	r3, r2, r3
 4069              		.loc 1 795 3 is_stmt 1 discriminator 1
 4070 00aa 1946     		mov	r1, r3
 4071 00ac 3C4B     		ldr	r3, .L182+20
 4072 00ae 0222     		movs	r2, #2
 4073 00b0 0020     		movs	r0, #0
 4074 00b2 FFF7FEFF 		bl	UTIL_LCDEx_PrintfAt
 796:Src/app.c     ****   line_nb += 1;
 4075              		.loc 1 796 11
 4076 00b6 3B69     		ldr	r3, [r7, #16]
 4077 00b8 0133     		adds	r3, r3, #1
 4078 00ba 3B61     		str	r3, [r7, #16]
 797:Src/app.c     ****   UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, " face_conf %2u", info->pd_ms);
 4079              		.loc 1 797 26
 4080 00bc FFF7FEFF 		bl	UTIL_LCD_GetFont
 4081 00c0 0346     		mov	r3, r0
 4082              		.loc 1 797 26 is_stmt 0 discriminator 1
 4083 00c2 DB88     		ldrh	r3, [r3, #6]
 4084 00c4 1A46     		mov	r2, r3
 4085 00c6 3B69     		ldr	r3, [r7, #16]
 4086 00c8 02FB03F3 		mul	r3, r2, r3
 4087              		.loc 1 797 3 is_stmt 1 discriminator 1
 4088 00cc 1946     		mov	r1, r3
 4089 00ce 7B68     		ldr	r3, [r7, #4]
 4090 00d0 5B68     		ldr	r3, [r3, #4]
 4091 00d2 0093     		str	r3, [sp]
 4092 00d4 334B     		ldr	r3, .L182+24
 4093 00d6 0222     		movs	r2, #2
 4094 00d8 0020     		movs	r0, #0
 4095 00da FFF7FEFF 		bl	UTIL_LCDEx_PrintfAt
 798:Src/app.c     ****   line_nb += 1;
 4096              		.loc 1 798 11
 4097 00de 3B69     		ldr	r3, [r7, #16]
 4098 00e0 0133     		adds	r3, r3, #1
 4099 00e2 3B61     		str	r3, [r7, #16]
 799:Src/app.c     ****   UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, " yolo_num_detections %2u", info->hl_ms);
 4100              		.loc 1 799 26
 4101 00e4 FFF7FEFF 		bl	UTIL_LCD_GetFont
 4102 00e8 0346     		mov	r3, r0
 4103              		.loc 1 799 26 is_stmt 0 discriminator 1
 4104 00ea DB88     		ldrh	r3, [r3, #6]
 4105 00ec 1A46     		mov	r2, r3
 4106 00ee 3B69     		ldr	r3, [r7, #16]
 4107 00f0 02FB03F3 		mul	r3, r2, r3
 4108              		.loc 1 799 3 is_stmt 1 discriminator 1
 4109 00f4 1946     		mov	r1, r3
 4110 00f6 7B68     		ldr	r3, [r7, #4]
 4111 00f8 9B68     		ldr	r3, [r3, #8]
 4112 00fa 0093     		str	r3, [sp]
 4113 00fc 2A4B     		ldr	r3, .L182+28
ARM GAS  /tmp/ccrysqwW.s 			page 99


 4114 00fe 0222     		movs	r2, #2
 4115 0100 0020     		movs	r0, #0
 4116 0102 FFF7FEFF 		bl	UTIL_LCDEx_PrintfAt
 800:Src/app.c     ****   line_nb += 2;
 4117              		.loc 1 800 11
 4118 0106 3B69     		ldr	r3, [r7, #16]
 4119 0108 0233     		adds	r3, r3, #2
 4120 010a 3B61     		str	r3, [r7, #16]
 801:Src/app.c     ****   UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "  %.1f FPS", nn_fps);
 4121              		.loc 1 801 26
 4122 010c FFF7FEFF 		bl	UTIL_LCD_GetFont
 4123 0110 0346     		mov	r3, r0
 4124              		.loc 1 801 26 is_stmt 0 discriminator 1
 4125 0112 DB88     		ldrh	r3, [r3, #6]
 4126 0114 1A46     		mov	r2, r3
 4127 0116 3B69     		ldr	r3, [r7, #16]
 4128 0118 02FB03F3 		mul	r3, r2, r3
 4129              		.loc 1 801 3 is_stmt 1 discriminator 1
 4130 011c 1946     		mov	r1, r3
 4131 011e D7ED057A 		vldr.32	s15, [r7, #20]
 4132 0122 B7EEE77A 		vcvt.f64.f32	d7, s15
 4133 0126 8DED007B 		vstr.64	d7, [sp]
 4134 012a 204B     		ldr	r3, .L182+32
 4135 012c 0222     		movs	r2, #2
 4136 012e 0020     		movs	r0, #0
 4137 0130 FFF7FEFF 		bl	UTIL_LCDEx_PrintfAt
 802:Src/app.c     ****   line_nb += 2;
 4138              		.loc 1 802 11
 4139 0134 3B69     		ldr	r3, [r7, #16]
 4140 0136 0233     		adds	r3, r3, #2
 4141 0138 3B61     		str	r3, [r7, #16]
 803:Src/app.c     ****   if (DBG_INFO) {
 804:Src/app.c     ****     UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "Display");
 805:Src/app.c     ****     line_nb += 1;
 806:Src/app.c     ****     UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "   %ums", info->disp_ms);
 807:Src/app.c     ****     line_nb += 1;
 808:Src/app.c     ****   }
 809:Src/app.c     **** 
 810:Src/app.c     ****   /* display palm detector output */
 811:Src/app.c     ****   for (i = 0; i < info->pd_hand_nb; i++) {
 4142              		.loc 1 811 10
 4143 013a 0023     		movs	r3, #0
 4144 013c FB60     		str	r3, [r7, #12]
 4145              		.loc 1 811 3
 4146 013e 1AE0     		b	.L179
 4147              	.L181:
 812:Src/app.c     ****     if (info->hands[i].is_valid)
 4148              		.loc 1 812 23
 4149 0140 7A68     		ldr	r2, [r7, #4]
 4150 0142 FB68     		ldr	r3, [r7, #12]
 4151 0144 4FF46D61 		mov	r1, #3792
 4152 0148 01FB03F3 		mul	r3, r1, r3
 4153 014c 1344     		add	r3, r3, r2
 4154 014e 2433     		adds	r3, r3, #36
 4155 0150 1B68     		ldr	r3, [r3]
 4156              		.loc 1 812 8
 4157 0152 002B     		cmp	r3, #0
ARM GAS  /tmp/ccrysqwW.s 			page 100


 4158 0154 0CD0     		beq	.L180
 813:Src/app.c     ****       display_hand(info, &info->hands[i]);
 4159              		.loc 1 813 7
 4160 0156 FB68     		ldr	r3, [r7, #12]
 4161 0158 4FF46D62 		mov	r2, #3792
 4162 015c 02FB03F3 		mul	r3, r2, r3
 4163 0160 2033     		adds	r3, r3, #32
 4164 0162 7A68     		ldr	r2, [r7, #4]
 4165 0164 1344     		add	r3, r3, r2
 4166 0166 0433     		adds	r3, r3, #4
 4167 0168 1946     		mov	r1, r3
 4168 016a 7868     		ldr	r0, [r7, #4]
 4169 016c FFF7FEFF 		bl	display_hand
 4170              	.L180:
 811:Src/app.c     ****     if (info->hands[i].is_valid)
 4171              		.loc 1 811 38 discriminator 2
 4172 0170 FB68     		ldr	r3, [r7, #12]
 4173 0172 0133     		adds	r3, r3, #1
 4174 0174 FB60     		str	r3, [r7, #12]
 4175              	.L179:
 811:Src/app.c     ****     if (info->hands[i].is_valid)
 4176              		.loc 1 811 23 discriminator 1
 4177 0176 7B68     		ldr	r3, [r7, #4]
 4178 0178 DB69     		ldr	r3, [r3, #28]
 811:Src/app.c     ****     if (info->hands[i].is_valid)
 4179              		.loc 1 811 17 discriminator 1
 4180 017a FA68     		ldr	r2, [r7, #12]
 4181 017c 9A42     		cmp	r2, r3
 4182 017e DFDB     		blt	.L181
 814:Src/app.c     ****   }
 815:Src/app.c     **** 
 816:Src/app.c     ****   if (DBG_INFO)
 817:Src/app.c     ****     UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "pd : %5.1f %%", info->pd_max_prob * 100);
 818:Src/app.c     **** }
 4183              		.loc 1 818 1
 4184 0180 00BF     		nop
 4185 0182 00BF     		nop
 4186 0184 1C37     		adds	r7, r7, #28
 4187              		.cfi_def_cfa_offset 12
 4188 0186 BD46     		mov	sp, r7
 4189              		.cfi_def_cfa_register 13
 4190              		@ sp needed
 4191 0188 90BD     		pop	{r4, r7, pc}
 4192              	.L183:
 4193 018a 00BF     		.align	2
 4194              	.L182:
 4195 018c 00000000 		.word	lcd_fg_area
 4196 0190 00000000 		.word	cpu_load
 4197 0194 00007A44 		.word	1148846080
 4198 0198 7C000000 		.word	.LC12
 4199 019c 88000000 		.word	.LC13
 4200 01a0 94000000 		.word	.LC14
 4201 01a4 A0000000 		.word	.LC15
 4202 01a8 B0000000 		.word	.LC16
 4203 01ac CC000000 		.word	.LC17
 4204              		.cfi_endproc
 4205              	.LFE7391:
ARM GAS  /tmp/ccrysqwW.s 			page 101


 4207              		.section	.text.yolo_detector_init,"ax",%progbits
 4208              		.align	1
 4209              		.syntax unified
 4210              		.thumb
 4211              		.thumb_func
 4213              	yolo_detector_init:
 4214              	.LFB7392:
 819:Src/app.c     **** 
 820:Src/app.c     **** /**
 821:Src/app.c     ****  * @brief  Initializes the YOLO detector model info and post-processing
 822:Src/app.c     ****  * @param  info  Pointer to the yolo_detector_info_t context struct
 823:Src/app.c     ****  * @retval None
 824:Src/app.c     ****  */
 825:Src/app.c     **** static void yolo_detector_init(yolo_detector_info_t *info)
 826:Src/app.c     **** {
 4215              		.loc 1 826 1
 4216              		.cfi_startproc
 4217              		@ args = 0, pretend = 0, frame = 24
 4218              		@ frame_needed = 1, uses_anonymous_args = 0
 4219 0000 80B5     		push	{r7, lr}
 4220              		.cfi_def_cfa_offset 8
 4221              		.cfi_offset 7, -8
 4222              		.cfi_offset 14, -4
 4223 0002 86B0     		sub	sp, sp, #24
 4224              		.cfi_def_cfa_offset 32
 4225 0004 00AF     		add	r7, sp, #0
 4226              		.cfi_def_cfa_register 7
 4227 0006 7860     		str	r0, [r7, #4]
 827:Src/app.c     ****   // Assumes your YOLO model is named 'yolo_detector' in the Cube.AI tool
 828:Src/app.c     ****   const LL_Buffer_InfoTypeDef *nn_out_info = LL_ATON_Output_Buffers_Info_yolo_detector();
 4228              		.loc 1 828 46
 4229 0008 FFF7FEFF 		bl	LL_ATON_Output_Buffers_Info_yolo_detector
 4230 000c 7861     		str	r0, [r7, #20]
 829:Src/app.c     ****   const LL_Buffer_InfoTypeDef *nn_in_info = LL_ATON_Input_Buffers_Info_yolo_detector();
 4231              		.loc 1 829 45
 4232 000e FFF7FEFF 		bl	LL_ATON_Input_Buffers_Info_yolo_detector
 4233 0012 3861     		str	r0, [r7, #16]
 830:Src/app.c     ****   int ret;
 831:Src/app.c     **** 
 832:Src/app.c     ****   /* Link model I/O buffers to the info struct */
 833:Src/app.c     ****   info->nn_in_len = LL_Buffer_len(&nn_in_info[0]);
 4234              		.loc 1 833 21
 4235 0014 3869     		ldr	r0, [r7, #16]
 4236 0016 FFF7FEFF 		bl	LL_Buffer_len
 4237 001a 0246     		mov	r2, r0
 4238              		.loc 1 833 19 discriminator 1
 4239 001c 7B68     		ldr	r3, [r7, #4]
 4240 001e 1A60     		str	r2, [r3]
 834:Src/app.c     ****   info->raw_detections_out = (float *) LL_Buffer_addr_start(&nn_out_info[0]);
 4241              		.loc 1 834 40
 4242 0020 7869     		ldr	r0, [r7, #20]
 4243 0022 FFF7FEFF 		bl	LL_Buffer_addr_start
 4244 0026 0246     		mov	r2, r0
 4245              		.loc 1 834 28 discriminator 1
 4246 0028 7B68     		ldr	r3, [r7, #4]
 4247 002a 5A60     		str	r2, [r3, #4]
 835:Src/app.c     ****   info->raw_detections_out_len = LL_Buffer_len(&nn_out_info[0]);
ARM GAS  /tmp/ccrysqwW.s 			page 102


 4248              		.loc 1 835 34
 4249 002c 7869     		ldr	r0, [r7, #20]
 4250 002e FFF7FEFF 		bl	LL_Buffer_len
 4251 0032 0246     		mov	r2, r0
 4252              		.loc 1 835 32 discriminator 1
 4253 0034 7B68     		ldr	r3, [r7, #4]
 4254 0036 9A60     		str	r2, [r3, #8]
 836:Src/app.c     **** 
 837:Src/app.c     ****   /* Initialize YOLO post-processing static parameters */
 838:Src/app.c     ****   info->static_param.nb_classes = AI_OD_YOLOV8_PP_NB_CLASSES;        // Example: 80 for COCO datase
 4255              		.loc 1 838 33
 4256 0038 7B68     		ldr	r3, [r7, #4]
 4257 003a 0322     		movs	r2, #3
 4258 003c DA60     		str	r2, [r3, #12]
 839:Src/app.c     ****   info->static_param.nb_total_boxes = AI_OD_YOLOV8_PP_TOTAL_BOXES;  // Example: Standard for YOLOv8
 4259              		.loc 1 839 37
 4260 003e 7B68     		ldr	r3, [r7, #4]
 4261 0040 40F63402 		movw	r2, #2100
 4262 0044 1A61     		str	r2, [r3, #16]
 840:Src/app.c     ****   info->static_param.max_boxes_limit = 10;  // Max boxes after NMS
 4263              		.loc 1 840 38
 4264 0046 7B68     		ldr	r3, [r7, #4]
 4265 0048 0A22     		movs	r2, #10
 4266 004a 5A61     		str	r2, [r3, #20]
 841:Src/app.c     ****   info->static_param.conf_threshold = AI_OD_YOLOV8_PP_CONF_THRESHOLD; // Confidence threshold
 4267              		.loc 1 841 37
 4268 004c 7B68     		ldr	r3, [r7, #4]
 4269 004e 114A     		ldr	r2, .L187
 4270 0050 9A61     		str	r2, [r3, #24]	@ float
 842:Src/app.c     ****   info->static_param.iou_threshold = AI_OD_YOLOV8_PP_IOU_THRESHOLD;  // IoU threshold for NMS
 4271              		.loc 1 842 36
 4272 0052 7B68     		ldr	r3, [r7, #4]
 4273 0054 104A     		ldr	r2, .L187+4
 4274 0056 DA61     		str	r2, [r3, #28]	@ float
 843:Src/app.c     ****   // Note: Scale/ZeroPoint may not be needed if your model output is float32
 844:Src/app.c     ****   info->static_param.raw_output_scale = 1.0f;
 4275              		.loc 1 844 39
 4276 0058 7B68     		ldr	r3, [r7, #4]
 4277 005a 4FF07E52 		mov	r2, #1065353216
 4278 005e 1A62     		str	r2, [r3, #32]	@ float
 845:Src/app.c     ****   info->static_param.raw_output_zero_point = 0;
 4279              		.loc 1 845 44
 4280 0060 7B68     		ldr	r3, [r7, #4]
 4281 0062 0022     		movs	r2, #0
 4282 0064 83F82420 		strb	r2, [r3, #36]
 846:Src/app.c     **** 
 847:Src/app.c     ****   /* Initialize the post-processing module */
 848:Src/app.c     ****   // Assumes a generic post-processing init function exists
 849:Src/app.c     ****   ret = app_postprocess_init(&info->static_param, &NN_Instance_yolo_detector);
 4283              		.loc 1 849 30
 4284 0068 7B68     		ldr	r3, [r7, #4]
 4285 006a 0C33     		adds	r3, r3, #12
 4286              		.loc 1 849 9
 4287 006c 0B49     		ldr	r1, .L187+8
 4288 006e 1846     		mov	r0, r3
 4289 0070 FFF7FEFF 		bl	app_postprocess_init
 4290 0074 F860     		str	r0, [r7, #12]
ARM GAS  /tmp/ccrysqwW.s 			page 103


 850:Src/app.c     ****   assert(ret == 0); // Assuming 0 is success for the generic post-processor
 4291              		.loc 1 850 3
 4292 0076 FB68     		ldr	r3, [r7, #12]
 4293 0078 002B     		cmp	r3, #0
 4294 007a 06D0     		beq	.L186
 4295              		.loc 1 850 3 is_stmt 0 discriminator 1
 4296 007c 084B     		ldr	r3, .L187+12
 4297 007e 094A     		ldr	r2, .L187+16
 4298 0080 40F25231 		movw	r1, #850
 4299 0084 0848     		ldr	r0, .L187+20
 4300 0086 FFF7FEFF 		bl	__assert_func
 4301              	.L186:
 851:Src/app.c     **** }
 4302              		.loc 1 851 1 is_stmt 1
 4303 008a 00BF     		nop
 4304 008c 1837     		adds	r7, r7, #24
 4305              		.cfi_def_cfa_offset 8
 4306 008e BD46     		mov	sp, r7
 4307              		.cfi_def_cfa_register 13
 4308              		@ sp needed
 4309 0090 80BD     		pop	{r7, pc}
 4310              	.L188:
 4311 0092 00BF     		.align	2
 4312              	.L187:
 4313 0094 9A99993E 		.word	1050253722
 4314 0098 CDCCCC3D 		.word	1036831949
 4315 009c 00000000 		.word	NN_Instance_yolo_detector
 4316 00a0 60000000 		.word	.LC10
 4317 00a4 00000000 		.word	__func__.14
 4318 00a8 38000000 		.word	.LC7
 4319              		.cfi_endproc
 4320              	.LFE7392:
 4322              		.section	.rodata
 4323 00d7 00       		.align	2
 4324              	.LC18:
 4325 00d8 72657420 		.ascii	"ret == LL_ATON_User_IO_NOERROR\000"
 4325      3D3D204C 
 4325      4C5F4154 
 4325      4F4E5F55 
 4325      7365725F 
 4326              		.section	.text.yolo_detector_run,"ax",%progbits
 4327              		.align	1
 4328              		.syntax unified
 4329              		.thumb
 4330              		.thumb_func
 4332              	yolo_detector_run:
 4333              	.LFB7393:
 852:Src/app.c     **** 
 853:Src/app.c     **** static int yolo_detector_run(uint8_t *buffer, yolo_detector_info_t *info, uint32_t *exec_time)
 854:Src/app.c     **** {
 4334              		.loc 1 854 1
 4335              		.cfi_startproc
 4336              		@ args = 0, pretend = 0, frame = 48
 4337              		@ frame_needed = 1, uses_anonymous_args = 0
 4338 0000 80B5     		push	{r7, lr}
 4339              		.cfi_def_cfa_offset 8
 4340              		.cfi_offset 7, -8
ARM GAS  /tmp/ccrysqwW.s 			page 104


 4341              		.cfi_offset 14, -4
 4342 0002 8CB0     		sub	sp, sp, #48
 4343              		.cfi_def_cfa_offset 56
 4344 0004 00AF     		add	r7, sp, #0
 4345              		.cfi_def_cfa_register 7
 4346 0006 F860     		str	r0, [r7, #12]
 4347 0008 B960     		str	r1, [r7, #8]
 4348 000a 7A60     		str	r2, [r7, #4]
 855:Src/app.c     ****   uint32_t start_ts;
 856:Src/app.c     ****   int detection_nb;
 857:Src/app.c     ****   int ret;
 858:Src/app.c     ****   int i;
 859:Src/app.c     **** 
 860:Src/app.c     ****   start_ts = HAL_GetTick();
 4349              		.loc 1 860 14
 4350 000c FFF7FEFF 		bl	HAL_GetTick
 4351 0010 F862     		str	r0, [r7, #44]
 861:Src/app.c     ****   /* Note that we don't need to clean/invalidate those input buffers since they are only access in 
 862:Src/app.c     ****   ret = LL_ATON_Set_User_Input_Buffer_yolo_detector(0, buffer, info->nn_in_len);
 4352              		.loc 1 862 9
 4353 0012 BB68     		ldr	r3, [r7, #8]
 4354 0014 1B68     		ldr	r3, [r3]
 4355 0016 1A46     		mov	r2, r3
 4356 0018 F968     		ldr	r1, [r7, #12]
 4357 001a 0020     		movs	r0, #0
 4358 001c FFF7FEFF 		bl	LL_ATON_Set_User_Input_Buffer_yolo_detector
 4359 0020 0346     		mov	r3, r0
 4360              		.loc 1 862 7 discriminator 1
 4361 0022 BB62     		str	r3, [r7, #40]
 863:Src/app.c     ****   assert(ret == LL_ATON_User_IO_NOERROR);
 4362              		.loc 1 863 3
 4363 0024 BB6A     		ldr	r3, [r7, #40]
 4364 0026 002B     		cmp	r3, #0
 4365 0028 06D0     		beq	.L190
 4366              		.loc 1 863 3 is_stmt 0 discriminator 1
 4367 002a 2A4B     		ldr	r3, .L196
 4368 002c 2A4A     		ldr	r2, .L196+4
 4369 002e 40F25F31 		movw	r1, #863
 4370 0032 2A48     		ldr	r0, .L196+8
 4371 0034 FFF7FEFF 		bl	__assert_func
 4372              	.L190:
 864:Src/app.c     **** 
 865:Src/app.c     ****   LL_ATON_RT_Main(&NN_Instance_yolo_detector);
 4373              		.loc 1 865 3 is_stmt 1
 4374 0038 2948     		ldr	r0, .L196+12
 4375 003a FFF7FEFF 		bl	LL_ATON_RT_Main
 866:Src/app.c     **** 
 867:Src/app.c     ****   /* Run post-processing on the model's raw output */
 868:Src/app.c     ****   ret = app_postprocess_run((void * []){info->raw_detections_out}, 1, &info->yolo_out, &info->stati
 4376              		.loc 1 868 45
 4377 003e BB68     		ldr	r3, [r7, #8]
 4378 0040 5B68     		ldr	r3, [r3, #4]
 4379              		.loc 1 868 40
 4380 0042 3B61     		str	r3, [r7, #16]
 4381              		.loc 1 868 71
 4382 0044 BB68     		ldr	r3, [r7, #8]
 4383 0046 03F13002 		add	r2, r3, #48
ARM GAS  /tmp/ccrysqwW.s 			page 105


 4384              		.loc 1 868 88
 4385 004a BB68     		ldr	r3, [r7, #8]
 4386 004c 0C33     		adds	r3, r3, #12
 4387              		.loc 1 868 9
 4388 004e 07F11000 		add	r0, r7, #16
 4389 0052 0121     		movs	r1, #1
 4390 0054 FFF7FEFF 		bl	app_postprocess_run
 4391 0058 B862     		str	r0, [r7, #40]
 869:Src/app.c     **** 
 870:Src/app.c     ****   // Get the number of final detections after NMS
 871:Src/app.c     ****   detection_nb = info->yolo_out.nb_detect;
 4392              		.loc 1 871 16
 4393 005a BB68     		ldr	r3, [r7, #8]
 4394 005c 5B6B     		ldr	r3, [r3, #52]
 4395 005e 7B62     		str	r3, [r7, #36]
 872:Src/app.c     **** 
 873:Src/app.c     ****   /* Optional: Post-process final bounding boxes (e.g., coordinate scaling) */
 874:Src/app.c     ****   // for (i = 0; i < detection_nb; i++) {
 875:Src/app.c     ****   //   // cvt_yolo_coord_to_screen_coord(&info->yolo_out.pOutData[i]); // Example
 876:Src/app.c     ****   // }
 877:Src/app.c     **** 
 878:Src/app.c     ****   /* Invalidate D-Cache for the output region to ensure CPU sees updated data */
 879:Src/app.c     ****   CACHE_OP(SCB_InvalidateDCache_by_Addr(info->raw_detections_out, info->raw_detections_out_len));
 4396              		.loc 1 879 3
 4397 0060 FFF7FEFF 		bl	is_cache_enable
 4398 0064 0346     		mov	r3, r0
 4399              		.loc 1 879 3 is_stmt 0 discriminator 1
 4400 0066 002B     		cmp	r3, #0
 4401 0068 27D0     		beq	.L191
 4402 006a BB68     		ldr	r3, [r7, #8]
 4403 006c 5B68     		ldr	r3, [r3, #4]
 4404 006e BA68     		ldr	r2, [r7, #8]
 4405 0070 9268     		ldr	r2, [r2, #8]
 4406 0072 3B62     		str	r3, [r7, #32]
 4407 0074 FA61     		str	r2, [r7, #28]
 4408              	.LBB110:
 4409              	.LBB111:
 4410              		.file 4 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h"
   1:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /******************************************************************************
   2:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * @file     cachel1_armv7.h
   3:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * @brief    CMSIS Level 1 Cache API for Armv7-M and later
   4:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * @version  V1.0.3
   5:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * @date     17. March 2023
   6:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  ******************************************************************************/
   7:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /*
   8:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * Copyright (c) 2020-2021 Arm Limited. All rights reserved.
   9:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  *
  10:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * SPDX-License-Identifier: Apache-2.0
  11:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  *
  12:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * not use this file except in compliance with the License.
  14:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * You may obtain a copy of the License at
  15:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  *
  16:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  *
  18:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * Unless required by applicable law or agreed to in writing, software
  19:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
ARM GAS  /tmp/ccrysqwW.s 			page 106


  20:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * See the License for the specific language governing permissions and
  22:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * limitations under the License.
  23:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  */
  24:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  25:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #if   defined ( __ICCARM__ )
  26:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #elif defined (__clang__)
  28:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #pragma clang system_header    /* treat file as system include file */
  29:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #endif
  30:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  31:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #ifndef ARM_CACHEL1_ARMV7_H
  32:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #define ARM_CACHEL1_ARMV7_H
  33:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  34:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
  35:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \ingroup  CMSIS_Core_FunctionInterface
  36:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \defgroup CMSIS_Core_CacheFunctions Cache Functions
  37:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief    Functions that configure Instruction and Data cache.
  38:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   @{
  39:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  */
  40:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  41:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /* Cache Size ID Register Macros */
  42:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #define CCSIDR_WAYS(x)         (((x) & SCB_CCSIDR_ASSOCIATIVITY_Msk) >> SCB_CCSIDR_ASSOCIATIVITY_Po
  43:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #define CCSIDR_SETS(x)         (((x) & SCB_CCSIDR_NUMSETS_Msk      ) >> SCB_CCSIDR_NUMSETS_Pos     
  44:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  45:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #ifndef __SCB_DCACHE_LINE_SIZE
  46:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #define __SCB_DCACHE_LINE_SIZE  32U /*!< Cortex-M7 cache line size is fixed to 32 bytes (8 words). 
  47:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #endif
  48:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  49:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #ifndef __SCB_ICACHE_LINE_SIZE
  50:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #define __SCB_ICACHE_LINE_SIZE  32U /*!< Cortex-M7 cache line size is fixed to 32 bytes (8 words). 
  51:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #endif
  52:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  53:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
  54:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Enable I-Cache
  55:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Turns on I-Cache
  56:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
  57:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_EnableICache (void)
  58:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
  59:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
  60:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
  61:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  62:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
  63:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
  64:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  65:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
  66:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
  67:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  68:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
  69:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
  70:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
  71:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
  72:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  73:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  74:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
  75:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Disable I-Cache
  76:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Turns off I-Cache
ARM GAS  /tmp/ccrysqwW.s 			page 107


  77:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
  78:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_DisableICache (void)
  79:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
  80:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
  81:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
  82:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
  83:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
  84:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  85:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
  86:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
  87:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
  88:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
  89:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  90:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  91:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
  92:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Invalidate I-Cache
  93:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Invalidates I-Cache
  94:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
  95:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_InvalidateICache (void)
  96:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
  97:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
  98:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
  99:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 100:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->ICIALLU = 0UL;
 101:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 102:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 103:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 104:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 105:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 106:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 107:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 108:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   I-Cache Invalidate by address
 109:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Invalidates I-Cache for the given address.
 110:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            I-Cache is invalidated starting from a 32 byte aligned address in 32 byte granularity.
 111:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            I-Cache memory blocks which are part of given address + given size are invalidated.
 112:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   addr    address
 113:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   isize   size of memory block (in number of bytes)
 114:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** */
 115:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_InvalidateICache_by_Addr (volatile void *addr, int32_t isize)
 116:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 117:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
 118:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     if ( isize > 0 ) {
 119:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        int32_t op_size = isize + (((uint32_t)addr) & (__SCB_ICACHE_LINE_SIZE - 1U));
 120:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_ICACHE_LINE_SIZE - 1U) */;
 121:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 122:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 123:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 124:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 125:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->ICIMVAU = op_addr;             /* register accepts only 32byte aligned values, only bi
 126:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr += __SCB_ICACHE_LINE_SIZE;
 127:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_size -= __SCB_ICACHE_LINE_SIZE;
 128:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while ( op_size > 0 );
 129:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 130:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 131:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __ISB();
 132:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     }
 133:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
ARM GAS  /tmp/ccrysqwW.s 			page 108


 134:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 135:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 136:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 137:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 138:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Enable D-Cache
 139:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Turns on D-Cache
 140:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
 141:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_EnableDCache (void)
 142:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 143:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 144:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ccsidr;
 145:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t sets;
 146:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ways;
 147:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 148:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 149:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 150:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 151:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 152:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 153:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     ccsidr = SCB->CCSIDR;
 154:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 155:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                                             /* invalidate D-Cache */
 156:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 157:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     do {
 158:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 159:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 160:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 161:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                       ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 162:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #if defined ( __CC_ARM )
 163:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****           __schedule_barrier();
 164:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #endif
 165:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while (ways-- != 0U);
 166:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     } while(sets-- != 0U);
 167:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 168:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 169:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 170:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 171:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 172:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 173:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 174:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 175:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 176:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 177:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 178:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Disable D-Cache
 179:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Turns off D-Cache
 180:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
 181:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_DisableDCache (void)
 182:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 183:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 184:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     struct {
 185:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ccsidr;
 186:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t sets;
 187:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ways;
 188:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     } locals
 189:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #if ((defined(__GNUC__) || defined(__clang__)) && !defined(__OPTIMIZE__))
 190:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        __ALIGNED(__SCB_DCACHE_LINE_SIZE)
ARM GAS  /tmp/ccrysqwW.s 			page 109


 191:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #endif
 192:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     ;
 193:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 194:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 195:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 196:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 197:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 198:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 199:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 200:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #if !defined(__OPTIMIZE__)
 201:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       /*
 202:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * For the endless loop issue with no optimization builds.
 203:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * More details, see https://github.com/ARM-software/CMSIS_5/issues/620
 204:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        *
 205:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * The issue only happens when local variables are in stack. If
 206:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * local variables are saved in general purpose register, then the function
 207:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * is OK.
 208:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        *
 209:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * When local variables are in stack, after disabling the cache, flush the
 210:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * local variables cache line for data consistency.
 211:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        */
 212:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       /* Clean and invalidate the local variable cache. */
 213:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #if defined(__ICCARM__)
 214:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     /* As we can't align the stack to the cache line size, invalidate each of the variables */
 215:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       SCB->DCCIMVAC = (uint32_t)&locals.sets;
 216:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       SCB->DCCIMVAC = (uint32_t)&locals.ways;
 217:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       SCB->DCCIMVAC = (uint32_t)&locals.ccsidr;
 218:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #else
 219:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       SCB->DCCIMVAC = (uint32_t)&locals;
 220:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #endif
 221:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 222:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __ISB();
 223:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #endif
 224:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 225:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     locals.ccsidr = SCB->CCSIDR;
 226:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                                             /* clean & invalidate D-Cache */
 227:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     locals.sets = (uint32_t)(CCSIDR_SETS(locals.ccsidr));
 228:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     do {
 229:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       locals.ways = (uint32_t)(CCSIDR_WAYS(locals.ccsidr));
 230:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 231:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCCISW = (((locals.sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 232:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                        ((locals.ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 233:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #if defined ( __CC_ARM )
 234:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****           __schedule_barrier();
 235:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #endif
 236:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while (locals.ways-- != 0U);
 237:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     } while(locals.sets-- != 0U);
 238:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 239:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 240:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 241:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 242:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 243:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 244:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 245:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 246:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Invalidate D-Cache
 247:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Invalidates D-Cache
ARM GAS  /tmp/ccrysqwW.s 			page 110


 248:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
 249:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_InvalidateDCache (void)
 250:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 251:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 252:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ccsidr;
 253:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t sets;
 254:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ways;
 255:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 256:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 257:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 258:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 259:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     ccsidr = SCB->CCSIDR;
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                                             /* invalidate D-Cache */
 262:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 263:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     do {
 264:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 265:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 266:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 267:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                       ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 268:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #if defined ( __CC_ARM )
 269:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****           __schedule_barrier();
 270:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #endif
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while (ways-- != 0U);
 272:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     } while(sets-- != 0U);
 273:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 274:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 275:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 276:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 277:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 278:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 279:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 280:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 281:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Clean D-Cache
 282:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Cleans D-Cache
 283:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
 284:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_CleanDCache (void)
 285:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 286:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 287:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ccsidr;
 288:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t sets;
 289:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ways;
 290:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 291:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 292:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 293:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 294:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     ccsidr = SCB->CCSIDR;
 295:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 296:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                                             /* clean D-Cache */
 297:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 298:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     do {
 299:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 300:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 301:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 302:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                       ((ways << SCB_DCCSW_WAY_Pos) & SCB_DCCSW_WAY_Msk)  );
 303:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #if defined ( __CC_ARM )
 304:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****           __schedule_barrier();
ARM GAS  /tmp/ccrysqwW.s 			page 111


 305:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #endif
 306:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while (ways-- != 0U);
 307:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     } while(sets-- != 0U);
 308:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 309:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 310:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 311:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 312:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 313:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 314:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 315:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 316:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Clean & Invalidate D-Cache
 317:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Cleans and Invalidates D-Cache
 318:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
 319:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_CleanInvalidateDCache (void)
 320:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 321:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 322:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ccsidr;
 323:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t sets;
 324:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ways;
 325:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 326:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 327:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 328:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 329:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     ccsidr = SCB->CCSIDR;
 330:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 331:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                                             /* clean & invalidate D-Cache */
 332:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 333:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     do {
 334:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 335:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 336:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 337:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                        ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 338:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #if defined ( __CC_ARM )
 339:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****           __schedule_barrier();
 340:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #endif
 341:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while (ways-- != 0U);
 342:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     } while(sets-- != 0U);
 343:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 344:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 345:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 346:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 347:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 348:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 349:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 350:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 351:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   D-Cache Invalidate by address
 352:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Invalidates D-Cache for the given address.
 353:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            D-Cache is invalidated starting from a 32 byte aligned address in 32 byte granularity.
 354:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            D-Cache memory blocks which are part of given address + given size are invalidated.
 355:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   addr    address
 356:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   dsize   size of memory block (in number of bytes)
 357:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** */
 358:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (volatile void *addr, int32_t dsize)
 359:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 360:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 361:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     if ( dsize > 0 ) {
ARM GAS  /tmp/ccrysqwW.s 			page 112


 4411              		.loc 4 361 8 is_stmt 1
 4412 0076 FB69     		ldr	r3, [r7, #28]
 4413 0078 002B     		cmp	r3, #0
 4414 007a 1DDD     		ble	.L195
 4415              	.LBB112:
 362:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 4416              		.loc 4 362 36
 4417 007c 3B6A     		ldr	r3, [r7, #32]
 4418              		.loc 4 362 52
 4419 007e 03F01F02 		and	r2, r3, #31
 4420              		.loc 4 362 32
 4421 0082 FB69     		ldr	r3, [r7, #28]
 4422 0084 1344     		add	r3, r3, r2
 4423              		.loc 4 362 16
 4424 0086 BB61     		str	r3, [r7, #24]
 363:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 4425              		.loc 4 363 16
 4426 0088 3B6A     		ldr	r3, [r7, #32]
 4427 008a 7B61     		str	r3, [r7, #20]
 4428              	.LBB113:
 4429              	.LBB114:
 4430              		.file 5 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h"
   1:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
ARM GAS  /tmp/ccrysqwW.s 			page 113


  36:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
ARM GAS  /tmp/ccrysqwW.s 			page 114


  93:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
ARM GAS  /tmp/ccrysqwW.s 			page 115


 150:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
ARM GAS  /tmp/ccrysqwW.s 			page 116


 207:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccrysqwW.s 			page 117


 264:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 4431              		.loc 5 271 3
 4432              		.syntax unified
 4433              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4434 008c BFF34F8F 		dsb 0xF
 4435              	@ 0 "" 2
 272:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4436              		.loc 5 272 1
 4437              		.thumb
 4438              		.syntax unified
 4439 0090 00BF     		nop
 4440              	.L193:
 4441              	.LBE114:
 4442              	.LBE113:
 364:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 365:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 366:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 367:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 368:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bi
 4443              		.loc 4 368 12
 4444 0092 144A     		ldr	r2, .L196+16
 4445              		.loc 4 368 22
 4446 0094 7B69     		ldr	r3, [r7, #20]
 4447 0096 C2F85C32 		str	r3, [r2, #604]
 369:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr += __SCB_DCACHE_LINE_SIZE;
 4448              		.loc 4 369 17
 4449 009a 7B69     		ldr	r3, [r7, #20]
 4450 009c 2033     		adds	r3, r3, #32
 4451 009e 7B61     		str	r3, [r7, #20]
 370:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_size -= __SCB_DCACHE_LINE_SIZE;
 4452              		.loc 4 370 17
 4453 00a0 BB69     		ldr	r3, [r7, #24]
 4454 00a2 203B     		subs	r3, r3, #32
 4455 00a4 BB61     		str	r3, [r7, #24]
 371:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while ( op_size > 0 );
 4456              		.loc 4 371 25 discriminator 1
 4457 00a6 BB69     		ldr	r3, [r7, #24]
 4458 00a8 002B     		cmp	r3, #0
 4459 00aa F2DC     		bgt	.L193
 4460              	.LBB115:
 4461              	.LBB116:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4462              		.loc 5 271 3
 4463              		.syntax unified
 4464              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4465 00ac BFF34F8F 		dsb 0xF
 4466              	@ 0 "" 2
 4467              		.loc 5 272 1
 4468              		.thumb
 4469              		.syntax unified
ARM GAS  /tmp/ccrysqwW.s 			page 118


 4470 00b0 00BF     		nop
 4471              	.LBE116:
 4472              	.LBE115:
 4473              	.LBB117:
 4474              	.LBB118:
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4475              		.loc 5 260 3
 4476              		.syntax unified
 4477              	@ 260 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4478 00b2 BFF36F8F 		isb 0xF
 4479              	@ 0 "" 2
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 4480              		.loc 5 261 1
 4481              		.thumb
 4482              		.syntax unified
 4483 00b6 00BF     		nop
 4484              	.L195:
 4485              	.LBE118:
 4486              	.LBE117:
 4487              	.LBE112:
 372:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 373:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 374:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __ISB();
 375:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     }
 376:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 377:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 4488              		.loc 4 377 1
 4489 00b8 00BF     		nop
 4490              	.L191:
 4491              	.LBE111:
 4492              	.LBE110:
 880:Src/app.c     **** 
 881:Src/app.c     ****   *exec_time = HAL_GetTick() - start_ts;
 4493              		.loc 1 881 16
 4494 00ba FFF7FEFF 		bl	HAL_GetTick
 4495 00be 0246     		mov	r2, r0
 4496              		.loc 1 881 30 discriminator 1
 4497 00c0 FB6A     		ldr	r3, [r7, #44]
 4498 00c2 D21A     		subs	r2, r2, r3
 4499              		.loc 1 881 14 discriminator 1
 4500 00c4 7B68     		ldr	r3, [r7, #4]
 4501 00c6 1A60     		str	r2, [r3]
 882:Src/app.c     **** 
 883:Src/app.c     ****   return detection_nb;
 4502              		.loc 1 883 10
 4503 00c8 7B6A     		ldr	r3, [r7, #36]
 884:Src/app.c     **** }
 4504              		.loc 1 884 1
 4505 00ca 1846     		mov	r0, r3
 4506 00cc 3037     		adds	r7, r7, #48
 4507              		.cfi_def_cfa_offset 8
 4508 00ce BD46     		mov	sp, r7
 4509              		.cfi_def_cfa_register 13
 4510              		@ sp needed
 4511 00d0 80BD     		pop	{r7, pc}
 4512              	.L197:
 4513 00d2 00BF     		.align	2
ARM GAS  /tmp/ccrysqwW.s 			page 119


 4514              	.L196:
 4515 00d4 D8000000 		.word	.LC18
 4516 00d8 00000000 		.word	__func__.13
 4517 00dc 38000000 		.word	.LC7
 4518 00e0 00000000 		.word	NN_Instance_yolo_detector
 4519 00e4 00ED00E0 		.word	-536810240
 4520              		.cfi_endproc
 4521              	.LFE7393:
 4523              		.section	.rodata
 4524 00f7 00       		.align	2
 4525              	.LC19:
 4526 00f8 696E666F 		.ascii	"info->prob_out_len == sizeof(float)\000"
 4526      2D3E7072 
 4526      6F625F6F 
 4526      75745F6C 
 4526      656E203D 
 4527              		.align	2
 4528              	.LC20:
 4529 011c 696E666F 		.ascii	"info->landmarks_out_len == sizeof(float) * 1404\000"
 4529      2D3E6C61 
 4529      6E646D61 
 4529      726B735F 
 4529      6F75745F 
 4530              		.section	.text.face_landmark_init,"ax",%progbits
 4531              		.align	1
 4532              		.syntax unified
 4533              		.thumb
 4534              		.thumb_func
 4536              	face_landmark_init:
 4537              	.LFB7394:
 885:Src/app.c     **** 
 886:Src/app.c     **** static void face_landmark_init(fl_model_info_t *info)
 887:Src/app.c     **** {
 4538              		.loc 1 887 1
 4539              		.cfi_startproc
 4540              		@ args = 0, pretend = 0, frame = 16
 4541              		@ frame_needed = 1, uses_anonymous_args = 0
 4542 0000 80B5     		push	{r7, lr}
 4543              		.cfi_def_cfa_offset 8
 4544              		.cfi_offset 7, -8
 4545              		.cfi_offset 14, -4
 4546 0002 84B0     		sub	sp, sp, #16
 4547              		.cfi_def_cfa_offset 24
 4548 0004 00AF     		add	r7, sp, #0
 4549              		.cfi_def_cfa_register 7
 4550 0006 7860     		str	r0, [r7, #4]
 888:Src/app.c     ****   const LL_Buffer_InfoTypeDef *nn_out_info = LL_ATON_Output_Buffers_Info_face_landmark();
 4551              		.loc 1 888 46
 4552 0008 FFF7FEFF 		bl	LL_ATON_Output_Buffers_Info_face_landmark
 4553 000c F860     		str	r0, [r7, #12]
 889:Src/app.c     ****   const LL_Buffer_InfoTypeDef *nn_in_info = LL_ATON_Input_Buffers_Info_face_landmark();
 4554              		.loc 1 889 45
 4555 000e FFF7FEFF 		bl	LL_ATON_Input_Buffers_Info_face_landmark
 4556 0012 B860     		str	r0, [r7, #8]
 890:Src/app.c     **** 
 891:Src/app.c     ****   info->nn_in = LL_Buffer_addr_start(&nn_in_info[0]);
 4557              		.loc 1 891 17
ARM GAS  /tmp/ccrysqwW.s 			page 120


 4558 0014 B868     		ldr	r0, [r7, #8]
 4559 0016 FFF7FEFF 		bl	LL_Buffer_addr_start
 4560 001a 0246     		mov	r2, r0
 4561              		.loc 1 891 15 discriminator 1
 4562 001c 7B68     		ldr	r3, [r7, #4]
 4563 001e 1A60     		str	r2, [r3]
 892:Src/app.c     ****   info->nn_in_len = LL_Buffer_len(&nn_in_info[0]);
 4564              		.loc 1 892 21
 4565 0020 B868     		ldr	r0, [r7, #8]
 4566 0022 FFF7FEFF 		bl	LL_Buffer_len
 4567 0026 0246     		mov	r2, r0
 4568              		.loc 1 892 19 discriminator 1
 4569 0028 7B68     		ldr	r3, [r7, #4]
 4570 002a 5A60     		str	r2, [r3, #4]
 893:Src/app.c     ****   info->prob_out = (float *) LL_Buffer_addr_start(&nn_out_info[0]);
 4571              		.loc 1 893 30
 4572 002c F868     		ldr	r0, [r7, #12]
 4573 002e FFF7FEFF 		bl	LL_Buffer_addr_start
 4574 0032 0246     		mov	r2, r0
 4575              		.loc 1 893 18 discriminator 1
 4576 0034 7B68     		ldr	r3, [r7, #4]
 4577 0036 9A60     		str	r2, [r3, #8]
 894:Src/app.c     ****   info->prob_out_len = LL_Buffer_len(&nn_out_info[0]);
 4578              		.loc 1 894 24
 4579 0038 F868     		ldr	r0, [r7, #12]
 4580 003a FFF7FEFF 		bl	LL_Buffer_len
 4581 003e 0246     		mov	r2, r0
 4582              		.loc 1 894 22 discriminator 1
 4583 0040 7B68     		ldr	r3, [r7, #4]
 4584 0042 DA60     		str	r2, [r3, #12]
 895:Src/app.c     ****   assert(info->prob_out_len == sizeof(float));
 4585              		.loc 1 895 3
 4586 0044 7B68     		ldr	r3, [r7, #4]
 4587 0046 DB68     		ldr	r3, [r3, #12]
 4588 0048 042B     		cmp	r3, #4
 4589 004a 06D0     		beq	.L199
 4590              		.loc 1 895 3 is_stmt 0 discriminator 1
 4591 004c 134B     		ldr	r3, .L202
 4592 004e 144A     		ldr	r2, .L202+4
 4593 0050 40F27F31 		movw	r1, #895
 4594 0054 1348     		ldr	r0, .L202+8
 4595 0056 FFF7FEFF 		bl	__assert_func
 4596              	.L199:
 896:Src/app.c     ****   // CORRECTED: Cast to the proper int8_t pointer type
 897:Src/app.c     ****   info->landmarks_out = (int8_t *) LL_Buffer_addr_start(&nn_out_info[1]);
 4597              		.loc 1 897 36 is_stmt 1
 4598 005a FB68     		ldr	r3, [r7, #12]
 4599 005c 3833     		adds	r3, r3, #56
 4600 005e 1846     		mov	r0, r3
 4601 0060 FFF7FEFF 		bl	LL_Buffer_addr_start
 4602 0064 0246     		mov	r2, r0
 4603              		.loc 1 897 23 discriminator 1
 4604 0066 7B68     		ldr	r3, [r7, #4]
 4605 0068 1A61     		str	r2, [r3, #16]
 898:Src/app.c     ****   info->landmarks_out_len = LL_Buffer_len(&nn_out_info[1]);
 4606              		.loc 1 898 29
 4607 006a FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccrysqwW.s 			page 121


 4608 006c 3833     		adds	r3, r3, #56
 4609 006e 1846     		mov	r0, r3
 4610 0070 FFF7FEFF 		bl	LL_Buffer_len
 4611 0074 0246     		mov	r2, r0
 4612              		.loc 1 898 27 discriminator 1
 4613 0076 7B68     		ldr	r3, [r7, #4]
 4614 0078 5A61     		str	r2, [r3, #20]
 899:Src/app.c     ****   
 900:Src/app.c     ****   // CORRECTED: Assert now checks for the expected number of bytes for integer data
 901:Src/app.c     ****   assert(info->landmarks_out_len == sizeof(float) * 1404);
 4615              		.loc 1 901 3
 4616 007a 7B68     		ldr	r3, [r7, #4]
 4617 007c 5B69     		ldr	r3, [r3, #20]
 4618 007e 41F2F052 		movw	r2, #5616
 4619 0082 9342     		cmp	r3, r2
 4620 0084 06D0     		beq	.L201
 4621              		.loc 1 901 3 is_stmt 0 discriminator 1
 4622 0086 084B     		ldr	r3, .L202+12
 4623 0088 054A     		ldr	r2, .L202+4
 4624 008a 40F28531 		movw	r1, #901
 4625 008e 0548     		ldr	r0, .L202+8
 4626 0090 FFF7FEFF 		bl	__assert_func
 4627              	.L201:
 902:Src/app.c     **** }
 4628              		.loc 1 902 1 is_stmt 1
 4629 0094 00BF     		nop
 4630 0096 1037     		adds	r7, r7, #16
 4631              		.cfi_def_cfa_offset 8
 4632 0098 BD46     		mov	sp, r7
 4633              		.cfi_def_cfa_register 13
 4634              		@ sp needed
 4635 009a 80BD     		pop	{r7, pc}
 4636              	.L203:
 4637              		.align	2
 4638              	.L202:
 4639 009c F8000000 		.word	.LC19
 4640 00a0 00000000 		.word	__func__.12
 4641 00a4 38000000 		.word	.LC7
 4642 00a8 1C010000 		.word	.LC20
 4643              		.cfi_endproc
 4644              	.LFE7394:
 4646              		.section	.rodata
 4647              		.align	2
 4648              	.LC21:
 4649 014c 77696474 		.ascii	"width_out > 0\000"
 4649      685F6F75 
 4649      74203E20 
 4649      3000
 4650 015a 0000     		.align	2
 4651              	.LC22:
 4652 015c 68656967 		.ascii	"height_out > 0\000"
 4652      68745F6F 
 4652      7574203E 
 4652      203000
 4653 016b 00       		.align	2
 4654              	.LC23:
 4655 016c 6F75745F 		.ascii	"out_data_end >= info->nn_in\000"
ARM GAS  /tmp/ccrysqwW.s 			page 122


 4655      64617461 
 4655      5F656E64 
 4655      203E3D20 
 4655      696E666F 
 4656              		.align	2
 4657              	.LC24:
 4658 0188 6F75745F 		.ascii	"out_data_end < info->nn_in + info->nn_in_len\000"
 4658      64617461 
 4658      5F656E64 
 4658      203C2069 
 4658      6E666F2D 
 4659 01b5 000000   		.align	2
 4660              	.LC25:
 4661 01b8 77696474 		.ascii	"width_in > 0\000"
 4661      685F696E 
 4661      203E2030 
 4661      00
 4662 01c5 000000   		.align	2
 4663              	.LC26:
 4664 01c8 68656967 		.ascii	"height_in > 0\000"
 4664      68745F69 
 4664      6E203E20 
 4664      3000
 4665 01d6 0000     		.align	2
 4666              	.LC27:
 4667 01d8 696E5F64 		.ascii	"in_data_end >= buffer\000"
 4667      6174615F 
 4667      656E6420 
 4667      3E3D2062 
 4667      75666665 
 4668 01ee 0000     		.align	2
 4669              	.LC28:
 4670 01f0 696E5F64 		.ascii	"in_data_end < buffer + LCD_BG_WIDTH * LCD_BG_HEIGHT"
 4670      6174615F 
 4670      656E6420 
 4670      3C206275 
 4670      66666572 
 4671 0223 202A2044 		.ascii	" * DISPLAY_BPP\000"
 4671      4953504C 
 4671      41595F42 
 4671      505000
 4672              		.section	.text.face_landmark_prepare_input,"ax",%progbits
 4673              		.align	1
 4674              		.syntax unified
 4675              		.thumb
 4676              		.thumb_func
 4678              	face_landmark_prepare_input:
 4679              	.LFB7395:
 903:Src/app.c     **** 
 904:Src/app.c     **** static int face_landmark_prepare_input(uint8_t *buffer, roi_t *roi, fl_model_info_t *info)
 905:Src/app.c     **** {
 4680              		.loc 1 905 1
 4681              		.cfi_startproc
 4682              		@ args = 0, pretend = 0, frame = 128
 4683              		@ frame_needed = 1, uses_anonymous_args = 0
 4684 0000 80B5     		push	{r7, lr}
 4685              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccrysqwW.s 			page 123


 4686              		.cfi_offset 7, -8
 4687              		.cfi_offset 14, -4
 4688 0002 A4B0     		sub	sp, sp, #144
 4689              		.cfi_def_cfa_offset 152
 4690 0004 04AF     		add	r7, sp, #16
 4691              		.cfi_def_cfa 7, 136
 4692 0006 F860     		str	r0, [r7, #12]
 4693 0008 B960     		str	r1, [r7, #8]
 4694 000a 7A60     		str	r2, [r7, #4]
 906:Src/app.c     ****   float corners_f[4][2];
 907:Src/app.c     ****   int corners[4][2];
 908:Src/app.c     ****   uint8_t* out_data;
 909:Src/app.c     ****   size_t height_out;
 910:Src/app.c     ****   uint8_t *in_data;
 911:Src/app.c     ****   size_t height_in;
 912:Src/app.c     ****   size_t width_out;
 913:Src/app.c     ****   size_t width_in;
 914:Src/app.c     ****   int is_clamped;
 915:Src/app.c     **** 
 916:Src/app.c     ****   /* defaults when no clamping occurs */
 917:Src/app.c     ****   out_data = info->nn_in;
 4695              		.loc 1 917 12
 4696 000c 7B68     		ldr	r3, [r7, #4]
 4697 000e 1B68     		ldr	r3, [r3]
 4698 0010 FB67     		str	r3, [r7, #124]
 918:Src/app.c     ****   width_out = LD_WIDTH;
 4699              		.loc 1 918 13
 4700 0012 C023     		movs	r3, #192
 4701 0014 7B67     		str	r3, [r7, #116]
 919:Src/app.c     ****   height_out = LD_HEIGHT;
 4702              		.loc 1 919 14
 4703 0016 C023     		movs	r3, #192
 4704 0018 BB67     		str	r3, [r7, #120]
 920:Src/app.c     **** 
 921:Src/app.c     ****   roi_to_corners(roi, corners_f);
 4705              		.loc 1 921 3
 4706 001a 07F13403 		add	r3, r7, #52
 4707 001e 1946     		mov	r1, r3
 4708 0020 B868     		ldr	r0, [r7, #8]
 4709 0022 FFF7FEFF 		bl	roi_to_corners
 922:Src/app.c     ****   is_clamped = clamp_corners(corners_f, corners);
 4710              		.loc 1 922 16
 4711 0026 07F11402 		add	r2, r7, #20
 4712 002a 07F13403 		add	r3, r7, #52
 4713 002e 1146     		mov	r1, r2
 4714 0030 1846     		mov	r0, r3
 4715 0032 FFF7FEFF 		bl	clamp_corners
 4716 0036 3867     		str	r0, [r7, #112]
 923:Src/app.c     **** 
 924:Src/app.c     ****   /* If clamp perform a partial resize */
 925:Src/app.c     ****   if (is_clamped) {
 4717              		.loc 1 925 6
 4718 0038 3B6F     		ldr	r3, [r7, #112]
 4719 003a 002B     		cmp	r3, #0
 4720 003c 00F0B680 		beq	.L205
 4721              	.LBB119:
 926:Src/app.c     ****     int offset_x;
ARM GAS  /tmp/ccrysqwW.s 			page 124


 927:Src/app.c     ****     int offset_y;
 928:Src/app.c     **** 
 929:Src/app.c     ****     /* clear target memory since resize will partially write it */
 930:Src/app.c     ****     memset(info->nn_in, 0, info->nn_in_len);
 4722              		.loc 1 930 16
 4723 0040 7B68     		ldr	r3, [r7, #4]
 4724 0042 1868     		ldr	r0, [r3]
 4725              		.loc 1 930 32
 4726 0044 7B68     		ldr	r3, [r7, #4]
 4727 0046 5B68     		ldr	r3, [r3, #4]
 4728              		.loc 1 930 5
 4729 0048 1A46     		mov	r2, r3
 4730 004a 0021     		movs	r1, #0
 4731 004c FFF7FEFF 		bl	memset
 931:Src/app.c     **** 
 932:Src/app.c     ****     /* compute start address of output buffer */
 933:Src/app.c     ****     offset_x = (int)(((corners[0][0] - corners_f[0][0]) * LD_WIDTH) / (corners_f[2][0] - corners_f[
 4732              		.loc 1 933 34
 4733 0050 7B69     		ldr	r3, [r7, #20]
 4734              		.loc 1 933 38
 4735 0052 07EE903A 		vmov	s15, r3	@ int
 4736 0056 B8EEE77A 		vcvt.f32.s32	s14, s15
 4737              		.loc 1 933 52
 4738 005a D7ED0D7A 		vldr.32	s15, [r7, #52]
 4739              		.loc 1 933 38
 4740 005e 77EE677A 		vsub.f32	s15, s14, s15
 4741              		.loc 1 933 57
 4742 0062 9FED847A 		vldr.32	s14, .L214
 4743 0066 67EE876A 		vmul.f32	s13, s15, s14
 4744              		.loc 1 933 84
 4745 006a 97ED117A 		vldr.32	s14, [r7, #68]
 4746              		.loc 1 933 102
 4747 006e D7ED0D7A 		vldr.32	s15, [r7, #52]
 4748              		.loc 1 933 88
 4749 0072 37EE677A 		vsub.f32	s14, s14, s15
 4750              		.loc 1 933 69
 4751 0076 C6EE877A 		vdiv.f32	s15, s13, s14
 4752              		.loc 1 933 14
 4753 007a FDEEE77A 		vcvt.s32.f32	s15, s15
 4754 007e 17EE903A 		vmov	r3, s15	@ int
 4755 0082 FB66     		str	r3, [r7, #108]
 934:Src/app.c     ****     offset_y = (int)(((corners[0][1] - corners_f[0][1]) * LD_HEIGHT) / (corners_f[2][1] - corners_f
 4756              		.loc 1 934 34
 4757 0084 BB69     		ldr	r3, [r7, #24]
 4758              		.loc 1 934 38
 4759 0086 07EE903A 		vmov	s15, r3	@ int
 4760 008a B8EEE77A 		vcvt.f32.s32	s14, s15
 4761              		.loc 1 934 52
 4762 008e D7ED0E7A 		vldr.32	s15, [r7, #56]
 4763              		.loc 1 934 38
 4764 0092 77EE677A 		vsub.f32	s15, s14, s15
 4765              		.loc 1 934 57
 4766 0096 9FED777A 		vldr.32	s14, .L214
 4767 009a 67EE876A 		vmul.f32	s13, s15, s14
 4768              		.loc 1 934 85
 4769 009e 97ED127A 		vldr.32	s14, [r7, #72]
 4770              		.loc 1 934 103
ARM GAS  /tmp/ccrysqwW.s 			page 125


 4771 00a2 D7ED0E7A 		vldr.32	s15, [r7, #56]
 4772              		.loc 1 934 89
 4773 00a6 37EE677A 		vsub.f32	s14, s14, s15
 4774              		.loc 1 934 70
 4775 00aa C6EE877A 		vdiv.f32	s15, s13, s14
 4776              		.loc 1 934 14
 4777 00ae FDEEE77A 		vcvt.s32.f32	s15, s15
 4778 00b2 17EE903A 		vmov	r3, s15	@ int
 4779 00b6 BB66     		str	r3, [r7, #104]
 935:Src/app.c     ****     out_data += offset_y * (int)LD_WIDTH * DISPLAY_BPP + offset_x * DISPLAY_BPP;
 4780              		.loc 1 935 56
 4781 00b8 BA6E     		ldr	r2, [r7, #104]
 4782 00ba 1346     		mov	r3, r2
 4783 00bc 5B00     		lsls	r3, r3, #1
 4784 00be 1344     		add	r3, r3, r2
 4785 00c0 9B01     		lsls	r3, r3, #6
 4786 00c2 1A46     		mov	r2, r3
 4787 00c4 FB6E     		ldr	r3, [r7, #108]
 4788 00c6 1344     		add	r3, r3, r2
 4789 00c8 9B00     		lsls	r3, r3, #2
 4790 00ca 1A46     		mov	r2, r3
 4791              		.loc 1 935 14
 4792 00cc FB6F     		ldr	r3, [r7, #124]
 4793 00ce 1344     		add	r3, r3, r2
 4794 00d0 FB67     		str	r3, [r7, #124]
 936:Src/app.c     **** 
 937:Src/app.c     ****     /* compute output width and height */
 938:Src/app.c     ****     width_out = (int)((corners[2][0] - corners[0][0]) / (corners_f[2][0] - corners_f[0][0]) * LD_WI
 4795              		.loc 1 938 34
 4796 00d2 7A6A     		ldr	r2, [r7, #36]
 4797              		.loc 1 938 50
 4798 00d4 7B69     		ldr	r3, [r7, #20]
 4799              		.loc 1 938 38
 4800 00d6 D31A     		subs	r3, r2, r3
 4801              		.loc 1 938 55
 4802 00d8 07EE903A 		vmov	s15, r3	@ int
 4803 00dc F8EEE76A 		vcvt.f32.s32	s13, s15
 4804              		.loc 1 938 70
 4805 00e0 97ED117A 		vldr.32	s14, [r7, #68]
 4806              		.loc 1 938 88
 4807 00e4 D7ED0D7A 		vldr.32	s15, [r7, #52]
 4808              		.loc 1 938 74
 4809 00e8 37EE677A 		vsub.f32	s14, s14, s15
 4810              		.loc 1 938 55
 4811 00ec C6EE877A 		vdiv.f32	s15, s13, s14
 4812              		.loc 1 938 93
 4813 00f0 9FED607A 		vldr.32	s14, .L214
 4814 00f4 67EE877A 		vmul.f32	s15, s15, s14
 4815              		.loc 1 938 17
 4816 00f8 FDEEE77A 		vcvt.s32.f32	s15, s15
 4817 00fc 17EE903A 		vmov	r3, s15	@ int
 4818              		.loc 1 938 15
 4819 0100 7B67     		str	r3, [r7, #116]
 939:Src/app.c     ****     height_out = (int)((corners[2][1] - corners[0][1]) / (corners_f[2][1] - corners_f[0][1]) * LD_H
 4820              		.loc 1 939 35
 4821 0102 BA6A     		ldr	r2, [r7, #40]
 4822              		.loc 1 939 51
ARM GAS  /tmp/ccrysqwW.s 			page 126


 4823 0104 BB69     		ldr	r3, [r7, #24]
 4824              		.loc 1 939 39
 4825 0106 D31A     		subs	r3, r2, r3
 4826              		.loc 1 939 56
 4827 0108 07EE903A 		vmov	s15, r3	@ int
 4828 010c F8EEE76A 		vcvt.f32.s32	s13, s15
 4829              		.loc 1 939 71
 4830 0110 97ED127A 		vldr.32	s14, [r7, #72]
 4831              		.loc 1 939 89
 4832 0114 D7ED0E7A 		vldr.32	s15, [r7, #56]
 4833              		.loc 1 939 75
 4834 0118 37EE677A 		vsub.f32	s14, s14, s15
 4835              		.loc 1 939 56
 4836 011c C6EE877A 		vdiv.f32	s15, s13, s14
 4837              		.loc 1 939 94
 4838 0120 9FED547A 		vldr.32	s14, .L214
 4839 0124 67EE877A 		vmul.f32	s15, s15, s14
 4840              		.loc 1 939 18
 4841 0128 FDEEE77A 		vcvt.s32.f32	s15, s15
 4842 012c 17EE903A 		vmov	r3, s15	@ int
 4843              		.loc 1 939 16
 4844 0130 BB67     		str	r3, [r7, #120]
 940:Src/app.c     **** 
 941:Src/app.c     ****     assert(width_out > 0);
 4845              		.loc 1 941 5
 4846 0132 7B6F     		ldr	r3, [r7, #116]
 4847 0134 002B     		cmp	r3, #0
 4848 0136 06D1     		bne	.L206
 4849              		.loc 1 941 5 is_stmt 0 discriminator 1
 4850 0138 4F4B     		ldr	r3, .L214+4
 4851 013a 504A     		ldr	r2, .L214+8
 4852 013c 40F2AD31 		movw	r1, #941
 4853 0140 4F48     		ldr	r0, .L214+12
 4854 0142 FFF7FEFF 		bl	__assert_func
 4855              	.L206:
 942:Src/app.c     ****     assert(height_out > 0);
 4856              		.loc 1 942 5 is_stmt 1
 4857 0146 BB6F     		ldr	r3, [r7, #120]
 4858 0148 002B     		cmp	r3, #0
 4859 014a 06D1     		bne	.L207
 4860              		.loc 1 942 5 is_stmt 0 discriminator 1
 4861 014c 4D4B     		ldr	r3, .L214+16
 4862 014e 4B4A     		ldr	r2, .L214+8
 4863 0150 40F2AE31 		movw	r1, #942
 4864 0154 4A48     		ldr	r0, .L214+12
 4865 0156 FFF7FEFF 		bl	__assert_func
 4866              	.L207:
 4867              	.LBB120:
 943:Src/app.c     ****     {
 944:Src/app.c     ****       uint8_t* out_data_end;
 945:Src/app.c     **** 
 946:Src/app.c     ****       out_data_end = out_data + (int)LD_WIDTH * DISPLAY_BPP * (height_out - 1) + DISPLAY_BPP * widt
 4868              		.loc 1 946 80 is_stmt 1
 4869 015a BA6F     		ldr	r2, [r7, #120]
 4870 015c 1346     		mov	r3, r2
 4871 015e 5B00     		lsls	r3, r3, #1
 4872 0160 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccrysqwW.s 			page 127


 4873 0162 9B01     		lsls	r3, r3, #6
 4874 0164 1A46     		mov	r2, r3
 4875 0166 7B6F     		ldr	r3, [r7, #116]
 4876 0168 1344     		add	r3, r3, r2
 4877              		.loc 1 946 106
 4878 016a 9B00     		lsls	r3, r3, #2
 4879 016c A3F20133 		subw	r3, r3, #769
 4880              		.loc 1 946 20
 4881 0170 FA6F     		ldr	r2, [r7, #124]
 4882 0172 1344     		add	r3, r3, r2
 4883 0174 7B66     		str	r3, [r7, #100]
 947:Src/app.c     **** 
 948:Src/app.c     ****       assert(out_data_end >= info->nn_in);
 4884              		.loc 1 948 7
 4885 0176 7B68     		ldr	r3, [r7, #4]
 4886 0178 1B68     		ldr	r3, [r3]
 4887 017a 7A6E     		ldr	r2, [r7, #100]
 4888 017c 9A42     		cmp	r2, r3
 4889 017e 06D2     		bcs	.L208
 4890              		.loc 1 948 7 is_stmt 0 discriminator 1
 4891 0180 414B     		ldr	r3, .L214+20
 4892 0182 3E4A     		ldr	r2, .L214+8
 4893 0184 4FF46D71 		mov	r1, #948
 4894 0188 3D48     		ldr	r0, .L214+12
 4895 018a FFF7FEFF 		bl	__assert_func
 4896              	.L208:
 949:Src/app.c     ****       assert(out_data_end < info->nn_in + info->nn_in_len);
 4897              		.loc 1 949 7 is_stmt 1
 4898 018e 7B68     		ldr	r3, [r7, #4]
 4899 0190 1A68     		ldr	r2, [r3]
 4900 0192 7B68     		ldr	r3, [r7, #4]
 4901 0194 5B68     		ldr	r3, [r3, #4]
 4902 0196 1344     		add	r3, r3, r2
 4903 0198 7A6E     		ldr	r2, [r7, #100]
 4904 019a 9A42     		cmp	r2, r3
 4905 019c 06D3     		bcc	.L205
 4906              		.loc 1 949 7 is_stmt 0 discriminator 1
 4907 019e 3B4B     		ldr	r3, .L214+24
 4908 01a0 364A     		ldr	r2, .L214+8
 4909 01a2 40F2B531 		movw	r1, #949
 4910 01a6 3648     		ldr	r0, .L214+12
 4911 01a8 FFF7FEFF 		bl	__assert_func
 4912              	.L205:
 4913              	.LBE120:
 4914              	.LBE119:
 950:Src/app.c     ****     }
 951:Src/app.c     ****   }
 952:Src/app.c     **** 
 953:Src/app.c     ****   in_data = buffer + corners[0][1] * LCD_BG_WIDTH * DISPLAY_BPP + corners[0][0]* DISPLAY_BPP;
 4915              		.loc 1 953 32 is_stmt 1
 4916 01ac BB69     		ldr	r3, [r7, #24]
 4917              		.loc 1 953 51
 4918 01ae 4FF44862 		mov	r2, #3200
 4919 01b2 02FB03F3 		mul	r3, r2, r3
 4920 01b6 1A46     		mov	r2, r3
 4921              		.loc 1 953 77
 4922 01b8 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/ccrysqwW.s 			page 128


 4923              		.loc 1 953 80
 4924 01ba 9B00     		lsls	r3, r3, #2
 4925              		.loc 1 953 65
 4926 01bc 1344     		add	r3, r3, r2
 4927              		.loc 1 953 11
 4928 01be FA68     		ldr	r2, [r7, #12]
 4929 01c0 1344     		add	r3, r3, r2
 4930 01c2 3B66     		str	r3, [r7, #96]
 954:Src/app.c     ****   width_in = corners[2][0] - corners[0][0];
 4931              		.loc 1 954 24
 4932 01c4 7A6A     		ldr	r2, [r7, #36]
 4933              		.loc 1 954 40
 4934 01c6 7B69     		ldr	r3, [r7, #20]
 4935              		.loc 1 954 28
 4936 01c8 D31A     		subs	r3, r2, r3
 4937              		.loc 1 954 12
 4938 01ca FB65     		str	r3, [r7, #92]
 955:Src/app.c     ****   height_in = corners[2][1] - corners[0][1];
 4939              		.loc 1 955 25
 4940 01cc BA6A     		ldr	r2, [r7, #40]
 4941              		.loc 1 955 41
 4942 01ce BB69     		ldr	r3, [r7, #24]
 4943              		.loc 1 955 29
 4944 01d0 D31A     		subs	r3, r2, r3
 4945              		.loc 1 955 13
 4946 01d2 BB65     		str	r3, [r7, #88]
 956:Src/app.c     **** 
 957:Src/app.c     ****   assert(width_in > 0);
 4947              		.loc 1 957 3
 4948 01d4 FB6D     		ldr	r3, [r7, #92]
 4949 01d6 002B     		cmp	r3, #0
 4950 01d8 06D1     		bne	.L209
 4951              		.loc 1 957 3 is_stmt 0 discriminator 1
 4952 01da 2D4B     		ldr	r3, .L214+28
 4953 01dc 274A     		ldr	r2, .L214+8
 4954 01de 40F2BD31 		movw	r1, #957
 4955 01e2 2748     		ldr	r0, .L214+12
 4956 01e4 FFF7FEFF 		bl	__assert_func
 4957              	.L209:
 958:Src/app.c     ****   assert(height_in > 0);
 4958              		.loc 1 958 3 is_stmt 1
 4959 01e8 BB6D     		ldr	r3, [r7, #88]
 4960 01ea 002B     		cmp	r3, #0
 4961 01ec 06D1     		bne	.L210
 4962              		.loc 1 958 3 is_stmt 0 discriminator 1
 4963 01ee 294B     		ldr	r3, .L214+32
 4964 01f0 224A     		ldr	r2, .L214+8
 4965 01f2 40F2BE31 		movw	r1, #958
 4966 01f6 2248     		ldr	r0, .L214+12
 4967 01f8 FFF7FEFF 		bl	__assert_func
 4968              	.L210:
 4969              	.LBB121:
 959:Src/app.c     ****   {
 960:Src/app.c     ****     uint8_t* in_data_end;
 961:Src/app.c     **** 
 962:Src/app.c     ****     in_data_end = in_data + LCD_BG_WIDTH * DISPLAY_BPP * (height_in - 1) + DISPLAY_BPP * width_in -
 4970              		.loc 1 962 74 is_stmt 1
ARM GAS  /tmp/ccrysqwW.s 			page 129


 4971 01fc BB6D     		ldr	r3, [r7, #88]
 4972 01fe 4FF44872 		mov	r2, #800
 4973 0202 03FB02F2 		mul	r2, r3, r2
 4974 0206 FB6D     		ldr	r3, [r7, #92]
 4975 0208 1344     		add	r3, r3, r2
 4976              		.loc 1 962 99
 4977 020a 9B00     		lsls	r3, r3, #2
 4978 020c A3F68143 		subw	r3, r3, #3201
 4979              		.loc 1 962 17
 4980 0210 3A6E     		ldr	r2, [r7, #96]
 4981 0212 1344     		add	r3, r3, r2
 4982 0214 7B65     		str	r3, [r7, #84]
 963:Src/app.c     **** 
 964:Src/app.c     ****     assert(in_data_end >= buffer);
 4983              		.loc 1 964 5
 4984 0216 7A6D     		ldr	r2, [r7, #84]
 4985 0218 FB68     		ldr	r3, [r7, #12]
 4986 021a 9A42     		cmp	r2, r3
 4987 021c 06D2     		bcs	.L211
 4988              		.loc 1 964 5 is_stmt 0 discriminator 1
 4989 021e 1E4B     		ldr	r3, .L214+36
 4990 0220 164A     		ldr	r2, .L214+8
 4991 0222 4FF47171 		mov	r1, #964
 4992 0226 1648     		ldr	r0, .L214+12
 4993 0228 FFF7FEFF 		bl	__assert_func
 4994              	.L211:
 965:Src/app.c     ****     assert(in_data_end < buffer + LCD_BG_WIDTH * LCD_BG_HEIGHT * DISPLAY_BPP);
 4995              		.loc 1 965 5 is_stmt 1
 4996 022c FB68     		ldr	r3, [r7, #12]
 4997 022e 03F5BB13 		add	r3, r3, #1531904
 4998 0232 03F58053 		add	r3, r3, #4096
 4999 0236 7A6D     		ldr	r2, [r7, #84]
 5000 0238 9A42     		cmp	r2, r3
 5001 023a 06D3     		bcc	.L212
 5002              		.loc 1 965 5 is_stmt 0 discriminator 1
 5003 023c 174B     		ldr	r3, .L214+40
 5004 023e 0F4A     		ldr	r2, .L214+8
 5005 0240 40F2C531 		movw	r1, #965
 5006 0244 0E48     		ldr	r0, .L214+12
 5007 0246 FFF7FEFF 		bl	__assert_func
 5008              	.L212:
 5009              	.LBE121:
 966:Src/app.c     ****   }
 967:Src/app.c     **** 
 968:Src/app.c     ****   IPL_resize_bilinear_iu8ou8_with_strides_RGB(in_data, out_data, LCD_BG_WIDTH * DISPLAY_BPP, LD_WID
 5010              		.loc 1 968 3 is_stmt 1
 5011 024a BB6F     		ldr	r3, [r7, #120]
 5012 024c 0393     		str	r3, [sp, #12]
 5013 024e 7B6F     		ldr	r3, [r7, #116]
 5014 0250 0293     		str	r3, [sp, #8]
 5015 0252 BB6D     		ldr	r3, [r7, #88]
 5016 0254 0193     		str	r3, [sp, #4]
 5017 0256 FB6D     		ldr	r3, [r7, #92]
 5018 0258 0093     		str	r3, [sp]
 5019 025a 4FF44073 		mov	r3, #768
 5020 025e 4FF44862 		mov	r2, #3200
 5021 0262 F96F     		ldr	r1, [r7, #124]
ARM GAS  /tmp/ccrysqwW.s 			page 130


 5022 0264 386E     		ldr	r0, [r7, #96]
 5023 0266 FFF7FEFF 		bl	IPL_resize_bilinear_iu8ou8_with_strides_RGB
 969:Src/app.c     ****                                               width_in, height_in, width_out, height_out);
 970:Src/app.c     **** 
 971:Src/app.c     ****   return 0;
 5024              		.loc 1 971 10
 5025 026a 0023     		movs	r3, #0
 972:Src/app.c     **** }
 5026              		.loc 1 972 1
 5027 026c 1846     		mov	r0, r3
 5028 026e 8037     		adds	r7, r7, #128
 5029              		.cfi_def_cfa_offset 8
 5030 0270 BD46     		mov	sp, r7
 5031              		.cfi_def_cfa_register 13
 5032              		@ sp needed
 5033 0272 80BD     		pop	{r7, pc}
 5034              	.L215:
 5035              		.align	2
 5036              	.L214:
 5037 0274 00004043 		.word	1128267776
 5038 0278 4C010000 		.word	.LC21
 5039 027c 00000000 		.word	__func__.11
 5040 0280 38000000 		.word	.LC7
 5041 0284 5C010000 		.word	.LC22
 5042 0288 6C010000 		.word	.LC23
 5043 028c 88010000 		.word	.LC24
 5044 0290 B8010000 		.word	.LC25
 5045 0294 C8010000 		.word	.LC26
 5046 0298 D8010000 		.word	.LC27
 5047 029c F0010000 		.word	.LC28
 5048              		.cfi_endproc
 5049              	.LFE7395:
 5051              		.section	.text.face_landmark_run,"ax",%progbits
 5052              		.align	1
 5053              		.syntax unified
 5054              		.thumb
 5055              		.thumb_func
 5057              	face_landmark_run:
 5058              	.LFB7396:
 973:Src/app.c     **** 
 974:Src/app.c     **** 
 975:Src/app.c     **** static int face_landmark_run(uint8_t *buffer, fl_model_info_t *info, roi_t *roi,
 976:Src/app.c     ****                              ld_point_t ld_landmarks[LD_LANDMARK_NB])
 977:Src/app.c     **** {
 5059              		.loc 1 977 1
 5060              		.cfi_startproc
 5061              		@ args = 0, pretend = 0, frame = 56
 5062              		@ frame_needed = 1, uses_anonymous_args = 0
 5063 0000 80B5     		push	{r7, lr}
 5064              		.cfi_def_cfa_offset 8
 5065              		.cfi_offset 7, -8
 5066              		.cfi_offset 14, -4
 5067 0002 8EB0     		sub	sp, sp, #56
 5068              		.cfi_def_cfa_offset 64
 5069 0004 00AF     		add	r7, sp, #0
 5070              		.cfi_def_cfa_register 7
 5071 0006 F860     		str	r0, [r7, #12]
ARM GAS  /tmp/ccrysqwW.s 			page 131


 5072 0008 B960     		str	r1, [r7, #8]
 5073 000a 7A60     		str	r2, [r7, #4]
 5074 000c 3B60     		str	r3, [r7]
 978:Src/app.c     ****   int is_clamped;
 979:Src/app.c     ****   int is_valid;
 980:Src/app.c     **** 
 981:Src/app.c     ****   is_clamped = face_landmark_prepare_input(buffer, roi, info);
 5075              		.loc 1 981 16
 5076 000e BA68     		ldr	r2, [r7, #8]
 5077 0010 7968     		ldr	r1, [r7, #4]
 5078 0012 F868     		ldr	r0, [r7, #12]
 5079 0014 FFF7FEFF 		bl	face_landmark_prepare_input
 5080 0018 7863     		str	r0, [r7, #52]
 982:Src/app.c     ****   if (is_clamped)
 5081              		.loc 1 982 6
 5082 001a 7B6B     		ldr	r3, [r7, #52]
 5083 001c 002B     		cmp	r3, #0
 5084 001e 01D0     		beq	.L217
 983:Src/app.c     ****     return 0;
 5085              		.loc 1 983 12
 5086 0020 0023     		movs	r3, #0
 5087 0022 66E0     		b	.L218
 5088              	.L217:
 984:Src/app.c     **** 
 985:Src/app.c     ****   LL_ATON_RT_Main(&NN_Instance_face_landmark);
 5089              		.loc 1 985 3
 5090 0024 3548     		ldr	r0, .L227
 5091 0026 FFF7FEFF 		bl	LL_ATON_RT_Main
 986:Src/app.c     **** 
 987:Src/app.c     ****   CACHE_OP(SCB_InvalidateDCache_by_Addr(info->prob_out, info->prob_out_len));
 5092              		.loc 1 987 3
 5093 002a FFF7FEFF 		bl	is_cache_enable
 5094 002e 0346     		mov	r3, r0
 5095              		.loc 1 987 3 is_stmt 0 discriminator 1
 5096 0030 002B     		cmp	r3, #0
 5097 0032 27D0     		beq	.L219
 5098 0034 BB68     		ldr	r3, [r7, #8]
 5099 0036 9B68     		ldr	r3, [r3, #8]
 5100 0038 BA68     		ldr	r2, [r7, #8]
 5101 003a D268     		ldr	r2, [r2, #12]
 5102 003c FB62     		str	r3, [r7, #44]
 5103 003e BA62     		str	r2, [r7, #40]
 5104              	.LBB122:
 5105              	.LBB123:
 361:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 5106              		.loc 4 361 8 is_stmt 1
 5107 0040 BB6A     		ldr	r3, [r7, #40]
 5108 0042 002B     		cmp	r3, #0
 5109 0044 1DDD     		ble	.L225
 5110              	.LBB124:
 362:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 5111              		.loc 4 362 36
 5112 0046 FB6A     		ldr	r3, [r7, #44]
 362:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 5113              		.loc 4 362 52
 5114 0048 03F01F02 		and	r2, r3, #31
 362:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
ARM GAS  /tmp/ccrysqwW.s 			page 132


 5115              		.loc 4 362 32
 5116 004c BB6A     		ldr	r3, [r7, #40]
 5117 004e 1344     		add	r3, r3, r2
 362:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 5118              		.loc 4 362 16
 5119 0050 7B62     		str	r3, [r7, #36]
 363:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 5120              		.loc 4 363 16
 5121 0052 FB6A     		ldr	r3, [r7, #44]
 5122 0054 3B62     		str	r3, [r7, #32]
 5123              	.LBB125:
 5124              	.LBB126:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5125              		.loc 5 271 3
 5126              		.syntax unified
 5127              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5128 0056 BFF34F8F 		dsb 0xF
 5129              	@ 0 "" 2
 5130              		.loc 5 272 1
 5131              		.thumb
 5132              		.syntax unified
 5133 005a 00BF     		nop
 5134              	.L221:
 5135              	.LBE126:
 5136              	.LBE125:
 368:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr += __SCB_DCACHE_LINE_SIZE;
 5137              		.loc 4 368 12
 5138 005c 284A     		ldr	r2, .L227+4
 368:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr += __SCB_DCACHE_LINE_SIZE;
 5139              		.loc 4 368 22
 5140 005e 3B6A     		ldr	r3, [r7, #32]
 5141 0060 C2F85C32 		str	r3, [r2, #604]
 369:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_size -= __SCB_DCACHE_LINE_SIZE;
 5142              		.loc 4 369 17
 5143 0064 3B6A     		ldr	r3, [r7, #32]
 5144 0066 2033     		adds	r3, r3, #32
 5145 0068 3B62     		str	r3, [r7, #32]
 370:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while ( op_size > 0 );
 5146              		.loc 4 370 17
 5147 006a 7B6A     		ldr	r3, [r7, #36]
 5148 006c 203B     		subs	r3, r3, #32
 5149 006e 7B62     		str	r3, [r7, #36]
 371:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 5150              		.loc 4 371 25 discriminator 1
 5151 0070 7B6A     		ldr	r3, [r7, #36]
 5152 0072 002B     		cmp	r3, #0
 5153 0074 F2DC     		bgt	.L221
 5154              	.LBB127:
 5155              	.LBB128:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5156              		.loc 5 271 3
 5157              		.syntax unified
 5158              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5159 0076 BFF34F8F 		dsb 0xF
 5160              	@ 0 "" 2
 5161              		.loc 5 272 1
 5162              		.thumb
ARM GAS  /tmp/ccrysqwW.s 			page 133


 5163              		.syntax unified
 5164 007a 00BF     		nop
 5165              	.LBE128:
 5166              	.LBE127:
 5167              	.LBB129:
 5168              	.LBB130:
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5169              		.loc 5 260 3
 5170              		.syntax unified
 5171              	@ 260 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5172 007c BFF36F8F 		isb 0xF
 5173              	@ 0 "" 2
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 5174              		.loc 5 261 1
 5175              		.thumb
 5176              		.syntax unified
 5177 0080 00BF     		nop
 5178              	.L225:
 5179              	.LBE130:
 5180              	.LBE129:
 5181              	.LBE124:
 5182              		.loc 4 377 1
 5183 0082 00BF     		nop
 5184              	.L219:
 5185              	.LBE123:
 5186              	.LBE122:
 988:Src/app.c     ****   CACHE_OP(SCB_InvalidateDCache_by_Addr(info->landmarks_out, info->landmarks_out_len));
 5187              		.loc 1 988 3
 5188 0084 FFF7FEFF 		bl	is_cache_enable
 5189 0088 0346     		mov	r3, r0
 5190              		.loc 1 988 3 is_stmt 0 discriminator 1
 5191 008a 002B     		cmp	r3, #0
 5192 008c 27D0     		beq	.L222
 5193 008e BB68     		ldr	r3, [r7, #8]
 5194 0090 1B69     		ldr	r3, [r3, #16]
 5195 0092 BA68     		ldr	r2, [r7, #8]
 5196 0094 5269     		ldr	r2, [r2, #20]
 5197 0096 FB61     		str	r3, [r7, #28]
 5198 0098 BA61     		str	r2, [r7, #24]
 5199              	.LBB131:
 5200              	.LBB132:
 361:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 5201              		.loc 4 361 8 is_stmt 1
 5202 009a BB69     		ldr	r3, [r7, #24]
 5203 009c 002B     		cmp	r3, #0
 5204 009e 1DDD     		ble	.L226
 5205              	.LBB133:
 362:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 5206              		.loc 4 362 36
 5207 00a0 FB69     		ldr	r3, [r7, #28]
 362:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 5208              		.loc 4 362 52
 5209 00a2 03F01F02 		and	r2, r3, #31
 362:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 5210              		.loc 4 362 32
 5211 00a6 BB69     		ldr	r3, [r7, #24]
 5212 00a8 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccrysqwW.s 			page 134


 362:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 5213              		.loc 4 362 16
 5214 00aa 7B61     		str	r3, [r7, #20]
 363:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 5215              		.loc 4 363 16
 5216 00ac FB69     		ldr	r3, [r7, #28]
 5217 00ae 3B61     		str	r3, [r7, #16]
 5218              	.LBB134:
 5219              	.LBB135:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5220              		.loc 5 271 3
 5221              		.syntax unified
 5222              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5223 00b0 BFF34F8F 		dsb 0xF
 5224              	@ 0 "" 2
 5225              		.loc 5 272 1
 5226              		.thumb
 5227              		.syntax unified
 5228 00b4 00BF     		nop
 5229              	.L224:
 5230              	.LBE135:
 5231              	.LBE134:
 368:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr += __SCB_DCACHE_LINE_SIZE;
 5232              		.loc 4 368 12
 5233 00b6 124A     		ldr	r2, .L227+4
 368:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr += __SCB_DCACHE_LINE_SIZE;
 5234              		.loc 4 368 22
 5235 00b8 3B69     		ldr	r3, [r7, #16]
 5236 00ba C2F85C32 		str	r3, [r2, #604]
 369:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_size -= __SCB_DCACHE_LINE_SIZE;
 5237              		.loc 4 369 17
 5238 00be 3B69     		ldr	r3, [r7, #16]
 5239 00c0 2033     		adds	r3, r3, #32
 5240 00c2 3B61     		str	r3, [r7, #16]
 370:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while ( op_size > 0 );
 5241              		.loc 4 370 17
 5242 00c4 7B69     		ldr	r3, [r7, #20]
 5243 00c6 203B     		subs	r3, r3, #32
 5244 00c8 7B61     		str	r3, [r7, #20]
 371:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 5245              		.loc 4 371 25 discriminator 1
 5246 00ca 7B69     		ldr	r3, [r7, #20]
 5247 00cc 002B     		cmp	r3, #0
 5248 00ce F2DC     		bgt	.L224
 5249              	.LBB136:
 5250              	.LBB137:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5251              		.loc 5 271 3
 5252              		.syntax unified
 5253              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5254 00d0 BFF34F8F 		dsb 0xF
 5255              	@ 0 "" 2
 5256              		.loc 5 272 1
 5257              		.thumb
 5258              		.syntax unified
 5259 00d4 00BF     		nop
 5260              	.LBE137:
ARM GAS  /tmp/ccrysqwW.s 			page 135


 5261              	.LBE136:
 5262              	.LBB138:
 5263              	.LBB139:
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5264              		.loc 5 260 3
 5265              		.syntax unified
 5266              	@ 260 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5267 00d6 BFF36F8F 		isb 0xF
 5268              	@ 0 "" 2
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 5269              		.loc 5 261 1
 5270              		.thumb
 5271              		.syntax unified
 5272 00da 00BF     		nop
 5273              	.L226:
 5274              	.LBE139:
 5275              	.LBE138:
 5276              	.LBE133:
 5277              		.loc 4 377 1
 5278 00dc 00BF     		nop
 5279              	.L222:
 5280              	.LBE132:
 5281              	.LBE131:
 989:Src/app.c     ****   is_valid = ld_post_process(info->prob_out, info->landmarks_out, ld_landmarks);
 5282              		.loc 1 989 14
 5283 00de BB68     		ldr	r3, [r7, #8]
 5284 00e0 9868     		ldr	r0, [r3, #8]
 5285              		.loc 1 989 50
 5286 00e2 BB68     		ldr	r3, [r7, #8]
 5287 00e4 1B69     		ldr	r3, [r3, #16]
 5288              		.loc 1 989 14
 5289 00e6 3A68     		ldr	r2, [r7]
 5290 00e8 1946     		mov	r1, r3
 5291 00ea FFF7FEFF 		bl	ld_post_process
 5292 00ee 3863     		str	r0, [r7, #48]
 990:Src/app.c     **** 
 991:Src/app.c     ****   return is_valid;
 5293              		.loc 1 991 10
 5294 00f0 3B6B     		ldr	r3, [r7, #48]
 5295              	.L218:
 992:Src/app.c     **** }
 5296              		.loc 1 992 1
 5297 00f2 1846     		mov	r0, r3
 5298 00f4 3837     		adds	r7, r7, #56
 5299              		.cfi_def_cfa_offset 8
 5300 00f6 BD46     		mov	sp, r7
 5301              		.cfi_def_cfa_register 13
 5302              		@ sp needed
 5303 00f8 80BD     		pop	{r7, pc}
 5304              	.L228:
 5305 00fa 00BF     		.align	2
 5306              	.L227:
 5307 00fc 00000000 		.word	NN_Instance_face_landmark
 5308 0100 00ED00E0 		.word	-536810240
 5309              		.cfi_endproc
 5310              	.LFE7396:
 5312              		.section	.text.app_transform,"ax",%progbits
ARM GAS  /tmp/ccrysqwW.s 			page 136


 5313              		.align	1
 5314              		.syntax unified
 5315              		.thumb
 5316              		.thumb_func
 5318              	app_transform:
 5319              	.LFB7397:
 993:Src/app.c     **** 
 994:Src/app.c     **** // static void palm_detector_init(pd_model_info_t *info)
 995:Src/app.c     **** // {
 996:Src/app.c     **** //   const LL_Buffer_InfoTypeDef *nn_out_info = LL_ATON_Output_Buffers_Info_palm_detector();
 997:Src/app.c     **** //   const LL_Buffer_InfoTypeDef *nn_in_info = LL_ATON_Input_Buffers_Info_palm_detector();
 998:Src/app.c     **** //   int ret;
 999:Src/app.c     **** 
1000:Src/app.c     **** //   /* model info */
1001:Src/app.c     **** //   info->nn_in_len = LL_Buffer_len(&nn_in_info[0]);
1002:Src/app.c     **** //   info->prob_out = (float *) LL_Buffer_addr_start(&nn_out_info[0]);
1003:Src/app.c     **** //   info->prob_out_len = LL_Buffer_len(&nn_out_info[0]);
1004:Src/app.c     **** //   assert(info->prob_out_len == AI_PD_MODEL_PP_TOTAL_DETECTIONS * sizeof(float));
1005:Src/app.c     **** //   info->boxes_out = (float *) LL_Buffer_addr_start(&nn_out_info[1]);
1006:Src/app.c     **** //   info->boxes_out_len = LL_Buffer_len(&nn_out_info[1]);
1007:Src/app.c     **** //   assert(info->boxes_out_len == AI_PD_MODEL_PP_TOTAL_DETECTIONS * sizeof(float) * 18);
1008:Src/app.c     **** 
1009:Src/app.c     **** //   /* post processor info */
1010:Src/app.c     **** //   ret = app_postprocess_init(&info->static_param, &NN_Instance_palm_detector);
1011:Src/app.c     **** //   assert(ret == AI_PD_POSTPROCESS_ERROR_NO);
1012:Src/app.c     **** // }
1013:Src/app.c     **** 
1014:Src/app.c     **** // static int palm_detector_run(uint8_t *buffer, pd_model_info_t *info, uint32_t *pd_exec_time)
1015:Src/app.c     **** // {
1016:Src/app.c     **** //   uint32_t start_ts;
1017:Src/app.c     **** //   int hand_nb;
1018:Src/app.c     **** //   int ret;
1019:Src/app.c     **** //   int i;
1020:Src/app.c     **** 
1021:Src/app.c     **** //   start_ts = HAL_GetTick();
1022:Src/app.c     **** //   /* Note that we don't need to clean/invalidate those input buffers since they are only access 
1023:Src/app.c     **** //   ret = LL_ATON_Set_User_Input_Buffer_palm_detector(0, buffer, info->nn_in_len);
1024:Src/app.c     **** //   assert(ret == LL_ATON_User_IO_NOERROR);
1025:Src/app.c     **** 
1026:Src/app.c     **** //   LL_ATON_RT_Main(&NN_Instance_palm_detector);
1027:Src/app.c     **** 
1028:Src/app.c     **** //   ret = app_postprocess_run((void * []){info->prob_out, info->boxes_out}, 2, &info->pd_out, &inf
1029:Src/app.c     **** //   assert(ret == AI_PD_POSTPROCESS_ERROR_NO);
1030:Src/app.c     **** //   hand_nb = MIN(info->pd_out.box_nb, PD_MAX_HAND_NB);
1031:Src/app.c     **** 
1032:Src/app.c     **** //   for (i = 0; i < hand_nb; i++) {
1033:Src/app.c     **** //     cvt_pd_coord_to_screen_coord(&info->pd_out.pOutData[i]);
1034:Src/app.c     **** //     pd_box_to_roi(&info->pd_out.pOutData[i], &rois[i]);
1035:Src/app.c     **** //   }
1036:Src/app.c     **** 
1037:Src/app.c     **** //   /* Discard nn_out region (used by pp_outputs variables) to avoid Dcache evictions during nn in
1038:Src/app.c     **** //   CACHE_OP(SCB_InvalidateDCache_by_Addr(info->prob_out, info->prob_out_len));
1039:Src/app.c     **** //   CACHE_OP(SCB_InvalidateDCache_by_Addr(info->boxes_out, info->boxes_out_len));
1040:Src/app.c     **** 
1041:Src/app.c     **** //   *pd_exec_time = HAL_GetTick() - start_ts;
1042:Src/app.c     **** 
1043:Src/app.c     **** //   return hand_nb;
ARM GAS  /tmp/ccrysqwW.s 			page 137


1044:Src/app.c     **** // }
1045:Src/app.c     **** 
1046:Src/app.c     **** // static void hand_landmark_init(hl_model_info_t *info)
1047:Src/app.c     **** // {
1048:Src/app.c     **** //   const LL_Buffer_InfoTypeDef *nn_out_info = LL_ATON_Output_Buffers_Info_hand_landmark();
1049:Src/app.c     **** //   const LL_Buffer_InfoTypeDef *nn_in_info = LL_ATON_Input_Buffers_Info_hand_landmark();
1050:Src/app.c     **** 
1051:Src/app.c     **** //   info->nn_in = LL_Buffer_addr_start(&nn_in_info[0]);
1052:Src/app.c     **** //   info->nn_in_len = LL_Buffer_len(&nn_in_info[0]);
1053:Src/app.c     **** //   info->prob_out = (float *) LL_Buffer_addr_start(&nn_out_info[2]);
1054:Src/app.c     **** //   info->prob_out_len = LL_Buffer_len(&nn_out_info[2]);
1055:Src/app.c     **** //   assert(info->prob_out_len == sizeof(float));
1056:Src/app.c     **** //   info->landmarks_out = (float *) LL_Buffer_addr_start(&nn_out_info[3]);
1057:Src/app.c     **** //   info->landmarks_out_len = LL_Buffer_len(&nn_out_info[3]);
1058:Src/app.c     **** //   assert(info->landmarks_out_len == sizeof(float) * 63);
1059:Src/app.c     **** // }
1060:Src/app.c     **** 
1061:Src/app.c     **** 
1062:Src/app.c     **** #if HAS_ROTATION_SUPPORT == 0
1063:Src/app.c     **** static int hand_landmark_prepare_input(uint8_t *buffer, roi_t *roi, hl_model_info_t *info)
1064:Src/app.c     **** {
1065:Src/app.c     ****   float corners_f[4][2];
1066:Src/app.c     ****   int corners[4][2];
1067:Src/app.c     ****   uint8_t* out_data;
1068:Src/app.c     ****   size_t height_out;
1069:Src/app.c     ****   uint8_t *in_data;
1070:Src/app.c     ****   size_t height_in;
1071:Src/app.c     ****   size_t width_out;
1072:Src/app.c     ****   size_t width_in;
1073:Src/app.c     ****   int is_clamped;
1074:Src/app.c     **** 
1075:Src/app.c     ****   /* defaults when no clamping occurs */
1076:Src/app.c     ****   out_data = info->nn_in;
1077:Src/app.c     ****   width_out = LD_WIDTH;
1078:Src/app.c     ****   height_out = LD_HEIGHT;
1079:Src/app.c     **** 
1080:Src/app.c     ****   roi_to_corners(roi, corners_f);
1081:Src/app.c     ****   is_clamped = clamp_corners(corners_f, corners);
1082:Src/app.c     **** 
1083:Src/app.c     ****   /* If clamp perform a partial resize */
1084:Src/app.c     ****   if (is_clamped) {
1085:Src/app.c     ****     int offset_x;
1086:Src/app.c     ****     int offset_y;
1087:Src/app.c     **** 
1088:Src/app.c     ****     /* clear target memory since resize will partially write it */
1089:Src/app.c     ****     memset(info->nn_in, 0, info->nn_in_len);
1090:Src/app.c     **** 
1091:Src/app.c     ****     /* compute start address of output buffer */
1092:Src/app.c     ****     offset_x = (int)(((corners[0][0] - corners_f[0][0]) * LD_WIDTH) / (corners_f[2][0] - corners_f[
1093:Src/app.c     ****     offset_y = (int)(((corners[0][1] - corners_f[0][1]) * LD_HEIGHT) / (corners_f[2][1] - corners_f
1094:Src/app.c     ****     out_data += offset_y * (int)LD_WIDTH * DISPLAY_BPP + offset_x * DISPLAY_BPP;
1095:Src/app.c     **** 
1096:Src/app.c     ****     /* compute output width and height */
1097:Src/app.c     ****     width_out = (int)((corners[2][0] - corners[0][0]) / (corners_f[2][0] - corners_f[0][0]) * LD_WI
1098:Src/app.c     ****     height_out = (int)((corners[2][1] - corners[0][1]) / (corners_f[2][1] - corners_f[0][1]) * LD_H
1099:Src/app.c     **** 
1100:Src/app.c     ****     assert(width_out > 0);
ARM GAS  /tmp/ccrysqwW.s 			page 138


1101:Src/app.c     ****     assert(height_out > 0);
1102:Src/app.c     ****     {
1103:Src/app.c     ****       uint8_t* out_data_end;
1104:Src/app.c     **** 
1105:Src/app.c     ****       out_data_end = out_data + (int)LD_WIDTH * DISPLAY_BPP * (height_out - 1) + DISPLAY_BPP * widt
1106:Src/app.c     **** 
1107:Src/app.c     ****       assert(out_data_end >= info->nn_in);
1108:Src/app.c     ****       assert(out_data_end < info->nn_in + info->nn_in_len);
1109:Src/app.c     ****     }
1110:Src/app.c     ****   }
1111:Src/app.c     **** 
1112:Src/app.c     ****   in_data = buffer + corners[0][1] * LCD_BG_WIDTH * DISPLAY_BPP + corners[0][0]* DISPLAY_BPP;
1113:Src/app.c     ****   width_in = corners[2][0] - corners[0][0];
1114:Src/app.c     ****   height_in = corners[2][1] - corners[0][1];
1115:Src/app.c     **** 
1116:Src/app.c     ****   assert(width_in > 0);
1117:Src/app.c     ****   assert(height_in > 0);
1118:Src/app.c     ****   {
1119:Src/app.c     ****     uint8_t* in_data_end;
1120:Src/app.c     **** 
1121:Src/app.c     ****     in_data_end = in_data + LCD_BG_WIDTH * DISPLAY_BPP * (height_in - 1) + DISPLAY_BPP * width_in -
1122:Src/app.c     **** 
1123:Src/app.c     ****     assert(in_data_end >= buffer);
1124:Src/app.c     ****     assert(in_data_end < buffer + LCD_BG_WIDTH * LCD_BG_HEIGHT * DISPLAY_BPP);
1125:Src/app.c     ****   }
1126:Src/app.c     **** 
1127:Src/app.c     ****   IPL_resize_bilinear_iu8ou8_with_strides_RGB(in_data, out_data, LCD_BG_WIDTH * DISPLAY_BPP, LD_WID
1128:Src/app.c     ****                                               width_in, height_in, width_out, height_out);
1129:Src/app.c     **** 
1130:Src/app.c     ****   return 0;
1131:Src/app.c     **** }
1132:Src/app.c     **** #else
1133:Src/app.c     **** static void app_transform(nema_matrix3x3_t t, app_v3_t v)
1134:Src/app.c     **** {
 5320              		.loc 1 1134 1
 5321              		.cfi_startproc
 5322              		@ args = 0, pretend = 0, frame = 24
 5323              		@ frame_needed = 1, uses_anonymous_args = 0
 5324              		@ link register save eliminated.
 5325 0000 80B4     		push	{r7}
 5326              		.cfi_def_cfa_offset 4
 5327              		.cfi_offset 7, -4
 5328 0002 87B0     		sub	sp, sp, #28
 5329              		.cfi_def_cfa_offset 32
 5330 0004 00AF     		add	r7, sp, #0
 5331              		.cfi_def_cfa_register 7
 5332 0006 7860     		str	r0, [r7, #4]
 5333 0008 3960     		str	r1, [r7]
1135:Src/app.c     ****   app_v3_t r;
1136:Src/app.c     ****   int i;
1137:Src/app.c     **** 
1138:Src/app.c     ****   for (i = 0; i < 3; i++)
 5334              		.loc 1 1138 10
 5335 000a 0023     		movs	r3, #0
 5336 000c 7B61     		str	r3, [r7, #20]
 5337              		.loc 1 1138 3
 5338 000e 3CE0     		b	.L230
ARM GAS  /tmp/ccrysqwW.s 			page 139


 5339              	.L231:
1139:Src/app.c     ****     r[i] = t[i][0] * v[0] + t[i][1] * v[1] + t[i][2] * v[2];
 5340              		.loc 1 1139 13
 5341 0010 7A69     		ldr	r2, [r7, #20]
 5342 0012 1346     		mov	r3, r2
 5343 0014 5B00     		lsls	r3, r3, #1
 5344 0016 1344     		add	r3, r3, r2
 5345 0018 9B00     		lsls	r3, r3, #2
 5346 001a 1A46     		mov	r2, r3
 5347 001c 7B68     		ldr	r3, [r7, #4]
 5348 001e 1344     		add	r3, r3, r2
 5349              		.loc 1 1139 16
 5350 0020 93ED007A 		vldr.32	s14, [r3]
 5351              		.loc 1 1139 23
 5352 0024 3B68     		ldr	r3, [r7]
 5353 0026 D3ED007A 		vldr.32	s15, [r3]
 5354              		.loc 1 1139 20
 5355 002a 27EE277A 		vmul.f32	s14, s14, s15
 5356              		.loc 1 1139 30
 5357 002e 7A69     		ldr	r2, [r7, #20]
 5358 0030 1346     		mov	r3, r2
 5359 0032 5B00     		lsls	r3, r3, #1
 5360 0034 1344     		add	r3, r3, r2
 5361 0036 9B00     		lsls	r3, r3, #2
 5362 0038 1A46     		mov	r2, r3
 5363 003a 7B68     		ldr	r3, [r7, #4]
 5364 003c 1344     		add	r3, r3, r2
 5365              		.loc 1 1139 33
 5366 003e D3ED016A 		vldr.32	s13, [r3, #4]
 5367              		.loc 1 1139 40
 5368 0042 3B68     		ldr	r3, [r7]
 5369 0044 0433     		adds	r3, r3, #4
 5370 0046 D3ED007A 		vldr.32	s15, [r3]
 5371              		.loc 1 1139 37
 5372 004a 66EEA77A 		vmul.f32	s15, s13, s15
 5373              		.loc 1 1139 27
 5374 004e 37EE277A 		vadd.f32	s14, s14, s15
 5375              		.loc 1 1139 47
 5376 0052 7A69     		ldr	r2, [r7, #20]
 5377 0054 1346     		mov	r3, r2
 5378 0056 5B00     		lsls	r3, r3, #1
 5379 0058 1344     		add	r3, r3, r2
 5380 005a 9B00     		lsls	r3, r3, #2
 5381 005c 1A46     		mov	r2, r3
 5382 005e 7B68     		ldr	r3, [r7, #4]
 5383 0060 1344     		add	r3, r3, r2
 5384              		.loc 1 1139 50
 5385 0062 D3ED026A 		vldr.32	s13, [r3, #8]
 5386              		.loc 1 1139 57
 5387 0066 3B68     		ldr	r3, [r7]
 5388 0068 0833     		adds	r3, r3, #8
 5389 006a D3ED007A 		vldr.32	s15, [r3]
 5390              		.loc 1 1139 54
 5391 006e 66EEA77A 		vmul.f32	s15, s13, s15
 5392              		.loc 1 1139 44
 5393 0072 77EE277A 		vadd.f32	s15, s14, s15
 5394              		.loc 1 1139 10
ARM GAS  /tmp/ccrysqwW.s 			page 140


 5395 0076 7B69     		ldr	r3, [r7, #20]
 5396 0078 9B00     		lsls	r3, r3, #2
 5397 007a 1833     		adds	r3, r3, #24
 5398 007c 3B44     		add	r3, r3, r7
 5399 007e 103B     		subs	r3, r3, #16
 5400 0080 C3ED007A 		vstr.32	s15, [r3]
1138:Src/app.c     ****     r[i] = t[i][0] * v[0] + t[i][1] * v[1] + t[i][2] * v[2];
 5401              		.loc 1 1138 23 discriminator 3
 5402 0084 7B69     		ldr	r3, [r7, #20]
 5403 0086 0133     		adds	r3, r3, #1
 5404 0088 7B61     		str	r3, [r7, #20]
 5405              	.L230:
1138:Src/app.c     ****     r[i] = t[i][0] * v[0] + t[i][1] * v[1] + t[i][2] * v[2];
 5406              		.loc 1 1138 17 discriminator 1
 5407 008a 7B69     		ldr	r3, [r7, #20]
 5408 008c 022B     		cmp	r3, #2
 5409 008e BFDD     		ble	.L231
1140:Src/app.c     **** 
1141:Src/app.c     ****   for (i = 0; i < 3; i++)
 5410              		.loc 1 1141 10
 5411 0090 0023     		movs	r3, #0
 5412 0092 7B61     		str	r3, [r7, #20]
 5413              		.loc 1 1141 3
 5414 0094 0DE0     		b	.L232
 5415              	.L233:
1142:Src/app.c     ****     v[i] = r[i];
 5416              		.loc 1 1142 6
 5417 0096 7B69     		ldr	r3, [r7, #20]
 5418 0098 9B00     		lsls	r3, r3, #2
 5419 009a 3A68     		ldr	r2, [r7]
 5420 009c 1344     		add	r3, r3, r2
 5421              		.loc 1 1142 13
 5422 009e 7A69     		ldr	r2, [r7, #20]
 5423 00a0 9200     		lsls	r2, r2, #2
 5424 00a2 1832     		adds	r2, r2, #24
 5425 00a4 3A44     		add	r2, r2, r7
 5426 00a6 103A     		subs	r2, r2, #16
 5427 00a8 1268     		ldr	r2, [r2]	@ float
 5428              		.loc 1 1142 10
 5429 00aa 1A60     		str	r2, [r3]	@ float
1141:Src/app.c     ****     v[i] = r[i];
 5430              		.loc 1 1141 23 discriminator 3
 5431 00ac 7B69     		ldr	r3, [r7, #20]
 5432 00ae 0133     		adds	r3, r3, #1
 5433 00b0 7B61     		str	r3, [r7, #20]
 5434              	.L232:
1141:Src/app.c     ****     v[i] = r[i];
 5435              		.loc 1 1141 17 discriminator 1
 5436 00b2 7B69     		ldr	r3, [r7, #20]
 5437 00b4 022B     		cmp	r3, #2
 5438 00b6 EEDD     		ble	.L233
1143:Src/app.c     **** }
 5439              		.loc 1 1143 1
 5440 00b8 00BF     		nop
 5441 00ba 00BF     		nop
 5442 00bc 1C37     		adds	r7, r7, #28
 5443              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccrysqwW.s 			page 141


 5444 00be BD46     		mov	sp, r7
 5445              		.cfi_def_cfa_register 13
 5446              		@ sp needed
 5447 00c0 5DF8047B 		ldr	r7, [sp], #4
 5448              		.cfi_restore 7
 5449              		.cfi_def_cfa_offset 0
 5450 00c4 7047     		bx	lr
 5451              		.cfi_endproc
 5452              	.LFE7397:
 5454              		.section	.rodata
 5455 0232 0000     		.align	2
 5456              	.LC29:
 5457 0234 216E656D 		.ascii	"!nema_get_error()\000"
 5457      615F6765 
 5457      745F6572 
 5457      726F7228 
 5457      2900
 5458 0246 0000     		.align	2
 5459              	.LC0:
 5460 0248 00000000 		.word	0
 5461 024c 00000000 		.word	0
 5462 0250 0000803F 		.word	1065353216
 5463 0254 00004844 		.word	1145569280
 5464 0258 00000000 		.word	0
 5465 025c 0000803F 		.word	1065353216
 5466 0260 00004844 		.word	1145569280
 5467 0264 0000F043 		.word	1139802112
 5468 0268 0000803F 		.word	1065353216
 5469 026c 00000000 		.word	0
 5470 0270 0000F043 		.word	1139802112
 5471 0274 0000803F 		.word	1065353216
 5472              		.section	.text.hand_landmark_prepare_input,"ax",%progbits
 5473              		.align	1
 5474              		.syntax unified
 5475              		.thumb
 5476              		.thumb_func
 5478              	hand_landmark_prepare_input:
 5479              	.LFB7398:
1144:Src/app.c     **** 
1145:Src/app.c     **** static int hand_landmark_prepare_input(uint8_t *buffer, roi_t *roi, hl_model_info_t *info)
1146:Src/app.c     **** {
 5480              		.loc 1 1146 1
 5481              		.cfi_startproc
 5482              		@ args = 0, pretend = 0, frame = 128
 5483              		@ frame_needed = 1, uses_anonymous_args = 0
 5484 0000 B0B5     		push	{r4, r5, r7, lr}
 5485              		.cfi_def_cfa_offset 16
 5486              		.cfi_offset 4, -16
 5487              		.cfi_offset 5, -12
 5488              		.cfi_offset 7, -8
 5489              		.cfi_offset 14, -4
 5490 0002 A2B0     		sub	sp, sp, #136
 5491              		.cfi_def_cfa_offset 152
 5492 0004 02AF     		add	r7, sp, #8
 5493              		.cfi_def_cfa 7, 144
 5494 0006 F860     		str	r0, [r7, #12]
 5495 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/ccrysqwW.s 			page 142


 5496 000a 7A60     		str	r2, [r7, #4]
1147:Src/app.c     ****   app_v3_t vertex[] = {
 5497              		.loc 1 1147 12
 5498 000c 734B     		ldr	r3, .L240
 5499 000e 07F14804 		add	r4, r7, #72
 5500 0012 1D46     		mov	r5, r3
 5501 0014 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 5502 0016 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 5503 0018 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 5504 001a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 5505 001c 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 5506 0020 84E80F00 		stm	r4, {r0, r1, r2, r3}
1148:Src/app.c     ****     {           0,             0, 1},
1149:Src/app.c     ****     {LCD_BG_WIDTH,             0, 1},
1150:Src/app.c     ****     {LCD_BG_WIDTH, LCD_BG_HEIGHT, 1},
1151:Src/app.c     ****     {           0, LCD_BG_HEIGHT, 1},
1152:Src/app.c     ****   };
1153:Src/app.c     ****   GFXMMU_BuffersTypeDef buffers = { 0 };
 5507              		.loc 1 1153 25
 5508 0024 07F13803 		add	r3, r7, #56
 5509 0028 0022     		movs	r2, #0
 5510 002a 1A60     		str	r2, [r3]
 5511 002c 5A60     		str	r2, [r3, #4]
 5512 002e 9A60     		str	r2, [r3, #8]
 5513 0030 DA60     		str	r2, [r3, #12]
1154:Src/app.c     ****   nema_matrix3x3_t t;
1155:Src/app.c     ****   int ret;
1156:Src/app.c     ****   int i;
1157:Src/app.c     **** 
1158:Src/app.c     ****   buffers.Buf0Address = (uint32_t) info->nn_in;
 5514              		.loc 1 1158 40
 5515 0032 7B68     		ldr	r3, [r7, #4]
 5516 0034 1B68     		ldr	r3, [r3]
 5517              		.loc 1 1158 23
 5518 0036 BB63     		str	r3, [r7, #56]
1159:Src/app.c     ****   ret = HAL_GFXMMU_ModifyBuffers(&hgfxmmu, &buffers);
 5519              		.loc 1 1159 9
 5520 0038 07F13803 		add	r3, r7, #56
 5521 003c 1946     		mov	r1, r3
 5522 003e 6848     		ldr	r0, .L240+4
 5523 0040 FFF7FEFF 		bl	HAL_GFXMMU_ModifyBuffers
 5524 0044 0346     		mov	r3, r0
 5525              		.loc 1 1159 7 discriminator 1
 5526 0046 BB67     		str	r3, [r7, #120]
1160:Src/app.c     ****   assert(ret == HAL_OK);
 5527              		.loc 1 1160 3
 5528 0048 BB6F     		ldr	r3, [r7, #120]
 5529 004a 002B     		cmp	r3, #0
 5530 004c 06D0     		beq	.L235
 5531              		.loc 1 1160 3 is_stmt 0 discriminator 1
 5532 004e 654B     		ldr	r3, .L240+8
 5533 0050 654A     		ldr	r2, .L240+12
 5534 0052 4FF49161 		mov	r1, #1160
 5535 0056 6548     		ldr	r0, .L240+16
 5536 0058 FFF7FEFF 		bl	__assert_func
 5537              	.L235:
1161:Src/app.c     **** 
ARM GAS  /tmp/ccrysqwW.s 			page 143


1162:Src/app.c     ****   /* bind destination texture */
1163:Src/app.c     ****   nema_bind_dst_tex(GFXMMU_VIRTUAL_BUFFER0_BASE, LD_WIDTH, LD_HEIGHT, NEMA_RGBA8888, -1);
 5538              		.loc 1 1163 3 is_stmt 1
 5539 005c 4FF0FF33 		mov	r3, #-1
 5540 0060 0093     		str	r3, [sp]
 5541 0062 0123     		movs	r3, #1
 5542 0064 C022     		movs	r2, #192
 5543 0066 C021     		movs	r1, #192
 5544 0068 4FF05450 		mov	r0, #889192448
 5545 006c FFF7FEFF 		bl	nema_bind_dst_tex
1164:Src/app.c     ****   nema_set_clip(0, 0, LD_WIDTH, LD_HEIGHT);
 5546              		.loc 1 1164 3
 5547 0070 C023     		movs	r3, #192
 5548 0072 C022     		movs	r2, #192
 5549 0074 0021     		movs	r1, #0
 5550 0076 0020     		movs	r0, #0
 5551 0078 FFF7FEFF 		bl	nema_set_clip
1165:Src/app.c     ****   nema_clear(0);
 5552              		.loc 1 1165 3
 5553 007c 0020     		movs	r0, #0
 5554 007e FFF7FEFF 		bl	nema_clear
1166:Src/app.c     ****   /* bind source texture */
1167:Src/app.c     ****   nema_bind_src_tex((uintptr_t) buffer, LCD_BG_WIDTH, LCD_BG_HEIGHT, NEMA_RGBA8888, -1, NEMA_FILTER
 5555              		.loc 1 1167 3
 5556 0082 F868     		ldr	r0, [r7, #12]
 5557 0084 0123     		movs	r3, #1
 5558 0086 0193     		str	r3, [sp, #4]
 5559 0088 4FF0FF33 		mov	r3, #-1
 5560 008c 0093     		str	r3, [sp]
 5561 008e 0123     		movs	r3, #1
 5562 0090 4FF4F072 		mov	r2, #480
 5563 0094 4FF44871 		mov	r1, #800
 5564 0098 FFF7FEFF 		bl	nema_bind_src_tex
1168:Src/app.c     ****   nema_enable_tiling(1);
 5565              		.loc 1 1168 3
 5566 009c 0120     		movs	r0, #1
 5567 009e FFF7FEFF 		bl	nema_enable_tiling
1169:Src/app.c     ****   nema_set_blend_blit(NEMA_BL_SRC);
 5568              		.loc 1 1169 3
 5569 00a2 0120     		movs	r0, #1
 5570 00a4 FFF7FEFF 		bl	nema_set_blend_blit
1170:Src/app.c     **** 
1171:Src/app.c     ****   /* let's go */
1172:Src/app.c     ****   nema_mat3x3_load_identity(t);
 5571              		.loc 1 1172 3
 5572 00a8 07F11403 		add	r3, r7, #20
 5573 00ac 1846     		mov	r0, r3
 5574 00ae FFF7FEFF 		bl	nema_mat3x3_load_identity
1173:Src/app.c     ****   nema_mat3x3_translate(t, -roi->cx, -roi->cy);
 5575              		.loc 1 1173 32
 5576 00b2 BB68     		ldr	r3, [r7, #8]
 5577 00b4 D3ED007A 		vldr.32	s15, [r3]
 5578              		.loc 1 1173 3
 5579 00b8 B1EE677A 		vneg.f32	s14, s15
 5580              		.loc 1 1173 42
 5581 00bc BB68     		ldr	r3, [r7, #8]
 5582 00be D3ED017A 		vldr.32	s15, [r3, #4]
ARM GAS  /tmp/ccrysqwW.s 			page 144


 5583              		.loc 1 1173 3
 5584 00c2 F1EE677A 		vneg.f32	s15, s15
 5585 00c6 07F11403 		add	r3, r7, #20
 5586 00ca F0EE670A 		vmov.f32	s1, s15
 5587 00ce B0EE470A 		vmov.f32	s0, s14
 5588 00d2 1846     		mov	r0, r3
 5589 00d4 FFF7FEFF 		bl	nema_mat3x3_translate
1174:Src/app.c     ****   nema_mat3x3_rotate(t, nema_rad_to_deg(-roi->rotation));
 5590              		.loc 1 1174 25
 5591 00d8 BB68     		ldr	r3, [r7, #8]
 5592 00da D3ED047A 		vldr.32	s15, [r3, #16]
 5593 00de F1EE677A 		vneg.f32	s15, s15
 5594              		.loc 1 1174 3
 5595 00e2 9FED437A 		vldr.32	s14, .L240+20
 5596 00e6 67EE877A 		vmul.f32	s15, s15, s14
 5597 00ea 07F11403 		add	r3, r7, #20
 5598 00ee B0EE670A 		vmov.f32	s0, s15
 5599 00f2 1846     		mov	r0, r3
 5600 00f4 FFF7FEFF 		bl	nema_mat3x3_rotate
1175:Src/app.c     ****   nema_mat3x3_scale(t, LD_WIDTH / roi->w, LD_HEIGHT / roi->h);
 5601              		.loc 1 1175 38
 5602 00f8 BB68     		ldr	r3, [r7, #8]
 5603 00fa D3ED027A 		vldr.32	s15, [r3, #8]
 5604              		.loc 1 1175 3
 5605 00fe DFED3D6A 		vldr.32	s13, .L240+24
 5606 0102 86EEA77A 		vdiv.f32	s14, s13, s15
 5607              		.loc 1 1175 58
 5608 0106 BB68     		ldr	r3, [r7, #8]
 5609 0108 D3ED037A 		vldr.32	s15, [r3, #12]
 5610              		.loc 1 1175 3
 5611 010c 9FED396A 		vldr.32	s12, .L240+24
 5612 0110 C6EE276A 		vdiv.f32	s13, s12, s15
 5613 0114 07F11403 		add	r3, r7, #20
 5614 0118 F0EE660A 		vmov.f32	s1, s13
 5615 011c B0EE470A 		vmov.f32	s0, s14
 5616 0120 1846     		mov	r0, r3
 5617 0122 FFF7FEFF 		bl	nema_mat3x3_scale
1176:Src/app.c     ****   nema_mat3x3_translate(t, LD_WIDTH / 2, LD_HEIGHT / 2);
 5618              		.loc 1 1176 3
 5619 0126 07F11403 		add	r3, r7, #20
 5620 012a DFED330A 		vldr.32	s1, .L240+28
 5621 012e 9FED320A 		vldr.32	s0, .L240+28
 5622 0132 1846     		mov	r0, r3
 5623 0134 FFF7FEFF 		bl	nema_mat3x3_translate
1177:Src/app.c     ****   for (i = 0 ; i < 4; i++)
 5624              		.loc 1 1177 10
 5625 0138 0023     		movs	r3, #0
 5626 013a FB67     		str	r3, [r7, #124]
 5627              		.loc 1 1177 3
 5628 013c 10E0     		b	.L236
 5629              	.L237:
1178:Src/app.c     ****     app_transform(t, vertex[i]);
 5630              		.loc 1 1178 28
 5631 013e 07F14801 		add	r1, r7, #72
 5632 0142 FA6F     		ldr	r2, [r7, #124]
 5633 0144 1346     		mov	r3, r2
 5634 0146 5B00     		lsls	r3, r3, #1
ARM GAS  /tmp/ccrysqwW.s 			page 145


 5635 0148 1344     		add	r3, r3, r2
 5636 014a 9B00     		lsls	r3, r3, #2
 5637 014c CA18     		adds	r2, r1, r3
 5638              		.loc 1 1178 5
 5639 014e 07F11403 		add	r3, r7, #20
 5640 0152 1146     		mov	r1, r2
 5641 0154 1846     		mov	r0, r3
 5642 0156 FFF7FEFF 		bl	app_transform
1177:Src/app.c     ****   for (i = 0 ; i < 4; i++)
 5643              		.loc 1 1177 24 discriminator 3
 5644 015a FB6F     		ldr	r3, [r7, #124]
 5645 015c 0133     		adds	r3, r3, #1
 5646 015e FB67     		str	r3, [r7, #124]
 5647              	.L236:
1177:Src/app.c     ****   for (i = 0 ; i < 4; i++)
 5648              		.loc 1 1177 18 discriminator 1
 5649 0160 FB6F     		ldr	r3, [r7, #124]
 5650 0162 032B     		cmp	r3, #3
 5651 0164 EBDD     		ble	.L237
1179:Src/app.c     ****   nema_blit_quad_fit(vertex[0][0], vertex[0][1], vertex[1][0], vertex[1][1],
 5652              		.loc 1 1179 3
 5653 0166 D7ED127A 		vldr.32	s15, [r7, #72]
 5654 016a 97ED137A 		vldr.32	s14, [r7, #76]
 5655 016e D7ED156A 		vldr.32	s13, [r7, #84]
 5656 0172 97ED166A 		vldr.32	s12, [r7, #88]
 5657 0176 D7ED185A 		vldr.32	s11, [r7, #96]
 5658 017a 97ED195A 		vldr.32	s10, [r7, #100]
 5659 017e D7ED1B4A 		vldr.32	s9, [r7, #108]
 5660 0182 97ED1C4A 		vldr.32	s8, [r7, #112]
 5661 0186 F0EE443A 		vmov.f32	s7, s8
 5662 018a B0EE643A 		vmov.f32	s6, s9
 5663 018e F0EE452A 		vmov.f32	s5, s10
 5664 0192 B0EE652A 		vmov.f32	s4, s11
 5665 0196 F0EE461A 		vmov.f32	s3, s12
 5666 019a B0EE661A 		vmov.f32	s2, s13
 5667 019e F0EE470A 		vmov.f32	s1, s14
 5668 01a2 B0EE670A 		vmov.f32	s0, s15
 5669 01a6 FFF7FEFF 		bl	nema_blit_quad_fit
1180:Src/app.c     ****                      vertex[2][0], vertex[2][1], vertex[3][0], vertex[3][1]);
1181:Src/app.c     **** 
1182:Src/app.c     ****   nema_cl_submit(&cl);
 5670              		.loc 1 1182 3
 5671 01aa 1448     		ldr	r0, .L240+32
 5672 01ac FFF7FEFF 		bl	nema_cl_submit
1183:Src/app.c     ****   nema_cl_wait(&cl);
 5673              		.loc 1 1183 3
 5674 01b0 1248     		ldr	r0, .L240+32
 5675 01b2 FFF7FEFF 		bl	nema_cl_wait
1184:Src/app.c     ****   HAL_ICACHE_Invalidate();
 5676              		.loc 1 1184 3
 5677 01b6 FFF7FEFF 		bl	HAL_ICACHE_Invalidate
1185:Src/app.c     **** 
1186:Src/app.c     ****   assert(!nema_get_error());
 5678              		.loc 1 1186 3
 5679 01ba FFF7FEFF 		bl	nema_get_error
 5680 01be 0346     		mov	r3, r0
 5681              		.loc 1 1186 3 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccrysqwW.s 			page 146


 5682 01c0 002B     		cmp	r3, #0
 5683 01c2 06D0     		beq	.L238
 5684 01c4 0E4B     		ldr	r3, .L240+36
 5685 01c6 084A     		ldr	r2, .L240+12
 5686 01c8 40F2A241 		movw	r1, #1186
 5687 01cc 0748     		ldr	r0, .L240+16
 5688 01ce FFF7FEFF 		bl	__assert_func
 5689              	.L238:
1187:Src/app.c     **** 
1188:Src/app.c     ****   return 0;
 5690              		.loc 1 1188 10 is_stmt 1
 5691 01d2 0023     		movs	r3, #0
1189:Src/app.c     **** }
 5692              		.loc 1 1189 1
 5693 01d4 1846     		mov	r0, r3
 5694 01d6 8037     		adds	r7, r7, #128
 5695              		.cfi_def_cfa_offset 16
 5696 01d8 BD46     		mov	sp, r7
 5697              		.cfi_def_cfa_register 13
 5698              		@ sp needed
 5699 01da B0BD     		pop	{r4, r5, r7, pc}
 5700              	.L241:
 5701              		.align	2
 5702              	.L240:
 5703 01dc 48020000 		.word	.LC0
 5704 01e0 00000000 		.word	hgfxmmu
 5705 01e4 6C000000 		.word	.LC11
 5706 01e8 00000000 		.word	__func__.10
 5707 01ec 38000000 		.word	.LC7
 5708 01f0 E12E6542 		.word	1113927393
 5709 01f4 00004043 		.word	1128267776
 5710 01f8 0000C042 		.word	1119879168
 5711 01fc 00000000 		.word	cl
 5712 0200 34020000 		.word	.LC29
 5713              		.cfi_endproc
 5714              	.LFE7398:
 5716              		.section	.rodata
 5717              		.align	2
 5718              	.LC30:
 5719 0278 696E6974 		.ascii	"init nema\000"
 5719      206E656D 
 5719      6100
 5720 0282 0000     		.align	2
 5721              	.LC31:
 5722 0284 696E6974 		.ascii	"init nema DONE %s\012\000"
 5722      206E656D 
 5722      6120444F 
 5722      4E452025 
 5722      730A00
 5723              		.section	.text.app_rot_init,"ax",%progbits
 5724              		.align	1
 5725              		.syntax unified
 5726              		.thumb
 5727              		.thumb_func
 5729              	app_rot_init:
 5730              	.LFB7399:
1190:Src/app.c     **** #endif
ARM GAS  /tmp/ccrysqwW.s 			page 147


1191:Src/app.c     **** 
1192:Src/app.c     **** // static int hand_landmark_run(uint8_t *buffer, hl_model_info_t *info, roi_t *roi,
1193:Src/app.c     **** //                              ld_point_t ld_landmarks[LD_LANDMARK_NB])
1194:Src/app.c     **** // {
1195:Src/app.c     **** //   int is_clamped;
1196:Src/app.c     **** //   int is_valid;
1197:Src/app.c     **** 
1198:Src/app.c     **** //   is_clamped = hand_landmark_prepare_input(buffer, roi, info);
1199:Src/app.c     **** //   CACHE_OP(SCB_CleanInvalidateDCache_by_Addr(info->nn_in, info->nn_in_len));
1200:Src/app.c     **** //   if (is_clamped)
1201:Src/app.c     **** //     return 0;
1202:Src/app.c     **** 
1203:Src/app.c     **** //   LL_ATON_RT_Main(&NN_Instance_hand_landmark);
1204:Src/app.c     **** 
1205:Src/app.c     **** //   is_valid = ld_post_process(info->prob_out, info->landmarks_out, ld_landmarks);
1206:Src/app.c     **** 
1207:Src/app.c     **** //   /* Discard nn_out region (used by pp_input and pp_outputs variables) to avoid Dcache evictions
1208:Src/app.c     **** //   CACHE_OP(SCB_InvalidateDCache_by_Addr(info->prob_out, info->prob_out_len));
1209:Src/app.c     **** //   CACHE_OP(SCB_InvalidateDCache_by_Addr(info->landmarks_out, info->landmarks_out_len));
1210:Src/app.c     **** 
1211:Src/app.c     **** //   return is_valid;
1212:Src/app.c     **** // }
1213:Src/app.c     **** 
1214:Src/app.c     **** #if HAS_ROTATION_SUPPORT == 1
1215:Src/app.c     **** static void app_rot_init(hl_model_info_t *info)
1216:Src/app.c     **** {
 5731              		.loc 1 1216 1
 5732              		.cfi_startproc
 5733              		@ args = 0, pretend = 0, frame = 112
 5734              		@ frame_needed = 1, uses_anonymous_args = 0
 5735 0000 B0B5     		push	{r4, r5, r7, lr}
 5736              		.cfi_def_cfa_offset 16
 5737              		.cfi_offset 4, -16
 5738              		.cfi_offset 5, -12
 5739              		.cfi_offset 7, -8
 5740              		.cfi_offset 14, -4
 5741 0002 9CB0     		sub	sp, sp, #112
 5742              		.cfi_def_cfa_offset 128
 5743 0004 00AF     		add	r7, sp, #0
 5744              		.cfi_def_cfa_register 7
 5745 0006 7864     		str	r0, [r7, #68]
1217:Src/app.c     ****   GFXMMU_PackingTypeDef packing = { 0 };
 5746              		.loc 1 1217 25
 5747 0008 07F14803 		add	r3, r7, #72
 5748 000c 2422     		movs	r2, #36
 5749 000e 0021     		movs	r1, #0
 5750 0010 1846     		mov	r0, r3
 5751 0012 FFF7FEFF 		bl	memset
1218:Src/app.c     ****   int ret;
1219:Src/app.c     **** 
1220:Src/app.c     ****   printf("init nema\n");
 5752              		.loc 1 1220 3
 5753 0016 3748     		ldr	r0, .L246
 5754 0018 FFF7FEFF 		bl	puts
1221:Src/app.c     ****   nema_init();
 5755              		.loc 1 1221 3
 5756 001c FFF7FEFF 		bl	nema_init
ARM GAS  /tmp/ccrysqwW.s 			page 148


1222:Src/app.c     ****   assert(!nema_get_error());
 5757              		.loc 1 1222 3
 5758 0020 FFF7FEFF 		bl	nema_get_error
 5759 0024 0346     		mov	r3, r0
 5760              		.loc 1 1222 3 is_stmt 0 discriminator 1
 5761 0026 002B     		cmp	r3, #0
 5762 0028 06D0     		beq	.L243
 5763 002a 334B     		ldr	r3, .L246+4
 5764 002c 334A     		ldr	r2, .L246+8
 5765 002e 40F2C641 		movw	r1, #1222
 5766 0032 3348     		ldr	r0, .L246+12
 5767 0034 FFF7FEFF 		bl	__assert_func
 5768              	.L243:
1223:Src/app.c     ****   nema_ext_hold_enable(2);
 5769              		.loc 1 1223 3 is_stmt 1
 5770 0038 0220     		movs	r0, #2
 5771 003a FFF7FEFF 		bl	nema_ext_hold_enable
1224:Src/app.c     ****   nema_ext_hold_irq_enable(2);
 5772              		.loc 1 1224 3
 5773 003e 0220     		movs	r0, #2
 5774 0040 FFF7FEFF 		bl	nema_ext_hold_irq_enable
1225:Src/app.c     ****   nema_ext_hold_enable(3);
 5775              		.loc 1 1225 3
 5776 0044 0320     		movs	r0, #3
 5777 0046 FFF7FEFF 		bl	nema_ext_hold_enable
1226:Src/app.c     ****   nema_ext_hold_irq_enable(3);
 5778              		.loc 1 1226 3
 5779 004a 0320     		movs	r0, #3
 5780 004c FFF7FEFF 		bl	nema_ext_hold_irq_enable
1227:Src/app.c     ****   printf("init nema DONE %s\n", nema_get_sw_device_name());
 5781              		.loc 1 1227 3
 5782 0050 FFF7FEFF 		bl	nema_get_sw_device_name
 5783 0054 0346     		mov	r3, r0
 5784              		.loc 1 1227 3 is_stmt 0 discriminator 1
 5785 0056 1946     		mov	r1, r3
 5786 0058 2A48     		ldr	r0, .L246+16
 5787 005a FFF7FEFF 		bl	printf
1228:Src/app.c     **** 
1229:Src/app.c     ****   hgfxmmu.Instance = GFXMMU;
 5788              		.loc 1 1229 20 is_stmt 1
 5789 005e 2A4B     		ldr	r3, .L246+20
 5790 0060 2A4A     		ldr	r2, .L246+24
 5791 0062 1A60     		str	r2, [r3]
1230:Src/app.c     ****   hgfxmmu.Init.BlockSize = GFXMMU_12BYTE_BLOCKS;
 5792              		.loc 1 1230 26
 5793 0064 284B     		ldr	r3, .L246+20
 5794 0066 4022     		movs	r2, #64
 5795 0068 5A60     		str	r2, [r3, #4]
1231:Src/app.c     ****   hgfxmmu.Init.AddressTranslation = DISABLE;
 5796              		.loc 1 1231 35
 5797 006a 274B     		ldr	r3, .L246+20
 5798 006c 0022     		movs	r2, #0
 5799 006e 1A73     		strb	r2, [r3, #12]
1232:Src/app.c     ****   ret = HAL_GFXMMU_Init(&hgfxmmu);
 5800              		.loc 1 1232 9
 5801 0070 2548     		ldr	r0, .L246+20
 5802 0072 FFF7FEFF 		bl	HAL_GFXMMU_Init
ARM GAS  /tmp/ccrysqwW.s 			page 149


 5803 0076 0346     		mov	r3, r0
 5804              		.loc 1 1232 7 discriminator 1
 5805 0078 FB66     		str	r3, [r7, #108]
1233:Src/app.c     ****   assert(ret == HAL_OK);
 5806              		.loc 1 1233 3
 5807 007a FB6E     		ldr	r3, [r7, #108]
 5808 007c 002B     		cmp	r3, #0
 5809 007e 06D0     		beq	.L244
 5810              		.loc 1 1233 3 is_stmt 0 discriminator 1
 5811 0080 234B     		ldr	r3, .L246+28
 5812 0082 1E4A     		ldr	r2, .L246+8
 5813 0084 40F2D141 		movw	r1, #1233
 5814 0088 1D48     		ldr	r0, .L246+12
 5815 008a FFF7FEFF 		bl	__assert_func
 5816              	.L244:
1234:Src/app.c     **** 
1235:Src/app.c     ****   packing.Buffer0Activation = ENABLE;
 5817              		.loc 1 1235 29 is_stmt 1
 5818 008e 0123     		movs	r3, #1
 5819 0090 87F84830 		strb	r3, [r7, #72]
1236:Src/app.c     ****   packing.Buffer0Mode       = GFXMMU_PACKING_MSB_REMOVE;
 5820              		.loc 1 1236 29
 5821 0094 0023     		movs	r3, #0
 5822 0096 FB64     		str	r3, [r7, #76]
1237:Src/app.c     ****   packing.DefaultAlpha      = 0xff;
 5823              		.loc 1 1237 29
 5824 0098 FF23     		movs	r3, #255
 5825 009a BB66     		str	r3, [r7, #104]
1238:Src/app.c     ****   ret = HAL_GFXMMU_ConfigPacking(&hgfxmmu, &packing);
 5826              		.loc 1 1238 9
 5827 009c 07F14803 		add	r3, r7, #72
 5828 00a0 1946     		mov	r1, r3
 5829 00a2 1948     		ldr	r0, .L246+20
 5830 00a4 FFF7FEFF 		bl	HAL_GFXMMU_ConfigPacking
 5831 00a8 0346     		mov	r3, r0
 5832              		.loc 1 1238 7 discriminator 1
 5833 00aa FB66     		str	r3, [r7, #108]
1239:Src/app.c     ****   assert(ret == HAL_OK);
 5834              		.loc 1 1239 3
 5835 00ac FB6E     		ldr	r3, [r7, #108]
 5836 00ae 002B     		cmp	r3, #0
 5837 00b0 06D0     		beq	.L245
 5838              		.loc 1 1239 3 is_stmt 0 discriminator 1
 5839 00b2 174B     		ldr	r3, .L246+28
 5840 00b4 114A     		ldr	r2, .L246+8
 5841 00b6 40F2D741 		movw	r1, #1239
 5842 00ba 1148     		ldr	r0, .L246+12
 5843 00bc FFF7FEFF 		bl	__assert_func
 5844              	.L245:
1240:Src/app.c     **** 
1241:Src/app.c     ****   cl = nema_cl_create_sized(8192);
 5845              		.loc 1 1241 8 is_stmt 1
 5846 00c0 144C     		ldr	r4, .L246+32
 5847 00c2 3B46     		mov	r3, r7
 5848 00c4 4FF40051 		mov	r1, #8192
 5849 00c8 1846     		mov	r0, r3
 5850 00ca FFF7FEFF 		bl	nema_cl_create_sized
ARM GAS  /tmp/ccrysqwW.s 			page 150


 5851 00ce 2546     		mov	r5, r4
 5852 00d0 3C46     		mov	r4, r7
 5853 00d2 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 5854 00d4 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 5855 00d6 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 5856 00d8 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 5857 00da 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 5858 00dc 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 5859 00de 94E80700 		ldm	r4, {r0, r1, r2}
 5860 00e2 85E80700 		stm	r5, {r0, r1, r2}
1242:Src/app.c     ****   nema_cl_bind_circular(&cl);
 5861              		.loc 1 1242 3
 5862 00e6 0B48     		ldr	r0, .L246+32
 5863 00e8 FFF7FEFF 		bl	nema_cl_bind_circular
1243:Src/app.c     **** }
 5864              		.loc 1 1243 1
 5865 00ec 00BF     		nop
 5866 00ee 7037     		adds	r7, r7, #112
 5867              		.cfi_def_cfa_offset 16
 5868 00f0 BD46     		mov	sp, r7
 5869              		.cfi_def_cfa_register 13
 5870              		@ sp needed
 5871 00f2 B0BD     		pop	{r4, r5, r7, pc}
 5872              	.L247:
 5873              		.align	2
 5874              	.L246:
 5875 00f4 78020000 		.word	.LC30
 5876 00f8 34020000 		.word	.LC29
 5877 00fc 00000000 		.word	__func__.9
 5878 0100 38000000 		.word	.LC7
 5879 0104 84020000 		.word	.LC31
 5880 0108 00000000 		.word	hgfxmmu
 5881 010c 00000358 		.word	1476591616
 5882 0110 6C000000 		.word	.LC11
 5883 0114 00000000 		.word	cl
 5884              		.cfi_endproc
 5885              	.LFE7399:
 5887              		.section	.text.ld_compute_rotation,"ax",%progbits
 5888              		.align	1
 5889              		.syntax unified
 5890              		.thumb
 5891              		.thumb_func
 5893              	ld_compute_rotation:
 5894              	.LFB7400:
1244:Src/app.c     **** #endif
1245:Src/app.c     **** 
1246:Src/app.c     **** static float ld_compute_rotation(ld_point_t lm[LD_LANDMARK_NB])
1247:Src/app.c     **** {
 5895              		.loc 1 1247 1
 5896              		.cfi_startproc
 5897              		@ args = 0, pretend = 0, frame = 32
 5898              		@ frame_needed = 1, uses_anonymous_args = 0
 5899 0000 80B5     		push	{r7, lr}
 5900              		.cfi_def_cfa_offset 8
 5901              		.cfi_offset 7, -8
 5902              		.cfi_offset 14, -4
 5903 0002 88B0     		sub	sp, sp, #32
ARM GAS  /tmp/ccrysqwW.s 			page 151


 5904              		.cfi_def_cfa_offset 40
 5905 0004 00AF     		add	r7, sp, #0
 5906              		.cfi_def_cfa_register 7
 5907 0006 7860     		str	r0, [r7, #4]
1248:Src/app.c     ****   float x0, y0, x1, y1;
1249:Src/app.c     ****   float rotation;
1250:Src/app.c     **** 
1251:Src/app.c     ****   x0 = lm[0].x;
 5908              		.loc 1 1251 6
 5909 0008 7B68     		ldr	r3, [r7, #4]
 5910 000a 1B68     		ldr	r3, [r3]	@ float
 5911 000c FB61     		str	r3, [r7, #28]	@ float
1252:Src/app.c     ****   y0 = lm[0].y;
 5912              		.loc 1 1252 6
 5913 000e 7B68     		ldr	r3, [r7, #4]
 5914 0010 5B68     		ldr	r3, [r3, #4]	@ float
 5915 0012 BB61     		str	r3, [r7, #24]	@ float
1253:Src/app.c     ****   x1 = lm[9].x;
 5916              		.loc 1 1253 10
 5917 0014 7B68     		ldr	r3, [r7, #4]
 5918 0016 4833     		adds	r3, r3, #72
 5919              		.loc 1 1253 6
 5920 0018 1B68     		ldr	r3, [r3]	@ float
 5921 001a 7B61     		str	r3, [r7, #20]	@ float
1254:Src/app.c     ****   y1 = lm[9].y;
 5922              		.loc 1 1254 10
 5923 001c 7B68     		ldr	r3, [r7, #4]
 5924 001e 4833     		adds	r3, r3, #72
 5925              		.loc 1 1254 6
 5926 0020 5B68     		ldr	r3, [r3, #4]	@ float
 5927 0022 3B61     		str	r3, [r7, #16]	@ float
1255:Src/app.c     **** 
1256:Src/app.c     ****   rotation = M_PI * 0.5 - atan2f(-(y1 - y0), x1 - x0);
 5928              		.loc 1 1256 39
 5929 0024 97ED047A 		vldr.32	s14, [r7, #16]
 5930 0028 D7ED067A 		vldr.32	s15, [r7, #24]
 5931 002c 77EE677A 		vsub.f32	s15, s14, s15
 5932              		.loc 1 1256 27
 5933 0030 F1EE676A 		vneg.f32	s13, s15
 5934 0034 97ED057A 		vldr.32	s14, [r7, #20]
 5935 0038 D7ED077A 		vldr.32	s15, [r7, #28]
 5936 003c 77EE677A 		vsub.f32	s15, s14, s15
 5937 0040 F0EE670A 		vmov.f32	s1, s15
 5938 0044 B0EE660A 		vmov.f32	s0, s13
 5939 0048 FFF7FEFF 		bl	atan2f
 5940 004c F0EE407A 		vmov.f32	s15, s0
 5941              		.loc 1 1256 27 is_stmt 0 discriminator 1
 5942 0050 B7EEE77A 		vcvt.f64.f32	d7, s15
 5943              		.loc 1 1256 25 is_stmt 1 discriminator 1
 5944 0054 9FED0C6B 		vldr.64	d6, .L250
 5945 0058 36EE477B 		vsub.f64	d7, d6, d7
 5946              		.loc 1 1256 12 discriminator 1
 5947 005c F7EEC77B 		vcvt.f32.f64	s15, d7
 5948 0060 C7ED037A 		vstr.32	s15, [r7, #12]
1257:Src/app.c     **** 
1258:Src/app.c     ****   return pd_cook_rotation(pd_normalize_angle(rotation));
 5949              		.loc 1 1258 10
ARM GAS  /tmp/ccrysqwW.s 			page 152


 5950 0064 97ED030A 		vldr.32	s0, [r7, #12]
 5951 0068 FFF7FEFF 		bl	pd_normalize_angle
 5952 006c F0EE407A 		vmov.f32	s15, s0
 5953              		.loc 1 1258 10 is_stmt 0 discriminator 1
 5954 0070 B0EE670A 		vmov.f32	s0, s15
 5955 0074 FFF7FEFF 		bl	pd_cook_rotation
 5956 0078 F0EE407A 		vmov.f32	s15, s0
1259:Src/app.c     **** }
 5957              		.loc 1 1259 1 is_stmt 1
 5958 007c B0EE670A 		vmov.f32	s0, s15
 5959 0080 2037     		adds	r7, r7, #32
 5960              		.cfi_def_cfa_offset 8
 5961 0082 BD46     		mov	sp, r7
 5962              		.cfi_def_cfa_register 13
 5963              		@ sp needed
 5964 0084 80BD     		pop	{r7, pc}
 5965              	.L251:
 5966 0086 00BF     		.align	3
 5967              	.L250:
 5968 0088 182D4454 		.word	1413754136
 5969 008c FB21F93F 		.word	1073291771
 5970              		.cfi_endproc
 5971              	.LFE7400:
 5973              		.section	.rodata
 5974 0297 00       		.align	2
 5975              	.LC1:
 5976 0298 00000000 		.word	0
 5977 029c 05000000 		.word	5
 5978 02a0 09000000 		.word	9
 5979 02a4 0D000000 		.word	13
 5980 02a8 11000000 		.word	17
 5981 02ac 01000000 		.word	1
 5982 02b0 02000000 		.word	2
 5983              		.align	2
 5984              	.LC2:
 5985 02b4 00000000 		.word	0
 5986 02b8 01000000 		.word	1
 5987 02bc 02000000 		.word	2
 5988 02c0 03000000 		.word	3
 5989 02c4 05000000 		.word	5
 5990 02c8 06000000 		.word	6
 5991 02cc 09000000 		.word	9
 5992 02d0 0A000000 		.word	10
 5993 02d4 0D000000 		.word	13
 5994 02d8 0E000000 		.word	14
 5995 02dc 11000000 		.word	17
 5996 02e0 12000000 		.word	18
 5997              		.section	.text.ld_to_roi,"ax",%progbits
 5998              		.align	1
 5999              		.syntax unified
 6000              		.thumb
 6001              		.thumb_func
 6003              	ld_to_roi:
 6004              	.LFB7401:
1260:Src/app.c     **** 
1261:Src/app.c     **** static void ld_to_roi(ld_point_t lm[LD_LANDMARK_NB], roi_t *roi, pd_pp_box_t *next_pd)
1262:Src/app.c     **** {
ARM GAS  /tmp/ccrysqwW.s 			page 153


 6005              		.loc 1 1262 1
 6006              		.cfi_startproc
 6007              		@ args = 0, pretend = 0, frame = 112
 6008              		@ frame_needed = 1, uses_anonymous_args = 0
 6009 0000 B0B5     		push	{r4, r5, r7, lr}
 6010              		.cfi_def_cfa_offset 16
 6011              		.cfi_offset 4, -16
 6012              		.cfi_offset 5, -12
 6013              		.cfi_offset 7, -8
 6014              		.cfi_offset 14, -4
 6015 0002 9CB0     		sub	sp, sp, #112
 6016              		.cfi_def_cfa_offset 128
 6017 0004 00AF     		add	r7, sp, #0
 6018              		.cfi_def_cfa_register 7
 6019 0006 F860     		str	r0, [r7, #12]
 6020 0008 B960     		str	r1, [r7, #8]
 6021 000a 7A60     		str	r2, [r7, #4]
1263:Src/app.c     ****   const int pd_to_ld_idx[AI_PD_MODEL_PP_NB_KEYPOINTS] = {0, 5, 9, 13, 17, 1, 2};
 6022              		.loc 1 1263 13
 6023 000c 8A4B     		ldr	r3, .L277
 6024 000e 07F14004 		add	r4, r7, #64
 6025 0012 1D46     		mov	r5, r3
 6026 0014 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 6027 0016 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 6028 0018 95E80700 		ldm	r5, {r0, r1, r2}
 6029 001c 84E80700 		stm	r4, {r0, r1, r2}
1264:Src/app.c     ****   const int indices[] = {0, 1, 2, 3, 5, 6, 9, 10, 13, 14, 17, 18};
 6030              		.loc 1 1264 13
 6031 0020 864B     		ldr	r3, .L277+4
 6032 0022 07F11004 		add	r4, r7, #16
 6033 0026 1D46     		mov	r5, r3
 6034 0028 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 6035 002a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 6036 002c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 6037 002e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 6038 0030 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 6039 0034 84E80F00 		stm	r4, {r0, r1, r2, r3}
1265:Src/app.c     ****   float max_x, max_y, min_x, min_y;
1266:Src/app.c     ****   int i;
1267:Src/app.c     **** 
1268:Src/app.c     ****   max_x = max_y = -10000;
 6040              		.loc 1 1268 17
 6041 0038 814B     		ldr	r3, .L277+8
 6042 003a BB66     		str	r3, [r7, #104]	@ float
 6043              		.loc 1 1268 9
 6044 003c BB6E     		ldr	r3, [r7, #104]	@ float
 6045 003e FB66     		str	r3, [r7, #108]	@ float
1269:Src/app.c     ****   min_x = min_y =  10000;
 6046              		.loc 1 1269 17
 6047 0040 804B     		ldr	r3, .L277+12
 6048 0042 3B66     		str	r3, [r7, #96]	@ float
 6049              		.loc 1 1269 9
 6050 0044 3B6E     		ldr	r3, [r7, #96]	@ float
 6051 0046 7B66     		str	r3, [r7, #100]	@ float
1270:Src/app.c     **** 
1271:Src/app.c     ****   roi->rotation = ld_compute_rotation(lm);
 6052              		.loc 1 1271 19
ARM GAS  /tmp/ccrysqwW.s 			page 154


 6053 0048 F868     		ldr	r0, [r7, #12]
 6054 004a FFF7FEFF 		bl	ld_compute_rotation
 6055 004e F0EE407A 		vmov.f32	s15, s0
 6056              		.loc 1 1271 17 discriminator 1
 6057 0052 BB68     		ldr	r3, [r7, #8]
 6058 0054 C3ED047A 		vstr.32	s15, [r3, #16]
1272:Src/app.c     **** 
1273:Src/app.c     ****   for (i = 0; i < ARRAY_NB(indices); i++) {
 6059              		.loc 1 1273 10
 6060 0058 0023     		movs	r3, #0
 6061 005a FB65     		str	r3, [r7, #92]
 6062              		.loc 1 1273 3
 6063 005c 7EE0     		b	.L253
 6064              	.L266:
1274:Src/app.c     ****     max_x = MAX(max_x, lm[indices[i]].x);
 6065              		.loc 1 1274 13
 6066 005e FB6D     		ldr	r3, [r7, #92]
 6067 0060 9B00     		lsls	r3, r3, #2
 6068 0062 7033     		adds	r3, r3, #112
 6069 0064 3B44     		add	r3, r3, r7
 6070 0066 53F8603C 		ldr	r3, [r3, #-96]
 6071 006a DB00     		lsls	r3, r3, #3
 6072 006c FA68     		ldr	r2, [r7, #12]
 6073 006e 1344     		add	r3, r3, r2
 6074 0070 D3ED007A 		vldr.32	s15, [r3]
 6075 0074 97ED1B7A 		vldr.32	s14, [r7, #108]
 6076 0078 B4EEE77A 		vcmpe.f32	s14, s15
 6077 007c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 6078 0080 01DD     		ble	.L273
 6079              		.loc 1 1274 13 is_stmt 0 discriminator 1
 6080 0082 FB6E     		ldr	r3, [r7, #108]	@ float
 6081 0084 09E0     		b	.L256
 6082              	.L273:
 6083              		.loc 1 1274 13 discriminator 2
 6084 0086 FB6D     		ldr	r3, [r7, #92]
 6085 0088 9B00     		lsls	r3, r3, #2
 6086 008a 7033     		adds	r3, r3, #112
 6087 008c 3B44     		add	r3, r3, r7
 6088 008e 53F8603C 		ldr	r3, [r3, #-96]
 6089 0092 DB00     		lsls	r3, r3, #3
 6090 0094 FA68     		ldr	r2, [r7, #12]
 6091 0096 1344     		add	r3, r3, r2
 6092 0098 1B68     		ldr	r3, [r3]	@ float
 6093              	.L256:
 6094              		.loc 1 1274 11 is_stmt 1 discriminator 4
 6095 009a FB66     		str	r3, [r7, #108]	@ float
1275:Src/app.c     ****     max_y = MAX(max_y, lm[indices[i]].y);
 6096              		.loc 1 1275 13
 6097 009c FB6D     		ldr	r3, [r7, #92]
 6098 009e 9B00     		lsls	r3, r3, #2
 6099 00a0 7033     		adds	r3, r3, #112
 6100 00a2 3B44     		add	r3, r3, r7
 6101 00a4 53F8603C 		ldr	r3, [r3, #-96]
 6102 00a8 DB00     		lsls	r3, r3, #3
 6103 00aa FA68     		ldr	r2, [r7, #12]
 6104 00ac 1344     		add	r3, r3, r2
 6105 00ae D3ED017A 		vldr.32	s15, [r3, #4]
ARM GAS  /tmp/ccrysqwW.s 			page 155


 6106 00b2 97ED1A7A 		vldr.32	s14, [r7, #104]
 6107 00b6 B4EEE77A 		vcmpe.f32	s14, s15
 6108 00ba F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 6109 00be 01DD     		ble	.L274
 6110              		.loc 1 1275 13 is_stmt 0 discriminator 1
 6111 00c0 BB6E     		ldr	r3, [r7, #104]	@ float
 6112 00c2 09E0     		b	.L259
 6113              	.L274:
 6114              		.loc 1 1275 13 discriminator 2
 6115 00c4 FB6D     		ldr	r3, [r7, #92]
 6116 00c6 9B00     		lsls	r3, r3, #2
 6117 00c8 7033     		adds	r3, r3, #112
 6118 00ca 3B44     		add	r3, r3, r7
 6119 00cc 53F8603C 		ldr	r3, [r3, #-96]
 6120 00d0 DB00     		lsls	r3, r3, #3
 6121 00d2 FA68     		ldr	r2, [r7, #12]
 6122 00d4 1344     		add	r3, r3, r2
 6123 00d6 5B68     		ldr	r3, [r3, #4]	@ float
 6124              	.L259:
 6125              		.loc 1 1275 11 is_stmt 1 discriminator 4
 6126 00d8 BB66     		str	r3, [r7, #104]	@ float
1276:Src/app.c     ****     min_x = MIN(min_x, lm[indices[i]].x);
 6127              		.loc 1 1276 13
 6128 00da FB6D     		ldr	r3, [r7, #92]
 6129 00dc 9B00     		lsls	r3, r3, #2
 6130 00de 7033     		adds	r3, r3, #112
 6131 00e0 3B44     		add	r3, r3, r7
 6132 00e2 53F8603C 		ldr	r3, [r3, #-96]
 6133 00e6 DB00     		lsls	r3, r3, #3
 6134 00e8 FA68     		ldr	r2, [r7, #12]
 6135 00ea 1344     		add	r3, r3, r2
 6136 00ec D3ED007A 		vldr.32	s15, [r3]
 6137 00f0 97ED197A 		vldr.32	s14, [r7, #100]
 6138 00f4 B4EEE77A 		vcmpe.f32	s14, s15
 6139 00f8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 6140 00fc 01D5     		bpl	.L275
 6141              		.loc 1 1276 13 is_stmt 0 discriminator 1
 6142 00fe 7B6E     		ldr	r3, [r7, #100]	@ float
 6143 0100 09E0     		b	.L262
 6144              	.L275:
 6145              		.loc 1 1276 13 discriminator 2
 6146 0102 FB6D     		ldr	r3, [r7, #92]
 6147 0104 9B00     		lsls	r3, r3, #2
 6148 0106 7033     		adds	r3, r3, #112
 6149 0108 3B44     		add	r3, r3, r7
 6150 010a 53F8603C 		ldr	r3, [r3, #-96]
 6151 010e DB00     		lsls	r3, r3, #3
 6152 0110 FA68     		ldr	r2, [r7, #12]
 6153 0112 1344     		add	r3, r3, r2
 6154 0114 1B68     		ldr	r3, [r3]	@ float
 6155              	.L262:
 6156              		.loc 1 1276 11 is_stmt 1 discriminator 4
 6157 0116 7B66     		str	r3, [r7, #100]	@ float
1277:Src/app.c     ****     min_y = MIN(min_y, lm[indices[i]].y);
 6158              		.loc 1 1277 13
 6159 0118 FB6D     		ldr	r3, [r7, #92]
 6160 011a 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccrysqwW.s 			page 156


 6161 011c 7033     		adds	r3, r3, #112
 6162 011e 3B44     		add	r3, r3, r7
 6163 0120 53F8603C 		ldr	r3, [r3, #-96]
 6164 0124 DB00     		lsls	r3, r3, #3
 6165 0126 FA68     		ldr	r2, [r7, #12]
 6166 0128 1344     		add	r3, r3, r2
 6167 012a D3ED017A 		vldr.32	s15, [r3, #4]
 6168 012e 97ED187A 		vldr.32	s14, [r7, #96]
 6169 0132 B4EEE77A 		vcmpe.f32	s14, s15
 6170 0136 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 6171 013a 01D5     		bpl	.L276
 6172              		.loc 1 1277 13 is_stmt 0 discriminator 1
 6173 013c 3B6E     		ldr	r3, [r7, #96]	@ float
 6174 013e 09E0     		b	.L265
 6175              	.L276:
 6176              		.loc 1 1277 13 discriminator 2
 6177 0140 FB6D     		ldr	r3, [r7, #92]
 6178 0142 9B00     		lsls	r3, r3, #2
 6179 0144 7033     		adds	r3, r3, #112
 6180 0146 3B44     		add	r3, r3, r7
 6181 0148 53F8603C 		ldr	r3, [r3, #-96]
 6182 014c DB00     		lsls	r3, r3, #3
 6183 014e FA68     		ldr	r2, [r7, #12]
 6184 0150 1344     		add	r3, r3, r2
 6185 0152 5B68     		ldr	r3, [r3, #4]	@ float
 6186              	.L265:
 6187              		.loc 1 1277 11 is_stmt 1 discriminator 4
 6188 0154 3B66     		str	r3, [r7, #96]	@ float
1273:Src/app.c     ****     max_x = MAX(max_x, lm[indices[i]].x);
 6189              		.loc 1 1273 39 discriminator 2
 6190 0156 FB6D     		ldr	r3, [r7, #92]
 6191 0158 0133     		adds	r3, r3, #1
 6192 015a FB65     		str	r3, [r7, #92]
 6193              	.L253:
1273:Src/app.c     ****     max_x = MAX(max_x, lm[indices[i]].x);
 6194              		.loc 1 1273 17 discriminator 1
 6195 015c FB6D     		ldr	r3, [r7, #92]
 6196 015e 0B2B     		cmp	r3, #11
 6197 0160 7FF67DAF 		bls	.L266
1278:Src/app.c     ****   }
1279:Src/app.c     **** 
1280:Src/app.c     ****   roi->cx = (max_x + min_x) / 2;
 6198              		.loc 1 1280 20
 6199 0164 97ED1B7A 		vldr.32	s14, [r7, #108]
 6200 0168 D7ED197A 		vldr.32	s15, [r7, #100]
 6201 016c 37EE277A 		vadd.f32	s14, s14, s15
 6202              		.loc 1 1280 29
 6203 0170 F0EE006A 		vmov.f32	s13, #2.0e+0
 6204 0174 C7EE267A 		vdiv.f32	s15, s14, s13
 6205              		.loc 1 1280 11
 6206 0178 BB68     		ldr	r3, [r7, #8]
 6207 017a C3ED007A 		vstr.32	s15, [r3]
1281:Src/app.c     ****   roi->cy = (max_y + min_y) / 2;
 6208              		.loc 1 1281 20
 6209 017e 97ED1A7A 		vldr.32	s14, [r7, #104]
 6210 0182 D7ED187A 		vldr.32	s15, [r7, #96]
 6211 0186 37EE277A 		vadd.f32	s14, s14, s15
ARM GAS  /tmp/ccrysqwW.s 			page 157


 6212              		.loc 1 1281 29
 6213 018a F0EE006A 		vmov.f32	s13, #2.0e+0
 6214 018e C7EE267A 		vdiv.f32	s15, s14, s13
 6215              		.loc 1 1281 11
 6216 0192 BB68     		ldr	r3, [r7, #8]
 6217 0194 C3ED017A 		vstr.32	s15, [r3, #4]
1282:Src/app.c     ****   roi->w = (max_x - min_x);
 6218              		.loc 1 1282 19
 6219 0198 97ED1B7A 		vldr.32	s14, [r7, #108]
 6220 019c D7ED197A 		vldr.32	s15, [r7, #100]
 6221 01a0 77EE677A 		vsub.f32	s15, s14, s15
 6222              		.loc 1 1282 10
 6223 01a4 BB68     		ldr	r3, [r7, #8]
 6224 01a6 C3ED027A 		vstr.32	s15, [r3, #8]
1283:Src/app.c     ****   roi->h = (max_y - min_y);
 6225              		.loc 1 1283 19
 6226 01aa 97ED1A7A 		vldr.32	s14, [r7, #104]
 6227 01ae D7ED187A 		vldr.32	s15, [r7, #96]
 6228 01b2 77EE677A 		vsub.f32	s15, s14, s15
 6229              		.loc 1 1283 10
 6230 01b6 BB68     		ldr	r3, [r7, #8]
 6231 01b8 C3ED037A 		vstr.32	s15, [r3, #12]
1284:Src/app.c     **** 
1285:Src/app.c     ****   next_pd->x_center = roi->cx;
 6232              		.loc 1 1285 26
 6233 01bc BB68     		ldr	r3, [r7, #8]
 6234 01be 1A68     		ldr	r2, [r3]	@ float
 6235              		.loc 1 1285 21
 6236 01c0 7B68     		ldr	r3, [r7, #4]
 6237 01c2 5A60     		str	r2, [r3, #4]	@ float
1286:Src/app.c     ****   next_pd->y_center = roi->cy;
 6238              		.loc 1 1286 26
 6239 01c4 BB68     		ldr	r3, [r7, #8]
 6240 01c6 5A68     		ldr	r2, [r3, #4]	@ float
 6241              		.loc 1 1286 21
 6242 01c8 7B68     		ldr	r3, [r7, #4]
 6243 01ca 9A60     		str	r2, [r3, #8]	@ float
1287:Src/app.c     ****   next_pd->width = roi->w;
 6244              		.loc 1 1287 23
 6245 01cc BB68     		ldr	r3, [r7, #8]
 6246 01ce 9A68     		ldr	r2, [r3, #8]	@ float
 6247              		.loc 1 1287 18
 6248 01d0 7B68     		ldr	r3, [r7, #4]
 6249 01d2 DA60     		str	r2, [r3, #12]	@ float
1288:Src/app.c     ****   next_pd->height = roi->h;
 6250              		.loc 1 1288 24
 6251 01d4 BB68     		ldr	r3, [r7, #8]
 6252 01d6 DA68     		ldr	r2, [r3, #12]	@ float
 6253              		.loc 1 1288 19
 6254 01d8 7B68     		ldr	r3, [r7, #4]
 6255 01da 1A61     		str	r2, [r3, #16]	@ float
1289:Src/app.c     ****   for (i = 0; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++) {
 6256              		.loc 1 1289 10
 6257 01dc 0023     		movs	r3, #0
 6258 01de FB65     		str	r3, [r7, #92]
 6259              		.loc 1 1289 3
 6260 01e0 22E0     		b	.L267
ARM GAS  /tmp/ccrysqwW.s 			page 158


 6261              	.L268:
1290:Src/app.c     ****     next_pd->pKps[i].x = lm[pd_to_ld_idx[i]].x;
 6262              		.loc 1 1290 41
 6263 01e2 FB6D     		ldr	r3, [r7, #92]
 6264 01e4 9B00     		lsls	r3, r3, #2
 6265 01e6 7033     		adds	r3, r3, #112
 6266 01e8 3B44     		add	r3, r3, r7
 6267 01ea 53F8303C 		ldr	r3, [r3, #-48]
 6268              		.loc 1 1290 28
 6269 01ee DB00     		lsls	r3, r3, #3
 6270 01f0 FA68     		ldr	r2, [r7, #12]
 6271 01f2 1A44     		add	r2, r2, r3
 6272              		.loc 1 1290 12
 6273 01f4 7B68     		ldr	r3, [r7, #4]
 6274 01f6 5969     		ldr	r1, [r3, #20]
 6275              		.loc 1 1290 18
 6276 01f8 FB6D     		ldr	r3, [r7, #92]
 6277 01fa DB00     		lsls	r3, r3, #3
 6278 01fc 0B44     		add	r3, r3, r1
 6279              		.loc 1 1290 45
 6280 01fe 1268     		ldr	r2, [r2]	@ float
 6281              		.loc 1 1290 24
 6282 0200 1A60     		str	r2, [r3]	@ float
1291:Src/app.c     ****     next_pd->pKps[i].y = lm[pd_to_ld_idx[i]].y;
 6283              		.loc 1 1291 41
 6284 0202 FB6D     		ldr	r3, [r7, #92]
 6285 0204 9B00     		lsls	r3, r3, #2
 6286 0206 7033     		adds	r3, r3, #112
 6287 0208 3B44     		add	r3, r3, r7
 6288 020a 53F8303C 		ldr	r3, [r3, #-48]
 6289              		.loc 1 1291 28
 6290 020e DB00     		lsls	r3, r3, #3
 6291 0210 FA68     		ldr	r2, [r7, #12]
 6292 0212 1A44     		add	r2, r2, r3
 6293              		.loc 1 1291 12
 6294 0214 7B68     		ldr	r3, [r7, #4]
 6295 0216 5969     		ldr	r1, [r3, #20]
 6296              		.loc 1 1291 18
 6297 0218 FB6D     		ldr	r3, [r7, #92]
 6298 021a DB00     		lsls	r3, r3, #3
 6299 021c 0B44     		add	r3, r3, r1
 6300              		.loc 1 1291 45
 6301 021e 5268     		ldr	r2, [r2, #4]	@ float
 6302              		.loc 1 1291 24
 6303 0220 5A60     		str	r2, [r3, #4]	@ float
1289:Src/app.c     ****   for (i = 0; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++) {
 6304              		.loc 1 1289 49 discriminator 3
 6305 0222 FB6D     		ldr	r3, [r7, #92]
 6306 0224 0133     		adds	r3, r3, #1
 6307 0226 FB65     		str	r3, [r7, #92]
 6308              	.L267:
1289:Src/app.c     ****   for (i = 0; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++) {
 6309              		.loc 1 1289 17 discriminator 1
 6310 0228 FB6D     		ldr	r3, [r7, #92]
 6311 022a 062B     		cmp	r3, #6
 6312 022c D9DD     		ble	.L268
1292:Src/app.c     ****   }
ARM GAS  /tmp/ccrysqwW.s 			page 159


1293:Src/app.c     **** }
 6313              		.loc 1 1293 1
 6314 022e 00BF     		nop
 6315 0230 00BF     		nop
 6316 0232 7037     		adds	r7, r7, #112
 6317              		.cfi_def_cfa_offset 16
 6318 0234 BD46     		mov	sp, r7
 6319              		.cfi_def_cfa_register 13
 6320              		@ sp needed
 6321 0236 B0BD     		pop	{r4, r5, r7, pc}
 6322              	.L278:
 6323              		.align	2
 6324              	.L277:
 6325 0238 98020000 		.word	.LC1
 6326 023c B4020000 		.word	.LC2
 6327 0240 00401CC6 		.word	-971227136
 6328 0244 00401C46 		.word	1176256512
 6329              		.cfi_endproc
 6330              	.LFE7401:
 6332              		.section	.text.compute_next_roi,"ax",%progbits
 6333              		.align	1
 6334              		.syntax unified
 6335              		.thumb
 6336              		.thumb_func
 6338              	compute_next_roi:
 6339              	.LFB7402:
1294:Src/app.c     **** 
1295:Src/app.c     **** static void compute_next_roi(roi_t *src, ld_point_t lm_in[LD_LANDMARK_NB], roi_t *next, pd_pp_box_t
1296:Src/app.c     **** {
 6340              		.loc 1 1296 1
 6341              		.cfi_startproc
 6342              		@ args = 0, pretend = 0, frame = 3800
 6343              		@ frame_needed = 1, uses_anonymous_args = 0
 6344 0000 B0B5     		push	{r4, r5, r7, lr}
 6345              		.cfi_def_cfa_offset 16
 6346              		.cfi_offset 4, -16
 6347              		.cfi_offset 5, -12
 6348              		.cfi_offset 7, -8
 6349              		.cfi_offset 14, -4
 6350 0002 ADF6D86D 		subw	sp, sp, #3800
 6351              		.cfi_def_cfa_offset 3816
 6352 0006 00AF     		add	r7, sp, #0
 6353              		.cfi_def_cfa_register 7
 6354 0008 07F6D864 		addw	r4, r7, #3800
 6355 000c A4F6CC64 		subw	r4, r4, #3788
 6356 0010 2060     		str	r0, [r4]
 6357 0012 07F6D860 		addw	r0, r7, #3800
 6358 0016 A0F56D60 		sub	r0, r0, #3792
 6359 001a 0160     		str	r1, [r0]
 6360 001c 07F6D861 		addw	r1, r7, #3800
 6361 0020 A1F6D461 		subw	r1, r1, #3796
 6362 0024 0A60     		str	r2, [r1]
 6363 0026 07F6D862 		addw	r2, r7, #3800
 6364 002a A2F6D862 		subw	r2, r2, #3800
 6365 002e 1360     		str	r3, [r2]
1297:Src/app.c     ****   const float shift_x = 0;
 6366              		.loc 1 1297 15
ARM GAS  /tmp/ccrysqwW.s 			page 160


 6367 0030 4FF00003 		mov	r3, #0
 6368 0034 07F56D62 		add	r2, r7, #3792
 6369 0038 1360     		str	r3, [r2]	@ float
1298:Src/app.c     ****   const float shift_y = -0.1;
 6370              		.loc 1 1298 15
 6371 003a 304B     		ldr	r3, .L282
 6372 003c 07F6CC62 		addw	r2, r7, #3788
 6373 0040 1360     		str	r3, [r2]	@ float
1299:Src/app.c     ****   const float scale = 2.0;
 6374              		.loc 1 1299 15
 6375 0042 4FF08043 		mov	r3, #1073741824
 6376 0046 07F6C862 		addw	r2, r7, #3784
 6377 004a 1360     		str	r3, [r2]	@ float
1300:Src/app.c     ****   ld_point_t lm[LD_LANDMARK_NB];
1301:Src/app.c     ****   roi_t roi;
1302:Src/app.c     ****   int i;
1303:Src/app.c     **** 
1304:Src/app.c     ****   for (i = 0; i < LD_LANDMARK_NB; i++)
 6378              		.loc 1 1304 10
 6379 004c 0023     		movs	r3, #0
 6380 004e C7F8D43E 		str	r3, [r7, #3796]
 6381              		.loc 1 1304 3
 6382 0052 1AE0     		b	.L280
 6383              	.L281:
1305:Src/app.c     ****     decode_ld_landmark(src, &lm_in[i], &lm[i]);
 6384              		.loc 1 1305 35
 6385 0054 D7F8D43E 		ldr	r3, [r7, #3796]
 6386 0058 DB00     		lsls	r3, r3, #3
 6387              		.loc 1 1305 5
 6388 005a 07F6D862 		addw	r2, r7, #3800
 6389 005e A2F56D62 		sub	r2, r2, #3792
 6390 0062 1268     		ldr	r2, [r2]
 6391 0064 D118     		adds	r1, r2, r3
 6392 0066 07F12802 		add	r2, r7, #40
 6393 006a D7F8D43E 		ldr	r3, [r7, #3796]
 6394 006e DB00     		lsls	r3, r3, #3
 6395 0070 1A44     		add	r2, r2, r3
 6396 0072 07F6D863 		addw	r3, r7, #3800
 6397 0076 A3F6CC63 		subw	r3, r3, #3788
 6398 007a 1868     		ldr	r0, [r3]
 6399 007c FFF7FEFF 		bl	decode_ld_landmark
1304:Src/app.c     ****     decode_ld_landmark(src, &lm_in[i], &lm[i]);
 6400              		.loc 1 1304 36 discriminator 3
 6401 0080 D7F8D43E 		ldr	r3, [r7, #3796]
 6402 0084 0133     		adds	r3, r3, #1
 6403 0086 C7F8D43E 		str	r3, [r7, #3796]
 6404              	.L280:
1304:Src/app.c     ****     decode_ld_landmark(src, &lm_in[i], &lm[i]);
 6405              		.loc 1 1304 17 discriminator 1
 6406 008a D7F8D43E 		ldr	r3, [r7, #3796]
 6407 008e B3F5EA7F 		cmp	r3, #468
 6408 0092 DFDB     		blt	.L281
1306:Src/app.c     **** 
1307:Src/app.c     ****   ld_to_roi(lm, &roi, next_pd);
 6409              		.loc 1 1307 3
 6410 0094 07F6D863 		addw	r3, r7, #3800
 6411 0098 A3F6D863 		subw	r3, r3, #3800
ARM GAS  /tmp/ccrysqwW.s 			page 161


 6412 009c 07F11401 		add	r1, r7, #20
 6413 00a0 07F12800 		add	r0, r7, #40
 6414 00a4 1A68     		ldr	r2, [r3]
 6415 00a6 FFF7FEFF 		bl	ld_to_roi
1308:Src/app.c     ****   roi_shift_and_scale(&roi, shift_x, shift_y, scale, scale);
 6416              		.loc 1 1308 3
 6417 00aa 07F11403 		add	r3, r7, #20
 6418 00ae 07F6C862 		addw	r2, r7, #3784
 6419 00b2 D2ED001A 		vldr.32	s3, [r2]
 6420 00b6 07F6C862 		addw	r2, r7, #3784
 6421 00ba 92ED001A 		vldr.32	s2, [r2]
 6422 00be 07F6CC62 		addw	r2, r7, #3788
 6423 00c2 D2ED000A 		vldr.32	s1, [r2]
 6424 00c6 07F56D62 		add	r2, r7, #3792
 6425 00ca 92ED000A 		vldr.32	s0, [r2]
 6426 00ce 1846     		mov	r0, r3
 6427 00d0 FFF7FEFF 		bl	roi_shift_and_scale
1309:Src/app.c     **** 
1310:Src/app.c     **** #if HAS_ROTATION_SUPPORT == 0
1311:Src/app.c     ****   /* In that case we can cancel rotation. This ensure corners are corrected oriented */
1312:Src/app.c     ****   roi.rotation = 0;
1313:Src/app.c     **** #endif
1314:Src/app.c     **** 
1315:Src/app.c     ****   *next = roi;
 6428              		.loc 1 1315 9
 6429 00d4 07F6D863 		addw	r3, r7, #3800
 6430 00d8 A3F6D463 		subw	r3, r3, #3796
 6431 00dc 1A68     		ldr	r2, [r3]
 6432 00de 07F6D863 		addw	r3, r7, #3800
 6433 00e2 A3F6C463 		subw	r3, r3, #3780
 6434 00e6 1446     		mov	r4, r2
 6435 00e8 1D46     		mov	r5, r3
 6436 00ea 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 6437 00ec 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 6438 00ee 2B68     		ldr	r3, [r5]
 6439 00f0 2360     		str	r3, [r4]
1316:Src/app.c     **** }
 6440              		.loc 1 1316 1
 6441 00f2 00BF     		nop
 6442 00f4 07F6D867 		addw	r7, r7, #3800
 6443              		.cfi_def_cfa_offset 16
 6444 00f8 BD46     		mov	sp, r7
 6445              		.cfi_def_cfa_register 13
 6446              		@ sp needed
 6447 00fa B0BD     		pop	{r4, r5, r7, pc}
 6448              	.L283:
 6449              		.align	2
 6450              	.L282:
 6451 00fc CDCCCCBD 		.word	-1110651699
 6452              		.cfi_endproc
 6453              	.LFE7402:
 6455              		.section	.rodata
 6456              		.align	2
 6457              	.LC32:
 6458 02e4 6E6E5F70 		.ascii	"nn_pipe_dst\000"
 6458      6970655F 
 6458      64737400 
ARM GAS  /tmp/ccrysqwW.s 			page 162


 6459              		.align	2
 6460              	.LC33:
 6461 02f0 63617074 		.ascii	"capture_buffer\000"
 6461      7572655F 
 6461      62756666 
 6461      657200
 6462              		.section	.text.nn_thread_fct,"ax",%progbits
 6463              		.align	1
 6464              		.syntax unified
 6465              		.thumb
 6466              		.thumb_func
 6468              	nn_thread_fct:
 6469              	.LFB7403:
1317:Src/app.c     **** static void nn_thread_fct(void *arg)
1318:Src/app.c     **** {
 6470              		.loc 1 1318 1
 6471              		.cfi_startproc
 6472              		@ args = 0, pretend = 0, frame = 264
 6473              		@ frame_needed = 1, uses_anonymous_args = 0
 6474 0000 B0B5     		push	{r4, r5, r7, lr}
 6475              		.cfi_def_cfa_offset 16
 6476              		.cfi_offset 4, -16
 6477              		.cfi_offset 5, -12
 6478              		.cfi_offset 7, -8
 6479              		.cfi_offset 14, -4
 6480 0002 C2B0     		sub	sp, sp, #264
 6481              		.cfi_def_cfa_offset 280
 6482 0004 00AF     		add	r7, sp, #0
 6483              		.cfi_def_cfa_register 7
 6484 0006 07F58473 		add	r3, r7, #264
 6485 000a A3F58273 		sub	r3, r3, #260
 6486 000e 1860     		str	r0, [r3]
1319:Src/app.c     ****   float nn_period_filtered_ms = 0;
 6487              		.loc 1 1319 9
 6488 0010 4FF00003 		mov	r3, #0
 6489 0014 C7F80431 		str	r3, [r7, #260]	@ float
1320:Src/app.c     ****   // Filtered inference times, will be updated with 0
1321:Src/app.c     ****   float pd_filtered_ms = 0;
 6490              		.loc 1 1321 9
 6491 0018 4FF00003 		mov	r3, #0
 6492 001c C7F80031 		str	r3, [r7, #256]	@ float
1322:Src/app.c     ****   float ld_filtered_ms = 0;
 6493              		.loc 1 1322 9
 6494 0020 4FF00003 		mov	r3, #0
 6495 0024 C7F8FC30 		str	r3, [r7, #252]	@ float
1323:Src/app.c     **** 
1324:Src/app.c     ****   uint32_t nn_period_ms;
1325:Src/app.c     ****   uint32_t nn_period[2];
1326:Src/app.c     ****   uint8_t *nn_pipe_dst;
1327:Src/app.c     ****   int is_tracking;
1328:Src/app.c     ****   uint32_t pd_ms;
1329:Src/app.c     ****   uint32_t hl_ms;
1330:Src/app.c     ****   int ret;
1331:Src/app.c     ****   int is_landmark_valid;
1332:Src/app.c     ****   int best_face_idx = -1;
 6496              		.loc 1 1332 7
 6497 0028 4FF0FF33 		mov	r3, #-1
ARM GAS  /tmp/ccrysqwW.s 			page 163


 6498 002c C7F8F030 		str	r3, [r7, #240]
1333:Src/app.c     **** 
1334:Src/app.c     ****   /*
1335:Src/app.c     ****    * 2. Initialize the YOLO model
1336:Src/app.c     ****    * This calls the init function to set up buffers and parameters.
1337:Src/app.c     ****    * If the application runs past this point, the initialization is successful.
1338:Src/app.c     ****    */
1339:Src/app.c     ****   yolo_detector_info_t yolo_info;
1340:Src/app.c     ****   yolo_detector_init(&yolo_info);
 6499              		.loc 1 1340 3
 6500 0030 07F15003 		add	r3, r7, #80
 6501 0034 1846     		mov	r0, r3
 6502 0036 FFF7FEFF 		bl	yolo_detector_init
1341:Src/app.c     **** 
1342:Src/app.c     ****   fl_model_info_t face_info;
1343:Src/app.c     ****   face_landmark_init(&face_info);
 6503              		.loc 1 1343 3
 6504 003a 07F13803 		add	r3, r7, #56
 6505 003e 1846     		mov	r0, r3
 6506 0040 FFF7FEFF 		bl	face_landmark_init
1344:Src/app.c     **** 
1345:Src/app.c     ****   int detection_nb;
1346:Src/app.c     **** 
1347:Src/app.c     ****   /*** App Loop ***************************************************************/
1348:Src/app.c     ****   nn_period[1] = HAL_GetTick();
 6507              		.loc 1 1348 18
 6508 0044 FFF7FEFF 		bl	HAL_GetTick
 6509 0048 0346     		mov	r3, r0
 6510              		.loc 1 1348 16 discriminator 1
 6511 004a C7F89030 		str	r3, [r7, #144]
1349:Src/app.c     ****   nn_pipe_dst = bqueue_get_free(&nn_input_queue, 0);
 6512              		.loc 1 1349 17
 6513 004e 0021     		movs	r1, #0
 6514 0050 B048     		ldr	r0, .L309
 6515 0052 FFF7FEFF 		bl	bqueue_get_free
 6516 0056 C7F8DC00 		str	r0, [r7, #220]
1350:Src/app.c     ****   assert(nn_pipe_dst);
 6517              		.loc 1 1350 3
 6518 005a D7F8DC30 		ldr	r3, [r7, #220]
 6519 005e 002B     		cmp	r3, #0
 6520 0060 06D1     		bne	.L285
 6521              		.loc 1 1350 3 is_stmt 0 discriminator 1
 6522 0062 AD4B     		ldr	r3, .L309+4
 6523 0064 AD4A     		ldr	r2, .L309+8
 6524 0066 40F24651 		movw	r1, #1350
 6525 006a AD48     		ldr	r0, .L309+12
 6526 006c FFF7FEFF 		bl	__assert_func
 6527              	.L285:
1351:Src/app.c     ****   CAM_NNPipe_Start(nn_pipe_dst, CMW_MODE_CONTINUOUS);
 6528              		.loc 1 1351 3 is_stmt 1
 6529 0070 0021     		movs	r1, #0
 6530 0072 D7F8DC00 		ldr	r0, [r7, #220]
 6531 0076 FFF7FEFF 		bl	CAM_NNPipe_Start
 6532              	.L303:
 6533              	.LBB140:
1352:Src/app.c     ****   while (1)
1353:Src/app.c     ****   {
ARM GAS  /tmp/ccrysqwW.s 			page 164


1354:Src/app.c     ****     best_face_idx = -1; // Reset best face index for each frame
 6534              		.loc 1 1354 19
 6535 007a 4FF0FF33 		mov	r3, #-1
 6536 007e C7F8F030 		str	r3, [r7, #240]
1355:Src/app.c     ****     uint8_t *capture_buffer;
1356:Src/app.c     ****     memset(&yolo_info.yolo_out, 0, sizeof(yolo_info.yolo_out));
 6537              		.loc 1 1356 5
 6538 0082 07F15003 		add	r3, r7, #80
 6539 0086 3033     		adds	r3, r3, #48
 6540 0088 0822     		movs	r2, #8
 6541 008a 0021     		movs	r1, #0
 6542 008c 1846     		mov	r0, r3
 6543 008e FFF7FEFF 		bl	memset
1357:Src/app.c     ****     // Standard frame timing
1358:Src/app.c     ****     nn_period[0] = nn_period[1];
 6544              		.loc 1 1358 29
 6545 0092 D7F89030 		ldr	r3, [r7, #144]
 6546              		.loc 1 1358 18
 6547 0096 C7F88C30 		str	r3, [r7, #140]
1359:Src/app.c     ****     nn_period[1] = HAL_GetTick();
 6548              		.loc 1 1359 20
 6549 009a FFF7FEFF 		bl	HAL_GetTick
 6550 009e 0346     		mov	r3, r0
 6551              		.loc 1 1359 18 discriminator 1
 6552 00a0 C7F89030 		str	r3, [r7, #144]
1360:Src/app.c     ****     nn_period_ms = nn_period[1] - nn_period[0];
 6553              		.loc 1 1360 29
 6554 00a4 D7F89020 		ldr	r2, [r7, #144]
 6555              		.loc 1 1360 44
 6556 00a8 D7F88C30 		ldr	r3, [r7, #140]
 6557              		.loc 1 1360 18
 6558 00ac D31A     		subs	r3, r2, r3
 6559 00ae C7F8D830 		str	r3, [r7, #216]
1361:Src/app.c     ****     nn_period_filtered_ms = USE_FILTERED_TS ? (15 * nn_period_filtered_ms + nn_period_ms) / 16 : nn
 6560              		.loc 1 1361 51
 6561 00b2 D7ED417A 		vldr.32	s15, [r7, #260]
 6562 00b6 B2EE0E7A 		vmov.f32	s14, #1.5e+1
 6563 00ba 27EE877A 		vmul.f32	s14, s15, s14
 6564              		.loc 1 1361 75
 6565 00be D7F8D830 		ldr	r3, [r7, #216]
 6566 00c2 07EE903A 		vmov	s15, r3	@ int
 6567 00c6 F8EE677A 		vcvt.f32.u32	s15, s15
 6568 00ca 37EE277A 		vadd.f32	s14, s14, s15
 6569              		.loc 1 1361 27
 6570 00ce F3EE006A 		vmov.f32	s13, #1.6e+1
 6571 00d2 C7EE267A 		vdiv.f32	s15, s14, s13
 6572 00d6 C7ED417A 		vstr.32	s15, [r7, #260]
1362:Src/app.c     **** 
1363:Src/app.c     ****     // Get camera buffer to keep the pipeline moving
1364:Src/app.c     ****     capture_buffer = bqueue_get_ready(&nn_input_queue);
 6573              		.loc 1 1364 22
 6574 00da 8E48     		ldr	r0, .L309
 6575 00dc FFF7FEFF 		bl	bqueue_get_ready
 6576 00e0 C7F8D400 		str	r0, [r7, #212]
1365:Src/app.c     ****     assert(capture_buffer);
 6577              		.loc 1 1365 5
 6578 00e4 D7F8D430 		ldr	r3, [r7, #212]
ARM GAS  /tmp/ccrysqwW.s 			page 165


 6579 00e8 002B     		cmp	r3, #0
 6580 00ea 06D1     		bne	.L286
 6581              		.loc 1 1365 5 is_stmt 0 discriminator 1
 6582 00ec 8D4B     		ldr	r3, .L309+16
 6583 00ee 8B4A     		ldr	r2, .L309+8
 6584 00f0 40F25551 		movw	r1, #1365
 6585 00f4 8A48     		ldr	r0, .L309+12
 6586 00f6 FFF7FEFF 		bl	__assert_func
 6587              	.L286:
 6588 00fa D7F8D430 		ldr	r3, [r7, #212]
 6589 00fe C7F8B030 		str	r3, [r7, #176]
 6590 0102 4FF49623 		mov	r3, #307200
 6591 0106 C7F8AC30 		str	r3, [r7, #172]
 6592              	.LBB141:
 6593              	.LBB142:
 361:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 6594              		.loc 4 361 8 is_stmt 1
 6595 010a D7F8AC30 		ldr	r3, [r7, #172]
 6596 010e 002B     		cmp	r3, #0
 6597 0110 28DD     		ble	.L307
 6598              	.LBB143:
 362:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 6599              		.loc 4 362 36
 6600 0112 D7F8B030 		ldr	r3, [r7, #176]
 362:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 6601              		.loc 4 362 52
 6602 0116 03F01F02 		and	r2, r3, #31
 362:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 6603              		.loc 4 362 32
 6604 011a D7F8AC30 		ldr	r3, [r7, #172]
 6605 011e 1344     		add	r3, r3, r2
 362:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 6606              		.loc 4 362 16
 6607 0120 C7F8A830 		str	r3, [r7, #168]
 363:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 6608              		.loc 4 363 16
 6609 0124 D7F8B030 		ldr	r3, [r7, #176]
 6610 0128 C7F8A430 		str	r3, [r7, #164]
 6611              	.LBB144:
 6612              	.LBB145:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6613              		.loc 5 271 3
 6614              		.syntax unified
 6615              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6616 012c BFF34F8F 		dsb 0xF
 6617              	@ 0 "" 2
 6618              		.loc 5 272 1
 6619              		.thumb
 6620              		.syntax unified
 6621 0130 00BF     		nop
 6622              	.L288:
 6623              	.LBE145:
 6624              	.LBE144:
 368:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr += __SCB_DCACHE_LINE_SIZE;
 6625              		.loc 4 368 12
 6626 0132 7D4A     		ldr	r2, .L309+20
 368:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr += __SCB_DCACHE_LINE_SIZE;
ARM GAS  /tmp/ccrysqwW.s 			page 166


 6627              		.loc 4 368 22
 6628 0134 D7F8A430 		ldr	r3, [r7, #164]
 6629 0138 C2F85C32 		str	r3, [r2, #604]
 369:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_size -= __SCB_DCACHE_LINE_SIZE;
 6630              		.loc 4 369 17
 6631 013c D7F8A430 		ldr	r3, [r7, #164]
 6632 0140 2033     		adds	r3, r3, #32
 6633 0142 C7F8A430 		str	r3, [r7, #164]
 370:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while ( op_size > 0 );
 6634              		.loc 4 370 17
 6635 0146 D7F8A830 		ldr	r3, [r7, #168]
 6636 014a 203B     		subs	r3, r3, #32
 6637 014c C7F8A830 		str	r3, [r7, #168]
 371:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 6638              		.loc 4 371 25 discriminator 1
 6639 0150 D7F8A830 		ldr	r3, [r7, #168]
 6640 0154 002B     		cmp	r3, #0
 6641 0156 ECDC     		bgt	.L288
 6642              	.LBB146:
 6643              	.LBB147:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6644              		.loc 5 271 3
 6645              		.syntax unified
 6646              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6647 0158 BFF34F8F 		dsb 0xF
 6648              	@ 0 "" 2
 6649              		.loc 5 272 1
 6650              		.thumb
 6651              		.syntax unified
 6652 015c 00BF     		nop
 6653              	.LBE147:
 6654              	.LBE146:
 6655              	.LBB148:
 6656              	.LBB149:
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6657              		.loc 5 260 3
 6658              		.syntax unified
 6659              	@ 260 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6660 015e BFF36F8F 		isb 0xF
 6661              	@ 0 "" 2
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 6662              		.loc 5 261 1
 6663              		.thumb
 6664              		.syntax unified
 6665 0162 00BF     		nop
 6666              	.L307:
 6667              	.LBE149:
 6668              	.LBE148:
 6669              	.LBE143:
 6670              		.loc 4 377 1
 6671 0164 00BF     		nop
 6672              	.LBE142:
 6673              	.LBE141:
1366:Src/app.c     **** 
1367:Src/app.c     ****     SCB_InvalidateDCache_by_Addr((uint32_t *)capture_buffer, NN_WIDTH * NN_HEIGHT * NN_BPP);
1368:Src/app.c     ****     /**************************************************************************
1369:Src/app.c     ****      * MODEL EXECUTION 
ARM GAS  /tmp/ccrysqwW.s 			page 167


1370:Src/app.c     ****      **************************************************************************/
1371:Src/app.c     ****     detection_nb = yolo_detector_run(capture_buffer, &yolo_info, &pd_ms);
 6674              		.loc 1 1371 20
 6675 0166 07F18802 		add	r2, r7, #136
 6676 016a 07F15003 		add	r3, r7, #80
 6677 016e 1946     		mov	r1, r3
 6678 0170 D7F8D400 		ldr	r0, [r7, #212]
 6679 0174 FFF7FEFF 		bl	yolo_detector_run
 6680 0178 C7F8D000 		str	r0, [r7, #208]
1372:Src/app.c     ****     hl_ms = HAL_GetTick();
 6681              		.loc 1 1372 13
 6682 017c FFF7FEFF 		bl	HAL_GetTick
 6683 0180 C7F8F800 		str	r0, [r7, #248]
1373:Src/app.c     ****     hl_ms = HAL_GetTick() - hl_ms;
 6684              		.loc 1 1373 13
 6685 0184 FFF7FEFF 		bl	HAL_GetTick
 6686 0188 0246     		mov	r2, r0
 6687              		.loc 1 1373 11 discriminator 1
 6688 018a D7F8F830 		ldr	r3, [r7, #248]
 6689 018e D31A     		subs	r3, r2, r3
 6690 0190 C7F8F830 		str	r3, [r7, #248]
1374:Src/app.c     **** 
1375:Src/app.c     ****     is_tracking = 0; // Force state to "not tracking"
 6691              		.loc 1 1375 17
 6692 0194 0023     		movs	r3, #0
 6693 0196 C7F8CC30 		str	r3, [r7, #204]
1376:Src/app.c     **** 
1377:Src/app.c     **** 
1378:Src/app.c     ****     /*
1379:Src/app.c     ****      * Update display stats
1380:Src/app.c     ****      */
1381:Src/app.c     ****     ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
 6694              		.loc 1 1381 11
 6695 019a 644B     		ldr	r3, .L309+24
 6696 019c 5B6D     		ldr	r3, [r3, #84]
 6697 019e 4FF0FF31 		mov	r1, #-1
 6698 01a2 1846     		mov	r0, r3
 6699 01a4 FFF7FEFF 		bl	xQueueSemaphoreTake
 6700 01a8 C7F8C800 		str	r0, [r7, #200]
1382:Src/app.c     ****     assert(ret == pdTRUE);
 6701              		.loc 1 1382 5
 6702 01ac D7F8C830 		ldr	r3, [r7, #200]
 6703 01b0 012B     		cmp	r3, #1
 6704 01b2 06D0     		beq	.L289
 6705              		.loc 1 1382 5 is_stmt 0 discriminator 1
 6706 01b4 5E4B     		ldr	r3, .L309+28
 6707 01b6 594A     		ldr	r2, .L309+8
 6708 01b8 40F26651 		movw	r1, #1382
 6709 01bc 5848     		ldr	r0, .L309+12
 6710 01be FFF7FEFF 		bl	__assert_func
 6711              	.L289:
1383:Src/app.c     ****     // NEW: Loop through all detections to find the highest confidence score
1384:Src/app.c     ****     float max_confidence = 0.0f;
 6712              		.loc 1 1384 11 is_stmt 1
 6713 01c2 4FF00003 		mov	r3, #0
 6714 01c6 C7F8EC30 		str	r3, [r7, #236]	@ float
 6715              	.LBB150:
ARM GAS  /tmp/ccrysqwW.s 			page 168


1385:Src/app.c     ****     // 1. Loop through all detections from the model's output
1386:Src/app.c     ****     for (int i = 0; i < yolo_info.yolo_out.nb_detect; i++)
 6716              		.loc 1 1386 14
 6717 01ca 0023     		movs	r3, #0
 6718 01cc C7F8E830 		str	r3, [r7, #232]
 6719              		.loc 1 1386 5
 6720 01d0 32E0     		b	.L290
 6721              	.L293:
1387:Src/app.c     ****     {
1388:Src/app.c     ****         // 2. Check if the current detection is a face
1389:Src/app.c     ****         if (yolo_info.yolo_out.pOutBuff[i].class_index == 2)
 6722              		.loc 1 1389 31
 6723 01d2 D7F88010 		ldr	r1, [r7, #128]
 6724              		.loc 1 1389 40
 6725 01d6 D7F8E820 		ldr	r2, [r7, #232]
 6726 01da 1346     		mov	r3, r2
 6727 01dc 5B00     		lsls	r3, r3, #1
 6728 01de 1344     		add	r3, r3, r2
 6729 01e0 DB00     		lsls	r3, r3, #3
 6730 01e2 0B44     		add	r3, r3, r1
 6731              		.loc 1 1389 43
 6732 01e4 5B69     		ldr	r3, [r3, #20]
 6733              		.loc 1 1389 12
 6734 01e6 022B     		cmp	r3, #2
 6735 01e8 21D1     		bne	.L291
1390:Src/app.c     ****         {
1391:Src/app.c     ****             // 3. Check if this face has the highest confidence so far
1392:Src/app.c     ****             if (yolo_info.yolo_out.pOutBuff[i].conf > max_confidence)
 6736              		.loc 1 1392 35
 6737 01ea D7F88010 		ldr	r1, [r7, #128]
 6738              		.loc 1 1392 44
 6739 01ee D7F8E820 		ldr	r2, [r7, #232]
 6740 01f2 1346     		mov	r3, r2
 6741 01f4 5B00     		lsls	r3, r3, #1
 6742 01f6 1344     		add	r3, r3, r2
 6743 01f8 DB00     		lsls	r3, r3, #3
 6744 01fa 0B44     		add	r3, r3, r1
 6745              		.loc 1 1392 47
 6746 01fc D3ED047A 		vldr.32	s15, [r3, #16]
 6747              		.loc 1 1392 16
 6748 0200 97ED3B7A 		vldr.32	s14, [r7, #236]
 6749 0204 B4EEE77A 		vcmpe.f32	s14, s15
 6750 0208 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 6751 020c 0FD5     		bpl	.L291
1393:Src/app.c     ****             {
1394:Src/app.c     ****                 // If yes, save its confidence and index
1395:Src/app.c     ****                 max_confidence = yolo_info.yolo_out.pOutBuff[i].conf;
 6752              		.loc 1 1395 52
 6753 020e D7F88010 		ldr	r1, [r7, #128]
 6754              		.loc 1 1395 61
 6755 0212 D7F8E820 		ldr	r2, [r7, #232]
 6756 0216 1346     		mov	r3, r2
 6757 0218 5B00     		lsls	r3, r3, #1
 6758 021a 1344     		add	r3, r3, r2
 6759 021c DB00     		lsls	r3, r3, #3
 6760 021e 0B44     		add	r3, r3, r1
 6761              		.loc 1 1395 32
ARM GAS  /tmp/ccrysqwW.s 			page 169


 6762 0220 1B69     		ldr	r3, [r3, #16]	@ float
 6763 0222 C7F8EC30 		str	r3, [r7, #236]	@ float
1396:Src/app.c     ****                 best_face_idx = i;
 6764              		.loc 1 1396 31
 6765 0226 D7F8E830 		ldr	r3, [r7, #232]
 6766 022a C7F8F030 		str	r3, [r7, #240]
 6767              	.L291:
1386:Src/app.c     ****     {
 6768              		.loc 1 1386 56 discriminator 2
 6769 022e D7F8E830 		ldr	r3, [r7, #232]
 6770 0232 0133     		adds	r3, r3, #1
 6771 0234 C7F8E830 		str	r3, [r7, #232]
 6772              	.L290:
1386:Src/app.c     ****     {
 6773              		.loc 1 1386 43 discriminator 1
 6774 0238 D7F88430 		ldr	r3, [r7, #132]
1386:Src/app.c     ****     {
 6775              		.loc 1 1386 23 discriminator 1
 6776 023c D7F8E820 		ldr	r2, [r7, #232]
 6777 0240 9A42     		cmp	r2, r3
 6778 0242 C6DB     		blt	.L293
 6779              	.LBE150:
1397:Src/app.c     ****             }
1398:Src/app.c     ****         }
1399:Src/app.c     ****     }
1400:Src/app.c     ****     roi_t face_roi;
1401:Src/app.c     ****     int is_face_present = 0; // A flag to know if we should run the second model
 6780              		.loc 1 1401 9
 6781 0244 0023     		movs	r3, #0
 6782 0246 C7F8E430 		str	r3, [r7, #228]
1402:Src/app.c     ****     // 4. Check if a valid face was found in this frame
1403:Src/app.c     ****     if (best_face_idx != -1)
 6783              		.loc 1 1403 8
 6784 024a D7F8F030 		ldr	r3, [r7, #240]
 6785 024e B3F1FF3F 		cmp	r3, #-1
 6786 0252 75D0     		beq	.L294
 6787              	.LBB151:
1404:Src/app.c     ****     {
1405:Src/app.c     ****         // A face was detected with sufficient confidence
1406:Src/app.c     ****         is_face_present = 1;
 6788              		.loc 1 1406 25
 6789 0254 0123     		movs	r3, #1
 6790 0256 C7F8E430 		str	r3, [r7, #228]
1407:Src/app.c     ****         
1408:Src/app.c     ****         // Get the normalized coordinates of the best face detection
1409:Src/app.c     ****         od_pp_outBuffer_t best_face = yolo_info.yolo_out.pOutBuff[best_face_idx];
 6791              		.loc 1 1409 57
 6792 025a D7F88010 		ldr	r1, [r7, #128]
 6793              		.loc 1 1409 66
 6794 025e D7F8F020 		ldr	r2, [r7, #240]
 6795 0262 1346     		mov	r3, r2
 6796 0264 5B00     		lsls	r3, r3, #1
 6797 0266 1344     		add	r3, r3, r2
 6798 0268 DB00     		lsls	r3, r3, #3
 6799 026a 0B44     		add	r3, r3, r1
 6800              		.loc 1 1409 27
 6801 026c 07F10C04 		add	r4, r7, #12
ARM GAS  /tmp/ccrysqwW.s 			page 170


 6802 0270 1D46     		mov	r5, r3
 6803 0272 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 6804 0274 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 6805 0276 95E80300 		ldm	r5, {r0, r1}
 6806 027a 84E80300 		stm	r4, {r0, r1}
1410:Src/app.c     **** 
1411:Src/app.c     ****         // 5. Convert normalized coordinates [0.0, 1.0] to pixel coordinates
1412:Src/app.c     ****         face_roi.w  = (int)(best_face.width * LCD_BG_WIDTH);
 6807              		.loc 1 1412 38
 6808 027e D7ED057A 		vldr.32	s15, [r7, #20]
 6809              		.loc 1 1412 45
 6810 0282 9FED2C7A 		vldr.32	s14, .L309+32
 6811 0286 67EE877A 		vmul.f32	s15, s15, s14
 6812              		.loc 1 1412 23
 6813 028a FDEEE77A 		vcvt.s32.f32	s15, s15
 6814              		.loc 1 1412 21
 6815 028e F8EEE77A 		vcvt.f32.s32	s15, s15
 6816 0292 C7ED0B7A 		vstr.32	s15, [r7, #44]
1413:Src/app.c     ****         face_roi.h  = (int)(best_face.height * LCD_BG_HEIGHT);
 6817              		.loc 1 1413 38
 6818 0296 D7ED067A 		vldr.32	s15, [r7, #24]
 6819              		.loc 1 1413 46
 6820 029a 9FED277A 		vldr.32	s14, .L309+36
 6821 029e 67EE877A 		vmul.f32	s15, s15, s14
 6822              		.loc 1 1413 23
 6823 02a2 FDEEE77A 		vcvt.s32.f32	s15, s15
 6824              		.loc 1 1413 21
 6825 02a6 F8EEE77A 		vcvt.f32.s32	s15, s15
 6826 02aa C7ED0C7A 		vstr.32	s15, [r7, #48]
1414:Src/app.c     ****         face_roi.cx = (int)(best_face.x_center * LCD_BG_WIDTH);
 6827              		.loc 1 1414 38
 6828 02ae D7ED037A 		vldr.32	s15, [r7, #12]
 6829              		.loc 1 1414 48
 6830 02b2 9FED207A 		vldr.32	s14, .L309+32
 6831 02b6 67EE877A 		vmul.f32	s15, s15, s14
 6832              		.loc 1 1414 23
 6833 02ba FDEEE77A 		vcvt.s32.f32	s15, s15
 6834              		.loc 1 1414 21
 6835 02be F8EEE77A 		vcvt.f32.s32	s15, s15
 6836 02c2 C7ED097A 		vstr.32	s15, [r7, #36]
1415:Src/app.c     ****         face_roi.cy = (int)(best_face.y_center * LCD_BG_HEIGHT);
 6837              		.loc 1 1415 38
 6838 02c6 D7ED047A 		vldr.32	s15, [r7, #16]
 6839              		.loc 1 1415 48
 6840 02ca 9FED1B7A 		vldr.32	s14, .L309+36
 6841 02ce 67EE877A 		vmul.f32	s15, s15, s14
 6842              		.loc 1 1415 23
 6843 02d2 FDEEE77A 		vcvt.s32.f32	s15, s15
 6844              		.loc 1 1415 21
 6845 02d6 F8EEE77A 		vcvt.f32.s32	s15, s15
 6846 02da C7ED0A7A 		vstr.32	s15, [r7, #40]
1416:Src/app.c     ****         face_roi.rotation = 0.0f;
 6847              		.loc 1 1416 27
 6848 02de 4FF00003 		mov	r3, #0
 6849 02e2 7B63     		str	r3, [r7, #52]	@ float
1417:Src/app.c     **** 
1418:Src/app.c     ****         // Now, 'face_roi' is ready to be passed to your face_landmark_run() function.
ARM GAS  /tmp/ccrysqwW.s 			page 171


1419:Src/app.c     ****         hl_ms = HAL_GetTick();
 6850              		.loc 1 1419 17
 6851 02e4 FFF7FEFF 		bl	HAL_GetTick
 6852 02e8 C7F8F800 		str	r0, [r7, #248]
1420:Src/app.c     ****         is_landmark_valid = face_landmark_run(capture_buffer, &face_info, &face_roi, ld_landmarks[0
 6853              		.loc 1 1420 29
 6854 02ec 07F12402 		add	r2, r7, #36
 6855 02f0 07F13801 		add	r1, r7, #56
 6856 02f4 114B     		ldr	r3, .L309+40
 6857 02f6 D7F8D400 		ldr	r0, [r7, #212]
 6858 02fa FFF7FEFF 		bl	face_landmark_run
 6859 02fe C7F8F400 		str	r0, [r7, #244]
1421:Src/app.c     ****         hl_ms = HAL_GetTick() - hl_ms;
 6860              		.loc 1 1421 17
 6861 0302 FFF7FEFF 		bl	HAL_GetTick
 6862 0306 0246     		mov	r2, r0
 6863              		.loc 1 1421 15 discriminator 1
 6864 0308 D7F8F830 		ldr	r3, [r7, #248]
 6865 030c D31A     		subs	r3, r2, r3
 6866 030e C7F8F830 		str	r3, [r7, #248]
 6867              	.LBE151:
 6868 0312 18E0     		b	.L295
 6869              	.L310:
 6870              		.align	2
 6871              	.L309:
 6872 0314 00000000 		.word	nn_input_queue
 6873 0318 E4020000 		.word	.LC32
 6874 031c 00000000 		.word	__func__.8
 6875 0320 38000000 		.word	.LC7
 6876 0324 F0020000 		.word	.LC33
 6877 0328 00ED00E0 		.word	-536810240
 6878 032c 00000000 		.word	disp
 6879 0330 50000000 		.word	.LC9
 6880 0334 00004844 		.word	1145569280
 6881 0338 0000F043 		.word	1139802112
 6882 033c 00000000 		.word	ld_landmarks
 6883              	.L294:
1422:Src/app.c     ****     }
1423:Src/app.c     ****     else
1424:Src/app.c     ****     {
1425:Src/app.c     ****         // No face was found that meets the criteria
1426:Src/app.c     ****         is_face_present = 0;
 6884              		.loc 1 1426 25
 6885 0340 0023     		movs	r3, #0
 6886 0342 C7F8E430 		str	r3, [r7, #228]
 6887              	.L295:
1427:Src/app.c     ****     }
1428:Src/app.c     ****         // Update filtered times with our zero values
1429:Src/app.c     ****     pd_filtered_ms = USE_FILTERED_TS ? (7 * pd_filtered_ms + pd_ms) / 8 : pd_ms;
 6888              		.loc 1 1429 43
 6889 0346 D7ED407A 		vldr.32	s15, [r7, #256]
 6890 034a B1EE0C7A 		vmov.f32	s14, #7.0e+0
 6891 034e 27EE877A 		vmul.f32	s14, s15, s14
 6892              		.loc 1 1429 60
 6893 0352 D7F88830 		ldr	r3, [r7, #136]
 6894 0356 07EE903A 		vmov	s15, r3	@ int
 6895 035a F8EE677A 		vcvt.f32.u32	s15, s15
ARM GAS  /tmp/ccrysqwW.s 			page 172


 6896 035e 37EE277A 		vadd.f32	s14, s14, s15
 6897              		.loc 1 1429 20
 6898 0362 F2EE006A 		vmov.f32	s13, #8.0e+0
 6899 0366 C7EE267A 		vdiv.f32	s15, s14, s13
 6900 036a C7ED407A 		vstr.32	s15, [r7, #256]
1430:Src/app.c     ****     ld_filtered_ms = USE_FILTERED_TS ? (7 * ld_filtered_ms + hl_ms) / 8 : hl_ms;
 6901              		.loc 1 1430 43
 6902 036e D7ED3F7A 		vldr.32	s15, [r7, #252]
 6903 0372 B1EE0C7A 		vmov.f32	s14, #7.0e+0
 6904 0376 27EE877A 		vmul.f32	s14, s15, s14
 6905              		.loc 1 1430 60
 6906 037a D7F8F830 		ldr	r3, [r7, #248]
 6907 037e 07EE903A 		vmov	s15, r3	@ int
 6908 0382 F8EE677A 		vcvt.f32.u32	s15, s15
 6909 0386 37EE277A 		vadd.f32	s14, s14, s15
 6910              		.loc 1 1430 20
 6911 038a F2EE006A 		vmov.f32	s13, #8.0e+0
 6912 038e C7EE267A 		vdiv.f32	s15, s14, s13
 6913 0392 C7ED3F7A 		vstr.32	s15, [r7, #252]
1431:Src/app.c     **** 
1432:Src/app.c     ****     // We are done with the buffer, release it
1433:Src/app.c     ****     bqueue_put_free(&nn_input_queue);
 6914              		.loc 1 1433 5
 6915 0396 6A48     		ldr	r0, .L311
 6916 0398 FFF7FEFF 		bl	bqueue_put_free
1434:Src/app.c     ****     int8_t* landmarks_raw_int_ptr = (int8_t*)face_info.landmarks_out;
 6917              		.loc 1 1434 13
 6918 039c BB6C     		ldr	r3, [r7, #72]
 6919 039e C7F8C430 		str	r3, [r7, #196]
1435:Src/app.c     **** 
1436:Src/app.c     ****     // Populate display structure with valid, non-model data
1437:Src/app.c     ****     disp.info.pd_ms = (int)(max_confidence * 100.0f);
 6920              		.loc 1 1437 44
 6921 03a2 D7ED3B7A 		vldr.32	s15, [r7, #236]
 6922 03a6 9FED677A 		vldr.32	s14, .L311+4
 6923 03aa 67EE877A 		vmul.f32	s15, s15, s14
 6924              		.loc 1 1437 23
 6925 03ae FDEEE77A 		vcvt.s32.f32	s15, s15
 6926 03b2 17EE902A 		vmov	r2, s15	@ int
 6927              		.loc 1 1437 21
 6928 03b6 644B     		ldr	r3, .L311+8
 6929 03b8 C3F8AC20 		str	r2, [r3, #172]
1438:Src/app.c     ****     disp.info.nn_period_ms = nn_period_filtered_ms;
 6930              		.loc 1 1438 28
 6931 03bc 624A     		ldr	r2, .L311+8
 6932 03be D7F80431 		ldr	r3, [r7, #260]	@ float
 6933 03c2 C2F8A830 		str	r3, [r2, #168]	@ float
1439:Src/app.c     ****     disp.info.pd_hand_nb = yolo_info.yolo_out.nb_detect;
 6934              		.loc 1 1439 46
 6935 03c6 D7F88430 		ldr	r3, [r7, #132]
 6936              		.loc 1 1439 26
 6937 03ca 5F4A     		ldr	r2, .L311+8
 6938 03cc C2F8C430 		str	r3, [r2, #196]
1440:Src/app.c     ****     disp.info.pd_max_prob = 0.0f;
 6939              		.loc 1 1440 27
 6940 03d0 5D4B     		ldr	r3, .L311+8
 6941 03d2 4FF00002 		mov	r2, #0
ARM GAS  /tmp/ccrysqwW.s 			page 173


 6942 03d6 C3F8C820 		str	r2, [r3, #200]	@ float
1441:Src/app.c     ****     disp.info.hands[0].is_valid = is_landmark_valid; // Set hand as invalid
 6943              		.loc 1 1441 33
 6944 03da 5B4A     		ldr	r2, .L311+8
 6945 03dc D7F8F430 		ldr	r3, [r7, #244]
 6946 03e0 C2F8CC30 		str	r3, [r2, #204]
1442:Src/app.c     ****     // NOTE: We no longer copy box or landmark data, as none exists.
1443:Src/app.c     ****     // The display thread should check the 'is_valid' flag before drawing.
1444:Src/app.c     ****     if (is_face_present)
 6947              		.loc 1 1444 8
 6948 03e4 D7F8E430 		ldr	r3, [r7, #228]
 6949 03e8 002B     		cmp	r3, #0
 6950 03ea 54D0     		beq	.L296
 6951              	.LBB152:
1445:Src/app.c     ****     {
1446:Src/app.c     ****       // 1. Get the landmark's coordinate relative to the cropped ROI.
1447:Src/app.c     ****       float landmark_relative_x = ld_landmarks[0][4].x;
 6952              		.loc 1 1447 13
 6953 03ec 574B     		ldr	r3, .L311+12
 6954 03ee 1B6A     		ldr	r3, [r3, #32]	@ float
 6955 03f0 C7F8C030 		str	r3, [r7, #192]	@ float
1448:Src/app.c     **** 
1449:Src/app.c     ****       // 2. Calculate the starting X position of the ROI on the full screen.
1450:Src/app.c     ****       // The ROI gives center_x, so we subtract half the width to get the top-left corner.
1451:Src/app.c     ****       float roi_start_x = face_roi.cx - (face_roi.w / 2.0f);
 6956              		.loc 1 1451 35
 6957 03f4 97ED097A 		vldr.32	s14, [r7, #36]
 6958              		.loc 1 1451 50
 6959 03f8 D7ED0B6A 		vldr.32	s13, [r7, #44]
 6960              		.loc 1 1451 53
 6961 03fc B0EE006A 		vmov.f32	s12, #2.0e+0
 6962 0400 C6EE867A 		vdiv.f32	s15, s13, s12
 6963              		.loc 1 1451 13
 6964 0404 77EE677A 		vsub.f32	s15, s14, s15
 6965 0408 C7ED2F7A 		vstr.32	s15, [r7, #188]
1452:Src/app.c     **** 
1453:Src/app.c     ****       // 3. Scale the relative landmark coordinate to the ROI's size on the main screen.
1454:Src/app.c     ****       // LD_WIDTH is the width of the landmark model's input (e.g., 192).
1455:Src/app.c     ****       // We need to scale the landmark's position from that space to the ROI's actual width.
1456:Src/app.c     ****       float landmark_scaled_x = landmark_relative_x * (face_roi.w / (float)LD_WIDTH);
 6966              		.loc 1 1456 64
 6967 040c 97ED0B7A 		vldr.32	s14, [r7, #44]
 6968              		.loc 1 1456 67
 6969 0410 DFED4F6A 		vldr.32	s13, .L311+16
 6970 0414 C7EE267A 		vdiv.f32	s15, s14, s13
 6971              		.loc 1 1456 13
 6972 0418 97ED307A 		vldr.32	s14, [r7, #192]
 6973 041c 67EE277A 		vmul.f32	s15, s14, s15
 6974 0420 C7ED2E7A 		vstr.32	s15, [r7, #184]
1457:Src/app.c     **** 
1458:Src/app.c     ****       // 4. Add the ROI's starting position to get the final, absolute screen coordinate.
1459:Src/app.c     ****       int final_screen_x = (int)(roi_start_x + landmark_scaled_x);
 6975              		.loc 1 1459 46
 6976 0424 97ED2F7A 		vldr.32	s14, [r7, #188]
 6977 0428 D7ED2E7A 		vldr.32	s15, [r7, #184]
 6978 042c 77EE277A 		vadd.f32	s15, s14, s15
 6979              		.loc 1 1459 11
ARM GAS  /tmp/ccrysqwW.s 			page 174


 6980 0430 FDEEE77A 		vcvt.s32.f32	s15, s15
 6981 0434 17EE903A 		vmov	r3, s15	@ int
 6982 0438 C7F8B430 		str	r3, [r7, #180]
1460:Src/app.c     **** 
1461:Src/app.c     ****       // Now, display the correct, absolute coordinate.
1462:Src/app.c     ****       disp.info.hl_ms = final_screen_x;
 6983              		.loc 1 1462 23
 6984 043c D7F8B430 		ldr	r3, [r7, #180]
 6985 0440 414A     		ldr	r2, .L311+8
 6986 0442 C2F8B030 		str	r3, [r2, #176]
1463:Src/app.c     **** 
1464:Src/app.c     ****       // --- END OF FIX ---  
1465:Src/app.c     ****       
1466:Src/app.c     ****       // If valid, show the dummy ROI as the bounding box
1467:Src/app.c     ****       disp.info.hands[0].roi = face_roi;
 6987              		.loc 1 1467 30
 6988 0446 404B     		ldr	r3, .L311+8
 6989 0448 03F1E804 		add	r4, r3, #232
 6990 044c 07F12405 		add	r5, r7, #36
 6991 0450 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 6992 0452 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 6993 0454 2B68     		ldr	r3, [r5]
 6994 0456 2360     		str	r3, [r4]
 6995              	.LBB153:
1468:Src/app.c     **** 
1469:Src/app.c     ****       // Copy the landmark data for the display thread
1470:Src/app.c     ****       for (int j = 0; j < LD_LANDMARK_NB; j++)
 6996              		.loc 1 1470 16
 6997 0458 0023     		movs	r3, #0
 6998 045a C7F8E030 		str	r3, [r7, #224]
 6999              		.loc 1 1470 7
 7000 045e 14E0     		b	.L297
 7001              	.L298:
1471:Src/app.c     ****         disp.info.hands[0].ld_landmarks[j] = ld_landmarks[0][j];
 7002              		.loc 1 1471 44
 7003 0460 394A     		ldr	r2, .L311+8
 7004 0462 D7F8E030 		ldr	r3, [r7, #224]
 7005 0466 1F33     		adds	r3, r3, #31
 7006 0468 DB00     		lsls	r3, r3, #3
 7007 046a 1344     		add	r3, r3, r2
 7008 046c 3748     		ldr	r0, .L311+12
 7009 046e D7F8E010 		ldr	r1, [r7, #224]
 7010 0472 1A1D     		adds	r2, r3, #4
 7011 0474 CB00     		lsls	r3, r1, #3
 7012 0476 0344     		add	r3, r3, r0
 7013 0478 93E80300 		ldm	r3, {r0, r1}
 7014 047c 82E80300 		stm	r2, {r0, r1}
1470:Src/app.c     ****         disp.info.hands[0].ld_landmarks[j] = ld_landmarks[0][j];
 7015              		.loc 1 1470 44 discriminator 3
 7016 0480 D7F8E030 		ldr	r3, [r7, #224]
 7017 0484 0133     		adds	r3, r3, #1
 7018 0486 C7F8E030 		str	r3, [r7, #224]
 7019              	.L297:
1470:Src/app.c     ****         disp.info.hands[0].ld_landmarks[j] = ld_landmarks[0][j];
 7020              		.loc 1 1470 25 discriminator 1
 7021 048a D7F8E030 		ldr	r3, [r7, #224]
 7022 048e B3F5EA7F 		cmp	r3, #468
ARM GAS  /tmp/ccrysqwW.s 			page 175


 7023 0492 E5DB     		blt	.L298
 7024 0494 03E0     		b	.L299
 7025              	.L296:
 7026              	.LBE153:
 7027              	.LBE152:
1472:Src/app.c     ****     }
1473:Src/app.c     ****     else
1474:Src/app.c     ****     {
1475:Src/app.c     ****       disp.info.hl_ms = 0;
 7028              		.loc 1 1475 23
 7029 0496 2C4B     		ldr	r3, .L311+8
 7030 0498 0022     		movs	r2, #0
 7031 049a C3F8B020 		str	r2, [r3, #176]
 7032              	.L299:
 7033 049e 2D4B     		ldr	r3, .L311+20
 7034 04a0 C7F8A030 		str	r3, [r7, #160]
 7035 04a4 4FF46D63 		mov	r3, #3792
 7036 04a8 C7F89C30 		str	r3, [r7, #156]
 7037              	.LBB154:
 7038              	.LBB155:
 378:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 379:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 380:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 381:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   D-Cache Clean by address
 382:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Cleans D-Cache for the given address
 383:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            D-Cache is cleaned starting from a 32 byte aligned address in 32 byte granularity.
 384:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            D-Cache memory blocks which are part of given address + given size are cleaned.
 385:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   addr    address
 386:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   dsize   size of memory block (in number of bytes)
 387:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** */
 388:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (volatile void *addr, int32_t dsize)
 389:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 390:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 391:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     if ( dsize > 0 ) {
 7039              		.loc 4 391 8
 7040 04ac D7F89C30 		ldr	r3, [r7, #156]
 7041 04b0 002B     		cmp	r3, #0
 7042 04b2 28DD     		ble	.L308
 7043              	.LBB156:
 392:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 7044              		.loc 4 392 36
 7045 04b4 D7F8A030 		ldr	r3, [r7, #160]
 7046              		.loc 4 392 52
 7047 04b8 03F01F02 		and	r2, r3, #31
 7048              		.loc 4 392 32
 7049 04bc D7F89C30 		ldr	r3, [r7, #156]
 7050 04c0 1344     		add	r3, r3, r2
 7051              		.loc 4 392 16
 7052 04c2 C7F89830 		str	r3, [r7, #152]
 393:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 7053              		.loc 4 393 16
 7054 04c6 D7F8A030 		ldr	r3, [r7, #160]
 7055 04ca C7F89430 		str	r3, [r7, #148]
 7056              	.LBB157:
 7057              	.LBB158:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7058              		.loc 5 271 3
ARM GAS  /tmp/ccrysqwW.s 			page 176


 7059              		.syntax unified
 7060              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7061 04ce BFF34F8F 		dsb 0xF
 7062              	@ 0 "" 2
 7063              		.loc 5 272 1
 7064              		.thumb
 7065              		.syntax unified
 7066 04d2 00BF     		nop
 7067              	.L301:
 7068              	.LBE158:
 7069              	.LBE157:
 394:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 395:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 396:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 397:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 398:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bi
 7070              		.loc 4 398 12
 7071 04d4 204A     		ldr	r2, .L311+24
 7072              		.loc 4 398 22
 7073 04d6 D7F89430 		ldr	r3, [r7, #148]
 7074 04da C2F86832 		str	r3, [r2, #616]
 399:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr += __SCB_DCACHE_LINE_SIZE;
 7075              		.loc 4 399 17
 7076 04de D7F89430 		ldr	r3, [r7, #148]
 7077 04e2 2033     		adds	r3, r3, #32
 7078 04e4 C7F89430 		str	r3, [r7, #148]
 400:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_size -= __SCB_DCACHE_LINE_SIZE;
 7079              		.loc 4 400 17
 7080 04e8 D7F89830 		ldr	r3, [r7, #152]
 7081 04ec 203B     		subs	r3, r3, #32
 7082 04ee C7F89830 		str	r3, [r7, #152]
 401:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while ( op_size > 0 );
 7083              		.loc 4 401 25 discriminator 1
 7084 04f2 D7F89830 		ldr	r3, [r7, #152]
 7085 04f6 002B     		cmp	r3, #0
 7086 04f8 ECDC     		bgt	.L301
 7087              	.LBB159:
 7088              	.LBB160:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7089              		.loc 5 271 3
 7090              		.syntax unified
 7091              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7092 04fa BFF34F8F 		dsb 0xF
 7093              	@ 0 "" 2
 7094              		.loc 5 272 1
 7095              		.thumb
 7096              		.syntax unified
 7097 04fe 00BF     		nop
 7098              	.LBE160:
 7099              	.LBE159:
 7100              	.LBB161:
 7101              	.LBB162:
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7102              		.loc 5 260 3
 7103              		.syntax unified
 7104              	@ 260 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7105 0500 BFF36F8F 		isb 0xF
ARM GAS  /tmp/ccrysqwW.s 			page 177


 7106              	@ 0 "" 2
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 7107              		.loc 5 261 1
 7108              		.thumb
 7109              		.syntax unified
 7110 0504 00BF     		nop
 7111              	.L308:
 7112              	.LBE162:
 7113              	.LBE161:
 7114              	.LBE156:
 402:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 403:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 404:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __ISB();
 405:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     }
 406:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 407:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 7115              		.loc 4 407 1
 7116 0506 00BF     		nop
 7117              	.LBE155:
 7118              	.LBE154:
1476:Src/app.c     ****     }
1477:Src/app.c     ****     
1478:Src/app.c     ****     SCB_CleanDCache_by_Addr((uint32_t *)&disp.info.hands[0], sizeof(hand_info_t));
1479:Src/app.c     ****     ret = xSemaphoreGive(disp.lock);
 7119              		.loc 1 1479 11
 7120 0508 0F4B     		ldr	r3, .L311+8
 7121 050a 586D     		ldr	r0, [r3, #84]
 7122 050c 0023     		movs	r3, #0
 7123 050e 0022     		movs	r2, #0
 7124 0510 0021     		movs	r1, #0
 7125 0512 FFF7FEFF 		bl	xQueueGenericSend
 7126 0516 C7F8C800 		str	r0, [r7, #200]
1480:Src/app.c     ****     assert(ret == pdTRUE);
 7127              		.loc 1 1480 5
 7128 051a D7F8C830 		ldr	r3, [r7, #200]
 7129 051e 012B     		cmp	r3, #1
 7130 0520 06D0     		beq	.L302
 7131              		.loc 1 1480 5 is_stmt 0 discriminator 1
 7132 0522 0E4B     		ldr	r3, .L311+28
 7133 0524 0E4A     		ldr	r2, .L311+32
 7134 0526 4FF4B961 		mov	r1, #1480
 7135 052a 0E48     		ldr	r0, .L311+36
 7136 052c FFF7FEFF 		bl	__assert_func
 7137              	.L302:
1481:Src/app.c     **** 
1482:Src/app.c     ****     // Signal the display thread to update
1483:Src/app.c     ****     xSemaphoreGive(disp.update);
 7138              		.loc 1 1483 5 is_stmt 1
 7139 0530 054B     		ldr	r3, .L311+8
 7140 0532 1868     		ldr	r0, [r3]
 7141 0534 0023     		movs	r3, #0
 7142 0536 0022     		movs	r2, #0
 7143 0538 0021     		movs	r1, #0
 7144 053a FFF7FEFF 		bl	xQueueGenericSend
 7145              	.LBE140:
1353:Src/app.c     ****     best_face_idx = -1; // Reset best face index for each frame
 7146              		.loc 1 1353 3
ARM GAS  /tmp/ccrysqwW.s 			page 178


 7147 053e 9CE5     		b	.L303
 7148              	.L312:
 7149              		.align	2
 7150              	.L311:
 7151 0540 00000000 		.word	nn_input_queue
 7152 0544 0000C842 		.word	1120403456
 7153 0548 00000000 		.word	disp
 7154 054c 00000000 		.word	ld_landmarks
 7155 0550 00004043 		.word	1128267776
 7156 0554 CC000000 		.word	disp+204
 7157 0558 00ED00E0 		.word	-536810240
 7158 055c 50000000 		.word	.LC9
 7159 0560 00000000 		.word	__func__.8
 7160 0564 38000000 		.word	.LC7
 7161              		.cfi_endproc
 7162              	.LFE7403:
 7164              		.section	.text.dp_update_drawing_area,"ax",%progbits
 7165              		.align	1
 7166              		.syntax unified
 7167              		.thumb
 7168              		.thumb_func
 7170              	dp_update_drawing_area:
 7171              	.LFB7404:
1484:Src/app.c     ****   }
1485:Src/app.c     **** }
1486:Src/app.c     **** 
1487:Src/app.c     **** // static void backup(void *arg)
1488:Src/app.c     **** // {
1489:Src/app.c     **** //   float nn_period_filtered_ms = 0;
1490:Src/app.c     **** //   float pd_filtered_ms = 0;
1491:Src/app.c     **** //   float ld_filtered_ms = 0;
1492:Src/app.c     **** //   hl_model_info_t hl_info;
1493:Src/app.c     **** //   pd_model_info_t pd_info;
1494:Src/app.c     **** //   uint32_t nn_period_ms;
1495:Src/app.c     **** //   uint32_t nn_period[2];
1496:Src/app.c     **** //   uint8_t *nn_pipe_dst;
1497:Src/app.c     **** //   pd_pp_point_t box_next_keypoints[AI_PD_MODEL_PP_NB_KEYPOINTS];
1498:Src/app.c     **** //   pd_pp_box_t box_next;
1499:Src/app.c     **** //   int is_tracking = 0;
1500:Src/app.c     **** //   roi_t roi_next;
1501:Src/app.c     **** //   uint32_t pd_ms;
1502:Src/app.c     **** //   uint32_t hl_ms;
1503:Src/app.c     **** //   int ret;
1504:Src/app.c     **** //   int j;
1505:Src/app.c     **** 
1506:Src/app.c     **** //   /* Current tracking algo only support single hand */
1507:Src/app.c     **** //   assert(PD_MAX_HAND_NB == 1);
1508:Src/app.c     **** 
1509:Src/app.c     **** //   /* setup models buffer info */
1510:Src/app.c     **** //   palm_detector_init(&pd_info);
1511:Src/app.c     **** //   box_next.pKps = box_next_keypoints;
1512:Src/app.c     **** //   hand_landmark_init(&hl_info);
1513:Src/app.c     **** 
1514:Src/app.c     **** // #if HAS_ROTATION_SUPPORT == 1
1515:Src/app.c     **** //   app_rot_init(&hl_info);
1516:Src/app.c     **** // #endif
1517:Src/app.c     **** 
ARM GAS  /tmp/ccrysqwW.s 			page 179


1518:Src/app.c     **** //   /*** App Loop ***************************************************************/
1519:Src/app.c     **** //   nn_period[1] = HAL_GetTick();
1520:Src/app.c     **** //   nn_pipe_dst = bqueue_get_free(&nn_input_queue, 0);
1521:Src/app.c     **** //   assert(nn_pipe_dst);
1522:Src/app.c     **** //   CAM_NNPipe_Start(nn_pipe_dst, CMW_MODE_CONTINUOUS);
1523:Src/app.c     **** //   while (1)
1524:Src/app.c     **** //   {
1525:Src/app.c     **** //     uint8_t *capture_buffer;
1526:Src/app.c     **** //     int idx_for_resize;
1527:Src/app.c     **** 
1528:Src/app.c     **** //     nn_period[0] = nn_period[1];
1529:Src/app.c     **** //     nn_period[1] = HAL_GetTick();
1530:Src/app.c     **** //     nn_period_ms = nn_period[1] - nn_period[0];
1531:Src/app.c     **** //     nn_period_filtered_ms = USE_FILTERED_TS ? (15 * nn_period_filtered_ms + nn_period_ms) / 16 :
1532:Src/app.c     **** 
1533:Src/app.c     **** //     capture_buffer = bqueue_get_ready(&nn_input_queue);
1534:Src/app.c     **** //     assert(capture_buffer);
1535:Src/app.c     **** //     idx_for_resize = frame_event_nb_for_resize % DISPLAY_BUFFER_NB;
1536:Src/app.c     **** 
1537:Src/app.c     **** //     /* Only start palm detector when not tracking hand */
1538:Src/app.c     **** //     if (!is_tracking) {
1539:Src/app.c     **** //       is_tracking = palm_detector_run(capture_buffer, &pd_info, &pd_ms);
1540:Src/app.c     **** //       box_next.prob = pd_info.pd_out.pOutData[0].prob;
1541:Src/app.c     **** //     } else {
1542:Src/app.c     **** //       rois[0] = roi_next;
1543:Src/app.c     **** //       copy_pd_box(&pd_info.pd_out.pOutData[0], &box_next);
1544:Src/app.c     **** //       pd_ms = 0;
1545:Src/app.c     **** //     }
1546:Src/app.c     **** //     pd_filtered_ms = USE_FILTERED_TS ? (7 * pd_filtered_ms + pd_ms) / 8 : pd_ms;
1547:Src/app.c     **** //     bqueue_put_free(&nn_input_queue);
1548:Src/app.c     **** 
1549:Src/app.c     **** //     /* then run hand landmark detector if needed */
1550:Src/app.c     **** //     if (is_tracking) {
1551:Src/app.c     **** //       hl_ms = HAL_GetTick();
1552:Src/app.c     **** //       is_tracking = hand_landmark_run(lcd_bg_buffer[idx_for_resize], &hl_info, &rois[0], ld_land
1553:Src/app.c     **** //       CACHE_OP(SCB_InvalidateDCache_by_Addr(lcd_bg_buffer[idx_for_resize], sizeof(lcd_bg_buffer[
1554:Src/app.c     **** //       if (is_tracking)
1555:Src/app.c     **** //         compute_next_roi(&rois[0], ld_landmarks[0], &roi_next, &box_next);
1556:Src/app.c     **** //       hl_ms = HAL_GetTick() - hl_ms;
1557:Src/app.c     **** //     } else {
1558:Src/app.c     **** //       hl_ms = 0;
1559:Src/app.c     **** //     }
1560:Src/app.c     **** //     ld_filtered_ms = USE_FILTERED_TS ? (7 * ld_filtered_ms + hl_ms) / 8 : hl_ms;
1561:Src/app.c     **** 
1562:Src/app.c     **** //     /* update display stats */
1563:Src/app.c     **** //     ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
1564:Src/app.c     **** //     assert(ret == pdTRUE);
1565:Src/app.c     **** //     disp.info.pd_ms = is_tracking ? 0 : (int)pd_filtered_ms;
1566:Src/app.c     **** //     disp.info.hl_ms = is_tracking ? (int)ld_filtered_ms : 0;
1567:Src/app.c     **** //     disp.info.nn_period_ms = nn_period_filtered_ms;
1568:Src/app.c     **** //     disp.info.pd_hand_nb = is_tracking;
1569:Src/app.c     **** //     disp.info.pd_max_prob = pd_info.pd_out.pOutData[0].prob;
1570:Src/app.c     **** //     disp.info.hands[0].is_valid = is_tracking;
1571:Src/app.c     **** //     copy_pd_box(&disp.info.hands[0].pd_hands, &pd_info.pd_out.pOutData[0]);
1572:Src/app.c     **** //     disp.info.hands[0].roi = rois[0];
1573:Src/app.c     **** //     for (j = 0; j < LD_LANDMARK_NB; j++)
1574:Src/app.c     **** //       disp.info.hands[0].ld_landmarks[j] = ld_landmarks[0][j];
ARM GAS  /tmp/ccrysqwW.s 			page 180


1575:Src/app.c     **** //     ret = xSemaphoreGive(disp.lock);
1576:Src/app.c     **** //     assert(ret == pdTRUE);
1577:Src/app.c     **** 
1578:Src/app.c     **** //     /* It's possible xqueue is empty if display is slow. So don't check error code that may by p
1579:Src/app.c     **** //     xSemaphoreGive(disp.update);
1580:Src/app.c     **** //   }
1581:Src/app.c     **** // }
1582:Src/app.c     **** 
1583:Src/app.c     **** static void dp_update_drawing_area()
1584:Src/app.c     **** {
 7172              		.loc 1 1584 1
 7173              		.cfi_startproc
 7174              		@ args = 0, pretend = 0, frame = 8
 7175              		@ frame_needed = 1, uses_anonymous_args = 0
 7176 0000 80B5     		push	{r7, lr}
 7177              		.cfi_def_cfa_offset 8
 7178              		.cfi_offset 7, -8
 7179              		.cfi_offset 14, -4
 7180 0002 82B0     		sub	sp, sp, #8
 7181              		.cfi_def_cfa_offset 16
 7182 0004 00AF     		add	r7, sp, #0
 7183              		.cfi_def_cfa_register 7
 7184              	.LBB163:
 7185              	.LBB164:
 273:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccrysqwW.s 			page 181


 306:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
ARM GAS  /tmp/ccrysqwW.s 			page 182


 363:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccrysqwW.s 			page 183


 420:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
ARM GAS  /tmp/ccrysqwW.s 			page 184


 477:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccrysqwW.s 			page 185


 534:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
ARM GAS  /tmp/ccrysqwW.s 			page 186


 591:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
ARM GAS  /tmp/ccrysqwW.s 			page 187


 648:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
ARM GAS  /tmp/ccrysqwW.s 			page 188


 705:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccrysqwW.s 			page 189


 762:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccrysqwW.s 			page 190


 819:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
ARM GAS  /tmp/ccrysqwW.s 			page 191


 876:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
ARM GAS  /tmp/ccrysqwW.s 			page 192


 933:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 961:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 7186              		.loc 5 962 3
 7187              		.syntax unified
 7188              	@ 962 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7189 0006 72B6     		cpsid i
 7190              	@ 0 "" 2
 963:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7191              		.loc 5 963 1
 7192              		.thumb
 7193              		.syntax unified
 7194 0008 00BF     		nop
 7195              	.LBE164:
 7196              	.LBE163:
1585:Src/app.c     ****   int ret;
1586:Src/app.c     **** 
1587:Src/app.c     ****   __disable_irq();
1588:Src/app.c     ****   ret = SCRL_SetAddress_NoReload(lcd_fg_buffer[lcd_fg_buffer_rd_idx], SCRL_LAYER_1);
 7197              		.loc 1 1588 47
 7198 000a 0E4B     		ldr	r3, .L315
 7199 000c 1B68     		ldr	r3, [r3]
 7200 000e 0E4A     		ldr	r2, .L315+4
 7201 0010 02FB03F3 		mul	r3, r2, r3
 7202 0014 0D4A     		ldr	r2, .L315+8
 7203 0016 1344     		add	r3, r3, r2
 7204              		.loc 1 1588 9
 7205 0018 0121     		movs	r1, #1
 7206 001a 1846     		mov	r0, r3
 7207 001c FFF7FEFF 		bl	SCRL_SetAddress_NoReload
ARM GAS  /tmp/ccrysqwW.s 			page 193


 7208 0020 7860     		str	r0, [r7, #4]
1589:Src/app.c     ****   assert(ret == HAL_OK);
 7209              		.loc 1 1589 3
 7210 0022 7B68     		ldr	r3, [r7, #4]
 7211 0024 002B     		cmp	r3, #0
 7212 0026 06D0     		beq	.L314
 7213              		.loc 1 1589 3 is_stmt 0 discriminator 1
 7214 0028 094B     		ldr	r3, .L315+12
 7215 002a 0A4A     		ldr	r2, .L315+16
 7216 002c 40F23561 		movw	r1, #1589
 7217 0030 0948     		ldr	r0, .L315+20
 7218 0032 FFF7FEFF 		bl	__assert_func
 7219              	.L314:
 7220              	.LBB165:
 7221              	.LBB166:
 951:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7222              		.loc 5 951 3 is_stmt 1
 7223              		.syntax unified
 7224              	@ 951 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7225 0036 62B6     		cpsie i
 7226              	@ 0 "" 2
 952:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 7227              		.loc 5 952 1
 7228              		.thumb
 7229              		.syntax unified
 7230 0038 00BF     		nop
 7231              	.LBE166:
 7232              	.LBE165:
1590:Src/app.c     ****   __enable_irq();
1591:Src/app.c     **** }
 7233              		.loc 1 1591 1
 7234 003a 00BF     		nop
 7235 003c 0837     		adds	r7, r7, #8
 7236              		.cfi_def_cfa_offset 8
 7237 003e BD46     		mov	sp, r7
 7238              		.cfi_def_cfa_register 13
 7239              		@ sp needed
 7240 0040 80BD     		pop	{r7, pc}
 7241              	.L316:
 7242 0042 00BF     		.align	2
 7243              	.L315:
 7244 0044 00000000 		.word	lcd_fg_buffer_rd_idx
 7245 0048 00B80B00 		.word	768000
 7246 004c 00C05D00 		.word	lcd_fg_buffer
 7247 0050 6C000000 		.word	.LC11
 7248 0054 00000000 		.word	__func__.7
 7249 0058 38000000 		.word	.LC7
 7250              		.cfi_endproc
 7251              	.LFE7404:
 7253              		.section	.text.dp_commit_drawing_area,"ax",%progbits
 7254              		.align	1
 7255              		.syntax unified
 7256              		.thumb
 7257              		.thumb_func
 7259              	dp_commit_drawing_area:
 7260              	.LFB7405:
1592:Src/app.c     **** 
ARM GAS  /tmp/ccrysqwW.s 			page 194


1593:Src/app.c     **** static void dp_commit_drawing_area()
1594:Src/app.c     **** {
 7261              		.loc 1 1594 1
 7262              		.cfi_startproc
 7263              		@ args = 0, pretend = 0, frame = 8
 7264              		@ frame_needed = 1, uses_anonymous_args = 0
 7265 0000 80B5     		push	{r7, lr}
 7266              		.cfi_def_cfa_offset 8
 7267              		.cfi_offset 7, -8
 7268              		.cfi_offset 14, -4
 7269 0002 82B0     		sub	sp, sp, #8
 7270              		.cfi_def_cfa_offset 16
 7271 0004 00AF     		add	r7, sp, #0
 7272              		.cfi_def_cfa_register 7
 7273              	.LBB167:
 7274              	.LBB168:
 962:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7275              		.loc 5 962 3
 7276              		.syntax unified
 7277              	@ 962 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7278 0006 72B6     		cpsid i
 7279              	@ 0 "" 2
 7280              		.loc 5 963 1
 7281              		.thumb
 7282              		.syntax unified
 7283 0008 00BF     		nop
 7284              	.LBE168:
 7285              	.LBE167:
1595:Src/app.c     ****   int ret;
1596:Src/app.c     **** 
1597:Src/app.c     ****   __disable_irq();
1598:Src/app.c     ****   ret = SCRL_ReloadLayer(SCRL_LAYER_1);
 7286              		.loc 1 1598 9
 7287 000a 0120     		movs	r0, #1
 7288 000c FFF7FEFF 		bl	SCRL_ReloadLayer
 7289 0010 7860     		str	r0, [r7, #4]
1599:Src/app.c     ****   assert(ret == HAL_OK);
 7290              		.loc 1 1599 3
 7291 0012 7B68     		ldr	r3, [r7, #4]
 7292 0014 002B     		cmp	r3, #0
 7293 0016 06D0     		beq	.L318
 7294              		.loc 1 1599 3 is_stmt 0 discriminator 1
 7295 0018 094B     		ldr	r3, .L319
 7296 001a 0A4A     		ldr	r2, .L319+4
 7297 001c 40F23F61 		movw	r1, #1599
 7298 0020 0948     		ldr	r0, .L319+8
 7299 0022 FFF7FEFF 		bl	__assert_func
 7300              	.L318:
 7301              	.LBB169:
 7302              	.LBB170:
 951:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7303              		.loc 5 951 3 is_stmt 1
 7304              		.syntax unified
 7305              	@ 951 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7306 0026 62B6     		cpsie i
 7307              	@ 0 "" 2
 952:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccrysqwW.s 			page 195


 7308              		.loc 5 952 1
 7309              		.thumb
 7310              		.syntax unified
 7311 0028 00BF     		nop
 7312              	.LBE170:
 7313              	.LBE169:
1600:Src/app.c     ****   __enable_irq();
1601:Src/app.c     ****   lcd_fg_buffer_rd_idx = 1 - lcd_fg_buffer_rd_idx;
 7314              		.loc 1 1601 28
 7315 002a 084B     		ldr	r3, .L319+12
 7316 002c 1B68     		ldr	r3, [r3]
 7317 002e C3F10103 		rsb	r3, r3, #1
 7318              		.loc 1 1601 24
 7319 0032 064A     		ldr	r2, .L319+12
 7320 0034 1360     		str	r3, [r2]
1602:Src/app.c     **** }
 7321              		.loc 1 1602 1
 7322 0036 00BF     		nop
 7323 0038 0837     		adds	r7, r7, #8
 7324              		.cfi_def_cfa_offset 8
 7325 003a BD46     		mov	sp, r7
 7326              		.cfi_def_cfa_register 13
 7327              		@ sp needed
 7328 003c 80BD     		pop	{r7, pc}
 7329              	.L320:
 7330 003e 00BF     		.align	2
 7331              	.L319:
 7332 0040 6C000000 		.word	.LC11
 7333 0044 00000000 		.word	__func__.6
 7334 0048 38000000 		.word	.LC7
 7335 004c 00000000 		.word	lcd_fg_buffer_rd_idx
 7336              		.cfi_endproc
 7337              	.LFE7405:
 7339              		.section	.text.on_ld_toggle_button_click,"ax",%progbits
 7340              		.align	1
 7341              		.syntax unified
 7342              		.thumb
 7343              		.thumb_func
 7345              	on_ld_toggle_button_click:
 7346              	.LFB7406:
1603:Src/app.c     **** 
1604:Src/app.c     **** static void on_ld_toggle_button_click(void *args)
1605:Src/app.c     **** {
 7347              		.loc 1 1605 1
 7348              		.cfi_startproc
 7349              		@ args = 0, pretend = 0, frame = 16
 7350              		@ frame_needed = 1, uses_anonymous_args = 0
 7351 0000 80B5     		push	{r7, lr}
 7352              		.cfi_def_cfa_offset 8
 7353              		.cfi_offset 7, -8
 7354              		.cfi_offset 14, -4
 7355 0002 84B0     		sub	sp, sp, #16
 7356              		.cfi_def_cfa_offset 24
 7357 0004 00AF     		add	r7, sp, #0
 7358              		.cfi_def_cfa_register 7
 7359 0006 7860     		str	r0, [r7, #4]
1606:Src/app.c     ****   display_t *disp = (display_t *) args;
ARM GAS  /tmp/ccrysqwW.s 			page 196


 7360              		.loc 1 1606 14
 7361 0008 7B68     		ldr	r3, [r7, #4]
 7362 000a FB60     		str	r3, [r7, #12]
1607:Src/app.c     ****   int ret;
1608:Src/app.c     **** 
1609:Src/app.c     ****   ret = xSemaphoreTake(disp->lock, portMAX_DELAY);
 7363              		.loc 1 1609 9
 7364 000c FB68     		ldr	r3, [r7, #12]
 7365 000e 5B6D     		ldr	r3, [r3, #84]
 7366 0010 4FF0FF31 		mov	r1, #-1
 7367 0014 1846     		mov	r0, r3
 7368 0016 FFF7FEFF 		bl	xQueueSemaphoreTake
 7369 001a B860     		str	r0, [r7, #8]
1610:Src/app.c     ****   assert(ret == pdTRUE);
 7370              		.loc 1 1610 3
 7371 001c BB68     		ldr	r3, [r7, #8]
 7372 001e 012B     		cmp	r3, #1
 7373 0020 06D0     		beq	.L322
 7374              		.loc 1 1610 3 is_stmt 0 discriminator 1
 7375 0022 144B     		ldr	r3, .L325
 7376 0024 144A     		ldr	r2, .L325+4
 7377 0026 40F24A61 		movw	r1, #1610
 7378 002a 1448     		ldr	r0, .L325+8
 7379 002c FFF7FEFF 		bl	__assert_func
 7380              	.L322:
1611:Src/app.c     ****   disp->info.is_ld_displayed = !disp->info.is_ld_displayed;
 7381              		.loc 1 1611 43 is_stmt 1
 7382 0030 FB68     		ldr	r3, [r7, #12]
 7383 0032 D3F8BC30 		ldr	r3, [r3, #188]
 7384              		.loc 1 1611 32
 7385 0036 002B     		cmp	r3, #0
 7386 0038 0CBF     		ite	eq
 7387 003a 0123     		moveq	r3, #1
 7388 003c 0023     		movne	r3, #0
 7389 003e DBB2     		uxtb	r3, r3
 7390 0040 1A46     		mov	r2, r3
 7391              		.loc 1 1611 30
 7392 0042 FB68     		ldr	r3, [r7, #12]
 7393 0044 C3F8BC20 		str	r2, [r3, #188]
1612:Src/app.c     ****   ret = xSemaphoreGive(disp->lock);
 7394              		.loc 1 1612 9
 7395 0048 FB68     		ldr	r3, [r7, #12]
 7396 004a 586D     		ldr	r0, [r3, #84]
 7397 004c 0023     		movs	r3, #0
 7398 004e 0022     		movs	r2, #0
 7399 0050 0021     		movs	r1, #0
 7400 0052 FFF7FEFF 		bl	xQueueGenericSend
 7401 0056 B860     		str	r0, [r7, #8]
1613:Src/app.c     ****   assert(ret == pdTRUE);
 7402              		.loc 1 1613 3
 7403 0058 BB68     		ldr	r3, [r7, #8]
 7404 005a 012B     		cmp	r3, #1
 7405 005c 06D0     		beq	.L324
 7406              		.loc 1 1613 3 is_stmt 0 discriminator 1
 7407 005e 054B     		ldr	r3, .L325
 7408 0060 054A     		ldr	r2, .L325+4
 7409 0062 40F24D61 		movw	r1, #1613
ARM GAS  /tmp/ccrysqwW.s 			page 197


 7410 0066 0548     		ldr	r0, .L325+8
 7411 0068 FFF7FEFF 		bl	__assert_func
 7412              	.L324:
1614:Src/app.c     **** }
 7413              		.loc 1 1614 1 is_stmt 1
 7414 006c 00BF     		nop
 7415 006e 1037     		adds	r7, r7, #16
 7416              		.cfi_def_cfa_offset 8
 7417 0070 BD46     		mov	sp, r7
 7418              		.cfi_def_cfa_register 13
 7419              		@ sp needed
 7420 0072 80BD     		pop	{r7, pc}
 7421              	.L326:
 7422              		.align	2
 7423              	.L325:
 7424 0074 50000000 		.word	.LC9
 7425 0078 00000000 		.word	__func__.5
 7426 007c 38000000 		.word	.LC7
 7427              		.cfi_endproc
 7428              	.LFE7406:
 7430              		.section	.text.on_pd_toggle_button_click,"ax",%progbits
 7431              		.align	1
 7432              		.syntax unified
 7433              		.thumb
 7434              		.thumb_func
 7436              	on_pd_toggle_button_click:
 7437              	.LFB7407:
1615:Src/app.c     **** 
1616:Src/app.c     **** static void on_pd_toggle_button_click(void *args)
1617:Src/app.c     **** {
 7438              		.loc 1 1617 1
 7439              		.cfi_startproc
 7440              		@ args = 0, pretend = 0, frame = 16
 7441              		@ frame_needed = 1, uses_anonymous_args = 0
 7442 0000 80B5     		push	{r7, lr}
 7443              		.cfi_def_cfa_offset 8
 7444              		.cfi_offset 7, -8
 7445              		.cfi_offset 14, -4
 7446 0002 84B0     		sub	sp, sp, #16
 7447              		.cfi_def_cfa_offset 24
 7448 0004 00AF     		add	r7, sp, #0
 7449              		.cfi_def_cfa_register 7
 7450 0006 7860     		str	r0, [r7, #4]
1618:Src/app.c     ****   display_t *disp = (display_t *) args;
 7451              		.loc 1 1618 14
 7452 0008 7B68     		ldr	r3, [r7, #4]
 7453 000a FB60     		str	r3, [r7, #12]
1619:Src/app.c     ****   int ret;
1620:Src/app.c     **** 
1621:Src/app.c     ****   ret = xSemaphoreTake(disp->lock, portMAX_DELAY);
 7454              		.loc 1 1621 9
 7455 000c FB68     		ldr	r3, [r7, #12]
 7456 000e 5B6D     		ldr	r3, [r3, #84]
 7457 0010 4FF0FF31 		mov	r1, #-1
 7458 0014 1846     		mov	r0, r3
 7459 0016 FFF7FEFF 		bl	xQueueSemaphoreTake
 7460 001a B860     		str	r0, [r7, #8]
ARM GAS  /tmp/ccrysqwW.s 			page 198


1622:Src/app.c     ****   assert(ret == pdTRUE);
 7461              		.loc 1 1622 3
 7462 001c BB68     		ldr	r3, [r7, #8]
 7463 001e 012B     		cmp	r3, #1
 7464 0020 06D0     		beq	.L328
 7465              		.loc 1 1622 3 is_stmt 0 discriminator 1
 7466 0022 144B     		ldr	r3, .L331
 7467 0024 144A     		ldr	r2, .L331+4
 7468 0026 40F25661 		movw	r1, #1622
 7469 002a 1448     		ldr	r0, .L331+8
 7470 002c FFF7FEFF 		bl	__assert_func
 7471              	.L328:
1623:Src/app.c     ****   disp->info.is_pd_displayed = !disp->info.is_pd_displayed;
 7472              		.loc 1 1623 43 is_stmt 1
 7473 0030 FB68     		ldr	r3, [r7, #12]
 7474 0032 D3F8C030 		ldr	r3, [r3, #192]
 7475              		.loc 1 1623 32
 7476 0036 002B     		cmp	r3, #0
 7477 0038 0CBF     		ite	eq
 7478 003a 0123     		moveq	r3, #1
 7479 003c 0023     		movne	r3, #0
 7480 003e DBB2     		uxtb	r3, r3
 7481 0040 1A46     		mov	r2, r3
 7482              		.loc 1 1623 30
 7483 0042 FB68     		ldr	r3, [r7, #12]
 7484 0044 C3F8C020 		str	r2, [r3, #192]
1624:Src/app.c     ****   ret = xSemaphoreGive(disp->lock);
 7485              		.loc 1 1624 9
 7486 0048 FB68     		ldr	r3, [r7, #12]
 7487 004a 586D     		ldr	r0, [r3, #84]
 7488 004c 0023     		movs	r3, #0
 7489 004e 0022     		movs	r2, #0
 7490 0050 0021     		movs	r1, #0
 7491 0052 FFF7FEFF 		bl	xQueueGenericSend
 7492 0056 B860     		str	r0, [r7, #8]
1625:Src/app.c     ****   assert(ret == pdTRUE);
 7493              		.loc 1 1625 3
 7494 0058 BB68     		ldr	r3, [r7, #8]
 7495 005a 012B     		cmp	r3, #1
 7496 005c 06D0     		beq	.L330
 7497              		.loc 1 1625 3 is_stmt 0 discriminator 1
 7498 005e 054B     		ldr	r3, .L331
 7499 0060 054A     		ldr	r2, .L331+4
 7500 0062 40F25961 		movw	r1, #1625
 7501 0066 0548     		ldr	r0, .L331+8
 7502 0068 FFF7FEFF 		bl	__assert_func
 7503              	.L330:
1626:Src/app.c     **** }
 7504              		.loc 1 1626 1 is_stmt 1
 7505 006c 00BF     		nop
 7506 006e 1037     		adds	r7, r7, #16
 7507              		.cfi_def_cfa_offset 8
 7508 0070 BD46     		mov	sp, r7
 7509              		.cfi_def_cfa_register 13
 7510              		@ sp needed
 7511 0072 80BD     		pop	{r7, pc}
 7512              	.L332:
ARM GAS  /tmp/ccrysqwW.s 			page 199


 7513              		.align	2
 7514              	.L331:
 7515 0074 50000000 		.word	.LC9
 7516 0078 00000000 		.word	__func__.4
 7517 007c 38000000 		.word	.LC7
 7518              		.cfi_endproc
 7519              	.LFE7407:
 7521              		.section	.text.dp_thread_fct,"ax",%progbits
 7522              		.align	1
 7523              		.syntax unified
 7524              		.thumb
 7525              		.thumb_func
 7527              	dp_thread_fct:
 7528              	.LFB7408:
1627:Src/app.c     **** 
1628:Src/app.c     **** static void dp_thread_fct(void *arg)
1629:Src/app.c     **** {
 7529              		.loc 1 1629 1
 7530              		.cfi_startproc
 7531              		@ args = 0, pretend = 0, frame = 3896
 7532              		@ frame_needed = 1, uses_anonymous_args = 0
 7533 0000 80B5     		push	{r7, lr}
 7534              		.cfi_def_cfa_offset 8
 7535              		.cfi_offset 7, -8
 7536              		.cfi_offset 14, -4
 7537 0002 ADF6387D 		subw	sp, sp, #3896
 7538              		.cfi_def_cfa_offset 3904
 7539 0006 00AF     		add	r7, sp, #0
 7540              		.cfi_def_cfa_register 7
 7541 0008 07F63873 		addw	r3, r7, #3896
 7542 000c A3F63473 		subw	r3, r3, #3892
 7543 0010 1860     		str	r0, [r3]
1630:Src/app.c     ****   button_t ld_toggle_button;
1631:Src/app.c     ****   button_t hd_toggle_button;
1632:Src/app.c     ****   uint32_t disp_ms = 0;
 7544              		.loc 1 1632 12
 7545 0012 0023     		movs	r3, #0
 7546 0014 C7F8343F 		str	r3, [r7, #3892]
1633:Src/app.c     ****   display_info_t info;
1634:Src/app.c     ****   uint32_t ts;
1635:Src/app.c     ****   int ret;
1636:Src/app.c     **** 
1637:Src/app.c     **** #ifdef STM32N6570_DK_REV
1638:Src/app.c     ****   button_init(&ld_toggle_button, BUTTON_USER1, on_ld_toggle_button_click, &disp);
 7547              		.loc 1 1638 3
 7548 0018 07F60C70 		addw	r0, r7, #3852
 7549 001c 5A4B     		ldr	r3, .L342
 7550 001e 5B4A     		ldr	r2, .L342+4
 7551 0020 0021     		movs	r1, #0
 7552 0022 FFF7FEFF 		bl	button_init
1639:Src/app.c     ****   button_init(&hd_toggle_button, BUTTON_TAMP, on_pd_toggle_button_click, &disp);
 7553              		.loc 1 1639 3
 7554 0026 07F6FC60 		addw	r0, r7, #3836
 7555 002a 574B     		ldr	r3, .L342
 7556 002c 584A     		ldr	r2, .L342+8
 7557 002e 0121     		movs	r1, #1
 7558 0030 FFF7FEFF 		bl	button_init
ARM GAS  /tmp/ccrysqwW.s 			page 200


 7559              	.L339:
1640:Src/app.c     **** #else
1641:Src/app.c     ****   button_init(&ld_toggle_button, BUTTON_USER, on_ld_toggle_button_click, &disp);
1642:Src/app.c     ****   button_init(&hd_toggle_button, BUTTON_USER, on_pd_toggle_button_click, &disp);
1643:Src/app.c     **** #endif
1644:Src/app.c     ****   while (1)
1645:Src/app.c     ****   {
1646:Src/app.c     ****     ret = xSemaphoreTake(disp.update, portMAX_DELAY);
 7560              		.loc 1 1646 11
 7561 0034 544B     		ldr	r3, .L342
 7562 0036 1B68     		ldr	r3, [r3]
 7563 0038 4FF0FF31 		mov	r1, #-1
 7564 003c 1846     		mov	r0, r3
 7565 003e FFF7FEFF 		bl	xQueueSemaphoreTake
 7566 0042 C7F8300F 		str	r0, [r7, #3888]
1647:Src/app.c     ****     assert(ret == pdTRUE);
 7567              		.loc 1 1647 5
 7568 0046 D7F8303F 		ldr	r3, [r7, #3888]
 7569 004a 012B     		cmp	r3, #1
 7570 004c 06D0     		beq	.L334
 7571              		.loc 1 1647 5 is_stmt 0 discriminator 1
 7572 004e 514B     		ldr	r3, .L342+12
 7573 0050 514A     		ldr	r2, .L342+16
 7574 0052 40F26F61 		movw	r1, #1647
 7575 0056 5148     		ldr	r0, .L342+20
 7576 0058 FFF7FEFF 		bl	__assert_func
 7577              	.L334:
1648:Src/app.c     **** 
1649:Src/app.c     ****     button_process(&ld_toggle_button);
 7578              		.loc 1 1649 5 is_stmt 1
 7579 005c 07F60C73 		addw	r3, r7, #3852
 7580 0060 1846     		mov	r0, r3
 7581 0062 FFF7FEFF 		bl	button_process
1650:Src/app.c     ****     button_process(&hd_toggle_button);
 7582              		.loc 1 1650 5
 7583 0066 07F6FC63 		addw	r3, r7, #3836
 7584 006a 1846     		mov	r0, r3
 7585 006c FFF7FEFF 		bl	button_process
1651:Src/app.c     **** 
1652:Src/app.c     ****     ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
 7586              		.loc 1 1652 11
 7587 0070 454B     		ldr	r3, .L342
 7588 0072 5B6D     		ldr	r3, [r3, #84]
 7589 0074 4FF0FF31 		mov	r1, #-1
 7590 0078 1846     		mov	r0, r3
 7591 007a FFF7FEFF 		bl	xQueueSemaphoreTake
 7592 007e C7F8300F 		str	r0, [r7, #3888]
1653:Src/app.c     ****     assert(ret == pdTRUE);
 7593              		.loc 1 1653 5
 7594 0082 D7F8303F 		ldr	r3, [r7, #3888]
 7595 0086 012B     		cmp	r3, #1
 7596 0088 06D0     		beq	.L335
 7597              		.loc 1 1653 5 is_stmt 0 discriminator 1
 7598 008a 424B     		ldr	r3, .L342+12
 7599 008c 424A     		ldr	r2, .L342+16
 7600 008e 40F27561 		movw	r1, #1653
 7601 0092 4248     		ldr	r0, .L342+20
ARM GAS  /tmp/ccrysqwW.s 			page 201


 7602 0094 FFF7FEFF 		bl	__assert_func
 7603              	.L335:
1654:Src/app.c     ****     info = disp.info;
 7604              		.loc 1 1654 10 is_stmt 1
 7605 0098 07F63873 		addw	r3, r7, #3896
 7606 009c A3F57362 		sub	r2, r3, #3888
 7607 00a0 394B     		ldr	r3, .L342
 7608 00a2 1046     		mov	r0, r2
 7609 00a4 A833     		adds	r3, r3, #168
 7610 00a6 40F6F462 		movw	r2, #3828
 7611 00aa 1946     		mov	r1, r3
 7612 00ac FFF7FEFF 		bl	memcpy
1655:Src/app.c     ****     ret = xSemaphoreGive(disp.lock);
 7613              		.loc 1 1655 11
 7614 00b0 354B     		ldr	r3, .L342
 7615 00b2 586D     		ldr	r0, [r3, #84]
 7616 00b4 0023     		movs	r3, #0
 7617 00b6 0022     		movs	r2, #0
 7618 00b8 0021     		movs	r1, #0
 7619 00ba FFF7FEFF 		bl	xQueueGenericSend
 7620 00be C7F8300F 		str	r0, [r7, #3888]
1656:Src/app.c     ****     assert(ret == pdTRUE);
 7621              		.loc 1 1656 5
 7622 00c2 D7F8303F 		ldr	r3, [r7, #3888]
 7623 00c6 012B     		cmp	r3, #1
 7624 00c8 06D0     		beq	.L336
 7625              		.loc 1 1656 5 is_stmt 0 discriminator 1
 7626 00ca 324B     		ldr	r3, .L342+12
 7627 00cc 324A     		ldr	r2, .L342+16
 7628 00ce 4FF4CF61 		mov	r1, #1656
 7629 00d2 3248     		ldr	r0, .L342+20
 7630 00d4 FFF7FEFF 		bl	__assert_func
 7631              	.L336:
1657:Src/app.c     ****     info.disp_ms = disp_ms;
 7632              		.loc 1 1657 18 is_stmt 1
 7633 00d8 07F63873 		addw	r3, r7, #3896
 7634 00dc A3F57363 		sub	r3, r3, #3888
 7635 00e0 D7F8342F 		ldr	r2, [r7, #3892]
 7636 00e4 1A61     		str	r2, [r3, #16]
1658:Src/app.c     **** 
1659:Src/app.c     ****     ts = HAL_GetTick();
 7637              		.loc 1 1659 10
 7638 00e6 FFF7FEFF 		bl	HAL_GetTick
 7639 00ea C7F82C0F 		str	r0, [r7, #3884]
1660:Src/app.c     ****     dp_update_drawing_area();
 7640              		.loc 1 1660 5
 7641 00ee FFF7FEFF 		bl	dp_update_drawing_area
1661:Src/app.c     ****     Display_NetworkOutput(&info);
 7642              		.loc 1 1661 5
 7643 00f2 07F10803 		add	r3, r7, #8
 7644 00f6 1846     		mov	r0, r3
 7645 00f8 FFF7FEFF 		bl	Display_NetworkOutput
1662:Src/app.c     ****     SCB_CleanDCache_by_Addr(lcd_fg_buffer[lcd_fg_buffer_rd_idx], LCD_FG_WIDTH * LCD_FG_HEIGHT* 2);
 7646              		.loc 1 1662 42
 7647 00fc 284B     		ldr	r3, .L342+24
 7648 00fe 1B68     		ldr	r3, [r3]
 7649 0100 284A     		ldr	r2, .L342+28
ARM GAS  /tmp/ccrysqwW.s 			page 202


 7650 0102 02FB03F3 		mul	r3, r2, r3
 7651 0106 284A     		ldr	r2, .L342+32
 7652 0108 1344     		add	r3, r3, r2
 7653 010a C7F8283F 		str	r3, [r7, #3880]
 7654 010e 254B     		ldr	r3, .L342+28
 7655 0110 C7F8243F 		str	r3, [r7, #3876]
 7656              	.LBB171:
 7657              	.LBB172:
 391:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 7658              		.loc 4 391 8
 7659 0114 D7F8243F 		ldr	r3, [r7, #3876]
 7660 0118 002B     		cmp	r3, #0
 7661 011a 28DD     		ble	.L341
 7662              	.LBB173:
 392:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 7663              		.loc 4 392 36
 7664 011c D7F8283F 		ldr	r3, [r7, #3880]
 392:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 7665              		.loc 4 392 52
 7666 0120 03F01F02 		and	r2, r3, #31
 392:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 7667              		.loc 4 392 32
 7668 0124 D7F8243F 		ldr	r3, [r7, #3876]
 7669 0128 1344     		add	r3, r3, r2
 392:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 7670              		.loc 4 392 16
 7671 012a C7F8203F 		str	r3, [r7, #3872]
 393:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 7672              		.loc 4 393 16
 7673 012e D7F8283F 		ldr	r3, [r7, #3880]
 7674 0132 C7F81C3F 		str	r3, [r7, #3868]
 7675              	.LBB174:
 7676              	.LBB175:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7677              		.loc 5 271 3
 7678              		.syntax unified
 7679              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7680 0136 BFF34F8F 		dsb 0xF
 7681              	@ 0 "" 2
 272:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 7682              		.loc 5 272 1
 7683              		.thumb
 7684              		.syntax unified
 7685 013a 00BF     		nop
 7686              	.L338:
 7687              	.LBE175:
 7688              	.LBE174:
 398:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr += __SCB_DCACHE_LINE_SIZE;
 7689              		.loc 4 398 12
 7690 013c 1B4A     		ldr	r2, .L342+36
 398:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr += __SCB_DCACHE_LINE_SIZE;
 7691              		.loc 4 398 22
 7692 013e D7F81C3F 		ldr	r3, [r7, #3868]
 7693 0142 C2F86832 		str	r3, [r2, #616]
 399:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_size -= __SCB_DCACHE_LINE_SIZE;
 7694              		.loc 4 399 17
 7695 0146 D7F81C3F 		ldr	r3, [r7, #3868]
ARM GAS  /tmp/ccrysqwW.s 			page 203


 7696 014a 2033     		adds	r3, r3, #32
 7697 014c C7F81C3F 		str	r3, [r7, #3868]
 400:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while ( op_size > 0 );
 7698              		.loc 4 400 17
 7699 0150 D7F8203F 		ldr	r3, [r7, #3872]
 7700 0154 203B     		subs	r3, r3, #32
 7701 0156 C7F8203F 		str	r3, [r7, #3872]
 401:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 7702              		.loc 4 401 25 discriminator 1
 7703 015a D7F8203F 		ldr	r3, [r7, #3872]
 7704 015e 002B     		cmp	r3, #0
 7705 0160 ECDC     		bgt	.L338
 7706              	.LBB176:
 7707              	.LBB177:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7708              		.loc 5 271 3
 7709              		.syntax unified
 7710              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7711 0162 BFF34F8F 		dsb 0xF
 7712              	@ 0 "" 2
 272:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 7713              		.loc 5 272 1
 7714              		.thumb
 7715              		.syntax unified
 7716 0166 00BF     		nop
 7717              	.LBE177:
 7718              	.LBE176:
 7719              	.LBB178:
 7720              	.LBB179:
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7721              		.loc 5 260 3
 7722              		.syntax unified
 7723              	@ 260 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7724 0168 BFF36F8F 		isb 0xF
 7725              	@ 0 "" 2
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 7726              		.loc 5 261 1
 7727              		.thumb
 7728              		.syntax unified
 7729 016c 00BF     		nop
 7730              	.L341:
 7731              	.LBE179:
 7732              	.LBE178:
 7733              	.LBE173:
 7734              		.loc 4 407 1
 7735 016e 00BF     		nop
 7736              	.LBE172:
 7737              	.LBE171:
1663:Src/app.c     ****     dp_commit_drawing_area();
 7738              		.loc 1 1663 5
 7739 0170 FFF7FEFF 		bl	dp_commit_drawing_area
1664:Src/app.c     ****     disp_ms = HAL_GetTick() - ts;
 7740              		.loc 1 1664 15
 7741 0174 FFF7FEFF 		bl	HAL_GetTick
 7742 0178 0246     		mov	r2, r0
 7743              		.loc 1 1664 13 discriminator 1
 7744 017a D7F82C3F 		ldr	r3, [r7, #3884]
ARM GAS  /tmp/ccrysqwW.s 			page 204


 7745 017e D31A     		subs	r3, r2, r3
 7746 0180 C7F8343F 		str	r3, [r7, #3892]
1646:Src/app.c     ****     assert(ret == pdTRUE);
 7747              		.loc 1 1646 9
 7748 0184 56E7     		b	.L339
 7749              	.L343:
 7750 0186 00BF     		.align	2
 7751              	.L342:
 7752 0188 00000000 		.word	disp
 7753 018c 00000000 		.word	on_ld_toggle_button_click
 7754 0190 00000000 		.word	on_pd_toggle_button_click
 7755 0194 50000000 		.word	.LC9
 7756 0198 00000000 		.word	__func__.3
 7757 019c 38000000 		.word	.LC7
 7758 01a0 00000000 		.word	lcd_fg_buffer_rd_idx
 7759 01a4 00B80B00 		.word	768000
 7760 01a8 00C05D00 		.word	lcd_fg_buffer
 7761 01ac 00ED00E0 		.word	-536810240
 7762              		.cfi_endproc
 7763              	.LFE7408:
 7765              		.section	.text.isp_thread_fct,"ax",%progbits
 7766              		.align	1
 7767              		.syntax unified
 7768              		.thumb
 7769              		.thumb_func
 7771              	isp_thread_fct:
 7772              	.LFB7409:
1665:Src/app.c     ****   }
1666:Src/app.c     **** }
1667:Src/app.c     **** 
1668:Src/app.c     **** static void isp_thread_fct(void *arg)
1669:Src/app.c     **** {
 7773              		.loc 1 1669 1
 7774              		.cfi_startproc
 7775              		@ args = 0, pretend = 0, frame = 16
 7776              		@ frame_needed = 1, uses_anonymous_args = 0
 7777 0000 80B5     		push	{r7, lr}
 7778              		.cfi_def_cfa_offset 8
 7779              		.cfi_offset 7, -8
 7780              		.cfi_offset 14, -4
 7781 0002 84B0     		sub	sp, sp, #16
 7782              		.cfi_def_cfa_offset 24
 7783 0004 00AF     		add	r7, sp, #0
 7784              		.cfi_def_cfa_register 7
 7785 0006 7860     		str	r0, [r7, #4]
 7786              	.L346:
1670:Src/app.c     ****   int ret;
1671:Src/app.c     **** 
1672:Src/app.c     ****   while (1) {
1673:Src/app.c     ****     ret = xSemaphoreTake(isp_sem, portMAX_DELAY);
 7787              		.loc 1 1673 11
 7788 0008 0A4B     		ldr	r3, .L347
 7789 000a 1B68     		ldr	r3, [r3]
 7790 000c 4FF0FF31 		mov	r1, #-1
 7791 0010 1846     		mov	r0, r3
 7792 0012 FFF7FEFF 		bl	xQueueSemaphoreTake
 7793 0016 F860     		str	r0, [r7, #12]
ARM GAS  /tmp/ccrysqwW.s 			page 205


1674:Src/app.c     ****     assert(ret == pdTRUE);
 7794              		.loc 1 1674 5
 7795 0018 FB68     		ldr	r3, [r7, #12]
 7796 001a 012B     		cmp	r3, #1
 7797 001c 06D0     		beq	.L345
 7798              		.loc 1 1674 5 is_stmt 0 discriminator 1
 7799 001e 064B     		ldr	r3, .L347+4
 7800 0020 064A     		ldr	r2, .L347+8
 7801 0022 40F28A61 		movw	r1, #1674
 7802 0026 0648     		ldr	r0, .L347+12
 7803 0028 FFF7FEFF 		bl	__assert_func
 7804              	.L345:
1675:Src/app.c     **** 
1676:Src/app.c     ****     CAM_IspUpdate();
 7805              		.loc 1 1676 5 is_stmt 1
 7806 002c FFF7FEFF 		bl	CAM_IspUpdate
1673:Src/app.c     ****     assert(ret == pdTRUE);
 7807              		.loc 1 1673 9
 7808 0030 EAE7     		b	.L346
 7809              	.L348:
 7810 0032 00BF     		.align	2
 7811              	.L347:
 7812 0034 00000000 		.word	isp_sem
 7813 0038 50000000 		.word	.LC9
 7814 003c 00000000 		.word	__func__.2
 7815 0040 38000000 		.word	.LC7
 7816              		.cfi_endproc
 7817              	.LFE7409:
 7819              		.section	.text.Display_init,"ax",%progbits
 7820              		.align	1
 7821              		.syntax unified
 7822              		.thumb
 7823              		.thumb_func
 7825              	Display_init:
 7826              	.LFB7410:
1677:Src/app.c     ****   }
1678:Src/app.c     **** }
1679:Src/app.c     **** 
1680:Src/app.c     **** static void Display_init()
1681:Src/app.c     **** {
 7827              		.loc 1 1681 1
 7828              		.cfi_startproc
 7829              		@ args = 0, pretend = 0, frame = 64
 7830              		@ frame_needed = 1, uses_anonymous_args = 0
 7831 0000 80B5     		push	{r7, lr}
 7832              		.cfi_def_cfa_offset 8
 7833              		.cfi_offset 7, -8
 7834              		.cfi_offset 14, -4
 7835 0002 90B0     		sub	sp, sp, #64
 7836              		.cfi_def_cfa_offset 72
 7837 0004 00AF     		add	r7, sp, #0
 7838              		.cfi_def_cfa_register 7
1682:Src/app.c     ****   SCRL_LayerConfig layers_config[2] = {
1683:Src/app.c     ****     {
1684:Src/app.c     ****       .origin = {lcd_bg_area.X0, lcd_bg_area.Y0},
 7839              		.loc 1 1684 29
 7840 0006 344B     		ldr	r3, .L351
ARM GAS  /tmp/ccrysqwW.s 			page 206


 7841 0008 1B68     		ldr	r3, [r3]
1682:Src/app.c     ****   SCRL_LayerConfig layers_config[2] = {
 7842              		.loc 1 1682 20
 7843 000a 9BB2     		uxth	r3, r3
 7844 000c BB83     		strh	r3, [r7, #28]	@ movhi
 7845              		.loc 1 1684 45
 7846 000e 324B     		ldr	r3, .L351
 7847 0010 5B68     		ldr	r3, [r3, #4]
1682:Src/app.c     ****   SCRL_LayerConfig layers_config[2] = {
 7848              		.loc 1 1682 20
 7849 0012 9BB2     		uxth	r3, r3
 7850 0014 FB83     		strh	r3, [r7, #30]	@ movhi
1685:Src/app.c     ****       .size = {lcd_bg_area.XSize, lcd_bg_area.YSize},
 7851              		.loc 1 1685 27
 7852 0016 304B     		ldr	r3, .L351
 7853 0018 9B68     		ldr	r3, [r3, #8]
1682:Src/app.c     ****   SCRL_LayerConfig layers_config[2] = {
 7854              		.loc 1 1682 20
 7855 001a 9BB2     		uxth	r3, r3
 7856 001c 3B84     		strh	r3, [r7, #32]	@ movhi
 7857              		.loc 1 1685 46
 7858 001e 2E4B     		ldr	r3, .L351
 7859 0020 DB68     		ldr	r3, [r3, #12]
1682:Src/app.c     ****   SCRL_LayerConfig layers_config[2] = {
 7860              		.loc 1 1682 20
 7861 0022 9BB2     		uxth	r3, r3
 7862 0024 7B84     		strh	r3, [r7, #34]	@ movhi
 7863 0026 0323     		movs	r3, #3
 7864 0028 87F82430 		strb	r3, [r7, #36]
1686:Src/app.c     **** #if HAS_ROTATION_SUPPORT == 0
1687:Src/app.c     ****       .format = SCRL_RGB888,
1688:Src/app.c     **** #else
1689:Src/app.c     ****       .format = SCRL_ARGB8888,
1690:Src/app.c     **** #endif
1691:Src/app.c     ****       .address = lcd_bg_buffer[lcd_bg_buffer_disp_idx],
 7865              		.loc 1 1691 31
 7866 002c 2B4B     		ldr	r3, .L351+4
 7867 002e 1B68     		ldr	r3, [r3]
 7868              		.loc 1 1691 18
 7869 0030 2B4A     		ldr	r2, .L351+8
 7870 0032 02FB03F3 		mul	r3, r2, r3
 7871 0036 2B4A     		ldr	r2, .L351+12
 7872 0038 1344     		add	r3, r3, r2
1682:Src/app.c     ****     {
 7873              		.loc 1 1682 20
 7874 003a BB62     		str	r3, [r7, #40]
1692:Src/app.c     ****     },
1693:Src/app.c     ****     {
1694:Src/app.c     ****       .origin = {lcd_fg_area.X0, lcd_fg_area.Y0},
 7875              		.loc 1 1694 29
 7876 003c 2A4B     		ldr	r3, .L351+16
 7877 003e 1B68     		ldr	r3, [r3]
1682:Src/app.c     ****     {
 7878              		.loc 1 1682 20
 7879 0040 9BB2     		uxth	r3, r3
 7880 0042 BB85     		strh	r3, [r7, #44]	@ movhi
 7881              		.loc 1 1694 45
ARM GAS  /tmp/ccrysqwW.s 			page 207


 7882 0044 284B     		ldr	r3, .L351+16
 7883 0046 5B68     		ldr	r3, [r3, #4]
1682:Src/app.c     ****     {
 7884              		.loc 1 1682 20
 7885 0048 9BB2     		uxth	r3, r3
 7886 004a FB85     		strh	r3, [r7, #46]	@ movhi
1695:Src/app.c     ****       .size = {lcd_fg_area.XSize, lcd_fg_area.YSize},
 7887              		.loc 1 1695 27
 7888 004c 264B     		ldr	r3, .L351+16
 7889 004e 9B68     		ldr	r3, [r3, #8]
1682:Src/app.c     ****     {
 7890              		.loc 1 1682 20
 7891 0050 9BB2     		uxth	r3, r3
 7892 0052 3B86     		strh	r3, [r7, #48]	@ movhi
 7893              		.loc 1 1695 46
 7894 0054 244B     		ldr	r3, .L351+16
 7895 0056 DB68     		ldr	r3, [r3, #12]
1682:Src/app.c     ****     {
 7896              		.loc 1 1682 20
 7897 0058 9BB2     		uxth	r3, r3
 7898 005a 7B86     		strh	r3, [r7, #50]	@ movhi
 7899 005c 0123     		movs	r3, #1
 7900 005e 87F83430 		strb	r3, [r7, #52]
 7901 0062 224B     		ldr	r3, .L351+20
 7902 0064 BB63     		str	r3, [r7, #56]
1696:Src/app.c     ****       .format = SCRL_ARGB4444,
1697:Src/app.c     ****       .address = lcd_fg_buffer[1],
1698:Src/app.c     ****     },
1699:Src/app.c     ****   };
1700:Src/app.c     ****   SCRL_ScreenConfig screen_config = {
1701:Src/app.c     ****     .size = {lcd_bg_area.XSize, lcd_bg_area.YSize},
 7903              		.loc 1 1701 25
 7904 0066 1C4B     		ldr	r3, .L351
 7905 0068 9B68     		ldr	r3, [r3, #8]
1700:Src/app.c     ****     .size = {lcd_bg_area.XSize, lcd_bg_area.YSize},
 7906              		.loc 1 1700 21
 7907 006a 9BB2     		uxth	r3, r3
 7908 006c BB81     		strh	r3, [r7, #12]	@ movhi
 7909              		.loc 1 1701 44
 7910 006e 1A4B     		ldr	r3, .L351
 7911 0070 DB68     		ldr	r3, [r3, #12]
1700:Src/app.c     ****     .size = {lcd_bg_area.XSize, lcd_bg_area.YSize},
 7912              		.loc 1 1700 21
 7913 0072 9BB2     		uxth	r3, r3
 7914 0074 FB81     		strh	r3, [r7, #14]	@ movhi
 7915 0076 0223     		movs	r3, #2
 7916 0078 3B74     		strb	r3, [r7, #16]
 7917 007a 1D4B     		ldr	r3, .L351+24
 7918 007c 7B61     		str	r3, [r7, #20]
 7919 007e 1E23     		movs	r3, #30
 7920 0080 3B83     		strh	r3, [r7, #24]	@ movhi
1702:Src/app.c     **** #ifdef SCR_LIB_USE_SPI
1703:Src/app.c     ****     .format = SCRL_RGB565,
1704:Src/app.c     **** #else
1705:Src/app.c     ****      .format = SCRL_YUV422, /* Use SCRL_RGB565 if host support this format to reduce cpu load */
1706:Src/app.c     **** #endif
1707:Src/app.c     ****     .address = screen_buffer,
ARM GAS  /tmp/ccrysqwW.s 			page 208


1708:Src/app.c     ****     .fps = CAMERA_FPS,
1709:Src/app.c     ****   };
1710:Src/app.c     ****   int ret;
1711:Src/app.c     **** 
1712:Src/app.c     ****   ret = SCRL_Init((SCRL_LayerConfig *[2]){&layers_config[0], &layers_config[1]}, &screen_config);
 7921              		.loc 1 1712 42
 7922 0082 07F11C03 		add	r3, r7, #28
 7923 0086 7B60     		str	r3, [r7, #4]
 7924 0088 07F11C03 		add	r3, r7, #28
 7925 008c 1033     		adds	r3, r3, #16
 7926 008e BB60     		str	r3, [r7, #8]
 7927              		.loc 1 1712 9
 7928 0090 07F10C02 		add	r2, r7, #12
 7929 0094 3B1D     		adds	r3, r7, #4
 7930 0096 1146     		mov	r1, r2
 7931 0098 1846     		mov	r0, r3
 7932 009a FFF7FEFF 		bl	SCRL_Init
 7933 009e F863     		str	r0, [r7, #60]
1713:Src/app.c     ****   assert(ret == 0);
 7934              		.loc 1 1713 3
 7935 00a0 FB6B     		ldr	r3, [r7, #60]
 7936 00a2 002B     		cmp	r3, #0
 7937 00a4 06D0     		beq	.L350
 7938              		.loc 1 1713 3 is_stmt 0 discriminator 1
 7939 00a6 134B     		ldr	r3, .L351+28
 7940 00a8 134A     		ldr	r2, .L351+32
 7941 00aa 40F2B161 		movw	r1, #1713
 7942 00ae 1348     		ldr	r0, .L351+36
 7943 00b0 FFF7FEFF 		bl	__assert_func
 7944              	.L350:
1714:Src/app.c     **** 
1715:Src/app.c     ****   UTIL_LCD_SetLayer(SCRL_LAYER_1);
 7945              		.loc 1 1715 3 is_stmt 1
 7946 00b4 0120     		movs	r0, #1
 7947 00b6 FFF7FEFF 		bl	UTIL_LCD_SetLayer
1716:Src/app.c     ****   UTIL_LCD_Clear(UTIL_LCD_COLOR_TRANSPARENT);
 7948              		.loc 1 1716 3
 7949 00ba 0020     		movs	r0, #0
 7950 00bc FFF7FEFF 		bl	UTIL_LCD_Clear
1717:Src/app.c     ****   UTIL_LCD_SetFont(&LCD_FONT);
 7951              		.loc 1 1717 3
 7952 00c0 0F48     		ldr	r0, .L351+40
 7953 00c2 FFF7FEFF 		bl	UTIL_LCD_SetFont
1718:Src/app.c     ****   UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 7954              		.loc 1 1718 3
 7955 00c6 4FF0FF30 		mov	r0, #-1
 7956 00ca FFF7FEFF 		bl	UTIL_LCD_SetTextColor
1719:Src/app.c     **** }
 7957              		.loc 1 1719 1
 7958 00ce 00BF     		nop
 7959 00d0 4037     		adds	r7, r7, #64
 7960              		.cfi_def_cfa_offset 8
 7961 00d2 BD46     		mov	sp, r7
 7962              		.cfi_def_cfa_register 13
 7963              		@ sp needed
 7964 00d4 80BD     		pop	{r7, pc}
 7965              	.L352:
ARM GAS  /tmp/ccrysqwW.s 			page 209


 7966 00d6 00BF     		.align	2
 7967              	.L351:
 7968 00d8 00000000 		.word	lcd_bg_area
 7969 00dc 00000000 		.word	lcd_bg_buffer_disp_idx
 7970 00e0 00701700 		.word	1536000
 7971 00e4 00000000 		.word	lcd_bg_buffer
 7972 00e8 00000000 		.word	lcd_fg_area
 7973 00ec 00786900 		.word	lcd_fg_buffer+768000
 7974 00f0 00307500 		.word	screen_buffer
 7975 00f4 60000000 		.word	.LC10
 7976 00f8 00000000 		.word	__func__.1
 7977 00fc 38000000 		.word	.LC7
 7978 0100 00000000 		.word	Font20
 7979              		.cfi_endproc
 7980              	.LFE7410:
 7982              		.section	.rodata
 7983 02ff 00       		.align	2
 7984              	.LC34:
 7985 0300 496E6974 		.ascii	"Init application\000"
 7985      20617070 
 7985      6C696361 
 7985      74696F6E 
 7985      00
 7986 0311 000000   		.align	2
 7987              	.LC36:
 7988 0314 6973705F 		.ascii	"isp_sem\000"
 7988      73656D00 
 7989              		.align	2
 7990              	.LC37:
 7991 031c 64697370 		.ascii	"disp.update\000"
 7991      2E757064 
 7991      61746500 
 7992              		.align	2
 7993              	.LC38:
 7994 0328 64697370 		.ascii	"disp.lock\000"
 7994      2E6C6F63 
 7994      6B00
 7995 0332 0000     		.align	2
 7996              	.LC39:
 7997 0334 6E6E00   		.ascii	"nn\000"
 7998 0337 00       		.align	2
 7999              	.LC40:
 8000 0338 68646C20 		.ascii	"hdl != NULL\000"
 8000      213D204E 
 8000      554C4C00 
 8001              		.align	2
 8002              	.LC41:
 8003 0344 647000   		.ascii	"dp\000"
 8004 0347 00       		.align	2
 8005              	.LC42:
 8006 0348 69737000 		.ascii	"isp\000"
 8007              		.align	2
 8008              	.LC35:
 8009 034c 00E88000 		.word	nn_input_buffers
 8010 0350 00988500 		.word	nn_input_buffers+307200
 8011              		.section	.text.app_run,"ax",%progbits
 8012              		.align	1
ARM GAS  /tmp/ccrysqwW.s 			page 210


 8013              		.global	app_run
 8014              		.syntax unified
 8015              		.thumb
 8016              		.thumb_func
 8018              	app_run:
 8019              	.LFB7411:
1720:Src/app.c     **** 
1721:Src/app.c     **** void app_run()
1722:Src/app.c     **** {
 8020              		.loc 1 1722 1
 8021              		.cfi_startproc
 8022              		@ args = 0, pretend = 0, frame = 64
 8023              		@ frame_needed = 1, uses_anonymous_args = 0
 8024 0000 80B5     		push	{r7, lr}
 8025              		.cfi_def_cfa_offset 8
 8026              		.cfi_offset 7, -8
 8027              		.cfi_offset 14, -4
 8028 0002 94B0     		sub	sp, sp, #80
 8029              		.cfi_def_cfa_offset 88
 8030 0004 04AF     		add	r7, sp, #16
 8031              		.cfi_def_cfa 7, 72
1723:Src/app.c     ****   UBaseType_t isp_priority = FREERTOS_PRIORITY(2);
 8032              		.loc 1 1723 15
 8033 0006 1E23     		movs	r3, #30
 8034 0008 FB63     		str	r3, [r7, #60]
1724:Src/app.c     ****   UBaseType_t dp_priority = FREERTOS_PRIORITY(-2);
 8035              		.loc 1 1724 15
 8036 000a 1A23     		movs	r3, #26
 8037 000c BB63     		str	r3, [r7, #56]
1725:Src/app.c     ****   UBaseType_t nn_priority = FREERTOS_PRIORITY(1);
 8038              		.loc 1 1725 15
 8039 000e 1D23     		movs	r3, #29
 8040 0010 7B63     		str	r3, [r7, #52]
1726:Src/app.c     ****   TaskHandle_t hdl;
1727:Src/app.c     ****   int ret;
1728:Src/app.c     **** 
1729:Src/app.c     ****   printf("Init application\n");
 8041              		.loc 1 1729 3
 8042 0012 8748     		ldr	r0, .L370
 8043 0014 FFF7FEFF 		bl	puts
1730:Src/app.c     ****   /* Enable DWT so DWT_CYCCNT works when debugger not attached */
1731:Src/app.c     ****   CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8044              		.loc 1 1731 12
 8045 0018 864B     		ldr	r3, .L370+4
 8046 001a DB68     		ldr	r3, [r3, #12]
 8047 001c 854A     		ldr	r2, .L370+4
 8048              		.loc 1 1731 20
 8049 001e 43F08073 		orr	r3, r3, #16777216
 8050 0022 D360     		str	r3, [r2, #12]
1732:Src/app.c     **** 
1733:Src/app.c     ****   /* screen init */
1734:Src/app.c     ****   memset(lcd_bg_buffer, 0, sizeof(lcd_bg_buffer));
 8051              		.loc 1 1734 3
 8052 0024 844A     		ldr	r2, .L370+8
 8053 0026 0021     		movs	r1, #0
 8054 0028 8448     		ldr	r0, .L370+12
 8055 002a FFF7FEFF 		bl	memset
ARM GAS  /tmp/ccrysqwW.s 			page 211


1735:Src/app.c     ****   CACHE_OP(SCB_CleanInvalidateDCache_by_Addr(lcd_bg_buffer, sizeof(lcd_bg_buffer)));
 8056              		.loc 1 1735 3
 8057 002e FFF7FEFF 		bl	is_cache_enable
 8058 0032 0346     		mov	r3, r0
 8059              		.loc 1 1735 3 is_stmt 0 discriminator 1
 8060 0034 002B     		cmp	r3, #0
 8061 0036 25D0     		beq	.L354
 8062 0038 804B     		ldr	r3, .L370+12
 8063 003a BB62     		str	r3, [r7, #40]
 8064 003c 7E4B     		ldr	r3, .L370+8
 8065 003e 7B62     		str	r3, [r7, #36]
 8066              	.LBB180:
 8067              	.LBB181:
 408:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 409:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 410:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 411:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   D-Cache Clean and Invalidate by address
 412:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Cleans and invalidates D_Cache for the given address
 413:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            D-Cache is cleaned and invalidated starting from a 32 byte aligned address in 32 byte gr
 414:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            D-Cache memory blocks which are part of given address + given size are cleaned and inval
 415:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   addr    address (aligned to 32-byte boundary)
 416:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   dsize   size of memory block (in number of bytes)
 417:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** */
 418:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_CleanInvalidateDCache_by_Addr (volatile void *addr, int32_t dsize)
 419:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 420:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 421:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     if ( dsize > 0 ) {
 8068              		.loc 4 421 8 is_stmt 1
 8069 0040 7B6A     		ldr	r3, [r7, #36]
 8070 0042 002B     		cmp	r3, #0
 8071 0044 1DDD     		ble	.L367
 8072              	.LBB182:
 422:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8073              		.loc 4 422 36
 8074 0046 BB6A     		ldr	r3, [r7, #40]
 8075              		.loc 4 422 52
 8076 0048 03F01F02 		and	r2, r3, #31
 8077              		.loc 4 422 32
 8078 004c 7B6A     		ldr	r3, [r7, #36]
 8079 004e 1344     		add	r3, r3, r2
 8080              		.loc 4 422 16
 8081 0050 3B62     		str	r3, [r7, #32]
 423:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8082              		.loc 4 423 16
 8083 0052 BB6A     		ldr	r3, [r7, #40]
 8084 0054 FB61     		str	r3, [r7, #28]
 8085              	.LBB183:
 8086              	.LBB184:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8087              		.loc 5 271 3
 8088              		.syntax unified
 8089              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8090 0056 BFF34F8F 		dsb 0xF
 8091              	@ 0 "" 2
 272:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 8092              		.loc 5 272 1
 8093              		.thumb
ARM GAS  /tmp/ccrysqwW.s 			page 212


 8094              		.syntax unified
 8095 005a 00BF     		nop
 8096              	.L356:
 8097              	.LBE184:
 8098              	.LBE183:
 424:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 425:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 426:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 427:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 428:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bi
 8099              		.loc 4 428 12
 8100 005c 784A     		ldr	r2, .L370+16
 8101              		.loc 4 428 23
 8102 005e FB69     		ldr	r3, [r7, #28]
 8103 0060 C2F87032 		str	r3, [r2, #624]
 429:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr +=          __SCB_DCACHE_LINE_SIZE;
 8104              		.loc 4 429 17
 8105 0064 FB69     		ldr	r3, [r7, #28]
 8106 0066 2033     		adds	r3, r3, #32
 8107 0068 FB61     		str	r3, [r7, #28]
 430:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_size -=          __SCB_DCACHE_LINE_SIZE;
 8108              		.loc 4 430 17
 8109 006a 3B6A     		ldr	r3, [r7, #32]
 8110 006c 203B     		subs	r3, r3, #32
 8111 006e 3B62     		str	r3, [r7, #32]
 431:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while ( op_size > 0 );
 8112              		.loc 4 431 25 discriminator 1
 8113 0070 3B6A     		ldr	r3, [r7, #32]
 8114 0072 002B     		cmp	r3, #0
 8115 0074 F2DC     		bgt	.L356
 8116              	.LBB185:
 8117              	.LBB186:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8118              		.loc 5 271 3
 8119              		.syntax unified
 8120              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8121 0076 BFF34F8F 		dsb 0xF
 8122              	@ 0 "" 2
 272:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 8123              		.loc 5 272 1
 8124              		.thumb
 8125              		.syntax unified
 8126 007a 00BF     		nop
 8127              	.LBE186:
 8128              	.LBE185:
 8129              	.LBB187:
 8130              	.LBB188:
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8131              		.loc 5 260 3
 8132              		.syntax unified
 8133              	@ 260 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8134 007c BFF36F8F 		isb 0xF
 8135              	@ 0 "" 2
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 8136              		.loc 5 261 1
 8137              		.thumb
 8138              		.syntax unified
ARM GAS  /tmp/ccrysqwW.s 			page 213


 8139 0080 00BF     		nop
 8140              	.L367:
 8141              	.LBE188:
 8142              	.LBE187:
 8143              	.LBE182:
 432:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 433:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 434:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __ISB();
 435:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     }
 436:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 437:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 8144              		.loc 4 437 1
 8145 0082 00BF     		nop
 8146              	.L354:
 8147              	.LBE181:
 8148              	.LBE180:
1736:Src/app.c     ****   memset(lcd_fg_buffer, 0, sizeof(lcd_fg_buffer));
 8149              		.loc 1 1736 3
 8150 0084 6F4A     		ldr	r2, .L370+20
 8151 0086 0021     		movs	r1, #0
 8152 0088 6F48     		ldr	r0, .L370+24
 8153 008a FFF7FEFF 		bl	memset
1737:Src/app.c     ****   CACHE_OP(SCB_CleanInvalidateDCache_by_Addr(lcd_fg_buffer, sizeof(lcd_fg_buffer)));
 8154              		.loc 1 1737 3
 8155 008e FFF7FEFF 		bl	is_cache_enable
 8156 0092 0346     		mov	r3, r0
 8157              		.loc 1 1737 3 is_stmt 0 discriminator 1
 8158 0094 002B     		cmp	r3, #0
 8159 0096 25D0     		beq	.L357
 8160 0098 6B4B     		ldr	r3, .L370+24
 8161 009a BB61     		str	r3, [r7, #24]
 8162 009c 694B     		ldr	r3, .L370+20
 8163 009e 7B61     		str	r3, [r7, #20]
 8164              	.LBB189:
 8165              	.LBB190:
 421:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8166              		.loc 4 421 8 is_stmt 1
 8167 00a0 7B69     		ldr	r3, [r7, #20]
 8168 00a2 002B     		cmp	r3, #0
 8169 00a4 1DDD     		ble	.L368
 8170              	.LBB191:
 422:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8171              		.loc 4 422 36
 8172 00a6 BB69     		ldr	r3, [r7, #24]
 422:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8173              		.loc 4 422 52
 8174 00a8 03F01F02 		and	r2, r3, #31
 422:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8175              		.loc 4 422 32
 8176 00ac 7B69     		ldr	r3, [r7, #20]
 8177 00ae 1344     		add	r3, r3, r2
 422:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8178              		.loc 4 422 16
 8179 00b0 3B61     		str	r3, [r7, #16]
 423:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 8180              		.loc 4 423 16
 8181 00b2 BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/ccrysqwW.s 			page 214


 8182 00b4 FB60     		str	r3, [r7, #12]
 8183              	.LBB192:
 8184              	.LBB193:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8185              		.loc 5 271 3
 8186              		.syntax unified
 8187              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8188 00b6 BFF34F8F 		dsb 0xF
 8189              	@ 0 "" 2
 272:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 8190              		.loc 5 272 1
 8191              		.thumb
 8192              		.syntax unified
 8193 00ba 00BF     		nop
 8194              	.L359:
 8195              	.LBE193:
 8196              	.LBE192:
 428:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr +=          __SCB_DCACHE_LINE_SIZE;
 8197              		.loc 4 428 12
 8198 00bc 604A     		ldr	r2, .L370+16
 428:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr +=          __SCB_DCACHE_LINE_SIZE;
 8199              		.loc 4 428 23
 8200 00be FB68     		ldr	r3, [r7, #12]
 8201 00c0 C2F87032 		str	r3, [r2, #624]
 429:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_size -=          __SCB_DCACHE_LINE_SIZE;
 8202              		.loc 4 429 17
 8203 00c4 FB68     		ldr	r3, [r7, #12]
 8204 00c6 2033     		adds	r3, r3, #32
 8205 00c8 FB60     		str	r3, [r7, #12]
 430:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while ( op_size > 0 );
 8206              		.loc 4 430 17
 8207 00ca 3B69     		ldr	r3, [r7, #16]
 8208 00cc 203B     		subs	r3, r3, #32
 8209 00ce 3B61     		str	r3, [r7, #16]
 431:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 8210              		.loc 4 431 25 discriminator 1
 8211 00d0 3B69     		ldr	r3, [r7, #16]
 8212 00d2 002B     		cmp	r3, #0
 8213 00d4 F2DC     		bgt	.L359
 8214              	.LBB194:
 8215              	.LBB195:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8216              		.loc 5 271 3
 8217              		.syntax unified
 8218              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8219 00d6 BFF34F8F 		dsb 0xF
 8220              	@ 0 "" 2
 272:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 8221              		.loc 5 272 1
 8222              		.thumb
 8223              		.syntax unified
 8224 00da 00BF     		nop
 8225              	.LBE195:
 8226              	.LBE194:
 8227              	.LBB196:
 8228              	.LBB197:
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccrysqwW.s 			page 215


 8229              		.loc 5 260 3
 8230              		.syntax unified
 8231              	@ 260 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8232 00dc BFF36F8F 		isb 0xF
 8233              	@ 0 "" 2
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 8234              		.loc 5 261 1
 8235              		.thumb
 8236              		.syntax unified
 8237 00e0 00BF     		nop
 8238              	.L368:
 8239              	.LBE197:
 8240              	.LBE196:
 8241              	.LBE191:
 8242              		.loc 4 437 1
 8243 00e2 00BF     		nop
 8244              	.L357:
 8245              	.LBE190:
 8246              	.LBE189:
1738:Src/app.c     ****   Display_init();
 8247              		.loc 1 1738 3
 8248 00e4 FFF7FEFF 		bl	Display_init
1739:Src/app.c     **** 
1740:Src/app.c     ****   /* create buffer queues */
1741:Src/app.c     ****   ret = bqueue_init(&nn_input_queue, 2, (uint8_t *[2]){nn_input_buffers[0], nn_input_buffers[1]});
 8249              		.loc 1 1741 55
 8250 00e8 584A     		ldr	r2, .L370+28
 8251 00ea 3B1D     		adds	r3, r7, #4
 8252 00ec 92E80300 		ldm	r2, {r0, r1}
 8253 00f0 83E80300 		stm	r3, {r0, r1}
 8254              		.loc 1 1741 9
 8255 00f4 3B1D     		adds	r3, r7, #4
 8256 00f6 1A46     		mov	r2, r3
 8257 00f8 0221     		movs	r1, #2
 8258 00fa 5548     		ldr	r0, .L370+32
 8259 00fc FFF7FEFF 		bl	bqueue_init
 8260 0100 3863     		str	r0, [r7, #48]
1742:Src/app.c     ****   assert(ret == 0);
 8261              		.loc 1 1742 3
 8262 0102 3B6B     		ldr	r3, [r7, #48]
 8263 0104 002B     		cmp	r3, #0
 8264 0106 06D0     		beq	.L360
 8265              		.loc 1 1742 3 is_stmt 0 discriminator 1
 8266 0108 524B     		ldr	r3, .L370+36
 8267 010a 534A     		ldr	r2, .L370+40
 8268 010c 40F2CE61 		movw	r1, #1742
 8269 0110 5248     		ldr	r0, .L370+44
 8270 0112 FFF7FEFF 		bl	__assert_func
 8271              	.L360:
1743:Src/app.c     **** 
1744:Src/app.c     ****   cpuload_init(&cpu_load);
 8272              		.loc 1 1744 3 is_stmt 1
 8273 0116 5248     		ldr	r0, .L370+48
 8274 0118 FFF7FEFF 		bl	cpuload_init
1745:Src/app.c     **** 
1746:Src/app.c     ****   /*** Camera Init ************************************************************/  
1747:Src/app.c     ****   CAM_Init();
ARM GAS  /tmp/ccrysqwW.s 			page 216


 8275              		.loc 1 1747 3
 8276 011c FFF7FEFF 		bl	CAM_Init
1748:Src/app.c     **** 
1749:Src/app.c     ****   /* sems + mutex init */
1750:Src/app.c     ****   isp_sem = xSemaphoreCreateCountingStatic(1, 0, &isp_sem_buffer);
 8277              		.loc 1 1750 13
 8278 0120 504A     		ldr	r2, .L370+52
 8279 0122 0021     		movs	r1, #0
 8280 0124 0120     		movs	r0, #1
 8281 0126 FFF7FEFF 		bl	xQueueCreateCountingSemaphoreStatic
 8282 012a 0346     		mov	r3, r0
 8283              		.loc 1 1750 11 discriminator 1
 8284 012c 4E4A     		ldr	r2, .L370+56
 8285 012e 1360     		str	r3, [r2]
1751:Src/app.c     ****   assert(isp_sem);
 8286              		.loc 1 1751 3
 8287 0130 4D4B     		ldr	r3, .L370+56
 8288 0132 1B68     		ldr	r3, [r3]
 8289 0134 002B     		cmp	r3, #0
 8290 0136 06D1     		bne	.L361
 8291              		.loc 1 1751 3 is_stmt 0 discriminator 1
 8292 0138 4C4B     		ldr	r3, .L370+60
 8293 013a 474A     		ldr	r2, .L370+40
 8294 013c 40F2D761 		movw	r1, #1751
 8295 0140 4648     		ldr	r0, .L370+44
 8296 0142 FFF7FEFF 		bl	__assert_func
 8297              	.L361:
1752:Src/app.c     ****   disp.update = xSemaphoreCreateCountingStatic(1, 0, &disp.update_buffer);
 8298              		.loc 1 1752 17 is_stmt 1
 8299 0146 4A4A     		ldr	r2, .L370+64
 8300 0148 0021     		movs	r1, #0
 8301 014a 0120     		movs	r0, #1
 8302 014c FFF7FEFF 		bl	xQueueCreateCountingSemaphoreStatic
 8303 0150 0346     		mov	r3, r0
 8304              		.loc 1 1752 15 discriminator 1
 8305 0152 484A     		ldr	r2, .L370+68
 8306 0154 1360     		str	r3, [r2]
1753:Src/app.c     ****   assert(disp.update);
 8307              		.loc 1 1753 3
 8308 0156 474B     		ldr	r3, .L370+68
 8309 0158 1B68     		ldr	r3, [r3]
 8310 015a 002B     		cmp	r3, #0
 8311 015c 06D1     		bne	.L362
 8312              		.loc 1 1753 3 is_stmt 0 discriminator 1
 8313 015e 464B     		ldr	r3, .L370+72
 8314 0160 3D4A     		ldr	r2, .L370+40
 8315 0162 40F2D961 		movw	r1, #1753
 8316 0166 3D48     		ldr	r0, .L370+44
 8317 0168 FFF7FEFF 		bl	__assert_func
 8318              	.L362:
1754:Src/app.c     ****   disp.lock = xSemaphoreCreateMutexStatic(&disp.lock_buffer);
 8319              		.loc 1 1754 15 is_stmt 1
 8320 016c 4349     		ldr	r1, .L370+76
 8321 016e 0120     		movs	r0, #1
 8322 0170 FFF7FEFF 		bl	xQueueCreateMutexStatic
 8323 0174 0346     		mov	r3, r0
 8324              		.loc 1 1754 13 discriminator 1
ARM GAS  /tmp/ccrysqwW.s 			page 217


 8325 0176 3F4A     		ldr	r2, .L370+68
 8326 0178 5365     		str	r3, [r2, #84]
1755:Src/app.c     ****   assert(disp.lock);
 8327              		.loc 1 1755 3
 8328 017a 3E4B     		ldr	r3, .L370+68
 8329 017c 5B6D     		ldr	r3, [r3, #84]
 8330 017e 002B     		cmp	r3, #0
 8331 0180 06D1     		bne	.L363
 8332              		.loc 1 1755 3 is_stmt 0 discriminator 1
 8333 0182 3F4B     		ldr	r3, .L370+80
 8334 0184 344A     		ldr	r2, .L370+40
 8335 0186 40F2DB61 		movw	r1, #1755
 8336 018a 3448     		ldr	r0, .L370+44
 8337 018c FFF7FEFF 		bl	__assert_func
 8338              	.L363:
1756:Src/app.c     **** 
1757:Src/app.c     ****   /* Start LCD Display camera pipe stream */
1758:Src/app.c     ****   CAM_DisplayPipe_Start(lcd_bg_buffer[0], CMW_MODE_CONTINUOUS);
 8339              		.loc 1 1758 3 is_stmt 1
 8340 0190 0021     		movs	r1, #0
 8341 0192 2A48     		ldr	r0, .L370+12
 8342 0194 FFF7FEFF 		bl	CAM_DisplayPipe_Start
1759:Src/app.c     **** 
1760:Src/app.c     ****   /* threads init */
1761:Src/app.c     ****   hdl = xTaskCreateStatic(nn_thread_fct, "nn", configMINIMAL_STACK_SIZE * 4, NULL, nn_priority, nn_
 8343              		.loc 1 1761 9
 8344 0198 3A4B     		ldr	r3, .L370+84
 8345 019a 0293     		str	r3, [sp, #8]
 8346 019c 3A4B     		ldr	r3, .L370+88
 8347 019e 0193     		str	r3, [sp, #4]
 8348 01a0 7B6B     		ldr	r3, [r7, #52]
 8349 01a2 0093     		str	r3, [sp]
 8350 01a4 0023     		movs	r3, #0
 8351 01a6 4FF48052 		mov	r2, #4096
 8352 01aa 3849     		ldr	r1, .L370+92
 8353 01ac 3848     		ldr	r0, .L370+96
 8354 01ae FFF7FEFF 		bl	xTaskCreateStatic
 8355 01b2 F862     		str	r0, [r7, #44]
1762:Src/app.c     ****                           &nn_thread);
1763:Src/app.c     ****   assert(hdl != NULL);
 8356              		.loc 1 1763 3
 8357 01b4 FB6A     		ldr	r3, [r7, #44]
 8358 01b6 002B     		cmp	r3, #0
 8359 01b8 06D1     		bne	.L364
 8360              		.loc 1 1763 3 is_stmt 0 discriminator 1
 8361 01ba 364B     		ldr	r3, .L370+100
 8362 01bc 264A     		ldr	r2, .L370+40
 8363 01be 40F2E361 		movw	r1, #1763
 8364 01c2 2648     		ldr	r0, .L370+44
 8365 01c4 FFF7FEFF 		bl	__assert_func
 8366              	.L364:
1764:Src/app.c     ****   hdl = xTaskCreateStatic(dp_thread_fct, "dp", configMINIMAL_STACK_SIZE * 2, NULL, dp_priority, dp_
 8367              		.loc 1 1764 9 is_stmt 1
 8368 01c8 334B     		ldr	r3, .L370+104
 8369 01ca 0293     		str	r3, [sp, #8]
 8370 01cc 334B     		ldr	r3, .L370+108
 8371 01ce 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccrysqwW.s 			page 218


 8372 01d0 BB6B     		ldr	r3, [r7, #56]
 8373 01d2 0093     		str	r3, [sp]
 8374 01d4 0023     		movs	r3, #0
 8375 01d6 4FF40062 		mov	r2, #2048
 8376 01da 3149     		ldr	r1, .L370+112
 8377 01dc 3148     		ldr	r0, .L370+116
 8378 01de FFF7FEFF 		bl	xTaskCreateStatic
 8379 01e2 F862     		str	r0, [r7, #44]
1765:Src/app.c     ****                           &dp_thread);
1766:Src/app.c     ****   assert(hdl != NULL);
 8380              		.loc 1 1766 3
 8381 01e4 FB6A     		ldr	r3, [r7, #44]
 8382 01e6 002B     		cmp	r3, #0
 8383 01e8 06D1     		bne	.L365
 8384              		.loc 1 1766 3 is_stmt 0 discriminator 1
 8385 01ea 2A4B     		ldr	r3, .L370+100
 8386 01ec 1A4A     		ldr	r2, .L370+40
 8387 01ee 40F2E661 		movw	r1, #1766
 8388 01f2 1A48     		ldr	r0, .L370+44
 8389 01f4 FFF7FEFF 		bl	__assert_func
 8390              	.L365:
1767:Src/app.c     ****   hdl = xTaskCreateStatic(isp_thread_fct, "isp", configMINIMAL_STACK_SIZE * 2, NULL, isp_priority, 
 8391              		.loc 1 1767 9 is_stmt 1
 8392 01f8 2B4B     		ldr	r3, .L370+120
 8393 01fa 0293     		str	r3, [sp, #8]
 8394 01fc 2B4B     		ldr	r3, .L370+124
 8395 01fe 0193     		str	r3, [sp, #4]
 8396 0200 FB6B     		ldr	r3, [r7, #60]
 8397 0202 0093     		str	r3, [sp]
 8398 0204 0023     		movs	r3, #0
 8399 0206 4FF40062 		mov	r2, #2048
 8400 020a 2949     		ldr	r1, .L370+128
 8401 020c 2948     		ldr	r0, .L370+132
 8402 020e FFF7FEFF 		bl	xTaskCreateStatic
 8403 0212 F862     		str	r0, [r7, #44]
1768:Src/app.c     ****                           &isp_thread);
1769:Src/app.c     ****   assert(hdl != NULL);
 8404              		.loc 1 1769 3
 8405 0214 FB6A     		ldr	r3, [r7, #44]
 8406 0216 002B     		cmp	r3, #0
 8407 0218 06D1     		bne	.L369
 8408              		.loc 1 1769 3 is_stmt 0 discriminator 1
 8409 021a 1E4B     		ldr	r3, .L370+100
 8410 021c 0E4A     		ldr	r2, .L370+40
 8411 021e 40F2E961 		movw	r1, #1769
 8412 0222 0E48     		ldr	r0, .L370+44
 8413 0224 FFF7FEFF 		bl	__assert_func
 8414              	.L369:
1770:Src/app.c     **** }
 8415              		.loc 1 1770 1 is_stmt 1
 8416 0228 00BF     		nop
 8417 022a 4037     		adds	r7, r7, #64
 8418              		.cfi_def_cfa_offset 8
 8419 022c BD46     		mov	sp, r7
 8420              		.cfi_def_cfa_register 13
 8421              		@ sp needed
 8422 022e 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccrysqwW.s 			page 219


 8423              	.L371:
 8424              		.align	2
 8425              	.L370:
 8426 0230 00030000 		.word	.LC34
 8427 0234 F0ED00E0 		.word	-536810000
 8428 0238 00C05D00 		.word	6144000
 8429 023c 00000000 		.word	lcd_bg_buffer
 8430 0240 00ED00E0 		.word	-536810240
 8431 0244 00701700 		.word	1536000
 8432 0248 00C05D00 		.word	lcd_fg_buffer
 8433 024c 4C030000 		.word	.LC35
 8434 0250 00000000 		.word	nn_input_queue
 8435 0254 60000000 		.word	.LC10
 8436 0258 00000000 		.word	__func__.0
 8437 025c 38000000 		.word	.LC7
 8438 0260 00000000 		.word	cpu_load
 8439 0264 00000000 		.word	isp_sem_buffer
 8440 0268 00000000 		.word	isp_sem
 8441 026c 14030000 		.word	.LC36
 8442 0270 04000000 		.word	disp+4
 8443 0274 00000000 		.word	disp
 8444 0278 1C030000 		.word	.LC37
 8445 027c 58000000 		.word	disp+88
 8446 0280 28030000 		.word	.LC38
 8447 0284 00000000 		.word	nn_thread
 8448 0288 00000000 		.word	nn_thread_stack
 8449 028c 34030000 		.word	.LC39
 8450 0290 00000000 		.word	nn_thread_fct
 8451 0294 38030000 		.word	.LC40
 8452 0298 00000000 		.word	dp_thread
 8453 029c 00000000 		.word	dp_thread_stack
 8454 02a0 44030000 		.word	.LC41
 8455 02a4 00000000 		.word	dp_thread_fct
 8456 02a8 00000000 		.word	isp_thread
 8457 02ac 00000000 		.word	isp_thread_stack
 8458 02b0 48030000 		.word	.LC42
 8459 02b4 00000000 		.word	isp_thread_fct
 8460              		.cfi_endproc
 8461              	.LFE7411:
 8463              		.section	.text.CMW_CAMERA_PIPE_FrameEventCallback,"ax",%progbits
 8464              		.align	1
 8465              		.global	CMW_CAMERA_PIPE_FrameEventCallback
 8466              		.syntax unified
 8467              		.thumb
 8468              		.thumb_func
 8470              	CMW_CAMERA_PIPE_FrameEventCallback:
 8471              	.LFB7412:
1771:Src/app.c     **** 
1772:Src/app.c     **** int CMW_CAMERA_PIPE_FrameEventCallback(uint32_t pipe)
1773:Src/app.c     **** {
 8472              		.loc 1 1773 1
 8473              		.cfi_startproc
 8474              		@ args = 0, pretend = 0, frame = 8
 8475              		@ frame_needed = 1, uses_anonymous_args = 0
 8476 0000 80B5     		push	{r7, lr}
 8477              		.cfi_def_cfa_offset 8
 8478              		.cfi_offset 7, -8
ARM GAS  /tmp/ccrysqwW.s 			page 220


 8479              		.cfi_offset 14, -4
 8480 0002 82B0     		sub	sp, sp, #8
 8481              		.cfi_def_cfa_offset 16
 8482 0004 00AF     		add	r7, sp, #0
 8483              		.cfi_def_cfa_register 7
 8484 0006 7860     		str	r0, [r7, #4]
1774:Src/app.c     ****   if (pipe == DCMIPP_PIPE1)
 8485              		.loc 1 1774 6
 8486 0008 7B68     		ldr	r3, [r7, #4]
 8487 000a 012B     		cmp	r3, #1
 8488 000c 02D1     		bne	.L373
1775:Src/app.c     ****     app_main_pipe_frame_event();
 8489              		.loc 1 1775 5
 8490 000e FFF7FEFF 		bl	app_main_pipe_frame_event
 8491 0012 04E0     		b	.L374
 8492              	.L373:
1776:Src/app.c     ****   else if (pipe == DCMIPP_PIPE2)
 8493              		.loc 1 1776 11
 8494 0014 7B68     		ldr	r3, [r7, #4]
 8495 0016 022B     		cmp	r3, #2
 8496 0018 01D1     		bne	.L374
1777:Src/app.c     ****     app_ancillary_pipe_frame_event();
 8497              		.loc 1 1777 5
 8498 001a FFF7FEFF 		bl	app_ancillary_pipe_frame_event
 8499              	.L374:
1778:Src/app.c     **** 
1779:Src/app.c     ****   return HAL_OK;
 8500              		.loc 1 1779 10
 8501 001e 0023     		movs	r3, #0
1780:Src/app.c     **** }
 8502              		.loc 1 1780 1
 8503 0020 1846     		mov	r0, r3
 8504 0022 0837     		adds	r7, r7, #8
 8505              		.cfi_def_cfa_offset 8
 8506 0024 BD46     		mov	sp, r7
 8507              		.cfi_def_cfa_register 13
 8508              		@ sp needed
 8509 0026 80BD     		pop	{r7, pc}
 8510              		.cfi_endproc
 8511              	.LFE7412:
 8513              		.section	.text.CMW_CAMERA_PIPE_VsyncEventCallback,"ax",%progbits
 8514              		.align	1
 8515              		.global	CMW_CAMERA_PIPE_VsyncEventCallback
 8516              		.syntax unified
 8517              		.thumb
 8518              		.thumb_func
 8520              	CMW_CAMERA_PIPE_VsyncEventCallback:
 8521              	.LFB7413:
1781:Src/app.c     **** 
1782:Src/app.c     **** int CMW_CAMERA_PIPE_VsyncEventCallback(uint32_t pipe)
1783:Src/app.c     **** {
 8522              		.loc 1 1783 1
 8523              		.cfi_startproc
 8524              		@ args = 0, pretend = 0, frame = 8
 8525              		@ frame_needed = 1, uses_anonymous_args = 0
 8526 0000 80B5     		push	{r7, lr}
 8527              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccrysqwW.s 			page 221


 8528              		.cfi_offset 7, -8
 8529              		.cfi_offset 14, -4
 8530 0002 82B0     		sub	sp, sp, #8
 8531              		.cfi_def_cfa_offset 16
 8532 0004 00AF     		add	r7, sp, #0
 8533              		.cfi_def_cfa_register 7
 8534 0006 7860     		str	r0, [r7, #4]
1784:Src/app.c     ****   if (pipe == DCMIPP_PIPE1)
 8535              		.loc 1 1784 6
 8536 0008 7B68     		ldr	r3, [r7, #4]
 8537 000a 012B     		cmp	r3, #1
 8538 000c 01D1     		bne	.L377
1785:Src/app.c     ****     app_main_pipe_vsync_event();
 8539              		.loc 1 1785 5
 8540 000e FFF7FEFF 		bl	app_main_pipe_vsync_event
 8541              	.L377:
1786:Src/app.c     **** 
1787:Src/app.c     ****   return HAL_OK;
 8542              		.loc 1 1787 10
 8543 0012 0023     		movs	r3, #0
1788:Src/app.c     **** }
 8544              		.loc 1 1788 1
 8545 0014 1846     		mov	r0, r3
 8546 0016 0837     		adds	r7, r7, #8
 8547              		.cfi_def_cfa_offset 8
 8548 0018 BD46     		mov	sp, r7
 8549              		.cfi_def_cfa_register 13
 8550              		@ sp needed
 8551 001a 80BD     		pop	{r7, pc}
 8552              		.cfi_endproc
 8553              	.LFE7413:
 8555              		.section	.rodata.__func__.25,"a"
 8556              		.align	2
 8559              	__func__.25:
 8560 0000 62757474 		.ascii	"button_init\000"
 8560      6F6E5F69 
 8560      6E697400 
 8561              		.section	.rodata.__func__.24,"a"
 8562              		.align	2
 8565              	__func__.24:
 8566 0000 62717565 		.ascii	"bqueue_init\000"
 8566      75655F69 
 8566      6E697400 
 8567              		.section	.rodata.__func__.23,"a"
 8568              		.align	2
 8571              	__func__.23:
 8572 0000 62717565 		.ascii	"bqueue_put_free\000"
 8572      75655F70 
 8572      75745F66 
 8572      72656500 
 8573              		.section	.rodata.__func__.22,"a"
 8574              		.align	2
 8577              	__func__.22:
 8578 0000 62717565 		.ascii	"bqueue_get_ready\000"
 8578      75655F67 
 8578      65745F72 
 8578      65616479 
ARM GAS  /tmp/ccrysqwW.s 			page 222


 8578      00
 8579              		.section	.rodata.__func__.21,"a"
 8580              		.align	2
 8583              	__func__.21:
 8584 0000 62717565 		.ascii	"bqueue_put_ready\000"
 8584      75655F70 
 8584      75745F72 
 8584      65616479 
 8584      00
 8585              		.section	.rodata.__func__.20,"a"
 8586              		.align	2
 8589              	__func__.20:
 8590 0000 72656C6F 		.ascii	"reload_bg_layer\000"
 8590      61645F62 
 8590      675F6C61 
 8590      79657200 
 8591              		.section	.rodata.__func__.19,"a"
 8592              		.align	2
 8595              	__func__.19:
 8596 0000 6170705F 		.ascii	"app_main_pipe_frame_event\000"
 8596      6D61696E 
 8596      5F706970 
 8596      655F6672 
 8596      616D655F 
 8597              		.section	.rodata.__func__.18,"a"
 8598              		.align	2
 8601              	__func__.18:
 8602 0000 6170705F 		.ascii	"app_ancillary_pipe_frame_event\000"
 8602      616E6369 
 8602      6C6C6172 
 8602      795F7069 
 8602      70655F66 
 8603              		.section	.bss.x.17,"aw",%nobits
 8604              		.align	2
 8607              	x.17:
 8608 0000 00000000 		.space	1872
 8608      00000000 
 8608      00000000 
 8608      00000000 
 8608      00000000 
 8609              		.section	.bss.y.16,"aw",%nobits
 8610              		.align	2
 8613              	y.16:
 8614 0000 00000000 		.space	1872
 8614      00000000 
 8614      00000000 
 8614      00000000 
 8614      00000000 
 8615              		.section	.bss.is_clamped.15,"aw",%nobits
 8616              		.align	2
 8619              	is_clamped.15:
 8620 0000 00000000 		.space	1872
 8620      00000000 
 8620      00000000 
 8620      00000000 
 8620      00000000 
 8621              		.section	.rodata.__func__.14,"a"
ARM GAS  /tmp/ccrysqwW.s 			page 223


 8622              		.align	2
 8625              	__func__.14:
 8626 0000 796F6C6F 		.ascii	"yolo_detector_init\000"
 8626      5F646574 
 8626      6563746F 
 8626      725F696E 
 8626      697400
 8627              		.section	.rodata.__func__.13,"a"
 8628              		.align	2
 8631              	__func__.13:
 8632 0000 796F6C6F 		.ascii	"yolo_detector_run\000"
 8632      5F646574 
 8632      6563746F 
 8632      725F7275 
 8632      6E00
 8633              		.section	.rodata.__func__.12,"a"
 8634              		.align	2
 8637              	__func__.12:
 8638 0000 66616365 		.ascii	"face_landmark_init\000"
 8638      5F6C616E 
 8638      646D6172 
 8638      6B5F696E 
 8638      697400
 8639              		.section	.rodata.__func__.11,"a"
 8640              		.align	2
 8643              	__func__.11:
 8644 0000 66616365 		.ascii	"face_landmark_prepare_input\000"
 8644      5F6C616E 
 8644      646D6172 
 8644      6B5F7072 
 8644      65706172 
 8645              		.section	.rodata.__func__.10,"a"
 8646              		.align	2
 8649              	__func__.10:
 8650 0000 68616E64 		.ascii	"hand_landmark_prepare_input\000"
 8650      5F6C616E 
 8650      646D6172 
 8650      6B5F7072 
 8650      65706172 
 8651              		.section	.rodata.__func__.9,"a"
 8652              		.align	2
 8655              	__func__.9:
 8656 0000 6170705F 		.ascii	"app_rot_init\000"
 8656      726F745F 
 8656      696E6974 
 8656      00
 8657              		.section	.rodata.__func__.8,"a"
 8658              		.align	2
 8661              	__func__.8:
 8662 0000 6E6E5F74 		.ascii	"nn_thread_fct\000"
 8662      68726561 
 8662      645F6663 
 8662      7400
 8663              		.section	.rodata.__func__.7,"a"
 8664              		.align	2
 8667              	__func__.7:
 8668 0000 64705F75 		.ascii	"dp_update_drawing_area\000"
ARM GAS  /tmp/ccrysqwW.s 			page 224


 8668      70646174 
 8668      655F6472 
 8668      6177696E 
 8668      675F6172 
 8669              		.section	.rodata.__func__.6,"a"
 8670              		.align	2
 8673              	__func__.6:
 8674 0000 64705F63 		.ascii	"dp_commit_drawing_area\000"
 8674      6F6D6D69 
 8674      745F6472 
 8674      6177696E 
 8674      675F6172 
 8675              		.section	.rodata.__func__.5,"a"
 8676              		.align	2
 8679              	__func__.5:
 8680 0000 6F6E5F6C 		.ascii	"on_ld_toggle_button_click\000"
 8680      645F746F 
 8680      67676C65 
 8680      5F627574 
 8680      746F6E5F 
 8681              		.section	.rodata.__func__.4,"a"
 8682              		.align	2
 8685              	__func__.4:
 8686 0000 6F6E5F70 		.ascii	"on_pd_toggle_button_click\000"
 8686      645F746F 
 8686      67676C65 
 8686      5F627574 
 8686      746F6E5F 
 8687              		.section	.rodata.__func__.3,"a"
 8688              		.align	2
 8691              	__func__.3:
 8692 0000 64705F74 		.ascii	"dp_thread_fct\000"
 8692      68726561 
 8692      645F6663 
 8692      7400
 8693              		.section	.rodata.__func__.2,"a"
 8694              		.align	2
 8697              	__func__.2:
 8698 0000 6973705F 		.ascii	"isp_thread_fct\000"
 8698      74687265 
 8698      61645F66 
 8698      637400
 8699              		.section	.rodata.__func__.1,"a"
 8700              		.align	2
 8703              	__func__.1:
 8704 0000 44697370 		.ascii	"Display_init\000"
 8704      6C61795F 
 8704      696E6974 
 8704      00
 8705              		.section	.rodata.__func__.0,"a"
 8706              		.align	2
 8709              	__func__.0:
 8710 0000 6170705F 		.ascii	"app_run\000"
 8710      72756E00 
 8711              		.text
 8712              	.Letext0:
 8713              		.file 6 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
ARM GAS  /tmp/ccrysqwW.s 			page 225


 8714              		.file 7 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 8715              		.file 8 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 8716              		.file 9 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 8717              		.file 10 "Lib/FreeRTOS/Source/include/projdefs.h"
 8718              		.file 11 "Lib/FreeRTOS/Source/portable/GCC/ARM_CM55_NTZ/non_secure/portmacrocommon.h"
 8719              		.file 12 "Lib/FreeRTOS/Source/include/FreeRTOS.h"
 8720              		.file 13 "Lib/FreeRTOS/Source/include/task.h"
 8721              		.file 14 "Lib/FreeRTOS/Source/include/queue.h"
 8722              		.file 15 "Lib/FreeRTOS/Source/include/semphr.h"
 8723              		.file 16 "STM32Cube_FW_N6/Drivers/CMSIS/Include/core_cm55.h"
 8724              		.file 17 "STM32Cube_FW_N6/Drivers/CMSIS/Device/ST/STM32N6xx/Include/stm32n657xx.h"
 8725              		.file 18 "STM32Cube_FW_N6/Drivers/CMSIS/Device/ST/STM32N6xx/Include/stm32n6xx.h"
 8726              		.file 19 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_def.h"
 8727              		.file 20 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_gpio.h"
 8728              		.file 21 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_dcmipp.h"
 8729              		.file 22 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_gfxmmu.h"
 8730              		.file 23 "Lib/lib_vision_models_pp/lib_vision_models_pp/Inc/od_pp_output_if.h"
 8731              		.file 24 "Lib/lib_vision_models_pp/lib_vision_models_pp/Inc/od_yolov8_pp_if.h"
 8732              		.file 25 "Lib/lib_vision_models_pp/lib_vision_models_pp/Inc/pd_pp_output_if.h"
 8733              		.file 26 "Inc/ld.h"
 8734              		.file 27 "Lib/screenl/Inc/scrl.h"
 8735              		.file 28 "STM32Cube_FW_N6/Drivers/BSP/STM32N6570-DK/stm32n6570_discovery.h"
 8736              		.file 29 "STM32Cube_FW_N6/Utilities/lcd/../Fonts/fonts.h"
 8737              		.file 30 "STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.h"
 8738              		.file 31 "Lib/NemaGFX/include/nema_hal.h"
 8739              		.file 32 "Lib/NemaGFX/include/nema_cmdlist.h"
 8740              		.file 33 "Lib/NemaGFX/include/nema_matrix3x3.h"
 8741              		.file 34 "Lib/NemaGFX/include/nema_graphics.h"
 8742              		.file 35 "Inc/app_cam.h"
 8743              		.file 36 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-
 8744              		.file 37 "Lib/NemaGFX/include/nema_error.h"
 8745              		.file 38 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_icache.h"
 8746              		.file 39 "Lib/ipl/Inc/IPL_resize.h"
 8747              		.file 40 "Lib/ai-postprocessing-wrapper/app_postprocess.h"
 8748              		.file 41 "Lib/AI_Runtime/Npu/ll_aton/ll_aton_runtime.h"
 8749              		.file 42 "Inc/stm32_lcd_ex.h"
 8750              		.file 43 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-
 8751              		.file 44 "Lib/Camera_Middleware/cmw_camera.h"
 8752              		.file 45 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal.h"
 8753              		.file 46 "Inc/FreeRTOSConfig.h"
 8754              		.file 47 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-
 8755              		.file 48 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-
ARM GAS  /tmp/ccrysqwW.s 			page 226


DEFINED SYMBOLS
                            *ABS*:00000000 app.c
     /tmp/ccrysqwW.s:26     .text.LL_Buffer_addr_base:00000000 $t
     /tmp/ccrysqwW.s:31     .text.LL_Buffer_addr_base:00000000 LL_Buffer_addr_base
     /tmp/ccrysqwW.s:83     .text.LL_Buffer_addr_start:00000000 $t
     /tmp/ccrysqwW.s:88     .text.LL_Buffer_addr_start:00000000 LL_Buffer_addr_start
     /tmp/ccrysqwW.s:124    .text.LL_Buffer_len:00000000 $t
     /tmp/ccrysqwW.s:129    .text.LL_Buffer_len:00000000 LL_Buffer_len
     /tmp/ccrysqwW.s:167    .text.nema_set_blend_blit:00000000 $t
     /tmp/ccrysqwW.s:172    .text.nema_set_blend_blit:00000000 nema_set_blend_blit
     /tmp/ccrysqwW.s:206    .data.lcd_bg_area:00000000 $d
     /tmp/ccrysqwW.s:209    .data.lcd_bg_area:00000000 lcd_bg_area
     /tmp/ccrysqwW.s:215    .data.lcd_fg_area:00000000 $d
     /tmp/ccrysqwW.s:218    .data.lcd_fg_area:00000000 lcd_fg_area
     /tmp/ccrysqwW.s:224    .psram_bss:00000000 $d
     /tmp/ccrysqwW.s:227    .psram_bss:00000000 lcd_bg_buffer
     /tmp/ccrysqwW.s:230    .data.lcd_bg_buffer_disp_idx:00000000 $d
     /tmp/ccrysqwW.s:233    .data.lcd_bg_buffer_disp_idx:00000000 lcd_bg_buffer_disp_idx
     /tmp/ccrysqwW.s:236    .bss.lcd_bg_buffer_capt_idx:00000000 $d
     /tmp/ccrysqwW.s:239    .bss.lcd_bg_buffer_capt_idx:00000000 lcd_bg_buffer_capt_idx
     /tmp/ccrysqwW.s:245    .psram_bss:005dc000 lcd_fg_buffer
     /tmp/ccrysqwW.s:248    .bss.lcd_fg_buffer_rd_idx:00000000 $d
     /tmp/ccrysqwW.s:251    .bss.lcd_fg_buffer_rd_idx:00000000 lcd_fg_buffer_rd_idx
     /tmp/ccrysqwW.s:254    .data.disp:00000000 $d
     /tmp/ccrysqwW.s:257    .data.disp:00000000 disp
     /tmp/ccrysqwW.s:264    .bss.cpu_load:00000000 $d
     /tmp/ccrysqwW.s:267    .bss.cpu_load:00000000 cpu_load
     /tmp/ccrysqwW.s:273    .psram_bss:00753000 screen_buffer
     /tmp/ccrysqwW.s:276    .rodata:00000000 $d
     /tmp/ccrysqwW.s:280    .rodata.NN_Interface_yolo_detector:00000000 $d
     /tmp/ccrysqwW.s:283    .rodata.NN_Interface_yolo_detector:00000000 NN_Interface_yolo_detector
     /tmp/ccrysqwW.s:296    .data.NN_Instance_yolo_detector:00000000 $d
     /tmp/ccrysqwW.s:299    .data.NN_Instance_yolo_detector:00000000 NN_Instance_yolo_detector
     /tmp/ccrysqwW.s:308    .rodata.NN_Interface_face_landmark:00000000 $d
     /tmp/ccrysqwW.s:311    .rodata.NN_Interface_face_landmark:00000000 NN_Interface_face_landmark
     /tmp/ccrysqwW.s:324    .data.NN_Instance_face_landmark:00000000 $d
     /tmp/ccrysqwW.s:327    .data.NN_Instance_face_landmark:00000000 NN_Instance_face_landmark
     /tmp/ccrysqwW.s:332    .bss.rois:00000000 $d
     /tmp/ccrysqwW.s:335    .bss.rois:00000000 rois
     /tmp/ccrysqwW.s:338    .bss.ld_landmarks:00000000 $d
     /tmp/ccrysqwW.s:341    .bss.ld_landmarks:00000000 ld_landmarks
     /tmp/ccrysqwW.s:344    .bss.frame_event_nb:00000000 $d
     /tmp/ccrysqwW.s:347    .bss.frame_event_nb:00000000 frame_event_nb
     /tmp/ccrysqwW.s:350    .bss.frame_event_nb_for_resize:00000000 $d
     /tmp/ccrysqwW.s:353    .bss.frame_event_nb_for_resize:00000000 frame_event_nb_for_resize
     /tmp/ccrysqwW.s:359    .psram_bss:0080e800 nn_input_buffers
     /tmp/ccrysqwW.s:362    .bss.nn_input_queue:00000000 $d
     /tmp/ccrysqwW.s:365    .bss.nn_input_queue:00000000 nn_input_queue
     /tmp/ccrysqwW.s:368    .bss.nn_thread:00000000 $d
     /tmp/ccrysqwW.s:371    .bss.nn_thread:00000000 nn_thread
     /tmp/ccrysqwW.s:374    .bss.nn_thread_stack:00000000 $d
     /tmp/ccrysqwW.s:377    .bss.nn_thread_stack:00000000 nn_thread_stack
     /tmp/ccrysqwW.s:380    .bss.dp_thread:00000000 $d
     /tmp/ccrysqwW.s:383    .bss.dp_thread:00000000 dp_thread
     /tmp/ccrysqwW.s:386    .bss.dp_thread_stack:00000000 $d
     /tmp/ccrysqwW.s:389    .bss.dp_thread_stack:00000000 dp_thread_stack
     /tmp/ccrysqwW.s:392    .bss.isp_thread:00000000 $d
ARM GAS  /tmp/ccrysqwW.s 			page 227


     /tmp/ccrysqwW.s:395    .bss.isp_thread:00000000 isp_thread
     /tmp/ccrysqwW.s:398    .bss.isp_thread_stack:00000000 $d
     /tmp/ccrysqwW.s:401    .bss.isp_thread_stack:00000000 isp_thread_stack
     /tmp/ccrysqwW.s:404    .bss.isp_sem:00000000 $d
     /tmp/ccrysqwW.s:407    .bss.isp_sem:00000000 isp_sem
     /tmp/ccrysqwW.s:410    .bss.isp_sem_buffer:00000000 $d
     /tmp/ccrysqwW.s:413    .bss.isp_sem_buffer:00000000 isp_sem_buffer
     /tmp/ccrysqwW.s:416    .bss.hgfxmmu:00000000 $d
     /tmp/ccrysqwW.s:419    .bss.hgfxmmu:00000000 hgfxmmu
     /tmp/ccrysqwW.s:422    .bss.cl:00000000 $d
     /tmp/ccrysqwW.s:425    .bss.cl:00000000 cl
     /tmp/ccrysqwW.s:428    .text.is_cache_enable:00000000 $t
     /tmp/ccrysqwW.s:433    .text.is_cache_enable:00000000 is_cache_enable
     /tmp/ccrysqwW.s:460    .text.pd_normalize_angle:00000000 $t
     /tmp/ccrysqwW.s:465    .text.pd_normalize_angle:00000000 pd_normalize_angle
     /tmp/ccrysqwW.s:523    .text.pd_normalize_angle:00000060 $d
     /tmp/ccrysqwW.s:531    .text.pd_cook_rotation:00000000 $t
     /tmp/ccrysqwW.s:536    .text.pd_cook_rotation:00000000 pd_cook_rotation
     /tmp/ccrysqwW.s:570    .text.pd_compute_rotation:00000000 $t
     /tmp/ccrysqwW.s:575    .text.pd_compute_rotation:00000000 pd_compute_rotation
     /tmp/ccrysqwW.s:658    .text.pd_compute_rotation:00000090 $d
     /tmp/ccrysqwW.s:664    .text.cvt_pd_coord_to_screen_coord:00000000 $t
     /tmp/ccrysqwW.s:669    .text.cvt_pd_coord_to_screen_coord:00000000 cvt_pd_coord_to_screen_coord
     /tmp/ccrysqwW.s:786    .text.cvt_pd_coord_to_screen_coord:000000c0 $d
     /tmp/ccrysqwW.s:791    .text.roi_shift_and_scale:00000000 $t
     /tmp/ccrysqwW.s:796    .text.roi_shift_and_scale:00000000 roi_shift_and_scale
     /tmp/ccrysqwW.s:976    .text.pd_box_to_roi:00000000 $t
     /tmp/ccrysqwW.s:981    .text.pd_box_to_roi:00000000 pd_box_to_roi
     /tmp/ccrysqwW.s:1055   .text.pd_box_to_roi:00000068 $d
     /tmp/ccrysqwW.s:1060   .text.copy_yolo_box:00000000 $t
     /tmp/ccrysqwW.s:1065   .text.copy_yolo_box:00000000 copy_yolo_box
     /tmp/ccrysqwW.s:1132   .text.copy_pd_box:00000000 $t
     /tmp/ccrysqwW.s:1137   .text.copy_pd_box:00000000 copy_pd_box
     /tmp/ccrysqwW.s:1239   .text.button_init:00000000 $t
     /tmp/ccrysqwW.s:1244   .text.button_init:00000000 button_init
     /tmp/ccrysqwW.s:1307   .text.button_init:00000050 $d
     /tmp/ccrysqwW.s:8559   .rodata.__func__.25:00000000 __func__.25
     /tmp/ccrysqwW.s:1314   .text.button_process:00000000 $t
     /tmp/ccrysqwW.s:1319   .text.button_process:00000000 button_process
     /tmp/ccrysqwW.s:1385   .text.cpuload_init:00000000 $t
     /tmp/ccrysqwW.s:1390   .text.cpuload_init:00000000 cpuload_init
     /tmp/ccrysqwW.s:1422   .text.cpuload_update:00000000 $t
     /tmp/ccrysqwW.s:1427   .text.cpuload_update:00000000 cpuload_update
     /tmp/ccrysqwW.s:1560   .text.cpuload_get_info:00000000 $t
     /tmp/ccrysqwW.s:1565   .text.cpuload_get_info:00000000 cpuload_get_info
     /tmp/ccrysqwW.s:1732   .text.cpuload_get_info:00000140 $d
     /tmp/ccrysqwW.s:1742   .text.bqueue_init:00000000 $t
     /tmp/ccrysqwW.s:1747   .text.bqueue_init:00000000 bqueue_init
     /tmp/ccrysqwW.s:1893   .text.bqueue_init:000000d0 $d
     /tmp/ccrysqwW.s:8565   .rodata.__func__.24:00000000 __func__.24
     /tmp/ccrysqwW.s:1900   .text.bqueue_get_free:00000000 $t
     /tmp/ccrysqwW.s:1905   .text.bqueue_get_free:00000000 bqueue_get_free
     /tmp/ccrysqwW.s:1991   .text.bqueue_put_free:00000000 $t
     /tmp/ccrysqwW.s:1996   .text.bqueue_put_free:00000000 bqueue_put_free
     /tmp/ccrysqwW.s:2041   .text.bqueue_put_free:00000034 $d
     /tmp/ccrysqwW.s:8571   .rodata.__func__.23:00000000 __func__.23
     /tmp/ccrysqwW.s:2048   .text.bqueue_get_ready:00000000 $t
ARM GAS  /tmp/ccrysqwW.s 			page 228


     /tmp/ccrysqwW.s:2053   .text.bqueue_get_ready:00000000 bqueue_get_ready
     /tmp/ccrysqwW.s:2124   .text.bqueue_get_ready:00000068 $d
     /tmp/ccrysqwW.s:8577   .rodata.__func__.22:00000000 __func__.22
     /tmp/ccrysqwW.s:2131   .text.bqueue_put_ready:00000000 $t
     /tmp/ccrysqwW.s:2136   .text.bqueue_put_ready:00000000 bqueue_put_ready
     /tmp/ccrysqwW.s:2220   .text.bqueue_put_ready:00000078 $d
     /tmp/ccrysqwW.s:8583   .rodata.__func__.21:00000000 __func__.21
     /tmp/ccrysqwW.s:2232   .text.reload_bg_layer:00000000 $t
     /tmp/ccrysqwW.s:2237   .text.reload_bg_layer:00000000 reload_bg_layer
     /tmp/ccrysqwW.s:2314   .text.reload_bg_layer:00000070 $d
     /tmp/ccrysqwW.s:8589   .rodata.__func__.20:00000000 __func__.20
     /tmp/ccrysqwW.s:2327   .text.app_main_pipe_frame_event:00000000 $t
     /tmp/ccrysqwW.s:2332   .text.app_main_pipe_frame_event:00000000 app_main_pipe_frame_event
     /tmp/ccrysqwW.s:2420   .text.app_main_pipe_frame_event:00000088 $d
     /tmp/ccrysqwW.s:8595   .rodata.__func__.19:00000000 __func__.19
     /tmp/ccrysqwW.s:2432   .text.app_ancillary_pipe_frame_event:00000000 $t
     /tmp/ccrysqwW.s:2437   .text.app_ancillary_pipe_frame_event:00000000 app_ancillary_pipe_frame_event
     /tmp/ccrysqwW.s:2503   .text.app_ancillary_pipe_frame_event:00000054 $d
     /tmp/ccrysqwW.s:8601   .rodata.__func__.18:00000000 __func__.18
     /tmp/ccrysqwW.s:2513   .text.app_main_pipe_vsync_event:00000000 $t
     /tmp/ccrysqwW.s:2518   .text.app_main_pipe_vsync_event:00000000 app_main_pipe_vsync_event
     /tmp/ccrysqwW.s:2567   .text.app_main_pipe_vsync_event:00000038 $d
     /tmp/ccrysqwW.s:2573   .text.clamp_point:00000000 $t
     /tmp/ccrysqwW.s:2578   .text.clamp_point:00000000 clamp_point
     /tmp/ccrysqwW.s:2701   .text.clamp_point:0000008c $d
     /tmp/ccrysqwW.s:2706   .text.clamp_point_with_margin:00000000 $t
     /tmp/ccrysqwW.s:2711   .text.clamp_point_with_margin:00000000 clamp_point_with_margin
     /tmp/ccrysqwW.s:2849   .text.clamp_point_with_margin:000000a4 $d
     /tmp/ccrysqwW.s:2854   .text.display_pd_hand:00000000 $t
     /tmp/ccrysqwW.s:2859   .text.display_pd_hand:00000000 display_pd_hand
     /tmp/ccrysqwW.s:3080   .text.display_pd_hand:0000015c $d
     /tmp/ccrysqwW.s:3086   .text.rotate_point:00000000 $t
     /tmp/ccrysqwW.s:3091   .text.rotate_point:00000000 rotate_point
     /tmp/ccrysqwW.s:3190   .text.roi_to_corners:00000000 $t
     /tmp/ccrysqwW.s:3195   .text.roi_to_corners:00000000 roi_to_corners
     /tmp/ccrysqwW.s:3353   .text.clamp_corners:00000000 $t
     /tmp/ccrysqwW.s:3358   .text.clamp_corners:00000000 clamp_corners
     /tmp/ccrysqwW.s:3461   .text.display_roi:00000000 $t
     /tmp/ccrysqwW.s:3466   .text.display_roi:00000000 display_roi
     /tmp/ccrysqwW.s:3579   .text.display_roi:000000ac $d
     /tmp/ccrysqwW.s:3584   .text.decode_ld_landmark:00000000 $t
     /tmp/ccrysqwW.s:3589   .text.decode_ld_landmark:00000000 decode_ld_landmark
     /tmp/ccrysqwW.s:3742   .text.display_ld_hand:00000000 $t
     /tmp/ccrysqwW.s:3747   .text.display_ld_hand:00000000 display_ld_hand
     /tmp/ccrysqwW.s:3883   .text.display_ld_hand:000000d4 $d
     /tmp/ccrysqwW.s:8607   .bss.x.17:00000000 x.17
     /tmp/ccrysqwW.s:8613   .bss.y.16:00000000 y.16
     /tmp/ccrysqwW.s:8619   .bss.is_clamped.15:00000000 is_clamped.15
     /tmp/ccrysqwW.s:3890   .text.display_hand:00000000 $t
     /tmp/ccrysqwW.s:3896   .text.display_hand:00000000 display_hand
     /tmp/ccrysqwW.s:3970   .text.Display_NetworkOutput:00000000 $t
     /tmp/ccrysqwW.s:3975   .text.Display_NetworkOutput:00000000 Display_NetworkOutput
     /tmp/ccrysqwW.s:4195   .text.Display_NetworkOutput:0000018c $d
     /tmp/ccrysqwW.s:4208   .text.yolo_detector_init:00000000 $t
     /tmp/ccrysqwW.s:4213   .text.yolo_detector_init:00000000 yolo_detector_init
     /tmp/ccrysqwW.s:4313   .text.yolo_detector_init:00000094 $d
     /tmp/ccrysqwW.s:8625   .rodata.__func__.14:00000000 __func__.14
ARM GAS  /tmp/ccrysqwW.s 			page 229


     /tmp/ccrysqwW.s:4327   .text.yolo_detector_run:00000000 $t
     /tmp/ccrysqwW.s:4332   .text.yolo_detector_run:00000000 yolo_detector_run
     /tmp/ccrysqwW.s:4515   .text.yolo_detector_run:000000d4 $d
     /tmp/ccrysqwW.s:8631   .rodata.__func__.13:00000000 __func__.13
     /tmp/ccrysqwW.s:4531   .text.face_landmark_init:00000000 $t
     /tmp/ccrysqwW.s:4536   .text.face_landmark_init:00000000 face_landmark_init
     /tmp/ccrysqwW.s:4639   .text.face_landmark_init:0000009c $d
     /tmp/ccrysqwW.s:8637   .rodata.__func__.12:00000000 __func__.12
     /tmp/ccrysqwW.s:4673   .text.face_landmark_prepare_input:00000000 $t
     /tmp/ccrysqwW.s:4678   .text.face_landmark_prepare_input:00000000 face_landmark_prepare_input
     /tmp/ccrysqwW.s:5037   .text.face_landmark_prepare_input:00000274 $d
     /tmp/ccrysqwW.s:8643   .rodata.__func__.11:00000000 __func__.11
     /tmp/ccrysqwW.s:5052   .text.face_landmark_run:00000000 $t
     /tmp/ccrysqwW.s:5057   .text.face_landmark_run:00000000 face_landmark_run
     /tmp/ccrysqwW.s:5307   .text.face_landmark_run:000000fc $d
     /tmp/ccrysqwW.s:5313   .text.app_transform:00000000 $t
     /tmp/ccrysqwW.s:5318   .text.app_transform:00000000 app_transform
     /tmp/ccrysqwW.s:5473   .text.hand_landmark_prepare_input:00000000 $t
     /tmp/ccrysqwW.s:5478   .text.hand_landmark_prepare_input:00000000 hand_landmark_prepare_input
     /tmp/ccrysqwW.s:5703   .text.hand_landmark_prepare_input:000001dc $d
     /tmp/ccrysqwW.s:8649   .rodata.__func__.10:00000000 __func__.10
     /tmp/ccrysqwW.s:5724   .text.app_rot_init:00000000 $t
     /tmp/ccrysqwW.s:5729   .text.app_rot_init:00000000 app_rot_init
     /tmp/ccrysqwW.s:5875   .text.app_rot_init:000000f4 $d
     /tmp/ccrysqwW.s:8655   .rodata.__func__.9:00000000 __func__.9
     /tmp/ccrysqwW.s:5888   .text.ld_compute_rotation:00000000 $t
     /tmp/ccrysqwW.s:5893   .text.ld_compute_rotation:00000000 ld_compute_rotation
     /tmp/ccrysqwW.s:5968   .text.ld_compute_rotation:00000088 $d
     /tmp/ccrysqwW.s:5998   .text.ld_to_roi:00000000 $t
     /tmp/ccrysqwW.s:6003   .text.ld_to_roi:00000000 ld_to_roi
     /tmp/ccrysqwW.s:6325   .text.ld_to_roi:00000238 $d
     /tmp/ccrysqwW.s:6333   .text.compute_next_roi:00000000 $t
     /tmp/ccrysqwW.s:6338   .text.compute_next_roi:00000000 compute_next_roi
     /tmp/ccrysqwW.s:6451   .text.compute_next_roi:000000fc $d
     /tmp/ccrysqwW.s:6463   .text.nn_thread_fct:00000000 $t
     /tmp/ccrysqwW.s:6468   .text.nn_thread_fct:00000000 nn_thread_fct
     /tmp/ccrysqwW.s:6872   .text.nn_thread_fct:00000314 $d
     /tmp/ccrysqwW.s:8661   .rodata.__func__.8:00000000 __func__.8
     /tmp/ccrysqwW.s:6885   .text.nn_thread_fct:00000340 $t
     /tmp/ccrysqwW.s:7151   .text.nn_thread_fct:00000540 $d
     /tmp/ccrysqwW.s:7165   .text.dp_update_drawing_area:00000000 $t
     /tmp/ccrysqwW.s:7170   .text.dp_update_drawing_area:00000000 dp_update_drawing_area
     /tmp/ccrysqwW.s:7244   .text.dp_update_drawing_area:00000044 $d
     /tmp/ccrysqwW.s:8667   .rodata.__func__.7:00000000 __func__.7
     /tmp/ccrysqwW.s:7254   .text.dp_commit_drawing_area:00000000 $t
     /tmp/ccrysqwW.s:7259   .text.dp_commit_drawing_area:00000000 dp_commit_drawing_area
     /tmp/ccrysqwW.s:7332   .text.dp_commit_drawing_area:00000040 $d
     /tmp/ccrysqwW.s:8673   .rodata.__func__.6:00000000 __func__.6
     /tmp/ccrysqwW.s:7340   .text.on_ld_toggle_button_click:00000000 $t
     /tmp/ccrysqwW.s:7345   .text.on_ld_toggle_button_click:00000000 on_ld_toggle_button_click
     /tmp/ccrysqwW.s:7424   .text.on_ld_toggle_button_click:00000074 $d
     /tmp/ccrysqwW.s:8679   .rodata.__func__.5:00000000 __func__.5
     /tmp/ccrysqwW.s:7431   .text.on_pd_toggle_button_click:00000000 $t
     /tmp/ccrysqwW.s:7436   .text.on_pd_toggle_button_click:00000000 on_pd_toggle_button_click
     /tmp/ccrysqwW.s:7515   .text.on_pd_toggle_button_click:00000074 $d
     /tmp/ccrysqwW.s:8685   .rodata.__func__.4:00000000 __func__.4
     /tmp/ccrysqwW.s:7522   .text.dp_thread_fct:00000000 $t
ARM GAS  /tmp/ccrysqwW.s 			page 230


     /tmp/ccrysqwW.s:7527   .text.dp_thread_fct:00000000 dp_thread_fct
     /tmp/ccrysqwW.s:7752   .text.dp_thread_fct:00000188 $d
     /tmp/ccrysqwW.s:8691   .rodata.__func__.3:00000000 __func__.3
     /tmp/ccrysqwW.s:7766   .text.isp_thread_fct:00000000 $t
     /tmp/ccrysqwW.s:7771   .text.isp_thread_fct:00000000 isp_thread_fct
     /tmp/ccrysqwW.s:7812   .text.isp_thread_fct:00000034 $d
     /tmp/ccrysqwW.s:8697   .rodata.__func__.2:00000000 __func__.2
     /tmp/ccrysqwW.s:7820   .text.Display_init:00000000 $t
     /tmp/ccrysqwW.s:7825   .text.Display_init:00000000 Display_init
     /tmp/ccrysqwW.s:7968   .text.Display_init:000000d8 $d
     /tmp/ccrysqwW.s:8703   .rodata.__func__.1:00000000 __func__.1
     /tmp/ccrysqwW.s:8012   .text.app_run:00000000 $t
     /tmp/ccrysqwW.s:8018   .text.app_run:00000000 app_run
     /tmp/ccrysqwW.s:8426   .text.app_run:00000230 $d
     /tmp/ccrysqwW.s:8709   .rodata.__func__.0:00000000 __func__.0
     /tmp/ccrysqwW.s:8464   .text.CMW_CAMERA_PIPE_FrameEventCallback:00000000 $t
     /tmp/ccrysqwW.s:8470   .text.CMW_CAMERA_PIPE_FrameEventCallback:00000000 CMW_CAMERA_PIPE_FrameEventCallback
     /tmp/ccrysqwW.s:8514   .text.CMW_CAMERA_PIPE_VsyncEventCallback:00000000 $t
     /tmp/ccrysqwW.s:8520   .text.CMW_CAMERA_PIPE_VsyncEventCallback:00000000 CMW_CAMERA_PIPE_VsyncEventCallback
     /tmp/ccrysqwW.s:8556   .rodata.__func__.25:00000000 $d
     /tmp/ccrysqwW.s:8562   .rodata.__func__.24:00000000 $d
     /tmp/ccrysqwW.s:8568   .rodata.__func__.23:00000000 $d
     /tmp/ccrysqwW.s:8574   .rodata.__func__.22:00000000 $d
     /tmp/ccrysqwW.s:8580   .rodata.__func__.21:00000000 $d
     /tmp/ccrysqwW.s:8586   .rodata.__func__.20:00000000 $d
     /tmp/ccrysqwW.s:8592   .rodata.__func__.19:00000000 $d
     /tmp/ccrysqwW.s:8598   .rodata.__func__.18:00000000 $d
     /tmp/ccrysqwW.s:8604   .bss.x.17:00000000 $d
     /tmp/ccrysqwW.s:8610   .bss.y.16:00000000 $d
     /tmp/ccrysqwW.s:8616   .bss.is_clamped.15:00000000 $d
     /tmp/ccrysqwW.s:8622   .rodata.__func__.14:00000000 $d
     /tmp/ccrysqwW.s:8628   .rodata.__func__.13:00000000 $d
     /tmp/ccrysqwW.s:8634   .rodata.__func__.12:00000000 $d
     /tmp/ccrysqwW.s:8640   .rodata.__func__.11:00000000 $d
     /tmp/ccrysqwW.s:8646   .rodata.__func__.10:00000000 $d
     /tmp/ccrysqwW.s:8652   .rodata.__func__.9:00000000 $d
     /tmp/ccrysqwW.s:8658   .rodata.__func__.8:00000000 $d
     /tmp/ccrysqwW.s:8664   .rodata.__func__.7:00000000 $d
     /tmp/ccrysqwW.s:8670   .rodata.__func__.6:00000000 $d
     /tmp/ccrysqwW.s:8676   .rodata.__func__.5:00000000 $d
     /tmp/ccrysqwW.s:8682   .rodata.__func__.4:00000000 $d
     /tmp/ccrysqwW.s:8688   .rodata.__func__.3:00000000 $d
     /tmp/ccrysqwW.s:8694   .rodata.__func__.2:00000000 $d
     /tmp/ccrysqwW.s:8700   .rodata.__func__.1:00000000 $d
     /tmp/ccrysqwW.s:8706   .rodata.__func__.0:00000000 $d
                           .group:00000000 wm4.0.2a10773746a5c5ebb5552f50e466f80b
                           .group:00000000 wm4._newlib_version.h.4.411db44ea2338a62eca2f0777f81481b
                           .group:00000000 wm4.features.h.33.e0c9f337c65cb9f22ed5f23d082bc78b
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.cmsis_gcc.h.26.7a5fd1a99dbedde687044a4433ab3e15
                           .group:00000000 wm4.newlib.h.7.591ac1bd65c1f5b34864757667a05252
                           .group:00000000 wm4.ieeefp.h.77.bd5feb87d9990dd328793ced294f6a87
                           .group:00000000 wm4.config.h.224.10ee1ad185d877c6e334e6581faab44d
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
ARM GAS  /tmp/ccrysqwW.s 			page 231


                           .group:00000000 wm4.stddef.h.39.0dc9006b34572d4d9cae4c8b422c4971
                           .group:00000000 wm4.cdefs.h.49.70fc7af612f78ddcace70fdd90b5623b
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.158.6f8e08a347b1cff664332fa350bfceb3
                           .group:00000000 wm4._types.h.127.3bdfe3ff8ea2d0985b03d9cbe93480e3
                           .group:00000000 wm4.reent.h.18.25503cdc8b7e55dd0d6ea7b3e5af7a03
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.78.6b87466b04591b1f1cb88c14fdf2ba9e
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.eec8bf00b5213f43d095cb984c5f22e3
                           .group:00000000 wm4.math.h.13.47cfc34cae8a1153323939c4d32cf7c2
                           .group:00000000 wm4.float.h.29.0e9d9baf95ec39f9555dc80c6e28186b
                           .group:00000000 wm4.syslimits.h.34.de5cbd310098bc5895998b6bde577ed2
                           .group:00000000 wm4.limits.h.9.70fb0ada6f71b16202a66baaa6d8ea70
                           .group:00000000 wm4.limits.h.60.56a1ae353e2028a24298ec6463b8b593
                           .group:00000000 wm4.arm_math_types.h.94.a6c8422e2657ad4cd95bd8be69ba02aa
                           .group:00000000 wm4.stdbool.h.29.c08aa3eec75cf5b9b5003883f43253f0
                           .group:00000000 wm4.arm_mve.h.38.47b22bbd301ce82bc6dafd1a387f65a3
                           .group:00000000 wm4.arm_math_types.h.559.cab78f278b684a3ea2271947c7aea680
                           .group:00000000 wm4.arm_math_memory.h.28.fe8a81c6a9ac13061a5f748732089249
                           .group:00000000 wm4.none.h.185.db055cca83e83f96d8d0bb450fbdf4bb
                           .group:00000000 wm4.utils.h.27.57524573fe37b04009eecf3582a4c591
                           .group:00000000 wm4.fast_math_functions.h.28.8eb7477260c1d6b62047c49a01c4cbaa
                           .group:00000000 wm4.controller_functions.h.28.7bed7d7a726df2f65b8a3d89cff01247
                           .group:00000000 wm4.filtering_functions.h.46.6cf1424fb1f86d5f9958d208b83340a1
                           .group:00000000 wm4.postprocess_conf.h.22.3cea487938a8716b861207393e069778
                           .group:00000000 wm4.app.h.24.8dd4c0fb84cd0b63d7417a5327c5d796
                           .group:00000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.stdio.h.47.dc31ec4674d7bcb103c9f08809549f45
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.87.a1e20d2651f9bfb66e51bfbe849db00a
                           .group:00000000 wm4.app_cam.h.19.2495a46447d71a1025370e29864418f5
                           .group:00000000 wm4.app_config.h.19.39aa4865b050c845a97a8fc9d3d8ffcd
                           .group:00000000 wm4.assert.h.11.db24e541f16414db224bf986d21017e2
                           .group:00000000 wm4.ll_aton_config.h.20.79eb8be0291ee9086e6be08969d61846
                           .group:00000000 wm4.ll_aton_attributes.h.20.26d469460cb32db5740effdc8cc403f3
                           .group:00000000 wm4.assert.h.11.d99a111e320bc5106fc4046225782672
                           .group:00000000 wm4.errno.h.2.ba016d646105af6cad23be83630b6a3f
                           .group:00000000 wm4.errno.h.9.ae5ea2b0ff9ea6e39e585807e35200d3
                           .group:00000000 wm4.ll_aton_util.h.34.9098eaa90d3d72b819973556e3e5fe44
                           .group:00000000 wm4.FreeRTOS.h.59.647b1b0da38e4e98108aae13c8abe9ee
                           .group:00000000 wm4.FreeRTOSConfig.h.59.2629c72cff9e6dbe880a2dc225eae516
                           .group:00000000 wm4.FreeRTOS.h.80.7742fabaf5accf3762dc12f7f259a8a0
                           .group:00000000 wm4.projdefs.h.30.55a824156f299c075c33148a9fdadb99
                           .group:00000000 wm4.portmacro.h.30.cbb4b2da41f551c2a9904f0d03a1ce3e
                           .group:00000000 wm4.portmacrocommon.h.30.d5cb67896ab50a95311be7e023da5c4f
                           .group:00000000 wm4.portmacro.h.68.4051ecf710d074fb55b16d91dfebeeaa
                           .group:00000000 wm4.portable.h.61.d557c57974d490f056246a26cdcddd6c
                           .group:00000000 wm4.mpu_wrappers.h.30.ccc5f1a6903f941a88c268f5f62af3fe
                           .group:00000000 wm4.portable.h.189.522b8bd52a171d3fd1432ef06d0caa63
                           .group:00000000 wm4.FreeRTOS.h.102.fb871f3e464d99c5a57b3115545a02ad
                           .group:00000000 wm4.list.h.59.bce6419520cd4f5f98779a1530bf2118
                           .group:00000000 wm4.task.h.56.84290139c73b47f5b9aac361361a2a31
                           .group:00000000 wm4.queue.h.68.219f47fba8b59640449b84d04c5bd6d8
                           .group:00000000 wm4.semphr.h.40.c1a9c6f5bf0feb4da0b6a45d234a79d0
                           .group:00000000 wm4.ll_aton_platform.h.20.06ded592ee586a6abb6019a90ebd54df
ARM GAS  /tmp/ccrysqwW.s 			page 232


                           .group:00000000 wm4.stm32n6xx_hal_conf.h.21.004a06df6e15ac197e03f723792da58a
                           .group:00000000 wm4.arm_cmse.h.103.a0d15a79c4c9a67da8d5831704d7248e
                           .group:00000000 wm4.stm32n6xx.h.34.80585dd08aa426c932f6311fdb7386da
                           .group:00000000 wm4.stm32n657xx.h.26.acd272cb67318cc1a4791ce2f0720ca6
                           .group:00000000 wm4.cmsis_version.h.32.0ac195c83bb4537824e6ad1c47474b79
                           .group:00000000 wm4.core_cm55.h.68.832d5cf835639cc0d28219c3d2867330
                           .group:00000000 wm4.core_cm55.h.196.52e437a270752da561676e507b35baeb
                           .group:00000000 wm4.mpu_armv8.h.32.9d72426c8e2b47753456dcb84802c5b3
                           .group:00000000 wm4.pmu_armv8.h.32.eaa95f88a71b29390b135fd81c071b6b
                           .group:00000000 wm4.core_cm55.h.4411.860dad8650880893dd57b815844f7186
                           .group:00000000 wm4.cachel1_armv7.h.32.abd77761a989e008b0c60891114a33c7
                           .group:00000000 wm4.stm32n657xx.h.575.1c2a5e6bedffc6f9083dcc857bc6d09d
                           .group:00000000 wm4.stm32n6xx.h.114.5cf793d8af485e14f110e3e24bde1aa5
                           .group:00000000 wm4.stm32_hal_legacy.h.22.87fb12bf5a1a1e00fc134f22bc9aa8c4
                           .group:00000000 wm4.stm32n6xx_hal_def.h.63.2cbbf1954826c09c874c4e06e42e8b71
                           .group:00000000 wm4.stm32n6xx_ll_bus.h.38.2366a295ee4cdb04833997d3787fcd2d
                           .group:00000000 wm4.stm32n6xx_ll_rcc.h.21.002e22a16fd7f67dde6dce41e8ba9620
                           .group:00000000 wm4.stm32n6xx_hal_rcc.h.194.1cb1283e40f9bebcd3fba2a9a961838e
                           .group:00000000 wm4.stm32n6xx_hal_rcc_ex.h.21.79aa32178dfef625fbd20d362449acfa
                           .group:00000000 wm4.stm32n6xx_hal_rcc.h.4359.3f0b7ad33826d95438602c9aebc08af9
                           .group:00000000 wm4.stm32n6xx_hal_gpio.h.21.89d54af663b98eb8fc098192053f7eeb
                           .group:00000000 wm4.stm32n6xx_hal_gpio_ex.h.22.4acb2e3511a98bb48b81cfc8e09fd59e
                           .group:00000000 wm4.stm32n6xx_hal_rif.h.21.424d0bafb874a777dee3742a22e13037
                           .group:00000000 wm4.stm32n6xx_hal_dma.h.21.61e48c5c2e8d25d22177834b232fe45c
                           .group:00000000 wm4.stm32n6xx_hal_dma_ex.h.21.66e597beb090a165329d6ccf665e41bc
                           .group:00000000 wm4.stm32n6xx_hal_dma.h.1020.87e2180c009560b617c1f8208140c950
                           .group:00000000 wm4.stm32n6xx_hal_cortex.h.21.f493623cc58f9454ab4eae41e395c5cc
                           .group:00000000 wm4.stm32n6xx_hal_bsec.h.21.61b309e67dd810e28897a01b1b21a97f
                           .group:00000000 wm4.stm32n6xx_hal_dcmipp.h.21.f538bfd785c6469670251ac9bc7af55d
                           .group:00000000 wm4.stm32n6xx_hal_dma2d.h.21.75c8d46cdbb72970123b3f34ae2043d7
                           .group:00000000 wm4.stm32n6xx_hal_exti.h.21.fda87e715ea6b98239ec30171d1df594
                           .group:00000000 wm4.stm32n6xx_hal_gfxmmu.h.21.9784a9103143d48bd3c37389d0e0b8e6
                           .group:00000000 wm4.stm32n6xx_hal_i2c.h.21.3f483626ff64c5bf027265bb2e1d1331
                           .group:00000000 wm4.stm32n6xx_hal_i2c_ex.h.21.79e9196c22282cdaf6b4047893638c45
                           .group:00000000 wm4.stm32n6xx_hal_i2c.h.741.1084702632703acc669e4282b3043372
                           .group:00000000 wm4.stm32n6xx_hal_icache.h.21.194b4ec6e76f32b14f65c85616854850
                           .group:00000000 wm4.stm32n6xx_hal_ltdc.h.21.ae1eb09930e7e550e48e418ac5849e4d
                           .group:00000000 wm4.stm32n6xx_hal_ltdc.h.1002.b13ede7fc94ed5ad1c6768a157d2149a
                           .group:00000000 wm4.stm32n6xx_ll_usb.h.21.d518a5d97876c2ff49040c20a2c4a120
                           .group:00000000 wm4.stm32n6xx_hal_pcd.h.155.27040aac6844effe2af8c180caf1dd2e
                           .group:00000000 wm4.stm32n6xx_hal_pwr.h.21.cdb73e4869c3fed3fc84f901ec0e5f0a
                           .group:00000000 wm4.stm32n6xx_hal_pwr_ex.h.21.1a673224a58b0c1e5fad8eeda6514208
                           .group:00000000 wm4.stm32n6xx_hal_ramcfg.h.21.a62dfbb4d2c14e9a8c634a215e37bd3d
                           .group:00000000 wm4.stm32n6xx_hal_spi.h.21.9f810303326e2d91749800e9911f8e4d
                           .group:00000000 wm4.stm32n6xx_hal_spi.h.906.93ec0695066db4253cdbcb7d84358a0b
                           .group:00000000 wm4.stm32n6xx_hal_tim.h.21.839dd2b2a70382fb2c44f8f293a84d5f
                           .group:00000000 wm4.stm32n6xx_hal_tim_ex.h.21.e372d5ac63c13441211ea4ecbd353150
                           .group:00000000 wm4.stm32n6xx_hal_uart.h.21.230f549bfa0d5ebfd77bfb311b2aca15
                           .group:00000000 wm4.stm32n6xx_hal_uart_ex.h.21.a0d5511e1d0703b7b5278c8f5472b96d
                           .group:00000000 wm4.stm32n6xx_hal_xspi.h.21.e17898be2073b6b6b19faf30b4e304e9
                           .group:00000000 wm4.stm32n6xx_hal_cacheaxi.h.21.7c3375b7903ec42376e4883320997f74
                           .group:00000000 wm4.stm32n6xx_hal_gpu2d.h.21.48d0249122abad294a630c39cc4ebaed
                           .group:00000000 wm4.stm32n6xx_hal.h.81.5e59143eba07faca3e9aeaa5470826c8
                           .group:00000000 wm4.ll_aton_platform.h.288.664a74b8c5792a861b3d52bd39f4a693
                           .group:00000000 wm4.ATON.h.19.cf7dff4c0f1bfe90e42066f604751dc7
                           .group:00000000 wm4.ll_aton_rcompat.h.22.b2bd0d777466a5ac720f3b2429c5fea7
                           .group:00000000 wm4.ll_aton_platform.h.383.f09ccd502bb682b863f991d963ee7462
ARM GAS  /tmp/ccrysqwW.s 			page 233


                           .group:00000000 wm4.ll_aton_osal_freertos.h.62.85a065f77def7f6fef26149f92fe1378
                           .group:00000000 wm4.ll_aton_osal.h.116.bc018513feb9b28713cf2afc78ec679b
                           .group:00000000 wm4.ll_aton_rt_user_api.h.71.e6b7f8d03b2c998f838260ad3cb6cd40
                           .group:00000000 wm4.od_pp_output_if.h.11.62a3da738caf687aa42d96759c237b2c
                           .group:00000000 wm4.mpe_pp_output_if.h.11.db0dd5ceb87072354c56b51e8f9b2a0d
                           .group:00000000 wm4.pd_pp_output_if.h.19.b7de9bd1876930668a82409743b6dbf4
                           .group:00000000 wm4.spe_pp_output_if.h.11.cb67d0d15a71c95e0e8b7fee8a9755fe
                           .group:00000000 wm4.iseg_pp_output_if.h.11.df7e791a4e783022a9fba78cdb1c05d4
                           .group:00000000 wm4.sseg_pp_output_if.h.11.caf00fb1ae24f8dc9c80bee7827b96f2
                           .group:00000000 wm4.app_postprocess.h.49.6186ff44b2c06089fe0297042919e83a
                           .group:00000000 wm4.isp_conf.h.21.bfb1d020517608810095aa56acf25d1e
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.isp_core.h.109.be5387f515355b6edcb70af2607f9a68
                           .group:00000000 wm4.ld.h.19.137dbadf938c8a0cfe15d7982e5e13e2
                           .group:00000000 wm4.cmw_errno.h.21.91021ac9b2627a1ce6b8517d105715d1
                           .group:00000000 wm4.stm32n6570_discovery_conf.h.21.f52c8202689527a3dc0d9c6cba9c0416
                           .group:00000000 wm4.stm32n6570_discovery_errno.h.22.80e523b09444a11ebe4b6e24ae914f0e
                           .group:00000000 wm4.stm32n6570_discovery_bus.h.62.3b5b2c6837f7adeb489604fa214cd371
                           .group:00000000 wm4.cmw_camera.h.33.b34cbb506ffb5bbc0bae0cee9fc48966
                           .group:00000000 wm4.stm32n6570_discovery.h.25.5fc3699797f7c334a2e25a2a6a563b07
                           .group:00000000 wm4.lcd.h.21.98701c105e66fef2e089854e5bc0fe32
                           .group:00000000 wm4.stm32_lcd.h.55.1a04e503950bf34ef3721d2ebb9542fc
                           .group:00000000 wm4.stm32_lcd_ex.h.21.eaf9c9c1000e162e58259e027110f2f5
                           .group:00000000 wm4.utils.h.19.2f7e4a8a839d9215c56961f5a9914d6d
                           .group:00000000 wm4.nema_sys_defs.h.24.0b35b5138cb9b4a3130f5d424bc2bcc0
                           .group:00000000 wm4.nema_hal.h.193.74a3b292db2bcbda0132dae40ae0f4e5
                           .group:00000000 wm4.nema_cmdlist.h.30.a652eb980f08f0ed22ad00119d504926
                           .group:00000000 wm4.nema_graphics.h.61.b3907f86eccb4e55a4b69e8aebdd3657
                           .group:00000000 wm4.nema_blender.h.30.fb13cc9231bd108bca212984b3a891e0
                           .group:00000000 wm4.nema_math.h.30.ef7265c89982f7dae18e3ec2d7f3d003
                           .group:00000000 wm4.nema_version.h.35.6aae27202c190348dff84b89d4c12df7
                           .group:00000000 wm4.nema_error.h.29.50848ed81d21ff4ae4b870fae3681118

UNDEFINED SYMBOLS
nema_set_blend
LL_ATON_EC_Network_Init_yolo_detector
LL_ATON_EC_Inference_Init_yolo_detector
LL_ATON_Set_User_Input_Buffer_yolo_detector
LL_ATON_Get_User_Input_Buffer_yolo_detector
LL_ATON_Set_User_Output_Buffer_yolo_detector
LL_ATON_Get_User_Output_Buffer_yolo_detector
LL_ATON_EpochBlockItems_yolo_detector
LL_ATON_Output_Buffers_Info_yolo_detector
LL_ATON_Input_Buffers_Info_yolo_detector
LL_ATON_Internal_Buffers_Info_yolo_detector
LL_ATON_EC_Network_Init_face_landmark
LL_ATON_EC_Inference_Init_face_landmark
LL_ATON_Set_User_Input_Buffer_face_landmark
LL_ATON_Get_User_Input_Buffer_face_landmark
LL_ATON_Set_User_Output_Buffer_face_landmark
LL_ATON_Get_User_Output_Buffer_face_landmark
LL_ATON_EpochBlockItems_face_landmark
LL_ATON_Output_Buffers_Info_face_landmark
LL_ATON_Input_Buffers_Info_face_landmark
LL_ATON_Internal_Buffers_Info_face_landmark
ARM GAS  /tmp/ccrysqwW.s 			page 234


floorf
atan2f
cos
sin
BSP_PB_Init
__assert_func
BSP_PB_GetState
memset
TIM4_Get_Value
ulTaskGetIdleRunTimeCounter
HAL_GetTick
__aeabi_ul2d
xQueueCreateCountingSemaphoreStatic
vQueueDelete
xQueueSemaphoreTake
xQueueGenericSend
xPortIsInsideInterrupt
xQueueGiveFromISR
SCRL_SetAddress_NoReload
SCRL_ReloadLayer
SRCL_Update
CMW_CAMERA_GetDCMIPPHandle
HAL_DCMIPP_PIPE_SetMemoryAddress
UTIL_LCD_DrawRect
UTIL_LCD_FillCircle
memcpy
UTIL_LCD_DrawLine
UTIL_LCD_FillRect
UTIL_LCD_GetFont
UTIL_LCDEx_PrintfAt
app_postprocess_init
LL_ATON_RT_Main
app_postprocess_run
IPL_resize_bilinear_iu8ou8_with_strides_RGB
ld_post_process
HAL_GFXMMU_ModifyBuffers
nema_bind_dst_tex
nema_set_clip
nema_clear
nema_bind_src_tex
nema_enable_tiling
nema_mat3x3_load_identity
nema_mat3x3_translate
nema_mat3x3_rotate
nema_mat3x3_scale
nema_blit_quad_fit
nema_cl_submit
nema_cl_wait
HAL_ICACHE_Invalidate
nema_get_error
puts
nema_init
nema_ext_hold_enable
nema_ext_hold_irq_enable
nema_get_sw_device_name
printf
HAL_GFXMMU_Init
ARM GAS  /tmp/ccrysqwW.s 			page 235


HAL_GFXMMU_ConfigPacking
nema_cl_create_sized
nema_cl_bind_circular
CAM_NNPipe_Start
CAM_IspUpdate
SCRL_Init
UTIL_LCD_SetLayer
UTIL_LCD_Clear
UTIL_LCD_SetFont
UTIL_LCD_SetTextColor
Font20
CAM_Init
xQueueCreateMutexStatic
CAM_DisplayPipe_Start
xTaskCreateStatic
