ARM GAS  /tmp/cc2qXJ00.s 			page 1


   1              		.arch armv8.1-m.main
   2              		.fpu fpv5-d16
   3              		.arch_extension dsp
   4              		.arch_extension fp
   5              		.arch_extension fp.dp
   6              		.arch_extension mve
   7              		.arch_extension mve.fp
   8              		.eabi_attribute 5, "cortex-m55"
   9              		.eabi_attribute 28, 1
  10              		.eabi_attribute 20, 1
  11              		.eabi_attribute 21, 1
  12              		.eabi_attribute 23, 3
  13              		.eabi_attribute 24, 1
  14              		.eabi_attribute 25, 1
  15              		.eabi_attribute 26, 1
  16              		.eabi_attribute 30, 4
  17              		.eabi_attribute 34, 1
  18              		.eabi_attribute 38, 1
  19              		.eabi_attribute 18, 4
  20              		.file	"app.c"
  21              		.text
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.file 1 "Src/app.c"
  25              		.section	.text.clamp_point,"ax",%progbits
  26              		.align	1
  27              		.syntax unified
  28              		.thumb
  29              		.thumb_func
  31              	clamp_point:
  32              	.LVL0:
  33              	.LFB7380:
   1:Src/app.c     **** /**
   2:Src/app.c     ****   ******************************************************************************
   3:Src/app.c     ****   * @file    app.c
   4:Src/app.c     ****   * @author  MDG Application Team
   5:Src/app.c     ****   ******************************************************************************
   6:Src/app.c     ****   * @attention
   7:Src/app.c     ****   *
   8:Src/app.c     ****   * Copyright (c) 2024 STMicroelectronics.
   9:Src/app.c     ****   * All rights reserved.
  10:Src/app.c     ****   *
  11:Src/app.c     ****   * This software is licensed under terms that can be found in the LICENSE file
  12:Src/app.c     ****   * in the root directory of this software component.
  13:Src/app.c     ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  14:Src/app.c     ****   *
  15:Src/app.c     ****   ******************************************************************************
  16:Src/app.c     ****   */
  17:Src/app.c     **** 
  18:Src/app.c     **** #include "app.h"
  19:Src/app.c     **** 
  20:Src/app.c     **** #include <stdint.h>
  21:Src/app.c     **** #include <stdio.h>
  22:Src/app.c     **** 
  23:Src/app.c     **** #include "app_cam.h"
  24:Src/app.c     **** #include "app_config.h"
  25:Src/app.c     **** #include "IPL_resize.h"
ARM GAS  /tmp/cc2qXJ00.s 			page 2


  26:Src/app.c     **** #include "app_postprocess.h"
  27:Src/app.c     **** #include "isp_api.h"
  28:Src/app.c     **** #include "ld.h"
  29:Src/app.c     **** #include "ll_aton_runtime.h"
  30:Src/app.c     **** #include "cmw_camera.h"
  31:Src/app.c     **** #include "scrl.h"
  32:Src/app.c     **** #ifdef STM32N6570_DK_REV
  33:Src/app.c     **** #include "stm32n6570_discovery.h"
  34:Src/app.c     **** #else
  35:Src/app.c     **** #include "stm32n6xx_nucleo.h"
  36:Src/app.c     **** #endif
  37:Src/app.c     **** #include "stm32_lcd.h"
  38:Src/app.c     **** #include "stm32_lcd_ex.h"
  39:Src/app.c     **** #include "stm32n6xx_hal.h"
  40:Src/app.c     **** #include "FreeRTOS.h"
  41:Src/app.c     **** #include "task.h"
  42:Src/app.c     **** #include "semphr.h"
  43:Src/app.c     **** #include "utils.h"
  44:Src/app.c     **** 
  45:Src/app.c     **** #define FREERTOS_PRIORITY(p) ((UBaseType_t)((int)tskIDLE_PRIORITY + configMAX_PRIORITIES / 2 + (p))
  46:Src/app.c     **** 
  47:Src/app.c     **** #ifndef M_PI
  48:Src/app.c     **** #define M_PI 3.14159265358979323846
  49:Src/app.c     **** #endif
  50:Src/app.c     **** 
  51:Src/app.c     **** #if HAS_ROTATION_SUPPORT == 1
  52:Src/app.c     **** #include "nema_core.h"
  53:Src/app.c     **** #include "nema_error.h"
  54:Src/app.c     **** void nema_enable_tiling(int);
  55:Src/app.c     **** #endif
  56:Src/app.c     **** 
  57:Src/app.c     **** #define LCD_FG_WIDTH LCD_BG_WIDTH
  58:Src/app.c     **** #define LCD_FG_HEIGHT LCD_BG_HEIGHT
  59:Src/app.c     **** 
  60:Src/app.c     **** #define CACHE_OP(__op__) do { \
  61:Src/app.c     ****   if (is_cache_enable()) { \
  62:Src/app.c     ****     __op__; \
  63:Src/app.c     ****   } \
  64:Src/app.c     **** } while (0)
  65:Src/app.c     **** 
  66:Src/app.c     **** #define DBG_INFO 0
  67:Src/app.c     **** #define USE_FILTERED_TS 1
  68:Src/app.c     **** 
  69:Src/app.c     **** #define BQUEUE_MAX_BUFFERS 2
  70:Src/app.c     **** #define CPU_LOAD_HISTORY_DEPTH 8
  71:Src/app.c     **** 
  72:Src/app.c     **** #define DISPLAY_BUFFER_NB (DISPLAY_DELAY + 2)
  73:Src/app.c     **** 
  74:Src/app.c     **** /* palm detector */
  75:Src/app.c     **** #define PD_MAX_HAND_NB 1
  76:Src/app.c     **** 
  77:Src/app.c     **** #if HAS_ROTATION_SUPPORT == 1
  78:Src/app.c     **** typedef float app_v3_t[3];
  79:Src/app.c     **** #endif
  80:Src/app.c     **** 
  81:Src/app.c     **** typedef struct {
  82:Src/app.c     ****   float cx;
ARM GAS  /tmp/cc2qXJ00.s 			page 3


  83:Src/app.c     ****   float cy;
  84:Src/app.c     ****   float w;
  85:Src/app.c     ****   float h;
  86:Src/app.c     ****   float rotation;
  87:Src/app.c     **** } roi_t;
  88:Src/app.c     **** 
  89:Src/app.c     **** #define UTIL_LCD_COLOR_TRANSPARENT 0
  90:Src/app.c     **** 
  91:Src/app.c     **** #ifdef STM32N6570_DK_REV
  92:Src/app.c     **** #define LCD_FONT Font20
  93:Src/app.c     **** #define DISK_RADIUS 2
  94:Src/app.c     **** #else
  95:Src/app.c     **** #define LCD_FONT Font12
  96:Src/app.c     **** #define DISK_RADIUS 1
  97:Src/app.c     **** #endif
  98:Src/app.c     **** 
  99:Src/app.c     **** typedef struct
 100:Src/app.c     **** {
 101:Src/app.c     ****   uint32_t X0;
 102:Src/app.c     ****   uint32_t Y0;
 103:Src/app.c     ****   uint32_t XSize;
 104:Src/app.c     ****   uint32_t YSize;
 105:Src/app.c     **** } Rectangle_TypeDef;
 106:Src/app.c     **** 
 107:Src/app.c     **** typedef struct {
 108:Src/app.c     ****   SemaphoreHandle_t free;
 109:Src/app.c     ****   StaticSemaphore_t free_buffer;
 110:Src/app.c     ****   SemaphoreHandle_t ready;
 111:Src/app.c     ****   StaticSemaphore_t ready_buffer;
 112:Src/app.c     ****   int buffer_nb;
 113:Src/app.c     ****   uint8_t *buffers[BQUEUE_MAX_BUFFERS];
 114:Src/app.c     ****   int free_idx;
 115:Src/app.c     ****   int ready_idx;
 116:Src/app.c     **** } bqueue_t;
 117:Src/app.c     **** 
 118:Src/app.c     **** typedef struct {
 119:Src/app.c     ****   uint64_t current_total;
 120:Src/app.c     ****   uint64_t current_thread_total;
 121:Src/app.c     ****   uint64_t prev_total;
 122:Src/app.c     ****   uint64_t prev_thread_total;
 123:Src/app.c     ****   struct {
 124:Src/app.c     ****     uint64_t total;
 125:Src/app.c     ****     uint64_t thread;
 126:Src/app.c     ****     uint32_t tick;
 127:Src/app.c     ****   } history[CPU_LOAD_HISTORY_DEPTH];
 128:Src/app.c     **** } cpuload_info_t;
 129:Src/app.c     **** 
 130:Src/app.c     **** typedef struct {
 131:Src/app.c     ****   int is_valid;
 132:Src/app.c     ****   pd_pp_box_t pd_hands;
 133:Src/app.c     ****   roi_t roi;
 134:Src/app.c     ****   ld_point_t ld_landmarks[LD_LANDMARK_NB];
 135:Src/app.c     **** } hand_info_t;
 136:Src/app.c     **** 
 137:Src/app.c     **** typedef struct {
 138:Src/app.c     ****   float nn_period_ms;
 139:Src/app.c     ****   uint32_t pd_ms;
ARM GAS  /tmp/cc2qXJ00.s 			page 4


 140:Src/app.c     ****   uint32_t hl_ms;
 141:Src/app.c     ****   uint32_t pp_ms;
 142:Src/app.c     ****   uint32_t disp_ms;
 143:Src/app.c     ****   int is_ld_displayed;
 144:Src/app.c     ****   int is_pd_displayed;
 145:Src/app.c     ****   int pd_hand_nb;
 146:Src/app.c     ****   float pd_max_prob;
 147:Src/app.c     ****   hand_info_t hands[PD_MAX_HAND_NB];
 148:Src/app.c     **** } display_info_t;
 149:Src/app.c     **** 
 150:Src/app.c     **** typedef struct {
 151:Src/app.c     ****   SemaphoreHandle_t update;
 152:Src/app.c     ****   StaticSemaphore_t update_buffer;
 153:Src/app.c     ****   SemaphoreHandle_t lock;
 154:Src/app.c     ****   StaticSemaphore_t lock_buffer;
 155:Src/app.c     ****   display_info_t info;
 156:Src/app.c     **** } display_t;
 157:Src/app.c     **** 
 158:Src/app.c     **** typedef struct {
 159:Src/app.c     ****   uint32_t nn_in_len;
 160:Src/app.c     ****   float *prob_out;
 161:Src/app.c     ****   uint32_t prob_out_len;
 162:Src/app.c     ****   float *boxes_out;
 163:Src/app.c     ****   uint32_t boxes_out_len;
 164:Src/app.c     ****   pd_model_pp_static_param_t static_param;
 165:Src/app.c     ****   pd_pp_out_t pd_out;
 166:Src/app.c     **** } pd_model_info_t;
 167:Src/app.c     **** 
 168:Src/app.c     **** typedef struct {
 169:Src/app.c     ****   uint8_t *nn_in;
 170:Src/app.c     ****   uint32_t nn_in_len;
 171:Src/app.c     ****   float *prob_out;
 172:Src/app.c     ****   uint32_t prob_out_len;
 173:Src/app.c     ****   float *landmarks_out;
 174:Src/app.c     ****   uint32_t landmarks_out_len;
 175:Src/app.c     **** } hl_model_info_t;
 176:Src/app.c     **** 
 177:Src/app.c     **** typedef struct {
 178:Src/app.c     ****   Button_TypeDef button_id;
 179:Src/app.c     ****   int prev_state;
 180:Src/app.c     ****   void (*on_click_handler)(void *cb_args);
 181:Src/app.c     ****   void *cb_args;
 182:Src/app.c     **** } button_t;
 183:Src/app.c     **** 
 184:Src/app.c     **** /* Globals */
 185:Src/app.c     **** /* Lcd Background area */
 186:Src/app.c     **** static Rectangle_TypeDef lcd_bg_area = {
 187:Src/app.c     ****   .X0 = 0,
 188:Src/app.c     ****   .Y0 = 0,
 189:Src/app.c     ****   .XSize = LCD_BG_WIDTH,
 190:Src/app.c     ****   .YSize = LCD_BG_HEIGHT,
 191:Src/app.c     **** };
 192:Src/app.c     **** /* Lcd Foreground area */
 193:Src/app.c     **** static Rectangle_TypeDef lcd_fg_area = {
 194:Src/app.c     ****   .X0 = 0,
 195:Src/app.c     ****   .Y0 = 0,
 196:Src/app.c     ****   .XSize = LCD_FG_WIDTH,
ARM GAS  /tmp/cc2qXJ00.s 			page 5


 197:Src/app.c     ****   .YSize = LCD_FG_HEIGHT,
 198:Src/app.c     **** };
 199:Src/app.c     **** /* Lcd Background Buffer */
 200:Src/app.c     **** static uint8_t lcd_bg_buffer[DISPLAY_BUFFER_NB][LCD_BG_WIDTH * LCD_BG_HEIGHT * DISPLAY_BPP] ALIGN_3
 201:Src/app.c     **** static int lcd_bg_buffer_disp_idx = 1;
 202:Src/app.c     **** static int lcd_bg_buffer_capt_idx = 0;
 203:Src/app.c     **** /* Lcd Foreground Buffer */
 204:Src/app.c     **** static uint8_t lcd_fg_buffer[2][LCD_FG_WIDTH * LCD_FG_HEIGHT* 2] ALIGN_32 IN_PSRAM;
 205:Src/app.c     **** static int lcd_fg_buffer_rd_idx;
 206:Src/app.c     **** static display_t disp = {
 207:Src/app.c     ****   .info.is_ld_displayed = 1,
 208:Src/app.c     ****   .info.is_pd_displayed = 0,
 209:Src/app.c     **** };
 210:Src/app.c     **** static cpuload_info_t cpu_load;
 211:Src/app.c     **** /* screen buffer */
 212:Src/app.c     **** static uint8_t screen_buffer[LCD_BG_WIDTH * LCD_BG_HEIGHT * 2] ALIGN_32 IN_PSRAM;
 213:Src/app.c     **** 
 214:Src/app.c     **** /* model */
 215:Src/app.c     ****  /* palm detector */
 216:Src/app.c     **** LL_ATON_DECLARE_NAMED_NN_INSTANCE_AND_INTERFACE(palm_detector);
 217:Src/app.c     **** static roi_t rois[PD_MAX_HAND_NB];
 218:Src/app.c     ****  /* hand landmark */
 219:Src/app.c     **** LL_ATON_DECLARE_NAMED_NN_INSTANCE_AND_INTERFACE(hand_landmark);
 220:Src/app.c     **** static ld_point_t ld_landmarks[PD_MAX_HAND_NB][LD_LANDMARK_NB];
 221:Src/app.c     **** static uint32_t frame_event_nb;
 222:Src/app.c     **** static volatile uint32_t frame_event_nb_for_resize;
 223:Src/app.c     **** 
 224:Src/app.c     ****  /* nn input buffers */
 225:Src/app.c     **** static uint8_t nn_input_buffers[2][NN_WIDTH * NN_HEIGHT * NN_BPP] ALIGN_32 IN_PSRAM;
 226:Src/app.c     **** static bqueue_t nn_input_queue;
 227:Src/app.c     **** 
 228:Src/app.c     ****  /* rtos */
 229:Src/app.c     **** static StaticTask_t nn_thread;
 230:Src/app.c     **** static StackType_t nn_thread_stack[2 * configMINIMAL_STACK_SIZE];
 231:Src/app.c     **** static StaticTask_t dp_thread;
 232:Src/app.c     **** static StackType_t dp_thread_stack[2 *configMINIMAL_STACK_SIZE];
 233:Src/app.c     **** static StaticTask_t isp_thread;
 234:Src/app.c     **** static StackType_t isp_thread_stack[2 *configMINIMAL_STACK_SIZE];
 235:Src/app.c     **** static SemaphoreHandle_t isp_sem;
 236:Src/app.c     **** static StaticSemaphore_t isp_sem_buffer;
 237:Src/app.c     **** 
 238:Src/app.c     **** #if HAS_ROTATION_SUPPORT == 1
 239:Src/app.c     **** static GFXMMU_HandleTypeDef hgfxmmu;
 240:Src/app.c     **** static nema_cmdlist_t cl;
 241:Src/app.c     **** #endif
 242:Src/app.c     **** 
 243:Src/app.c     **** static int is_cache_enable()
 244:Src/app.c     **** {
 245:Src/app.c     **** #if defined(USE_DCACHE)
 246:Src/app.c     ****   return 1;
 247:Src/app.c     **** #else
 248:Src/app.c     ****   return 0;
 249:Src/app.c     **** #endif
 250:Src/app.c     **** }
 251:Src/app.c     **** 
 252:Src/app.c     **** static float pd_normalize_angle(float angle)
 253:Src/app.c     **** {
ARM GAS  /tmp/cc2qXJ00.s 			page 6


 254:Src/app.c     ****   return angle - 2 * M_PI * floorf((angle - (-M_PI)) / (2 * M_PI));
 255:Src/app.c     **** }
 256:Src/app.c     **** 
 257:Src/app.c     **** /* Without rotation support allow limited amount of angles */
 258:Src/app.c     **** #if HAS_ROTATION_SUPPORT == 0
 259:Src/app.c     **** static float pd_cook_rotation(float angle)
 260:Src/app.c     **** {
 261:Src/app.c     ****   if (angle >= (3 * M_PI) / 4)
 262:Src/app.c     ****     angle = M_PI;
 263:Src/app.c     ****   else if (angle >= (1 * M_PI) / 4)
 264:Src/app.c     ****     angle = M_PI / 2;
 265:Src/app.c     ****   else if (angle >= -(1 * M_PI) / 4)
 266:Src/app.c     ****     angle = 0;
 267:Src/app.c     ****   else if (angle >= -(3 * M_PI) / 4)
 268:Src/app.c     ****     angle = -M_PI / 2;
 269:Src/app.c     ****   else
 270:Src/app.c     ****     angle = -M_PI;
 271:Src/app.c     **** 
 272:Src/app.c     ****   return angle;
 273:Src/app.c     **** }
 274:Src/app.c     **** #else
 275:Src/app.c     **** static float pd_cook_rotation(float angle)
 276:Src/app.c     **** {
 277:Src/app.c     ****   return angle;
 278:Src/app.c     **** }
 279:Src/app.c     **** #endif
 280:Src/app.c     **** 
 281:Src/app.c     **** static float pd_compute_rotation(pd_pp_box_t *box)
 282:Src/app.c     **** {
 283:Src/app.c     ****   float x0, y0, x1, y1;
 284:Src/app.c     ****   float rotation;
 285:Src/app.c     **** 
 286:Src/app.c     ****   x0 = box->pKps[0].x;
 287:Src/app.c     ****   y0 = box->pKps[0].y;
 288:Src/app.c     ****   x1 = box->pKps[2].x;
 289:Src/app.c     ****   y1 = box->pKps[2].y;
 290:Src/app.c     **** 
 291:Src/app.c     ****   rotation = M_PI * 0.5 - atan2f(-(y1 - y0), x1 - x0);
 292:Src/app.c     **** 
 293:Src/app.c     ****   return pd_cook_rotation(pd_normalize_angle(rotation));
 294:Src/app.c     **** }
 295:Src/app.c     **** 
 296:Src/app.c     **** static void cvt_pd_coord_to_screen_coord(pd_pp_box_t *box)
 297:Src/app.c     **** {
 298:Src/app.c     ****   int i;
 299:Src/app.c     **** 
 300:Src/app.c     ****   /* This is not a typo. Since screen aspect ratio was conserved. We really want to use LCD_BG_WIDT
 301:Src/app.c     ****    * y positions.
 302:Src/app.c     ****    */
 303:Src/app.c     **** 
 304:Src/app.c     ****   box->x_center *= LCD_BG_WIDTH;
 305:Src/app.c     ****   box->y_center *= LCD_BG_WIDTH;
 306:Src/app.c     ****   box->width *= LCD_BG_WIDTH;
 307:Src/app.c     ****   box->height *= LCD_BG_WIDTH;
 308:Src/app.c     ****   for (i = 0; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++) {
 309:Src/app.c     ****     box->pKps[i].x *= LCD_BG_WIDTH;
 310:Src/app.c     ****     box->pKps[i].y *= LCD_BG_WIDTH;
ARM GAS  /tmp/cc2qXJ00.s 			page 7


 311:Src/app.c     ****   }
 312:Src/app.c     **** }
 313:Src/app.c     **** 
 314:Src/app.c     **** static void roi_shift_and_scale(roi_t *roi, float shift_x, float shift_y, float scale_x, float scal
 315:Src/app.c     **** {
 316:Src/app.c     ****   float long_side;
 317:Src/app.c     ****   float sx, sy;
 318:Src/app.c     **** 
 319:Src/app.c     ****   sx = (roi->w * shift_x * cos(roi->rotation) - roi->h * shift_y * sin(roi->rotation));
 320:Src/app.c     ****   sy = (roi->w * shift_x * sin(roi->rotation) + roi->h * shift_y * cos(roi->rotation));
 321:Src/app.c     **** 
 322:Src/app.c     ****   roi->cx += sx;
 323:Src/app.c     ****   roi->cy += sy;
 324:Src/app.c     **** 
 325:Src/app.c     ****   long_side = MAX(roi->w, roi->h);
 326:Src/app.c     ****   roi->w = long_side;
 327:Src/app.c     ****   roi->h = long_side;
 328:Src/app.c     **** 
 329:Src/app.c     ****   roi->w *= scale_x;
 330:Src/app.c     ****   roi->h *= scale_y;
 331:Src/app.c     **** }
 332:Src/app.c     **** 
 333:Src/app.c     **** static void pd_box_to_roi(pd_pp_box_t *box,  roi_t *roi)
 334:Src/app.c     **** {
 335:Src/app.c     ****   const float shift_x = 0;
 336:Src/app.c     ****   const float shift_y = -0.5;
 337:Src/app.c     ****   const float scale = 2.6;
 338:Src/app.c     **** 
 339:Src/app.c     ****   roi->cx = box->x_center;
 340:Src/app.c     ****   roi->cy = box->y_center;
 341:Src/app.c     ****   roi->w = box->width;
 342:Src/app.c     ****   roi->h = box->height;
 343:Src/app.c     ****   roi->rotation = pd_compute_rotation(box);
 344:Src/app.c     **** 
 345:Src/app.c     ****   roi_shift_and_scale(roi, shift_x, shift_y, scale, scale);
 346:Src/app.c     **** 
 347:Src/app.c     **** #if HAS_ROTATION_SUPPORT == 0
 348:Src/app.c     ****   /* In that case we can cancel rotation. This ensure corners are corrected oriented */
 349:Src/app.c     ****   roi->rotation = 0;
 350:Src/app.c     **** #endif
 351:Src/app.c     **** }
 352:Src/app.c     **** 
 353:Src/app.c     **** static void copy_pd_box(pd_pp_box_t *dst, pd_pp_box_t *src)
 354:Src/app.c     **** {
 355:Src/app.c     ****   int i;
 356:Src/app.c     **** 
 357:Src/app.c     ****   dst->prob = src->prob;
 358:Src/app.c     ****   dst->x_center = src->x_center;
 359:Src/app.c     ****   dst->y_center = src->y_center;
 360:Src/app.c     ****   dst->width = src->width;
 361:Src/app.c     ****   dst->height = src->height;
 362:Src/app.c     ****   for (i = 0 ; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++)
 363:Src/app.c     ****     dst->pKps[i] = src->pKps[i];
 364:Src/app.c     **** }
 365:Src/app.c     **** 
 366:Src/app.c     **** static void button_init(button_t *b, Button_TypeDef id, void (*on_click_handler)(void *), void *cb_
 367:Src/app.c     **** {
ARM GAS  /tmp/cc2qXJ00.s 			page 8


 368:Src/app.c     ****   int ret;
 369:Src/app.c     **** 
 370:Src/app.c     ****   ret = BSP_PB_Init(id, BUTTON_MODE_GPIO);
 371:Src/app.c     ****   assert(ret == BSP_ERROR_NONE);
 372:Src/app.c     **** 
 373:Src/app.c     ****   b->button_id = id;
 374:Src/app.c     ****   b->on_click_handler = on_click_handler;
 375:Src/app.c     ****   b->prev_state = 0;
 376:Src/app.c     ****   b->cb_args = cb_args;
 377:Src/app.c     **** }
 378:Src/app.c     **** 
 379:Src/app.c     **** static void button_process(button_t *b)
 380:Src/app.c     **** {
 381:Src/app.c     ****   int state = BSP_PB_GetState(b->button_id);
 382:Src/app.c     **** 
 383:Src/app.c     ****   if (state != b->prev_state && state && b->on_click_handler)
 384:Src/app.c     ****     b->on_click_handler(b->cb_args);
 385:Src/app.c     **** 
 386:Src/app.c     ****   b->prev_state = state;
 387:Src/app.c     **** }
 388:Src/app.c     **** 
 389:Src/app.c     **** static void cpuload_init(cpuload_info_t *cpu_load)
 390:Src/app.c     **** {
 391:Src/app.c     ****   memset(cpu_load, 0, sizeof(cpuload_info_t));
 392:Src/app.c     **** }
 393:Src/app.c     **** 
 394:Src/app.c     **** static void cpuload_update(cpuload_info_t *cpu_load)
 395:Src/app.c     **** {
 396:Src/app.c     ****   int i;
 397:Src/app.c     **** 
 398:Src/app.c     ****   cpu_load->history[1] = cpu_load->history[0];
 399:Src/app.c     ****   cpu_load->history[0].total = portGET_RUN_TIME_COUNTER_VALUE();
 400:Src/app.c     ****   cpu_load->history[0].thread = cpu_load->history[0].total - ulTaskGetIdleRunTimeCounter();
 401:Src/app.c     ****   cpu_load->history[0].tick = HAL_GetTick();
 402:Src/app.c     **** 
 403:Src/app.c     ****   if (cpu_load->history[1].tick - cpu_load->history[2].tick < 1000)
 404:Src/app.c     ****     return ;
 405:Src/app.c     **** 
 406:Src/app.c     ****   for (i = 0; i < CPU_LOAD_HISTORY_DEPTH - 2; i++)
 407:Src/app.c     ****     cpu_load->history[CPU_LOAD_HISTORY_DEPTH - 1 - i] = cpu_load->history[CPU_LOAD_HISTORY_DEPTH - 
 408:Src/app.c     **** }
 409:Src/app.c     **** 
 410:Src/app.c     **** static void cpuload_get_info(cpuload_info_t *cpu_load, float *cpu_load_last, float *cpu_load_last_s
 411:Src/app.c     ****                              float *cpu_load_last_five_seconds)
 412:Src/app.c     **** {
 413:Src/app.c     ****   if (cpu_load_last)
 414:Src/app.c     ****     *cpu_load_last = 100.0 * (cpu_load->history[0].thread - cpu_load->history[1].thread) /
 415:Src/app.c     ****                      (cpu_load->history[0].total - cpu_load->history[1].total);
 416:Src/app.c     ****   if (cpu_load_last_second)
 417:Src/app.c     ****     *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
 418:Src/app.c     ****                      (cpu_load->history[2].total - cpu_load->history[3].total);
 419:Src/app.c     ****   if (cpu_load_last_five_seconds)
 420:Src/app.c     ****     *cpu_load_last_five_seconds = 100.0 * (cpu_load->history[2].thread - cpu_load->history[7].threa
 421:Src/app.c     ****                      (cpu_load->history[2].total - cpu_load->history[7].total);
 422:Src/app.c     **** }
 423:Src/app.c     **** 
 424:Src/app.c     **** static int bqueue_init(bqueue_t *bq, int buffer_nb, uint8_t **buffers)
ARM GAS  /tmp/cc2qXJ00.s 			page 9


 425:Src/app.c     **** {
 426:Src/app.c     ****   int i;
 427:Src/app.c     **** 
 428:Src/app.c     ****   if (buffer_nb > BQUEUE_MAX_BUFFERS)
 429:Src/app.c     ****     return -1;
 430:Src/app.c     **** 
 431:Src/app.c     ****   bq->free = xSemaphoreCreateCountingStatic(buffer_nb, buffer_nb, &bq->free_buffer);
 432:Src/app.c     ****   if (!bq->free)
 433:Src/app.c     ****     goto free_sem_error;
 434:Src/app.c     ****   bq->ready = xSemaphoreCreateCountingStatic(buffer_nb, 0, &bq->ready_buffer);
 435:Src/app.c     ****   if (!bq->ready)
 436:Src/app.c     ****     goto ready_sem_error;
 437:Src/app.c     **** 
 438:Src/app.c     ****   bq->buffer_nb = buffer_nb;
 439:Src/app.c     ****   for (i = 0; i < buffer_nb; i++) {
 440:Src/app.c     ****     assert(buffers[i]);
 441:Src/app.c     ****     bq->buffers[i] = buffers[i];
 442:Src/app.c     ****   }
 443:Src/app.c     ****   bq->free_idx = 0;
 444:Src/app.c     ****   bq->ready_idx = 0;
 445:Src/app.c     **** 
 446:Src/app.c     ****   return 0;
 447:Src/app.c     **** 
 448:Src/app.c     **** ready_sem_error:
 449:Src/app.c     ****   vSemaphoreDelete(bq->free);
 450:Src/app.c     **** free_sem_error:
 451:Src/app.c     ****   return -1;
 452:Src/app.c     **** }
 453:Src/app.c     **** 
 454:Src/app.c     **** static uint8_t *bqueue_get_free(bqueue_t *bq, int is_blocking)
 455:Src/app.c     **** {
 456:Src/app.c     ****   uint8_t *res;
 457:Src/app.c     ****   int ret;
 458:Src/app.c     **** 
 459:Src/app.c     ****   ret = xSemaphoreTake(bq->free, is_blocking ? portMAX_DELAY : 0);
 460:Src/app.c     ****   if (ret == pdFALSE)
 461:Src/app.c     ****     return NULL;
 462:Src/app.c     **** 
 463:Src/app.c     ****   res = bq->buffers[bq->free_idx];
 464:Src/app.c     ****   bq->free_idx = (bq->free_idx + 1) % bq->buffer_nb;
 465:Src/app.c     **** 
 466:Src/app.c     ****   return res;
 467:Src/app.c     **** }
 468:Src/app.c     **** 
 469:Src/app.c     **** static void bqueue_put_free(bqueue_t *bq)
 470:Src/app.c     **** {
 471:Src/app.c     ****   int ret;
 472:Src/app.c     **** 
 473:Src/app.c     ****   ret = xSemaphoreGive(bq->free);
 474:Src/app.c     ****   assert(ret == pdTRUE);
 475:Src/app.c     **** }
 476:Src/app.c     **** 
 477:Src/app.c     **** static uint8_t *bqueue_get_ready(bqueue_t *bq)
 478:Src/app.c     **** {
 479:Src/app.c     ****   uint8_t *res;
 480:Src/app.c     ****   int ret;
 481:Src/app.c     **** 
ARM GAS  /tmp/cc2qXJ00.s 			page 10


 482:Src/app.c     ****   ret = xSemaphoreTake(bq->ready, portMAX_DELAY);
 483:Src/app.c     ****   assert(ret == pdTRUE);
 484:Src/app.c     **** 
 485:Src/app.c     ****   res = bq->buffers[bq->ready_idx];
 486:Src/app.c     ****   bq->ready_idx = (bq->ready_idx + 1) % bq->buffer_nb;
 487:Src/app.c     **** 
 488:Src/app.c     ****   return res;
 489:Src/app.c     **** }
 490:Src/app.c     **** 
 491:Src/app.c     **** static void bqueue_put_ready(bqueue_t *bq)
 492:Src/app.c     **** {
 493:Src/app.c     ****   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 494:Src/app.c     ****   int ret;
 495:Src/app.c     **** 
 496:Src/app.c     ****   if (xPortIsInsideInterrupt()) {
 497:Src/app.c     ****     ret = xSemaphoreGiveFromISR(bq->ready, &xHigherPriorityTaskWoken);
 498:Src/app.c     ****     assert(ret == pdTRUE);
 499:Src/app.c     ****     portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 500:Src/app.c     ****   } else {
 501:Src/app.c     ****     ret = xSemaphoreGive(bq->ready);
 502:Src/app.c     ****     assert(ret == pdTRUE);
 503:Src/app.c     ****   }
 504:Src/app.c     **** }
 505:Src/app.c     **** 
 506:Src/app.c     **** static void reload_bg_layer(int next_disp_idx)
 507:Src/app.c     **** {
 508:Src/app.c     ****   int ret;
 509:Src/app.c     **** 
 510:Src/app.c     ****   ret = SCRL_SetAddress_NoReload(lcd_bg_buffer[next_disp_idx], SCRL_LAYER_0);
 511:Src/app.c     ****   assert(ret == 0);
 512:Src/app.c     ****   ret = SCRL_ReloadLayer(SCRL_LAYER_0);
 513:Src/app.c     ****   assert(ret == 0);
 514:Src/app.c     **** 
 515:Src/app.c     ****   ret = SRCL_Update();
 516:Src/app.c     ****   assert(ret == 0);
 517:Src/app.c     **** }
 518:Src/app.c     **** 
 519:Src/app.c     **** static void app_main_pipe_frame_event()
 520:Src/app.c     **** {
 521:Src/app.c     ****   int next_disp_idx = (lcd_bg_buffer_disp_idx + 1) % DISPLAY_BUFFER_NB;
 522:Src/app.c     ****   int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
 523:Src/app.c     ****   int ret;
 524:Src/app.c     **** 
 525:Src/app.c     ****   ret = HAL_DCMIPP_PIPE_SetMemoryAddress(CMW_CAMERA_GetDCMIPPHandle(), DCMIPP_PIPE1,
 526:Src/app.c     ****                                          DCMIPP_MEMORY_ADDRESS_0, (uint32_t) lcd_bg_buffer[next_cap
 527:Src/app.c     ****   assert(ret == HAL_OK);
 528:Src/app.c     **** 
 529:Src/app.c     ****   reload_bg_layer(next_disp_idx);
 530:Src/app.c     ****   lcd_bg_buffer_disp_idx = next_disp_idx;
 531:Src/app.c     ****   lcd_bg_buffer_capt_idx = next_capt_idx;
 532:Src/app.c     **** 
 533:Src/app.c     ****   frame_event_nb++;
 534:Src/app.c     **** }
 535:Src/app.c     **** 
 536:Src/app.c     **** 
 537:Src/app.c     **** static void app_ancillary_pipe_frame_event()
 538:Src/app.c     **** {
ARM GAS  /tmp/cc2qXJ00.s 			page 11


 539:Src/app.c     ****   uint8_t *next_buffer;
 540:Src/app.c     ****   int ret;
 541:Src/app.c     **** 
 542:Src/app.c     ****   next_buffer = bqueue_get_free(&nn_input_queue, 0);
 543:Src/app.c     ****   if (next_buffer) {
 544:Src/app.c     ****     ret = HAL_DCMIPP_PIPE_SetMemoryAddress(CMW_CAMERA_GetDCMIPPHandle(), DCMIPP_PIPE2,
 545:Src/app.c     ****                                            DCMIPP_MEMORY_ADDRESS_0, (uint32_t) next_buffer);
 546:Src/app.c     ****     assert(ret == HAL_OK);
 547:Src/app.c     ****     /* minus 1 since app_main_pipe_frame_event occur before app_ancillary_pipe_frame_event() */
 548:Src/app.c     ****     frame_event_nb_for_resize = frame_event_nb - 1;
 549:Src/app.c     ****     bqueue_put_ready(&nn_input_queue);
 550:Src/app.c     ****   }
 551:Src/app.c     **** }
 552:Src/app.c     **** 
 553:Src/app.c     **** static void app_main_pipe_vsync_event()
 554:Src/app.c     **** {
 555:Src/app.c     ****   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 556:Src/app.c     ****   int ret;
 557:Src/app.c     **** 
 558:Src/app.c     ****   ret = xSemaphoreGiveFromISR(isp_sem, &xHigherPriorityTaskWoken);
 559:Src/app.c     ****   if (ret == pdTRUE)
 560:Src/app.c     ****     portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 561:Src/app.c     **** }
 562:Src/app.c     **** 
 563:Src/app.c     **** static int clamp_point(int *x, int *y)
 564:Src/app.c     **** {
  34              		.loc 1 564 1 view -0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 0, uses_anonymous_args = 0
 565:Src/app.c     ****   int xi = *x;
  38              		.loc 1 565 3 view .LVU1
  39              		.loc 1 565 7 is_stmt 0 view .LVU2
  40 0000 0368     		ldr	r3, [r0]
  41              	.LVL1:
 566:Src/app.c     ****   int yi = *y;
  42              		.loc 1 566 3 is_stmt 1 view .LVU3
 564:Src/app.c     ****   int xi = *x;
  43              		.loc 1 564 1 is_stmt 0 view .LVU4
  44 0002 10B5     		push	{r4, lr}
  45              		.cfi_def_cfa_offset 8
  46              		.cfi_offset 4, -8
  47              		.cfi_offset 14, -4
 567:Src/app.c     **** 
 568:Src/app.c     ****   if (*x < 0)
  48              		.loc 1 568 6 view .LVU5
  49 0004 002B     		cmp	r3, #0
 569:Src/app.c     ****     *x = 0;
  50              		.loc 1 569 8 view .LVU6
  51 0006 B8BF     		it	lt
  52 0008 0024     		movlt	r4, #0
 566:Src/app.c     **** 
  53              		.loc 1 566 7 view .LVU7
  54 000a 0A68     		ldr	r2, [r1]
  55              	.LVL2:
 568:Src/app.c     ****     *x = 0;
  56              		.loc 1 568 3 is_stmt 1 view .LVU8
ARM GAS  /tmp/cc2qXJ00.s 			page 12


  57              		.loc 1 569 5 view .LVU9
  58              		.loc 1 569 8 is_stmt 0 view .LVU10
  59 000c B8BF     		it	lt
  60 000e 0460     		strlt	r4, [r0]
 570:Src/app.c     ****   if (*y < 0)
  61              		.loc 1 570 3 is_stmt 1 view .LVU11
  62              		.loc 1 570 6 is_stmt 0 view .LVU12
  63 0010 0C68     		ldr	r4, [r1]
  64 0012 002C     		cmp	r4, #0
 571:Src/app.c     ****     *y = 0;
  65              		.loc 1 571 5 is_stmt 1 view .LVU13
  66              		.loc 1 571 8 is_stmt 0 view .LVU14
  67 0014 BCBF     		itt	lt
  68 0016 0024     		movlt	r4, #0
  69 0018 0C60     		strlt	r4, [r1]
 572:Src/app.c     ****   if (*x >= lcd_bg_area.XSize)
  70              		.loc 1 572 3 is_stmt 1 view .LVU15
  71              		.loc 1 572 6 is_stmt 0 view .LVU16
  72 001a 0468     		ldr	r4, [r0]
  73 001c B4F5487F 		cmp	r4, #800
 573:Src/app.c     ****     *x = lcd_bg_area.XSize - 1;
  74              		.loc 1 573 5 is_stmt 1 view .LVU17
  75              		.loc 1 573 8 is_stmt 0 view .LVU18
  76 0020 24BF     		itt	cs
  77 0022 40F21F34 		movwcs	r4, #799
  78 0026 0460     		strcs	r4, [r0]
 574:Src/app.c     ****   if (*y >= lcd_bg_area.YSize)
  79              		.loc 1 574 3 is_stmt 1 view .LVU19
  80              		.loc 1 574 6 is_stmt 0 view .LVU20
  81 0028 0C68     		ldr	r4, [r1]
  82 002a B4F5F07F 		cmp	r4, #480
 575:Src/app.c     ****     *y = lcd_bg_area.YSize - 1;
  83              		.loc 1 575 5 is_stmt 1 view .LVU21
  84              		.loc 1 575 8 is_stmt 0 view .LVU22
  85 002e 24BF     		itt	cs
  86 0030 40F2DF14 		movwcs	r4, #479
  87 0034 0C60     		strcs	r4, [r1]
 576:Src/app.c     **** 
 577:Src/app.c     ****   return (xi != *x) || (yi != *y);
  88              		.loc 1 577 3 is_stmt 1 view .LVU23
  89              		.loc 1 577 21 is_stmt 0 view .LVU24
  90 0036 0068     		ldr	r0, [r0]
  91              	.LVL3:
  92              		.loc 1 577 21 view .LVU25
  93 0038 9842     		cmp	r0, r3
  94 003a 04D1     		bne	.L7
  95              		.loc 1 577 21 discriminator 2 view .LVU26
  96 003c 0868     		ldr	r0, [r1]
  97 003e 801A     		subs	r0, r0, r2
  98 0040 18BF     		it	ne
  99 0042 0120     		movne	r0, #1
 100              	.L1:
 578:Src/app.c     **** }
 101              		.loc 1 578 1 view .LVU27
 102 0044 10BD     		pop	{r4, pc}
 103              	.L7:
 577:Src/app.c     **** }
ARM GAS  /tmp/cc2qXJ00.s 			page 13


 104              		.loc 1 577 21 discriminator 3 view .LVU28
 105 0046 0120     		movs	r0, #1
 577:Src/app.c     **** }
 106              		.loc 1 577 21 view .LVU29
 107 0048 FCE7     		b	.L1
 108              		.cfi_endproc
 109              	.LFE7380:
 111              		.section	.rodata.isp_thread_fct.str1.1,"aMS",%progbits,1
 112              	.LC1:
 113 0000 72657420 		.ascii	"ret == pdTRUE\000"
 113      3D3D2070 
 113      64545255 
 113      4500
 114              	.LC2:
 115 000e 5372632F 		.ascii	"Src/app.c\000"
 115      6170702E 
 115      6300
 116              		.section	.text.isp_thread_fct,"ax",%progbits
 117              		.align	1
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
 122              	isp_thread_fct:
 123              	.LVL4:
 124              	.LFB7408:
 579:Src/app.c     **** 
 580:Src/app.c     **** static int clamp_point_with_margin(int *x, int *y, int margin)
 581:Src/app.c     **** {
 582:Src/app.c     ****   int xi = *x;
 583:Src/app.c     ****   int yi = *y;
 584:Src/app.c     **** 
 585:Src/app.c     ****   if (*x < margin)
 586:Src/app.c     ****     *x = margin;
 587:Src/app.c     ****   if (*y < margin)
 588:Src/app.c     ****     *y = margin;
 589:Src/app.c     ****   if (*x >= lcd_bg_area.XSize - margin)
 590:Src/app.c     ****     *x = lcd_bg_area.XSize - margin - 1;
 591:Src/app.c     ****   if (*y >= lcd_bg_area.YSize - margin)
 592:Src/app.c     ****     *y = lcd_bg_area.YSize - margin - 1;
 593:Src/app.c     **** 
 594:Src/app.c     ****   return (xi != *x) || (yi != *y);
 595:Src/app.c     **** }
 596:Src/app.c     **** 
 597:Src/app.c     **** static void display_pd_hand(pd_pp_box_t *hand)
 598:Src/app.c     **** {
 599:Src/app.c     ****   int xc, yc;
 600:Src/app.c     ****   int x0, y0;
 601:Src/app.c     ****   int x1, y1;
 602:Src/app.c     ****   int w, h;
 603:Src/app.c     ****   int i;
 604:Src/app.c     **** 
 605:Src/app.c     ****   /* display box around palm */
 606:Src/app.c     ****   xc = (int)hand->x_center;
 607:Src/app.c     ****   yc = (int)hand->y_center;
 608:Src/app.c     ****   w = (int)hand->width;
 609:Src/app.c     ****   h = (int)hand->height;
 610:Src/app.c     ****   x0 = xc - (w + 1) / 2;
ARM GAS  /tmp/cc2qXJ00.s 			page 14


 611:Src/app.c     ****   y0 = yc - (h + 1) / 2;
 612:Src/app.c     ****   x1 = xc + (w + 1) / 2;
 613:Src/app.c     ****   y1 = yc + (h + 1) / 2;
 614:Src/app.c     ****   clamp_point(&x0, &y0);
 615:Src/app.c     ****   clamp_point(&x1, &y1);
 616:Src/app.c     ****   UTIL_LCD_DrawRect(x0, y0, x1 - x0, y1 - y0, UTIL_LCD_COLOR_GREEN);
 617:Src/app.c     **** 
 618:Src/app.c     ****   /* display palm key points */
 619:Src/app.c     ****   for (i = 0; i < 7; i++) {
 620:Src/app.c     ****     uint32_t color = (i != 0 && i != 2) ? UTIL_LCD_COLOR_RED : UTIL_LCD_COLOR_BLUE;
 621:Src/app.c     **** 
 622:Src/app.c     ****     x0 = (int)hand->pKps[i].x;
 623:Src/app.c     ****     y0 = (int)hand->pKps[i].y;
 624:Src/app.c     ****     clamp_point(&x0, &y0);
 625:Src/app.c     ****     UTIL_LCD_FillCircle(x0, y0, 2, color);
 626:Src/app.c     ****   }
 627:Src/app.c     **** }
 628:Src/app.c     **** 
 629:Src/app.c     **** static void rotate_point(float pt[2], float rotation)
 630:Src/app.c     **** {
 631:Src/app.c     ****   float x = pt[0];
 632:Src/app.c     ****   float y = pt[1];
 633:Src/app.c     **** 
 634:Src/app.c     ****   pt[0] = cos(rotation) * x - sin(rotation) * y;
 635:Src/app.c     ****   pt[1] = sin(rotation) * x + cos(rotation) * y;
 636:Src/app.c     **** }
 637:Src/app.c     **** 
 638:Src/app.c     **** static void roi_to_corners(roi_t *roi, float corners[4][2])
 639:Src/app.c     **** {
 640:Src/app.c     ****   const float corners_init[4][2] = {
 641:Src/app.c     ****     {-roi->w / 2, -roi->h / 2},
 642:Src/app.c     ****     { roi->w / 2, -roi->h / 2},
 643:Src/app.c     ****     { roi->w / 2,  roi->h / 2},
 644:Src/app.c     ****     {-roi->w / 2,  roi->h / 2},
 645:Src/app.c     ****   };
 646:Src/app.c     ****   int i;
 647:Src/app.c     **** 
 648:Src/app.c     ****   memcpy(corners, corners_init, sizeof(corners_init));
 649:Src/app.c     ****   /* rotate */
 650:Src/app.c     ****   for (i = 0; i < 4; i++)
 651:Src/app.c     ****     rotate_point(corners[i], roi->rotation);
 652:Src/app.c     **** 
 653:Src/app.c     ****   /* shift */
 654:Src/app.c     ****   for (i = 0; i < 4; i++) {
 655:Src/app.c     ****     corners[i][0] += roi->cx;
 656:Src/app.c     ****     corners[i][1] += roi->cy;
 657:Src/app.c     ****   }
 658:Src/app.c     **** }
 659:Src/app.c     **** 
 660:Src/app.c     **** static int clamp_corners(float corners_in[4][2], int corners_out[4][2])
 661:Src/app.c     **** {
 662:Src/app.c     ****   int is_clamp = 0;
 663:Src/app.c     ****   int i;
 664:Src/app.c     **** 
 665:Src/app.c     ****   for (i = 0; i < 4; i++) {
 666:Src/app.c     ****     corners_out[i][0] = (int)corners_in[i][0];
 667:Src/app.c     ****     corners_out[i][1] = (int)corners_in[i][1];
ARM GAS  /tmp/cc2qXJ00.s 			page 15


 668:Src/app.c     ****     is_clamp |= clamp_point(&corners_out[i][0], &corners_out[i][1]);
 669:Src/app.c     ****   }
 670:Src/app.c     **** 
 671:Src/app.c     ****   return is_clamp;
 672:Src/app.c     **** }
 673:Src/app.c     **** 
 674:Src/app.c     **** static void display_roi(roi_t *roi)
 675:Src/app.c     **** {
 676:Src/app.c     ****   float corners_f[4][2];
 677:Src/app.c     ****   int corners[4][2];
 678:Src/app.c     ****   int is_clamp;
 679:Src/app.c     ****   int i;
 680:Src/app.c     **** 
 681:Src/app.c     ****   /* compute box corners */
 682:Src/app.c     ****   roi_to_corners(roi, corners_f);
 683:Src/app.c     **** 
 684:Src/app.c     ****   /* clamp */
 685:Src/app.c     ****   is_clamp = clamp_corners(corners_f, corners);
 686:Src/app.c     ****   if (is_clamp)
 687:Src/app.c     ****     return ;
 688:Src/app.c     **** 
 689:Src/app.c     ****   /* display */
 690:Src/app.c     ****   for (i = 0; i < 4; i++)
 691:Src/app.c     ****     UTIL_LCD_DrawLine(corners[i][0], corners[i][1], corners[(i + 1) % 4][0], corners[(i + 1) % 4][1
 692:Src/app.c     ****                       UTIL_LCD_COLOR_RED);
 693:Src/app.c     **** }
 694:Src/app.c     **** 
 695:Src/app.c     **** static void decode_ld_landmark(roi_t *roi, ld_point_t *lm, ld_point_t *decoded)
 696:Src/app.c     **** {
 697:Src/app.c     ****   float rotation = roi->rotation;
 698:Src/app.c     ****   float w = roi->w;
 699:Src/app.c     ****   float h = roi->h;
 700:Src/app.c     **** 
 701:Src/app.c     ****   decoded->x = roi->cx + (lm->x - 0.5) * w * cos(rotation) - (lm->y - 0.5) * h * sin(rotation);
 702:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 703:Src/app.c     **** }
 704:Src/app.c     **** 
 705:Src/app.c     **** static void display_ld_hand(hand_info_t *hand)
 706:Src/app.c     **** {
 707:Src/app.c     ****   const int disk_radius = DISK_RADIUS;
 708:Src/app.c     ****   roi_t *roi = &hand->roi;
 709:Src/app.c     ****   int x[LD_LANDMARK_NB];
 710:Src/app.c     ****   int y[LD_LANDMARK_NB];
 711:Src/app.c     ****   int is_clamped[LD_LANDMARK_NB];
 712:Src/app.c     ****   ld_point_t decoded;
 713:Src/app.c     ****   int i;
 714:Src/app.c     **** 
 715:Src/app.c     ****   for (i = 0; i < LD_LANDMARK_NB; i++) {
 716:Src/app.c     ****     decode_ld_landmark(roi, &hand->ld_landmarks[i], &decoded);
 717:Src/app.c     ****     x[i] = (int)decoded.x;
 718:Src/app.c     ****     y[i] = (int)decoded.y;
 719:Src/app.c     ****     is_clamped[i] = clamp_point_with_margin(&x[i], &y[i], disk_radius);
 720:Src/app.c     ****   }
 721:Src/app.c     **** 
 722:Src/app.c     ****   for (i = 0; i < LD_LANDMARK_NB; i++) {
 723:Src/app.c     ****     if (is_clamped[i])
 724:Src/app.c     ****       continue;
ARM GAS  /tmp/cc2qXJ00.s 			page 16


 725:Src/app.c     ****     UTIL_LCD_FillCircle(x[i], y[i], disk_radius, UTIL_LCD_COLOR_YELLOW);
 726:Src/app.c     ****   }
 727:Src/app.c     **** 
 728:Src/app.c     ****   for (i = 0; i < LD_BINDING_NB; i++) {
 729:Src/app.c     ****     if (is_clamped[ld_bindings_idx[i][0]] || is_clamped[ld_bindings_idx[i][1]])
 730:Src/app.c     ****       continue;
 731:Src/app.c     ****     UTIL_LCD_DrawLine(x[ld_bindings_idx[i][0]], y[ld_bindings_idx[i][0]],
 732:Src/app.c     ****                       x[ld_bindings_idx[i][1]], y[ld_bindings_idx[i][1]],
 733:Src/app.c     ****                       UTIL_LCD_COLOR_BLACK);
 734:Src/app.c     ****   }
 735:Src/app.c     **** }
 736:Src/app.c     **** 
 737:Src/app.c     **** void display_hand(display_info_t *info, hand_info_t *hand)
 738:Src/app.c     **** {
 739:Src/app.c     ****   if (info->is_pd_displayed) {
 740:Src/app.c     ****     display_pd_hand(&hand->pd_hands);
 741:Src/app.c     ****     display_roi(&hand->roi);
 742:Src/app.c     ****   }
 743:Src/app.c     ****   if (info->is_ld_displayed)
 744:Src/app.c     ****     display_ld_hand(hand);
 745:Src/app.c     **** }
 746:Src/app.c     **** 
 747:Src/app.c     **** static void Display_NetworkOutput(display_info_t *info)
 748:Src/app.c     **** {
 749:Src/app.c     ****   float cpu_load_one_second;
 750:Src/app.c     ****   int line_nb = 0;
 751:Src/app.c     ****   float nn_fps;
 752:Src/app.c     ****   int i;
 753:Src/app.c     **** 
 754:Src/app.c     ****   /* clear previous ui */
 755:Src/app.c     ****   UTIL_LCD_FillRect(lcd_fg_area.X0, lcd_fg_area.Y0, lcd_fg_area.XSize, lcd_fg_area.YSize, 0x0000000
 756:Src/app.c     **** 
 757:Src/app.c     ****   /* cpu load */
 758:Src/app.c     ****   cpuload_update(&cpu_load);
 759:Src/app.c     ****   cpuload_get_info(&cpu_load, NULL, &cpu_load_one_second, NULL);
 760:Src/app.c     **** 
 761:Src/app.c     ****   /* draw metrics */
 762:Src/app.c     ****   nn_fps = 1000.0 / info->nn_period_ms;
 763:Src/app.c     ****   UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "Cpu load");
 764:Src/app.c     ****   line_nb += 1;
 765:Src/app.c     ****   UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "   %.1f%%", cpu_load_one_second);
 766:Src/app.c     ****   line_nb += 2;
 767:Src/app.c     ****   UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "Inferences");
 768:Src/app.c     ****   line_nb += 1;
 769:Src/app.c     ****   UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, " pd %2ums", info->pd_ms);
 770:Src/app.c     ****   line_nb += 1;
 771:Src/app.c     ****   UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, " hl %2ums", info->hl_ms);
 772:Src/app.c     ****   line_nb += 2;
 773:Src/app.c     ****   UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "  %.1f FPS", nn_fps);
 774:Src/app.c     ****   line_nb += 2;
 775:Src/app.c     ****   if (DBG_INFO) {
 776:Src/app.c     ****     UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "Display");
 777:Src/app.c     ****     line_nb += 1;
 778:Src/app.c     ****     UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "   %ums", info->disp_ms);
 779:Src/app.c     ****     line_nb += 1;
 780:Src/app.c     ****   }
 781:Src/app.c     **** 
ARM GAS  /tmp/cc2qXJ00.s 			page 17


 782:Src/app.c     ****   /* display palm detector output */
 783:Src/app.c     ****   for (i = 0; i < info->pd_hand_nb; i++) {
 784:Src/app.c     ****     if (info->hands[i].is_valid)
 785:Src/app.c     ****       display_hand(info, &info->hands[i]);
 786:Src/app.c     ****   }
 787:Src/app.c     **** 
 788:Src/app.c     ****   if (DBG_INFO)
 789:Src/app.c     ****     UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "pd : %5.1f %%", info->pd_max_prob * 100);
 790:Src/app.c     **** }
 791:Src/app.c     **** 
 792:Src/app.c     **** static void palm_detector_init(pd_model_info_t *info)
 793:Src/app.c     **** {
 794:Src/app.c     ****   const LL_Buffer_InfoTypeDef *nn_out_info = LL_ATON_Output_Buffers_Info_palm_detector();
 795:Src/app.c     ****   const LL_Buffer_InfoTypeDef *nn_in_info = LL_ATON_Input_Buffers_Info_palm_detector();
 796:Src/app.c     ****   int ret;
 797:Src/app.c     **** 
 798:Src/app.c     ****   /* model info */
 799:Src/app.c     ****   info->nn_in_len = LL_Buffer_len(&nn_in_info[0]);
 800:Src/app.c     ****   info->prob_out = (float *) LL_Buffer_addr_start(&nn_out_info[0]);
 801:Src/app.c     ****   info->prob_out_len = LL_Buffer_len(&nn_out_info[0]);
 802:Src/app.c     ****   assert(info->prob_out_len == AI_PD_MODEL_PP_TOTAL_DETECTIONS * sizeof(float));
 803:Src/app.c     ****   info->boxes_out = (float *) LL_Buffer_addr_start(&nn_out_info[1]);
 804:Src/app.c     ****   info->boxes_out_len = LL_Buffer_len(&nn_out_info[1]);
 805:Src/app.c     ****   assert(info->boxes_out_len == AI_PD_MODEL_PP_TOTAL_DETECTIONS * sizeof(float) * 18);
 806:Src/app.c     **** 
 807:Src/app.c     ****   /* post processor info */
 808:Src/app.c     ****   ret = app_postprocess_init(&info->static_param, &NN_Instance_palm_detector);
 809:Src/app.c     ****   assert(ret == AI_PD_POSTPROCESS_ERROR_NO);
 810:Src/app.c     **** }
 811:Src/app.c     **** 
 812:Src/app.c     **** static int palm_detector_run(uint8_t *buffer, pd_model_info_t *info, uint32_t *pd_exec_time)
 813:Src/app.c     **** {
 814:Src/app.c     ****   uint32_t start_ts;
 815:Src/app.c     ****   int hand_nb;
 816:Src/app.c     ****   int ret;
 817:Src/app.c     ****   int i;
 818:Src/app.c     **** 
 819:Src/app.c     ****   start_ts = HAL_GetTick();
 820:Src/app.c     ****   /* Note that we don't need to clean/invalidate those input buffers since they are only access in 
 821:Src/app.c     ****   ret = LL_ATON_Set_User_Input_Buffer_palm_detector(0, buffer, info->nn_in_len);
 822:Src/app.c     ****   assert(ret == LL_ATON_User_IO_NOERROR);
 823:Src/app.c     **** 
 824:Src/app.c     ****   LL_ATON_RT_Main(&NN_Instance_palm_detector);
 825:Src/app.c     **** 
 826:Src/app.c     ****   ret = app_postprocess_run((void * []){info->prob_out, info->boxes_out}, 2, &info->pd_out, &info->
 827:Src/app.c     ****   assert(ret == AI_PD_POSTPROCESS_ERROR_NO);
 828:Src/app.c     ****   hand_nb = MIN(info->pd_out.box_nb, PD_MAX_HAND_NB);
 829:Src/app.c     **** 
 830:Src/app.c     ****   for (i = 0; i < hand_nb; i++) {
 831:Src/app.c     ****     cvt_pd_coord_to_screen_coord(&info->pd_out.pOutData[i]);
 832:Src/app.c     ****     pd_box_to_roi(&info->pd_out.pOutData[i], &rois[i]);
 833:Src/app.c     ****   }
 834:Src/app.c     **** 
 835:Src/app.c     ****   /* Discard nn_out region (used by pp_outputs variables) to avoid Dcache evictions during nn infer
 836:Src/app.c     ****   CACHE_OP(SCB_InvalidateDCache_by_Addr(info->prob_out, info->prob_out_len));
 837:Src/app.c     ****   CACHE_OP(SCB_InvalidateDCache_by_Addr(info->boxes_out, info->boxes_out_len));
 838:Src/app.c     **** 
ARM GAS  /tmp/cc2qXJ00.s 			page 18


 839:Src/app.c     ****   *pd_exec_time = HAL_GetTick() - start_ts;
 840:Src/app.c     **** 
 841:Src/app.c     ****   return hand_nb;
 842:Src/app.c     **** }
 843:Src/app.c     **** 
 844:Src/app.c     **** static void hand_landmark_init(hl_model_info_t *info)
 845:Src/app.c     **** {
 846:Src/app.c     ****   const LL_Buffer_InfoTypeDef *nn_out_info = LL_ATON_Output_Buffers_Info_hand_landmark();
 847:Src/app.c     ****   const LL_Buffer_InfoTypeDef *nn_in_info = LL_ATON_Input_Buffers_Info_hand_landmark();
 848:Src/app.c     **** 
 849:Src/app.c     ****   info->nn_in = LL_Buffer_addr_start(&nn_in_info[0]);
 850:Src/app.c     ****   info->nn_in_len = LL_Buffer_len(&nn_in_info[0]);
 851:Src/app.c     ****   info->prob_out = (float *) LL_Buffer_addr_start(&nn_out_info[2]);
 852:Src/app.c     ****   info->prob_out_len = LL_Buffer_len(&nn_out_info[2]);
 853:Src/app.c     ****   assert(info->prob_out_len == sizeof(float));
 854:Src/app.c     ****   info->landmarks_out = (float *) LL_Buffer_addr_start(&nn_out_info[3]);
 855:Src/app.c     ****   info->landmarks_out_len = LL_Buffer_len(&nn_out_info[3]);
 856:Src/app.c     ****   assert(info->landmarks_out_len == sizeof(float) * 63);
 857:Src/app.c     **** }
 858:Src/app.c     **** 
 859:Src/app.c     **** #if HAS_ROTATION_SUPPORT == 0
 860:Src/app.c     **** static int hand_landmark_prepare_input(uint8_t *buffer, roi_t *roi, hl_model_info_t *info)
 861:Src/app.c     **** {
 862:Src/app.c     ****   float corners_f[4][2];
 863:Src/app.c     ****   int corners[4][2];
 864:Src/app.c     ****   uint8_t* out_data;
 865:Src/app.c     ****   size_t height_out;
 866:Src/app.c     ****   uint8_t *in_data;
 867:Src/app.c     ****   size_t height_in;
 868:Src/app.c     ****   size_t width_out;
 869:Src/app.c     ****   size_t width_in;
 870:Src/app.c     ****   int is_clamped;
 871:Src/app.c     **** 
 872:Src/app.c     ****   /* defaults when no clamping occurs */
 873:Src/app.c     ****   out_data = info->nn_in;
 874:Src/app.c     ****   width_out = LD_WIDTH;
 875:Src/app.c     ****   height_out = LD_HEIGHT;
 876:Src/app.c     **** 
 877:Src/app.c     ****   roi_to_corners(roi, corners_f);
 878:Src/app.c     ****   is_clamped = clamp_corners(corners_f, corners);
 879:Src/app.c     **** 
 880:Src/app.c     ****   /* If clamp perform a partial resize */
 881:Src/app.c     ****   if (is_clamped) {
 882:Src/app.c     ****     int offset_x;
 883:Src/app.c     ****     int offset_y;
 884:Src/app.c     **** 
 885:Src/app.c     ****     /* clear target memory since resize will partially write it */
 886:Src/app.c     ****     memset(info->nn_in, 0, info->nn_in_len);
 887:Src/app.c     **** 
 888:Src/app.c     ****     /* compute start address of output buffer */
 889:Src/app.c     ****     offset_x = (int)(((corners[0][0] - corners_f[0][0]) * LD_WIDTH) / (corners_f[2][0] - corners_f[
 890:Src/app.c     ****     offset_y = (int)(((corners[0][1] - corners_f[0][1]) * LD_HEIGHT) / (corners_f[2][1] - corners_f
 891:Src/app.c     ****     out_data += offset_y * (int)LD_WIDTH * DISPLAY_BPP + offset_x * DISPLAY_BPP;
 892:Src/app.c     **** 
 893:Src/app.c     ****     /* compute output width and height */
 894:Src/app.c     ****     width_out = (int)((corners[2][0] - corners[0][0]) / (corners_f[2][0] - corners_f[0][0]) * LD_WI
 895:Src/app.c     ****     height_out = (int)((corners[2][1] - corners[0][1]) / (corners_f[2][1] - corners_f[0][1]) * LD_H
ARM GAS  /tmp/cc2qXJ00.s 			page 19


 896:Src/app.c     **** 
 897:Src/app.c     ****     assert(width_out > 0);
 898:Src/app.c     ****     assert(height_out > 0);
 899:Src/app.c     ****     {
 900:Src/app.c     ****       uint8_t* out_data_end;
 901:Src/app.c     **** 
 902:Src/app.c     ****       out_data_end = out_data + (int)LD_WIDTH * DISPLAY_BPP * (height_out - 1) + DISPLAY_BPP * widt
 903:Src/app.c     **** 
 904:Src/app.c     ****       assert(out_data_end >= info->nn_in);
 905:Src/app.c     ****       assert(out_data_end < info->nn_in + info->nn_in_len);
 906:Src/app.c     ****     }
 907:Src/app.c     ****   }
 908:Src/app.c     **** 
 909:Src/app.c     ****   in_data = buffer + corners[0][1] * LCD_BG_WIDTH * DISPLAY_BPP + corners[0][0]* DISPLAY_BPP;
 910:Src/app.c     ****   width_in = corners[2][0] - corners[0][0];
 911:Src/app.c     ****   height_in = corners[2][1] - corners[0][1];
 912:Src/app.c     **** 
 913:Src/app.c     ****   assert(width_in > 0);
 914:Src/app.c     ****   assert(height_in > 0);
 915:Src/app.c     ****   {
 916:Src/app.c     ****     uint8_t* in_data_end;
 917:Src/app.c     **** 
 918:Src/app.c     ****     in_data_end = in_data + LCD_BG_WIDTH * DISPLAY_BPP * (height_in - 1) + DISPLAY_BPP * width_in -
 919:Src/app.c     **** 
 920:Src/app.c     ****     assert(in_data_end >= buffer);
 921:Src/app.c     ****     assert(in_data_end < buffer + LCD_BG_WIDTH * LCD_BG_HEIGHT * DISPLAY_BPP);
 922:Src/app.c     ****   }
 923:Src/app.c     **** 
 924:Src/app.c     ****   IPL_resize_bilinear_iu8ou8_with_strides_RGB(in_data, out_data, LCD_BG_WIDTH * DISPLAY_BPP, LD_WID
 925:Src/app.c     ****                                               width_in, height_in, width_out, height_out);
 926:Src/app.c     **** 
 927:Src/app.c     ****   return 0;
 928:Src/app.c     **** }
 929:Src/app.c     **** #else
 930:Src/app.c     **** static void app_transform(nema_matrix3x3_t t, app_v3_t v)
 931:Src/app.c     **** {
 932:Src/app.c     ****   app_v3_t r;
 933:Src/app.c     ****   int i;
 934:Src/app.c     **** 
 935:Src/app.c     ****   for (i = 0; i < 3; i++)
 936:Src/app.c     ****     r[i] = t[i][0] * v[0] + t[i][1] * v[1] + t[i][2] * v[2];
 937:Src/app.c     **** 
 938:Src/app.c     ****   for (i = 0; i < 3; i++)
 939:Src/app.c     ****     v[i] = r[i];
 940:Src/app.c     **** }
 941:Src/app.c     **** 
 942:Src/app.c     **** static int hand_landmark_prepare_input(uint8_t *buffer, roi_t *roi, hl_model_info_t *info)
 943:Src/app.c     **** {
 944:Src/app.c     ****   app_v3_t vertex[] = {
 945:Src/app.c     ****     {           0,             0, 1},
 946:Src/app.c     ****     {LCD_BG_WIDTH,             0, 1},
 947:Src/app.c     ****     {LCD_BG_WIDTH, LCD_BG_HEIGHT, 1},
 948:Src/app.c     ****     {           0, LCD_BG_HEIGHT, 1},
 949:Src/app.c     ****   };
 950:Src/app.c     ****   GFXMMU_BuffersTypeDef buffers = { 0 };
 951:Src/app.c     ****   nema_matrix3x3_t t;
 952:Src/app.c     ****   int ret;
ARM GAS  /tmp/cc2qXJ00.s 			page 20


 953:Src/app.c     ****   int i;
 954:Src/app.c     **** 
 955:Src/app.c     ****   buffers.Buf0Address = (uint32_t) info->nn_in;
 956:Src/app.c     ****   ret = HAL_GFXMMU_ModifyBuffers(&hgfxmmu, &buffers);
 957:Src/app.c     ****   assert(ret == HAL_OK);
 958:Src/app.c     **** 
 959:Src/app.c     ****   /* bind destination texture */
 960:Src/app.c     ****   nema_bind_dst_tex(GFXMMU_VIRTUAL_BUFFER0_BASE, LD_WIDTH, LD_HEIGHT, NEMA_RGBA8888, -1);
 961:Src/app.c     ****   nema_set_clip(0, 0, LD_WIDTH, LD_HEIGHT);
 962:Src/app.c     ****   nema_clear(0);
 963:Src/app.c     ****   /* bind source texture */
 964:Src/app.c     ****   nema_bind_src_tex((uintptr_t) buffer, LCD_BG_WIDTH, LCD_BG_HEIGHT, NEMA_RGBA8888, -1, NEMA_FILTER
 965:Src/app.c     ****   nema_enable_tiling(1);
 966:Src/app.c     ****   nema_set_blend_blit(NEMA_BL_SRC);
 967:Src/app.c     **** 
 968:Src/app.c     ****   /* let's go */
 969:Src/app.c     ****   nema_mat3x3_load_identity(t);
 970:Src/app.c     ****   nema_mat3x3_translate(t, -roi->cx, -roi->cy);
 971:Src/app.c     ****   nema_mat3x3_rotate(t, nema_rad_to_deg(-roi->rotation));
 972:Src/app.c     ****   nema_mat3x3_scale(t, LD_WIDTH / roi->w, LD_HEIGHT / roi->h);
 973:Src/app.c     ****   nema_mat3x3_translate(t, LD_WIDTH / 2, LD_HEIGHT / 2);
 974:Src/app.c     ****   for (i = 0 ; i < 4; i++)
 975:Src/app.c     ****     app_transform(t, vertex[i]);
 976:Src/app.c     ****   nema_blit_quad_fit(vertex[0][0], vertex[0][1], vertex[1][0], vertex[1][1],
 977:Src/app.c     ****                      vertex[2][0], vertex[2][1], vertex[3][0], vertex[3][1]);
 978:Src/app.c     **** 
 979:Src/app.c     ****   nema_cl_submit(&cl);
 980:Src/app.c     ****   nema_cl_wait(&cl);
 981:Src/app.c     ****   HAL_ICACHE_Invalidate();
 982:Src/app.c     **** 
 983:Src/app.c     ****   assert(!nema_get_error());
 984:Src/app.c     **** 
 985:Src/app.c     ****   return 0;
 986:Src/app.c     **** }
 987:Src/app.c     **** #endif
 988:Src/app.c     **** 
 989:Src/app.c     **** static int hand_landmark_run(uint8_t *buffer, hl_model_info_t *info, roi_t *roi,
 990:Src/app.c     ****                              ld_point_t ld_landmarks[LD_LANDMARK_NB])
 991:Src/app.c     **** {
 992:Src/app.c     ****   int is_clamped;
 993:Src/app.c     ****   int is_valid;
 994:Src/app.c     **** 
 995:Src/app.c     ****   is_clamped = hand_landmark_prepare_input(buffer, roi, info);
 996:Src/app.c     ****   CACHE_OP(SCB_CleanInvalidateDCache_by_Addr(info->nn_in, info->nn_in_len));
 997:Src/app.c     ****   if (is_clamped)
 998:Src/app.c     ****     return 0;
 999:Src/app.c     **** 
1000:Src/app.c     ****   LL_ATON_RT_Main(&NN_Instance_hand_landmark);
1001:Src/app.c     **** 
1002:Src/app.c     ****   is_valid = ld_post_process(info->prob_out, info->landmarks_out, ld_landmarks);
1003:Src/app.c     **** 
1004:Src/app.c     ****   /* Discard nn_out region (used by pp_input and pp_outputs variables) to avoid Dcache evictions du
1005:Src/app.c     ****   CACHE_OP(SCB_InvalidateDCache_by_Addr(info->prob_out, info->prob_out_len));
1006:Src/app.c     ****   CACHE_OP(SCB_InvalidateDCache_by_Addr(info->landmarks_out, info->landmarks_out_len));
1007:Src/app.c     **** 
1008:Src/app.c     ****   return is_valid;
1009:Src/app.c     **** }
ARM GAS  /tmp/cc2qXJ00.s 			page 21


1010:Src/app.c     **** 
1011:Src/app.c     **** #if HAS_ROTATION_SUPPORT == 1
1012:Src/app.c     **** static void app_rot_init(hl_model_info_t *info)
1013:Src/app.c     **** {
1014:Src/app.c     ****   GFXMMU_PackingTypeDef packing = { 0 };
1015:Src/app.c     ****   int ret;
1016:Src/app.c     **** 
1017:Src/app.c     ****   printf("init nema\n");
1018:Src/app.c     ****   nema_init();
1019:Src/app.c     ****   assert(!nema_get_error());
1020:Src/app.c     ****   nema_ext_hold_enable(2);
1021:Src/app.c     ****   nema_ext_hold_irq_enable(2);
1022:Src/app.c     ****   nema_ext_hold_enable(3);
1023:Src/app.c     ****   nema_ext_hold_irq_enable(3);
1024:Src/app.c     ****   printf("init nema DONE %s\n", nema_get_sw_device_name());
1025:Src/app.c     **** 
1026:Src/app.c     ****   hgfxmmu.Instance = GFXMMU;
1027:Src/app.c     ****   hgfxmmu.Init.BlockSize = GFXMMU_12BYTE_BLOCKS;
1028:Src/app.c     ****   hgfxmmu.Init.AddressTranslation = DISABLE;
1029:Src/app.c     ****   ret = HAL_GFXMMU_Init(&hgfxmmu);
1030:Src/app.c     ****   assert(ret == HAL_OK);
1031:Src/app.c     **** 
1032:Src/app.c     ****   packing.Buffer0Activation = ENABLE;
1033:Src/app.c     ****   packing.Buffer0Mode       = GFXMMU_PACKING_MSB_REMOVE;
1034:Src/app.c     ****   packing.DefaultAlpha      = 0xff;
1035:Src/app.c     ****   ret = HAL_GFXMMU_ConfigPacking(&hgfxmmu, &packing);
1036:Src/app.c     ****   assert(ret == HAL_OK);
1037:Src/app.c     **** 
1038:Src/app.c     ****   cl = nema_cl_create_sized(8192);
1039:Src/app.c     ****   nema_cl_bind_circular(&cl);
1040:Src/app.c     **** }
1041:Src/app.c     **** #endif
1042:Src/app.c     **** 
1043:Src/app.c     **** static float ld_compute_rotation(ld_point_t lm[LD_LANDMARK_NB])
1044:Src/app.c     **** {
1045:Src/app.c     ****   float x0, y0, x1, y1;
1046:Src/app.c     ****   float rotation;
1047:Src/app.c     **** 
1048:Src/app.c     ****   x0 = lm[0].x;
1049:Src/app.c     ****   y0 = lm[0].y;
1050:Src/app.c     ****   x1 = lm[9].x;
1051:Src/app.c     ****   y1 = lm[9].y;
1052:Src/app.c     **** 
1053:Src/app.c     ****   rotation = M_PI * 0.5 - atan2f(-(y1 - y0), x1 - x0);
1054:Src/app.c     **** 
1055:Src/app.c     ****   return pd_cook_rotation(pd_normalize_angle(rotation));
1056:Src/app.c     **** }
1057:Src/app.c     **** 
1058:Src/app.c     **** static void ld_to_roi(ld_point_t lm[LD_LANDMARK_NB], roi_t *roi, pd_pp_box_t *next_pd)
1059:Src/app.c     **** {
1060:Src/app.c     ****   const int pd_to_ld_idx[AI_PD_MODEL_PP_NB_KEYPOINTS] = {0, 5, 9, 13, 17, 1, 2};
1061:Src/app.c     ****   const int indices[] = {0, 1, 2, 3, 5, 6, 9, 10, 13, 14, 17, 18};
1062:Src/app.c     ****   float max_x, max_y, min_x, min_y;
1063:Src/app.c     ****   int i;
1064:Src/app.c     **** 
1065:Src/app.c     ****   max_x = max_y = -10000;
1066:Src/app.c     ****   min_x = min_y =  10000;
ARM GAS  /tmp/cc2qXJ00.s 			page 22


1067:Src/app.c     **** 
1068:Src/app.c     ****   roi->rotation = ld_compute_rotation(lm);
1069:Src/app.c     **** 
1070:Src/app.c     ****   for (i = 0; i < ARRAY_NB(indices); i++) {
1071:Src/app.c     ****     max_x = MAX(max_x, lm[indices[i]].x);
1072:Src/app.c     ****     max_y = MAX(max_y, lm[indices[i]].y);
1073:Src/app.c     ****     min_x = MIN(min_x, lm[indices[i]].x);
1074:Src/app.c     ****     min_y = MIN(min_y, lm[indices[i]].y);
1075:Src/app.c     ****   }
1076:Src/app.c     **** 
1077:Src/app.c     ****   roi->cx = (max_x + min_x) / 2;
1078:Src/app.c     ****   roi->cy = (max_y + min_y) / 2;
1079:Src/app.c     ****   roi->w = (max_x - min_x);
1080:Src/app.c     ****   roi->h = (max_y - min_y);
1081:Src/app.c     **** 
1082:Src/app.c     ****   next_pd->x_center = roi->cx;
1083:Src/app.c     ****   next_pd->y_center = roi->cy;
1084:Src/app.c     ****   next_pd->width = roi->w;
1085:Src/app.c     ****   next_pd->height = roi->h;
1086:Src/app.c     ****   for (i = 0; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++) {
1087:Src/app.c     ****     next_pd->pKps[i].x = lm[pd_to_ld_idx[i]].x;
1088:Src/app.c     ****     next_pd->pKps[i].y = lm[pd_to_ld_idx[i]].y;
1089:Src/app.c     ****   }
1090:Src/app.c     **** }
1091:Src/app.c     **** 
1092:Src/app.c     **** static void compute_next_roi(roi_t *src, ld_point_t lm_in[LD_LANDMARK_NB], roi_t *next, pd_pp_box_t
1093:Src/app.c     **** {
1094:Src/app.c     ****   const float shift_x = 0;
1095:Src/app.c     ****   const float shift_y = -0.1;
1096:Src/app.c     ****   const float scale = 2.0;
1097:Src/app.c     ****   ld_point_t lm[LD_LANDMARK_NB];
1098:Src/app.c     ****   roi_t roi;
1099:Src/app.c     ****   int i;
1100:Src/app.c     **** 
1101:Src/app.c     ****   for (i = 0; i < LD_LANDMARK_NB; i++)
1102:Src/app.c     ****     decode_ld_landmark(src, &lm_in[i], &lm[i]);
1103:Src/app.c     **** 
1104:Src/app.c     ****   ld_to_roi(lm, &roi, next_pd);
1105:Src/app.c     ****   roi_shift_and_scale(&roi, shift_x, shift_y, scale, scale);
1106:Src/app.c     **** 
1107:Src/app.c     **** #if HAS_ROTATION_SUPPORT == 0
1108:Src/app.c     ****   /* In that case we can cancel rotation. This ensure corners are corrected oriented */
1109:Src/app.c     ****   roi.rotation = 0;
1110:Src/app.c     **** #endif
1111:Src/app.c     **** 
1112:Src/app.c     ****   *next = roi;
1113:Src/app.c     **** }
1114:Src/app.c     **** static void nn_thread_fct(void *arg)
1115:Src/app.c     **** {
1116:Src/app.c     ****   float nn_period_filtered_ms = 0;
1117:Src/app.c     ****   // Filtered inference times, will be updated with 0
1118:Src/app.c     ****   float pd_filtered_ms = 0;
1119:Src/app.c     ****   float ld_filtered_ms = 0;
1120:Src/app.c     **** 
1121:Src/app.c     ****   uint32_t nn_period_ms;
1122:Src/app.c     ****   uint32_t nn_period[2];
1123:Src/app.c     ****   uint8_t *nn_pipe_dst;
ARM GAS  /tmp/cc2qXJ00.s 			page 23


1124:Src/app.c     ****   int is_tracking;
1125:Src/app.c     ****   uint32_t pd_ms;
1126:Src/app.c     ****   uint32_t hl_ms;
1127:Src/app.c     ****   int ret;
1128:Src/app.c     **** 
1129:Src/app.c     ****   /*
1130:Src/app.c     ****    * MODEL INITIALIZATION REMOVED
1131:Src/app.c     ****    * All model init functions have been removed.
1132:Src/app.c     ****    */
1133:Src/app.c     **** 
1134:Src/app.c     ****   /*** App Loop ***************************************************************/
1135:Src/app.c     ****   nn_period[1] = HAL_GetTick();
1136:Src/app.c     ****   nn_pipe_dst = bqueue_get_free(&nn_input_queue, 0);
1137:Src/app.c     ****   assert(nn_pipe_dst);
1138:Src/app.c     ****   CAM_NNPipe_Start(nn_pipe_dst, CMW_MODE_CONTINUOUS);
1139:Src/app.c     ****   while (1)
1140:Src/app.c     ****   {
1141:Src/app.c     ****     uint8_t *capture_buffer;
1142:Src/app.c     **** 
1143:Src/app.c     ****     // Standard frame timing
1144:Src/app.c     ****     nn_period[0] = nn_period[1];
1145:Src/app.c     ****     nn_period[1] = HAL_GetTick();
1146:Src/app.c     ****     nn_period_ms = nn_period[1] - nn_period[0];
1147:Src/app.c     ****     nn_period_filtered_ms = USE_FILTERED_TS ? (15 * nn_period_filtered_ms + nn_period_ms) / 16 : nn
1148:Src/app.c     **** 
1149:Src/app.c     ****     // Get camera buffer to keep the pipeline moving
1150:Src/app.c     ****     capture_buffer = bqueue_get_ready(&nn_input_queue);
1151:Src/app.c     ****     assert(capture_buffer);
1152:Src/app.c     **** 
1153:Src/app.c     **** 
1154:Src/app.c     ****     /**************************************************************************
1155:Src/app.c     ****      * MODEL EXECUTION DISABLED
1156:Src/app.c     ****      * All model run calls are removed. We now force a "no detection" state.
1157:Src/app.c     ****      **************************************************************************/
1158:Src/app.c     ****     is_tracking = 0; // Force state to "not tracking"
1159:Src/app.c     ****     pd_ms = 0;       // Set inference time to 0
1160:Src/app.c     ****     hl_ms = 0;       // Set inference time to 0
1161:Src/app.c     **** 
1162:Src/app.c     ****     // Update filtered times with our zero values
1163:Src/app.c     ****     pd_filtered_ms = USE_FILTERED_TS ? (7 * pd_filtered_ms + pd_ms) / 8 : pd_ms;
1164:Src/app.c     ****     ld_filtered_ms = USE_FILTERED_TS ? (7 * ld_filtered_ms + hl_ms) / 8 : hl_ms;
1165:Src/app.c     **** 
1166:Src/app.c     ****     // We are done with the buffer, release it
1167:Src/app.c     ****     bqueue_put_free(&nn_input_queue);
1168:Src/app.c     **** 
1169:Src/app.c     **** 
1170:Src/app.c     ****     /*
1171:Src/app.c     ****      * Update display stats with the "no detection" info
1172:Src/app.c     ****      */
1173:Src/app.c     ****     ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
1174:Src/app.c     ****     assert(ret == pdTRUE);
1175:Src/app.c     **** 
1176:Src/app.c     ****     // Populate display structure with valid, non-model data
1177:Src/app.c     ****     disp.info.pd_ms = (int)pd_filtered_ms;
1178:Src/app.c     ****     disp.info.hl_ms = (int)ld_filtered_ms;
1179:Src/app.c     ****     disp.info.nn_period_ms = nn_period_filtered_ms;
1180:Src/app.c     ****     disp.info.pd_hand_nb = 0;
ARM GAS  /tmp/cc2qXJ00.s 			page 24


1181:Src/app.c     ****     disp.info.pd_max_prob = 0.0f;
1182:Src/app.c     ****     disp.info.hands[0].is_valid = 0; // Set hand as invalid
1183:Src/app.c     **** 
1184:Src/app.c     ****     // NOTE: We no longer copy box or landmark data, as none exists.
1185:Src/app.c     ****     // The display thread should check the 'is_valid' flag before drawing.
1186:Src/app.c     **** 
1187:Src/app.c     ****     ret = xSemaphoreGive(disp.lock);
1188:Src/app.c     ****     assert(ret == pdTRUE);
1189:Src/app.c     **** 
1190:Src/app.c     ****     // Signal the display thread to update
1191:Src/app.c     ****     xSemaphoreGive(disp.update);
1192:Src/app.c     ****   }
1193:Src/app.c     **** }
1194:Src/app.c     **** 
1195:Src/app.c     **** static void backup(void *arg)
1196:Src/app.c     **** {
1197:Src/app.c     ****   float nn_period_filtered_ms = 0;
1198:Src/app.c     ****   float pd_filtered_ms = 0;
1199:Src/app.c     ****   float ld_filtered_ms = 0;
1200:Src/app.c     ****   hl_model_info_t hl_info;
1201:Src/app.c     ****   pd_model_info_t pd_info;
1202:Src/app.c     ****   uint32_t nn_period_ms;
1203:Src/app.c     ****   uint32_t nn_period[2];
1204:Src/app.c     ****   uint8_t *nn_pipe_dst;
1205:Src/app.c     ****   pd_pp_point_t box_next_keypoints[AI_PD_MODEL_PP_NB_KEYPOINTS];
1206:Src/app.c     ****   pd_pp_box_t box_next;
1207:Src/app.c     ****   int is_tracking = 0;
1208:Src/app.c     ****   roi_t roi_next;
1209:Src/app.c     ****   uint32_t pd_ms;
1210:Src/app.c     ****   uint32_t hl_ms;
1211:Src/app.c     ****   int ret;
1212:Src/app.c     ****   int j;
1213:Src/app.c     **** 
1214:Src/app.c     ****   /* Current tracking algo only support single hand */
1215:Src/app.c     ****   assert(PD_MAX_HAND_NB == 1);
1216:Src/app.c     **** 
1217:Src/app.c     ****   /* setup models buffer info */
1218:Src/app.c     ****   palm_detector_init(&pd_info);
1219:Src/app.c     ****   box_next.pKps = box_next_keypoints;
1220:Src/app.c     ****   hand_landmark_init(&hl_info);
1221:Src/app.c     **** 
1222:Src/app.c     **** #if HAS_ROTATION_SUPPORT == 1
1223:Src/app.c     ****   app_rot_init(&hl_info);
1224:Src/app.c     **** #endif
1225:Src/app.c     **** 
1226:Src/app.c     ****   /*** App Loop ***************************************************************/
1227:Src/app.c     ****   nn_period[1] = HAL_GetTick();
1228:Src/app.c     ****   nn_pipe_dst = bqueue_get_free(&nn_input_queue, 0);
1229:Src/app.c     ****   assert(nn_pipe_dst);
1230:Src/app.c     ****   CAM_NNPipe_Start(nn_pipe_dst, CMW_MODE_CONTINUOUS);
1231:Src/app.c     ****   while (1)
1232:Src/app.c     ****   {
1233:Src/app.c     ****     uint8_t *capture_buffer;
1234:Src/app.c     ****     int idx_for_resize;
1235:Src/app.c     **** 
1236:Src/app.c     ****     nn_period[0] = nn_period[1];
1237:Src/app.c     ****     nn_period[1] = HAL_GetTick();
ARM GAS  /tmp/cc2qXJ00.s 			page 25


1238:Src/app.c     ****     nn_period_ms = nn_period[1] - nn_period[0];
1239:Src/app.c     ****     nn_period_filtered_ms = USE_FILTERED_TS ? (15 * nn_period_filtered_ms + nn_period_ms) / 16 : nn
1240:Src/app.c     **** 
1241:Src/app.c     ****     capture_buffer = bqueue_get_ready(&nn_input_queue);
1242:Src/app.c     ****     assert(capture_buffer);
1243:Src/app.c     ****     idx_for_resize = frame_event_nb_for_resize % DISPLAY_BUFFER_NB;
1244:Src/app.c     **** 
1245:Src/app.c     ****     /* Only start palm detector when not tracking hand */
1246:Src/app.c     ****     if (!is_tracking) {
1247:Src/app.c     ****       is_tracking = palm_detector_run(capture_buffer, &pd_info, &pd_ms);
1248:Src/app.c     ****       box_next.prob = pd_info.pd_out.pOutData[0].prob;
1249:Src/app.c     ****     } else {
1250:Src/app.c     ****       rois[0] = roi_next;
1251:Src/app.c     ****       copy_pd_box(&pd_info.pd_out.pOutData[0], &box_next);
1252:Src/app.c     ****       pd_ms = 0;
1253:Src/app.c     ****     }
1254:Src/app.c     ****     pd_filtered_ms = USE_FILTERED_TS ? (7 * pd_filtered_ms + pd_ms) / 8 : pd_ms;
1255:Src/app.c     ****     bqueue_put_free(&nn_input_queue);
1256:Src/app.c     **** 
1257:Src/app.c     ****     /* then run hand landmark detector if needed */
1258:Src/app.c     ****     if (is_tracking) {
1259:Src/app.c     ****       hl_ms = HAL_GetTick();
1260:Src/app.c     ****       is_tracking = hand_landmark_run(lcd_bg_buffer[idx_for_resize], &hl_info, &rois[0], ld_landmar
1261:Src/app.c     ****       CACHE_OP(SCB_InvalidateDCache_by_Addr(lcd_bg_buffer[idx_for_resize], sizeof(lcd_bg_buffer[idx
1262:Src/app.c     ****       if (is_tracking)
1263:Src/app.c     ****         compute_next_roi(&rois[0], ld_landmarks[0], &roi_next, &box_next);
1264:Src/app.c     ****       hl_ms = HAL_GetTick() - hl_ms;
1265:Src/app.c     ****     } else {
1266:Src/app.c     ****       hl_ms = 0;
1267:Src/app.c     ****     }
1268:Src/app.c     ****     ld_filtered_ms = USE_FILTERED_TS ? (7 * ld_filtered_ms + hl_ms) / 8 : hl_ms;
1269:Src/app.c     **** 
1270:Src/app.c     ****     /* update display stats */
1271:Src/app.c     ****     ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
1272:Src/app.c     ****     assert(ret == pdTRUE);
1273:Src/app.c     ****     disp.info.pd_ms = is_tracking ? 0 : (int)pd_filtered_ms;
1274:Src/app.c     ****     disp.info.hl_ms = is_tracking ? (int)ld_filtered_ms : 0;
1275:Src/app.c     ****     disp.info.nn_period_ms = nn_period_filtered_ms;
1276:Src/app.c     ****     disp.info.pd_hand_nb = is_tracking;
1277:Src/app.c     ****     disp.info.pd_max_prob = pd_info.pd_out.pOutData[0].prob;
1278:Src/app.c     ****     disp.info.hands[0].is_valid = is_tracking;
1279:Src/app.c     ****     copy_pd_box(&disp.info.hands[0].pd_hands, &pd_info.pd_out.pOutData[0]);
1280:Src/app.c     ****     disp.info.hands[0].roi = rois[0];
1281:Src/app.c     ****     for (j = 0; j < LD_LANDMARK_NB; j++)
1282:Src/app.c     ****       disp.info.hands[0].ld_landmarks[j] = ld_landmarks[0][j];
1283:Src/app.c     ****     ret = xSemaphoreGive(disp.lock);
1284:Src/app.c     ****     assert(ret == pdTRUE);
1285:Src/app.c     **** 
1286:Src/app.c     ****     /* It's possible xqueue is empty if display is slow. So don't check error code that may by pdFA
1287:Src/app.c     ****     xSemaphoreGive(disp.update);
1288:Src/app.c     ****   }
1289:Src/app.c     **** }
1290:Src/app.c     **** 
1291:Src/app.c     **** static void dp_update_drawing_area()
1292:Src/app.c     **** {
1293:Src/app.c     ****   int ret;
1294:Src/app.c     **** 
ARM GAS  /tmp/cc2qXJ00.s 			page 26


1295:Src/app.c     ****   __disable_irq();
1296:Src/app.c     ****   ret = SCRL_SetAddress_NoReload(lcd_fg_buffer[lcd_fg_buffer_rd_idx], SCRL_LAYER_1);
1297:Src/app.c     ****   assert(ret == HAL_OK);
1298:Src/app.c     ****   __enable_irq();
1299:Src/app.c     **** }
1300:Src/app.c     **** 
1301:Src/app.c     **** static void dp_commit_drawing_area()
1302:Src/app.c     **** {
1303:Src/app.c     ****   int ret;
1304:Src/app.c     **** 
1305:Src/app.c     ****   __disable_irq();
1306:Src/app.c     ****   ret = SCRL_ReloadLayer(SCRL_LAYER_1);
1307:Src/app.c     ****   assert(ret == HAL_OK);
1308:Src/app.c     ****   __enable_irq();
1309:Src/app.c     ****   lcd_fg_buffer_rd_idx = 1 - lcd_fg_buffer_rd_idx;
1310:Src/app.c     **** }
1311:Src/app.c     **** 
1312:Src/app.c     **** static void on_ld_toggle_button_click(void *args)
1313:Src/app.c     **** {
1314:Src/app.c     ****   display_t *disp = (display_t *) args;
1315:Src/app.c     ****   int ret;
1316:Src/app.c     **** 
1317:Src/app.c     ****   ret = xSemaphoreTake(disp->lock, portMAX_DELAY);
1318:Src/app.c     ****   assert(ret == pdTRUE);
1319:Src/app.c     ****   disp->info.is_ld_displayed = !disp->info.is_ld_displayed;
1320:Src/app.c     ****   ret = xSemaphoreGive(disp->lock);
1321:Src/app.c     ****   assert(ret == pdTRUE);
1322:Src/app.c     **** }
1323:Src/app.c     **** 
1324:Src/app.c     **** static void on_pd_toggle_button_click(void *args)
1325:Src/app.c     **** {
1326:Src/app.c     ****   display_t *disp = (display_t *) args;
1327:Src/app.c     ****   int ret;
1328:Src/app.c     **** 
1329:Src/app.c     ****   ret = xSemaphoreTake(disp->lock, portMAX_DELAY);
1330:Src/app.c     ****   assert(ret == pdTRUE);
1331:Src/app.c     ****   disp->info.is_pd_displayed = !disp->info.is_pd_displayed;
1332:Src/app.c     ****   ret = xSemaphoreGive(disp->lock);
1333:Src/app.c     ****   assert(ret == pdTRUE);
1334:Src/app.c     **** }
1335:Src/app.c     **** 
1336:Src/app.c     **** static void dp_thread_fct(void *arg)
1337:Src/app.c     **** {
1338:Src/app.c     ****   button_t ld_toggle_button;
1339:Src/app.c     ****   button_t hd_toggle_button;
1340:Src/app.c     ****   uint32_t disp_ms = 0;
1341:Src/app.c     ****   display_info_t info;
1342:Src/app.c     ****   uint32_t ts;
1343:Src/app.c     ****   int ret;
1344:Src/app.c     **** 
1345:Src/app.c     **** #ifdef STM32N6570_DK_REV
1346:Src/app.c     ****   button_init(&ld_toggle_button, BUTTON_USER1, on_ld_toggle_button_click, &disp);
1347:Src/app.c     ****   button_init(&hd_toggle_button, BUTTON_TAMP, on_pd_toggle_button_click, &disp);
1348:Src/app.c     **** #else
1349:Src/app.c     ****   button_init(&ld_toggle_button, BUTTON_USER, on_ld_toggle_button_click, &disp);
1350:Src/app.c     ****   button_init(&hd_toggle_button, BUTTON_USER, on_pd_toggle_button_click, &disp);
1351:Src/app.c     **** #endif
ARM GAS  /tmp/cc2qXJ00.s 			page 27


1352:Src/app.c     ****   while (1)
1353:Src/app.c     ****   {
1354:Src/app.c     ****     ret = xSemaphoreTake(disp.update, portMAX_DELAY);
1355:Src/app.c     ****     assert(ret == pdTRUE);
1356:Src/app.c     **** 
1357:Src/app.c     ****     button_process(&ld_toggle_button);
1358:Src/app.c     ****     button_process(&hd_toggle_button);
1359:Src/app.c     **** 
1360:Src/app.c     ****     ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
1361:Src/app.c     ****     assert(ret == pdTRUE);
1362:Src/app.c     ****     info = disp.info;
1363:Src/app.c     ****     ret = xSemaphoreGive(disp.lock);
1364:Src/app.c     ****     assert(ret == pdTRUE);
1365:Src/app.c     ****     info.disp_ms = disp_ms;
1366:Src/app.c     **** 
1367:Src/app.c     ****     ts = HAL_GetTick();
1368:Src/app.c     ****     dp_update_drawing_area();
1369:Src/app.c     ****     Display_NetworkOutput(&info);
1370:Src/app.c     ****     SCB_CleanDCache_by_Addr(lcd_fg_buffer[lcd_fg_buffer_rd_idx], LCD_FG_WIDTH * LCD_FG_HEIGHT* 2);
1371:Src/app.c     ****     dp_commit_drawing_area();
1372:Src/app.c     ****     disp_ms = HAL_GetTick() - ts;
1373:Src/app.c     ****   }
1374:Src/app.c     **** }
1375:Src/app.c     **** 
1376:Src/app.c     **** static void isp_thread_fct(void *arg)
1377:Src/app.c     **** {
 125              		.loc 1 1377 1 is_stmt 1 view -0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              		.loc 1 1377 1 is_stmt 0 view .LVU31
 130 0000 10B5     		push	{r4, lr}
 131              		.cfi_def_cfa_offset 8
 132              		.cfi_offset 4, -8
 133              		.cfi_offset 14, -4
1378:Src/app.c     ****   int ret;
1379:Src/app.c     **** 
1380:Src/app.c     ****   while (1) {
1381:Src/app.c     ****     ret = xSemaphoreTake(isp_sem, portMAX_DELAY);
 134              		.loc 1 1381 11 view .LVU32
 135 0002 094C     		ldr	r4, .L11
 136              	.LVL5:
 137              	.L10:
1378:Src/app.c     ****   int ret;
 138              		.loc 1 1378 3 is_stmt 1 view .LVU33
1380:Src/app.c     ****     ret = xSemaphoreTake(isp_sem, portMAX_DELAY);
 139              		.loc 1 1380 3 view .LVU34
 140              		.loc 1 1381 5 view .LVU35
 141              		.loc 1 1381 11 is_stmt 0 view .LVU36
 142 0004 4FF0FF31 		mov	r1, #-1
 143 0008 2068     		ldr	r0, [r4]
 144 000a FFF7FEFF 		bl	xQueueSemaphoreTake
 145              	.LVL6:
1382:Src/app.c     ****     assert(ret == pdTRUE);
 146              		.loc 1 1382 5 is_stmt 1 view .LVU37
 147 000e 0128     		cmp	r0, #1
 148 0010 06D0     		beq	.L9
ARM GAS  /tmp/cc2qXJ00.s 			page 28


 149              		.loc 1 1382 5 is_stmt 0 discriminator 1 view .LVU38
 150 0012 40F26651 		movw	r1, #1382
 151 0016 054B     		ldr	r3, .L11+4
 152 0018 054A     		ldr	r2, .L11+8
 153 001a 0648     		ldr	r0, .L11+12
 154              	.LVL7:
 155              		.loc 1 1382 5 discriminator 1 view .LVU39
 156 001c FFF7FEFF 		bl	__assert_func
 157              	.LVL8:
 158              	.L9:
1383:Src/app.c     **** 
1384:Src/app.c     ****     CAM_IspUpdate();
 159              		.loc 1 1384 5 is_stmt 1 view .LVU40
 160 0020 FFF7FEFF 		bl	CAM_IspUpdate
 161              	.LVL9:
1380:Src/app.c     ****     ret = xSemaphoreTake(isp_sem, portMAX_DELAY);
 162              		.loc 1 1380 9 view .LVU41
1381:Src/app.c     ****     assert(ret == pdTRUE);
 163              		.loc 1 1381 9 is_stmt 0 view .LVU42
 164 0024 EEE7     		b	.L10
 165              	.L12:
 166 0026 00BF     		.align	2
 167              	.L11:
 168 0028 00000000 		.word	isp_sem
 169 002c 00000000 		.word	.LC1
 170 0030 00000000 		.word	__func__.15
 171 0034 0E000000 		.word	.LC2
 172              		.cfi_endproc
 173              	.LFE7408:
 175              		.section	.text.on_pd_toggle_button_click,"ax",%progbits
 176              		.align	1
 177              		.syntax unified
 178              		.thumb
 179              		.thumb_func
 181              	on_pd_toggle_button_click:
 182              	.LVL10:
 183              	.LFB7406:
1325:Src/app.c     ****   display_t *disp = (display_t *) args;
 184              		.loc 1 1325 1 is_stmt 1 view -0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
1326:Src/app.c     ****   int ret;
 188              		.loc 1 1326 3 view .LVU44
1327:Src/app.c     **** 
 189              		.loc 1 1327 3 view .LVU45
1329:Src/app.c     ****   assert(ret == pdTRUE);
 190              		.loc 1 1329 3 view .LVU46
1325:Src/app.c     ****   display_t *disp = (display_t *) args;
 191              		.loc 1 1325 1 is_stmt 0 view .LVU47
 192 0000 10B5     		push	{r4, lr}
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 4, -8
 195              		.cfi_offset 14, -4
1329:Src/app.c     ****   assert(ret == pdTRUE);
 196              		.loc 1 1329 9 view .LVU48
 197 0002 4FF0FF31 		mov	r1, #-1
ARM GAS  /tmp/cc2qXJ00.s 			page 29


1325:Src/app.c     ****   display_t *disp = (display_t *) args;
 198              		.loc 1 1325 1 view .LVU49
 199 0006 0446     		mov	r4, r0
1329:Src/app.c     ****   assert(ret == pdTRUE);
 200              		.loc 1 1329 9 view .LVU50
 201 0008 406D     		ldr	r0, [r0, #84]
 202              	.LVL11:
1329:Src/app.c     ****   assert(ret == pdTRUE);
 203              		.loc 1 1329 9 view .LVU51
 204 000a FFF7FEFF 		bl	xQueueSemaphoreTake
 205              	.LVL12:
1330:Src/app.c     ****   disp->info.is_pd_displayed = !disp->info.is_pd_displayed;
 206              		.loc 1 1330 3 is_stmt 1 view .LVU52
 207 000e 0128     		cmp	r0, #1
 208 0010 06D0     		beq	.L14
1330:Src/app.c     ****   disp->info.is_pd_displayed = !disp->info.is_pd_displayed;
 209              		.loc 1 1330 3 is_stmt 0 discriminator 1 view .LVU53
 210 0012 40F23251 		movw	r1, #1330
 211 0016 0D4B     		ldr	r3, .L17
 212 0018 0D4A     		ldr	r2, .L17+4
 213              	.L16:
1333:Src/app.c     **** }
 214              		.loc 1 1333 3 discriminator 1 view .LVU54
 215 001a 0E48     		ldr	r0, .L17+8
 216              	.LVL13:
1333:Src/app.c     **** }
 217              		.loc 1 1333 3 discriminator 1 view .LVU55
 218 001c FFF7FEFF 		bl	__assert_func
 219              	.LVL14:
 220              	.L14:
1331:Src/app.c     ****   ret = xSemaphoreGive(disp->lock);
 221              		.loc 1 1331 3 is_stmt 1 view .LVU56
1331:Src/app.c     ****   ret = xSemaphoreGive(disp->lock);
 222              		.loc 1 1331 32 is_stmt 0 view .LVU57
 223 0020 D4F8C030 		ldr	r3, [r4, #192]
1332:Src/app.c     ****   assert(ret == pdTRUE);
 224              		.loc 1 1332 9 view .LVU58
 225 0024 606D     		ldr	r0, [r4, #84]
 226              	.LVL15:
1331:Src/app.c     ****   ret = xSemaphoreGive(disp->lock);
 227              		.loc 1 1331 32 view .LVU59
 228 0026 B3FA83F3 		clz	r3, r3
 229 002a 5B09     		lsrs	r3, r3, #5
1331:Src/app.c     ****   ret = xSemaphoreGive(disp->lock);
 230              		.loc 1 1331 30 view .LVU60
 231 002c C4F8C030 		str	r3, [r4, #192]
1332:Src/app.c     ****   assert(ret == pdTRUE);
 232              		.loc 1 1332 3 is_stmt 1 view .LVU61
1332:Src/app.c     ****   assert(ret == pdTRUE);
 233              		.loc 1 1332 9 is_stmt 0 view .LVU62
 234 0030 0023     		movs	r3, #0
 235 0032 1A46     		mov	r2, r3
 236 0034 1946     		mov	r1, r3
 237 0036 FFF7FEFF 		bl	xQueueGenericSend
 238              	.LVL16:
1333:Src/app.c     **** }
 239              		.loc 1 1333 3 is_stmt 1 view .LVU63
ARM GAS  /tmp/cc2qXJ00.s 			page 30


 240 003a 0128     		cmp	r0, #1
 241 003c 04D0     		beq	.L13
1333:Src/app.c     **** }
 242              		.loc 1 1333 3 is_stmt 0 discriminator 1 view .LVU64
 243 003e 40F23551 		movw	r1, #1333
 244 0042 024B     		ldr	r3, .L17
 245 0044 024A     		ldr	r2, .L17+4
 246 0046 E8E7     		b	.L16
 247              	.L13:
1334:Src/app.c     **** 
 248              		.loc 1 1334 1 view .LVU65
 249 0048 10BD     		pop	{r4, pc}
 250              	.LVL17:
 251              	.L18:
1334:Src/app.c     **** 
 252              		.loc 1 1334 1 view .LVU66
 253 004a 00BF     		.align	2
 254              	.L17:
 255 004c 00000000 		.word	.LC1
 256 0050 00000000 		.word	__func__.13
 257 0054 0E000000 		.word	.LC2
 258              		.cfi_endproc
 259              	.LFE7406:
 261              		.section	.text.on_ld_toggle_button_click,"ax",%progbits
 262              		.align	1
 263              		.syntax unified
 264              		.thumb
 265              		.thumb_func
 267              	on_ld_toggle_button_click:
 268              	.LVL18:
 269              	.LFB7405:
1313:Src/app.c     ****   display_t *disp = (display_t *) args;
 270              		.loc 1 1313 1 is_stmt 1 view -0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 0
 273              		@ frame_needed = 0, uses_anonymous_args = 0
1314:Src/app.c     ****   int ret;
 274              		.loc 1 1314 3 view .LVU68
1315:Src/app.c     **** 
 275              		.loc 1 1315 3 view .LVU69
1317:Src/app.c     ****   assert(ret == pdTRUE);
 276              		.loc 1 1317 3 view .LVU70
1313:Src/app.c     ****   display_t *disp = (display_t *) args;
 277              		.loc 1 1313 1 is_stmt 0 view .LVU71
 278 0000 10B5     		push	{r4, lr}
 279              		.cfi_def_cfa_offset 8
 280              		.cfi_offset 4, -8
 281              		.cfi_offset 14, -4
1317:Src/app.c     ****   assert(ret == pdTRUE);
 282              		.loc 1 1317 9 view .LVU72
 283 0002 4FF0FF31 		mov	r1, #-1
1313:Src/app.c     ****   display_t *disp = (display_t *) args;
 284              		.loc 1 1313 1 view .LVU73
 285 0006 0446     		mov	r4, r0
1317:Src/app.c     ****   assert(ret == pdTRUE);
 286              		.loc 1 1317 9 view .LVU74
 287 0008 406D     		ldr	r0, [r0, #84]
ARM GAS  /tmp/cc2qXJ00.s 			page 31


 288              	.LVL19:
1317:Src/app.c     ****   assert(ret == pdTRUE);
 289              		.loc 1 1317 9 view .LVU75
 290 000a FFF7FEFF 		bl	xQueueSemaphoreTake
 291              	.LVL20:
1318:Src/app.c     ****   disp->info.is_ld_displayed = !disp->info.is_ld_displayed;
 292              		.loc 1 1318 3 is_stmt 1 view .LVU76
 293 000e 0128     		cmp	r0, #1
 294 0010 06D0     		beq	.L20
1318:Src/app.c     ****   disp->info.is_ld_displayed = !disp->info.is_ld_displayed;
 295              		.loc 1 1318 3 is_stmt 0 discriminator 1 view .LVU77
 296 0012 40F22651 		movw	r1, #1318
 297 0016 0D4B     		ldr	r3, .L23
 298 0018 0D4A     		ldr	r2, .L23+4
 299              	.L22:
1321:Src/app.c     **** }
 300              		.loc 1 1321 3 discriminator 1 view .LVU78
 301 001a 0E48     		ldr	r0, .L23+8
 302              	.LVL21:
1321:Src/app.c     **** }
 303              		.loc 1 1321 3 discriminator 1 view .LVU79
 304 001c FFF7FEFF 		bl	__assert_func
 305              	.LVL22:
 306              	.L20:
1319:Src/app.c     ****   ret = xSemaphoreGive(disp->lock);
 307              		.loc 1 1319 3 is_stmt 1 view .LVU80
1319:Src/app.c     ****   ret = xSemaphoreGive(disp->lock);
 308              		.loc 1 1319 32 is_stmt 0 view .LVU81
 309 0020 D4F8BC30 		ldr	r3, [r4, #188]
1320:Src/app.c     ****   assert(ret == pdTRUE);
 310              		.loc 1 1320 9 view .LVU82
 311 0024 606D     		ldr	r0, [r4, #84]
 312              	.LVL23:
1319:Src/app.c     ****   ret = xSemaphoreGive(disp->lock);
 313              		.loc 1 1319 32 view .LVU83
 314 0026 B3FA83F3 		clz	r3, r3
 315 002a 5B09     		lsrs	r3, r3, #5
1319:Src/app.c     ****   ret = xSemaphoreGive(disp->lock);
 316              		.loc 1 1319 30 view .LVU84
 317 002c C4F8BC30 		str	r3, [r4, #188]
1320:Src/app.c     ****   assert(ret == pdTRUE);
 318              		.loc 1 1320 3 is_stmt 1 view .LVU85
1320:Src/app.c     ****   assert(ret == pdTRUE);
 319              		.loc 1 1320 9 is_stmt 0 view .LVU86
 320 0030 0023     		movs	r3, #0
 321 0032 1A46     		mov	r2, r3
 322 0034 1946     		mov	r1, r3
 323 0036 FFF7FEFF 		bl	xQueueGenericSend
 324              	.LVL24:
1321:Src/app.c     **** }
 325              		.loc 1 1321 3 is_stmt 1 view .LVU87
 326 003a 0128     		cmp	r0, #1
 327 003c 04D0     		beq	.L19
1321:Src/app.c     **** }
 328              		.loc 1 1321 3 is_stmt 0 discriminator 1 view .LVU88
 329 003e 40F22951 		movw	r1, #1321
 330 0042 024B     		ldr	r3, .L23
ARM GAS  /tmp/cc2qXJ00.s 			page 32


 331 0044 024A     		ldr	r2, .L23+4
 332 0046 E8E7     		b	.L22
 333              	.L19:
1322:Src/app.c     **** 
 334              		.loc 1 1322 1 view .LVU89
 335 0048 10BD     		pop	{r4, pc}
 336              	.LVL25:
 337              	.L24:
1322:Src/app.c     **** 
 338              		.loc 1 1322 1 view .LVU90
 339 004a 00BF     		.align	2
 340              	.L23:
 341 004c 00000000 		.word	.LC1
 342 0050 00000000 		.word	__func__.12
 343 0054 0E000000 		.word	.LC2
 344              		.cfi_endproc
 345              	.LFE7405:
 347              		.section	.text.button_process,"ax",%progbits
 348              		.align	1
 349              		.syntax unified
 350              		.thumb
 351              		.thumb_func
 353              	button_process:
 354              	.LVL26:
 355              	.LFB7367:
 380:Src/app.c     ****   int state = BSP_PB_GetState(b->button_id);
 356              		.loc 1 380 1 is_stmt 1 view -0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 381:Src/app.c     **** 
 360              		.loc 1 381 3 view .LVU92
 380:Src/app.c     ****   int state = BSP_PB_GetState(b->button_id);
 361              		.loc 1 380 1 is_stmt 0 view .LVU93
 362 0000 38B5     		push	{r3, r4, r5, lr}
 363              		.cfi_def_cfa_offset 16
 364              		.cfi_offset 3, -16
 365              		.cfi_offset 4, -12
 366              		.cfi_offset 5, -8
 367              		.cfi_offset 14, -4
 380:Src/app.c     ****   int state = BSP_PB_GetState(b->button_id);
 368              		.loc 1 380 1 view .LVU94
 369 0002 0446     		mov	r4, r0
 381:Src/app.c     **** 
 370              		.loc 1 381 15 view .LVU95
 371 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 372              	.LVL27:
 381:Src/app.c     **** 
 373              		.loc 1 381 15 view .LVU96
 374 0006 FFF7FEFF 		bl	BSP_PB_GetState
 375              	.LVL28:
 383:Src/app.c     ****     b->on_click_handler(b->cb_args);
 376              		.loc 1 383 6 view .LVU97
 377 000a 6368     		ldr	r3, [r4, #4]
 381:Src/app.c     **** 
 378              		.loc 1 381 15 view .LVU98
 379 000c 0546     		mov	r5, r0
ARM GAS  /tmp/cc2qXJ00.s 			page 33


 380              	.LVL29:
 383:Src/app.c     ****     b->on_click_handler(b->cb_args);
 381              		.loc 1 383 3 is_stmt 1 view .LVU99
 383:Src/app.c     ****     b->on_click_handler(b->cb_args);
 382              		.loc 1 383 6 is_stmt 0 view .LVU100
 383 000e 8342     		cmp	r3, r0
 384 0010 04D0     		beq	.L26
 383:Src/app.c     ****     b->on_click_handler(b->cb_args);
 385              		.loc 1 383 30 discriminator 1 view .LVU101
 386 0012 18B1     		cbz	r0, .L26
 383:Src/app.c     ****     b->on_click_handler(b->cb_args);
 387              		.loc 1 383 43 discriminator 2 view .LVU102
 388 0014 A368     		ldr	r3, [r4, #8]
 383:Src/app.c     ****     b->on_click_handler(b->cb_args);
 389              		.loc 1 383 39 discriminator 2 view .LVU103
 390 0016 0BB1     		cbz	r3, .L26
 384:Src/app.c     **** 
 391              		.loc 1 384 5 is_stmt 1 view .LVU104
 392 0018 E068     		ldr	r0, [r4, #12]
 393              	.LVL30:
 384:Src/app.c     **** 
 394              		.loc 1 384 5 is_stmt 0 view .LVU105
 395 001a 9847     		blx	r3
 396              	.LVL31:
 397              	.L26:
 386:Src/app.c     **** }
 398              		.loc 1 386 3 is_stmt 1 view .LVU106
 386:Src/app.c     **** }
 399              		.loc 1 386 17 is_stmt 0 view .LVU107
 400 001c 6560     		str	r5, [r4, #4]
 387:Src/app.c     **** 
 401              		.loc 1 387 1 view .LVU108
 402 001e 38BD     		pop	{r3, r4, r5, pc}
 387:Src/app.c     **** 
 403              		.loc 1 387 1 view .LVU109
 404              		.cfi_endproc
 405              	.LFE7367:
 407              		.section	.rodata.button_init.part.0.str1.1,"aMS",%progbits,1
 408              	.LC3:
 409 0000 72657420 		.ascii	"ret == BSP_ERROR_NONE\000"
 409      3D3D2042 
 409      53505F45 
 409      52524F52 
 409      5F4E4F4E 
 410              		.section	.text.button_init.part.0,"ax",%progbits
 411              		.align	1
 412              		.syntax unified
 413              		.thumb
 414              		.thumb_func
 416              	button_init.part.0:
 417              	.LFB7413:
 366:Src/app.c     **** {
 418              		.loc 1 366 13 is_stmt 1 view -0
 419              		.cfi_startproc
 420              		@ Volatile: function does not return.
 421              		@ args = 0, pretend = 0, frame = 0
 422              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc2qXJ00.s 			page 34


 423              	.LVL32:
 366:Src/app.c     **** {
 424              		.loc 1 366 13 is_stmt 0 view .LVU111
 425 0000 08B5     		push	{r3, lr}
 426              		.cfi_def_cfa_offset 8
 427              		.cfi_offset 3, -8
 428              		.cfi_offset 14, -4
 371:Src/app.c     **** 
 429              		.loc 1 371 3 discriminator 1 view .LVU112
 430 0002 40F27311 		movw	r1, #371
 431 0006 024B     		ldr	r3, .L34
 432 0008 024A     		ldr	r2, .L34+4
 433 000a 0348     		ldr	r0, .L34+8
 434 000c FFF7FEFF 		bl	__assert_func
 435              	.LVL33:
 436              	.L35:
 437              		.align	2
 438              	.L34:
 439 0010 00000000 		.word	.LC3
 440 0014 00000000 		.word	__func__.11
 441 0018 0E000000 		.word	.LC2
 442              		.cfi_endproc
 443              	.LFE7413:
 445              		.section	.text.display_ld_hand,"ax",%progbits
 446              		.align	1
 447              		.syntax unified
 448              		.thumb
 449              		.thumb_func
 451              	display_ld_hand:
 452              	.LVL34:
 453              	.LFB7388:
 706:Src/app.c     ****   const int disk_radius = DISK_RADIUS;
 454              		.loc 1 706 1 is_stmt 1 view -0
 455              		.cfi_startproc
 456              		@ args = 0, pretend = 0, frame = 256
 457              		@ frame_needed = 0, uses_anonymous_args = 0
 707:Src/app.c     ****   roi_t *roi = &hand->roi;
 458              		.loc 1 707 3 view .LVU114
 708:Src/app.c     ****   int x[LD_LANDMARK_NB];
 459              		.loc 1 708 3 view .LVU115
 709:Src/app.c     ****   int y[LD_LANDMARK_NB];
 460              		.loc 1 709 3 view .LVU116
 710:Src/app.c     ****   int is_clamped[LD_LANDMARK_NB];
 461              		.loc 1 710 3 view .LVU117
 711:Src/app.c     ****   ld_point_t decoded;
 462              		.loc 1 711 3 view .LVU118
 712:Src/app.c     ****   int i;
 463              		.loc 1 712 3 view .LVU119
 713:Src/app.c     **** 
 464              		.loc 1 713 3 view .LVU120
 715:Src/app.c     ****     decode_ld_landmark(roi, &hand->ld_landmarks[i], &decoded);
 465              		.loc 1 715 3 view .LVU121
 715:Src/app.c     ****     decode_ld_landmark(roi, &hand->ld_landmarks[i], &decoded);
 466              		.loc 1 715 17 discriminator 1 view .LVU122
 706:Src/app.c     ****   const int disk_radius = DISK_RADIUS;
 467              		.loc 1 706 1 is_stmt 0 view .LVU123
 468 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
ARM GAS  /tmp/cc2qXJ00.s 			page 35


 469              		.cfi_def_cfa_offset 36
 470              		.cfi_offset 4, -36
 471              		.cfi_offset 5, -32
 472              		.cfi_offset 6, -28
 473              		.cfi_offset 7, -24
 474              		.cfi_offset 8, -20
 475              		.cfi_offset 9, -16
 476              		.cfi_offset 10, -12
 477              		.cfi_offset 11, -8
 478              		.cfi_offset 14, -4
 479 0004 2DED0A8B 		vpush.64	{d8, d9, d10, d11, d12}
 480              		.cfi_def_cfa_offset 76
 481              		.cfi_offset 80, -76
 482              		.cfi_offset 81, -72
 483              		.cfi_offset 82, -68
 484              		.cfi_offset 83, -64
 485              		.cfi_offset 84, -60
 486              		.cfi_offset 85, -56
 487              		.cfi_offset 86, -52
 488              		.cfi_offset 87, -48
 489              		.cfi_offset 88, -44
 490              		.cfi_offset 89, -40
 491              	.LBB77:
 492              	.LBB78:
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 493              		.loc 1 701 46 view .LVU124
 494 0008 90ED0BCA 		vldr.32	s24, [r0, #44]
 495 000c B7EECCCA 		vcvt.f64.f32	d12, s24
 496              	.LBE78:
 497              	.LBE77:
 706:Src/app.c     ****   const int disk_radius = DISK_RADIUS;
 498              		.loc 1 706 1 view .LVU125
 499 0010 C3B0     		sub	sp, sp, #268
 500              		.cfi_def_cfa_offset 344
 501              	.LBB83:
 502              	.LBB79:
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 503              		.loc 1 701 46 view .LVU126
 504 0012 B0EE4C0B 		vmov.f64	d0, d12
 505              	.LBE79:
 506              	.LBE83:
 706:Src/app.c     ****   const int disk_radius = DISK_RADIUS;
 507              		.loc 1 706 1 view .LVU127
 508 0016 0446     		mov	r4, r0
 509              	.LBB84:
 510              	.LBB80:
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 511              		.loc 1 701 19 view .LVU128
 512 0018 90ED07AA 		vldr.32	s20, [r0, #28]
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 513              		.loc 1 701 40 view .LVU129
 514 001c 90ED09BA 		vldr.32	s22, [r0, #36]
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 515              		.loc 1 701 46 view .LVU130
 516 0020 FFF7FEFF 		bl	cos
 517              	.LVL35:
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
ARM GAS  /tmp/cc2qXJ00.s 			page 36


 518              		.loc 1 701 46 view .LVU131
 519 0024 B0EE408B 		vmov.f64	d8, d0
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 520              		.loc 1 701 82 discriminator 1 view .LVU132
 521 0028 B0EE4C0B 		vmov.f64	d0, d12
 522 002c FFF7FEFF 		bl	sin
 523              	.LVL36:
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 524              		.loc 1 701 76 discriminator 1 view .LVU133
 525 0030 94ED0A9A 		vldr.32	s18, [r4, #40]
 702:Src/app.c     **** }
 526              		.loc 1 702 19 view .LVU134
 527 0034 94ED086A 		vldr.32	s12, [r4, #32]
 528 0038 2DAD     		add	r5, sp, #180
 529 003a 18A8     		add	r0, sp, #96
 530 003c 0DF10C0C 		add	ip, sp, #12
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 531              		.loc 1 701 19 view .LVU135
 532 0040 B7EECAAA 		vcvt.f64.f32	d10, s20
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 533              		.loc 1 701 40 view .LVU136
 534 0044 B7EECBBA 		vcvt.f64.f32	d11, s22
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 535              		.loc 1 701 76 discriminator 1 view .LVU137
 536 0048 B7EEC99A 		vcvt.f64.f32	d9, s18
 702:Src/app.c     **** }
 537              		.loc 1 702 19 view .LVU138
 538 004c B7EEC66A 		vcvt.f64.f32	d6, s12
 539 0050 AE46     		mov	lr, r5
 540 0052 0646     		mov	r6, r0
 541 0054 6746     		mov	r7, ip
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 542              		.loc 1 701 33 view .LVU139
 543 0056 B6EE005B 		vmov.f64	d5, #5.0e-1
 544              	.LBE80:
 545              	.LBE84:
 546              	.LBB85:
 547              	.LBB86:
 589:Src/app.c     ****     *x = lcd_bg_area.XSize - margin - 1;
 548              		.loc 1 589 6 view .LVU140
 549 005a 40F21D39 		movw	r9, #797
 591:Src/app.c     ****     *y = lcd_bg_area.YSize - margin - 1;
 550              		.loc 1 591 6 view .LVU141
 551 005e 40F2DD18 		movw	r8, #477
 594:Src/app.c     **** }
 552              		.loc 1 594 21 discriminator 3 view .LVU142
 553 0062 1521     		movs	r1, #21
 554              	.LVL37:
 555              	.L38:
 594:Src/app.c     **** }
 556              		.loc 1 594 21 discriminator 3 view .LVU143
 557              	.LBE86:
 558              	.LBE85:
 716:Src/app.c     ****     x[i] = (int)decoded.x;
 559              		.loc 1 716 5 is_stmt 1 view .LVU144
 560              	.LBB91:
 561              	.LBI77:
ARM GAS  /tmp/cc2qXJ00.s 			page 37


 695:Src/app.c     **** {
 562              		.loc 1 695 13 view .LVU145
 563              	.LBB81:
 697:Src/app.c     ****   float w = roi->w;
 564              		.loc 1 697 3 view .LVU146
 698:Src/app.c     ****   float h = roi->h;
 565              		.loc 1 698 3 view .LVU147
 699:Src/app.c     **** 
 566              		.loc 1 699 3 view .LVU148
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 567              		.loc 1 701 3 view .LVU149
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 568              		.loc 1 701 29 is_stmt 0 view .LVU150
 569 0064 94ED0C3A 		vldr.32	s6, [r4, #48]
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 570              		.loc 1 701 65 discriminator 1 view .LVU151
 571 0068 94ED0D4A 		vldr.32	s8, [r4, #52]
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 572              		.loc 1 701 29 view .LVU152
 573 006c B7EEC33A 		vcvt.f64.f32	d3, s6
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 574              		.loc 1 701 65 discriminator 1 view .LVU153
 575 0070 B7EEC44A 		vcvt.f64.f32	d4, s8
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 576              		.loc 1 701 33 view .LVU154
 577 0074 33EE453B 		vsub.f64	d3, d3, d5
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 578              		.loc 1 701 24 discriminator 1 view .LVU155
 579 0078 B0EE4A7B 		vmov.f64	d7, d10
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 580              		.loc 1 701 40 view .LVU156
 581 007c 23EE0B3B 		vmul.f64	d3, d3, d11
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 582              		.loc 1 701 69 discriminator 1 view .LVU157
 583 0080 34EE454B 		vsub.f64	d4, d4, d5
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 584              		.loc 1 701 24 discriminator 1 view .LVU158
 585 0084 A3EE087B 		vfma.f64	d7, d3, d8
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 586              		.loc 1 701 76 discriminator 1 view .LVU159
 587 0088 24EE094B 		vmul.f64	d4, d4, d9
 701:Src/app.c     ****   decoded->y = roi->cy + (lm->x - 0.5) * w * sin(rotation) + (lm->y - 0.5) * h * cos(rotation);
 588              		.loc 1 701 60 discriminator 2 view .LVU160
 589 008c A4EE407B 		vfms.f64	d7, d4, d0
 590 0090 F7EEC72B 		vcvt.f32.f64	s5, d7
 702:Src/app.c     **** }
 591              		.loc 1 702 3 is_stmt 1 view .LVU161
 702:Src/app.c     **** }
 592              		.loc 1 702 24 is_stmt 0 discriminator 1 view .LVU162
 593 0094 B0EE467B 		vmov.f64	d7, d6
 594 0098 A3EE007B 		vfma.f64	d7, d3, d0
 702:Src/app.c     **** }
 595              		.loc 1 702 60 discriminator 2 view .LVU163
 596 009c A8EE047B 		vfma.f64	d7, d8, d4
 597              	.LVL38:
 702:Src/app.c     **** }
 598              		.loc 1 702 60 discriminator 2 view .LVU164
ARM GAS  /tmp/cc2qXJ00.s 			page 38


 599              	.LBE81:
 600              	.LBE91:
 717:Src/app.c     ****     y[i] = (int)decoded.y;
 601              		.loc 1 717 5 is_stmt 1 view .LVU165
 717:Src/app.c     ****     y[i] = (int)decoded.y;
 602              		.loc 1 717 12 is_stmt 0 view .LVU166
 603 00a0 FDEEE24A 		vcvt.s32.f32	s9, s5
 604 00a4 14EE90AA 		vmov	r10, s9	@ int
 718:Src/app.c     ****     is_clamped[i] = clamp_point_with_margin(&x[i], &y[i], disk_radius);
 605              		.loc 1 718 5 is_stmt 1 view .LVU167
 606              	.LBB92:
 607              	.LBB82:
 702:Src/app.c     **** }
 608              		.loc 1 702 60 is_stmt 0 discriminator 2 view .LVU168
 609 00a8 B7EEC77B 		vcvt.f32.f64	s14, d7
 610              	.LBE82:
 611              	.LBE92:
 612              	.LBB93:
 613              	.LBB87:
 585:Src/app.c     ****     *x = margin;
 614              		.loc 1 585 6 view .LVU169
 615 00ac 5246     		mov	r2, r10
 616              	.LBE87:
 617              	.LBE93:
 718:Src/app.c     ****     is_clamped[i] = clamp_point_with_margin(&x[i], &y[i], disk_radius);
 618              		.loc 1 718 12 view .LVU170
 619 00ae FDEEC77A 		vcvt.s32.f32	s15, s14
 620              	.LBB94:
 621              	.LBB88:
 585:Src/app.c     ****     *x = margin;
 622              		.loc 1 585 6 view .LVU171
 623 00b2 022A     		cmp	r2, #2
 624 00b4 B8BF     		it	lt
 625 00b6 0222     		movlt	r2, #2
 626              	.LBE88:
 627              	.LBE94:
 718:Src/app.c     ****     is_clamped[i] = clamp_point_with_margin(&x[i], &y[i], disk_radius);
 628              		.loc 1 718 12 view .LVU172
 629 00b8 17EE903A 		vmov	r3, s15	@ int
 719:Src/app.c     ****   }
 630              		.loc 1 719 5 is_stmt 1 view .LVU173
 631              	.LVL39:
 632              	.LBB95:
 633              	.LBI85:
 580:Src/app.c     **** {
 634              		.loc 1 580 12 view .LVU174
 635              	.LBB89:
 582:Src/app.c     ****   int yi = *y;
 636              		.loc 1 582 3 view .LVU175
 583:Src/app.c     **** 
 637              		.loc 1 583 3 view .LVU176
 585:Src/app.c     ****     *x = margin;
 638              		.loc 1 585 3 view .LVU177
 587:Src/app.c     ****     *y = margin;
 639              		.loc 1 587 3 view .LVU178
 589:Src/app.c     ****     *x = lcd_bg_area.XSize - margin - 1;
 640              		.loc 1 589 3 view .LVU179
ARM GAS  /tmp/cc2qXJ00.s 			page 39


 589:Src/app.c     ****     *x = lcd_bg_area.XSize - margin - 1;
 641              		.loc 1 589 6 is_stmt 0 view .LVU180
 642 00bc 4A45     		cmp	r2, r9
 643 00be A8BF     		it	ge
 644 00c0 4A46     		movge	r2, r9
 587:Src/app.c     ****     *y = margin;
 645              		.loc 1 587 6 view .LVU181
 646 00c2 022B     		cmp	r3, #2
 647 00c4 9B46     		mov	fp, r3
 648 00c6 B8BF     		it	lt
 649 00c8 4FF0020B 		movlt	fp, #2
 591:Src/app.c     ****     *y = lcd_bg_area.YSize - margin - 1;
 650              		.loc 1 591 6 view .LVU182
 651 00cc C345     		cmp	fp, r8
 652 00ce A8BF     		it	ge
 653 00d0 C346     		movge	fp, r8
 594:Src/app.c     **** }
 654              		.loc 1 594 21 discriminator 2 view .LVU183
 655 00d2 B3EB0B03 		subs	r3, r3, fp
 656              	.LVL40:
 594:Src/app.c     **** }
 657              		.loc 1 594 21 discriminator 2 view .LVU184
 658 00d6 18BF     		it	ne
 659 00d8 0123     		movne	r3, #1
 660 00da 9245     		cmp	r10, r2
 661 00dc 18BF     		it	ne
 662 00de 0123     		movne	r3, #1
 663              	.LBE89:
 664              	.LBE95:
 715:Src/app.c     ****     decode_ld_landmark(roi, &hand->ld_landmarks[i], &decoded);
 665              		.loc 1 715 17 discriminator 1 view .LVU185
 666 00e0 0139     		subs	r1, r1, #1
 667 00e2 4CF8042B 		str	r2, [ip], #4
 668              	.LBB96:
 669              	.LBB90:
 591:Src/app.c     ****     *y = lcd_bg_area.YSize - margin - 1;
 670              		.loc 1 591 3 is_stmt 1 view .LVU186
 671 00e6 40F804BB 		str	fp, [r0], #4
 594:Src/app.c     **** }
 672              		.loc 1 594 3 view .LVU187
 673              	.LVL41:
 594:Src/app.c     **** }
 674              		.loc 1 594 3 is_stmt 0 view .LVU188
 675              	.LBE90:
 676              	.LBE96:
 719:Src/app.c     ****   }
 677              		.loc 1 719 19 discriminator 1 view .LVU189
 678 00ea 4EF8043B 		str	r3, [lr], #4
 715:Src/app.c     ****     decode_ld_landmark(roi, &hand->ld_landmarks[i], &decoded);
 679              		.loc 1 715 36 is_stmt 1 discriminator 3 view .LVU190
 715:Src/app.c     ****     decode_ld_landmark(roi, &hand->ld_landmarks[i], &decoded);
 680              		.loc 1 715 17 discriminator 1 view .LVU191
 681 00ee 04F10804 		add	r4, r4, #8
 682 00f2 B7D1     		bne	.L38
 722:Src/app.c     ****     if (is_clamped[i])
 683              		.loc 1 722 10 is_stmt 0 view .LVU192
 684 00f4 0024     		movs	r4, #0
ARM GAS  /tmp/cc2qXJ00.s 			page 40


 685              	.L40:
 686              	.LVL42:
 723:Src/app.c     ****       continue;
 687              		.loc 1 723 5 is_stmt 1 view .LVU193
 723:Src/app.c     ****       continue;
 688              		.loc 1 723 19 is_stmt 0 view .LVU194
 689 00f6 55F8043B 		ldr	r3, [r5], #4
 723:Src/app.c     ****       continue;
 690              		.loc 1 723 8 view .LVU195
 691 00fa 43B9     		cbnz	r3, .L39
 725:Src/app.c     ****   }
 692              		.loc 1 725 5 is_stmt 1 view .LVU196
 693 00fc 6FF0FF03 		mvn	r3, #255
 694 0100 0222     		movs	r2, #2
 695 0102 56F82410 		ldr	r1, [r6, r4, lsl #2]
 696 0106 57F82400 		ldr	r0, [r7, r4, lsl #2]
 697 010a FFF7FEFF 		bl	UTIL_LCD_FillCircle
 698              	.LVL43:
 699              	.L39:
 722:Src/app.c     ****     if (is_clamped[i])
 700              		.loc 1 722 36 discriminator 2 view .LVU197
 701 010e 0134     		adds	r4, r4, #1
 702              	.LVL44:
 722:Src/app.c     ****     if (is_clamped[i])
 703              		.loc 1 722 17 discriminator 1 view .LVU198
 704 0110 152C     		cmp	r4, #21
 705 0112 F0D1     		bne	.L40
 728:Src/app.c     ****     if (is_clamped[ld_bindings_idx[i][0]] || is_clamped[ld_bindings_idx[i][1]])
 706              		.loc 1 728 10 is_stmt 0 view .LVU199
 707 0114 0025     		movs	r5, #0
 731:Src/app.c     ****                       x[ld_bindings_idx[i][1]], y[ld_bindings_idx[i][1]],
 708              		.loc 1 731 5 view .LVU200
 709 0116 4FF07F46 		mov	r6, #-16777216
 710 011a 124C     		ldr	r4, .L47
 711              	.LVL45:
 712              	.L42:
 729:Src/app.c     ****       continue;
 713              		.loc 1 729 5 is_stmt 1 view .LVU201
 729:Src/app.c     ****       continue;
 714              		.loc 1 729 38 is_stmt 0 view .LVU202
 715 011c 2068     		ldr	r0, [r4]
 729:Src/app.c     ****       continue;
 716              		.loc 1 729 19 view .LVU203
 717 011e 42AB     		add	r3, sp, #264
 718 0120 03EB8000 		add	r0, r3, r0, lsl #2
 729:Src/app.c     ****       continue;
 719              		.loc 1 729 8 view .LVU204
 720 0124 50F8543C 		ldr	r3, [r0, #-84]
 721 0128 8BB9     		cbnz	r3, .L41
 729:Src/app.c     ****       continue;
 722              		.loc 1 729 75 discriminator 2 view .LVU205
 723 012a 6268     		ldr	r2, [r4, #4]
 729:Src/app.c     ****       continue;
 724              		.loc 1 729 56 discriminator 2 view .LVU206
 725 012c 42AB     		add	r3, sp, #264
 726 012e 03EB8202 		add	r2, r3, r2, lsl #2
 729:Src/app.c     ****       continue;
ARM GAS  /tmp/cc2qXJ00.s 			page 41


 727              		.loc 1 729 43 discriminator 2 view .LVU207
 728 0132 52F8543C 		ldr	r3, [r2, #-84]
 729 0136 53B9     		cbnz	r3, .L41
 731:Src/app.c     ****                       x[ld_bindings_idx[i][1]], y[ld_bindings_idx[i][1]],
 730              		.loc 1 731 5 is_stmt 1 view .LVU208
 731 0138 0096     		str	r6, [sp]
 732 013a 52F8A83C 		ldr	r3, [r2, #-168]
 733 013e 50F8A81C 		ldr	r1, [r0, #-168]
 734 0142 52F8FC2C 		ldr	r2, [r2, #-252]
 735 0146 50F8FC0C 		ldr	r0, [r0, #-252]
 736 014a FFF7FEFF 		bl	UTIL_LCD_DrawLine
 737              	.LVL46:
 738              	.L41:
 728:Src/app.c     ****     if (is_clamped[ld_bindings_idx[i][0]] || is_clamped[ld_bindings_idx[i][1]])
 739              		.loc 1 728 35 discriminator 2 view .LVU209
 740 014e 0135     		adds	r5, r5, #1
 741              	.LVL47:
 728:Src/app.c     ****     if (is_clamped[ld_bindings_idx[i][0]] || is_clamped[ld_bindings_idx[i][1]])
 742              		.loc 1 728 17 discriminator 1 view .LVU210
 743 0150 152D     		cmp	r5, #21
 744 0152 04F10804 		add	r4, r4, #8
 745 0156 E1D1     		bne	.L42
 735:Src/app.c     **** 
 746              		.loc 1 735 1 is_stmt 0 view .LVU211
 747 0158 43B0     		add	sp, sp, #268
 748              		.cfi_def_cfa_offset 76
 749              		@ sp needed
 750 015a BDEC0A8B 		vldm	sp!, {d8-d12}
 751              		.cfi_restore 88
 752              		.cfi_restore 89
 753              		.cfi_restore 86
 754              		.cfi_restore 87
 755              		.cfi_restore 84
 756              		.cfi_restore 85
 757              		.cfi_restore 82
 758              		.cfi_restore 83
 759              		.cfi_restore 80
 760              		.cfi_restore 81
 761              		.cfi_def_cfa_offset 36
 762 015e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 763              	.LVL48:
 764              	.L48:
 735:Src/app.c     **** 
 765              		.loc 1 735 1 view .LVU212
 766 0162 00BF     		.align	2
 767              	.L47:
 768 0164 00000000 		.word	ld_bindings_idx
 769              		.cfi_endproc
 770              	.LFE7388:
 772              		.section	.rodata.nn_thread_fct.str1.1,"aMS",%progbits,1
 773              	.LC4:
 774 0000 6E6E5F70 		.ascii	"nn_pipe_dst\000"
 774      6970655F 
 774      64737400 
 775              	.LC5:
 776 000c 63617074 		.ascii	"capture_buffer\000"
 776      7572655F 
ARM GAS  /tmp/cc2qXJ00.s 			page 42


 776      62756666 
 776      657200
 777              		.section	.text.nn_thread_fct,"ax",%progbits
 778              		.align	1
 779              		.syntax unified
 780              		.thumb
 781              		.thumb_func
 783              	nn_thread_fct:
 784              	.LVL49:
 785              	.LFB7401:
1115:Src/app.c     ****   float nn_period_filtered_ms = 0;
 786              		.loc 1 1115 1 is_stmt 1 view -0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
1116:Src/app.c     ****   // Filtered inference times, will be updated with 0
 790              		.loc 1 1116 3 view .LVU214
1118:Src/app.c     ****   float ld_filtered_ms = 0;
 791              		.loc 1 1118 3 view .LVU215
1119:Src/app.c     **** 
 792              		.loc 1 1119 3 view .LVU216
1121:Src/app.c     ****   uint32_t nn_period[2];
 793              		.loc 1 1121 3 view .LVU217
1122:Src/app.c     ****   uint8_t *nn_pipe_dst;
 794              		.loc 1 1122 3 view .LVU218
1123:Src/app.c     ****   int is_tracking;
 795              		.loc 1 1123 3 view .LVU219
1124:Src/app.c     ****   uint32_t pd_ms;
 796              		.loc 1 1124 3 view .LVU220
1125:Src/app.c     ****   uint32_t hl_ms;
 797              		.loc 1 1125 3 view .LVU221
1126:Src/app.c     ****   int ret;
 798              		.loc 1 1126 3 view .LVU222
1127:Src/app.c     **** 
 799              		.loc 1 1127 3 view .LVU223
1135:Src/app.c     ****   nn_pipe_dst = bqueue_get_free(&nn_input_queue, 0);
 800              		.loc 1 1135 3 view .LVU224
1115:Src/app.c     ****   float nn_period_filtered_ms = 0;
 801              		.loc 1 1115 1 is_stmt 0 view .LVU225
 802 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 803              		.cfi_def_cfa_offset 24
 804              		.cfi_offset 4, -24
 805              		.cfi_offset 5, -20
 806              		.cfi_offset 6, -16
 807              		.cfi_offset 7, -12
 808              		.cfi_offset 8, -8
 809              		.cfi_offset 14, -4
 810 0004 2DED048B 		vpush.64	{d8, d9}
 811              		.cfi_def_cfa_offset 40
 812              		.cfi_offset 80, -40
 813              		.cfi_offset 81, -36
 814              		.cfi_offset 82, -32
 815              		.cfi_offset 83, -28
1135:Src/app.c     ****   nn_pipe_dst = bqueue_get_free(&nn_input_queue, 0);
 816              		.loc 1 1135 18 view .LVU226
 817 0008 FFF7FEFF 		bl	HAL_GetTick
 818              	.LVL50:
ARM GAS  /tmp/cc2qXJ00.s 			page 43


 819              	.LBB104:
 820              	.LBB105:
 459:Src/app.c     ****   if (ret == pdFALSE)
 821              		.loc 1 459 9 view .LVU227
 822 000c 484C     		ldr	r4, .L62
 823              	.LBE105:
 824              	.LBE104:
1135:Src/app.c     ****   nn_pipe_dst = bqueue_get_free(&nn_input_queue, 0);
 825              		.loc 1 1135 18 view .LVU228
 826 000e 0546     		mov	r5, r0
 827              	.LVL51:
1136:Src/app.c     ****   assert(nn_pipe_dst);
 828              		.loc 1 1136 3 is_stmt 1 view .LVU229
 829              	.LBB108:
 830              	.LBI104:
 454:Src/app.c     **** {
 831              		.loc 1 454 17 view .LVU230
 832              	.LBB106:
 456:Src/app.c     ****   int ret;
 833              		.loc 1 456 3 view .LVU231
 457:Src/app.c     **** 
 834              		.loc 1 457 3 view .LVU232
 459:Src/app.c     ****   if (ret == pdFALSE)
 835              		.loc 1 459 3 view .LVU233
 459:Src/app.c     ****   if (ret == pdFALSE)
 836              		.loc 1 459 9 is_stmt 0 discriminator 4 view .LVU234
 837 0010 0021     		movs	r1, #0
 838 0012 2068     		ldr	r0, [r4]
 839              	.LVL52:
 459:Src/app.c     ****   if (ret == pdFALSE)
 840              		.loc 1 459 9 discriminator 4 view .LVU235
 841 0014 FFF7FEFF 		bl	xQueueSemaphoreTake
 842              	.LVL53:
 460:Src/app.c     ****     return NULL;
 843              		.loc 1 460 3 is_stmt 1 view .LVU236
 460:Src/app.c     ****     return NULL;
 844              		.loc 1 460 6 is_stmt 0 view .LVU237
 845 0018 30B9     		cbnz	r0, .L50
 846              	.LVL54:
 847              	.L51:
 460:Src/app.c     ****     return NULL;
 848              		.loc 1 460 6 view .LVU238
 849              	.LBE106:
 850              	.LBE108:
1137:Src/app.c     ****   CAM_NNPipe_Start(nn_pipe_dst, CMW_MODE_CONTINUOUS);
 851              		.loc 1 1137 3 discriminator 1 view .LVU239
 852 001a 40F27141 		movw	r1, #1137
 853 001e 454B     		ldr	r3, .L62+4
 854 0020 454A     		ldr	r2, .L62+8
 855              	.LVL55:
 856              	.L61:
 857              	.LBB109:
 858              	.LBB110:
 859              	.LBB111:
 483:Src/app.c     **** 
 860              		.loc 1 483 3 discriminator 1 view .LVU240
 861 0022 4648     		ldr	r0, .L62+12
ARM GAS  /tmp/cc2qXJ00.s 			page 44


 862 0024 FFF7FEFF 		bl	__assert_func
 863              	.LVL56:
 864              	.L50:
 483:Src/app.c     **** 
 865              		.loc 1 483 3 discriminator 1 view .LVU241
 866              	.LBE111:
 867              	.LBE110:
 868              	.LBE109:
 869              	.LBB118:
 870              	.LBB107:
 463:Src/app.c     ****   bq->free_idx = (bq->free_idx + 1) % bq->buffer_nb;
 871              		.loc 1 463 3 is_stmt 1 view .LVU242
 463:Src/app.c     ****   bq->free_idx = (bq->free_idx + 1) % bq->buffer_nb;
 872              		.loc 1 463 23 is_stmt 0 view .LVU243
 873 0028 D4F8B430 		ldr	r3, [r4, #180]
 463:Src/app.c     ****   bq->free_idx = (bq->free_idx + 1) % bq->buffer_nb;
 874              		.loc 1 463 7 view .LVU244
 875 002c 04EB8302 		add	r2, r4, r3, lsl #2
 876 0030 D2F8AC00 		ldr	r0, [r2, #172]
 877              	.LVL57:
 464:Src/app.c     **** 
 878              		.loc 1 464 3 is_stmt 1 view .LVU245
 464:Src/app.c     **** 
 879              		.loc 1 464 37 is_stmt 0 view .LVU246
 880 0034 D4F8A820 		ldr	r2, [r4, #168]
 464:Src/app.c     **** 
 881              		.loc 1 464 32 view .LVU247
 882 0038 0133     		adds	r3, r3, #1
 464:Src/app.c     **** 
 883              		.loc 1 464 37 view .LVU248
 884 003a 93FBF2F1 		sdiv	r1, r3, r2
 885 003e 02FB1133 		mls	r3, r2, r1, r3
 464:Src/app.c     **** 
 886              		.loc 1 464 16 view .LVU249
 887 0042 C4F8B430 		str	r3, [r4, #180]
 466:Src/app.c     **** }
 888              		.loc 1 466 3 is_stmt 1 view .LVU250
 889              	.LVL58:
 466:Src/app.c     **** }
 890              		.loc 1 466 3 is_stmt 0 view .LVU251
 891              	.LBE107:
 892              	.LBE118:
1137:Src/app.c     ****   CAM_NNPipe_Start(nn_pipe_dst, CMW_MODE_CONTINUOUS);
 893              		.loc 1 1137 3 is_stmt 1 view .LVU252
 894 0046 0028     		cmp	r0, #0
 895 0048 E7D0     		beq	.L51
1138:Src/app.c     ****   while (1)
 896              		.loc 1 1138 3 view .LVU253
1116:Src/app.c     ****   // Filtered inference times, will be updated with 0
 897              		.loc 1 1116 9 is_stmt 0 view .LVU254
 898 004a 9FED3D8A 		vldr.32	s16, .L62+16
1138:Src/app.c     ****   while (1)
 899              		.loc 1 1138 3 view .LVU255
 900 004e 0021     		movs	r1, #0
 901 0050 FFF7FEFF 		bl	CAM_NNPipe_Start
 902              	.LVL59:
1138:Src/app.c     ****   while (1)
ARM GAS  /tmp/cc2qXJ00.s 			page 45


 903              		.loc 1 1138 3 view .LVU256
 904 0054 18EE108A 		vmov	r8, s16
 905              	.LBB119:
1147:Src/app.c     **** 
 906              		.loc 1 1147 75 view .LVU257
 907 0058 F2EE0E8A 		vmov.f32	s17, #1.5e+1
1147:Src/app.c     **** 
 908              		.loc 1 1147 27 view .LVU258
 909 005c 9FED399A 		vldr.32	s18, .L62+20
1173:Src/app.c     ****     assert(ret == pdTRUE);
 910              		.loc 1 1173 11 view .LVU259
 911 0060 394E     		ldr	r6, .L62+24
 912              	.LVL60:
 913              	.L57:
1173:Src/app.c     ****     assert(ret == pdTRUE);
 914              		.loc 1 1173 11 view .LVU260
 915              	.LBE119:
1139:Src/app.c     ****   {
 916              		.loc 1 1139 3 is_stmt 1 view .LVU261
 917              	.LBB120:
1141:Src/app.c     **** 
 918              		.loc 1 1141 5 view .LVU262
1144:Src/app.c     ****     nn_period[1] = HAL_GetTick();
 919              		.loc 1 1144 5 view .LVU263
1145:Src/app.c     ****     nn_period_ms = nn_period[1] - nn_period[0];
 920              		.loc 1 1145 5 view .LVU264
1145:Src/app.c     ****     nn_period_ms = nn_period[1] - nn_period[0];
 921              		.loc 1 1145 20 is_stmt 0 view .LVU265
 922 0062 FFF7FEFF 		bl	HAL_GetTick
 923              	.LVL61:
1146:Src/app.c     ****     nn_period_filtered_ms = USE_FILTERED_TS ? (15 * nn_period_filtered_ms + nn_period_ms) / 16 : nn
 924              		.loc 1 1146 18 view .LVU266
 925 0066 431B     		subs	r3, r0, r5
 926 0068 07EE903A 		vmov	s15, r3	@ int
1147:Src/app.c     **** 
 927              		.loc 1 1147 75 view .LVU267
 928 006c F8EE677A 		vcvt.f32.u32	s15, s15
 929 0070 E8EE287A 		vfma.f32	s15, s16, s17
1145:Src/app.c     ****     nn_period_ms = nn_period[1] - nn_period[0];
 930              		.loc 1 1145 20 view .LVU268
 931 0074 0746     		mov	r7, r0
 932              	.LVL62:
1146:Src/app.c     ****     nn_period_filtered_ms = USE_FILTERED_TS ? (15 * nn_period_filtered_ms + nn_period_ms) / 16 : nn
 933              		.loc 1 1146 5 is_stmt 1 view .LVU269
1147:Src/app.c     **** 
 934              		.loc 1 1147 5 view .LVU270
 935              	.LBB114:
 936              	.LBB112:
 482:Src/app.c     ****   assert(ret == pdTRUE);
 937              		.loc 1 482 9 is_stmt 0 view .LVU271
 938 0076 4FF0FF31 		mov	r1, #-1
 939 007a 606D     		ldr	r0, [r4, #84]
 940              	.LVL63:
 482:Src/app.c     ****   assert(ret == pdTRUE);
 941              		.loc 1 482 9 view .LVU272
 942              	.LBE112:
 943              	.LBE114:
ARM GAS  /tmp/cc2qXJ00.s 			page 46


1147:Src/app.c     **** 
 944              		.loc 1 1147 27 view .LVU273
 945 007c 27EE898A 		vmul.f32	s16, s15, s18
 946              	.LVL64:
1150:Src/app.c     ****     assert(capture_buffer);
 947              		.loc 1 1150 5 is_stmt 1 view .LVU274
 948              	.LBB115:
 949              	.LBI110:
 477:Src/app.c     **** {
 950              		.loc 1 477 17 view .LVU275
 951              	.LBB113:
 479:Src/app.c     ****   int ret;
 952              		.loc 1 479 3 view .LVU276
 480:Src/app.c     **** 
 953              		.loc 1 480 3 view .LVU277
 482:Src/app.c     ****   assert(ret == pdTRUE);
 954              		.loc 1 482 3 view .LVU278
 482:Src/app.c     ****   assert(ret == pdTRUE);
 955              		.loc 1 482 9 is_stmt 0 view .LVU279
 956 0080 FFF7FEFF 		bl	xQueueSemaphoreTake
 957              	.LVL65:
 483:Src/app.c     **** 
 958              		.loc 1 483 3 is_stmt 1 view .LVU280
 959 0084 0128     		cmp	r0, #1
 960 0086 04D0     		beq	.L52
 483:Src/app.c     **** 
 961              		.loc 1 483 3 is_stmt 0 discriminator 1 view .LVU281
 962 0088 40F2E311 		movw	r1, #483
 963 008c 2F4B     		ldr	r3, .L62+28
 964 008e 304A     		ldr	r2, .L62+32
 965 0090 C7E7     		b	.L61
 966              	.L52:
 485:Src/app.c     ****   bq->ready_idx = (bq->ready_idx + 1) % bq->buffer_nb;
 967              		.loc 1 485 3 is_stmt 1 view .LVU282
 485:Src/app.c     ****   bq->ready_idx = (bq->ready_idx + 1) % bq->buffer_nb;
 968              		.loc 1 485 23 is_stmt 0 view .LVU283
 969 0092 D4F8B830 		ldr	r3, [r4, #184]
 485:Src/app.c     ****   bq->ready_idx = (bq->ready_idx + 1) % bq->buffer_nb;
 970              		.loc 1 485 7 view .LVU284
 971 0096 04EB8302 		add	r2, r4, r3, lsl #2
 972 009a D2F8AC10 		ldr	r1, [r2, #172]
 973              	.LVL66:
 486:Src/app.c     **** 
 974              		.loc 1 486 3 is_stmt 1 view .LVU285
 486:Src/app.c     **** 
 975              		.loc 1 486 39 is_stmt 0 view .LVU286
 976 009e D4F8A820 		ldr	r2, [r4, #168]
 486:Src/app.c     **** 
 977              		.loc 1 486 34 view .LVU287
 978 00a2 0133     		adds	r3, r3, #1
 486:Src/app.c     **** 
 979              		.loc 1 486 39 view .LVU288
 980 00a4 93FBF2F0 		sdiv	r0, r3, r2
 981              	.LVL67:
 486:Src/app.c     **** 
 982              		.loc 1 486 39 view .LVU289
 983 00a8 02FB1033 		mls	r3, r2, r0, r3
ARM GAS  /tmp/cc2qXJ00.s 			page 47


 486:Src/app.c     **** 
 984              		.loc 1 486 17 view .LVU290
 985 00ac C4F8B830 		str	r3, [r4, #184]
 488:Src/app.c     **** }
 986              		.loc 1 488 3 is_stmt 1 view .LVU291
 987              	.LVL68:
 488:Src/app.c     **** }
 988              		.loc 1 488 3 is_stmt 0 view .LVU292
 989              	.LBE113:
 990              	.LBE115:
1151:Src/app.c     **** 
 991              		.loc 1 1151 5 is_stmt 1 view .LVU293
 992 00b0 21B9     		cbnz	r1, .L53
1151:Src/app.c     **** 
 993              		.loc 1 1151 5 is_stmt 0 discriminator 1 view .LVU294
 994 00b2 40F27F41 		movw	r1, #1151
 995              	.LVL69:
1151:Src/app.c     **** 
 996              		.loc 1 1151 5 discriminator 1 view .LVU295
 997 00b6 274B     		ldr	r3, .L62+36
 998 00b8 1F4A     		ldr	r2, .L62+8
 999 00ba B2E7     		b	.L61
 1000              	.LVL70:
 1001              	.L53:
1158:Src/app.c     ****     pd_ms = 0;       // Set inference time to 0
 1002              		.loc 1 1158 5 is_stmt 1 view .LVU296
1159:Src/app.c     ****     hl_ms = 0;       // Set inference time to 0
 1003              		.loc 1 1159 5 view .LVU297
1160:Src/app.c     **** 
 1004              		.loc 1 1160 5 view .LVU298
1163:Src/app.c     ****     ld_filtered_ms = USE_FILTERED_TS ? (7 * ld_filtered_ms + hl_ms) / 8 : hl_ms;
 1005              		.loc 1 1163 5 view .LVU299
1164:Src/app.c     **** 
 1006              		.loc 1 1164 5 view .LVU300
1167:Src/app.c     **** 
 1007              		.loc 1 1167 5 view .LVU301
 1008              	.LBB116:
 1009              	.LBI116:
 469:Src/app.c     **** {
 1010              		.loc 1 469 13 view .LVU302
 1011              	.LBB117:
 471:Src/app.c     **** 
 1012              		.loc 1 471 3 view .LVU303
 473:Src/app.c     ****   assert(ret == pdTRUE);
 1013              		.loc 1 473 3 view .LVU304
 473:Src/app.c     ****   assert(ret == pdTRUE);
 1014              		.loc 1 473 9 is_stmt 0 view .LVU305
 1015 00bc 0023     		movs	r3, #0
 1016 00be 2068     		ldr	r0, [r4]
 1017 00c0 1A46     		mov	r2, r3
 1018 00c2 1946     		mov	r1, r3
 1019              	.LVL71:
 473:Src/app.c     ****   assert(ret == pdTRUE);
 1020              		.loc 1 473 9 view .LVU306
 1021 00c4 FFF7FEFF 		bl	xQueueGenericSend
 1022              	.LVL72:
 474:Src/app.c     **** }
ARM GAS  /tmp/cc2qXJ00.s 			page 48


 1023              		.loc 1 474 3 is_stmt 1 view .LVU307
 1024 00c8 0128     		cmp	r0, #1
 1025 00ca 04D0     		beq	.L54
 474:Src/app.c     **** }
 1026              		.loc 1 474 3 is_stmt 0 discriminator 1 view .LVU308
 1027 00cc 4FF4ED71 		mov	r1, #474
 1028 00d0 1E4B     		ldr	r3, .L62+28
 1029 00d2 214A     		ldr	r2, .L62+40
 1030 00d4 A5E7     		b	.L61
 1031              	.L54:
 1032              	.LVL73:
 474:Src/app.c     **** }
 1033              		.loc 1 474 3 discriminator 1 view .LVU309
 1034              	.LBE117:
 1035              	.LBE116:
1173:Src/app.c     ****     assert(ret == pdTRUE);
 1036              		.loc 1 1173 5 is_stmt 1 view .LVU310
1173:Src/app.c     ****     assert(ret == pdTRUE);
 1037              		.loc 1 1173 11 is_stmt 0 view .LVU311
 1038 00d6 4FF0FF31 		mov	r1, #-1
 1039 00da 706D     		ldr	r0, [r6, #84]
 1040 00dc FFF7FEFF 		bl	xQueueSemaphoreTake
 1041              	.LVL74:
1174:Src/app.c     **** 
 1042              		.loc 1 1174 5 is_stmt 1 view .LVU312
 1043 00e0 0128     		cmp	r0, #1
 1044 00e2 04D0     		beq	.L55
1174:Src/app.c     **** 
 1045              		.loc 1 1174 5 is_stmt 0 discriminator 1 view .LVU313
 1046 00e4 40F29641 		movw	r1, #1174
 1047 00e8 184B     		ldr	r3, .L62+28
 1048 00ea 134A     		ldr	r2, .L62+8
 1049 00ec 99E7     		b	.L61
 1050              	.L55:
1177:Src/app.c     ****     disp.info.hl_ms = (int)ld_filtered_ms;
 1051              		.loc 1 1177 5 is_stmt 1 view .LVU314
1177:Src/app.c     ****     disp.info.hl_ms = (int)ld_filtered_ms;
 1052              		.loc 1 1177 21 is_stmt 0 view .LVU315
 1053 00ee 0025     		movs	r5, #0
 1054              	.LVL75:
1187:Src/app.c     ****     assert(ret == pdTRUE);
 1055              		.loc 1 1187 11 view .LVU316
 1056 00f0 706D     		ldr	r0, [r6, #84]
 1057              	.LVL76:
1187:Src/app.c     ****     assert(ret == pdTRUE);
 1058              		.loc 1 1187 11 view .LVU317
 1059 00f2 2B46     		mov	r3, r5
 1060 00f4 2A46     		mov	r2, r5
 1061 00f6 2946     		mov	r1, r5
1179:Src/app.c     ****     disp.info.pd_hand_nb = 0;
 1062              		.loc 1 1179 28 view .LVU318
 1063 00f8 86ED2A8A 		vstr.32	s16, [r6, #168]
1178:Src/app.c     ****     disp.info.nn_period_ms = nn_period_filtered_ms;
 1064              		.loc 1 1178 21 view .LVU319
 1065 00fc C6E92B55 		strd	r5, r5, [r6, #172]
1179:Src/app.c     ****     disp.info.pd_hand_nb = 0;
 1066              		.loc 1 1179 5 is_stmt 1 view .LVU320
ARM GAS  /tmp/cc2qXJ00.s 			page 49


1180:Src/app.c     ****     disp.info.pd_max_prob = 0.0f;
 1067              		.loc 1 1180 5 view .LVU321
1180:Src/app.c     ****     disp.info.pd_max_prob = 0.0f;
 1068              		.loc 1 1180 26 is_stmt 0 view .LVU322
 1069 0100 C6F8C450 		str	r5, [r6, #196]
1181:Src/app.c     ****     disp.info.hands[0].is_valid = 0; // Set hand as invalid
 1070              		.loc 1 1181 5 is_stmt 1 view .LVU323
1181:Src/app.c     ****     disp.info.hands[0].is_valid = 0; // Set hand as invalid
 1071              		.loc 1 1181 27 is_stmt 0 view .LVU324
 1072 0104 C6F8C880 		str	r8, [r6, #200]	@ float
1182:Src/app.c     **** 
 1073              		.loc 1 1182 5 is_stmt 1 view .LVU325
1182:Src/app.c     **** 
 1074              		.loc 1 1182 33 is_stmt 0 view .LVU326
 1075 0108 C6F8CC50 		str	r5, [r6, #204]
1187:Src/app.c     ****     assert(ret == pdTRUE);
 1076              		.loc 1 1187 5 is_stmt 1 view .LVU327
1187:Src/app.c     ****     assert(ret == pdTRUE);
 1077              		.loc 1 1187 11 is_stmt 0 view .LVU328
 1078 010c FFF7FEFF 		bl	xQueueGenericSend
 1079              	.LVL77:
1188:Src/app.c     **** 
 1080              		.loc 1 1188 5 is_stmt 1 view .LVU329
 1081 0110 0128     		cmp	r0, #1
 1082 0112 04D0     		beq	.L56
1188:Src/app.c     **** 
 1083              		.loc 1 1188 5 is_stmt 0 discriminator 1 view .LVU330
 1084 0114 40F2A441 		movw	r1, #1188
 1085 0118 0C4B     		ldr	r3, .L62+28
 1086 011a 074A     		ldr	r2, .L62+8
 1087 011c 81E7     		b	.L61
 1088              	.L56:
1191:Src/app.c     ****   }
 1089              		.loc 1 1191 5 is_stmt 1 view .LVU331
 1090 011e 2B46     		mov	r3, r5
 1091 0120 2A46     		mov	r2, r5
 1092 0122 2946     		mov	r1, r5
 1093 0124 3068     		ldr	r0, [r6]
 1094              	.LVL78:
1191:Src/app.c     ****   }
 1095              		.loc 1 1191 5 is_stmt 0 view .LVU332
 1096 0126 FFF7FEFF 		bl	xQueueGenericSend
 1097              	.LVL79:
 1098              	.LBE120:
1139:Src/app.c     ****   {
 1099              		.loc 1 1139 9 is_stmt 1 view .LVU333
 1100              	.LBB121:
1145:Src/app.c     ****     nn_period_ms = nn_period[1] - nn_period[0];
 1101              		.loc 1 1145 18 is_stmt 0 discriminator 1 view .LVU334
 1102 012a 3D46     		mov	r5, r7
 1103              	.LBE121:
1140:Src/app.c     ****     uint8_t *capture_buffer;
 1104              		.loc 1 1140 3 view .LVU335
 1105 012c 99E7     		b	.L57
 1106              	.L63:
 1107 012e 00BF     		.align	2
 1108              	.L62:
ARM GAS  /tmp/cc2qXJ00.s 			page 50


 1109 0130 00000000 		.word	nn_input_queue
 1110 0134 00000000 		.word	.LC4
 1111 0138 00000000 		.word	__func__.8
 1112 013c 0E000000 		.word	.LC2
 1113 0140 00000000 		.word	0
 1114 0144 0000803D 		.word	1031798784
 1115 0148 00000000 		.word	disp
 1116 014c 00000000 		.word	.LC1
 1117 0150 00000000 		.word	__func__.7
 1118 0154 0C000000 		.word	.LC5
 1119 0158 00000000 		.word	__func__.6
 1120              		.cfi_endproc
 1121              	.LFE7401:
 1123              		.section	.text.display_hand,"ax",%progbits
 1124              		.align	1
 1125              		.global	display_hand
 1126              		.syntax unified
 1127              		.thumb
 1128              		.thumb_func
 1130              	display_hand:
 1131              	.LVL80:
 1132              	.LFB7389:
 738:Src/app.c     ****   if (info->is_pd_displayed) {
 1133              		.loc 1 738 1 is_stmt 1 view -0
 1134              		.cfi_startproc
 1135              		@ args = 0, pretend = 0, frame = 72
 1136              		@ frame_needed = 0, uses_anonymous_args = 0
 739:Src/app.c     ****     display_pd_hand(&hand->pd_hands);
 1137              		.loc 1 739 3 view .LVU337
 738:Src/app.c     ****   if (info->is_pd_displayed) {
 1138              		.loc 1 738 1 is_stmt 0 view .LVU338
 1139 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1140              		.cfi_def_cfa_offset 32
 1141              		.cfi_offset 4, -32
 1142              		.cfi_offset 5, -28
 1143              		.cfi_offset 6, -24
 1144              		.cfi_offset 7, -20
 1145              		.cfi_offset 8, -16
 1146              		.cfi_offset 9, -12
 1147              		.cfi_offset 10, -8
 1148              		.cfi_offset 14, -4
 1149 0004 2DED048B 		vpush.64	{d8, d9}
 1150              		.cfi_def_cfa_offset 48
 1151              		.cfi_offset 80, -48
 1152              		.cfi_offset 81, -44
 1153              		.cfi_offset 82, -40
 1154              		.cfi_offset 83, -36
 739:Src/app.c     ****     display_pd_hand(&hand->pd_hands);
 1155              		.loc 1 739 6 view .LVU339
 1156 0008 8369     		ldr	r3, [r0, #24]
 738:Src/app.c     ****   if (info->is_pd_displayed) {
 1157              		.loc 1 738 1 view .LVU340
 1158 000a 0546     		mov	r5, r0
 1159 000c 0C46     		mov	r4, r1
 1160 000e 94B0     		sub	sp, sp, #80
 1161              		.cfi_def_cfa_offset 128
 739:Src/app.c     ****     display_pd_hand(&hand->pd_hands);
ARM GAS  /tmp/cc2qXJ00.s 			page 51


 1162              		.loc 1 739 6 view .LVU341
 1163 0010 002B     		cmp	r3, #0
 1164 0012 00F0FD80 		beq	.L65
 740:Src/app.c     ****     display_roi(&hand->roi);
 1165              		.loc 1 740 5 is_stmt 1 view .LVU342
 1166              	.LVL81:
 1167              	.LBB133:
 1168              	.LBI133:
 597:Src/app.c     **** {
 1169              		.loc 1 597 13 view .LVU343
 1170              	.LBB134:
 599:Src/app.c     ****   int x0, y0;
 1171              		.loc 1 599 3 view .LVU344
 600:Src/app.c     ****   int x1, y1;
 1172              		.loc 1 600 3 view .LVU345
 601:Src/app.c     ****   int w, h;
 1173              		.loc 1 601 3 view .LVU346
 602:Src/app.c     ****   int i;
 1174              		.loc 1 602 3 view .LVU347
 603:Src/app.c     **** 
 1175              		.loc 1 603 3 view .LVU348
 606:Src/app.c     ****   yc = (int)hand->y_center;
 1176              		.loc 1 606 3 view .LVU349
 606:Src/app.c     ****   yc = (int)hand->y_center;
 1177              		.loc 1 606 6 is_stmt 0 view .LVU350
 1178 0016 D1ED027A 		vldr.32	s15, [r1, #8]
 1179 001a FDEEE77A 		vcvt.s32.f32	s15, s15
 1180 001e 17EE900A 		vmov	r0, s15	@ int
 1181              	.LVL82:
 607:Src/app.c     ****   w = (int)hand->width;
 1182              		.loc 1 607 3 is_stmt 1 view .LVU351
 607:Src/app.c     ****   w = (int)hand->width;
 1183              		.loc 1 607 6 is_stmt 0 view .LVU352
 1184 0022 D1ED037A 		vldr.32	s15, [r1, #12]
 1185 0026 FDEEE77A 		vcvt.s32.f32	s15, s15
 1186 002a 17EE901A 		vmov	r1, s15	@ int
 1187              	.LVL83:
 608:Src/app.c     ****   h = (int)hand->height;
 1188              		.loc 1 608 3 is_stmt 1 view .LVU353
 609:Src/app.c     ****   x0 = xc - (w + 1) / 2;
 1189              		.loc 1 609 3 view .LVU354
 609:Src/app.c     ****   x0 = xc - (w + 1) / 2;
 1190              		.loc 1 609 5 is_stmt 0 view .LVU355
 1191 002e D4ED057A 		vldr.32	s15, [r4, #20]
 1192 0032 FDEEE77A 		vcvt.s32.f32	s15, s15
 1193 0036 17EE903A 		vmov	r3, s15	@ int
 1194              	.LVL84:
 610:Src/app.c     ****   y0 = yc - (h + 1) / 2;
 1195              		.loc 1 610 3 is_stmt 1 view .LVU356
 608:Src/app.c     ****   h = (int)hand->height;
 1196              		.loc 1 608 5 is_stmt 0 view .LVU357
 1197 003a D4ED047A 		vldr.32	s15, [r4, #16]
 1198 003e FDEEE77A 		vcvt.s32.f32	s15, s15
 1199 0042 17EE902A 		vmov	r2, s15	@ int
 610:Src/app.c     ****   y0 = yc - (h + 1) / 2;
 1200              		.loc 1 610 16 view .LVU358
 1201 0046 0132     		adds	r2, r2, #1
ARM GAS  /tmp/cc2qXJ00.s 			page 52


 610:Src/app.c     ****   y0 = yc - (h + 1) / 2;
 1202              		.loc 1 610 21 view .LVU359
 1203 0048 02EBD272 		add	r2, r2, r2, lsr #31
 611:Src/app.c     ****   x1 = xc + (w + 1) / 2;
 1204              		.loc 1 611 16 view .LVU360
 1205 004c 0133     		adds	r3, r3, #1
 1206              	.LVL85:
 610:Src/app.c     ****   y0 = yc - (h + 1) / 2;
 1207              		.loc 1 610 21 view .LVU361
 1208 004e 5210     		asrs	r2, r2, #1
 611:Src/app.c     ****   x1 = xc + (w + 1) / 2;
 1209              		.loc 1 611 21 view .LVU362
 1210 0050 03EBD373 		add	r3, r3, r3, lsr #31
 1211              	.LVL86:
 610:Src/app.c     ****   y0 = yc - (h + 1) / 2;
 1212              		.loc 1 610 21 view .LVU363
 1213 0054 5242     		rsbs	r2, r2, #0
 611:Src/app.c     ****   x1 = xc + (w + 1) / 2;
 1214              		.loc 1 611 21 view .LVU364
 1215 0056 5B10     		asrs	r3, r3, #1
 610:Src/app.c     ****   y0 = yc - (h + 1) / 2;
 1216              		.loc 1 610 11 view .LVU365
 1217 0058 8618     		adds	r6, r0, r2
 611:Src/app.c     ****   x1 = xc + (w + 1) / 2;
 1218              		.loc 1 611 21 view .LVU366
 1219 005a 5B42     		rsbs	r3, r3, #0
 612:Src/app.c     ****   y1 = yc + (h + 1) / 2;
 1220              		.loc 1 612 6 view .LVU367
 1221 005c 801A     		subs	r0, r0, r2
 1222              	.LVL87:
 610:Src/app.c     ****   y0 = yc - (h + 1) / 2;
 1223              		.loc 1 610 6 view .LVU368
 1224 005e 0296     		str	r6, [sp, #8]
 611:Src/app.c     ****   x1 = xc + (w + 1) / 2;
 1225              		.loc 1 611 3 is_stmt 1 view .LVU369
 611:Src/app.c     ****   x1 = xc + (w + 1) / 2;
 1226              		.loc 1 611 11 is_stmt 0 view .LVU370
 1227 0060 CE18     		adds	r6, r1, r3
 613:Src/app.c     ****   clamp_point(&x0, &y0);
 1228              		.loc 1 613 6 view .LVU371
 1229 0062 C91A     		subs	r1, r1, r3
 1230              	.LVL88:
 612:Src/app.c     ****   y1 = yc + (h + 1) / 2;
 1231              		.loc 1 612 6 view .LVU372
 1232 0064 0490     		str	r0, [sp, #16]
 613:Src/app.c     ****   clamp_point(&x0, &y0);
 1233              		.loc 1 613 6 view .LVU373
 1234 0066 0C91     		str	r1, [sp, #48]
 614:Src/app.c     ****   clamp_point(&x1, &y1);
 1235              		.loc 1 614 3 view .LVU374
 1236 0068 02A8     		add	r0, sp, #8
 1237 006a 03A9     		add	r1, sp, #12
 611:Src/app.c     ****   x1 = xc + (w + 1) / 2;
 1238              		.loc 1 611 6 view .LVU375
 1239 006c 0396     		str	r6, [sp, #12]
 612:Src/app.c     ****   y1 = yc + (h + 1) / 2;
 1240              		.loc 1 612 3 is_stmt 1 view .LVU376
ARM GAS  /tmp/cc2qXJ00.s 			page 53


 613:Src/app.c     ****   clamp_point(&x0, &y0);
 1241              		.loc 1 613 3 view .LVU377
 614:Src/app.c     ****   clamp_point(&x1, &y1);
 1242              		.loc 1 614 3 view .LVU378
 1243 006e FFF7FEFF 		bl	clamp_point
 1244              	.LVL89:
 615:Src/app.c     ****   UTIL_LCD_DrawRect(x0, y0, x1 - x0, y1 - y0, UTIL_LCD_COLOR_GREEN);
 1245              		.loc 1 615 3 view .LVU379
 1246 0072 0CA9     		add	r1, sp, #48
 1247 0074 04A8     		add	r0, sp, #16
 1248 0076 FFF7FEFF 		bl	clamp_point
 1249              	.LVL90:
 616:Src/app.c     **** 
 1250              		.loc 1 616 3 view .LVU380
 1251 007a DDE90201 		ldrd	r0, r1, [sp, #8]
 1252 007e 4FF0FF23 		mov	r3, #-16711936
 1253 0082 049A     		ldr	r2, [sp, #16]
 1254 0084 0093     		str	r3, [sp]
 1255 0086 0C9B     		ldr	r3, [sp, #48]
 1256 0088 121A     		subs	r2, r2, r0
 1257 008a 5B1A     		subs	r3, r3, r1
 1258 008c FFF7FEFF 		bl	UTIL_LCD_DrawRect
 1259              	.LVL91:
 619:Src/app.c     ****     uint32_t color = (i != 0 && i != 2) ? UTIL_LCD_COLOR_RED : UTIL_LCD_COLOR_BLUE;
 1260              		.loc 1 619 3 view .LVU381
 619:Src/app.c     ****     uint32_t color = (i != 0 && i != 2) ? UTIL_LCD_COLOR_RED : UTIL_LCD_COLOR_BLUE;
 1261              		.loc 1 619 17 discriminator 1 view .LVU382
 619:Src/app.c     ****     uint32_t color = (i != 0 && i != 2) ? UTIL_LCD_COLOR_RED : UTIL_LCD_COLOR_BLUE;
 1262              		.loc 1 619 10 is_stmt 0 view .LVU383
 1263 0090 0026     		movs	r6, #0
 1264              	.LBB135:
 620:Src/app.c     **** 
 1265              		.loc 1 620 62 discriminator 3 view .LVU384
 1266 0092 DFF8A081 		ldr	r8, .L85+4
 1267 0096 664F     		ldr	r7, .L85
 1268              	.LVL92:
 1269              	.L67:
 620:Src/app.c     **** 
 1270              		.loc 1 620 5 is_stmt 1 view .LVU385
 622:Src/app.c     ****     y0 = (int)hand->pKps[i].y;
 1271              		.loc 1 622 25 is_stmt 0 view .LVU386
 1272 0098 A269     		ldr	r2, [r4, #24]
 620:Src/app.c     **** 
 1273              		.loc 1 620 62 discriminator 3 view .LVU387
 1274 009a 36F00203 		bics	r3, r6, #2
 622:Src/app.c     ****     y0 = (int)hand->pKps[i].y;
 1275              		.loc 1 622 25 view .LVU388
 1276 009e 02EBC602 		add	r2, r2, r6, lsl #3
 622:Src/app.c     ****     y0 = (int)hand->pKps[i].y;
 1277              		.loc 1 622 10 view .LVU389
 1278 00a2 D2ED007A 		vldr.32	s15, [r2]
 1279 00a6 FDEEE77A 		vcvt.s32.f32	s15, s15
 1280 00aa CDED027A 		vstr.32	s15, [sp, #8]	@ int
 623:Src/app.c     ****     clamp_point(&x0, &y0);
 1281              		.loc 1 623 10 view .LVU390
 1282 00ae D2ED017A 		vldr.32	s15, [r2, #4]
 620:Src/app.c     **** 
ARM GAS  /tmp/cc2qXJ00.s 			page 54


 1283              		.loc 1 620 62 discriminator 3 view .LVU391
 1284 00b2 0CBF     		ite	eq
 1285 00b4 C146     		moveq	r9, r8
 1286 00b6 B946     		movne	r9, r7
 1287              	.LVL93:
 622:Src/app.c     ****     y0 = (int)hand->pKps[i].y;
 1288              		.loc 1 622 5 is_stmt 1 view .LVU392
 623:Src/app.c     ****     clamp_point(&x0, &y0);
 1289              		.loc 1 623 5 view .LVU393
 623:Src/app.c     ****     clamp_point(&x0, &y0);
 1290              		.loc 1 623 10 is_stmt 0 view .LVU394
 1291 00b8 FDEEE77A 		vcvt.s32.f32	s15, s15
 624:Src/app.c     ****     UTIL_LCD_FillCircle(x0, y0, 2, color);
 1292              		.loc 1 624 5 view .LVU395
 1293 00bc 03A9     		add	r1, sp, #12
 1294 00be 02A8     		add	r0, sp, #8
 623:Src/app.c     ****     clamp_point(&x0, &y0);
 1295              		.loc 1 623 10 view .LVU396
 1296 00c0 CDED037A 		vstr.32	s15, [sp, #12]	@ int
 624:Src/app.c     ****     UTIL_LCD_FillCircle(x0, y0, 2, color);
 1297              		.loc 1 624 5 is_stmt 1 view .LVU397
 1298              	.LBE135:
 619:Src/app.c     ****     uint32_t color = (i != 0 && i != 2) ? UTIL_LCD_COLOR_RED : UTIL_LCD_COLOR_BLUE;
 1299              		.loc 1 619 23 is_stmt 0 discriminator 2 view .LVU398
 1300 00c4 0136     		adds	r6, r6, #1
 1301              	.LVL94:
 1302              	.LBB136:
 624:Src/app.c     ****     UTIL_LCD_FillCircle(x0, y0, 2, color);
 1303              		.loc 1 624 5 view .LVU399
 1304 00c6 FFF7FEFF 		bl	clamp_point
 1305              	.LVL95:
 625:Src/app.c     ****   }
 1306              		.loc 1 625 5 is_stmt 1 view .LVU400
 1307 00ca DDE90201 		ldrd	r0, r1, [sp, #8]
 1308 00ce 4B46     		mov	r3, r9
 1309 00d0 0222     		movs	r2, #2
 1310 00d2 FFF7FEFF 		bl	UTIL_LCD_FillCircle
 1311              	.LVL96:
 1312              	.LBE136:
 619:Src/app.c     ****     uint32_t color = (i != 0 && i != 2) ? UTIL_LCD_COLOR_RED : UTIL_LCD_COLOR_BLUE;
 1313              		.loc 1 619 23 discriminator 2 view .LVU401
 619:Src/app.c     ****     uint32_t color = (i != 0 && i != 2) ? UTIL_LCD_COLOR_RED : UTIL_LCD_COLOR_BLUE;
 1314              		.loc 1 619 17 discriminator 1 view .LVU402
 1315 00d6 072E     		cmp	r6, #7
 1316 00d8 DED1     		bne	.L67
 1317              	.LVL97:
 619:Src/app.c     ****     uint32_t color = (i != 0 && i != 2) ? UTIL_LCD_COLOR_RED : UTIL_LCD_COLOR_BLUE;
 1318              		.loc 1 619 17 is_stmt 0 discriminator 1 view .LVU403
 1319              	.LBE134:
 1320              	.LBE133:
 741:Src/app.c     ****   }
 1321              		.loc 1 741 5 is_stmt 1 view .LVU404
 1322              	.LBB137:
 1323              	.LBI137:
 674:Src/app.c     **** {
 1324              		.loc 1 674 13 view .LVU405
 1325              	.LBB138:
ARM GAS  /tmp/cc2qXJ00.s 			page 55


 676:Src/app.c     ****   int corners[4][2];
 1326              		.loc 1 676 3 view .LVU406
 677:Src/app.c     ****   int is_clamp;
 1327              		.loc 1 677 3 view .LVU407
 678:Src/app.c     ****   int i;
 1328              		.loc 1 678 3 view .LVU408
 679:Src/app.c     **** 
 1329              		.loc 1 679 3 view .LVU409
 682:Src/app.c     **** 
 1330              		.loc 1 682 3 view .LVU410
 1331              	.LBB139:
 1332              	.LBI139:
 638:Src/app.c     **** {
 1333              		.loc 1 638 13 view .LVU411
 1334              	.LBB140:
 640:Src/app.c     ****     {-roi->w / 2, -roi->h / 2},
 1335              		.loc 1 640 3 view .LVU412
 641:Src/app.c     ****     { roi->w / 2, -roi->h / 2},
 1336              		.loc 1 641 14 is_stmt 0 view .LVU413
 1337 00da F6EE006A 		vmov.f32	s13, #5.0e-1
 641:Src/app.c     ****     { roi->w / 2, -roi->h / 2},
 1338              		.loc 1 641 6 view .LVU414
 1339 00de D4ED097A 		vldr.32	s15, [r4, #36]
 641:Src/app.c     ****     { roi->w / 2, -roi->h / 2},
 1340              		.loc 1 641 19 view .LVU415
 1341 00e2 94ED0A7A 		vldr.32	s14, [r4, #40]
 1342              	.LBB141:
 1343              	.LBB142:
 634:Src/app.c     ****   pt[1] = sin(rotation) * x + cos(rotation) * y;
 1344              		.loc 1 634 11 view .LVU416
 1345 00e6 94ED0B9A 		vldr.32	s18, [r4, #44]
 1346              	.LBE142:
 1347              	.LBE141:
 641:Src/app.c     ****     { roi->w / 2, -roi->h / 2},
 1348              		.loc 1 641 14 view .LVU417
 1349 00ea 67EEE67A 		vnmul.f32	s15, s15, s13
 1350              	.LVL98:
 641:Src/app.c     ****     { roi->w / 2, -roi->h / 2},
 1351              		.loc 1 641 27 view .LVU418
 1352 00ee 27EE667A 		vnmul.f32	s14, s14, s13
 1353              	.LVL99:
 1354              	.LBB148:
 1355              	.LBB143:
 634:Src/app.c     ****   pt[1] = sin(rotation) * x + cos(rotation) * y;
 1356              		.loc 1 634 11 view .LVU419
 1357 00f2 B7EEC99A 		vcvt.f64.f32	d9, s18
 1358 00f6 B1EE676A 		vneg.f32	s12, s15
 1359              	.LVL100:
 634:Src/app.c     ****   pt[1] = sin(rotation) * x + cos(rotation) * y;
 1360              		.loc 1 634 11 view .LVU420
 1361 00fa F1EE476A 		vneg.f32	s13, s14
 1362              	.LVL101:
 634:Src/app.c     ****   pt[1] = sin(rotation) * x + cos(rotation) * y;
 1363              		.loc 1 634 11 view .LVU421
 1364              	.LBE143:
 1365              	.LBE148:
 646:Src/app.c     **** 
ARM GAS  /tmp/cc2qXJ00.s 			page 56


 1366              		.loc 1 646 3 is_stmt 1 view .LVU422
 648:Src/app.c     ****   /* rotate */
 1367              		.loc 1 648 3 view .LVU423
 1368              	.LBB149:
 1369              	.LBB144:
 634:Src/app.c     ****   pt[1] = sin(rotation) * x + cos(rotation) * y;
 1370              		.loc 1 634 11 is_stmt 0 view .LVU424
 1371 00fe B0EE490B 		vmov.f64	d0, d9
 1372              	.LBE144:
 1373              	.LBE149:
 648:Src/app.c     ****   /* rotate */
 1374              		.loc 1 648 3 view .LVU425
 1375 0102 CDED047A 		vstr.32	s15, [sp, #16]
 1376 0106 8DED057A 		vstr.32	s14, [sp, #20]
 1377 010a 8DED066A 		vstr.32	s12, [sp, #24]
 1378 010e 8DED077A 		vstr.32	s14, [sp, #28]
 1379 0112 8DED086A 		vstr.32	s12, [sp, #32]
 1380 0116 CDED096A 		vstr.32	s13, [sp, #36]
 1381 011a CDED0A7A 		vstr.32	s15, [sp, #40]
 1382 011e CDED0B6A 		vstr.32	s13, [sp, #44]
 650:Src/app.c     ****     rotate_point(corners[i], roi->rotation);
 1383              		.loc 1 650 3 is_stmt 1 view .LVU426
 1384              	.LVL102:
 650:Src/app.c     ****     rotate_point(corners[i], roi->rotation);
 1385              		.loc 1 650 17 discriminator 1 view .LVU427
 1386              	.LBB150:
 1387              	.LBB145:
 634:Src/app.c     ****   pt[1] = sin(rotation) * x + cos(rotation) * y;
 1388              		.loc 1 634 11 is_stmt 0 view .LVU428
 1389 0122 FFF7FEFF 		bl	cos
 1390              	.LVL103:
 634:Src/app.c     ****   pt[1] = sin(rotation) * x + cos(rotation) * y;
 1391              		.loc 1 634 11 view .LVU429
 1392 0126 B0EE408B 		vmov.f64	d8, d0
 634:Src/app.c     ****   pt[1] = sin(rotation) * x + cos(rotation) * y;
 1393              		.loc 1 634 31 discriminator 1 view .LVU430
 1394 012a B0EE490B 		vmov.f64	d0, d9
 1395 012e FFF7FEFF 		bl	sin
 1396              	.LVL104:
 1397              	.LBE145:
 1398              	.LBE150:
 650:Src/app.c     ****     rotate_point(corners[i], roi->rotation);
 1399              		.loc 1 650 10 view .LVU431
 1400 0132 4FF0040E 		mov	lr, #4
 1401 0136 0DF11009 		add	r9, sp, #16
 1402              	.LVL105:
 1403              	.LBB151:
 1404              	.LBB146:
 634:Src/app.c     ****   pt[1] = sin(rotation) * x + cos(rotation) * y;
 1405              		.loc 1 634 31 discriminator 1 view .LVU432
 1406 013a 4B46     		mov	r3, r9
 1407              	.LBE146:
 1408              	.LBE151:
 650:Src/app.c     ****     rotate_point(corners[i], roi->rotation);
 1409              		.loc 1 650 10 view .LVU433
 1410 013c 4EF001E0 		dls	lr, lr
 1411              	.LVL106:
ARM GAS  /tmp/cc2qXJ00.s 			page 57


 1412              	.L68:
 651:Src/app.c     **** 
 1413              		.loc 1 651 5 is_stmt 1 view .LVU434
 1414              	.LBB152:
 1415              	.LBI141:
 629:Src/app.c     **** {
 1416              		.loc 1 629 13 view .LVU435
 1417              	.LBB147:
 631:Src/app.c     ****   float y = pt[1];
 1418              		.loc 1 631 3 view .LVU436
 632:Src/app.c     **** 
 1419              		.loc 1 632 3 view .LVU437
 634:Src/app.c     ****   pt[1] = sin(rotation) * x + cos(rotation) * y;
 1420              		.loc 1 634 3 view .LVU438
 634:Src/app.c     ****   pt[1] = sin(rotation) * x + cos(rotation) * y;
 1421              		.loc 1 634 45 is_stmt 0 discriminator 2 view .LVU439
 1422 0140 93ED017A 		vldr.32	s14, [r3, #4]
 634:Src/app.c     ****   pt[1] = sin(rotation) * x + cos(rotation) * y;
 1423              		.loc 1 634 25 discriminator 1 view .LVU440
 1424 0144 93ED005A 		vldr.32	s10, [r3]
 634:Src/app.c     ****   pt[1] = sin(rotation) * x + cos(rotation) * y;
 1425              		.loc 1 634 45 discriminator 2 view .LVU441
 1426 0148 B7EEC77A 		vcvt.f64.f32	d7, s14
 634:Src/app.c     ****   pt[1] = sin(rotation) * x + cos(rotation) * y;
 1427              		.loc 1 634 25 discriminator 1 view .LVU442
 1428 014c B7EEC55A 		vcvt.f64.f32	d5, s10
 634:Src/app.c     ****   pt[1] = sin(rotation) * x + cos(rotation) * y;
 1429              		.loc 1 634 29 discriminator 2 view .LVU443
 1430 0150 27EE406B 		vnmul.f64	d6, d7, d0
 635:Src/app.c     **** }
 1431              		.loc 1 635 45 discriminator 2 view .LVU444
 1432 0154 28EE077B 		vmul.f64	d7, d8, d7
 634:Src/app.c     ****   pt[1] = sin(rotation) * x + cos(rotation) * y;
 1433              		.loc 1 634 29 discriminator 2 view .LVU445
 1434 0158 A8EE056B 		vfma.f64	d6, d8, d5
 635:Src/app.c     **** }
 1435              		.loc 1 635 29 discriminator 2 view .LVU446
 1436 015c A5EE007B 		vfma.f64	d7, d5, d0
 634:Src/app.c     ****   pt[1] = sin(rotation) * x + cos(rotation) * y;
 1437              		.loc 1 634 29 discriminator 2 view .LVU447
 1438 0160 B7EEC66B 		vcvt.f32.f64	s12, d6
 635:Src/app.c     **** }
 1439              		.loc 1 635 29 discriminator 2 view .LVU448
 1440 0164 B7EEC77B 		vcvt.f32.f64	s14, d7
 634:Src/app.c     ****   pt[1] = sin(rotation) * x + cos(rotation) * y;
 1441              		.loc 1 634 29 discriminator 2 view .LVU449
 1442 0168 83ED006A 		vstr.32	s12, [r3]
 1443              	.LVL107:
 635:Src/app.c     **** }
 1444              		.loc 1 635 3 is_stmt 1 view .LVU450
 635:Src/app.c     **** }
 1445              		.loc 1 635 29 is_stmt 0 discriminator 2 view .LVU451
 1446 016c 83ED017A 		vstr.32	s14, [r3, #4]
 1447              	.LVL108:
 635:Src/app.c     **** }
 1448              		.loc 1 635 29 discriminator 2 view .LVU452
 1449              	.LBE147:
ARM GAS  /tmp/cc2qXJ00.s 			page 58


 1450              	.LBE152:
 650:Src/app.c     ****     rotate_point(corners[i], roi->rotation);
 1451              		.loc 1 650 23 is_stmt 1 discriminator 3 view .LVU453
 650:Src/app.c     ****     rotate_point(corners[i], roi->rotation);
 1452              		.loc 1 650 17 discriminator 1 view .LVU454
 1453 0170 0833     		adds	r3, r3, #8
 1454 0172 0FF01BC8 		le	lr, .L68
 654:Src/app.c     ****     corners[i][0] += roi->cx;
 1455              		.loc 1 654 10 is_stmt 0 view .LVU455
 1456 0176 4FF0040E 		mov	lr, #4
 655:Src/app.c     ****     corners[i][1] += roi->cy;
 1457              		.loc 1 655 25 view .LVU456
 1458 017a D4ED076A 		vldr.32	s13, [r4, #28]
 656:Src/app.c     ****   }
 1459              		.loc 1 656 25 view .LVU457
 1460 017e 94ED087A 		vldr.32	s14, [r4, #32]
 654:Src/app.c     ****     corners[i][0] += roi->cx;
 1461              		.loc 1 654 10 view .LVU458
 1462 0182 4EF001E0 		dls	lr, lr
 656:Src/app.c     ****   }
 1463              		.loc 1 656 25 view .LVU459
 1464 0186 04AB     		add	r3, sp, #16
 1465              	.L69:
 655:Src/app.c     ****     corners[i][1] += roi->cy;
 1466              		.loc 1 655 5 is_stmt 1 view .LVU460
 655:Src/app.c     ****     corners[i][1] += roi->cy;
 1467              		.loc 1 655 19 is_stmt 0 view .LVU461
 1468 0188 D3ED007A 		vldr.32	s15, [r3]
 1469 018c 77EEA67A 		vadd.f32	s15, s15, s13
 1470 0190 C3ED007A 		vstr.32	s15, [r3]
 656:Src/app.c     ****   }
 1471              		.loc 1 656 5 is_stmt 1 view .LVU462
 656:Src/app.c     ****   }
 1472              		.loc 1 656 19 is_stmt 0 view .LVU463
 1473 0194 D3ED017A 		vldr.32	s15, [r3, #4]
 1474 0198 77EE877A 		vadd.f32	s15, s15, s14
 654:Src/app.c     ****     corners[i][0] += roi->cx;
 1475              		.loc 1 654 17 discriminator 1 view .LVU464
 1476 019c 0833     		adds	r3, r3, #8
 656:Src/app.c     ****   }
 1477              		.loc 1 656 19 view .LVU465
 1478 019e 43ED017A 		vstr.32	s15, [r3, #-4]
 654:Src/app.c     ****     corners[i][0] += roi->cx;
 1479              		.loc 1 654 23 is_stmt 1 discriminator 3 view .LVU466
 654:Src/app.c     ****     corners[i][0] += roi->cx;
 1480              		.loc 1 654 17 discriminator 1 view .LVU467
 1481 01a2 0FF00FC8 		le	lr, .L69
 1482              	.LBE140:
 1483              	.LBE139:
 1484              	.LBB154:
 1485              	.LBB155:
 662:Src/app.c     ****   int i;
 1486              		.loc 1 662 7 is_stmt 0 view .LVU468
 1487 01a6 0026     		movs	r6, #0
 662:Src/app.c     ****   int i;
 1488              		.loc 1 662 7 view .LVU469
 1489 01a8 0CAF     		add	r7, sp, #48
ARM GAS  /tmp/cc2qXJ00.s 			page 59


 1490              	.LBE155:
 1491              	.LBE154:
 1492              	.LBB157:
 1493              	.LBB153:
 654:Src/app.c     ****     corners[i][0] += roi->cx;
 1494              		.loc 1 654 17 discriminator 1 view .LVU470
 1495 01aa B846     		mov	r8, r7
 1496              	.LBE153:
 1497              	.LBE157:
 1498              	.LBB158:
 1499              	.LBB156:
 665:Src/app.c     ****     corners_out[i][0] = (int)corners_in[i][0];
 1500              		.loc 1 665 10 view .LVU471
 1501 01ac B246     		mov	r10, r6
 1502              	.LVL109:
 1503              	.L70:
 666:Src/app.c     ****     corners_out[i][1] = (int)corners_in[i][1];
 1504              		.loc 1 666 5 is_stmt 1 view .LVU472
 666:Src/app.c     ****     corners_out[i][1] = (int)corners_in[i][1];
 1505              		.loc 1 666 25 is_stmt 0 view .LVU473
 1506 01ae D9ED007A 		vldr.32	s15, [r9]
 1507 01b2 FDEEE77A 		vcvt.s32.f32	s15, s15
 1508 01b6 C8ED007A 		vstr.32	s15, [r8]	@ int
 667:Src/app.c     ****     is_clamp |= clamp_point(&corners_out[i][0], &corners_out[i][1]);
 1509              		.loc 1 667 5 is_stmt 1 view .LVU474
 667:Src/app.c     ****     is_clamp |= clamp_point(&corners_out[i][0], &corners_out[i][1]);
 1510              		.loc 1 667 25 is_stmt 0 view .LVU475
 1511 01ba D9ED017A 		vldr.32	s15, [r9, #4]
 1512 01be FDEEE77A 		vcvt.s32.f32	s15, s15
 1513 01c2 4146     		mov	r1, r8
 1514 01c4 17EE903A 		vmov	r3, s15	@ int
 668:Src/app.c     ****   }
 1515              		.loc 1 668 17 view .LVU476
 1516 01c8 4046     		mov	r0, r8
 667:Src/app.c     ****     is_clamp |= clamp_point(&corners_out[i][0], &corners_out[i][1]);
 1517              		.loc 1 667 25 view .LVU477
 1518 01ca 41F8043F 		str	r3, [r1, #4]!
 668:Src/app.c     ****   }
 1519              		.loc 1 668 5 is_stmt 1 view .LVU478
 668:Src/app.c     ****   }
 1520              		.loc 1 668 17 is_stmt 0 view .LVU479
 1521 01ce FFF7FEFF 		bl	clamp_point
 1522              	.LVL110:
 665:Src/app.c     ****     corners_out[i][0] = (int)corners_in[i][0];
 1523              		.loc 1 665 23 discriminator 3 view .LVU480
 1524 01d2 0AF1010A 		add	r10, r10, #1
 1525              	.LVL111:
 665:Src/app.c     ****     corners_out[i][0] = (int)corners_in[i][0];
 1526              		.loc 1 665 17 discriminator 1 view .LVU481
 1527 01d6 BAF1040F 		cmp	r10, #4
 668:Src/app.c     ****   }
 1528              		.loc 1 668 14 discriminator 1 view .LVU482
 1529 01da 46EA0006 		orr	r6, r6, r0
 1530              	.LVL112:
 665:Src/app.c     ****     corners_out[i][0] = (int)corners_in[i][0];
 1531              		.loc 1 665 23 is_stmt 1 discriminator 3 view .LVU483
 665:Src/app.c     ****     corners_out[i][0] = (int)corners_in[i][0];
ARM GAS  /tmp/cc2qXJ00.s 			page 60


 1532              		.loc 1 665 17 discriminator 1 view .LVU484
 1533 01de 09F10809 		add	r9, r9, #8
 1534 01e2 08F10808 		add	r8, r8, #8
 1535 01e6 E2D1     		bne	.L70
 671:Src/app.c     **** }
 1536              		.loc 1 671 3 view .LVU485
 1537              	.LVL113:
 671:Src/app.c     **** }
 1538              		.loc 1 671 3 is_stmt 0 view .LVU486
 1539              	.LBE156:
 1540              	.LBE158:
 686:Src/app.c     ****     return ;
 1541              		.loc 1 686 3 is_stmt 1 view .LVU487
 686:Src/app.c     ****     return ;
 1542              		.loc 1 686 6 is_stmt 0 view .LVU488
 1543 01e8 96B9     		cbnz	r6, .L65
 691:Src/app.c     ****                       UTIL_LCD_COLOR_RED);
 1544              		.loc 1 691 5 view .LVU489
 1545 01ea DFF84480 		ldr	r8, .L85
 1546              	.LVL114:
 1547              	.L71:
 691:Src/app.c     ****                       UTIL_LCD_COLOR_RED);
 1548              		.loc 1 691 5 is_stmt 1 view .LVU490
 691:Src/app.c     ****                       UTIL_LCD_COLOR_RED);
 1549              		.loc 1 691 64 is_stmt 0 view .LVU491
 1550 01ee 0136     		adds	r6, r6, #1
 1551              	.LVL115:
 691:Src/app.c     ****                       UTIL_LCD_COLOR_RED);
 1552              		.loc 1 691 98 view .LVU492
 1553 01f0 14AB     		add	r3, sp, #80
 691:Src/app.c     ****                       UTIL_LCD_COLOR_RED);
 1554              		.loc 1 691 69 view .LVU493
 1555 01f2 06F00302 		and	r2, r6, #3
 691:Src/app.c     ****                       UTIL_LCD_COLOR_RED);
 1556              		.loc 1 691 5 view .LVU494
 1557 01f6 CDF80080 		str	r8, [sp]
 691:Src/app.c     ****                       UTIL_LCD_COLOR_RED);
 1558              		.loc 1 691 98 view .LVU495
 1559 01fa 03EBC202 		add	r2, r3, r2, lsl #3
 691:Src/app.c     ****                       UTIL_LCD_COLOR_RED);
 1560              		.loc 1 691 5 view .LVU496
 1561 01fe 7968     		ldr	r1, [r7, #4]
 1562 0200 52E90823 		ldrd	r2, r3, [r2, #-32]
 1563 0204 57F8080B 		ldr	r0, [r7], #8
 1564 0208 FFF7FEFF 		bl	UTIL_LCD_DrawLine
 1565              	.LVL116:
 690:Src/app.c     ****     UTIL_LCD_DrawLine(corners[i][0], corners[i][1], corners[(i + 1) % 4][0], corners[(i + 1) % 4][1
 1566              		.loc 1 690 23 is_stmt 1 discriminator 3 view .LVU497
 690:Src/app.c     ****     UTIL_LCD_DrawLine(corners[i][0], corners[i][1], corners[(i + 1) % 4][0], corners[(i + 1) % 4][1
 1567              		.loc 1 690 17 discriminator 1 view .LVU498
 1568 020c 042E     		cmp	r6, #4
 1569 020e EED1     		bne	.L71
 1570              	.LVL117:
 1571              	.L65:
 690:Src/app.c     ****     UTIL_LCD_DrawLine(corners[i][0], corners[i][1], corners[(i + 1) % 4][0], corners[(i + 1) % 4][1
 1572              		.loc 1 690 17 is_stmt 0 discriminator 1 view .LVU499
 1573              	.LBE138:
ARM GAS  /tmp/cc2qXJ00.s 			page 61


 1574              	.LBE137:
 743:Src/app.c     ****     display_ld_hand(hand);
 1575              		.loc 1 743 3 is_stmt 1 view .LVU500
 743:Src/app.c     ****     display_ld_hand(hand);
 1576              		.loc 1 743 6 is_stmt 0 view .LVU501
 1577 0210 6B69     		ldr	r3, [r5, #20]
 1578 0212 3BB1     		cbz	r3, .L64
 744:Src/app.c     **** }
 1579              		.loc 1 744 5 is_stmt 1 view .LVU502
 1580 0214 2046     		mov	r0, r4
 745:Src/app.c     **** 
 1581              		.loc 1 745 1 is_stmt 0 view .LVU503
 1582 0216 14B0     		add	sp, sp, #80
 1583              		.cfi_remember_state
 1584              		.cfi_def_cfa_offset 48
 1585              		@ sp needed
 1586 0218 BDEC048B 		vldm	sp!, {d8-d9}
 1587              		.cfi_restore 82
 1588              		.cfi_restore 83
 1589              		.cfi_restore 80
 1590              		.cfi_restore 81
 1591              		.cfi_def_cfa_offset 32
 1592 021c BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 1593              		.cfi_restore 14
 1594              		.cfi_restore 10
 1595              		.cfi_restore 9
 1596              		.cfi_restore 8
 1597              		.cfi_restore 7
 1598              		.cfi_restore 6
 1599              		.cfi_restore 5
 1600              		.cfi_restore 4
 1601              		.cfi_def_cfa_offset 0
 1602              	.LVL118:
 744:Src/app.c     **** }
 1603              		.loc 1 744 5 view .LVU504
 1604 0220 FFF7FEBF 		b	display_ld_hand
 1605              	.LVL119:
 1606              	.L64:
 1607              		.cfi_restore_state
 745:Src/app.c     **** 
 1608              		.loc 1 745 1 view .LVU505
 1609 0224 14B0     		add	sp, sp, #80
 1610              		.cfi_def_cfa_offset 48
 1611              		@ sp needed
 1612 0226 BDEC048B 		vldm	sp!, {d8-d9}
 1613              		.cfi_restore 82
 1614              		.cfi_restore 83
 1615              		.cfi_restore 80
 1616              		.cfi_restore 81
 1617              		.cfi_def_cfa_offset 32
 1618 022a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1619              	.LVL120:
 1620              	.L86:
 745:Src/app.c     **** 
 1621              		.loc 1 745 1 view .LVU506
 1622 022e 00BF     		.align	2
 1623              	.L85:
ARM GAS  /tmp/cc2qXJ00.s 			page 62


 1624 0230 0000FFFF 		.word	-65536
 1625 0234 FF0000FF 		.word	-16776961
 1626              		.cfi_endproc
 1627              	.LFE7389:
 1629              		.section	.rodata.dp_thread_fct.str1.1,"aMS",%progbits,1
 1630              	.LC6:
 1631 0000 72657420 		.ascii	"ret == HAL_OK\000"
 1631      3D3D2048 
 1631      414C5F4F 
 1631      4B00
 1632              		.global	__aeabi_ul2d
 1633              	.LC7:
 1634 000e 43707520 		.ascii	"Cpu load\000"
 1634      6C6F6164 
 1634      00
 1635              	.LC8:
 1636 0017 20202025 		.ascii	"   %.1f%%\000"
 1636      2E316625 
 1636      2500
 1637              	.LC9:
 1638 0021 496E6665 		.ascii	"Inferences\000"
 1638      72656E63 
 1638      657300
 1639              	.LC10:
 1640 002c 20706420 		.ascii	" pd %2ums\000"
 1640      2532756D 
 1640      7300
 1641              	.LC11:
 1642 0036 20686C20 		.ascii	" hl %2ums\000"
 1642      2532756D 
 1642      7300
 1643              	.LC12:
 1644 0040 2020252E 		.ascii	"  %.1f FPS\000"
 1644      31662046 
 1644      505300
 1645              		.section	.text.dp_thread_fct,"ax",%progbits
 1646              		.align	1
 1647              		.syntax unified
 1648              		.thumb
 1649              		.thumb_func
 1651              	dp_thread_fct:
 1652              	.LVL121:
 1653              	.LFB7407:
1337:Src/app.c     ****   button_t ld_toggle_button;
 1654              		.loc 1 1337 1 is_stmt 1 view -0
 1655              		.cfi_startproc
 1656              		@ args = 0, pretend = 0, frame = 288
 1657              		@ frame_needed = 0, uses_anonymous_args = 0
1338:Src/app.c     ****   button_t hd_toggle_button;
 1658              		.loc 1 1338 3 view .LVU508
1339:Src/app.c     ****   uint32_t disp_ms = 0;
 1659              		.loc 1 1339 3 view .LVU509
1340:Src/app.c     ****   display_info_t info;
 1660              		.loc 1 1340 3 view .LVU510
1341:Src/app.c     ****   uint32_t ts;
 1661              		.loc 1 1341 3 view .LVU511
1342:Src/app.c     ****   int ret;
ARM GAS  /tmp/cc2qXJ00.s 			page 63


 1662              		.loc 1 1342 3 view .LVU512
1343:Src/app.c     **** 
 1663              		.loc 1 1343 3 view .LVU513
1346:Src/app.c     ****   button_init(&hd_toggle_button, BUTTON_TAMP, on_pd_toggle_button_click, &disp);
 1664              		.loc 1 1346 3 view .LVU514
1337:Src/app.c     ****   button_t ld_toggle_button;
 1665              		.loc 1 1337 1 is_stmt 0 view .LVU515
 1666 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1667              		.cfi_def_cfa_offset 36
 1668              		.cfi_offset 4, -36
 1669              		.cfi_offset 5, -32
 1670              		.cfi_offset 6, -28
 1671              		.cfi_offset 7, -24
 1672              		.cfi_offset 8, -20
 1673              		.cfi_offset 9, -16
 1674              		.cfi_offset 10, -12
 1675              		.cfi_offset 11, -8
 1676              		.cfi_offset 14, -4
 1677              	.LBB189:
 1678              	.LBB190:
 370:Src/app.c     ****   assert(ret == BSP_ERROR_NONE);
 1679              		.loc 1 370 9 view .LVU516
 1680 0004 0021     		movs	r1, #0
 1681              	.LBE190:
 1682              	.LBE189:
1337:Src/app.c     ****   button_t ld_toggle_button;
 1683              		.loc 1 1337 1 view .LVU517
 1684 0006 2DED048B 		vpush.64	{d8, d9}
 1685              		.cfi_def_cfa_offset 52
 1686              		.cfi_offset 80, -52
 1687              		.cfi_offset 81, -48
 1688              		.cfi_offset 82, -44
 1689              		.cfi_offset 83, -40
 1690              	.LBB194:
 1691              	.LBB191:
 370:Src/app.c     ****   assert(ret == BSP_ERROR_NONE);
 1692              		.loc 1 370 9 view .LVU518
 1693 000a 0846     		mov	r0, r1
 1694              	.LVL122:
 370:Src/app.c     ****   assert(ret == BSP_ERROR_NONE);
 1695              		.loc 1 370 9 view .LVU519
 1696              	.LBE191:
 1697              	.LBE194:
1337:Src/app.c     ****   button_t ld_toggle_button;
 1698              		.loc 1 1337 1 view .LVU520
 1699 000c CBB0     		sub	sp, sp, #300
 1700              		.cfi_def_cfa_offset 352
 1701              	.LVL123:
 1702              	.LBB195:
 1703              	.LBI189:
 366:Src/app.c     **** {
 1704              		.loc 1 366 13 is_stmt 1 view .LVU521
 1705              	.LBB192:
 368:Src/app.c     **** 
 1706              		.loc 1 368 3 view .LVU522
 370:Src/app.c     ****   assert(ret == BSP_ERROR_NONE);
 1707              		.loc 1 370 3 view .LVU523
ARM GAS  /tmp/cc2qXJ00.s 			page 64


 370:Src/app.c     ****   assert(ret == BSP_ERROR_NONE);
 1708              		.loc 1 370 9 is_stmt 0 view .LVU524
 1709 000e FFF7FEFF 		bl	BSP_PB_Init
 1710              	.LVL124:
 371:Src/app.c     **** 
 1711              		.loc 1 371 3 is_stmt 1 view .LVU525
 1712 0012 0146     		mov	r1, r0
 1713 0014 08B1     		cbz	r0, .L88
 1714              	.LVL125:
 1715              	.L89:
 371:Src/app.c     **** 
 1716              		.loc 1 371 3 is_stmt 0 view .LVU526
 1717 0016 FFF7FEFF 		bl	button_init.part.0
 1718              	.LVL126:
 1719              	.L88:
 373:Src/app.c     ****   b->on_click_handler = on_click_handler;
 1720              		.loc 1 373 3 is_stmt 1 view .LVU527
 374:Src/app.c     ****   b->prev_state = 0;
 1721              		.loc 1 374 23 is_stmt 0 view .LVU528
 1722 001a 974B     		ldr	r3, .L105+8
 376:Src/app.c     **** }
 1723              		.loc 1 376 14 view .LVU529
 1724 001c 974F     		ldr	r7, .L105+12
 375:Src/app.c     ****   b->cb_args = cb_args;
 1725              		.loc 1 375 17 view .LVU530
 1726 001e CDE90403 		strd	r0, r3, [sp, #16]
 373:Src/app.c     ****   b->on_click_handler = on_click_handler;
 1727              		.loc 1 373 16 view .LVU531
 1728 0022 8DF80C00 		strb	r0, [sp, #12]
 374:Src/app.c     ****   b->prev_state = 0;
 1729              		.loc 1 374 3 is_stmt 1 view .LVU532
 376:Src/app.c     **** }
 1730              		.loc 1 376 3 view .LVU533
 1731              	.LBE192:
 1732              	.LBE195:
 1733              	.LBB196:
 1734              	.LBB197:
 370:Src/app.c     ****   assert(ret == BSP_ERROR_NONE);
 1735              		.loc 1 370 9 is_stmt 0 view .LVU534
 1736 0026 0120     		movs	r0, #1
 1737              	.LVL127:
 370:Src/app.c     ****   assert(ret == BSP_ERROR_NONE);
 1738              		.loc 1 370 9 view .LVU535
 1739              	.LBE197:
 1740              	.LBE196:
 1741              	.LBB201:
 1742              	.LBB193:
 376:Src/app.c     **** }
 1743              		.loc 1 376 14 view .LVU536
 1744 0028 0697     		str	r7, [sp, #24]
 1745              	.LVL128:
 376:Src/app.c     **** }
 1746              		.loc 1 376 14 view .LVU537
 1747              	.LBE193:
 1748              	.LBE201:
1347:Src/app.c     **** #else
 1749              		.loc 1 1347 3 is_stmt 1 view .LVU538
ARM GAS  /tmp/cc2qXJ00.s 			page 65


 1750              	.LBB202:
 1751              	.LBI196:
 366:Src/app.c     **** {
 1752              		.loc 1 366 13 view .LVU539
 1753              	.LBB198:
 368:Src/app.c     **** 
 1754              		.loc 1 368 3 view .LVU540
 370:Src/app.c     ****   assert(ret == BSP_ERROR_NONE);
 1755              		.loc 1 370 3 view .LVU541
 370:Src/app.c     ****   assert(ret == BSP_ERROR_NONE);
 1756              		.loc 1 370 9 is_stmt 0 view .LVU542
 1757 002a FFF7FEFF 		bl	BSP_PB_Init
 1758              	.LVL129:
 371:Src/app.c     **** 
 1759              		.loc 1 371 3 is_stmt 1 view .LVU543
 1760 002e 0028     		cmp	r0, #0
 1761 0030 F1D1     		bne	.L89
 373:Src/app.c     ****   b->on_click_handler = on_click_handler;
 1762              		.loc 1 373 3 view .LVU544
 373:Src/app.c     ****   b->on_click_handler = on_click_handler;
 1763              		.loc 1 373 16 is_stmt 0 view .LVU545
 1764 0032 0123     		movs	r3, #1
 1765              	.LBE198:
 1766              	.LBE202:
1340:Src/app.c     ****   display_info_t info;
 1767              		.loc 1 1340 12 view .LVU546
 1768 0034 0446     		mov	r4, r0
 1769              	.LBB203:
 1770              	.LBB204:
 1771              	.LBB205:
 1772              	.LBB206:
 417:Src/app.c     ****                      (cpu_load->history[2].total - cpu_load->history[3].total);
 1773              		.loc 1 417 35 view .LVU547
 1774 0036 9FED8E9B 		vldr.64	d9, .L105
 1775              	.LBE206:
 1776              	.LBE205:
 1777              	.LBE204:
 1778              	.LBE203:
 1779              	.LBB216:
 1780              	.LBB199:
 373:Src/app.c     ****   b->on_click_handler = on_click_handler;
 1781              		.loc 1 373 16 view .LVU548
 1782 003a 8DF81C30 		strb	r3, [sp, #28]
 374:Src/app.c     ****   b->prev_state = 0;
 1783              		.loc 1 374 3 is_stmt 1 view .LVU549
 374:Src/app.c     ****   b->prev_state = 0;
 1784              		.loc 1 374 23 is_stmt 0 view .LVU550
 1785 003e 904B     		ldr	r3, .L105+16
 1786              	.LBE199:
 1787              	.LBE216:
 1788              	.LBB217:
 1789              	.LBB218:
1296:Src/app.c     ****   assert(ret == HAL_OK);
 1790              		.loc 1 1296 47 view .LVU551
 1791 0040 DFF88492 		ldr	r9, .L105+88
 1792              	.LBE218:
 1793              	.LBE217:
ARM GAS  /tmp/cc2qXJ00.s 			page 66


 1794              	.LBB224:
 1795              	.LBB200:
 375:Src/app.c     ****   b->cb_args = cb_args;
 1796              		.loc 1 375 17 view .LVU552
 1797 0044 CDE90803 		strd	r0, r3, [sp, #32]
 376:Src/app.c     **** }
 1798              		.loc 1 376 3 is_stmt 1 view .LVU553
 376:Src/app.c     **** }
 1799              		.loc 1 376 14 is_stmt 0 view .LVU554
 1800 0048 0A97     		str	r7, [sp, #40]
 1801              	.LVL130:
 1802              	.L99:
 376:Src/app.c     **** }
 1803              		.loc 1 376 14 view .LVU555
 1804              	.LBE200:
 1805              	.LBE224:
1352:Src/app.c     ****   {
 1806              		.loc 1 1352 3 is_stmt 1 view .LVU556
1354:Src/app.c     ****     assert(ret == pdTRUE);
 1807              		.loc 1 1354 5 view .LVU557
1354:Src/app.c     ****     assert(ret == pdTRUE);
 1808              		.loc 1 1354 11 is_stmt 0 view .LVU558
 1809 004a 4FF0FF31 		mov	r1, #-1
 1810 004e 3868     		ldr	r0, [r7]
 1811 0050 FFF7FEFF 		bl	xQueueSemaphoreTake
 1812              	.LVL131:
1355:Src/app.c     **** 
 1813              		.loc 1 1355 5 is_stmt 1 view .LVU559
 1814 0054 0128     		cmp	r0, #1
 1815 0056 06D0     		beq	.L90
1355:Src/app.c     **** 
 1816              		.loc 1 1355 5 is_stmt 0 discriminator 1 view .LVU560
 1817 0058 40F24B51 		movw	r1, #1355
 1818 005c 894B     		ldr	r3, .L105+20
 1819 005e 8A4A     		ldr	r2, .L105+24
 1820              	.LVL132:
 1821              	.L104:
1361:Src/app.c     ****     info = disp.info;
 1822              		.loc 1 1361 5 discriminator 1 view .LVU561
 1823 0060 8A48     		ldr	r0, .L105+28
 1824 0062 FFF7FEFF 		bl	__assert_func
 1825              	.LVL133:
 1826              	.L90:
1357:Src/app.c     ****     button_process(&hd_toggle_button);
 1827              		.loc 1 1357 5 is_stmt 1 view .LVU562
 1828 0066 03A8     		add	r0, sp, #12
 1829              	.LVL134:
1357:Src/app.c     ****     button_process(&hd_toggle_button);
 1830              		.loc 1 1357 5 is_stmt 0 view .LVU563
 1831 0068 FFF7FEFF 		bl	button_process
 1832              	.LVL135:
1358:Src/app.c     **** 
 1833              		.loc 1 1358 5 is_stmt 1 view .LVU564
 1834 006c 07A8     		add	r0, sp, #28
 1835 006e FFF7FEFF 		bl	button_process
 1836              	.LVL136:
1360:Src/app.c     ****     assert(ret == pdTRUE);
ARM GAS  /tmp/cc2qXJ00.s 			page 67


 1837              		.loc 1 1360 5 view .LVU565
1360:Src/app.c     ****     assert(ret == pdTRUE);
 1838              		.loc 1 1360 11 is_stmt 0 view .LVU566
 1839 0072 4FF0FF31 		mov	r1, #-1
 1840 0076 786D     		ldr	r0, [r7, #84]
 1841 0078 FFF7FEFF 		bl	xQueueSemaphoreTake
 1842              	.LVL137:
1361:Src/app.c     ****     info = disp.info;
 1843              		.loc 1 1361 5 is_stmt 1 view .LVU567
 1844 007c 0128     		cmp	r0, #1
 1845 007e 04D0     		beq	.L91
1361:Src/app.c     ****     info = disp.info;
 1846              		.loc 1 1361 5 is_stmt 0 discriminator 1 view .LVU568
 1847 0080 40F25151 		movw	r1, #1361
 1848 0084 7F4B     		ldr	r3, .L105+20
 1849 0086 804A     		ldr	r2, .L105+24
 1850 0088 EAE7     		b	.L104
 1851              	.L91:
1362:Src/app.c     ****     ret = xSemaphoreGive(disp.lock);
 1852              		.loc 1 1362 5 is_stmt 1 view .LVU569
1362:Src/app.c     ****     ret = xSemaphoreGive(disp.lock);
 1853              		.loc 1 1362 10 is_stmt 0 view .LVU570
 1854 008a FC22     		movs	r2, #252
 1855 008c 8049     		ldr	r1, .L105+32
 1856 008e 0BA8     		add	r0, sp, #44
 1857              	.LVL138:
1362:Src/app.c     ****     ret = xSemaphoreGive(disp.lock);
 1858              		.loc 1 1362 10 view .LVU571
 1859 0090 FFF7FEFF 		bl	memcpy
 1860              	.LVL139:
1363:Src/app.c     ****     assert(ret == pdTRUE);
 1861              		.loc 1 1363 5 is_stmt 1 view .LVU572
1363:Src/app.c     ****     assert(ret == pdTRUE);
 1862              		.loc 1 1363 11 is_stmt 0 view .LVU573
 1863 0094 0023     		movs	r3, #0
 1864 0096 786D     		ldr	r0, [r7, #84]
 1865 0098 1A46     		mov	r2, r3
 1866 009a 1946     		mov	r1, r3
 1867 009c FFF7FEFF 		bl	xQueueGenericSend
 1868              	.LVL140:
1364:Src/app.c     ****     info.disp_ms = disp_ms;
 1869              		.loc 1 1364 5 view .LVU574
 1870 00a0 0128     		cmp	r0, #1
1363:Src/app.c     ****     assert(ret == pdTRUE);
 1871              		.loc 1 1363 11 view .LVU575
 1872 00a2 0546     		mov	r5, r0
 1873              	.LVL141:
1364:Src/app.c     ****     info.disp_ms = disp_ms;
 1874              		.loc 1 1364 5 is_stmt 1 view .LVU576
 1875 00a4 04D0     		beq	.L92
1364:Src/app.c     ****     info.disp_ms = disp_ms;
 1876              		.loc 1 1364 5 is_stmt 0 discriminator 1 view .LVU577
 1877 00a6 40F25451 		movw	r1, #1364
 1878 00aa 764B     		ldr	r3, .L105+20
 1879 00ac 764A     		ldr	r2, .L105+24
 1880 00ae D7E7     		b	.L104
 1881              	.L92:
ARM GAS  /tmp/cc2qXJ00.s 			page 68


1365:Src/app.c     **** 
 1882              		.loc 1 1365 5 is_stmt 1 view .LVU578
1365:Src/app.c     **** 
 1883              		.loc 1 1365 18 is_stmt 0 view .LVU579
 1884 00b0 0F94     		str	r4, [sp, #60]
1367:Src/app.c     ****     dp_update_drawing_area();
 1885              		.loc 1 1367 5 is_stmt 1 view .LVU580
1367:Src/app.c     ****     dp_update_drawing_area();
 1886              		.loc 1 1367 10 is_stmt 0 view .LVU581
 1887 00b2 FFF7FEFF 		bl	HAL_GetTick
 1888              	.LVL142:
1367:Src/app.c     ****     dp_update_drawing_area();
 1889              		.loc 1 1367 10 view .LVU582
 1890 00b6 8246     		mov	r10, r0
 1891              	.LVL143:
1368:Src/app.c     ****     Display_NetworkOutput(&info);
 1892              		.loc 1 1368 5 is_stmt 1 view .LVU583
 1893              	.LBB225:
 1894              	.LBI217:
1291:Src/app.c     **** {
 1895              		.loc 1 1291 13 view .LVU584
 1896              	.LBB223:
1293:Src/app.c     **** 
 1897              		.loc 1 1293 3 view .LVU585
1295:Src/app.c     ****   ret = SCRL_SetAddress_NoReload(lcd_fg_buffer[lcd_fg_buffer_rd_idx], SCRL_LAYER_1);
 1898              		.loc 1 1295 3 view .LVU586
 1899              	.LBB219:
 1900              	.LBI219:
 1901              		.file 2 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h"
   1:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
ARM GAS  /tmp/cc2qXJ00.s 			page 69


  29:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc2qXJ00.s 			page 70


  86:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
ARM GAS  /tmp/cc2qXJ00.s 			page 71


 143:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
ARM GAS  /tmp/cc2qXJ00.s 			page 72


 200:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
ARM GAS  /tmp/cc2qXJ00.s 			page 73


 257:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/cc2qXJ00.s 			page 74


 314:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
ARM GAS  /tmp/cc2qXJ00.s 			page 75


 371:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
ARM GAS  /tmp/cc2qXJ00.s 			page 76


 428:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc2qXJ00.s 			page 77


 485:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cc2qXJ00.s 			page 78


 542:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/cc2qXJ00.s 			page 79


 599:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc2qXJ00.s 			page 80


 656:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
ARM GAS  /tmp/cc2qXJ00.s 			page 81


 713:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc2qXJ00.s 			page 82


 770:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
ARM GAS  /tmp/cc2qXJ00.s 			page 83


 827:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
ARM GAS  /tmp/cc2qXJ00.s 			page 84


 884:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
ARM GAS  /tmp/cc2qXJ00.s 			page 85


 941:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1902              		.loc 2 960 27 view .LVU587
 1903              	.LBB220:
 961:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1904              		.loc 2 962 3 view .LVU588
 1905              		.syntax unified
 1906              	@ 962 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1907 00b8 72B6     		cpsid i
 1908              	@ 0 "" 2
 1909              		.thumb
 1910              		.syntax unified
 1911              	.LBE220:
 1912              	.LBE219:
1296:Src/app.c     ****   assert(ret == HAL_OK);
 1913              		.loc 1 1296 3 view .LVU589
1296:Src/app.c     ****   assert(ret == HAL_OK);
 1914              		.loc 1 1296 47 is_stmt 0 view .LVU590
 1915 00ba DFF81082 		ldr	r8, .L105+92
 1916 00be D9F80030 		ldr	r3, [r9]
1296:Src/app.c     ****   assert(ret == HAL_OK);
 1917              		.loc 1 1296 9 view .LVU591
 1918 00c2 7448     		ldr	r0, .L105+36
 1919              	.LVL144:
1296:Src/app.c     ****   assert(ret == HAL_OK);
 1920              		.loc 1 1296 9 view .LVU592
 1921 00c4 2946     		mov	r1, r5
 1922 00c6 00FB0380 		mla	r0, r0, r3, r8
 1923 00ca FFF7FEFF 		bl	SCRL_SetAddress_NoReload
 1924              	.LVL145:
1297:Src/app.c     ****   __enable_irq();
 1925              		.loc 1 1297 3 is_stmt 1 view .LVU593
 1926 00ce 8346     		mov	fp, r0
 1927 00d0 20B1     		cbz	r0, .L93
1297:Src/app.c     ****   __enable_irq();
 1928              		.loc 1 1297 3 is_stmt 0 discriminator 1 view .LVU594
 1929 00d2 40F21151 		movw	r1, #1297
 1930 00d6 704B     		ldr	r3, .L105+40
ARM GAS  /tmp/cc2qXJ00.s 			page 86


 1931 00d8 704A     		ldr	r2, .L105+44
 1932 00da C1E7     		b	.L104
 1933              	.L93:
1298:Src/app.c     **** }
 1934              		.loc 1 1298 3 is_stmt 1 view .LVU595
 1935              	.LBB221:
 1936              	.LBI221:
 949:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1937              		.loc 2 949 27 view .LVU596
 1938              	.LBB222:
 951:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1939              		.loc 2 951 3 view .LVU597
 1940              		.syntax unified
 1941              	@ 951 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1942 00dc 62B6     		cpsie i
 1943              	@ 0 "" 2
 1944              	.LVL146:
 951:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1945              		.loc 2 951 3 is_stmt 0 view .LVU598
 1946              		.thumb
 1947              		.syntax unified
 1948              	.LBE222:
 1949              	.LBE221:
 1950              	.LBE223:
 1951              	.LBE225:
1369:Src/app.c     ****     SCB_CleanDCache_by_Addr(lcd_fg_buffer[lcd_fg_buffer_rd_idx], LCD_FG_WIDTH * LCD_FG_HEIGHT* 2);
 1952              		.loc 1 1369 5 is_stmt 1 view .LVU599
 1953              	.LBB226:
 1954              	.LBI203:
 747:Src/app.c     **** {
 1955              		.loc 1 747 13 view .LVU600
 1956              	.LBB215:
 749:Src/app.c     ****   int line_nb = 0;
 1957              		.loc 1 749 3 view .LVU601
 750:Src/app.c     ****   float nn_fps;
 1958              		.loc 1 750 3 view .LVU602
 751:Src/app.c     ****   int i;
 1959              		.loc 1 751 3 view .LVU603
 752:Src/app.c     **** 
 1960              		.loc 1 752 3 view .LVU604
 755:Src/app.c     **** 
 1961              		.loc 1 755 3 view .LVU605
 1962              	.LBB208:
 1963              	.LBB209:
 398:Src/app.c     ****   cpu_load->history[0].total = portGET_RUN_TIME_COUNTER_VALUE();
 1964              		.loc 1 398 24 is_stmt 0 view .LVU606
 1965 00de 704C     		ldr	r4, .L105+48
 1966              	.LVL147:
 398:Src/app.c     ****   cpu_load->history[0].total = portGET_RUN_TIME_COUNTER_VALUE();
 1967              		.loc 1 398 24 view .LVU607
 1968              	.LBE209:
 1969              	.LBE208:
 755:Src/app.c     **** 
 1970              		.loc 1 755 3 view .LVU608
 1971 00e0 4FF4F073 		mov	r3, #480
 1972 00e4 4FF44872 		mov	r2, #800
 1973 00e8 0146     		mov	r1, r0
ARM GAS  /tmp/cc2qXJ00.s 			page 87


 1974 00ea 0090     		str	r0, [sp]
 1975              	.LBB212:
 1976              	.LBB210:
 398:Src/app.c     ****   cpu_load->history[0].total = portGET_RUN_TIME_COUNTER_VALUE();
 1977              		.loc 1 398 24 view .LVU609
 1978 00ec 04F13805 		add	r5, r4, #56
 1979              	.LVL148:
 398:Src/app.c     ****   cpu_load->history[0].total = portGET_RUN_TIME_COUNTER_VALUE();
 1980              		.loc 1 398 24 view .LVU610
 1981 00f0 04F12006 		add	r6, r4, #32
 1982              	.LBE210:
 1983              	.LBE212:
 755:Src/app.c     **** 
 1984              		.loc 1 755 3 view .LVU611
 1985 00f4 FFF7FEFF 		bl	UTIL_LCD_FillRect
 1986              	.LVL149:
 758:Src/app.c     ****   cpuload_get_info(&cpu_load, NULL, &cpu_load_one_second, NULL);
 1987              		.loc 1 758 3 is_stmt 1 view .LVU612
 1988              	.LBB213:
 1989              	.LBI208:
 394:Src/app.c     **** {
 1990              		.loc 1 394 13 view .LVU613
 1991              	.LBB211:
 396:Src/app.c     **** 
 1992              		.loc 1 396 3 view .LVU614
 398:Src/app.c     ****   cpu_load->history[0].total = portGET_RUN_TIME_COUNTER_VALUE();
 1993              		.loc 1 398 3 view .LVU615
 398:Src/app.c     ****   cpu_load->history[0].total = portGET_RUN_TIME_COUNTER_VALUE();
 1994              		.loc 1 398 24 is_stmt 0 view .LVU616
 1995 00f8 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 1996 00fa 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1997 00fc 96E80300 		ldm	r6, {r0, r1}
 1998 0100 85E80300 		stm	r5, {r0, r1}
 399:Src/app.c     ****   cpu_load->history[0].thread = cpu_load->history[0].total - ulTaskGetIdleRunTimeCounter();
 1999              		.loc 1 399 3 is_stmt 1 view .LVU617
 399:Src/app.c     ****   cpu_load->history[0].thread = cpu_load->history[0].total - ulTaskGetIdleRunTimeCounter();
 2000              		.loc 1 399 32 is_stmt 0 view .LVU618
 2001 0104 FFF7FEFF 		bl	TIM4_Get_Value
 2002              	.LVL150:
 2003 0108 0546     		mov	r5, r0
 399:Src/app.c     ****   cpu_load->history[0].thread = cpu_load->history[0].total - ulTaskGetIdleRunTimeCounter();
 2004              		.loc 1 399 30 discriminator 1 view .LVU619
 2005 010a C4E9080B 		strd	r0, fp, [r4, #32]
 400:Src/app.c     ****   cpu_load->history[0].tick = HAL_GetTick();
 2006              		.loc 1 400 3 is_stmt 1 view .LVU620
 400:Src/app.c     ****   cpu_load->history[0].tick = HAL_GetTick();
 2007              		.loc 1 400 62 is_stmt 0 view .LVU621
 2008 010e FFF7FEFF 		bl	ulTaskGetIdleRunTimeCounter
 2009              	.LVL151:
 400:Src/app.c     ****   cpu_load->history[0].tick = HAL_GetTick();
 2010              		.loc 1 400 60 discriminator 1 view .LVU622
 2011 0112 2D1A     		subs	r5, r5, r0
 2012 0114 63EB0303 		sbc	r3, r3, r3
 400:Src/app.c     ****   cpu_load->history[0].tick = HAL_GetTick();
 2013              		.loc 1 400 31 discriminator 1 view .LVU623
 2014 0118 C4E90A53 		strd	r5, r3, [r4, #40]
 401:Src/app.c     **** 
ARM GAS  /tmp/cc2qXJ00.s 			page 88


 2015              		.loc 1 401 3 is_stmt 1 view .LVU624
 401:Src/app.c     **** 
 2016              		.loc 1 401 31 is_stmt 0 view .LVU625
 2017 011c FFF7FEFF 		bl	HAL_GetTick
 2018              	.LVL152:
 403:Src/app.c     ****     return ;
 2019              		.loc 1 403 33 view .LVU626
 2020 0120 A36C     		ldr	r3, [r4, #72]
 2021 0122 226E     		ldr	r2, [r4, #96]
 401:Src/app.c     **** 
 2022              		.loc 1 401 29 discriminator 1 view .LVU627
 2023 0124 2063     		str	r0, [r4, #48]
 403:Src/app.c     ****     return ;
 2024              		.loc 1 403 3 is_stmt 1 view .LVU628
 403:Src/app.c     ****     return ;
 2025              		.loc 1 403 33 is_stmt 0 view .LVU629
 2026 0126 9B1A     		subs	r3, r3, r2
 403:Src/app.c     ****     return ;
 2027              		.loc 1 403 6 view .LVU630
 2028 0128 B3F57A7F 		cmp	r3, #1000
 2029 012c 06D3     		bcc	.L94
 407:Src/app.c     **** }
 2030              		.loc 1 407 55 view .LVU631
 2031 012e 9022     		movs	r2, #144
 2032 0130 04F13801 		add	r1, r4, #56
 2033 0134 04F15000 		add	r0, r4, #80
 2034 0138 FFF7FEFF 		bl	memmove
 2035              	.LVL153:
 2036              	.L94:
 407:Src/app.c     **** }
 2037              		.loc 1 407 55 view .LVU632
 2038              	.LBE211:
 2039              	.LBE213:
 759:Src/app.c     **** 
 2040              		.loc 1 759 3 is_stmt 1 view .LVU633
 2041              	.LBB214:
 2042              	.LBI205:
 410:Src/app.c     ****                              float *cpu_load_last_five_seconds)
 2043              		.loc 1 410 13 view .LVU634
 2044              	.LBB207:
 413:Src/app.c     ****     *cpu_load_last = 100.0 * (cpu_load->history[0].thread - cpu_load->history[1].thread) /
 2045              		.loc 1 413 3 view .LVU635
 416:Src/app.c     ****     *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
 2046              		.loc 1 416 3 view .LVU636
 417:Src/app.c     ****                      (cpu_load->history[2].total - cpu_load->history[3].total);
 2047              		.loc 1 417 5 view .LVU637
 417:Src/app.c     ****                      (cpu_load->history[2].total - cpu_load->history[3].total);
 2048              		.loc 1 417 66 is_stmt 0 view .LVU638
 2049 013c D4E91C23 		ldrd	r2, r3, [r4, #112]
 2050 0140 D4E91601 		ldrd	r0, r1, [r4, #88]
 2051 0144 801A     		subs	r0, r0, r2
 2052 0146 61EB0301 		sbc	r1, r1, r3
 417:Src/app.c     ****                      (cpu_load->history[2].total - cpu_load->history[3].total);
 2053              		.loc 1 417 35 view .LVU639
 2054 014a FFF7FEFF 		bl	__aeabi_ul2d
 2055              	.LVL154:
 418:Src/app.c     ****   if (cpu_load_last_five_seconds)
ARM GAS  /tmp/cc2qXJ00.s 			page 89


 2056              		.loc 1 418 50 view .LVU640
 2057 014e D4E91A32 		ldrd	r3, r2, [r4, #104]
 417:Src/app.c     ****                      (cpu_load->history[2].total - cpu_load->history[3].total);
 2058              		.loc 1 417 35 view .LVU641
 2059 0152 41EC180B 		vmov	d8, r0, r1
 418:Src/app.c     ****   if (cpu_load_last_five_seconds)
 2060              		.loc 1 418 50 view .LVU642
 2061 0156 D4E91401 		ldrd	r0, r1, [r4, #80]
 2062 015a C01A     		subs	r0, r0, r3
 2063 015c 61EB0201 		sbc	r1, r1, r2
 417:Src/app.c     ****                      (cpu_load->history[2].total - cpu_load->history[3].total);
 2064              		.loc 1 417 97 view .LVU643
 2065 0160 FFF7FEFF 		bl	__aeabi_ul2d
 2066              	.LVL155:
 417:Src/app.c     ****                      (cpu_load->history[2].total - cpu_load->history[3].total);
 2067              		.loc 1 417 35 view .LVU644
 2068 0164 28EE098B 		vmul.f64	d8, d8, d9
 417:Src/app.c     ****                      (cpu_load->history[2].total - cpu_load->history[3].total);
 2069              		.loc 1 417 97 view .LVU645
 2070 0168 41EC160B 		vmov	d6, r0, r1
 2071 016c 88EE067B 		vdiv.f64	d7, d8, d6
 2072 0170 B7EEC78B 		vcvt.f32.f64	s16, d7
 2073              	.LVL156:
 419:Src/app.c     ****     *cpu_load_last_five_seconds = 100.0 * (cpu_load->history[2].thread - cpu_load->history[7].threa
 2074              		.loc 1 419 3 is_stmt 1 view .LVU646
 419:Src/app.c     ****     *cpu_load_last_five_seconds = 100.0 * (cpu_load->history[2].thread - cpu_load->history[7].threa
 2075              		.loc 1 419 3 is_stmt 0 view .LVU647
 2076              	.LBE207:
 2077              	.LBE214:
 762:Src/app.c     ****   UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "Cpu load");
 2078              		.loc 1 762 3 is_stmt 1 view .LVU648
 762:Src/app.c     ****   UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "Cpu load");
 2079              		.loc 1 762 10 is_stmt 0 view .LVU649
 2080 0174 9FED4B7A 		vldr.32	s14, .L105+52
 2081 0178 DDED0B7A 		vldr.32	s15, [sp, #44]
 2082 017c C7EE278A 		vdiv.f32	s17, s14, s15
 2083              	.LVL157:
 763:Src/app.c     ****   line_nb += 1;
 2084              		.loc 1 763 3 is_stmt 1 view .LVU650
 763:Src/app.c     ****   line_nb += 1;
 2085              		.loc 1 763 26 is_stmt 0 view .LVU651
 2086 0180 FFF7FEFF 		bl	UTIL_LCD_GetFont
 2087              	.LVL158:
 763:Src/app.c     ****   line_nb += 1;
 2088              		.loc 1 763 3 discriminator 1 view .LVU652
 2089 0184 0021     		movs	r1, #0
 2090 0186 0222     		movs	r2, #2
 2091 0188 0846     		mov	r0, r1
 2092 018a 474B     		ldr	r3, .L105+56
 2093 018c FFF7FEFF 		bl	UTIL_LCDEx_PrintfAt
 2094              	.LVL159:
 764:Src/app.c     ****   UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "   %.1f%%", cpu_load_one_second);
 2095              		.loc 1 764 3 is_stmt 1 view .LVU653
 765:Src/app.c     ****   line_nb += 2;
 2096              		.loc 1 765 3 view .LVU654
 765:Src/app.c     ****   line_nb += 2;
 2097              		.loc 1 765 26 is_stmt 0 view .LVU655
ARM GAS  /tmp/cc2qXJ00.s 			page 90


 2098 0190 FFF7FEFF 		bl	UTIL_LCD_GetFont
 2099              	.LVL160:
 765:Src/app.c     ****   line_nb += 2;
 2100              		.loc 1 765 3 discriminator 1 view .LVU656
 2101 0194 B7EEC87A 		vcvt.f64.f32	d7, s16
 2102 0198 C188     		ldrh	r1, [r0, #6]
 2103 019a 0222     		movs	r2, #2
 2104 019c 8DED007B 		vstr.64	d7, [sp]
 2105 01a0 424B     		ldr	r3, .L105+60
 2106 01a2 0020     		movs	r0, #0
 2107 01a4 FFF7FEFF 		bl	UTIL_LCDEx_PrintfAt
 2108              	.LVL161:
 766:Src/app.c     ****   UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "Inferences");
 2109              		.loc 1 766 3 is_stmt 1 view .LVU657
 767:Src/app.c     ****   line_nb += 1;
 2110              		.loc 1 767 3 view .LVU658
 767:Src/app.c     ****   line_nb += 1;
 2111              		.loc 1 767 26 is_stmt 0 view .LVU659
 2112 01a8 FFF7FEFF 		bl	UTIL_LCD_GetFont
 2113              	.LVL162:
 767:Src/app.c     ****   line_nb += 1;
 2114              		.loc 1 767 26 discriminator 1 view .LVU660
 2115 01ac C188     		ldrh	r1, [r0, #6]
 767:Src/app.c     ****   line_nb += 1;
 2116              		.loc 1 767 3 discriminator 1 view .LVU661
 2117 01ae 0222     		movs	r2, #2
 2118 01b0 3F4B     		ldr	r3, .L105+64
 2119 01b2 01EB4101 		add	r1, r1, r1, lsl #1
 2120 01b6 0020     		movs	r0, #0
 2121 01b8 FFF7FEFF 		bl	UTIL_LCDEx_PrintfAt
 2122              	.LVL163:
 768:Src/app.c     ****   UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, " pd %2ums", info->pd_ms);
 2123              		.loc 1 768 3 is_stmt 1 view .LVU662
 769:Src/app.c     ****   line_nb += 1;
 2124              		.loc 1 769 3 view .LVU663
 769:Src/app.c     ****   line_nb += 1;
 2125              		.loc 1 769 26 is_stmt 0 view .LVU664
 2126 01bc FFF7FEFF 		bl	UTIL_LCD_GetFont
 2127              	.LVL164:
 769:Src/app.c     ****   line_nb += 1;
 2128              		.loc 1 769 3 discriminator 1 view .LVU665
 2129 01c0 0222     		movs	r2, #2
 769:Src/app.c     ****   line_nb += 1;
 2130              		.loc 1 769 26 discriminator 1 view .LVU666
 2131 01c2 C188     		ldrh	r1, [r0, #6]
 769:Src/app.c     ****   line_nb += 1;
 2132              		.loc 1 769 3 discriminator 1 view .LVU667
 2133 01c4 0C9B     		ldr	r3, [sp, #48]
 2134 01c6 9140     		lsls	r1, r1, r2
 2135 01c8 0020     		movs	r0, #0
 2136 01ca 0093     		str	r3, [sp]
 2137 01cc 394B     		ldr	r3, .L105+68
 2138 01ce FFF7FEFF 		bl	UTIL_LCDEx_PrintfAt
 2139              	.LVL165:
 770:Src/app.c     ****   UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, " hl %2ums", info->hl_ms);
 2140              		.loc 1 770 3 is_stmt 1 view .LVU668
 771:Src/app.c     ****   line_nb += 2;
ARM GAS  /tmp/cc2qXJ00.s 			page 91


 2141              		.loc 1 771 3 view .LVU669
 771:Src/app.c     ****   line_nb += 2;
 2142              		.loc 1 771 26 is_stmt 0 view .LVU670
 2143 01d2 FFF7FEFF 		bl	UTIL_LCD_GetFont
 2144              	.LVL166:
 771:Src/app.c     ****   line_nb += 2;
 2145              		.loc 1 771 3 discriminator 1 view .LVU671
 2146 01d6 0D9B     		ldr	r3, [sp, #52]
 771:Src/app.c     ****   line_nb += 2;
 2147              		.loc 1 771 26 discriminator 1 view .LVU672
 2148 01d8 C188     		ldrh	r1, [r0, #6]
 771:Src/app.c     ****   line_nb += 2;
 2149              		.loc 1 771 3 discriminator 1 view .LVU673
 2150 01da 0222     		movs	r2, #2
 2151 01dc 01EB8101 		add	r1, r1, r1, lsl #2
 2152 01e0 0020     		movs	r0, #0
 2153 01e2 0093     		str	r3, [sp]
 2154 01e4 344B     		ldr	r3, .L105+72
 2155 01e6 FFF7FEFF 		bl	UTIL_LCDEx_PrintfAt
 2156              	.LVL167:
 772:Src/app.c     ****   UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "  %.1f FPS", nn_fps);
 2157              		.loc 1 772 3 is_stmt 1 view .LVU674
 773:Src/app.c     ****   line_nb += 2;
 2158              		.loc 1 773 3 view .LVU675
 773:Src/app.c     ****   line_nb += 2;
 2159              		.loc 1 773 26 is_stmt 0 view .LVU676
 2160 01ea FFF7FEFF 		bl	UTIL_LCD_GetFont
 2161              	.LVL168:
 773:Src/app.c     ****   line_nb += 2;
 2162              		.loc 1 773 3 discriminator 1 view .LVU677
 2163 01ee B7EEE87A 		vcvt.f64.f32	d7, s17
 773:Src/app.c     ****   line_nb += 2;
 2164              		.loc 1 773 26 discriminator 1 view .LVU678
 2165 01f2 C188     		ldrh	r1, [r0, #6]
 773:Src/app.c     ****   line_nb += 2;
 2166              		.loc 1 773 3 discriminator 1 view .LVU679
 2167 01f4 314B     		ldr	r3, .L105+76
 2168 01f6 8DED007B 		vstr.64	d7, [sp]
 2169 01fa 0222     		movs	r2, #2
 2170 01fc 0020     		movs	r0, #0
 2171 01fe C1EBC101 		rsb	r1, r1, r1, lsl #3
 2172 0202 FFF7FEFF 		bl	UTIL_LCDEx_PrintfAt
 2173              	.LVL169:
 774:Src/app.c     ****   if (DBG_INFO) {
 2174              		.loc 1 774 3 is_stmt 1 view .LVU680
 775:Src/app.c     ****     UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "Display");
 2175              		.loc 1 775 3 view .LVU681
 783:Src/app.c     ****     if (info->hands[i].is_valid)
 2176              		.loc 1 783 3 view .LVU682
 783:Src/app.c     ****     if (info->hands[i].is_valid)
 2177              		.loc 1 783 17 discriminator 1 view .LVU683
 2178 0206 129B     		ldr	r3, [sp, #72]
 2179 0208 002B     		cmp	r3, #0
 2180 020a 05DD     		ble	.L95
 784:Src/app.c     ****       display_hand(info, &info->hands[i]);
 2181              		.loc 1 784 5 view .LVU684
 784:Src/app.c     ****       display_hand(info, &info->hands[i]);
ARM GAS  /tmp/cc2qXJ00.s 			page 92


 2182              		.loc 1 784 8 is_stmt 0 view .LVU685
 2183 020c 149B     		ldr	r3, [sp, #80]
 2184 020e 1BB1     		cbz	r3, .L95
 785:Src/app.c     ****   }
 2185              		.loc 1 785 7 is_stmt 1 view .LVU686
 2186 0210 14A9     		add	r1, sp, #80
 2187 0212 0BA8     		add	r0, sp, #44
 2188              	.LVL170:
 785:Src/app.c     ****   }
 2189              		.loc 1 785 7 is_stmt 0 view .LVU687
 2190 0214 FFF7FEFF 		bl	display_hand
 2191              	.LVL171:
 783:Src/app.c     ****     if (info->hands[i].is_valid)
 2192              		.loc 1 783 38 is_stmt 1 discriminator 2 view .LVU688
 783:Src/app.c     ****     if (info->hands[i].is_valid)
 2193              		.loc 1 783 17 discriminator 1 view .LVU689
 2194              	.L95:
 788:Src/app.c     ****     UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "pd : %5.1f %%", info->pd_max_prob * 100);
 2195              		.loc 1 788 3 view .LVU690
 788:Src/app.c     ****     UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "pd : %5.1f %%", info->pd_max_prob * 100);
 2196              		.loc 1 788 3 is_stmt 0 view .LVU691
 2197              	.LBE215:
 2198              	.LBE226:
1370:Src/app.c     ****     dp_commit_drawing_area();
 2199              		.loc 1 1370 5 is_stmt 1 view .LVU692
 2200              	.LBB227:
 2201              	.LBI227:
 2202              		.file 3 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h"
   1:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /******************************************************************************
   2:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * @file     cachel1_armv7.h
   3:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * @brief    CMSIS Level 1 Cache API for Armv7-M and later
   4:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * @version  V1.0.3
   5:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * @date     17. March 2023
   6:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  ******************************************************************************/
   7:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /*
   8:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * Copyright (c) 2020-2021 Arm Limited. All rights reserved.
   9:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  *
  10:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * SPDX-License-Identifier: Apache-2.0
  11:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  *
  12:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * not use this file except in compliance with the License.
  14:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * You may obtain a copy of the License at
  15:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  *
  16:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  *
  18:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * Unless required by applicable law or agreed to in writing, software
  19:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * See the License for the specific language governing permissions and
  22:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * limitations under the License.
  23:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  */
  24:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  25:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #if   defined ( __ICCARM__ )
  26:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #elif defined (__clang__)
  28:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #pragma clang system_header    /* treat file as system include file */
  29:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #endif
ARM GAS  /tmp/cc2qXJ00.s 			page 93


  30:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  31:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #ifndef ARM_CACHEL1_ARMV7_H
  32:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #define ARM_CACHEL1_ARMV7_H
  33:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  34:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
  35:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \ingroup  CMSIS_Core_FunctionInterface
  36:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \defgroup CMSIS_Core_CacheFunctions Cache Functions
  37:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief    Functions that configure Instruction and Data cache.
  38:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   @{
  39:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  */
  40:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  41:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /* Cache Size ID Register Macros */
  42:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #define CCSIDR_WAYS(x)         (((x) & SCB_CCSIDR_ASSOCIATIVITY_Msk) >> SCB_CCSIDR_ASSOCIATIVITY_Po
  43:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #define CCSIDR_SETS(x)         (((x) & SCB_CCSIDR_NUMSETS_Msk      ) >> SCB_CCSIDR_NUMSETS_Pos     
  44:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  45:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #ifndef __SCB_DCACHE_LINE_SIZE
  46:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #define __SCB_DCACHE_LINE_SIZE  32U /*!< Cortex-M7 cache line size is fixed to 32 bytes (8 words). 
  47:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #endif
  48:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  49:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #ifndef __SCB_ICACHE_LINE_SIZE
  50:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #define __SCB_ICACHE_LINE_SIZE  32U /*!< Cortex-M7 cache line size is fixed to 32 bytes (8 words). 
  51:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #endif
  52:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  53:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
  54:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Enable I-Cache
  55:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Turns on I-Cache
  56:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
  57:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_EnableICache (void)
  58:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
  59:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
  60:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
  61:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  62:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
  63:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
  64:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  65:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
  66:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
  67:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  68:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
  69:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
  70:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
  71:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
  72:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  73:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  74:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
  75:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Disable I-Cache
  76:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Turns off I-Cache
  77:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
  78:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_DisableICache (void)
  79:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
  80:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
  81:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
  82:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
  83:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
  84:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  85:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
  86:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
ARM GAS  /tmp/cc2qXJ00.s 			page 94


  87:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
  88:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
  89:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  90:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  91:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
  92:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Invalidate I-Cache
  93:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Invalidates I-Cache
  94:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
  95:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_InvalidateICache (void)
  96:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
  97:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
  98:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
  99:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 100:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->ICIALLU = 0UL;
 101:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 102:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 103:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 104:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 105:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 106:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 107:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 108:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   I-Cache Invalidate by address
 109:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Invalidates I-Cache for the given address.
 110:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            I-Cache is invalidated starting from a 32 byte aligned address in 32 byte granularity.
 111:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            I-Cache memory blocks which are part of given address + given size are invalidated.
 112:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   addr    address
 113:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   isize   size of memory block (in number of bytes)
 114:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** */
 115:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_InvalidateICache_by_Addr (volatile void *addr, int32_t isize)
 116:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 117:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
 118:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     if ( isize > 0 ) {
 119:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        int32_t op_size = isize + (((uint32_t)addr) & (__SCB_ICACHE_LINE_SIZE - 1U));
 120:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_ICACHE_LINE_SIZE - 1U) */;
 121:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 122:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 123:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 124:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 125:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->ICIMVAU = op_addr;             /* register accepts only 32byte aligned values, only bi
 126:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr += __SCB_ICACHE_LINE_SIZE;
 127:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_size -= __SCB_ICACHE_LINE_SIZE;
 128:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while ( op_size > 0 );
 129:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 130:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 131:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __ISB();
 132:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     }
 133:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 134:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 135:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 136:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 137:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 138:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Enable D-Cache
 139:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Turns on D-Cache
 140:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
 141:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_EnableDCache (void)
 142:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 143:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
ARM GAS  /tmp/cc2qXJ00.s 			page 95


 144:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ccsidr;
 145:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t sets;
 146:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ways;
 147:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 148:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 149:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 150:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 151:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 152:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 153:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     ccsidr = SCB->CCSIDR;
 154:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 155:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                                             /* invalidate D-Cache */
 156:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 157:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     do {
 158:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 159:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 160:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 161:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                       ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 162:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #if defined ( __CC_ARM )
 163:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****           __schedule_barrier();
 164:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #endif
 165:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while (ways-- != 0U);
 166:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     } while(sets-- != 0U);
 167:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 168:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 169:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 170:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 171:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 172:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 173:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 174:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 175:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 176:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 177:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 178:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Disable D-Cache
 179:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Turns off D-Cache
 180:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
 181:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_DisableDCache (void)
 182:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 183:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 184:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     struct {
 185:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ccsidr;
 186:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t sets;
 187:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ways;
 188:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     } locals
 189:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #if ((defined(__GNUC__) || defined(__clang__)) && !defined(__OPTIMIZE__))
 190:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        __ALIGNED(__SCB_DCACHE_LINE_SIZE)
 191:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #endif
 192:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     ;
 193:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 194:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 195:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 196:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 197:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 198:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 199:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 200:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #if !defined(__OPTIMIZE__)
ARM GAS  /tmp/cc2qXJ00.s 			page 96


 201:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       /*
 202:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * For the endless loop issue with no optimization builds.
 203:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * More details, see https://github.com/ARM-software/CMSIS_5/issues/620
 204:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        *
 205:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * The issue only happens when local variables are in stack. If
 206:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * local variables are saved in general purpose register, then the function
 207:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * is OK.
 208:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        *
 209:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * When local variables are in stack, after disabling the cache, flush the
 210:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * local variables cache line for data consistency.
 211:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        */
 212:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       /* Clean and invalidate the local variable cache. */
 213:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #if defined(__ICCARM__)
 214:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     /* As we can't align the stack to the cache line size, invalidate each of the variables */
 215:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       SCB->DCCIMVAC = (uint32_t)&locals.sets;
 216:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       SCB->DCCIMVAC = (uint32_t)&locals.ways;
 217:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       SCB->DCCIMVAC = (uint32_t)&locals.ccsidr;
 218:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #else
 219:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       SCB->DCCIMVAC = (uint32_t)&locals;
 220:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #endif
 221:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 222:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __ISB();
 223:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #endif
 224:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 225:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     locals.ccsidr = SCB->CCSIDR;
 226:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                                             /* clean & invalidate D-Cache */
 227:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     locals.sets = (uint32_t)(CCSIDR_SETS(locals.ccsidr));
 228:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     do {
 229:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       locals.ways = (uint32_t)(CCSIDR_WAYS(locals.ccsidr));
 230:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 231:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCCISW = (((locals.sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 232:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                        ((locals.ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 233:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #if defined ( __CC_ARM )
 234:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****           __schedule_barrier();
 235:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #endif
 236:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while (locals.ways-- != 0U);
 237:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     } while(locals.sets-- != 0U);
 238:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 239:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 240:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 241:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 242:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 243:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 244:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 245:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 246:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Invalidate D-Cache
 247:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Invalidates D-Cache
 248:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
 249:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_InvalidateDCache (void)
 250:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 251:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 252:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ccsidr;
 253:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t sets;
 254:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ways;
 255:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 256:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 257:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
ARM GAS  /tmp/cc2qXJ00.s 			page 97


 258:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 259:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     ccsidr = SCB->CCSIDR;
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                                             /* invalidate D-Cache */
 262:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 263:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     do {
 264:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 265:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 266:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 267:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                       ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 268:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #if defined ( __CC_ARM )
 269:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****           __schedule_barrier();
 270:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #endif
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while (ways-- != 0U);
 272:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     } while(sets-- != 0U);
 273:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 274:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 275:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 276:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 277:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 278:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 279:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 280:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 281:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Clean D-Cache
 282:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Cleans D-Cache
 283:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
 284:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_CleanDCache (void)
 285:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 286:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 287:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ccsidr;
 288:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t sets;
 289:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ways;
 290:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 291:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 292:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 293:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 294:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     ccsidr = SCB->CCSIDR;
 295:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 296:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                                             /* clean D-Cache */
 297:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 298:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     do {
 299:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 300:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 301:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 302:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                       ((ways << SCB_DCCSW_WAY_Pos) & SCB_DCCSW_WAY_Msk)  );
 303:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #if defined ( __CC_ARM )
 304:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****           __schedule_barrier();
 305:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #endif
 306:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while (ways-- != 0U);
 307:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     } while(sets-- != 0U);
 308:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 309:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 310:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 311:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 312:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 313:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 314:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
ARM GAS  /tmp/cc2qXJ00.s 			page 98


 315:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 316:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Clean & Invalidate D-Cache
 317:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Cleans and Invalidates D-Cache
 318:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
 319:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_CleanInvalidateDCache (void)
 320:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 321:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 322:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ccsidr;
 323:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t sets;
 324:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ways;
 325:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 326:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 327:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 328:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 329:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     ccsidr = SCB->CCSIDR;
 330:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 331:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                                             /* clean & invalidate D-Cache */
 332:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 333:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     do {
 334:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 335:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 336:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 337:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                        ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 338:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #if defined ( __CC_ARM )
 339:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****           __schedule_barrier();
 340:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #endif
 341:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while (ways-- != 0U);
 342:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     } while(sets-- != 0U);
 343:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 344:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 345:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 346:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 347:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 348:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 349:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 350:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 351:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   D-Cache Invalidate by address
 352:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Invalidates D-Cache for the given address.
 353:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            D-Cache is invalidated starting from a 32 byte aligned address in 32 byte granularity.
 354:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            D-Cache memory blocks which are part of given address + given size are invalidated.
 355:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   addr    address
 356:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   dsize   size of memory block (in number of bytes)
 357:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** */
 358:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (volatile void *addr, int32_t dsize)
 359:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 360:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 361:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     if ( dsize > 0 ) {
 362:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 363:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 364:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 365:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 366:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 367:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 368:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bi
 369:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr += __SCB_DCACHE_LINE_SIZE;
 370:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_size -= __SCB_DCACHE_LINE_SIZE;
 371:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while ( op_size > 0 );
ARM GAS  /tmp/cc2qXJ00.s 			page 99


 372:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 373:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 374:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __ISB();
 375:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     }
 376:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 377:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 378:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 379:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 380:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 381:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   D-Cache Clean by address
 382:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Cleans D-Cache for the given address
 383:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            D-Cache is cleaned starting from a 32 byte aligned address in 32 byte granularity.
 384:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            D-Cache memory blocks which are part of given address + given size are cleaned.
 385:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   addr    address
 386:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   dsize   size of memory block (in number of bytes)
 387:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** */
 388:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (volatile void *addr, int32_t dsize)
 2203              		.loc 3 388 27 view .LVU693
 389:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 390:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 391:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     if ( dsize > 0 ) {
 2204              		.loc 3 391 5 view .LVU694
 2205              	.LBB228:
 392:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 2206              		.loc 3 392 8 view .LVU695
 2207              	.LBE228:
 2208              	.LBE227:
1370:Src/app.c     ****     dp_commit_drawing_area();
 2209              		.loc 1 1370 42 is_stmt 0 view .LVU696
 2210 0218 D9F80030 		ldr	r3, [r9]
 2211 021c 1D4A     		ldr	r2, .L105+36
 2212 021e 02FB0383 		mla	r3, r2, r3, r8
 2213              	.LVL172:
 2214              	.LBB236:
 2215              	.LBB235:
 393:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 2216              		.loc 3 393 7 is_stmt 1 view .LVU697
 394:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 395:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 2217              		.loc 3 395 7 view .LVU698
 2218              	.LBB229:
 2219              	.LBI229:
 269:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2220              		.loc 2 269 27 view .LVU699
 2221              	.LBB230:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2222              		.loc 2 271 3 view .LVU700
 2223              		.syntax unified
 2224              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2225 0222 BFF34F8F 		dsb 0xF
 2226              	@ 0 "" 2
 2227              		.thumb
 2228              		.syntax unified
 2229              	.LBE230:
 2230              	.LBE229:
 396:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 397:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
ARM GAS  /tmp/cc2qXJ00.s 			page 100


 398:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bi
 2231              		.loc 3 398 22 is_stmt 0 view .LVU701
 2232 0226 45F6C05E 		movw	lr, #24000
 2233 022a 4EF001E0 		dls	lr, lr
 2234 022e 244A     		ldr	r2, .L105+80
 2235              	.LVL173:
 2236              	.L97:
 397:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bi
 2237              		.loc 3 397 7 is_stmt 1 view .LVU702
 2238              		.loc 3 398 9 view .LVU703
 2239              		.loc 3 398 22 is_stmt 0 view .LVU704
 2240 0230 C2F86832 		str	r3, [r2, #616]
 399:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr += __SCB_DCACHE_LINE_SIZE;
 2241              		.loc 3 399 9 is_stmt 1 view .LVU705
 2242              		.loc 3 399 17 is_stmt 0 view .LVU706
 2243 0234 2033     		adds	r3, r3, #32
 2244              	.LVL174:
 400:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_size -= __SCB_DCACHE_LINE_SIZE;
 2245              		.loc 3 400 9 is_stmt 1 view .LVU707
 401:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while ( op_size > 0 );
 2246              		.loc 3 401 25 discriminator 1 view .LVU708
 2247 0236 0FF005C8 		le	lr, .L97
 402:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 403:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 2248              		.loc 3 403 7 view .LVU709
 2249              	.LBB231:
 2250              	.LBI231:
 269:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2251              		.loc 2 269 27 view .LVU710
 2252              	.LBB232:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2253              		.loc 2 271 3 view .LVU711
 2254              		.syntax unified
 2255              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2256 023a BFF34F8F 		dsb 0xF
 2257              	@ 0 "" 2
 2258              		.thumb
 2259              		.syntax unified
 2260              	.LBE232:
 2261              	.LBE231:
 404:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __ISB();
 2262              		.loc 3 404 7 view .LVU712
 2263              	.LBB233:
 2264              	.LBI233:
 258:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2265              		.loc 2 258 27 view .LVU713
 2266              	.LBB234:
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2267              		.loc 2 260 3 view .LVU714
 2268              		.syntax unified
 2269              	@ 260 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2270 023e BFF36F8F 		isb 0xF
 2271              	@ 0 "" 2
 2272              	.LVL175:
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2273              		.loc 2 260 3 is_stmt 0 view .LVU715
 2274              		.thumb
ARM GAS  /tmp/cc2qXJ00.s 			page 101


 2275              		.syntax unified
 2276              	.LBE234:
 2277              	.LBE233:
 2278              	.LBE235:
 2279              	.LBE236:
1371:Src/app.c     ****     disp_ms = HAL_GetTick() - ts;
 2280              		.loc 1 1371 5 is_stmt 1 view .LVU716
 2281              	.LBB237:
 2282              	.LBI237:
1301:Src/app.c     **** {
 2283              		.loc 1 1301 13 view .LVU717
 2284              	.LBB238:
1303:Src/app.c     **** 
 2285              		.loc 1 1303 3 view .LVU718
1305:Src/app.c     ****   ret = SCRL_ReloadLayer(SCRL_LAYER_1);
 2286              		.loc 1 1305 3 view .LVU719
 2287              	.LBB239:
 2288              	.LBI239:
 960:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2289              		.loc 2 960 27 view .LVU720
 2290              	.LBB240:
 2291              		.loc 2 962 3 view .LVU721
 2292              		.syntax unified
 2293              	@ 962 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2294 0242 72B6     		cpsid i
 2295              	@ 0 "" 2
 2296              		.thumb
 2297              		.syntax unified
 2298              	.LBE240:
 2299              	.LBE239:
1306:Src/app.c     ****   assert(ret == HAL_OK);
 2300              		.loc 1 1306 3 view .LVU722
1306:Src/app.c     ****   assert(ret == HAL_OK);
 2301              		.loc 1 1306 9 is_stmt 0 view .LVU723
 2302 0244 0120     		movs	r0, #1
 2303 0246 FFF7FEFF 		bl	SCRL_ReloadLayer
 2304              	.LVL176:
1307:Src/app.c     ****   __enable_irq();
 2305              		.loc 1 1307 3 is_stmt 1 view .LVU724
 2306 024a 20B1     		cbz	r0, .L98
1307:Src/app.c     ****   __enable_irq();
 2307              		.loc 1 1307 3 is_stmt 0 discriminator 1 view .LVU725
 2308 024c 40F21B51 		movw	r1, #1307
 2309 0250 114B     		ldr	r3, .L105+40
 2310 0252 1C4A     		ldr	r2, .L105+84
 2311 0254 04E7     		b	.L104
 2312              	.L98:
1308:Src/app.c     ****   lcd_fg_buffer_rd_idx = 1 - lcd_fg_buffer_rd_idx;
 2313              		.loc 1 1308 3 is_stmt 1 view .LVU726
 2314              	.LBB241:
 2315              	.LBI241:
 949:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2316              		.loc 2 949 27 view .LVU727
 2317              	.LBB242:
 951:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2318              		.loc 2 951 3 view .LVU728
 2319              		.syntax unified
ARM GAS  /tmp/cc2qXJ00.s 			page 102


 2320              	@ 951 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2321 0256 62B6     		cpsie i
 2322              	@ 0 "" 2
 2323              		.thumb
 2324              		.syntax unified
 2325              	.LBE242:
 2326              	.LBE241:
1309:Src/app.c     **** }
 2327              		.loc 1 1309 3 view .LVU729
1309:Src/app.c     **** }
 2328              		.loc 1 1309 28 is_stmt 0 view .LVU730
 2329 0258 D9F80030 		ldr	r3, [r9]
 2330 025c C3F10103 		rsb	r3, r3, #1
1309:Src/app.c     **** }
 2331              		.loc 1 1309 24 view .LVU731
 2332 0260 C9F80030 		str	r3, [r9]
 2333              	.LVL177:
1309:Src/app.c     **** }
 2334              		.loc 1 1309 24 view .LVU732
 2335              	.LBE238:
 2336              	.LBE237:
1372:Src/app.c     ****   }
 2337              		.loc 1 1372 5 is_stmt 1 view .LVU733
1372:Src/app.c     ****   }
 2338              		.loc 1 1372 15 is_stmt 0 view .LVU734
 2339 0264 FFF7FEFF 		bl	HAL_GetTick
 2340              	.LVL178:
1372:Src/app.c     ****   }
 2341              		.loc 1 1372 13 discriminator 1 view .LVU735
 2342 0268 A0EB0A04 		sub	r4, r0, r10
 2343              	.LVL179:
1352:Src/app.c     ****   {
 2344              		.loc 1 1352 9 is_stmt 1 view .LVU736
1354:Src/app.c     ****     assert(ret == pdTRUE);
 2345              		.loc 1 1354 9 is_stmt 0 view .LVU737
 2346 026c EDE6     		b	.L99
 2347              	.L106:
 2348 026e 00BF     		.align	3
 2349              	.L105:
 2350 0270 00000000 		.word	0
 2351 0274 00005940 		.word	1079574528
 2352 0278 00000000 		.word	on_ld_toggle_button_click
 2353 027c 00000000 		.word	disp
 2354 0280 00000000 		.word	on_pd_toggle_button_click
 2355 0284 00000000 		.word	.LC1
 2356 0288 00000000 		.word	__func__.14
 2357 028c 0E000000 		.word	.LC2
 2358 0290 A8000000 		.word	disp+168
 2359 0294 00B80B00 		.word	768000
 2360 0298 00000000 		.word	.LC6
 2361 029c 00000000 		.word	__func__.10
 2362 02a0 00000000 		.word	cpu_load
 2363 02a4 00007A44 		.word	1148846080
 2364 02a8 0E000000 		.word	.LC7
 2365 02ac 17000000 		.word	.LC8
 2366 02b0 21000000 		.word	.LC9
 2367 02b4 2C000000 		.word	.LC10
ARM GAS  /tmp/cc2qXJ00.s 			page 103


 2368 02b8 36000000 		.word	.LC11
 2369 02bc 40000000 		.word	.LC12
 2370 02c0 00ED00E0 		.word	-536810240
 2371 02c4 00000000 		.word	__func__.9
 2372 02c8 00000000 		.word	lcd_fg_buffer_rd_idx
 2373 02cc 00180F00 		.word	lcd_fg_buffer
 2374              		.cfi_endproc
 2375              	.LFE7407:
 2377              		.section	.rodata.app_run.str1.1,"aMS",%progbits,1
 2378              	.LC13:
 2379 0000 496E6974 		.ascii	"Init application\000"
 2379      20617070 
 2379      6C696361 
 2379      74696F6E 
 2379      00
 2380              	.LC14:
 2381 0011 72657420 		.ascii	"ret == 0\000"
 2381      3D3D2030 
 2381      00
 2382              	.LC15:
 2383 001a 6973705F 		.ascii	"isp_sem\000"
 2383      73656D00 
 2384              	.LC16:
 2385 0022 64697370 		.ascii	"disp.update\000"
 2385      2E757064 
 2385      61746500 
 2386              	.LC17:
 2387 002e 64697370 		.ascii	"disp.lock\000"
 2387      2E6C6F63 
 2387      6B00
 2388              	.LC18:
 2389 0038 6E6E00   		.ascii	"nn\000"
 2390              	.LC19:
 2391 003b 68646C20 		.ascii	"hdl != NULL\000"
 2391      213D204E 
 2391      554C4C00 
 2392              	.LC20:
 2393 0047 647000   		.ascii	"dp\000"
 2394              	.LC21:
 2395 004a 69737000 		.ascii	"isp\000"
 2396              		.section	.text.app_run,"ax",%progbits
 2397              		.align	1
 2398              		.global	app_run
 2399              		.syntax unified
 2400              		.thumb
 2401              		.thumb_func
 2403              	app_run:
 2404              	.LFB7410:
1385:Src/app.c     ****   }
1386:Src/app.c     **** }
1387:Src/app.c     **** 
1388:Src/app.c     **** static void Display_init()
1389:Src/app.c     **** {
1390:Src/app.c     ****   SCRL_LayerConfig layers_config[2] = {
1391:Src/app.c     ****     {
1392:Src/app.c     ****       .origin = {lcd_bg_area.X0, lcd_bg_area.Y0},
1393:Src/app.c     ****       .size = {lcd_bg_area.XSize, lcd_bg_area.YSize},
ARM GAS  /tmp/cc2qXJ00.s 			page 104


1394:Src/app.c     **** #if HAS_ROTATION_SUPPORT == 0
1395:Src/app.c     ****       .format = SCRL_RGB888,
1396:Src/app.c     **** #else
1397:Src/app.c     ****       .format = SCRL_ARGB8888,
1398:Src/app.c     **** #endif
1399:Src/app.c     ****       .address = lcd_bg_buffer[lcd_bg_buffer_disp_idx],
1400:Src/app.c     ****     },
1401:Src/app.c     ****     {
1402:Src/app.c     ****       .origin = {lcd_fg_area.X0, lcd_fg_area.Y0},
1403:Src/app.c     ****       .size = {lcd_fg_area.XSize, lcd_fg_area.YSize},
1404:Src/app.c     ****       .format = SCRL_ARGB4444,
1405:Src/app.c     ****       .address = lcd_fg_buffer[1],
1406:Src/app.c     ****     },
1407:Src/app.c     ****   };
1408:Src/app.c     ****   SCRL_ScreenConfig screen_config = {
1409:Src/app.c     ****     .size = {lcd_bg_area.XSize, lcd_bg_area.YSize},
1410:Src/app.c     **** #ifdef SCR_LIB_USE_SPI
1411:Src/app.c     ****     .format = SCRL_RGB565,
1412:Src/app.c     **** #else
1413:Src/app.c     ****      .format = SCRL_YUV422, /* Use SCRL_RGB565 if host support this format to reduce cpu load */
1414:Src/app.c     **** #endif
1415:Src/app.c     ****     .address = screen_buffer,
1416:Src/app.c     ****     .fps = CAMERA_FPS,
1417:Src/app.c     ****   };
1418:Src/app.c     ****   int ret;
1419:Src/app.c     **** 
1420:Src/app.c     ****   ret = SCRL_Init((SCRL_LayerConfig *[2]){&layers_config[0], &layers_config[1]}, &screen_config);
1421:Src/app.c     ****   assert(ret == 0);
1422:Src/app.c     **** 
1423:Src/app.c     ****   UTIL_LCD_SetLayer(SCRL_LAYER_1);
1424:Src/app.c     ****   UTIL_LCD_Clear(UTIL_LCD_COLOR_TRANSPARENT);
1425:Src/app.c     ****   UTIL_LCD_SetFont(&LCD_FONT);
1426:Src/app.c     ****   UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
1427:Src/app.c     **** }
1428:Src/app.c     **** 
1429:Src/app.c     **** void app_run()
1430:Src/app.c     **** {
 2405              		.loc 1 1430 1 is_stmt 1 view -0
 2406              		.cfi_startproc
 2407              		@ args = 0, pretend = 0, frame = 56
 2408              		@ frame_needed = 0, uses_anonymous_args = 0
1431:Src/app.c     ****   UBaseType_t isp_priority = FREERTOS_PRIORITY(2);
 2409              		.loc 1 1431 3 view .LVU739
 2410              	.LVL180:
1432:Src/app.c     ****   UBaseType_t dp_priority = FREERTOS_PRIORITY(-2);
 2411              		.loc 1 1432 3 view .LVU740
1433:Src/app.c     ****   UBaseType_t nn_priority = FREERTOS_PRIORITY(1);
 2412              		.loc 1 1433 3 view .LVU741
1434:Src/app.c     ****   TaskHandle_t hdl;
 2413              		.loc 1 1434 3 view .LVU742
1435:Src/app.c     ****   int ret;
 2414              		.loc 1 1435 3 view .LVU743
1436:Src/app.c     **** 
1437:Src/app.c     ****   printf("Init application\n");
 2415              		.loc 1 1437 3 view .LVU744
1430:Src/app.c     ****   UBaseType_t isp_priority = FREERTOS_PRIORITY(2);
 2416              		.loc 1 1430 1 is_stmt 0 view .LVU745
ARM GAS  /tmp/cc2qXJ00.s 			page 105


 2417 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 2418              		.cfi_def_cfa_offset 28
 2419              		.cfi_offset 4, -28
 2420              		.cfi_offset 5, -24
 2421              		.cfi_offset 6, -20
 2422              		.cfi_offset 7, -16
 2423              		.cfi_offset 8, -12
 2424              		.cfi_offset 9, -8
 2425              		.cfi_offset 14, -4
1438:Src/app.c     ****   /* Enable DWT so DWT_CYCCNT works when debugger not attached */
1439:Src/app.c     ****   CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 2426              		.loc 1 1439 12 view .LVU746
 2427 0004 854D     		ldr	r5, .L127
1430:Src/app.c     ****   UBaseType_t isp_priority = FREERTOS_PRIORITY(2);
 2428              		.loc 1 1430 1 view .LVU747
 2429 0006 93B0     		sub	sp, sp, #76
 2430              		.cfi_def_cfa_offset 104
1437:Src/app.c     ****   /* Enable DWT so DWT_CYCCNT works when debugger not attached */
 2431              		.loc 1 1437 3 view .LVU748
 2432 0008 8548     		ldr	r0, .L127+4
 2433 000a FFF7FEFF 		bl	puts
 2434              	.LVL181:
 2435              		.loc 1 1439 3 is_stmt 1 view .LVU749
 2436              		.loc 1 1439 12 is_stmt 0 view .LVU750
 2437 000e D5F8FC30 		ldr	r3, [r5, #252]
1440:Src/app.c     **** 
1441:Src/app.c     ****   /* screen init */
1442:Src/app.c     ****   memset(lcd_bg_buffer, 0, sizeof(lcd_bg_buffer));
 2438              		.loc 1 1442 3 view .LVU751
 2439 0012 844C     		ldr	r4, .L127+8
1439:Src/app.c     **** 
 2440              		.loc 1 1439 20 view .LVU752
 2441 0014 43F08073 		orr	r3, r3, #16777216
 2442              		.loc 1 1442 3 view .LVU753
 2443 0018 0021     		movs	r1, #0
 2444 001a 2046     		mov	r0, r4
 2445 001c 824A     		ldr	r2, .L127+12
1439:Src/app.c     **** 
 2446              		.loc 1 1439 20 view .LVU754
 2447 001e C5F8FC30 		str	r3, [r5, #252]
 2448              		.loc 1 1442 3 is_stmt 1 view .LVU755
 2449 0022 FFF7FEFF 		bl	memset
 2450              	.LVL182:
1443:Src/app.c     ****   CACHE_OP(SCB_CleanInvalidateDCache_by_Addr(lcd_bg_buffer, sizeof(lcd_bg_buffer)));
 2451              		.loc 1 1443 3 view .LVU756
 2452              		.loc 1 1443 3 view .LVU757
 2453              		.loc 1 1443 3 discriminator 1 view .LVU758
 2454              	.LBB265:
 2455              	.LBI265:
 405:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     }
 406:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 407:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 408:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 409:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 410:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 411:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   D-Cache Clean and Invalidate by address
 412:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Cleans and invalidates D_Cache for the given address
ARM GAS  /tmp/cc2qXJ00.s 			page 106


 413:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            D-Cache is cleaned and invalidated starting from a 32 byte aligned address in 32 byte gr
 414:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            D-Cache memory blocks which are part of given address + given size are cleaned and inval
 415:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   addr    address (aligned to 32-byte boundary)
 416:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   dsize   size of memory block (in number of bytes)
 417:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** */
 418:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_CleanInvalidateDCache_by_Addr (volatile void *addr, int32_t dsize)
 2456              		.loc 3 418 27 view .LVU759
 419:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 420:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 421:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     if ( dsize > 0 ) {
 2457              		.loc 3 421 5 view .LVU760
 2458              	.LBB266:
 422:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 2459              		.loc 3 422 8 view .LVU761
 423:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 2460              		.loc 3 423 7 view .LVU762
 424:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 425:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 2461              		.loc 3 425 7 view .LVU763
 2462              	.LBB267:
 2463              	.LBI267:
 269:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2464              		.loc 2 269 27 view .LVU764
 2465              	.LBB268:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2466              		.loc 2 271 3 view .LVU765
 2467              		.syntax unified
 2468              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2469 0026 BFF34F8F 		dsb 0xF
 2470              	@ 0 "" 2
 2471              		.thumb
 2472              		.syntax unified
 2473              	.LBE268:
 2474              	.LBE267:
 426:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 427:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 428:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bi
 429:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr +=          __SCB_DCACHE_LINE_SIZE;
 430:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_size -=          __SCB_DCACHE_LINE_SIZE;
 431:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while ( op_size > 0 );
 2475              		.loc 3 431 25 is_stmt 0 discriminator 1 view .LVU766
 2476 002a DFF880E2 		ldr	lr, .L127+144
 2477              	.LBB270:
 2478              	.LBB269:
 272:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 2479              		.loc 2 272 1 view .LVU767
 2480 002e 0023     		movs	r3, #0
 2481              	.LBE269:
 2482              	.LBE270:
 2483              		.loc 3 431 25 discriminator 1 view .LVU768
 2484 0030 4EF001E0 		dls	lr, lr
 2485              	.LVL183:
 2486              	.L108:
 2487              		.loc 3 431 25 discriminator 1 view .LVU769
 2488 0034 E218     		adds	r2, r4, r3
 2489              	.LVL184:
 427:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bi
ARM GAS  /tmp/cc2qXJ00.s 			page 107


 2490              		.loc 3 427 7 is_stmt 1 view .LVU770
 428:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr +=          __SCB_DCACHE_LINE_SIZE;
 2491              		.loc 3 428 9 view .LVU771
 428:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr +=          __SCB_DCACHE_LINE_SIZE;
 2492              		.loc 3 428 23 is_stmt 0 view .LVU772
 2493 0036 C5F87022 		str	r2, [r5, #624]
 429:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_size -=          __SCB_DCACHE_LINE_SIZE;
 2494              		.loc 3 429 9 is_stmt 1 view .LVU773
 2495              	.LVL185:
 430:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while ( op_size > 0 );
 2496              		.loc 3 430 9 view .LVU774
 2497              		.loc 3 431 25 discriminator 1 view .LVU775
 2498 003a 2033     		adds	r3, r3, #32
 2499              	.LVL186:
 2500              		.loc 3 431 25 is_stmt 0 discriminator 1 view .LVU776
 2501 003c 0FF007C0 		le	lr, .L108
 432:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 433:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 2502              		.loc 3 433 7 is_stmt 1 view .LVU777
 2503              	.LBB271:
 2504              	.LBI271:
 269:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2505              		.loc 2 269 27 view .LVU778
 2506              	.LBB272:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2507              		.loc 2 271 3 view .LVU779
 2508              		.syntax unified
 2509              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2510 0040 BFF34F8F 		dsb 0xF
 2511              	@ 0 "" 2
 2512              		.thumb
 2513              		.syntax unified
 2514              	.LBE272:
 2515              	.LBE271:
 434:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __ISB();
 2516              		.loc 3 434 7 view .LVU780
 2517              	.LBB273:
 2518              	.LBI273:
 258:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2519              		.loc 2 258 27 view .LVU781
 2520              	.LBB274:
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2521              		.loc 2 260 3 view .LVU782
 2522              		.syntax unified
 2523              	@ 260 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2524 0044 BFF36F8F 		isb 0xF
 2525              	@ 0 "" 2
 2526              	.LVL187:
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2527              		.loc 2 260 3 is_stmt 0 view .LVU783
 2528              		.thumb
 2529              		.syntax unified
 2530              	.LBE274:
 2531              	.LBE273:
 2532              	.LBE266:
 2533              	.LBE265:
 2534              		.loc 1 1443 3 is_stmt 1 discriminator 3 view .LVU784
ARM GAS  /tmp/cc2qXJ00.s 			page 108


1444:Src/app.c     ****   memset(lcd_fg_buffer, 0, sizeof(lcd_fg_buffer));
 2535              		.loc 1 1444 3 view .LVU785
 2536 0048 784D     		ldr	r5, .L127+16
 2537 004a 0021     		movs	r1, #0
 2538 004c 2846     		mov	r0, r5
 2539 004e 784A     		ldr	r2, .L127+20
 2540 0050 FFF7FEFF 		bl	memset
 2541              	.LVL188:
1445:Src/app.c     ****   CACHE_OP(SCB_CleanInvalidateDCache_by_Addr(lcd_fg_buffer, sizeof(lcd_fg_buffer)));
 2542              		.loc 1 1445 3 view .LVU786
 2543              		.loc 1 1445 3 view .LVU787
 2544              		.loc 1 1445 3 discriminator 1 view .LVU788
 2545              	.LBB275:
 2546              	.LBI275:
 418:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 2547              		.loc 3 418 27 view .LVU789
 421:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 2548              		.loc 3 421 5 view .LVU790
 2549              	.LBB276:
 422:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 2550              		.loc 3 422 8 view .LVU791
 423:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 2551              		.loc 3 423 7 view .LVU792
 425:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 2552              		.loc 3 425 7 view .LVU793
 2553              	.LBB277:
 2554              	.LBI277:
 269:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2555              		.loc 2 269 27 view .LVU794
 2556              	.LBB278:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2557              		.loc 2 271 3 view .LVU795
 2558              		.syntax unified
 2559              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2560 0054 BFF34F8F 		dsb 0xF
 2561              	@ 0 "" 2
 2562              		.thumb
 2563              		.syntax unified
 2564              	.LBE278:
 2565              	.LBE277:
 431:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 2566              		.loc 3 431 25 is_stmt 0 discriminator 1 view .LVU796
 2567 0058 4BF6803E 		movw	lr, #48000
 2568              	.LBB280:
 2569              	.LBB279:
 272:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 2570              		.loc 2 272 1 view .LVU797
 2571 005c 0023     		movs	r3, #0
 2572              	.LBE279:
 2573              	.LBE280:
 431:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 2574              		.loc 3 431 25 discriminator 1 view .LVU798
 2575 005e 4EF001E0 		dls	lr, lr
 428:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr +=          __SCB_DCACHE_LINE_SIZE;
 2576              		.loc 3 428 23 view .LVU799
 2577 0062 6E4A     		ldr	r2, .L127
 2578              	.LVL189:
ARM GAS  /tmp/cc2qXJ00.s 			page 109


 2579              	.L109:
 428:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr +=          __SCB_DCACHE_LINE_SIZE;
 2580              		.loc 3 428 23 view .LVU800
 2581 0064 E918     		adds	r1, r5, r3
 2582              	.LVL190:
 427:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bi
 2583              		.loc 3 427 7 is_stmt 1 view .LVU801
 428:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr +=          __SCB_DCACHE_LINE_SIZE;
 2584              		.loc 3 428 9 view .LVU802
 428:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr +=          __SCB_DCACHE_LINE_SIZE;
 2585              		.loc 3 428 23 is_stmt 0 view .LVU803
 2586 0066 C2F87012 		str	r1, [r2, #624]
 429:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_size -=          __SCB_DCACHE_LINE_SIZE;
 2587              		.loc 3 429 9 is_stmt 1 view .LVU804
 2588              	.LVL191:
 430:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while ( op_size > 0 );
 2589              		.loc 3 430 9 view .LVU805
 431:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 2590              		.loc 3 431 25 discriminator 1 view .LVU806
 2591 006a 2033     		adds	r3, r3, #32
 2592              	.LVL192:
 431:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 2593              		.loc 3 431 25 is_stmt 0 discriminator 1 view .LVU807
 2594 006c 0FF007C0 		le	lr, .L109
 433:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __ISB();
 2595              		.loc 3 433 7 is_stmt 1 view .LVU808
 2596              	.LBB281:
 2597              	.LBI281:
 269:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2598              		.loc 2 269 27 view .LVU809
 2599              	.LBB282:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2600              		.loc 2 271 3 view .LVU810
 2601              		.syntax unified
 2602              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2603 0070 BFF34F8F 		dsb 0xF
 2604              	@ 0 "" 2
 2605              		.thumb
 2606              		.syntax unified
 2607              	.LBE282:
 2608              	.LBE281:
 2609              		.loc 3 434 7 view .LVU811
 2610              	.LBB283:
 2611              	.LBI283:
 258:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2612              		.loc 2 258 27 view .LVU812
 2613              	.LBB284:
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2614              		.loc 2 260 3 view .LVU813
 2615              		.syntax unified
 2616              	@ 260 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2617 0074 BFF36F8F 		isb 0xF
 2618              	@ 0 "" 2
 2619              	.LVL193:
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2620              		.loc 2 260 3 is_stmt 0 view .LVU814
 2621              		.thumb
ARM GAS  /tmp/cc2qXJ00.s 			page 110


 2622              		.syntax unified
 2623              	.LBE284:
 2624              	.LBE283:
 2625              	.LBE276:
 2626              	.LBE275:
 2627              		.loc 1 1445 3 is_stmt 1 discriminator 3 view .LVU815
1446:Src/app.c     ****   Display_init();
 2628              		.loc 1 1446 3 view .LVU816
 2629              	.LBB285:
 2630              	.LBI285:
1388:Src/app.c     **** {
 2631              		.loc 1 1388 13 view .LVU817
 2632              	.LBB286:
1390:Src/app.c     ****     {
 2633              		.loc 1 1390 3 view .LVU818
1390:Src/app.c     ****     {
 2634              		.loc 1 1390 20 is_stmt 0 view .LVU819
 2635 0078 0320     		movs	r0, #3
 2636 007a 0021     		movs	r1, #0
 2637 007c 0126     		movs	r6, #1
1408:Src/app.c     ****     .size = {lcd_bg_area.XSize, lcd_bg_area.YSize},
 2638              		.loc 1 1408 21 view .LVU820
 2639 007e 0227     		movs	r7, #2
 2640 0080 4FF01E09 		mov	r9, #30
1390:Src/app.c     ****     {
 2641              		.loc 1 1390 20 view .LVU821
 2642 0084 8DF83000 		strb	r0, [sp, #48]
1399:Src/app.c     ****     },
 2643              		.loc 1 1399 31 view .LVU822
 2644 0088 6A48     		ldr	r0, .L127+24
1390:Src/app.c     ****     {
 2645              		.loc 1 1390 20 view .LVU823
 2646 008a 6B4A     		ldr	r2, .L127+28
1399:Src/app.c     ****     },
 2647              		.loc 1 1399 18 view .LVU824
 2648 008c 0068     		ldr	r0, [r0]
1390:Src/app.c     ****     {
 2649              		.loc 1 1390 20 view .LVU825
 2650 008e CDE90A12 		strd	r1, r2, [sp, #40]
1399:Src/app.c     ****     },
 2651              		.loc 1 1399 18 view .LVU826
 2652 0092 03FB0044 		mla	r4, r3, r0, r4
1390:Src/app.c     ****     {
 2653              		.loc 1 1390 20 view .LVU827
 2654 0096 694B     		ldr	r3, .L127+32
 2655 0098 CDE90D41 		strd	r4, r1, [sp, #52]
 2656 009c 1193     		str	r3, [sp, #68]
1408:Src/app.c     ****     .size = {lcd_bg_area.XSize, lcd_bg_area.YSize},
 2657              		.loc 1 1408 3 is_stmt 1 view .LVU828
1408:Src/app.c     ****     .size = {lcd_bg_area.XSize, lcd_bg_area.YSize},
 2658              		.loc 1 1408 21 is_stmt 0 view .LVU829
 2659 009e 684B     		ldr	r3, .L127+36
1420:Src/app.c     ****   assert(ret == 0);
 2660              		.loc 1 1420 9 view .LVU830
 2661 00a0 06A9     		add	r1, sp, #24
1408:Src/app.c     ****     .size = {lcd_bg_area.XSize, lcd_bg_area.YSize},
 2662              		.loc 1 1408 21 view .LVU831
ARM GAS  /tmp/cc2qXJ00.s 			page 111


 2663 00a2 0893     		str	r3, [sp, #32]
1420:Src/app.c     ****   assert(ret == 0);
 2664              		.loc 1 1420 42 view .LVU832
 2665 00a4 0AAB     		add	r3, sp, #40
 2666 00a6 0493     		str	r3, [sp, #16]
1420:Src/app.c     ****   assert(ret == 0);
 2667              		.loc 1 1420 9 view .LVU833
 2668 00a8 04A8     		add	r0, sp, #16
1420:Src/app.c     ****   assert(ret == 0);
 2669              		.loc 1 1420 42 view .LVU834
 2670 00aa 0EAB     		add	r3, sp, #56
1390:Src/app.c     ****     {
 2671              		.loc 1 1390 20 view .LVU835
 2672 00ac 0F92     		str	r2, [sp, #60]
 2673 00ae 8DF84060 		strb	r6, [sp, #64]
1408:Src/app.c     ****     .size = {lcd_bg_area.XSize, lcd_bg_area.YSize},
 2674              		.loc 1 1408 21 view .LVU836
 2675 00b2 0692     		str	r2, [sp, #24]
 2676 00b4 8DF81C70 		strb	r7, [sp, #28]
 2677 00b8 ADF82490 		strh	r9, [sp, #36]	@ movhi
1418:Src/app.c     **** 
 2678              		.loc 1 1418 3 is_stmt 1 view .LVU837
1420:Src/app.c     ****   assert(ret == 0);
 2679              		.loc 1 1420 3 view .LVU838
1420:Src/app.c     ****   assert(ret == 0);
 2680              		.loc 1 1420 42 is_stmt 0 view .LVU839
 2681 00bc 0593     		str	r3, [sp, #20]
1420:Src/app.c     ****   assert(ret == 0);
 2682              		.loc 1 1420 9 view .LVU840
 2683 00be FFF7FEFF 		bl	SCRL_Init
 2684              	.LVL194:
1421:Src/app.c     **** 
 2685              		.loc 1 1421 3 is_stmt 1 view .LVU841
 2686 00c2 0446     		mov	r4, r0
 2687 00c4 30B1     		cbz	r0, .L110
1421:Src/app.c     **** 
 2688              		.loc 1 1421 3 is_stmt 0 discriminator 1 view .LVU842
 2689 00c6 40F28D51 		movw	r1, #1421
 2690 00ca 5E4B     		ldr	r3, .L127+40
 2691 00cc 5E4A     		ldr	r2, .L127+44
 2692              	.LVL195:
 2693              	.L126:
1421:Src/app.c     **** 
 2694              		.loc 1 1421 3 discriminator 1 view .LVU843
 2695              	.LBE286:
 2696              	.LBE285:
1447:Src/app.c     **** 
1448:Src/app.c     ****   /* create buffer queues */
1449:Src/app.c     ****   ret = bqueue_init(&nn_input_queue, 2, (uint8_t *[2]){nn_input_buffers[0], nn_input_buffers[1]});
1450:Src/app.c     ****   assert(ret == 0);
 2697              		.loc 1 1450 3 discriminator 1 view .LVU844
 2698 00ce 5F48     		ldr	r0, .L127+48
 2699 00d0 FFF7FEFF 		bl	__assert_func
 2700              	.LVL196:
 2701              	.L110:
 2702              	.LBB289:
 2703              	.LBB287:
ARM GAS  /tmp/cc2qXJ00.s 			page 112


1423:Src/app.c     ****   UTIL_LCD_Clear(UTIL_LCD_COLOR_TRANSPARENT);
 2704              		.loc 1 1423 3 is_stmt 1 view .LVU845
 2705 00d4 3046     		mov	r0, r6
 2706              	.LVL197:
1423:Src/app.c     ****   UTIL_LCD_Clear(UTIL_LCD_COLOR_TRANSPARENT);
 2707              		.loc 1 1423 3 is_stmt 0 view .LVU846
 2708 00d6 FFF7FEFF 		bl	UTIL_LCD_SetLayer
 2709              	.LVL198:
1424:Src/app.c     ****   UTIL_LCD_SetFont(&LCD_FONT);
 2710              		.loc 1 1424 3 is_stmt 1 view .LVU847
 2711 00da 2046     		mov	r0, r4
 2712 00dc FFF7FEFF 		bl	UTIL_LCD_Clear
 2713              	.LVL199:
1425:Src/app.c     ****   UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 2714              		.loc 1 1425 3 view .LVU848
 2715              	.LBE287:
 2716              	.LBE289:
 2717              	.LBB290:
 2718              	.LBB291:
 431:Src/app.c     ****   if (!bq->free)
 2719              		.loc 1 431 14 is_stmt 0 view .LVU849
 2720 00e0 DFF8CC81 		ldr	r8, .L127+148
 2721              	.LBE291:
 2722              	.LBE290:
 2723              	.LBB296:
 2724              	.LBB288:
1425:Src/app.c     ****   UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 2725              		.loc 1 1425 3 view .LVU850
 2726 00e4 5A48     		ldr	r0, .L127+52
 2727 00e6 FFF7FEFF 		bl	UTIL_LCD_SetFont
 2728              	.LVL200:
1426:Src/app.c     **** }
 2729              		.loc 1 1426 3 is_stmt 1 view .LVU851
 2730 00ea 4FF0FF30 		mov	r0, #-1
 2731 00ee FFF7FEFF 		bl	UTIL_LCD_SetTextColor
 2732              	.LVL201:
1426:Src/app.c     **** }
 2733              		.loc 1 1426 3 is_stmt 0 view .LVU852
 2734              	.LBE288:
 2735              	.LBE296:
1449:Src/app.c     ****   assert(ret == 0);
 2736              		.loc 1 1449 3 is_stmt 1 view .LVU853
 2737              	.LBB297:
 2738              	.LBI290:
 424:Src/app.c     **** {
 2739              		.loc 1 424 12 view .LVU854
 2740              	.LBB292:
 426:Src/app.c     **** 
 2741              		.loc 1 426 3 view .LVU855
 428:Src/app.c     ****     return -1;
 2742              		.loc 1 428 3 view .LVU856
 431:Src/app.c     ****   if (!bq->free)
 2743              		.loc 1 431 3 view .LVU857
 431:Src/app.c     ****   if (!bq->free)
 2744              		.loc 1 431 14 is_stmt 0 view .LVU858
 2745 00f2 4246     		mov	r2, r8
 2746 00f4 3946     		mov	r1, r7
ARM GAS  /tmp/cc2qXJ00.s 			page 113


 2747 00f6 3846     		mov	r0, r7
 2748 00f8 FFF7FEFF 		bl	xQueueCreateCountingSemaphoreStatic
 2749              	.LVL202:
 431:Src/app.c     ****   if (!bq->free)
 2750              		.loc 1 431 12 discriminator 1 view .LVU859
 2751 00fc A8F10405 		sub	r5, r8, #4
 2752 0100 48F8040C 		str	r0, [r8, #-4]
 432:Src/app.c     ****     goto free_sem_error;
 2753              		.loc 1 432 3 is_stmt 1 view .LVU860
 432:Src/app.c     ****     goto free_sem_error;
 2754              		.loc 1 432 6 is_stmt 0 view .LVU861
 2755 0104 58B1     		cbz	r0, .L111
 434:Src/app.c     ****   if (!bq->ready)
 2756              		.loc 1 434 3 is_stmt 1 view .LVU862
 434:Src/app.c     ****   if (!bq->ready)
 2757              		.loc 1 434 15 is_stmt 0 view .LVU863
 2758 0106 2146     		mov	r1, r4
 2759 0108 3846     		mov	r0, r7
 2760 010a 08F15402 		add	r2, r8, #84
 2761 010e FFF7FEFF 		bl	xQueueCreateCountingSemaphoreStatic
 2762              	.LVL203:
 434:Src/app.c     ****   if (!bq->ready)
 2763              		.loc 1 434 13 discriminator 1 view .LVU864
 2764 0112 6865     		str	r0, [r5, #84]
 435:Src/app.c     ****     goto ready_sem_error;
 2765              		.loc 1 435 3 is_stmt 1 view .LVU865
 435:Src/app.c     ****     goto ready_sem_error;
 2766              		.loc 1 435 6 is_stmt 0 view .LVU866
 2767 0114 40B9     		cbnz	r0, .L112
 436:Src/app.c     **** 
 2768              		.loc 1 436 5 is_stmt 1 view .LVU867
 2769              	.LDL1:
 449:Src/app.c     **** free_sem_error:
 2770              		.loc 1 449 3 view .LVU868
 2771 0116 58F8040C 		ldr	r0, [r8, #-4]
 2772 011a FFF7FEFF 		bl	vQueueDelete
 2773              	.LVL204:
 449:Src/app.c     **** free_sem_error:
 2774              		.loc 1 449 3 is_stmt 0 view .LVU869
 2775              	.LBE292:
 2776              	.LBE297:
 2777              		.loc 1 1450 3 is_stmt 1 view .LVU870
 2778              	.L111:
 2779              		.loc 1 1450 3 is_stmt 0 discriminator 1 view .LVU871
 2780 011e 40F2AA51 		movw	r1, #1450
 2781 0122 484B     		ldr	r3, .L127+40
 2782 0124 4B4A     		ldr	r2, .L127+56
 2783 0126 D2E7     		b	.L126
 2784              	.LVL205:
 2785              	.L112:
 2786              	.LBB298:
 2787              	.LBB293:
 438:Src/app.c     ****   for (i = 0; i < buffer_nb; i++) {
 2788              		.loc 1 438 3 is_stmt 1 view .LVU872
 441:Src/app.c     ****   }
 2789              		.loc 1 441 20 is_stmt 0 view .LVU873
 2790 0128 4B4B     		ldr	r3, .L127+60
ARM GAS  /tmp/cc2qXJ00.s 			page 114


 2791              	.LBE293:
 2792              	.LBE298:
 2793              	.LBB299:
 2794              	.LBB300:
 391:Src/app.c     **** }
 2795              		.loc 1 391 3 view .LVU874
 2796 012a E022     		movs	r2, #224
 2797 012c 2146     		mov	r1, r4
 2798              	.LBE300:
 2799              	.LBE299:
 2800              	.LBB303:
 2801              	.LBB294:
 441:Src/app.c     ****   }
 2802              		.loc 1 441 20 view .LVU875
 2803 012e C5F8AC30 		str	r3, [r5, #172]
 2804              	.LBE294:
 2805              	.LBE303:
 2806              	.LBB304:
 2807              	.LBB301:
 391:Src/app.c     **** }
 2808              		.loc 1 391 3 view .LVU876
 2809 0132 4A48     		ldr	r0, .L127+64
 2810              	.LBE301:
 2811              	.LBE304:
 2812              	.LBB305:
 2813              	.LBB295:
 441:Src/app.c     ****   }
 2814              		.loc 1 441 20 view .LVU877
 2815 0134 03F5D833 		add	r3, r3, #110592
 443:Src/app.c     ****   bq->ready_idx = 0;
 2816              		.loc 1 443 16 view .LVU878
 2817 0138 C5E92C34 		strd	r3, r4, [r5, #176]
 438:Src/app.c     ****   for (i = 0; i < buffer_nb; i++) {
 2818              		.loc 1 438 17 view .LVU879
 2819 013c C5F8A870 		str	r7, [r5, #168]
 439:Src/app.c     ****     assert(buffers[i]);
 2820              		.loc 1 439 3 is_stmt 1 view .LVU880
 2821              	.LVL206:
 439:Src/app.c     ****     assert(buffers[i]);
 2822              		.loc 1 439 17 discriminator 1 view .LVU881
 440:Src/app.c     ****     bq->buffers[i] = buffers[i];
 2823              		.loc 1 440 5 view .LVU882
 441:Src/app.c     ****   }
 2824              		.loc 1 441 5 view .LVU883
 439:Src/app.c     ****     assert(buffers[i]);
 2825              		.loc 1 439 31 discriminator 2 view .LVU884
 439:Src/app.c     ****     assert(buffers[i]);
 2826              		.loc 1 439 17 discriminator 1 view .LVU885
 440:Src/app.c     ****     bq->buffers[i] = buffers[i];
 2827              		.loc 1 440 5 view .LVU886
 441:Src/app.c     ****   }
 2828              		.loc 1 441 5 view .LVU887
 444:Src/app.c     **** 
 2829              		.loc 1 444 3 view .LVU888
 444:Src/app.c     **** 
 2830              		.loc 1 444 17 is_stmt 0 view .LVU889
 2831 0140 C5F8B840 		str	r4, [r5, #184]
ARM GAS  /tmp/cc2qXJ00.s 			page 115


 446:Src/app.c     **** 
 2832              		.loc 1 446 3 is_stmt 1 view .LVU890
 2833              	.LVL207:
 446:Src/app.c     **** 
 2834              		.loc 1 446 3 is_stmt 0 view .LVU891
 2835              	.LBE295:
 2836              	.LBE305:
 2837              		.loc 1 1450 3 is_stmt 1 view .LVU892
1451:Src/app.c     **** 
1452:Src/app.c     ****   cpuload_init(&cpu_load);
 2838              		.loc 1 1452 3 view .LVU893
 2839              	.LBB306:
 2840              	.LBI299:
 389:Src/app.c     **** {
 2841              		.loc 1 389 13 view .LVU894
 2842              	.LBB302:
 391:Src/app.c     **** }
 2843              		.loc 1 391 3 view .LVU895
 2844 0144 FFF7FEFF 		bl	memset
 2845              	.LVL208:
 391:Src/app.c     **** }
 2846              		.loc 1 391 3 is_stmt 0 view .LVU896
 2847              	.LBE302:
 2848              	.LBE306:
1453:Src/app.c     **** 
1454:Src/app.c     ****   /*** Camera Init ************************************************************/  
1455:Src/app.c     ****   CAM_Init();
 2849              		.loc 1 1455 3 is_stmt 1 view .LVU897
 2850 0148 FFF7FEFF 		bl	CAM_Init
 2851              	.LVL209:
1456:Src/app.c     **** 
1457:Src/app.c     ****   /* sems + mutex init */
1458:Src/app.c     ****   isp_sem = xSemaphoreCreateCountingStatic(1, 0, &isp_sem_buffer);
 2852              		.loc 1 1458 3 view .LVU898
 2853              		.loc 1 1458 13 is_stmt 0 view .LVU899
 2854 014c 2146     		mov	r1, r4
 2855 014e 3046     		mov	r0, r6
 2856 0150 434A     		ldr	r2, .L127+68
 2857 0152 FFF7FEFF 		bl	xQueueCreateCountingSemaphoreStatic
 2858              	.LVL210:
 2859              		.loc 1 1458 11 discriminator 1 view .LVU900
 2860 0156 434B     		ldr	r3, .L127+72
 2861 0158 1860     		str	r0, [r3]
1459:Src/app.c     ****   assert(isp_sem);
 2862              		.loc 1 1459 3 is_stmt 1 view .LVU901
 2863 015a 20B9     		cbnz	r0, .L125
 2864              		.loc 1 1459 3 is_stmt 0 discriminator 1 view .LVU902
 2865 015c 40F2B351 		movw	r1, #1459
 2866 0160 414B     		ldr	r3, .L127+76
 2867 0162 3C4A     		ldr	r2, .L127+56
 2868 0164 B3E7     		b	.L126
 2869              	.L125:
1460:Src/app.c     ****   disp.update = xSemaphoreCreateCountingStatic(1, 0, &disp.update_buffer);
 2870              		.loc 1 1460 3 is_stmt 1 view .LVU903
 2871              		.loc 1 1460 17 is_stmt 0 view .LVU904
 2872 0166 414D     		ldr	r5, .L127+80
 2873 0168 2146     		mov	r1, r4
ARM GAS  /tmp/cc2qXJ00.s 			page 116


 2874 016a 2A46     		mov	r2, r5
 2875 016c 3046     		mov	r0, r6
 2876 016e FFF7FEFF 		bl	xQueueCreateCountingSemaphoreStatic
 2877              	.LVL211:
 2878              		.loc 1 1460 15 discriminator 1 view .LVU905
 2879 0172 2F1F     		subs	r7, r5, #4
 2880 0174 45F8040C 		str	r0, [r5, #-4]
1461:Src/app.c     ****   assert(disp.update);
 2881              		.loc 1 1461 3 is_stmt 1 view .LVU906
 2882 0178 20B9     		cbnz	r0, .L115
 2883              		.loc 1 1461 3 is_stmt 0 discriminator 1 view .LVU907
 2884 017a 40F2B551 		movw	r1, #1461
 2885 017e 3C4B     		ldr	r3, .L127+84
 2886 0180 344A     		ldr	r2, .L127+56
 2887 0182 A4E7     		b	.L126
 2888              	.L115:
1462:Src/app.c     ****   disp.lock = xSemaphoreCreateMutexStatic(&disp.lock_buffer);
 2889              		.loc 1 1462 3 is_stmt 1 view .LVU908
 2890              		.loc 1 1462 15 is_stmt 0 view .LVU909
 2891 0184 3046     		mov	r0, r6
 2892 0186 05F15401 		add	r1, r5, #84
 2893 018a FFF7FEFF 		bl	xQueueCreateMutexStatic
 2894              	.LVL212:
 2895              		.loc 1 1462 13 discriminator 1 view .LVU910
 2896 018e 7865     		str	r0, [r7, #84]
1463:Src/app.c     ****   assert(disp.lock);
 2897              		.loc 1 1463 3 is_stmt 1 view .LVU911
 2898 0190 20B9     		cbnz	r0, .L116
 2899              		.loc 1 1463 3 is_stmt 0 discriminator 1 view .LVU912
 2900 0192 40F2B751 		movw	r1, #1463
 2901 0196 374B     		ldr	r3, .L127+88
 2902 0198 2E4A     		ldr	r2, .L127+56
 2903 019a 98E7     		b	.L126
 2904              	.L116:
1464:Src/app.c     **** 
1465:Src/app.c     ****   /* Start LCD Display camera pipe stream */
1466:Src/app.c     ****   CAM_DisplayPipe_Start(lcd_bg_buffer[0], CMW_MODE_CONTINUOUS);
 2905              		.loc 1 1466 3 is_stmt 1 view .LVU913
 2906 019c 2146     		mov	r1, r4
 2907 019e 2148     		ldr	r0, .L127+8
 2908 01a0 FFF7FEFF 		bl	CAM_DisplayPipe_Start
 2909              	.LVL213:
1467:Src/app.c     **** 
1468:Src/app.c     ****   /* threads init */
1469:Src/app.c     ****   hdl = xTaskCreateStatic(nn_thread_fct, "nn", configMINIMAL_STACK_SIZE * 2, NULL, nn_priority, nn_
 2910              		.loc 1 1469 3 view .LVU914
 2911              		.loc 1 1469 9 is_stmt 0 view .LVU915
 2912 01a4 344B     		ldr	r3, .L127+92
 2913 01a6 4FF40062 		mov	r2, #2048
 2914 01aa 0293     		str	r3, [sp, #8]
 2915 01ac 334B     		ldr	r3, .L127+96
 2916 01ae 3449     		ldr	r1, .L127+100
 2917 01b0 0193     		str	r3, [sp, #4]
 2918 01b2 1D23     		movs	r3, #29
 2919 01b4 3348     		ldr	r0, .L127+104
 2920 01b6 0093     		str	r3, [sp]
 2921 01b8 2346     		mov	r3, r4
ARM GAS  /tmp/cc2qXJ00.s 			page 117


 2922 01ba FFF7FEFF 		bl	xTaskCreateStatic
 2923              	.LVL214:
1470:Src/app.c     ****                           &nn_thread);
1471:Src/app.c     ****   assert(hdl != NULL);
 2924              		.loc 1 1471 3 is_stmt 1 view .LVU916
 2925 01be 20B9     		cbnz	r0, .L117
 2926              		.loc 1 1471 3 is_stmt 0 discriminator 1 view .LVU917
 2927 01c0 40F2BF51 		movw	r1, #1471
 2928 01c4 304B     		ldr	r3, .L127+108
 2929 01c6 234A     		ldr	r2, .L127+56
 2930 01c8 81E7     		b	.L126
 2931              	.L117:
1472:Src/app.c     ****   hdl = xTaskCreateStatic(dp_thread_fct, "dp", configMINIMAL_STACK_SIZE * 2, NULL, dp_priority, dp_
 2932              		.loc 1 1472 3 is_stmt 1 view .LVU918
 2933              		.loc 1 1472 9 is_stmt 0 view .LVU919
 2934 01ca 304B     		ldr	r3, .L127+112
 2935 01cc 4FF40062 		mov	r2, #2048
 2936 01d0 0293     		str	r3, [sp, #8]
 2937 01d2 2F4B     		ldr	r3, .L127+116
 2938 01d4 2F49     		ldr	r1, .L127+120
 2939 01d6 0193     		str	r3, [sp, #4]
 2940 01d8 1A23     		movs	r3, #26
 2941 01da 2F48     		ldr	r0, .L127+124
 2942              	.LVL215:
 2943              		.loc 1 1472 9 view .LVU920
 2944 01dc 0093     		str	r3, [sp]
 2945 01de 2346     		mov	r3, r4
 2946 01e0 FFF7FEFF 		bl	xTaskCreateStatic
 2947              	.LVL216:
1473:Src/app.c     ****                           &dp_thread);
1474:Src/app.c     ****   assert(hdl != NULL);
 2948              		.loc 1 1474 3 is_stmt 1 view .LVU921
 2949 01e4 20B9     		cbnz	r0, .L118
 2950              		.loc 1 1474 3 is_stmt 0 discriminator 1 view .LVU922
 2951 01e6 40F2C251 		movw	r1, #1474
 2952 01ea 274B     		ldr	r3, .L127+108
 2953 01ec 194A     		ldr	r2, .L127+56
 2954 01ee 6EE7     		b	.L126
 2955              	.L118:
1475:Src/app.c     ****   hdl = xTaskCreateStatic(isp_thread_fct, "isp", configMINIMAL_STACK_SIZE * 2, NULL, isp_priority, 
 2956              		.loc 1 1475 3 is_stmt 1 view .LVU923
 2957              		.loc 1 1475 9 is_stmt 0 view .LVU924
 2958 01f0 2A4B     		ldr	r3, .L127+128
 2959 01f2 4FF40062 		mov	r2, #2048
 2960 01f6 0293     		str	r3, [sp, #8]
 2961 01f8 294B     		ldr	r3, .L127+132
 2962 01fa 2A49     		ldr	r1, .L127+136
 2963 01fc CDE90093 		strd	r9, r3, [sp]
 2964 0200 2948     		ldr	r0, .L127+140
 2965              	.LVL217:
 2966              		.loc 1 1475 9 view .LVU925
 2967 0202 2346     		mov	r3, r4
 2968 0204 FFF7FEFF 		bl	xTaskCreateStatic
 2969              	.LVL218:
1476:Src/app.c     ****                           &isp_thread);
1477:Src/app.c     ****   assert(hdl != NULL);
 2970              		.loc 1 1477 3 is_stmt 1 view .LVU926
ARM GAS  /tmp/cc2qXJ00.s 			page 118


 2971 0208 20B9     		cbnz	r0, .L107
 2972              		.loc 1 1477 3 is_stmt 0 discriminator 1 view .LVU927
 2973 020a 40F2C551 		movw	r1, #1477
 2974 020e 1E4B     		ldr	r3, .L127+108
 2975 0210 104A     		ldr	r2, .L127+56
 2976 0212 5CE7     		b	.L126
 2977              	.L107:
1478:Src/app.c     **** }
 2978              		.loc 1 1478 1 view .LVU928
 2979 0214 13B0     		add	sp, sp, #76
 2980              		.cfi_def_cfa_offset 28
 2981              		@ sp needed
 2982 0216 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2983              	.L128:
 2984 021a 00BF     		.align	2
 2985              	.L127:
 2986 021c 00ED00E0 		.word	-536810240
 2987 0220 00000000 		.word	.LC13
 2988 0224 00882600 		.word	lcd_bg_buffer
 2989 0228 00C05D00 		.word	6144000
 2990 022c 00180F00 		.word	lcd_fg_buffer
 2991 0230 00701700 		.word	1536000
 2992 0234 00000000 		.word	lcd_bg_buffer_disp_idx
 2993 0238 2003E001 		.word	31458080
 2994 023c 00D01A00 		.word	lcd_fg_buffer+768000
 2995 0240 00600300 		.word	screen_buffer
 2996 0244 11000000 		.word	.LC14
 2997 0248 00000000 		.word	__func__.5
 2998 024c 0E000000 		.word	.LC2
 2999 0250 00000000 		.word	Font20
 3000 0254 00000000 		.word	__func__.16
 3001 0258 00000000 		.word	nn_input_buffers
 3002 025c 00000000 		.word	cpu_load
 3003 0260 00000000 		.word	isp_sem_buffer
 3004 0264 00000000 		.word	isp_sem
 3005 0268 1A000000 		.word	.LC15
 3006 026c 04000000 		.word	disp+4
 3007 0270 22000000 		.word	.LC16
 3008 0274 2E000000 		.word	.LC17
 3009 0278 00000000 		.word	nn_thread
 3010 027c 00000000 		.word	nn_thread_stack
 3011 0280 38000000 		.word	.LC18
 3012 0284 00000000 		.word	nn_thread_fct
 3013 0288 3B000000 		.word	.LC19
 3014 028c 00000000 		.word	dp_thread
 3015 0290 00000000 		.word	dp_thread_stack
 3016 0294 47000000 		.word	.LC20
 3017 0298 00000000 		.word	dp_thread_fct
 3018 029c 00000000 		.word	isp_thread
 3019 02a0 00000000 		.word	isp_thread_stack
 3020 02a4 4A000000 		.word	.LC21
 3021 02a8 00000000 		.word	isp_thread_fct
 3022 02ac 00EE0200 		.word	192000
 3023 02b0 04000000 		.word	nn_input_queue+4
 3024              		.cfi_endproc
 3025              	.LFE7410:
 3027              		.section	.text.CMW_CAMERA_PIPE_FrameEventCallback,"ax",%progbits
ARM GAS  /tmp/cc2qXJ00.s 			page 119


 3028              		.align	1
 3029              		.global	CMW_CAMERA_PIPE_FrameEventCallback
 3030              		.syntax unified
 3031              		.thumb
 3032              		.thumb_func
 3034              	CMW_CAMERA_PIPE_FrameEventCallback:
 3035              	.LVL219:
 3036              	.LFB7411:
1479:Src/app.c     **** 
1480:Src/app.c     **** int CMW_CAMERA_PIPE_FrameEventCallback(uint32_t pipe)
1481:Src/app.c     **** {
 3037              		.loc 1 1481 1 is_stmt 1 view -0
 3038              		.cfi_startproc
 3039              		@ args = 0, pretend = 0, frame = 8
 3040              		@ frame_needed = 0, uses_anonymous_args = 0
1482:Src/app.c     ****   if (pipe == DCMIPP_PIPE1)
 3041              		.loc 1 1482 3 view .LVU930
 3042              		.loc 1 1482 6 is_stmt 0 view .LVU931
 3043 0000 0128     		cmp	r0, #1
1481:Src/app.c     ****   if (pipe == DCMIPP_PIPE1)
 3044              		.loc 1 1481 1 view .LVU932
 3045 0002 2DE9F347 		push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
 3046              		.cfi_def_cfa_offset 40
 3047              		.cfi_offset 4, -32
 3048              		.cfi_offset 5, -28
 3049              		.cfi_offset 6, -24
 3050              		.cfi_offset 7, -20
 3051              		.cfi_offset 8, -16
 3052              		.cfi_offset 9, -12
 3053              		.cfi_offset 10, -8
 3054              		.cfi_offset 14, -4
1481:Src/app.c     ****   if (pipe == DCMIPP_PIPE1)
 3055              		.loc 1 1481 1 view .LVU933
 3056 0006 0646     		mov	r6, r0
 3057              		.loc 1 1482 6 view .LVU934
 3058 0008 50D1     		bne	.L130
1483:Src/app.c     ****     app_main_pipe_frame_event();
 3059              		.loc 1 1483 5 is_stmt 1 view .LVU935
 3060              	.LBB317:
 3061              	.LBI317:
 519:Src/app.c     **** {
 3062              		.loc 1 519 13 view .LVU936
 3063              	.LBB318:
 521:Src/app.c     ****   int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
 3064              		.loc 1 521 3 view .LVU937
 521:Src/app.c     ****   int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
 3065              		.loc 1 521 47 is_stmt 0 view .LVU938
 3066 000a 514F     		ldr	r7, .L156
 522:Src/app.c     ****   int ret;
 3067              		.loc 1 522 47 view .LVU939
 3068 000c DFF87081 		ldr	r8, .L156+48
 521:Src/app.c     ****   int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
 3069              		.loc 1 521 47 view .LVU940
 3070 0010 3D68     		ldr	r5, [r7]
 522:Src/app.c     ****   int ret;
 3071              		.loc 1 522 47 view .LVU941
 3072 0012 D8F80040 		ldr	r4, [r8]
ARM GAS  /tmp/cc2qXJ00.s 			page 120


 521:Src/app.c     ****   int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
 3073              		.loc 1 521 47 view .LVU942
 3074 0016 0135     		adds	r5, r5, #1
 521:Src/app.c     ****   int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
 3075              		.loc 1 521 7 view .LVU943
 3076 0018 6B42     		rsbs	r3, r5, #0
 3077 001a 03F00303 		and	r3, r3, #3
 522:Src/app.c     ****   int ret;
 3078              		.loc 1 522 47 view .LVU944
 3079 001e 04F10104 		add	r4, r4, #1
 521:Src/app.c     ****   int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
 3080              		.loc 1 521 7 view .LVU945
 3081 0022 05F00305 		and	r5, r5, #3
 3082 0026 55EA43B5 		csneg	r5, r5, r3, mi
 3083              	.LVL220:
 522:Src/app.c     ****   int ret;
 3084              		.loc 1 522 3 is_stmt 1 view .LVU946
 522:Src/app.c     ****   int ret;
 3085              		.loc 1 522 7 is_stmt 0 view .LVU947
 3086 002a 6342     		rsbs	r3, r4, #0
 3087 002c 03F00303 		and	r3, r3, #3
 526:Src/app.c     ****   assert(ret == HAL_OK);
 3088              		.loc 1 526 78 view .LVU948
 3089 0030 DFF850A1 		ldr	r10, .L156+52
 3090 0034 DFF85091 		ldr	r9, .L156+56
 522:Src/app.c     ****   int ret;
 3091              		.loc 1 522 7 view .LVU949
 3092 0038 04F00304 		and	r4, r4, #3
 3093 003c 54EA43B4 		csneg	r4, r4, r3, mi
 3094              	.LVL221:
 523:Src/app.c     **** 
 3095              		.loc 1 523 3 is_stmt 1 view .LVU950
 525:Src/app.c     ****                                          DCMIPP_MEMORY_ADDRESS_0, (uint32_t) lcd_bg_buffer[next_cap
 3096              		.loc 1 525 3 view .LVU951
 525:Src/app.c     ****                                          DCMIPP_MEMORY_ADDRESS_0, (uint32_t) lcd_bg_buffer[next_cap
 3097              		.loc 1 525 9 is_stmt 0 view .LVU952
 3098 0040 FFF7FEFF 		bl	CMW_CAMERA_GetDCMIPPHandle
 3099              	.LVL222:
 525:Src/app.c     ****                                          DCMIPP_MEMORY_ADDRESS_0, (uint32_t) lcd_bg_buffer[next_cap
 3100              		.loc 1 525 9 view .LVU953
 3101 0044 3146     		mov	r1, r6
 3102 0046 0022     		movs	r2, #0
 3103 0048 0AFB0493 		mla	r3, r10, r4, r9
 3104 004c FFF7FEFF 		bl	HAL_DCMIPP_PIPE_SetMemoryAddress
 3105              	.LVL223:
 527:Src/app.c     **** 
 3106              		.loc 1 527 3 is_stmt 1 view .LVU954
 3107 0050 0146     		mov	r1, r0
 3108 0052 30B1     		cbz	r0, .L131
 527:Src/app.c     **** 
 3109              		.loc 1 527 3 is_stmt 0 discriminator 1 view .LVU955
 3110 0054 40F20F21 		movw	r1, #527
 3111 0058 3E4B     		ldr	r3, .L156+4
 3112 005a 3F4A     		ldr	r2, .L156+8
 3113              	.LVL224:
 3114              	.L155:
 3115              	.LBB319:
ARM GAS  /tmp/cc2qXJ00.s 			page 121


 3116              	.LBB320:
 511:Src/app.c     ****   ret = SCRL_ReloadLayer(SCRL_LAYER_0);
 3117              		.loc 1 511 3 discriminator 1 view .LVU956
 3118 005c 3F48     		ldr	r0, .L156+12
 3119 005e FFF7FEFF 		bl	__assert_func
 3120              	.LVL225:
 3121              	.L131:
 511:Src/app.c     ****   ret = SCRL_ReloadLayer(SCRL_LAYER_0);
 3122              		.loc 1 511 3 discriminator 1 view .LVU957
 3123              	.LBE320:
 3124              	.LBE319:
 529:Src/app.c     ****   lcd_bg_buffer_disp_idx = next_disp_idx;
 3125              		.loc 1 529 3 is_stmt 1 view .LVU958
 3126              	.LBB322:
 3127              	.LBI319:
 506:Src/app.c     **** {
 3128              		.loc 1 506 13 view .LVU959
 3129              	.LBB321:
 508:Src/app.c     **** 
 3130              		.loc 1 508 3 view .LVU960
 510:Src/app.c     ****   assert(ret == 0);
 3131              		.loc 1 510 3 view .LVU961
 510:Src/app.c     ****   assert(ret == 0);
 3132              		.loc 1 510 9 is_stmt 0 view .LVU962
 3133 0062 0AFB0590 		mla	r0, r10, r5, r9
 3134              	.LVL226:
 510:Src/app.c     ****   assert(ret == 0);
 3135              		.loc 1 510 9 view .LVU963
 3136 0066 FFF7FEFF 		bl	SCRL_SetAddress_NoReload
 3137              	.LVL227:
 511:Src/app.c     ****   ret = SCRL_ReloadLayer(SCRL_LAYER_0);
 3138              		.loc 1 511 3 is_stmt 1 view .LVU964
 3139 006a 20B1     		cbz	r0, .L132
 511:Src/app.c     ****   ret = SCRL_ReloadLayer(SCRL_LAYER_0);
 3140              		.loc 1 511 3 is_stmt 0 discriminator 1 view .LVU965
 3141 006c 40F2FF11 		movw	r1, #511
 3142 0070 3B4B     		ldr	r3, .L156+16
 3143 0072 3C4A     		ldr	r2, .L156+20
 3144 0074 F2E7     		b	.L155
 3145              	.L132:
 512:Src/app.c     ****   assert(ret == 0);
 3146              		.loc 1 512 3 is_stmt 1 view .LVU966
 512:Src/app.c     ****   assert(ret == 0);
 3147              		.loc 1 512 9 is_stmt 0 view .LVU967
 3148 0076 FFF7FEFF 		bl	SCRL_ReloadLayer
 3149              	.LVL228:
 513:Src/app.c     **** 
 3150              		.loc 1 513 3 is_stmt 1 view .LVU968
 3151 007a 20B1     		cbz	r0, .L133
 513:Src/app.c     **** 
 3152              		.loc 1 513 3 is_stmt 0 discriminator 1 view .LVU969
 3153 007c 40F20121 		movw	r1, #513
 3154 0080 374B     		ldr	r3, .L156+16
 3155 0082 384A     		ldr	r2, .L156+20
 3156 0084 EAE7     		b	.L155
 3157              	.L133:
 515:Src/app.c     ****   assert(ret == 0);
ARM GAS  /tmp/cc2qXJ00.s 			page 122


 3158              		.loc 1 515 3 is_stmt 1 view .LVU970
 515:Src/app.c     ****   assert(ret == 0);
 3159              		.loc 1 515 9 is_stmt 0 view .LVU971
 3160 0086 FFF7FEFF 		bl	SRCL_Update
 3161              	.LVL229:
 516:Src/app.c     **** }
 3162              		.loc 1 516 3 is_stmt 1 view .LVU972
 3163 008a 20B1     		cbz	r0, .L134
 516:Src/app.c     **** }
 3164              		.loc 1 516 3 is_stmt 0 discriminator 1 view .LVU973
 3165 008c 4FF40171 		mov	r1, #516
 3166 0090 334B     		ldr	r3, .L156+16
 3167 0092 344A     		ldr	r2, .L156+20
 3168 0094 E2E7     		b	.L155
 3169              	.L134:
 3170              	.LVL230:
 516:Src/app.c     **** }
 3171              		.loc 1 516 3 discriminator 1 view .LVU974
 3172              	.LBE321:
 3173              	.LBE322:
 530:Src/app.c     ****   lcd_bg_buffer_capt_idx = next_capt_idx;
 3174              		.loc 1 530 3 is_stmt 1 view .LVU975
 533:Src/app.c     **** }
 3175              		.loc 1 533 17 is_stmt 0 view .LVU976
 3176 0096 344A     		ldr	r2, .L156+24
 530:Src/app.c     ****   lcd_bg_buffer_capt_idx = next_capt_idx;
 3177              		.loc 1 530 26 view .LVU977
 3178 0098 3D60     		str	r5, [r7]
 531:Src/app.c     **** 
 3179              		.loc 1 531 3 is_stmt 1 view .LVU978
 533:Src/app.c     **** }
 3180              		.loc 1 533 17 is_stmt 0 view .LVU979
 3181 009a 1368     		ldr	r3, [r2]
 531:Src/app.c     **** 
 3182              		.loc 1 531 26 view .LVU980
 3183 009c C8F80040 		str	r4, [r8]
 533:Src/app.c     **** }
 3184              		.loc 1 533 3 is_stmt 1 view .LVU981
 533:Src/app.c     **** }
 3185              		.loc 1 533 17 is_stmt 0 view .LVU982
 3186 00a0 0133     		adds	r3, r3, #1
 3187 00a2 1360     		str	r3, [r2]
 3188              	.LVL231:
 3189              	.L135:
 533:Src/app.c     **** }
 3190              		.loc 1 533 17 view .LVU983
 3191              	.LBE318:
 3192              	.LBE317:
1484:Src/app.c     ****   else if (pipe == DCMIPP_PIPE2)
1485:Src/app.c     ****     app_ancillary_pipe_frame_event();
1486:Src/app.c     **** 
1487:Src/app.c     ****   return HAL_OK;
 3193              		.loc 1 1487 3 is_stmt 1 view .LVU984
1488:Src/app.c     **** }
 3194              		.loc 1 1488 1 is_stmt 0 view .LVU985
 3195 00a4 0020     		movs	r0, #0
 3196 00a6 02B0     		add	sp, sp, #8
ARM GAS  /tmp/cc2qXJ00.s 			page 123


 3197              		.cfi_remember_state
 3198              		.cfi_def_cfa_offset 32
 3199              		@ sp needed
 3200 00a8 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 3201              	.LVL232:
 3202              	.L130:
 3203              		.cfi_restore_state
1484:Src/app.c     ****   else if (pipe == DCMIPP_PIPE2)
 3204              		.loc 1 1484 8 is_stmt 1 view .LVU986
1484:Src/app.c     ****   else if (pipe == DCMIPP_PIPE2)
 3205              		.loc 1 1484 11 is_stmt 0 view .LVU987
 3206 00ac 0228     		cmp	r0, #2
 3207 00ae F9D1     		bne	.L135
1485:Src/app.c     **** 
 3208              		.loc 1 1485 5 is_stmt 1 view .LVU988
 3209              	.LBB323:
 3210              	.LBI323:
 537:Src/app.c     **** {
 3211              		.loc 1 537 13 view .LVU989
 3212              	.LBB324:
 539:Src/app.c     ****   int ret;
 3213              		.loc 1 539 3 view .LVU990
 540:Src/app.c     **** 
 3214              		.loc 1 540 3 view .LVU991
 542:Src/app.c     ****   if (next_buffer) {
 3215              		.loc 1 542 3 view .LVU992
 3216              	.LBB325:
 3217              	.LBI325:
 454:Src/app.c     **** {
 3218              		.loc 1 454 17 view .LVU993
 3219              	.LVL233:
 3220              	.LBB326:
 456:Src/app.c     ****   int ret;
 3221              		.loc 1 456 3 view .LVU994
 457:Src/app.c     **** 
 3222              		.loc 1 457 3 view .LVU995
 459:Src/app.c     ****   if (ret == pdFALSE)
 3223              		.loc 1 459 3 view .LVU996
 459:Src/app.c     ****   if (ret == pdFALSE)
 3224              		.loc 1 459 9 is_stmt 0 view .LVU997
 3225 00b0 2E4C     		ldr	r4, .L156+28
 459:Src/app.c     ****   if (ret == pdFALSE)
 3226              		.loc 1 459 9 discriminator 4 view .LVU998
 3227 00b2 0021     		movs	r1, #0
 3228 00b4 2068     		ldr	r0, [r4]
 3229              	.LVL234:
 459:Src/app.c     ****   if (ret == pdFALSE)
 3230              		.loc 1 459 9 discriminator 4 view .LVU999
 3231 00b6 FFF7FEFF 		bl	xQueueSemaphoreTake
 3232              	.LVL235:
 460:Src/app.c     ****     return NULL;
 3233              		.loc 1 460 3 is_stmt 1 view .LVU1000
 460:Src/app.c     ****     return NULL;
 3234              		.loc 1 460 6 is_stmt 0 view .LVU1001
 3235 00ba 0028     		cmp	r0, #0
 3236 00bc F2D0     		beq	.L135
 463:Src/app.c     ****   bq->free_idx = (bq->free_idx + 1) % bq->buffer_nb;
ARM GAS  /tmp/cc2qXJ00.s 			page 124


 3237              		.loc 1 463 3 is_stmt 1 view .LVU1002
 463:Src/app.c     ****   bq->free_idx = (bq->free_idx + 1) % bq->buffer_nb;
 3238              		.loc 1 463 23 is_stmt 0 view .LVU1003
 3239 00be D4F8B420 		ldr	r2, [r4, #180]
 463:Src/app.c     ****   bq->free_idx = (bq->free_idx + 1) % bq->buffer_nb;
 3240              		.loc 1 463 7 view .LVU1004
 3241 00c2 04EB8203 		add	r3, r4, r2, lsl #2
 3242 00c6 D3F8AC50 		ldr	r5, [r3, #172]
 3243              	.LVL236:
 464:Src/app.c     **** 
 3244              		.loc 1 464 3 is_stmt 1 view .LVU1005
 464:Src/app.c     **** 
 3245              		.loc 1 464 37 is_stmt 0 view .LVU1006
 3246 00ca D4F8A830 		ldr	r3, [r4, #168]
 464:Src/app.c     **** 
 3247              		.loc 1 464 32 view .LVU1007
 3248 00ce 0132     		adds	r2, r2, #1
 464:Src/app.c     **** 
 3249              		.loc 1 464 37 view .LVU1008
 3250 00d0 92FBF3F1 		sdiv	r1, r2, r3
 3251 00d4 03FB1122 		mls	r2, r3, r1, r2
 464:Src/app.c     **** 
 3252              		.loc 1 464 16 view .LVU1009
 3253 00d8 C4F8B420 		str	r2, [r4, #180]
 466:Src/app.c     **** }
 3254              		.loc 1 466 3 is_stmt 1 view .LVU1010
 3255              	.LVL237:
 466:Src/app.c     **** }
 3256              		.loc 1 466 3 is_stmt 0 view .LVU1011
 3257              	.LBE326:
 3258              	.LBE325:
 543:Src/app.c     ****     ret = HAL_DCMIPP_PIPE_SetMemoryAddress(CMW_CAMERA_GetDCMIPPHandle(), DCMIPP_PIPE2,
 3259              		.loc 1 543 3 is_stmt 1 view .LVU1012
 543:Src/app.c     ****     ret = HAL_DCMIPP_PIPE_SetMemoryAddress(CMW_CAMERA_GetDCMIPPHandle(), DCMIPP_PIPE2,
 3260              		.loc 1 543 6 is_stmt 0 view .LVU1013
 3261 00dc 002D     		cmp	r5, #0
 3262 00de E1D0     		beq	.L135
 544:Src/app.c     ****                                            DCMIPP_MEMORY_ADDRESS_0, (uint32_t) next_buffer);
 3263              		.loc 1 544 5 is_stmt 1 view .LVU1014
 544:Src/app.c     ****                                            DCMIPP_MEMORY_ADDRESS_0, (uint32_t) next_buffer);
 3264              		.loc 1 544 11 is_stmt 0 view .LVU1015
 3265 00e0 FFF7FEFF 		bl	CMW_CAMERA_GetDCMIPPHandle
 3266              	.LVL238:
 544:Src/app.c     ****                                            DCMIPP_MEMORY_ADDRESS_0, (uint32_t) next_buffer);
 3267              		.loc 1 544 11 discriminator 1 view .LVU1016
 3268 00e4 2B46     		mov	r3, r5
 3269 00e6 0022     		movs	r2, #0
 3270 00e8 3146     		mov	r1, r6
 3271 00ea FFF7FEFF 		bl	HAL_DCMIPP_PIPE_SetMemoryAddress
 3272              	.LVL239:
 546:Src/app.c     ****     /* minus 1 since app_main_pipe_frame_event occur before app_ancillary_pipe_frame_event() */
 3273              		.loc 1 546 5 is_stmt 1 view .LVU1017
 3274 00ee 20B1     		cbz	r0, .L138
 546:Src/app.c     ****     /* minus 1 since app_main_pipe_frame_event occur before app_ancillary_pipe_frame_event() */
 3275              		.loc 1 546 5 is_stmt 0 discriminator 1 view .LVU1018
 3276 00f0 40F22221 		movw	r1, #546
 3277 00f4 174B     		ldr	r3, .L156+4
ARM GAS  /tmp/cc2qXJ00.s 			page 125


 3278 00f6 1E4A     		ldr	r2, .L156+32
 3279 00f8 B0E7     		b	.L155
 3280              	.L138:
 548:Src/app.c     ****     bqueue_put_ready(&nn_input_queue);
 3281              		.loc 1 548 5 is_stmt 1 view .LVU1019
 548:Src/app.c     ****     bqueue_put_ready(&nn_input_queue);
 3282              		.loc 1 548 48 is_stmt 0 view .LVU1020
 3283 00fa 1B4B     		ldr	r3, .L156+24
 548:Src/app.c     ****     bqueue_put_ready(&nn_input_queue);
 3284              		.loc 1 548 31 view .LVU1021
 3285 00fc 1D4A     		ldr	r2, .L156+36
 548:Src/app.c     ****     bqueue_put_ready(&nn_input_queue);
 3286              		.loc 1 548 48 view .LVU1022
 3287 00fe 1B68     		ldr	r3, [r3]
 3288              	.LBB327:
 3289              	.LBB328:
 493:Src/app.c     ****   int ret;
 3290              		.loc 1 493 14 view .LVU1023
 3291 0100 0190     		str	r0, [sp, #4]
 3292              	.LBE328:
 3293              	.LBE327:
 548:Src/app.c     ****     bqueue_put_ready(&nn_input_queue);
 3294              		.loc 1 548 48 view .LVU1024
 3295 0102 013B     		subs	r3, r3, #1
 548:Src/app.c     ****     bqueue_put_ready(&nn_input_queue);
 3296              		.loc 1 548 31 view .LVU1025
 3297 0104 1360     		str	r3, [r2]
 549:Src/app.c     ****   }
 3298              		.loc 1 549 5 is_stmt 1 view .LVU1026
 3299              	.LBB330:
 3300              	.LBI327:
 491:Src/app.c     **** {
 3301              		.loc 1 491 13 view .LVU1027
 3302              	.LVL240:
 3303              	.LBB329:
 493:Src/app.c     ****   int ret;
 3304              		.loc 1 493 3 view .LVU1028
 494:Src/app.c     **** 
 3305              		.loc 1 494 3 view .LVU1029
 496:Src/app.c     ****     ret = xSemaphoreGiveFromISR(bq->ready, &xHigherPriorityTaskWoken);
 3306              		.loc 1 496 3 view .LVU1030
 496:Src/app.c     ****     ret = xSemaphoreGiveFromISR(bq->ready, &xHigherPriorityTaskWoken);
 3307              		.loc 1 496 7 is_stmt 0 view .LVU1031
 3308 0106 FFF7FEFF 		bl	xPortIsInsideInterrupt
 3309              	.LVL241:
 496:Src/app.c     ****     ret = xSemaphoreGiveFromISR(bq->ready, &xHigherPriorityTaskWoken);
 3310              		.loc 1 496 6 discriminator 1 view .LVU1032
 3311 010a 0346     		mov	r3, r0
 3312 010c A0B1     		cbz	r0, .L139
 497:Src/app.c     ****     assert(ret == pdTRUE);
 3313              		.loc 1 497 5 is_stmt 1 view .LVU1033
 497:Src/app.c     ****     assert(ret == pdTRUE);
 3314              		.loc 1 497 11 is_stmt 0 view .LVU1034
 3315 010e 606D     		ldr	r0, [r4, #84]
 3316 0110 01A9     		add	r1, sp, #4
 3317 0112 FFF7FEFF 		bl	xQueueGiveFromISR
 3318              	.LVL242:
ARM GAS  /tmp/cc2qXJ00.s 			page 126


 498:Src/app.c     ****     portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 3319              		.loc 1 498 5 is_stmt 1 view .LVU1035
 3320 0116 0128     		cmp	r0, #1
 3321 0118 04D0     		beq	.L140
 498:Src/app.c     ****     portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 3322              		.loc 1 498 5 is_stmt 0 discriminator 1 view .LVU1036
 3323 011a 4FF4F971 		mov	r1, #498
 3324 011e 164B     		ldr	r3, .L156+40
 3325 0120 164A     		ldr	r2, .L156+44
 3326 0122 9BE7     		b	.L155
 3327              	.L140:
 499:Src/app.c     ****   } else {
 3328              		.loc 1 499 5 is_stmt 1 view .LVU1037
 499:Src/app.c     ****   } else {
 3329              		.loc 1 499 5 view .LVU1038
 3330 0124 019B     		ldr	r3, [sp, #4]
 3331 0126 002B     		cmp	r3, #0
 3332 0128 BCD0     		beq	.L135
 499:Src/app.c     ****   } else {
 3333              		.loc 1 499 5 discriminator 1 view .LVU1039
 3334 012a 4FF0E023 		mov	r3, #-536813568
 3335 012e 4FF08052 		mov	r2, #268435456
 3336 0132 C3F8042D 		str	r2, [r3, #3332]
 3337 0136 B5E7     		b	.L135
 3338              	.LVL243:
 3339              	.L139:
 501:Src/app.c     ****     assert(ret == pdTRUE);
 3340              		.loc 1 501 5 view .LVU1040
 501:Src/app.c     ****     assert(ret == pdTRUE);
 3341              		.loc 1 501 11 is_stmt 0 view .LVU1041
 3342 0138 0246     		mov	r2, r0
 3343 013a 0146     		mov	r1, r0
 3344 013c 606D     		ldr	r0, [r4, #84]
 3345 013e FFF7FEFF 		bl	xQueueGenericSend
 3346              	.LVL244:
 502:Src/app.c     ****   }
 3347              		.loc 1 502 5 is_stmt 1 view .LVU1042
 3348 0142 0128     		cmp	r0, #1
 3349 0144 AED0     		beq	.L135
 502:Src/app.c     ****   }
 3350              		.loc 1 502 5 is_stmt 0 discriminator 1 view .LVU1043
 3351 0146 4FF4FB71 		mov	r1, #502
 3352 014a 0B4B     		ldr	r3, .L156+40
 3353 014c 0B4A     		ldr	r2, .L156+44
 3354 014e 85E7     		b	.L155
 3355              	.L157:
 3356              		.align	2
 3357              	.L156:
 3358 0150 00000000 		.word	lcd_bg_buffer_disp_idx
 3359 0154 00000000 		.word	.LC6
 3360 0158 00000000 		.word	__func__.3
 3361 015c 0E000000 		.word	.LC2
 3362 0160 11000000 		.word	.LC14
 3363 0164 00000000 		.word	__func__.2
 3364 0168 00000000 		.word	frame_event_nb
 3365 016c 00000000 		.word	nn_input_queue
 3366 0170 00000000 		.word	__func__.1
ARM GAS  /tmp/cc2qXJ00.s 			page 127


 3367 0174 00000000 		.word	frame_event_nb_for_resize
 3368 0178 00000000 		.word	.LC1
 3369 017c 00000000 		.word	__func__.0
 3370 0180 00000000 		.word	lcd_bg_buffer_capt_idx
 3371 0184 00701700 		.word	1536000
 3372 0188 00882600 		.word	lcd_bg_buffer
 3373              	.LBE329:
 3374              	.LBE330:
 3375              	.LBE324:
 3376              	.LBE323:
 3377              		.cfi_endproc
 3378              	.LFE7411:
 3380              		.section	.text.CMW_CAMERA_PIPE_VsyncEventCallback,"ax",%progbits
 3381              		.align	1
 3382              		.global	CMW_CAMERA_PIPE_VsyncEventCallback
 3383              		.syntax unified
 3384              		.thumb
 3385              		.thumb_func
 3387              	CMW_CAMERA_PIPE_VsyncEventCallback:
 3388              	.LVL245:
 3389              	.LFB7412:
1489:Src/app.c     **** 
1490:Src/app.c     **** int CMW_CAMERA_PIPE_VsyncEventCallback(uint32_t pipe)
1491:Src/app.c     **** {
 3390              		.loc 1 1491 1 is_stmt 1 view -0
 3391              		.cfi_startproc
 3392              		@ args = 0, pretend = 0, frame = 8
 3393              		@ frame_needed = 0, uses_anonymous_args = 0
1492:Src/app.c     ****   if (pipe == DCMIPP_PIPE1)
 3394              		.loc 1 1492 3 view .LVU1045
 3395              		.loc 1 1492 6 is_stmt 0 view .LVU1046
 3396 0000 0128     		cmp	r0, #1
1491:Src/app.c     ****   if (pipe == DCMIPP_PIPE1)
 3397              		.loc 1 1491 1 view .LVU1047
 3398 0002 07B5     		push	{r0, r1, r2, lr}
 3399              		.cfi_def_cfa_offset 16
 3400              		.cfi_offset 14, -4
 3401              		.loc 1 1492 6 view .LVU1048
 3402 0004 10D1     		bne	.L159
1493:Src/app.c     ****     app_main_pipe_vsync_event();
 3403              		.loc 1 1493 5 is_stmt 1 view .LVU1049
 3404              	.LBB333:
 3405              	.LBI333:
 553:Src/app.c     **** {
 3406              		.loc 1 553 13 view .LVU1050
 3407              	.LBB334:
 555:Src/app.c     ****   int ret;
 3408              		.loc 1 555 3 view .LVU1051
 555:Src/app.c     ****   int ret;
 3409              		.loc 1 555 14 is_stmt 0 view .LVU1052
 3410 0006 0023     		movs	r3, #0
 3411 0008 0193     		str	r3, [sp, #4]
 556:Src/app.c     **** 
 3412              		.loc 1 556 3 is_stmt 1 view .LVU1053
 558:Src/app.c     ****   if (ret == pdTRUE)
 3413              		.loc 1 558 3 view .LVU1054
 558:Src/app.c     ****   if (ret == pdTRUE)
ARM GAS  /tmp/cc2qXJ00.s 			page 128


 3414              		.loc 1 558 9 is_stmt 0 view .LVU1055
 3415 000a 094B     		ldr	r3, .L164
 3416 000c 01A9     		add	r1, sp, #4
 3417 000e 1868     		ldr	r0, [r3]
 3418              	.LVL246:
 558:Src/app.c     ****   if (ret == pdTRUE)
 3419              		.loc 1 558 9 view .LVU1056
 3420 0010 FFF7FEFF 		bl	xQueueGiveFromISR
 3421              	.LVL247:
 559:Src/app.c     ****     portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 3422              		.loc 1 559 3 is_stmt 1 view .LVU1057
 559:Src/app.c     ****     portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 3423              		.loc 1 559 6 is_stmt 0 view .LVU1058
 3424 0014 0128     		cmp	r0, #1
 3425 0016 07D1     		bne	.L159
 560:Src/app.c     **** }
 3426              		.loc 1 560 5 is_stmt 1 view .LVU1059
 560:Src/app.c     **** }
 3427              		.loc 1 560 5 view .LVU1060
 3428 0018 019B     		ldr	r3, [sp, #4]
 3429 001a 2BB1     		cbz	r3, .L159
 560:Src/app.c     **** }
 3430              		.loc 1 560 5 discriminator 1 view .LVU1061
 3431 001c 4FF0E023 		mov	r3, #-536813568
 3432 0020 4FF08052 		mov	r2, #268435456
 3433 0024 C3F8042D 		str	r2, [r3, #3332]
 560:Src/app.c     **** }
 3434              		.loc 1 560 5 discriminator 3 view .LVU1062
 3435              	.LVL248:
 3436              	.L159:
 560:Src/app.c     **** }
 3437              		.loc 1 560 5 is_stmt 0 discriminator 3 view .LVU1063
 3438              	.LBE334:
 3439              	.LBE333:
1494:Src/app.c     **** 
1495:Src/app.c     ****   return HAL_OK;
 3440              		.loc 1 1495 3 is_stmt 1 view .LVU1064
1496:Src/app.c     **** }
 3441              		.loc 1 1496 1 is_stmt 0 view .LVU1065
 3442 0028 0020     		movs	r0, #0
 3443 002a 03B0     		add	sp, sp, #12
 3444              		.cfi_def_cfa_offset 4
 3445              		@ sp needed
 3446 002c 5DF804FB 		ldr	pc, [sp], #4
 3447              	.L165:
 3448              		.align	2
 3449              	.L164:
 3450 0030 00000000 		.word	isp_sem
 3451              		.cfi_endproc
 3452              	.LFE7412:
 3454              		.section	.rodata.__func__.0,"a"
 3457              	__func__.0:
 3458 0000 62717565 		.ascii	"bqueue_put_ready\000"
 3458      75655F70 
 3458      75745F72 
 3458      65616479 
 3458      00
ARM GAS  /tmp/cc2qXJ00.s 			page 129


 3459              		.section	.rodata.__func__.1,"a"
 3462              	__func__.1:
 3463 0000 6170705F 		.ascii	"app_ancillary_pipe_frame_event\000"
 3463      616E6369 
 3463      6C6C6172 
 3463      795F7069 
 3463      70655F66 
 3464              		.section	.rodata.__func__.2,"a"
 3467              	__func__.2:
 3468 0000 72656C6F 		.ascii	"reload_bg_layer\000"
 3468      61645F62 
 3468      675F6C61 
 3468      79657200 
 3469              		.section	.rodata.__func__.3,"a"
 3472              	__func__.3:
 3473 0000 6170705F 		.ascii	"app_main_pipe_frame_event\000"
 3473      6D61696E 
 3473      5F706970 
 3473      655F6672 
 3473      616D655F 
 3474              		.section	.rodata.__func__.5,"a"
 3477              	__func__.5:
 3478 0000 44697370 		.ascii	"Display_init\000"
 3478      6C61795F 
 3478      696E6974 
 3478      00
 3479              		.section	.rodata.__func__.6,"a"
 3482              	__func__.6:
 3483 0000 62717565 		.ascii	"bqueue_put_free\000"
 3483      75655F70 
 3483      75745F66 
 3483      72656500 
 3484              		.section	.rodata.__func__.7,"a"
 3487              	__func__.7:
 3488 0000 62717565 		.ascii	"bqueue_get_ready\000"
 3488      75655F67 
 3488      65745F72 
 3488      65616479 
 3488      00
 3489              		.section	.rodata.__func__.8,"a"
 3492              	__func__.8:
 3493 0000 6E6E5F74 		.ascii	"nn_thread_fct\000"
 3493      68726561 
 3493      645F6663 
 3493      7400
 3494              		.section	.rodata.__func__.9,"a"
 3497              	__func__.9:
 3498 0000 64705F63 		.ascii	"dp_commit_drawing_area\000"
 3498      6F6D6D69 
 3498      745F6472 
 3498      6177696E 
 3498      675F6172 
 3499              		.section	.rodata.__func__.10,"a"
 3502              	__func__.10:
 3503 0000 64705F75 		.ascii	"dp_update_drawing_area\000"
 3503      70646174 
 3503      655F6472 
ARM GAS  /tmp/cc2qXJ00.s 			page 130


 3503      6177696E 
 3503      675F6172 
 3504              		.section	.rodata.__func__.11,"a"
 3507              	__func__.11:
 3508 0000 62757474 		.ascii	"button_init\000"
 3508      6F6E5F69 
 3508      6E697400 
 3509              		.section	.rodata.__func__.12,"a"
 3512              	__func__.12:
 3513 0000 6F6E5F6C 		.ascii	"on_ld_toggle_button_click\000"
 3513      645F746F 
 3513      67676C65 
 3513      5F627574 
 3513      746F6E5F 
 3514              		.section	.rodata.__func__.13,"a"
 3517              	__func__.13:
 3518 0000 6F6E5F70 		.ascii	"on_pd_toggle_button_click\000"
 3518      645F746F 
 3518      67676C65 
 3518      5F627574 
 3518      746F6E5F 
 3519              		.section	.rodata.__func__.14,"a"
 3522              	__func__.14:
 3523 0000 64705F74 		.ascii	"dp_thread_fct\000"
 3523      68726561 
 3523      645F6663 
 3523      7400
 3524              		.section	.rodata.__func__.15,"a"
 3527              	__func__.15:
 3528 0000 6973705F 		.ascii	"isp_thread_fct\000"
 3528      74687265 
 3528      61645F66 
 3528      637400
 3529              		.section	.rodata.__func__.16,"a"
 3532              	__func__.16:
 3533 0000 6170705F 		.ascii	"app_run\000"
 3533      72756E00 
 3534              		.section	.bss.isp_sem_buffer,"aw",%nobits
 3535              		.align	2
 3538              	isp_sem_buffer:
 3539 0000 00000000 		.space	80
 3539      00000000 
 3539      00000000 
 3539      00000000 
 3539      00000000 
 3540              		.section	.bss.isp_sem,"aw",%nobits
 3541              		.align	2
 3544              	isp_sem:
 3545 0000 00000000 		.space	4
 3546              		.section	.bss.isp_thread_stack,"aw",%nobits
 3547              		.align	2
 3550              	isp_thread_stack:
 3551 0000 00000000 		.space	8192
 3551      00000000 
 3551      00000000 
 3551      00000000 
 3551      00000000 
ARM GAS  /tmp/cc2qXJ00.s 			page 131


 3552              		.section	.bss.isp_thread,"aw",%nobits
 3553              		.align	2
 3556              	isp_thread:
 3557 0000 00000000 		.space	96
 3557      00000000 
 3557      00000000 
 3557      00000000 
 3557      00000000 
 3558              		.section	.bss.dp_thread_stack,"aw",%nobits
 3559              		.align	2
 3562              	dp_thread_stack:
 3563 0000 00000000 		.space	8192
 3563      00000000 
 3563      00000000 
 3563      00000000 
 3563      00000000 
 3564              		.section	.bss.dp_thread,"aw",%nobits
 3565              		.align	2
 3568              	dp_thread:
 3569 0000 00000000 		.space	96
 3569      00000000 
 3569      00000000 
 3569      00000000 
 3569      00000000 
 3570              		.section	.bss.nn_thread_stack,"aw",%nobits
 3571              		.align	2
 3574              	nn_thread_stack:
 3575 0000 00000000 		.space	8192
 3575      00000000 
 3575      00000000 
 3575      00000000 
 3575      00000000 
 3576              		.section	.bss.nn_thread,"aw",%nobits
 3577              		.align	2
 3580              	nn_thread:
 3581 0000 00000000 		.space	96
 3581      00000000 
 3581      00000000 
 3581      00000000 
 3581      00000000 
 3582              		.section	.bss.nn_input_queue,"aw",%nobits
 3583              		.align	2
 3586              	nn_input_queue:
 3587 0000 00000000 		.space	188
 3587      00000000 
 3587      00000000 
 3587      00000000 
 3587      00000000 
 3588              		.section	.psram_bss,"aw"
 3589              		.align	5
 3592              	nn_input_buffers:
 3593 0000 00000000 		.space	221184
 3593      00000000 
 3593      00000000 
 3593      00000000 
 3593      00000000 
 3594              		.section	.bss.frame_event_nb_for_resize,"aw",%nobits
ARM GAS  /tmp/cc2qXJ00.s 			page 132


 3595              		.align	2
 3598              	frame_event_nb_for_resize:
 3599 0000 00000000 		.space	4
 3600              		.section	.bss.frame_event_nb,"aw",%nobits
 3601              		.align	2
 3604              	frame_event_nb:
 3605 0000 00000000 		.space	4
 3606              		.section	.psram_bss
 3607              		.align	5
 3610              	screen_buffer:
 3611 36000 00000000 		.space	768000
 3611      00000000 
 3611      00000000 
 3611      00000000 
 3611      00000000 
 3612              		.section	.bss.cpu_load,"aw",%nobits
 3613              		.align	3
 3616              	cpu_load:
 3617 0000 00000000 		.space	224
 3617      00000000 
 3617      00000000 
 3617      00000000 
 3617      00000000 
 3618              		.section	.data.disp,"aw"
 3619              		.align	2
 3622              	disp:
 3623 0000 00000000 		.space	168
 3623      00000000 
 3623      00000000 
 3623      00000000 
 3623      00000000 
 3624 00a8 00000000 		.space	20
 3624      00000000 
 3624      00000000 
 3624      00000000 
 3624      00000000 
 3625 00bc 01000000 		.word	1
 3626 00c0 00000000 		.word	0
 3627 00c4 00000000 		.space	224
 3627      00000000 
 3627      00000000 
 3627      00000000 
 3627      00000000 
 3628              		.section	.bss.lcd_fg_buffer_rd_idx,"aw",%nobits
 3629              		.align	2
 3632              	lcd_fg_buffer_rd_idx:
 3633 0000 00000000 		.space	4
 3634              		.section	.psram_bss
 3635              		.align	5
 3638              	lcd_fg_buffer:
 3639 f1800 00000000 		.space	1536000
 3639      00000000 
 3639      00000000 
 3639      00000000 
 3639      00000000 
 3640              		.section	.bss.lcd_bg_buffer_capt_idx,"aw",%nobits
 3641              		.align	2
ARM GAS  /tmp/cc2qXJ00.s 			page 133


 3644              	lcd_bg_buffer_capt_idx:
 3645 0000 00000000 		.space	4
 3646              		.section	.data.lcd_bg_buffer_disp_idx,"aw"
 3647              		.align	2
 3650              	lcd_bg_buffer_disp_idx:
 3651 0000 01000000 		.word	1
 3652              		.section	.psram_bss
 3653              		.align	5
 3656              	lcd_bg_buffer:
 3657 268800 00000000 		.space	6144000
 3657      00000000 
 3657      00000000 
 3657      00000000 
 3657      00000000 
 3658              		.text
 3659              	.Letext0:
 3660              		.file 4 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 3661              		.file 5 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 3662              		.file 6 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 3663              		.file 7 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 3664              		.file 8 "Lib/AI_Runtime/Npu/ll_aton/ll_aton_NN_interface.h"
 3665              		.file 9 "Lib/FreeRTOS/Source/include/projdefs.h"
 3666              		.file 10 "Lib/FreeRTOS/Source/portable/GCC/ARM_CM55_NTZ/non_secure/portmacrocommon.h"
 3667              		.file 11 "Lib/FreeRTOS/Source/include/FreeRTOS.h"
 3668              		.file 12 "Lib/FreeRTOS/Source/include/task.h"
 3669              		.file 13 "Lib/FreeRTOS/Source/include/queue.h"
 3670              		.file 14 "Lib/FreeRTOS/Source/include/semphr.h"
 3671              		.file 15 "STM32Cube_FW_N6/Drivers/CMSIS/Include/core_cm55.h"
 3672              		.file 16 "STM32Cube_FW_N6/Drivers/CMSIS/Device/ST/STM32N6xx/Include/stm32n657xx.h"
 3673              		.file 17 "STM32Cube_FW_N6/Drivers/CMSIS/Device/ST/STM32N6xx/Include/stm32n6xx.h"
 3674              		.file 18 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_def.h"
 3675              		.file 19 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_gpio.h"
 3676              		.file 20 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_dcmipp.h"
 3677              		.file 21 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_gfxmmu.h"
 3678              		.file 22 "Lib/lib_vision_models_pp/lib_vision_models_pp/Inc/pd_pp_output_if.h"
 3679              		.file 23 "Inc/ld.h"
 3680              		.file 24 "Lib/screenl/Inc/scrl.h"
 3681              		.file 25 "STM32Cube_FW_N6/Drivers/BSP/STM32N6570-DK/stm32n6570_discovery.h"
 3682              		.file 26 "STM32Cube_FW_N6/Utilities/lcd/../Fonts/fonts.h"
 3683              		.file 27 "STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.h"
 3684              		.file 28 "Lib/NemaGFX/include/nema_hal.h"
 3685              		.file 29 "Lib/NemaGFX/include/nema_cmdlist.h"
 3686              		.file 30 "Lib/Camera_Middleware/cmw_camera.h"
 3687              		.file 31 "Inc/app_cam.h"
 3688              		.file 32 "Inc/FreeRTOSConfig.h"
 3689              		.file 33 "Inc/stm32_lcd_ex.h"
 3690              		.file 34 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal.h"
 3691              		.file 35 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-
 3692              		.file 36 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-
 3693              		.file 37 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-
 3694              		.file 38 "<built-in>"
ARM GAS  /tmp/cc2qXJ00.s 			page 134


DEFINED SYMBOLS
                            *ABS*:00000000 app.c
     /tmp/cc2qXJ00.s:26     .text.clamp_point:00000000 $t
     /tmp/cc2qXJ00.s:31     .text.clamp_point:00000000 clamp_point
     /tmp/cc2qXJ00.s:117    .text.isp_thread_fct:00000000 $t
     /tmp/cc2qXJ00.s:122    .text.isp_thread_fct:00000000 isp_thread_fct
     /tmp/cc2qXJ00.s:168    .text.isp_thread_fct:00000028 $d
     /tmp/cc2qXJ00.s:3544   .bss.isp_sem:00000000 isp_sem
     /tmp/cc2qXJ00.s:3527   .rodata.__func__.15:00000000 __func__.15
     /tmp/cc2qXJ00.s:176    .text.on_pd_toggle_button_click:00000000 $t
     /tmp/cc2qXJ00.s:181    .text.on_pd_toggle_button_click:00000000 on_pd_toggle_button_click
     /tmp/cc2qXJ00.s:255    .text.on_pd_toggle_button_click:0000004c $d
     /tmp/cc2qXJ00.s:3517   .rodata.__func__.13:00000000 __func__.13
     /tmp/cc2qXJ00.s:262    .text.on_ld_toggle_button_click:00000000 $t
     /tmp/cc2qXJ00.s:267    .text.on_ld_toggle_button_click:00000000 on_ld_toggle_button_click
     /tmp/cc2qXJ00.s:341    .text.on_ld_toggle_button_click:0000004c $d
     /tmp/cc2qXJ00.s:3512   .rodata.__func__.12:00000000 __func__.12
     /tmp/cc2qXJ00.s:348    .text.button_process:00000000 $t
     /tmp/cc2qXJ00.s:353    .text.button_process:00000000 button_process
     /tmp/cc2qXJ00.s:411    .text.button_init.part.0:00000000 $t
     /tmp/cc2qXJ00.s:416    .text.button_init.part.0:00000000 button_init.part.0
     /tmp/cc2qXJ00.s:439    .text.button_init.part.0:00000010 $d
     /tmp/cc2qXJ00.s:3507   .rodata.__func__.11:00000000 __func__.11
     /tmp/cc2qXJ00.s:446    .text.display_ld_hand:00000000 $t
     /tmp/cc2qXJ00.s:451    .text.display_ld_hand:00000000 display_ld_hand
     /tmp/cc2qXJ00.s:768    .text.display_ld_hand:00000164 $d
     /tmp/cc2qXJ00.s:778    .text.nn_thread_fct:00000000 $t
     /tmp/cc2qXJ00.s:783    .text.nn_thread_fct:00000000 nn_thread_fct
     /tmp/cc2qXJ00.s:1109   .text.nn_thread_fct:00000130 $d
     /tmp/cc2qXJ00.s:3586   .bss.nn_input_queue:00000000 nn_input_queue
     /tmp/cc2qXJ00.s:3492   .rodata.__func__.8:00000000 __func__.8
     /tmp/cc2qXJ00.s:3622   .data.disp:00000000 disp
     /tmp/cc2qXJ00.s:3487   .rodata.__func__.7:00000000 __func__.7
     /tmp/cc2qXJ00.s:3482   .rodata.__func__.6:00000000 __func__.6
     /tmp/cc2qXJ00.s:1124   .text.display_hand:00000000 $t
     /tmp/cc2qXJ00.s:1130   .text.display_hand:00000000 display_hand
     /tmp/cc2qXJ00.s:1624   .text.display_hand:00000230 $d
     /tmp/cc2qXJ00.s:1646   .text.dp_thread_fct:00000000 $t
     /tmp/cc2qXJ00.s:1651   .text.dp_thread_fct:00000000 dp_thread_fct
     /tmp/cc2qXJ00.s:2350   .text.dp_thread_fct:00000270 $d
     /tmp/cc2qXJ00.s:3522   .rodata.__func__.14:00000000 __func__.14
     /tmp/cc2qXJ00.s:3502   .rodata.__func__.10:00000000 __func__.10
     /tmp/cc2qXJ00.s:3616   .bss.cpu_load:00000000 cpu_load
     /tmp/cc2qXJ00.s:3497   .rodata.__func__.9:00000000 __func__.9
     /tmp/cc2qXJ00.s:3632   .bss.lcd_fg_buffer_rd_idx:00000000 lcd_fg_buffer_rd_idx
     /tmp/cc2qXJ00.s:3638   .psram_bss:000f1800 lcd_fg_buffer
     /tmp/cc2qXJ00.s:2397   .text.app_run:00000000 $t
     /tmp/cc2qXJ00.s:2403   .text.app_run:00000000 app_run
     /tmp/cc2qXJ00.s:2986   .text.app_run:0000021c $d
     /tmp/cc2qXJ00.s:3656   .psram_bss:00268800 lcd_bg_buffer
     /tmp/cc2qXJ00.s:3650   .data.lcd_bg_buffer_disp_idx:00000000 lcd_bg_buffer_disp_idx
     /tmp/cc2qXJ00.s:3610   .psram_bss:00036000 screen_buffer
     /tmp/cc2qXJ00.s:3477   .rodata.__func__.5:00000000 __func__.5
     /tmp/cc2qXJ00.s:3532   .rodata.__func__.16:00000000 __func__.16
     /tmp/cc2qXJ00.s:3592   .psram_bss:00000000 nn_input_buffers
     /tmp/cc2qXJ00.s:3538   .bss.isp_sem_buffer:00000000 isp_sem_buffer
     /tmp/cc2qXJ00.s:3580   .bss.nn_thread:00000000 nn_thread
ARM GAS  /tmp/cc2qXJ00.s 			page 135


     /tmp/cc2qXJ00.s:3574   .bss.nn_thread_stack:00000000 nn_thread_stack
     /tmp/cc2qXJ00.s:3568   .bss.dp_thread:00000000 dp_thread
     /tmp/cc2qXJ00.s:3562   .bss.dp_thread_stack:00000000 dp_thread_stack
     /tmp/cc2qXJ00.s:3556   .bss.isp_thread:00000000 isp_thread
     /tmp/cc2qXJ00.s:3550   .bss.isp_thread_stack:00000000 isp_thread_stack
     /tmp/cc2qXJ00.s:3028   .text.CMW_CAMERA_PIPE_FrameEventCallback:00000000 $t
     /tmp/cc2qXJ00.s:3034   .text.CMW_CAMERA_PIPE_FrameEventCallback:00000000 CMW_CAMERA_PIPE_FrameEventCallback
     /tmp/cc2qXJ00.s:3358   .text.CMW_CAMERA_PIPE_FrameEventCallback:00000150 $d
     /tmp/cc2qXJ00.s:3472   .rodata.__func__.3:00000000 __func__.3
     /tmp/cc2qXJ00.s:3467   .rodata.__func__.2:00000000 __func__.2
     /tmp/cc2qXJ00.s:3604   .bss.frame_event_nb:00000000 frame_event_nb
     /tmp/cc2qXJ00.s:3462   .rodata.__func__.1:00000000 __func__.1
     /tmp/cc2qXJ00.s:3598   .bss.frame_event_nb_for_resize:00000000 frame_event_nb_for_resize
     /tmp/cc2qXJ00.s:3457   .rodata.__func__.0:00000000 __func__.0
     /tmp/cc2qXJ00.s:3644   .bss.lcd_bg_buffer_capt_idx:00000000 lcd_bg_buffer_capt_idx
     /tmp/cc2qXJ00.s:3381   .text.CMW_CAMERA_PIPE_VsyncEventCallback:00000000 $t
     /tmp/cc2qXJ00.s:3387   .text.CMW_CAMERA_PIPE_VsyncEventCallback:00000000 CMW_CAMERA_PIPE_VsyncEventCallback
     /tmp/cc2qXJ00.s:3450   .text.CMW_CAMERA_PIPE_VsyncEventCallback:00000030 $d
     /tmp/cc2qXJ00.s:3535   .bss.isp_sem_buffer:00000000 $d
     /tmp/cc2qXJ00.s:3541   .bss.isp_sem:00000000 $d
     /tmp/cc2qXJ00.s:3547   .bss.isp_thread_stack:00000000 $d
     /tmp/cc2qXJ00.s:3553   .bss.isp_thread:00000000 $d
     /tmp/cc2qXJ00.s:3559   .bss.dp_thread_stack:00000000 $d
     /tmp/cc2qXJ00.s:3565   .bss.dp_thread:00000000 $d
     /tmp/cc2qXJ00.s:3571   .bss.nn_thread_stack:00000000 $d
     /tmp/cc2qXJ00.s:3577   .bss.nn_thread:00000000 $d
     /tmp/cc2qXJ00.s:3583   .bss.nn_input_queue:00000000 $d
     /tmp/cc2qXJ00.s:3589   .psram_bss:00000000 $d
     /tmp/cc2qXJ00.s:3595   .bss.frame_event_nb_for_resize:00000000 $d
     /tmp/cc2qXJ00.s:3601   .bss.frame_event_nb:00000000 $d
     /tmp/cc2qXJ00.s:3613   .bss.cpu_load:00000000 $d
     /tmp/cc2qXJ00.s:3619   .data.disp:00000000 $d
     /tmp/cc2qXJ00.s:3629   .bss.lcd_fg_buffer_rd_idx:00000000 $d
     /tmp/cc2qXJ00.s:3641   .bss.lcd_bg_buffer_capt_idx:00000000 $d
     /tmp/cc2qXJ00.s:3647   .data.lcd_bg_buffer_disp_idx:00000000 $d
                           .group:00000000 wm4.0.c552ae9005b0f2cca11872fae5d4b7f2
                           .group:00000000 wm4._newlib_version.h.4.411db44ea2338a62eca2f0777f81481b
                           .group:00000000 wm4.features.h.33.e0c9f337c65cb9f22ed5f23d082bc78b
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.cmsis_gcc.h.26.7a5fd1a99dbedde687044a4433ab3e15
                           .group:00000000 wm4.newlib.h.7.591ac1bd65c1f5b34864757667a05252
                           .group:00000000 wm4.ieeefp.h.77.bd5feb87d9990dd328793ced294f6a87
                           .group:00000000 wm4.config.h.224.10ee1ad185d877c6e334e6581faab44d
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stddef.h.39.0dc9006b34572d4d9cae4c8b422c4971
                           .group:00000000 wm4.cdefs.h.49.70fc7af612f78ddcace70fdd90b5623b
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.158.6f8e08a347b1cff664332fa350bfceb3
                           .group:00000000 wm4._types.h.127.3bdfe3ff8ea2d0985b03d9cbe93480e3
                           .group:00000000 wm4.reent.h.18.25503cdc8b7e55dd0d6ea7b3e5af7a03
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.78.6b87466b04591b1f1cb88c14fdf2ba9e
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.eec8bf00b5213f43d095cb984c5f22e3
ARM GAS  /tmp/cc2qXJ00.s 			page 136


                           .group:00000000 wm4.math.h.13.47cfc34cae8a1153323939c4d32cf7c2
                           .group:00000000 wm4.float.h.29.0e9d9baf95ec39f9555dc80c6e28186b
                           .group:00000000 wm4.syslimits.h.34.de5cbd310098bc5895998b6bde577ed2
                           .group:00000000 wm4.limits.h.9.70fb0ada6f71b16202a66baaa6d8ea70
                           .group:00000000 wm4.limits.h.60.56a1ae353e2028a24298ec6463b8b593
                           .group:00000000 wm4.arm_math_types.h.94.a6c8422e2657ad4cd95bd8be69ba02aa
                           .group:00000000 wm4.stdbool.h.29.c08aa3eec75cf5b9b5003883f43253f0
                           .group:00000000 wm4.arm_mve.h.38.47b22bbd301ce82bc6dafd1a387f65a3
                           .group:00000000 wm4.arm_math_types.h.559.cab78f278b684a3ea2271947c7aea680
                           .group:00000000 wm4.arm_math_memory.h.28.fe8a81c6a9ac13061a5f748732089249
                           .group:00000000 wm4.none.h.185.db055cca83e83f96d8d0bb450fbdf4bb
                           .group:00000000 wm4.utils.h.27.57524573fe37b04009eecf3582a4c591
                           .group:00000000 wm4.fast_math_functions.h.28.8eb7477260c1d6b62047c49a01c4cbaa
                           .group:00000000 wm4.controller_functions.h.28.7bed7d7a726df2f65b8a3d89cff01247
                           .group:00000000 wm4.filtering_functions.h.46.6cf1424fb1f86d5f9958d208b83340a1
                           .group:00000000 wm4.postprocess_conf.h.22.8fb7890cba4665223adeb18e003381c8
                           .group:00000000 wm4.app.h.24.1e91b432981a608d23d4a667d6d768a5
                           .group:00000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.stdio.h.47.dc31ec4674d7bcb103c9f08809549f45
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.87.a1e20d2651f9bfb66e51bfbe849db00a
                           .group:00000000 wm4.app_cam.h.19.2495a46447d71a1025370e29864418f5
                           .group:00000000 wm4.app_config.h.19.88dee04c97f3e42d3acfeeca22b174e5
                           .group:00000000 wm4.assert.h.11.db24e541f16414db224bf986d21017e2
                           .group:00000000 wm4.ll_aton_config.h.20.79eb8be0291ee9086e6be08969d61846
                           .group:00000000 wm4.ll_aton_attributes.h.20.26d469460cb32db5740effdc8cc403f3
                           .group:00000000 wm4.assert.h.11.d99a111e320bc5106fc4046225782672
                           .group:00000000 wm4.errno.h.2.ba016d646105af6cad23be83630b6a3f
                           .group:00000000 wm4.errno.h.9.ae5ea2b0ff9ea6e39e585807e35200d3
                           .group:00000000 wm4.ll_aton_util.h.34.9098eaa90d3d72b819973556e3e5fe44
                           .group:00000000 wm4.FreeRTOS.h.59.647b1b0da38e4e98108aae13c8abe9ee
                           .group:00000000 wm4.FreeRTOSConfig.h.59.2629c72cff9e6dbe880a2dc225eae516
                           .group:00000000 wm4.FreeRTOS.h.80.7742fabaf5accf3762dc12f7f259a8a0
                           .group:00000000 wm4.projdefs.h.30.55a824156f299c075c33148a9fdadb99
                           .group:00000000 wm4.portmacro.h.30.cbb4b2da41f551c2a9904f0d03a1ce3e
                           .group:00000000 wm4.portmacrocommon.h.30.d5cb67896ab50a95311be7e023da5c4f
                           .group:00000000 wm4.portmacro.h.68.4051ecf710d074fb55b16d91dfebeeaa
                           .group:00000000 wm4.portable.h.61.d557c57974d490f056246a26cdcddd6c
                           .group:00000000 wm4.mpu_wrappers.h.30.ccc5f1a6903f941a88c268f5f62af3fe
                           .group:00000000 wm4.portable.h.189.522b8bd52a171d3fd1432ef06d0caa63
                           .group:00000000 wm4.FreeRTOS.h.102.fb871f3e464d99c5a57b3115545a02ad
                           .group:00000000 wm4.list.h.59.bce6419520cd4f5f98779a1530bf2118
                           .group:00000000 wm4.task.h.56.84290139c73b47f5b9aac361361a2a31
                           .group:00000000 wm4.queue.h.68.219f47fba8b59640449b84d04c5bd6d8
                           .group:00000000 wm4.semphr.h.40.c1a9c6f5bf0feb4da0b6a45d234a79d0
                           .group:00000000 wm4.ll_aton_platform.h.20.06ded592ee586a6abb6019a90ebd54df
                           .group:00000000 wm4.stm32n6xx_hal_conf.h.21.004a06df6e15ac197e03f723792da58a
                           .group:00000000 wm4.arm_cmse.h.103.a0d15a79c4c9a67da8d5831704d7248e
                           .group:00000000 wm4.stm32n6xx.h.34.80585dd08aa426c932f6311fdb7386da
                           .group:00000000 wm4.stm32n657xx.h.26.acd272cb67318cc1a4791ce2f0720ca6
                           .group:00000000 wm4.cmsis_version.h.32.0ac195c83bb4537824e6ad1c47474b79
                           .group:00000000 wm4.core_cm55.h.68.832d5cf835639cc0d28219c3d2867330
                           .group:00000000 wm4.core_cm55.h.196.52e437a270752da561676e507b35baeb
                           .group:00000000 wm4.mpu_armv8.h.32.9d72426c8e2b47753456dcb84802c5b3
                           .group:00000000 wm4.pmu_armv8.h.32.eaa95f88a71b29390b135fd81c071b6b
                           .group:00000000 wm4.core_cm55.h.4411.860dad8650880893dd57b815844f7186
ARM GAS  /tmp/cc2qXJ00.s 			page 137


                           .group:00000000 wm4.cachel1_armv7.h.32.abd77761a989e008b0c60891114a33c7
                           .group:00000000 wm4.stm32n657xx.h.575.1c2a5e6bedffc6f9083dcc857bc6d09d
                           .group:00000000 wm4.stm32n6xx.h.114.5cf793d8af485e14f110e3e24bde1aa5
                           .group:00000000 wm4.stm32_hal_legacy.h.22.87fb12bf5a1a1e00fc134f22bc9aa8c4
                           .group:00000000 wm4.stm32n6xx_hal_def.h.63.2cbbf1954826c09c874c4e06e42e8b71
                           .group:00000000 wm4.stm32n6xx_ll_bus.h.38.2366a295ee4cdb04833997d3787fcd2d
                           .group:00000000 wm4.stm32n6xx_ll_rcc.h.21.002e22a16fd7f67dde6dce41e8ba9620
                           .group:00000000 wm4.stm32n6xx_hal_rcc.h.194.1cb1283e40f9bebcd3fba2a9a961838e
                           .group:00000000 wm4.stm32n6xx_hal_rcc_ex.h.21.79aa32178dfef625fbd20d362449acfa
                           .group:00000000 wm4.stm32n6xx_hal_rcc.h.4359.3f0b7ad33826d95438602c9aebc08af9
                           .group:00000000 wm4.stm32n6xx_hal_gpio.h.21.89d54af663b98eb8fc098192053f7eeb
                           .group:00000000 wm4.stm32n6xx_hal_gpio_ex.h.22.4acb2e3511a98bb48b81cfc8e09fd59e
                           .group:00000000 wm4.stm32n6xx_hal_rif.h.21.424d0bafb874a777dee3742a22e13037
                           .group:00000000 wm4.stm32n6xx_hal_dma.h.21.61e48c5c2e8d25d22177834b232fe45c
                           .group:00000000 wm4.stm32n6xx_hal_dma_ex.h.21.66e597beb090a165329d6ccf665e41bc
                           .group:00000000 wm4.stm32n6xx_hal_dma.h.1020.87e2180c009560b617c1f8208140c950
                           .group:00000000 wm4.stm32n6xx_hal_cortex.h.21.f493623cc58f9454ab4eae41e395c5cc
                           .group:00000000 wm4.stm32n6xx_hal_bsec.h.21.61b309e67dd810e28897a01b1b21a97f
                           .group:00000000 wm4.stm32n6xx_hal_dcmipp.h.21.f538bfd785c6469670251ac9bc7af55d
                           .group:00000000 wm4.stm32n6xx_hal_dma2d.h.21.75c8d46cdbb72970123b3f34ae2043d7
                           .group:00000000 wm4.stm32n6xx_hal_exti.h.21.fda87e715ea6b98239ec30171d1df594
                           .group:00000000 wm4.stm32n6xx_hal_gfxmmu.h.21.9784a9103143d48bd3c37389d0e0b8e6
                           .group:00000000 wm4.stm32n6xx_hal_i2c.h.21.3f483626ff64c5bf027265bb2e1d1331
                           .group:00000000 wm4.stm32n6xx_hal_i2c_ex.h.21.79e9196c22282cdaf6b4047893638c45
                           .group:00000000 wm4.stm32n6xx_hal_i2c.h.741.1084702632703acc669e4282b3043372
                           .group:00000000 wm4.stm32n6xx_hal_icache.h.21.194b4ec6e76f32b14f65c85616854850
                           .group:00000000 wm4.stm32n6xx_hal_ltdc.h.21.ae1eb09930e7e550e48e418ac5849e4d
                           .group:00000000 wm4.stm32n6xx_hal_ltdc.h.1002.b13ede7fc94ed5ad1c6768a157d2149a
                           .group:00000000 wm4.stm32n6xx_ll_usb.h.21.d518a5d97876c2ff49040c20a2c4a120
                           .group:00000000 wm4.stm32n6xx_hal_pcd.h.155.27040aac6844effe2af8c180caf1dd2e
                           .group:00000000 wm4.stm32n6xx_hal_pwr.h.21.cdb73e4869c3fed3fc84f901ec0e5f0a
                           .group:00000000 wm4.stm32n6xx_hal_pwr_ex.h.21.1a673224a58b0c1e5fad8eeda6514208
                           .group:00000000 wm4.stm32n6xx_hal_ramcfg.h.21.a62dfbb4d2c14e9a8c634a215e37bd3d
                           .group:00000000 wm4.stm32n6xx_hal_spi.h.21.9f810303326e2d91749800e9911f8e4d
                           .group:00000000 wm4.stm32n6xx_hal_spi.h.906.93ec0695066db4253cdbcb7d84358a0b
                           .group:00000000 wm4.stm32n6xx_hal_tim.h.21.839dd2b2a70382fb2c44f8f293a84d5f
                           .group:00000000 wm4.stm32n6xx_hal_tim_ex.h.21.e372d5ac63c13441211ea4ecbd353150
                           .group:00000000 wm4.stm32n6xx_hal_uart.h.21.230f549bfa0d5ebfd77bfb311b2aca15
                           .group:00000000 wm4.stm32n6xx_hal_uart_ex.h.21.a0d5511e1d0703b7b5278c8f5472b96d
                           .group:00000000 wm4.stm32n6xx_hal_xspi.h.21.e17898be2073b6b6b19faf30b4e304e9
                           .group:00000000 wm4.stm32n6xx_hal_cacheaxi.h.21.7c3375b7903ec42376e4883320997f74
                           .group:00000000 wm4.stm32n6xx_hal_gpu2d.h.21.48d0249122abad294a630c39cc4ebaed
                           .group:00000000 wm4.stm32n6xx_hal.h.81.5e59143eba07faca3e9aeaa5470826c8
                           .group:00000000 wm4.ll_aton_platform.h.288.664a74b8c5792a861b3d52bd39f4a693
                           .group:00000000 wm4.ATON.h.19.cf7dff4c0f1bfe90e42066f604751dc7
                           .group:00000000 wm4.ll_aton_rcompat.h.22.b2bd0d777466a5ac720f3b2429c5fea7
                           .group:00000000 wm4.ll_aton_platform.h.383.f09ccd502bb682b863f991d963ee7462
                           .group:00000000 wm4.ll_aton_osal_freertos.h.62.85a065f77def7f6fef26149f92fe1378
                           .group:00000000 wm4.ll_aton_osal.h.116.bc018513feb9b28713cf2afc78ec679b
                           .group:00000000 wm4.ll_aton_rt_user_api.h.71.e6b7f8d03b2c998f838260ad3cb6cd40
                           .group:00000000 wm4.od_pp_output_if.h.11.62a3da738caf687aa42d96759c237b2c
                           .group:00000000 wm4.mpe_pp_output_if.h.11.db0dd5ceb87072354c56b51e8f9b2a0d
                           .group:00000000 wm4.pd_pp_output_if.h.19.b7de9bd1876930668a82409743b6dbf4
                           .group:00000000 wm4.spe_pp_output_if.h.11.cb67d0d15a71c95e0e8b7fee8a9755fe
                           .group:00000000 wm4.iseg_pp_output_if.h.11.df7e791a4e783022a9fba78cdb1c05d4
                           .group:00000000 wm4.sseg_pp_output_if.h.11.caf00fb1ae24f8dc9c80bee7827b96f2
                           .group:00000000 wm4.app_postprocess.h.49.6186ff44b2c06089fe0297042919e83a
ARM GAS  /tmp/cc2qXJ00.s 			page 138


                           .group:00000000 wm4.isp_conf.h.21.bfb1d020517608810095aa56acf25d1e
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.isp_core.h.109.be5387f515355b6edcb70af2607f9a68
                           .group:00000000 wm4.ld.h.19.4ce791deb5cad1787551e620ef002c56
                           .group:00000000 wm4.cmw_errno.h.21.91021ac9b2627a1ce6b8517d105715d1
                           .group:00000000 wm4.stm32n6570_discovery_conf.h.21.f52c8202689527a3dc0d9c6cba9c0416
                           .group:00000000 wm4.stm32n6570_discovery_errno.h.22.80e523b09444a11ebe4b6e24ae914f0e
                           .group:00000000 wm4.stm32n6570_discovery_bus.h.62.3b5b2c6837f7adeb489604fa214cd371
                           .group:00000000 wm4.cmw_camera.h.33.b34cbb506ffb5bbc0bae0cee9fc48966
                           .group:00000000 wm4.stm32n6570_discovery.h.25.5fc3699797f7c334a2e25a2a6a563b07
                           .group:00000000 wm4.lcd.h.21.98701c105e66fef2e089854e5bc0fe32
                           .group:00000000 wm4.stm32_lcd.h.55.1a04e503950bf34ef3721d2ebb9542fc
                           .group:00000000 wm4.stm32_lcd_ex.h.21.eaf9c9c1000e162e58259e027110f2f5
                           .group:00000000 wm4.utils.h.19.2f7e4a8a839d9215c56961f5a9914d6d
                           .group:00000000 wm4.nema_sys_defs.h.24.0b35b5138cb9b4a3130f5d424bc2bcc0
                           .group:00000000 wm4.nema_hal.h.193.74a3b292db2bcbda0132dae40ae0f4e5
                           .group:00000000 wm4.nema_cmdlist.h.30.a652eb980f08f0ed22ad00119d504926
                           .group:00000000 wm4.nema_graphics.h.61.b3907f86eccb4e55a4b69e8aebdd3657
                           .group:00000000 wm4.nema_blender.h.30.fb13cc9231bd108bca212984b3a891e0
                           .group:00000000 wm4.nema_math.h.30.ef7265c89982f7dae18e3ec2d7f3d003
                           .group:00000000 wm4.nema_version.h.35.6aae27202c190348dff84b89d4c12df7
                           .group:00000000 wm4.nema_error.h.29.50848ed81d21ff4ae4b870fae3681118

UNDEFINED SYMBOLS
xQueueSemaphoreTake
__assert_func
CAM_IspUpdate
xQueueGenericSend
BSP_PB_GetState
cos
sin
UTIL_LCD_FillCircle
UTIL_LCD_DrawLine
ld_bindings_idx
HAL_GetTick
CAM_NNPipe_Start
UTIL_LCD_DrawRect
__aeabi_ul2d
BSP_PB_Init
memcpy
SCRL_SetAddress_NoReload
UTIL_LCD_FillRect
TIM4_Get_Value
ulTaskGetIdleRunTimeCounter
memmove
UTIL_LCD_GetFont
UTIL_LCDEx_PrintfAt
SCRL_ReloadLayer
puts
memset
SCRL_Init
UTIL_LCD_SetLayer
UTIL_LCD_Clear
UTIL_LCD_SetFont
UTIL_LCD_SetTextColor
ARM GAS  /tmp/cc2qXJ00.s 			page 139


xQueueCreateCountingSemaphoreStatic
vQueueDelete
CAM_Init
xQueueCreateMutexStatic
CAM_DisplayPipe_Start
xTaskCreateStatic
Font20
CMW_CAMERA_GetDCMIPPHandle
HAL_DCMIPP_PIPE_SetMemoryAddress
SRCL_Update
xPortIsInsideInterrupt
xQueueGiveFromISR
