ARM GAS  /tmp/ccKMUTYx.s 			page 1


   1              		.arch armv8.1-m.main
   2              		.fpu fpv5-d16
   3              		.arch_extension dsp
   4              		.arch_extension fp
   5              		.arch_extension fp.dp
   6              		.arch_extension mve
   7              		.arch_extension mve.fp
   8              		.eabi_attribute 5, "cortex-m55"
   9              		.eabi_attribute 28, 1
  10              		.eabi_attribute 20, 1
  11              		.eabi_attribute 21, 1
  12              		.eabi_attribute 23, 3
  13              		.eabi_attribute 24, 1
  14              		.eabi_attribute 25, 1
  15              		.eabi_attribute 26, 1
  16              		.eabi_attribute 30, 6
  17              		.eabi_attribute 34, 1
  18              		.eabi_attribute 38, 1
  19              		.eabi_attribute 18, 4
  20              		.file	"nema_hal_freertos.c"
  21              		.text
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.file 1 "Src/nema_hal_freertos.c"
  25              		.section	.data.memPools,"aw"
  26              		.align	2
  29              	memPools:
  30 0000 00001834 		.word	873988096
  31 0004 00000800 		.word	524288
  32 0008 00000000 		.word	0
  33 000c 00000090 		.word	-1879048192
  34 0010 00E22E00 		.word	3072512
  35 0014 00000000 		.word	0
  36 0018 00E22E90 		.word	-1875975680
  37 001c 00DD0500 		.word	384256
  38 0020 00000000 		.word	0
  39              		.section	.bss.ring_buffer_str,"aw",%nobits
  40              		.align	2
  43              	ring_buffer_str:
  44 0000 00000000 		.space	24
  44      00000000 
  44      00000000 
  44      00000000 
  44      00000000 
  45              		.section	.data.last_cl_id,"aw"
  46              		.align	2
  49              	last_cl_id:
  50 0000 FFFFFFFF 		.word	-1
  51              		.section	.bss.nema_mutexes_buffers,"aw",%nobits
  52              		.align	2
  55              	nema_mutexes_buffers:
  56 0000 00000000 		.space	240
  56      00000000 
  56      00000000 
  56      00000000 
  56      00000000 
  57              		.section	.bss.nema_mutexes_ids,"aw",%nobits
ARM GAS  /tmp/ccKMUTYx.s 			page 2


  58              		.align	2
  61              	nema_mutexes_ids:
  62 0000 00000000 		.space	12
  62      00000000 
  62      00000000 
  63              		.section	.bss.nema_irq_sem_buffer,"aw",%nobits
  64              		.align	2
  67              	nema_irq_sem_buffer:
  68 0000 00000000 		.space	80
  68      00000000 
  68      00000000 
  68      00000000 
  68      00000000 
  69              		.section	.bss.nema_irq_sem,"aw",%nobits
  70              		.align	2
  73              	nema_irq_sem:
  74 0000 00000000 		.space	4
  75              		.section	.rodata
  76              		.align	2
  77              	.LC0:
  78 0000 72657420 		.ascii	"ret == pdTRUE\000"
  78      3D3D2070 
  78      64545255 
  78      4500
  79 000e 0000     		.align	2
  80              	.LC1:
  81 0010 5372632F 		.ascii	"Src/nema_hal_freertos.c\000"
  81      6E656D61 
  81      5F68616C 
  81      5F667265 
  81      6572746F 
  82              		.section	.text.HAL_GPU2D_CommandListCpltCallback,"ax",%progbits
  83              		.align	1
  84              		.global	HAL_GPU2D_CommandListCpltCallback
  85              		.syntax unified
  86              		.thumb
  87              		.thumb_func
  89              	HAL_GPU2D_CommandListCpltCallback:
  90              	.LFB843:
   1:Src/nema_hal_freertos.c **** 
   2:Src/nema_hal_freertos.c **** /**
   3:Src/nema_hal_freertos.c ****   ******************************************************************************
   4:Src/nema_hal_freertos.c ****   * @file    nema_hal.c
   5:Src/nema_hal_freertos.c ****   * @author  GPM Application Team
   6:Src/nema_hal_freertos.c ****   * @brief   NemaGFX Interfaces and Platform Specific APIs with ThreadX support.
   7:Src/nema_hal_freertos.c ****   *          This interface support also Bar Metal (no RTOS) configuration.
   8:Src/nema_hal_freertos.c ****   *          This file provides NemaGFX functions to manage the following
   9:Src/nema_hal_freertos.c ****   *          functionalities of the NemaGFX library:
  10:Src/nema_hal_freertos.c ****   *           + Initialization and de-initialization functions
  11:Src/nema_hal_freertos.c ****   *           + GPU2D Registers access operation functions
  12:Src/nema_hal_freertos.c ****   *           + Buffer Creation, Destruction, MMAP and Flusing functions
  13:Src/nema_hal_freertos.c ****   *           + Interrupt management functions
  14:Src/nema_hal_freertos.c ****   *           + Memory management functions
  15:Src/nema_hal_freertos.c ****   *           + Locking/Unlocking resources functions
  16:Src/nema_hal_freertos.c ****   ******************************************************************************
  17:Src/nema_hal_freertos.c ****   * @attention
  18:Src/nema_hal_freertos.c ****   *
ARM GAS  /tmp/ccKMUTYx.s 			page 3


  19:Src/nema_hal_freertos.c ****   * <h2><center>&copy; Copyright (c) 2020-2023 STMicroelectronics.
  20:Src/nema_hal_freertos.c ****   * All rights reserved.</center></h2>
  21:Src/nema_hal_freertos.c ****   *
  22:Src/nema_hal_freertos.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  23:Src/nema_hal_freertos.c ****   * the "License"; You may not use this file except in compliance with the
  24:Src/nema_hal_freertos.c ****   * License. You may obtain a copy of the License at:
  25:Src/nema_hal_freertos.c ****   *                        opensource.org/licenses/BSD-3-Clause
  26:Src/nema_hal_freertos.c ****   *
  27:Src/nema_hal_freertos.c ****   ******************************************************************************
  28:Src/nema_hal_freertos.c ****   */
  29:Src/nema_hal_freertos.c **** 
  30:Src/nema_hal_freertos.c **** #include <stdint.h>
  31:Src/nema_hal_freertos.c **** #include <stdbool.h>
  32:Src/nema_hal_freertos.c **** #include <stdlib.h>
  33:Src/nema_hal_freertos.c **** 
  34:Src/nema_hal_freertos.c **** #include <nema_sys_defs.h>
  35:Src/nema_hal_freertos.c **** #include <nema_core.h>
  36:Src/nema_hal_freertos.c **** 
  37:Src/nema_hal_freertos.c **** #include <assert.h>
  38:Src/nema_hal_freertos.c **** #include <string.h>
  39:Src/nema_hal_freertos.c **** 
  40:Src/nema_hal_freertos.c **** #include <platform_pool_config.h>
  41:Src/nema_hal_freertos.c **** 
  42:Src/nema_hal_freertos.c **** /* ----------------------------------------------------------------------------- */
  43:Src/nema_hal_freertos.c **** /* Configuration Flags                                                           */
  44:Src/nema_hal_freertos.c **** /* ----------------------------------------------------------------------------- */
  45:Src/nema_hal_freertos.c **** #define NEMA_WAIT_IRQ_BINARY_SEMAPHORE  /* Use Binary Semaphores for GPU2D IRQ notification        
  46:Src/nema_hal_freertos.c **** #define NEMA_MULTI_THREAD               /* Multiple thread (concurrent call to NemaGFX APIs) suppor
  47:Src/nema_hal_freertos.c **** #define NEMA_CACHED_MEMORY
  48:Src/nema_hal_freertos.c **** 
  49:Src/nema_hal_freertos.c **** /**** PLATFORM SPECIFIC HEADER FILES ****/
  50:Src/nema_hal_freertos.c **** #include <stm32n6xx_hal.h>
  51:Src/nema_hal_freertos.c **** /****************************************/
  52:Src/nema_hal_freertos.c **** 
  53:Src/nema_hal_freertos.c **** #if defined(NEMA_USE_TSI_MALLOC) && defined(NEMA_MULTI_MEM_POOLS)
  54:Src/nema_hal_freertos.c **** #include "tsi_malloc.h"
  55:Src/nema_hal_freertos.c **** #endif /* NEMA_USE_TSI_MALLOC */
  56:Src/nema_hal_freertos.c **** 
  57:Src/nema_hal_freertos.c **** #include "FreeRTOS.h"
  58:Src/nema_hal_freertos.c **** #include "semphr.h"
  59:Src/nema_hal_freertos.c **** 
  60:Src/nema_hal_freertos.c **** #if (configSUPPORT_STATIC_ALLOCATION == 0)
  61:Src/nema_hal_freertos.c **** #error Dynamic Memory allocation not supported by HAL NEMA!!!
  62:Src/nema_hal_freertos.c **** #endif
  63:Src/nema_hal_freertos.c **** 
  64:Src/nema_hal_freertos.c **** #define RING_SIZE 1024
  65:Src/nema_hal_freertos.c **** 
  66:Src/nema_hal_freertos.c **** static nema_ringbuffer_t ring_buffer_str;
  67:Src/nema_hal_freertos.c **** volatile static int last_cl_id = -1;
  68:Src/nema_hal_freertos.c **** extern GPU2D_HandleTypeDef hgpu2d;
  69:Src/nema_hal_freertos.c **** 
  70:Src/nema_hal_freertos.c **** #if (defined(NEMA_MULTI_PROCESS) || defined(NEMA_MULTI_THREAD))
  71:Src/nema_hal_freertos.c **** static StaticSemaphore_t nema_mutexes_buffers[MUTEX_MAX+1];
  72:Src/nema_hal_freertos.c **** static SemaphoreHandle_t nema_mutexes_ids[MUTEX_MAX+1];
  73:Src/nema_hal_freertos.c **** #endif /* NEMA_MULTI_PROCESS | NEMA_MULTI_THREAD */
  74:Src/nema_hal_freertos.c **** 
  75:Src/nema_hal_freertos.c **** #if defined(NEMA_WAIT_IRQ_BINARY_SEMAPHORE)
ARM GAS  /tmp/ccKMUTYx.s 			page 4


  76:Src/nema_hal_freertos.c **** static StaticSemaphore_t nema_irq_sem_buffer;
  77:Src/nema_hal_freertos.c **** static SemaphoreHandle_t nema_irq_sem;  // Semaphore struct
  78:Src/nema_hal_freertos.c **** #endif /* NEMA_WAIT_IRQ_BINARY_SEMAPHORE */
  79:Src/nema_hal_freertos.c **** 
  80:Src/nema_hal_freertos.c **** #if (USE_HAL_GPU2D_REGISTER_CALLBACKS == 1)
  81:Src/nema_hal_freertos.c **** static void GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
  82:Src/nema_hal_freertos.c **** #else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
  83:Src/nema_hal_freertos.c **** void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
  84:Src/nema_hal_freertos.c **** #endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  85:Src/nema_hal_freertos.c **** {
  91              		.loc 1 85 1
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 16
  94              		@ frame_needed = 1, uses_anonymous_args = 0
  95 0000 80B5     		push	{r7, lr}
  96              		.cfi_def_cfa_offset 8
  97              		.cfi_offset 7, -8
  98              		.cfi_offset 14, -4
  99 0002 84B0     		sub	sp, sp, #16
 100              		.cfi_def_cfa_offset 24
 101 0004 00AF     		add	r7, sp, #0
 102              		.cfi_def_cfa_register 7
 103 0006 7860     		str	r0, [r7, #4]
 104 0008 3960     		str	r1, [r7]
  86:Src/nema_hal_freertos.c ****     BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 105              		.loc 1 86 16
 106 000a 0023     		movs	r3, #0
 107 000c BB60     		str	r3, [r7, #8]
  87:Src/nema_hal_freertos.c ****     int ret;
  88:Src/nema_hal_freertos.c **** 
  89:Src/nema_hal_freertos.c ****     /* Prevent unused argument(s) compilation warning */
  90:Src/nema_hal_freertos.c ****     UNUSED(hgpu2d);
  91:Src/nema_hal_freertos.c **** 
  92:Src/nema_hal_freertos.c ****     last_cl_id = CmdListID;
 108              		.loc 1 92 16
 109 000e 3B68     		ldr	r3, [r7]
 110 0010 0F4A     		ldr	r2, .L5
 111 0012 1360     		str	r3, [r2]
  93:Src/nema_hal_freertos.c **** #if defined(NEMA_WAIT_IRQ_BINARY_SEMAPHORE)
  94:Src/nema_hal_freertos.c ****     ret = xSemaphoreGiveFromISR(nema_irq_sem, &xHigherPriorityTaskWoken);
 112              		.loc 1 94 11
 113 0014 0F4B     		ldr	r3, .L5+4
 114 0016 1B68     		ldr	r3, [r3]
 115 0018 07F10802 		add	r2, r7, #8
 116 001c 1146     		mov	r1, r2
 117 001e 1846     		mov	r0, r3
 118 0020 FFF7FEFF 		bl	xQueueGiveFromISR
 119 0024 F860     		str	r0, [r7, #12]
  95:Src/nema_hal_freertos.c ****     assert(ret == pdTRUE);
 120              		.loc 1 95 5
 121 0026 FB68     		ldr	r3, [r7, #12]
 122 0028 012B     		cmp	r3, #1
 123 002a 05D0     		beq	.L2
 124              		.loc 1 95 5 is_stmt 0 discriminator 1
 125 002c 0A4B     		ldr	r3, .L5+8
 126 002e 0B4A     		ldr	r2, .L5+12
 127 0030 5F21     		movs	r1, #95
ARM GAS  /tmp/ccKMUTYx.s 			page 5


 128 0032 0B48     		ldr	r0, .L5+16
 129 0034 FFF7FEFF 		bl	__assert_func
 130              	.L2:
  96:Src/nema_hal_freertos.c ****     portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 131              		.loc 1 96 5 is_stmt 1
 132 0038 BB68     		ldr	r3, [r7, #8]
 133 003a 002B     		cmp	r3, #0
 134 003c 03D0     		beq	.L4
 135              		.loc 1 96 5 is_stmt 0 discriminator 1
 136 003e 094B     		ldr	r3, .L5+20
 137 0040 4FF08052 		mov	r2, #268435456
 138 0044 1A60     		str	r2, [r3]
 139              	.L4:
  97:Src/nema_hal_freertos.c **** #endif /* NEMA_WAIT_IRQ_BINARY_SEMAPHORE */
  98:Src/nema_hal_freertos.c **** }
 140              		.loc 1 98 1 is_stmt 1
 141 0046 00BF     		nop
 142 0048 1037     		adds	r7, r7, #16
 143              		.cfi_def_cfa_offset 8
 144 004a BD46     		mov	sp, r7
 145              		.cfi_def_cfa_register 13
 146              		@ sp needed
 147 004c 80BD     		pop	{r7, pc}
 148              	.L6:
 149 004e 00BF     		.align	2
 150              	.L5:
 151 0050 00000000 		.word	last_cl_id
 152 0054 00000000 		.word	nema_irq_sem
 153 0058 00000000 		.word	.LC0
 154 005c 00000000 		.word	__func__.4
 155 0060 10000000 		.word	.LC1
 156 0064 04ED00E0 		.word	-536810236
 157              		.cfi_endproc
 158              	.LFE843:
 160              		.section	.rodata
 161              		.align	2
 162              	.LC2:
 163 0028 6E656D61 		.ascii	"nema_mutexes_ids[MUTEX_RB]\000"
 163      5F6D7574 
 163      65786573 
 163      5F696473 
 163      5B4D5554 
 164 0043 00       		.align	2
 165              	.LC3:
 166 0044 6E656D61 		.ascii	"nema_mutexes_ids[MUTEX_MALLOC]\000"
 166      5F6D7574 
 166      65786573 
 166      5F696473 
 166      5B4D5554 
 167 0063 00       		.align	2
 168              	.LC4:
 169 0064 6E656D61 		.ascii	"nema_mutexes_ids[MUTEX_FLUSH]\000"
 169      5F6D7574 
 169      65786573 
 169      5F696473 
 169      5B4D5554 
 170 0082 0000     		.align	2
ARM GAS  /tmp/ccKMUTYx.s 			page 6


 171              	.LC5:
 172 0084 6E656D61 		.ascii	"nema_irq_sem\000"
 172      5F697271 
 172      5F73656D 
 172      00
 173 0091 000000   		.align	2
 174              	.LC6:
 175 0094 72696E67 		.ascii	"ring_buffer_str.bo.base_virt\000"
 175      5F627566 
 175      6665725F 
 175      7374722E 
 175      626F2E62 
 176              		.section	.text.nema_sys_init,"ax",%progbits
 177              		.align	1
 178              		.global	nema_sys_init
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 183              	nema_sys_init:
 184              	.LFB844:
  99:Src/nema_hal_freertos.c **** 
 100:Src/nema_hal_freertos.c **** int32_t nema_sys_init(void)
 101:Src/nema_hal_freertos.c **** {
 185              		.loc 1 101 1
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 24
 188              		@ frame_needed = 1, uses_anonymous_args = 0
 189 0000 90B5     		push	{r4, r7, lr}
 190              		.cfi_def_cfa_offset 12
 191              		.cfi_offset 4, -12
 192              		.cfi_offset 7, -8
 193              		.cfi_offset 14, -4
 194 0002 89B0     		sub	sp, sp, #36
 195              		.cfi_def_cfa_offset 48
 196 0004 02AF     		add	r7, sp, #8
 197              		.cfi_def_cfa 7, 40
 102:Src/nema_hal_freertos.c ****     int ret;
 103:Src/nema_hal_freertos.c ****     /* Setup GPU2D Callback */
 104:Src/nema_hal_freertos.c **** #if (USE_HAL_GPU2D_REGISTER_CALLBACKS == 1)
 105:Src/nema_hal_freertos.c ****     /* Register Command List Comlete Callback */
 106:Src/nema_hal_freertos.c ****     HAL_GPU2D_RegisterCommandListCpltCallback(&hgpu2d, GPU2D_CommandListCpltCallback);
 107:Src/nema_hal_freertos.c **** #endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
 108:Src/nema_hal_freertos.c **** 
 109:Src/nema_hal_freertos.c **** #if (defined(NEMA_MULTI_PROCESS) || defined(NEMA_MULTI_THREAD))
 110:Src/nema_hal_freertos.c ****     /* Create Lock ressource */
 111:Src/nema_hal_freertos.c ****     nema_mutexes_ids[MUTEX_RB] = xSemaphoreCreateMutexStatic(&nema_mutexes_buffers[MUTEX_RB]);
 198              		.loc 1 111 34
 199 0006 4D49     		ldr	r1, .L17
 200 0008 0120     		movs	r0, #1
 201 000a FFF7FEFF 		bl	xQueueCreateMutexStatic
 202 000e 0346     		mov	r3, r0
 203              		.loc 1 111 32 discriminator 1
 204 0010 4B4A     		ldr	r2, .L17+4
 205 0012 1360     		str	r3, [r2]
 112:Src/nema_hal_freertos.c ****     assert(nema_mutexes_ids[MUTEX_RB]);
 206              		.loc 1 112 5
 207 0014 4A4B     		ldr	r3, .L17+4
ARM GAS  /tmp/ccKMUTYx.s 			page 7


 208 0016 1B68     		ldr	r3, [r3]
 209 0018 002B     		cmp	r3, #0
 210 001a 05D1     		bne	.L8
 211              		.loc 1 112 5 is_stmt 0 discriminator 1
 212 001c 494B     		ldr	r3, .L17+8
 213 001e 4A4A     		ldr	r2, .L17+12
 214 0020 7021     		movs	r1, #112
 215 0022 4A48     		ldr	r0, .L17+16
 216 0024 FFF7FEFF 		bl	__assert_func
 217              	.L8:
 113:Src/nema_hal_freertos.c ****     nema_mutexes_ids[MUTEX_MALLOC] = xSemaphoreCreateMutexStatic(&nema_mutexes_buffers[MUTEX_MALLOC
 218              		.loc 1 113 38 is_stmt 1
 219 0028 4949     		ldr	r1, .L17+20
 220 002a 0120     		movs	r0, #1
 221 002c FFF7FEFF 		bl	xQueueCreateMutexStatic
 222 0030 0346     		mov	r3, r0
 223              		.loc 1 113 36 discriminator 1
 224 0032 434A     		ldr	r2, .L17+4
 225 0034 5360     		str	r3, [r2, #4]
 114:Src/nema_hal_freertos.c ****     assert(nema_mutexes_ids[MUTEX_MALLOC]);
 226              		.loc 1 114 5
 227 0036 424B     		ldr	r3, .L17+4
 228 0038 5B68     		ldr	r3, [r3, #4]
 229 003a 002B     		cmp	r3, #0
 230 003c 05D1     		bne	.L9
 231              		.loc 1 114 5 is_stmt 0 discriminator 1
 232 003e 454B     		ldr	r3, .L17+24
 233 0040 414A     		ldr	r2, .L17+12
 234 0042 7221     		movs	r1, #114
 235 0044 4148     		ldr	r0, .L17+16
 236 0046 FFF7FEFF 		bl	__assert_func
 237              	.L9:
 115:Src/nema_hal_freertos.c ****     nema_mutexes_ids[MUTEX_FLUSH] = xSemaphoreCreateMutexStatic(&nema_mutexes_buffers[MUTEX_FLUSH])
 238              		.loc 1 115 37 is_stmt 1
 239 004a 4349     		ldr	r1, .L17+28
 240 004c 0120     		movs	r0, #1
 241 004e FFF7FEFF 		bl	xQueueCreateMutexStatic
 242 0052 0346     		mov	r3, r0
 243              		.loc 1 115 35 discriminator 1
 244 0054 3A4A     		ldr	r2, .L17+4
 245 0056 9360     		str	r3, [r2, #8]
 116:Src/nema_hal_freertos.c ****     assert(nema_mutexes_ids[MUTEX_FLUSH]);
 246              		.loc 1 116 5
 247 0058 394B     		ldr	r3, .L17+4
 248 005a 9B68     		ldr	r3, [r3, #8]
 249 005c 002B     		cmp	r3, #0
 250 005e 05D1     		bne	.L10
 251              		.loc 1 116 5 is_stmt 0 discriminator 1
 252 0060 3E4B     		ldr	r3, .L17+32
 253 0062 394A     		ldr	r2, .L17+12
 254 0064 7421     		movs	r1, #116
 255 0066 3948     		ldr	r0, .L17+16
 256 0068 FFF7FEFF 		bl	__assert_func
 257              	.L10:
 117:Src/nema_hal_freertos.c **** #endif /* NEMA_MULTI_PROCESS | NEMA_MULTI_THREAD */
 118:Src/nema_hal_freertos.c **** 
 119:Src/nema_hal_freertos.c **** #if defined(NEMA_WAIT_IRQ_BINARY_SEMAPHORE)
ARM GAS  /tmp/ccKMUTYx.s 			page 8


 120:Src/nema_hal_freertos.c ****     /* Create IRQ semaphore */
 121:Src/nema_hal_freertos.c ****     nema_irq_sem = xSemaphoreCreateCountingStatic(1, 0, &nema_irq_sem_buffer);
 258              		.loc 1 121 20 is_stmt 1
 259 006c 3C4A     		ldr	r2, .L17+36
 260 006e 0021     		movs	r1, #0
 261 0070 0120     		movs	r0, #1
 262 0072 FFF7FEFF 		bl	xQueueCreateCountingSemaphoreStatic
 263 0076 0346     		mov	r3, r0
 264              		.loc 1 121 18 discriminator 1
 265 0078 3A4A     		ldr	r2, .L17+40
 266 007a 1360     		str	r3, [r2]
 122:Src/nema_hal_freertos.c ****     assert(nema_irq_sem);
 267              		.loc 1 122 5
 268 007c 394B     		ldr	r3, .L17+40
 269 007e 1B68     		ldr	r3, [r3]
 270 0080 002B     		cmp	r3, #0
 271 0082 05D1     		bne	.L11
 272              		.loc 1 122 5 is_stmt 0 discriminator 1
 273 0084 384B     		ldr	r3, .L17+44
 274 0086 304A     		ldr	r2, .L17+12
 275 0088 7A21     		movs	r1, #122
 276 008a 3048     		ldr	r0, .L17+16
 277 008c FFF7FEFF 		bl	__assert_func
 278              	.L11:
 279              	.LBB18:
 123:Src/nema_hal_freertos.c **** #endif /* NEMA_WAIT_IRQ_BINARY_SEMAPHORE */
 124:Src/nema_hal_freertos.c **** 
 125:Src/nema_hal_freertos.c **** #if defined(NEMA_USE_TSI_MALLOC) && defined(NEMA_MULTI_MEM_POOLS)
 126:Src/nema_hal_freertos.c ****     for (int pool_id=0; pool_id < NEMA_MULTI_MEM_POOLS_CNT; pool_id++)
 280              		.loc 1 126 14 is_stmt 1
 281 0090 0023     		movs	r3, #0
 282 0092 7B61     		str	r3, [r7, #20]
 283              		.loc 1 126 5
 284 0094 25E0     		b	.L12
 285              	.L13:
 127:Src/nema_hal_freertos.c ****     {
 128:Src/nema_hal_freertos.c ****         tsi_malloc_init_pool(pool_id, (void*)memPools[pool_id].base_addr, memPools[pool_id].base_ad
 286              		.loc 1 128 63
 287 0096 3549     		ldr	r1, .L17+48
 288 0098 7A69     		ldr	r2, [r7, #20]
 289 009a 1346     		mov	r3, r2
 290 009c 5B00     		lsls	r3, r3, #1
 291 009e 1344     		add	r3, r3, r2
 292 00a0 9B00     		lsls	r3, r3, #2
 293 00a2 0B44     		add	r3, r3, r1
 294 00a4 1B68     		ldr	r3, [r3]
 295              		.loc 1 128 9
 296 00a6 1C46     		mov	r4, r3
 297              		.loc 1 128 92
 298 00a8 3049     		ldr	r1, .L17+48
 299 00aa 7A69     		ldr	r2, [r7, #20]
 300 00ac 1346     		mov	r3, r2
 301 00ae 5B00     		lsls	r3, r3, #1
 302 00b0 1344     		add	r3, r3, r2
 303 00b2 9B00     		lsls	r3, r3, #2
 304 00b4 0B44     		add	r3, r3, r1
 305 00b6 1968     		ldr	r1, [r3]
ARM GAS  /tmp/ccKMUTYx.s 			page 9


 306              		.loc 1 128 121
 307 00b8 2C48     		ldr	r0, .L17+48
 308 00ba 7A69     		ldr	r2, [r7, #20]
 309 00bc 1346     		mov	r3, r2
 310 00be 5B00     		lsls	r3, r3, #1
 311 00c0 1344     		add	r3, r3, r2
 312 00c2 9B00     		lsls	r3, r3, #2
 313 00c4 0344     		add	r3, r3, r0
 314 00c6 0433     		adds	r3, r3, #4
 315 00c8 1B68     		ldr	r3, [r3]
 316              		.loc 1 128 9
 317 00ca 1A46     		mov	r2, r3
 318 00cc 0123     		movs	r3, #1
 319 00ce 0093     		str	r3, [sp]
 320 00d0 1346     		mov	r3, r2
 321 00d2 0A46     		mov	r2, r1
 322 00d4 2146     		mov	r1, r4
 323 00d6 7869     		ldr	r0, [r7, #20]
 324 00d8 FFF7FEFF 		bl	tsi_malloc_init_pool
 126:Src/nema_hal_freertos.c ****     {
 325              		.loc 1 126 68 discriminator 3
 326 00dc 7B69     		ldr	r3, [r7, #20]
 327 00de 0133     		adds	r3, r3, #1
 328 00e0 7B61     		str	r3, [r7, #20]
 329              	.L12:
 126:Src/nema_hal_freertos.c ****     {
 330              		.loc 1 126 33 discriminator 1
 331 00e2 7B69     		ldr	r3, [r7, #20]
 332 00e4 022B     		cmp	r3, #2
 333 00e6 D6DD     		ble	.L13
 334              	.LBE18:
 129:Src/nema_hal_freertos.c ****     }
 130:Src/nema_hal_freertos.c **** #endif /* NEMA_USE_TSI_MALLOC & NEMA_MULTI_MEM_POOLS */
 131:Src/nema_hal_freertos.c **** 
 132:Src/nema_hal_freertos.c ****     // Allocate ring_buffer memory
 133:Src/nema_hal_freertos.c ****     ring_buffer_str.bo = nema_buffer_create(RING_SIZE);
 335              		.loc 1 133 26
 336 00e8 214C     		ldr	r4, .L17+52
 337 00ea 3B46     		mov	r3, r7
 338 00ec 4FF48061 		mov	r1, #1024
 339 00f0 1846     		mov	r0, r3
 340 00f2 FFF7FEFF 		bl	nema_buffer_create
 341 00f6 3B46     		mov	r3, r7
 342 00f8 0FCB     		ldm	r3, {r0, r1, r2, r3}
 343 00fa 84E80F00 		stm	r4, {r0, r1, r2, r3}
 134:Src/nema_hal_freertos.c ****     assert(ring_buffer_str.bo.base_virt);
 344              		.loc 1 134 5
 345 00fe 1C4B     		ldr	r3, .L17+52
 346 0100 9B68     		ldr	r3, [r3, #8]
 347 0102 002B     		cmp	r3, #0
 348 0104 05D1     		bne	.L14
 349              		.loc 1 134 5 is_stmt 0 discriminator 1
 350 0106 1B4B     		ldr	r3, .L17+56
 351 0108 0F4A     		ldr	r2, .L17+12
 352 010a 8621     		movs	r1, #134
 353 010c 0F48     		ldr	r0, .L17+16
 354 010e FFF7FEFF 		bl	__assert_func
ARM GAS  /tmp/ccKMUTYx.s 			page 10


 355              	.L14:
 135:Src/nema_hal_freertos.c **** 
 136:Src/nema_hal_freertos.c ****     (void)nema_buffer_map(&ring_buffer_str.bo);
 356              		.loc 1 136 11 is_stmt 1
 357 0112 1748     		ldr	r0, .L17+52
 358 0114 FFF7FEFF 		bl	nema_buffer_map
 137:Src/nema_hal_freertos.c **** 
 138:Src/nema_hal_freertos.c ****     // Initialize Ring Buffer
 139:Src/nema_hal_freertos.c ****     ret = nema_rb_init(&ring_buffer_str, 1);
 359              		.loc 1 139 11
 360 0118 0121     		movs	r1, #1
 361 011a 1548     		ldr	r0, .L17+52
 362 011c FFF7FEFF 		bl	nema_rb_init
 363 0120 3861     		str	r0, [r7, #16]
 140:Src/nema_hal_freertos.c ****     if (ret < 0)
 364              		.loc 1 140 8
 365 0122 3B69     		ldr	r3, [r7, #16]
 366 0124 002B     		cmp	r3, #0
 367 0126 01DA     		bge	.L15
 141:Src/nema_hal_freertos.c ****     {
 142:Src/nema_hal_freertos.c ****         return ret;
 368              		.loc 1 142 16
 369 0128 3B69     		ldr	r3, [r7, #16]
 370 012a 03E0     		b	.L16
 371              	.L15:
 143:Src/nema_hal_freertos.c ****     }
 144:Src/nema_hal_freertos.c **** 
 145:Src/nema_hal_freertos.c ****     /* Reset last_cl_id counter */
 146:Src/nema_hal_freertos.c ****     last_cl_id = 0;
 372              		.loc 1 146 16
 373 012c 124B     		ldr	r3, .L17+60
 374 012e 0022     		movs	r2, #0
 375 0130 1A60     		str	r2, [r3]
 147:Src/nema_hal_freertos.c **** 
 148:Src/nema_hal_freertos.c ****     return 0;
 376              		.loc 1 148 12
 377 0132 0023     		movs	r3, #0
 378              	.L16:
 149:Src/nema_hal_freertos.c **** }
 379              		.loc 1 149 1
 380 0134 1846     		mov	r0, r3
 381 0136 1C37     		adds	r7, r7, #28
 382              		.cfi_def_cfa_offset 12
 383 0138 BD46     		mov	sp, r7
 384              		.cfi_def_cfa_register 13
 385              		@ sp needed
 386 013a 90BD     		pop	{r4, r7, pc}
 387              	.L18:
 388              		.align	2
 389              	.L17:
 390 013c 00000000 		.word	nema_mutexes_buffers
 391 0140 00000000 		.word	nema_mutexes_ids
 392 0144 28000000 		.word	.LC2
 393 0148 00000000 		.word	__func__.3
 394 014c 10000000 		.word	.LC1
 395 0150 50000000 		.word	nema_mutexes_buffers+80
 396 0154 44000000 		.word	.LC3
ARM GAS  /tmp/ccKMUTYx.s 			page 11


 397 0158 A0000000 		.word	nema_mutexes_buffers+160
 398 015c 64000000 		.word	.LC4
 399 0160 00000000 		.word	nema_irq_sem_buffer
 400 0164 00000000 		.word	nema_irq_sem
 401 0168 84000000 		.word	.LC5
 402 016c 00000000 		.word	memPools
 403 0170 00000000 		.word	ring_buffer_str
 404 0174 94000000 		.word	.LC6
 405 0178 00000000 		.word	last_cl_id
 406              		.cfi_endproc
 407              	.LFE844:
 409              		.section	.text.nema_wait_irq,"ax",%progbits
 410              		.align	1
 411              		.global	nema_wait_irq
 412              		.syntax unified
 413              		.thumb
 414              		.thumb_func
 416              	nema_wait_irq:
 417              	.LFB845:
 150:Src/nema_hal_freertos.c **** 
 151:Src/nema_hal_freertos.c **** int nema_wait_irq(void)
 152:Src/nema_hal_freertos.c **** {
 418              		.loc 1 152 1
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 8
 421              		@ frame_needed = 1, uses_anonymous_args = 0
 422 0000 80B5     		push	{r7, lr}
 423              		.cfi_def_cfa_offset 8
 424              		.cfi_offset 7, -8
 425              		.cfi_offset 14, -4
 426 0002 82B0     		sub	sp, sp, #8
 427              		.cfi_def_cfa_offset 16
 428 0004 00AF     		add	r7, sp, #0
 429              		.cfi_def_cfa_register 7
 153:Src/nema_hal_freertos.c **** #if defined(NEMA_WAIT_IRQ_BINARY_SEMAPHORE)
 154:Src/nema_hal_freertos.c ****     int ret;
 155:Src/nema_hal_freertos.c **** 
 156:Src/nema_hal_freertos.c ****     ret = xSemaphoreTake(nema_irq_sem, portMAX_DELAY);
 430              		.loc 1 156 11
 431 0006 0A4B     		ldr	r3, .L23
 432 0008 1B68     		ldr	r3, [r3]
 433 000a 4FF0FF31 		mov	r1, #-1
 434 000e 1846     		mov	r0, r3
 435 0010 FFF7FEFF 		bl	xQueueSemaphoreTake
 436 0014 7860     		str	r0, [r7, #4]
 157:Src/nema_hal_freertos.c ****     ret = ret == pdTRUE ? 0 : -1;
 437              		.loc 1 157 29
 438 0016 7B68     		ldr	r3, [r7, #4]
 439 0018 012B     		cmp	r3, #1
 440 001a 01D1     		bne	.L20
 441              		.loc 1 157 29 is_stmt 0 discriminator 1
 442 001c 0023     		movs	r3, #0
 443 001e 01E0     		b	.L21
 444              	.L20:
 445              		.loc 1 157 29 discriminator 2
 446 0020 4FF0FF33 		mov	r3, #-1
 447              	.L21:
ARM GAS  /tmp/ccKMUTYx.s 			page 12


 448              		.loc 1 157 9 is_stmt 1 discriminator 4
 449 0024 7B60     		str	r3, [r7, #4]
 158:Src/nema_hal_freertos.c **** #endif
 159:Src/nema_hal_freertos.c **** 
 160:Src/nema_hal_freertos.c ****     return 0;
 450              		.loc 1 160 12
 451 0026 0023     		movs	r3, #0
 161:Src/nema_hal_freertos.c **** }
 452              		.loc 1 161 1
 453 0028 1846     		mov	r0, r3
 454 002a 0837     		adds	r7, r7, #8
 455              		.cfi_def_cfa_offset 8
 456 002c BD46     		mov	sp, r7
 457              		.cfi_def_cfa_register 13
 458              		@ sp needed
 459 002e 80BD     		pop	{r7, pc}
 460              	.L24:
 461              		.align	2
 462              	.L23:
 463 0030 00000000 		.word	nema_irq_sem
 464              		.cfi_endproc
 465              	.LFE845:
 467              		.section	.text.nema_wait_irq_cl,"ax",%progbits
 468              		.align	1
 469              		.global	nema_wait_irq_cl
 470              		.syntax unified
 471              		.thumb
 472              		.thumb_func
 474              	nema_wait_irq_cl:
 475              	.LFB846:
 162:Src/nema_hal_freertos.c **** 
 163:Src/nema_hal_freertos.c **** int nema_wait_irq_cl(int cl_id)
 164:Src/nema_hal_freertos.c **** {
 476              		.loc 1 164 1
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 8
 479              		@ frame_needed = 1, uses_anonymous_args = 0
 480 0000 80B5     		push	{r7, lr}
 481              		.cfi_def_cfa_offset 8
 482              		.cfi_offset 7, -8
 483              		.cfi_offset 14, -4
 484 0002 82B0     		sub	sp, sp, #8
 485              		.cfi_def_cfa_offset 16
 486 0004 00AF     		add	r7, sp, #0
 487              		.cfi_def_cfa_register 7
 488 0006 7860     		str	r0, [r7, #4]
 165:Src/nema_hal_freertos.c ****     while (last_cl_id < cl_id)
 489              		.loc 1 165 11
 490 0008 01E0     		b	.L26
 491              	.L27:
 166:Src/nema_hal_freertos.c ****     {
 167:Src/nema_hal_freertos.c ****         (void)nema_wait_irq();
 492              		.loc 1 167 15
 493 000a FFF7FEFF 		bl	nema_wait_irq
 494              	.L26:
 165:Src/nema_hal_freertos.c ****     while (last_cl_id < cl_id)
 495              		.loc 1 165 23
ARM GAS  /tmp/ccKMUTYx.s 			page 13


 496 000e 054B     		ldr	r3, .L29
 497 0010 1B68     		ldr	r3, [r3]
 498 0012 7A68     		ldr	r2, [r7, #4]
 499 0014 9A42     		cmp	r2, r3
 500 0016 F8DC     		bgt	.L27
 168:Src/nema_hal_freertos.c ****     }
 169:Src/nema_hal_freertos.c **** 
 170:Src/nema_hal_freertos.c ****     return 0;
 501              		.loc 1 170 12
 502 0018 0023     		movs	r3, #0
 171:Src/nema_hal_freertos.c **** }
 503              		.loc 1 171 1
 504 001a 1846     		mov	r0, r3
 505 001c 0837     		adds	r7, r7, #8
 506              		.cfi_def_cfa_offset 8
 507 001e BD46     		mov	sp, r7
 508              		.cfi_def_cfa_register 13
 509              		@ sp needed
 510 0020 80BD     		pop	{r7, pc}
 511              	.L30:
 512 0022 00BF     		.align	2
 513              	.L29:
 514 0024 00000000 		.word	last_cl_id
 515              		.cfi_endproc
 516              	.LFE846:
 518              		.section	.text.nema_wait_irq_brk,"ax",%progbits
 519              		.align	1
 520              		.global	nema_wait_irq_brk
 521              		.syntax unified
 522              		.thumb
 523              		.thumb_func
 525              	nema_wait_irq_brk:
 526              	.LFB847:
 172:Src/nema_hal_freertos.c **** 
 173:Src/nema_hal_freertos.c **** int nema_wait_irq_brk(int brk_id)
 174:Src/nema_hal_freertos.c **** {
 527              		.loc 1 174 1
 528              		.cfi_startproc
 529              		@ args = 0, pretend = 0, frame = 8
 530              		@ frame_needed = 1, uses_anonymous_args = 0
 531 0000 80B5     		push	{r7, lr}
 532              		.cfi_def_cfa_offset 8
 533              		.cfi_offset 7, -8
 534              		.cfi_offset 14, -4
 535 0002 82B0     		sub	sp, sp, #8
 536              		.cfi_def_cfa_offset 16
 537 0004 00AF     		add	r7, sp, #0
 538              		.cfi_def_cfa_register 7
 539 0006 7860     		str	r0, [r7, #4]
 175:Src/nema_hal_freertos.c ****     while (nema_reg_read(GPU2D_BREAKPOINT) == 0U)
 540              		.loc 1 175 11
 541 0008 01E0     		b	.L32
 542              	.L33:
 176:Src/nema_hal_freertos.c ****     {
 177:Src/nema_hal_freertos.c ****         (void)nema_wait_irq();
 543              		.loc 1 177 15
 544 000a FFF7FEFF 		bl	nema_wait_irq
ARM GAS  /tmp/ccKMUTYx.s 			page 14


 545              	.L32:
 175:Src/nema_hal_freertos.c ****     while (nema_reg_read(GPU2D_BREAKPOINT) == 0U)
 546              		.loc 1 175 12
 547 000e 8020     		movs	r0, #128
 548 0010 FFF7FEFF 		bl	nema_reg_read
 549 0014 0346     		mov	r3, r0
 175:Src/nema_hal_freertos.c ****     while (nema_reg_read(GPU2D_BREAKPOINT) == 0U)
 550              		.loc 1 175 44 discriminator 1
 551 0016 002B     		cmp	r3, #0
 552 0018 F7D0     		beq	.L33
 178:Src/nema_hal_freertos.c ****     }
 179:Src/nema_hal_freertos.c **** 
 180:Src/nema_hal_freertos.c ****     return 0;
 553              		.loc 1 180 12
 554 001a 0023     		movs	r3, #0
 181:Src/nema_hal_freertos.c **** }
 555              		.loc 1 181 1
 556 001c 1846     		mov	r0, r3
 557 001e 0837     		adds	r7, r7, #8
 558              		.cfi_def_cfa_offset 8
 559 0020 BD46     		mov	sp, r7
 560              		.cfi_def_cfa_register 13
 561              		@ sp needed
 562 0022 80BD     		pop	{r7, pc}
 563              		.cfi_endproc
 564              	.LFE847:
 566              		.section	.text.nema_reg_read,"ax",%progbits
 567              		.align	1
 568              		.global	nema_reg_read
 569              		.syntax unified
 570              		.thumb
 571              		.thumb_func
 573              	nema_reg_read:
 574              	.LFB848:
 182:Src/nema_hal_freertos.c **** 
 183:Src/nema_hal_freertos.c **** uint32_t nema_reg_read(uint32_t reg)
 184:Src/nema_hal_freertos.c **** {
 575              		.loc 1 184 1
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 8
 578              		@ frame_needed = 1, uses_anonymous_args = 0
 579 0000 80B5     		push	{r7, lr}
 580              		.cfi_def_cfa_offset 8
 581              		.cfi_offset 7, -8
 582              		.cfi_offset 14, -4
 583 0002 82B0     		sub	sp, sp, #8
 584              		.cfi_def_cfa_offset 16
 585 0004 00AF     		add	r7, sp, #0
 586              		.cfi_def_cfa_register 7
 587 0006 7860     		str	r0, [r7, #4]
 185:Src/nema_hal_freertos.c ****     return HAL_GPU2D_ReadRegister(&hgpu2d, reg);
 588              		.loc 1 185 12
 589 0008 7968     		ldr	r1, [r7, #4]
 590 000a 0448     		ldr	r0, .L37
 591 000c FFF7FEFF 		bl	HAL_GPU2D_ReadRegister
 592 0010 0346     		mov	r3, r0
 186:Src/nema_hal_freertos.c **** }
ARM GAS  /tmp/ccKMUTYx.s 			page 15


 593              		.loc 1 186 1
 594 0012 1846     		mov	r0, r3
 595 0014 0837     		adds	r7, r7, #8
 596              		.cfi_def_cfa_offset 8
 597 0016 BD46     		mov	sp, r7
 598              		.cfi_def_cfa_register 13
 599              		@ sp needed
 600 0018 80BD     		pop	{r7, pc}
 601              	.L38:
 602 001a 00BF     		.align	2
 603              	.L37:
 604 001c 00000000 		.word	hgpu2d
 605              		.cfi_endproc
 606              	.LFE848:
 608              		.section	.text.nema_reg_write,"ax",%progbits
 609              		.align	1
 610              		.global	nema_reg_write
 611              		.syntax unified
 612              		.thumb
 613              		.thumb_func
 615              	nema_reg_write:
 616              	.LFB849:
 187:Src/nema_hal_freertos.c **** 
 188:Src/nema_hal_freertos.c **** void nema_reg_write(uint32_t reg, uint32_t value)
 189:Src/nema_hal_freertos.c **** {
 617              		.loc 1 189 1
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 8
 620              		@ frame_needed = 1, uses_anonymous_args = 0
 621 0000 80B5     		push	{r7, lr}
 622              		.cfi_def_cfa_offset 8
 623              		.cfi_offset 7, -8
 624              		.cfi_offset 14, -4
 625 0002 82B0     		sub	sp, sp, #8
 626              		.cfi_def_cfa_offset 16
 627 0004 00AF     		add	r7, sp, #0
 628              		.cfi_def_cfa_register 7
 629 0006 7860     		str	r0, [r7, #4]
 630 0008 3960     		str	r1, [r7]
 190:Src/nema_hal_freertos.c ****     HAL_GPU2D_WriteRegister(&hgpu2d, reg, value);
 631              		.loc 1 190 5
 632 000a 3A68     		ldr	r2, [r7]
 633 000c 7968     		ldr	r1, [r7, #4]
 634 000e 0348     		ldr	r0, .L40
 635 0010 FFF7FEFF 		bl	HAL_GPU2D_WriteRegister
 191:Src/nema_hal_freertos.c **** }
 636              		.loc 1 191 1
 637 0014 00BF     		nop
 638 0016 0837     		adds	r7, r7, #8
 639              		.cfi_def_cfa_offset 8
 640 0018 BD46     		mov	sp, r7
 641              		.cfi_def_cfa_register 13
 642              		@ sp needed
 643 001a 80BD     		pop	{r7, pc}
 644              	.L41:
 645              		.align	2
 646              	.L40:
ARM GAS  /tmp/ccKMUTYx.s 			page 16


 647 001c 00000000 		.word	hgpu2d
 648              		.cfi_endproc
 649              	.LFE849:
 651              		.section	.rodata
 652 00b1 000000   		.align	2
 653              	.LC7:
 654 00b4 626F2E62 		.ascii	"bo.base_virt\000"
 654      6173655F 
 654      76697274 
 654      00
 655              		.section	.text.nema_buffer_create,"ax",%progbits
 656              		.align	1
 657              		.global	nema_buffer_create
 658              		.syntax unified
 659              		.thumb
 660              		.thumb_func
 662              	nema_buffer_create:
 663              	.LFB850:
 192:Src/nema_hal_freertos.c **** 
 193:Src/nema_hal_freertos.c **** nema_buffer_t nema_buffer_create(int size)
 194:Src/nema_hal_freertos.c **** {
 664              		.loc 1 194 1
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 24
 667              		@ frame_needed = 1, uses_anonymous_args = 0
 668 0000 90B5     		push	{r4, r7, lr}
 669              		.cfi_def_cfa_offset 12
 670              		.cfi_offset 4, -12
 671              		.cfi_offset 7, -8
 672              		.cfi_offset 14, -4
 673 0002 87B0     		sub	sp, sp, #28
 674              		.cfi_def_cfa_offset 40
 675 0004 00AF     		add	r7, sp, #0
 676              		.cfi_def_cfa_register 7
 677 0006 7860     		str	r0, [r7, #4]
 678 0008 3960     		str	r1, [r7]
 195:Src/nema_hal_freertos.c ****     nema_buffer_t bo;
 196:Src/nema_hal_freertos.c **** 
 197:Src/nema_hal_freertos.c ****     memset(&bo, 0, sizeof(bo));
 679              		.loc 1 197 5
 680 000a 07F10803 		add	r3, r7, #8
 681 000e 1022     		movs	r2, #16
 682 0010 0021     		movs	r1, #0
 683 0012 1846     		mov	r0, r3
 684 0014 FFF7FEFF 		bl	memset
 198:Src/nema_hal_freertos.c **** 
 199:Src/nema_hal_freertos.c ****     nema_mutex_lock(MUTEX_MALLOC);
 685              		.loc 1 199 5
 686 0018 0120     		movs	r0, #1
 687 001a FFF7FEFF 		bl	nema_mutex_lock
 200:Src/nema_hal_freertos.c **** 
 201:Src/nema_hal_freertos.c ****     bo.base_virt = tsi_malloc(size);
 688              		.loc 1 201 20
 689 001e 3968     		ldr	r1, [r7]
 690 0020 0020     		movs	r0, #0
 691 0022 FFF7FEFF 		bl	tsi_malloc_pool
 692 0026 0346     		mov	r3, r0
ARM GAS  /tmp/ccKMUTYx.s 			page 17


 693              		.loc 1 201 18 discriminator 1
 694 0028 3B61     		str	r3, [r7, #16]
 202:Src/nema_hal_freertos.c ****     assert(bo.base_virt);
 695              		.loc 1 202 5
 696 002a 3B69     		ldr	r3, [r7, #16]
 697 002c 002B     		cmp	r3, #0
 698 002e 05D1     		bne	.L43
 699              		.loc 1 202 5 is_stmt 0 discriminator 1
 700 0030 0B4B     		ldr	r3, .L45
 701 0032 0C4A     		ldr	r2, .L45+4
 702 0034 CA21     		movs	r1, #202
 703 0036 0C48     		ldr	r0, .L45+8
 704 0038 FFF7FEFF 		bl	__assert_func
 705              	.L43:
 203:Src/nema_hal_freertos.c **** 
 204:Src/nema_hal_freertos.c ****     bo.base_phys = (uint32_t)bo.base_virt;
 706              		.loc 1 204 32 is_stmt 1
 707 003c 3B69     		ldr	r3, [r7, #16]
 708              		.loc 1 204 18
 709 003e 7B61     		str	r3, [r7, #20]
 205:Src/nema_hal_freertos.c ****     bo.size      = size;
 710              		.loc 1 205 18
 711 0040 3B68     		ldr	r3, [r7]
 712 0042 BB60     		str	r3, [r7, #8]
 206:Src/nema_hal_freertos.c **** 
 207:Src/nema_hal_freertos.c ****     nema_mutex_unlock(MUTEX_MALLOC);
 713              		.loc 1 207 5
 714 0044 0120     		movs	r0, #1
 715 0046 FFF7FEFF 		bl	nema_mutex_unlock
 208:Src/nema_hal_freertos.c **** 
 209:Src/nema_hal_freertos.c ****     return bo;
 716              		.loc 1 209 12
 717 004a 7B68     		ldr	r3, [r7, #4]
 718 004c 1C46     		mov	r4, r3
 719 004e 07F10803 		add	r3, r7, #8
 720 0052 0FCB     		ldm	r3, {r0, r1, r2, r3}
 721 0054 84E80F00 		stm	r4, {r0, r1, r2, r3}
 210:Src/nema_hal_freertos.c **** }
 722              		.loc 1 210 1
 723 0058 7868     		ldr	r0, [r7, #4]
 724 005a 1C37     		adds	r7, r7, #28
 725              		.cfi_def_cfa_offset 12
 726 005c BD46     		mov	sp, r7
 727              		.cfi_def_cfa_register 13
 728              		@ sp needed
 729 005e 90BD     		pop	{r4, r7, pc}
 730              	.L46:
 731              		.align	2
 732              	.L45:
 733 0060 B4000000 		.word	.LC7
 734 0064 00000000 		.word	__func__.2
 735 0068 10000000 		.word	.LC1
 736              		.cfi_endproc
 737              	.LFE850:
 739              		.section	.text.nema_buffer_create_pool,"ax",%progbits
 740              		.align	1
 741              		.global	nema_buffer_create_pool
ARM GAS  /tmp/ccKMUTYx.s 			page 18


 742              		.syntax unified
 743              		.thumb
 744              		.thumb_func
 746              	nema_buffer_create_pool:
 747              	.LFB851:
 211:Src/nema_hal_freertos.c **** 
 212:Src/nema_hal_freertos.c **** nema_buffer_t nema_buffer_create_pool(int pool, int size)
 213:Src/nema_hal_freertos.c **** {
 748              		.loc 1 213 1
 749              		.cfi_startproc
 750              		@ args = 0, pretend = 0, frame = 32
 751              		@ frame_needed = 1, uses_anonymous_args = 0
 752 0000 90B5     		push	{r4, r7, lr}
 753              		.cfi_def_cfa_offset 12
 754              		.cfi_offset 4, -12
 755              		.cfi_offset 7, -8
 756              		.cfi_offset 14, -4
 757 0002 89B0     		sub	sp, sp, #36
 758              		.cfi_def_cfa_offset 48
 759 0004 00AF     		add	r7, sp, #0
 760              		.cfi_def_cfa_register 7
 761 0006 F860     		str	r0, [r7, #12]
 762 0008 B960     		str	r1, [r7, #8]
 763 000a 7A60     		str	r2, [r7, #4]
 214:Src/nema_hal_freertos.c ****     nema_buffer_t bo;
 215:Src/nema_hal_freertos.c **** 
 216:Src/nema_hal_freertos.c ****     memset(&bo, 0, sizeof(bo));
 764              		.loc 1 216 5
 765 000c 07F11003 		add	r3, r7, #16
 766 0010 1022     		movs	r2, #16
 767 0012 0021     		movs	r1, #0
 768 0014 1846     		mov	r0, r3
 769 0016 FFF7FEFF 		bl	memset
 217:Src/nema_hal_freertos.c **** 
 218:Src/nema_hal_freertos.c ****     nema_mutex_lock(MUTEX_MALLOC); /* tsi_malloc isn't thread-safe */
 770              		.loc 1 218 5
 771 001a 0120     		movs	r0, #1
 772 001c FFF7FEFF 		bl	nema_mutex_lock
 219:Src/nema_hal_freertos.c **** 
 220:Src/nema_hal_freertos.c ****     bo.base_virt = tsi_malloc_pool(pool, size);
 773              		.loc 1 220 20
 774 0020 7968     		ldr	r1, [r7, #4]
 775 0022 B868     		ldr	r0, [r7, #8]
 776 0024 FFF7FEFF 		bl	tsi_malloc_pool
 777 0028 0346     		mov	r3, r0
 778              		.loc 1 220 18 discriminator 1
 779 002a BB61     		str	r3, [r7, #24]
 221:Src/nema_hal_freertos.c ****     assert(bo.base_virt);
 780              		.loc 1 221 5
 781 002c BB69     		ldr	r3, [r7, #24]
 782 002e 002B     		cmp	r3, #0
 783 0030 05D1     		bne	.L48
 784              		.loc 1 221 5 is_stmt 0 discriminator 1
 785 0032 0D4B     		ldr	r3, .L50
 786 0034 0D4A     		ldr	r2, .L50+4
 787 0036 DD21     		movs	r1, #221
 788 0038 0D48     		ldr	r0, .L50+8
ARM GAS  /tmp/ccKMUTYx.s 			page 19


 789 003a FFF7FEFF 		bl	__assert_func
 790              	.L48:
 222:Src/nema_hal_freertos.c **** 
 223:Src/nema_hal_freertos.c ****     bo.base_phys = (uintptr_t)bo.base_virt;
 791              		.loc 1 223 33 is_stmt 1
 792 003e BB69     		ldr	r3, [r7, #24]
 793              		.loc 1 223 18
 794 0040 FB61     		str	r3, [r7, #28]
 224:Src/nema_hal_freertos.c ****     bo.size      = size;
 795              		.loc 1 224 18
 796 0042 7B68     		ldr	r3, [r7, #4]
 797 0044 3B61     		str	r3, [r7, #16]
 225:Src/nema_hal_freertos.c ****     bo.fd        = pool; /* use fd during the memory free */
 798              		.loc 1 225 18
 799 0046 BB68     		ldr	r3, [r7, #8]
 800 0048 7B61     		str	r3, [r7, #20]
 226:Src/nema_hal_freertos.c **** 
 227:Src/nema_hal_freertos.c ****     nema_mutex_unlock(MUTEX_MALLOC);
 801              		.loc 1 227 5
 802 004a 0120     		movs	r0, #1
 803 004c FFF7FEFF 		bl	nema_mutex_unlock
 228:Src/nema_hal_freertos.c **** 
 229:Src/nema_hal_freertos.c ****     return bo;
 804              		.loc 1 229 12
 805 0050 FB68     		ldr	r3, [r7, #12]
 806 0052 1C46     		mov	r4, r3
 807 0054 07F11003 		add	r3, r7, #16
 808 0058 0FCB     		ldm	r3, {r0, r1, r2, r3}
 809 005a 84E80F00 		stm	r4, {r0, r1, r2, r3}
 230:Src/nema_hal_freertos.c **** }
 810              		.loc 1 230 1
 811 005e F868     		ldr	r0, [r7, #12]
 812 0060 2437     		adds	r7, r7, #36
 813              		.cfi_def_cfa_offset 12
 814 0062 BD46     		mov	sp, r7
 815              		.cfi_def_cfa_register 13
 816              		@ sp needed
 817 0064 90BD     		pop	{r4, r7, pc}
 818              	.L51:
 819 0066 00BF     		.align	2
 820              	.L50:
 821 0068 B4000000 		.word	.LC7
 822 006c 00000000 		.word	__func__.1
 823 0070 10000000 		.word	.LC1
 824              		.cfi_endproc
 825              	.LFE851:
 827              		.section	.text.nema_buffer_map,"ax",%progbits
 828              		.align	1
 829              		.global	nema_buffer_map
 830              		.syntax unified
 831              		.thumb
 832              		.thumb_func
 834              	nema_buffer_map:
 835              	.LFB852:
 231:Src/nema_hal_freertos.c **** 
 232:Src/nema_hal_freertos.c **** void *nema_buffer_map(nema_buffer_t *bo)
 233:Src/nema_hal_freertos.c **** {
ARM GAS  /tmp/ccKMUTYx.s 			page 20


 836              		.loc 1 233 1
 837              		.cfi_startproc
 838              		@ args = 0, pretend = 0, frame = 8
 839              		@ frame_needed = 1, uses_anonymous_args = 0
 840              		@ link register save eliminated.
 841 0000 80B4     		push	{r7}
 842              		.cfi_def_cfa_offset 4
 843              		.cfi_offset 7, -4
 844 0002 83B0     		sub	sp, sp, #12
 845              		.cfi_def_cfa_offset 16
 846 0004 00AF     		add	r7, sp, #0
 847              		.cfi_def_cfa_register 7
 848 0006 7860     		str	r0, [r7, #4]
 234:Src/nema_hal_freertos.c ****     return bo->base_virt;
 849              		.loc 1 234 14
 850 0008 7B68     		ldr	r3, [r7, #4]
 851 000a 9B68     		ldr	r3, [r3, #8]
 235:Src/nema_hal_freertos.c **** }
 852              		.loc 1 235 1
 853 000c 1846     		mov	r0, r3
 854 000e 0C37     		adds	r7, r7, #12
 855              		.cfi_def_cfa_offset 4
 856 0010 BD46     		mov	sp, r7
 857              		.cfi_def_cfa_register 13
 858              		@ sp needed
 859 0012 5DF8047B 		ldr	r7, [sp], #4
 860              		.cfi_restore 7
 861              		.cfi_def_cfa_offset 0
 862 0016 7047     		bx	lr
 863              		.cfi_endproc
 864              	.LFE852:
 866              		.section	.text.nema_buffer_unmap,"ax",%progbits
 867              		.align	1
 868              		.global	nema_buffer_unmap
 869              		.syntax unified
 870              		.thumb
 871              		.thumb_func
 873              	nema_buffer_unmap:
 874              	.LFB853:
 236:Src/nema_hal_freertos.c **** 
 237:Src/nema_hal_freertos.c **** void nema_buffer_unmap(nema_buffer_t *bo)
 238:Src/nema_hal_freertos.c **** {
 875              		.loc 1 238 1
 876              		.cfi_startproc
 877              		@ args = 0, pretend = 0, frame = 8
 878              		@ frame_needed = 1, uses_anonymous_args = 0
 879              		@ link register save eliminated.
 880 0000 80B4     		push	{r7}
 881              		.cfi_def_cfa_offset 4
 882              		.cfi_offset 7, -4
 883 0002 83B0     		sub	sp, sp, #12
 884              		.cfi_def_cfa_offset 16
 885 0004 00AF     		add	r7, sp, #0
 886              		.cfi_def_cfa_register 7
 887 0006 7860     		str	r0, [r7, #4]
 239:Src/nema_hal_freertos.c ****     /* Prevent unused argument(s) compilation warning */
 240:Src/nema_hal_freertos.c ****     UNUSED(bo);
ARM GAS  /tmp/ccKMUTYx.s 			page 21


 241:Src/nema_hal_freertos.c **** }
 888              		.loc 1 241 1
 889 0008 00BF     		nop
 890 000a 0C37     		adds	r7, r7, #12
 891              		.cfi_def_cfa_offset 4
 892 000c BD46     		mov	sp, r7
 893              		.cfi_def_cfa_register 13
 894              		@ sp needed
 895 000e 5DF8047B 		ldr	r7, [sp], #4
 896              		.cfi_restore 7
 897              		.cfi_def_cfa_offset 0
 898 0012 7047     		bx	lr
 899              		.cfi_endproc
 900              	.LFE853:
 902              		.section	.text.nema_buffer_destroy,"ax",%progbits
 903              		.align	1
 904              		.global	nema_buffer_destroy
 905              		.syntax unified
 906              		.thumb
 907              		.thumb_func
 909              	nema_buffer_destroy:
 910              	.LFB854:
 242:Src/nema_hal_freertos.c **** 
 243:Src/nema_hal_freertos.c **** void nema_buffer_destroy(nema_buffer_t *bo)
 244:Src/nema_hal_freertos.c **** {
 911              		.loc 1 244 1
 912              		.cfi_startproc
 913              		@ args = 0, pretend = 0, frame = 8
 914              		@ frame_needed = 1, uses_anonymous_args = 0
 915 0000 80B5     		push	{r7, lr}
 916              		.cfi_def_cfa_offset 8
 917              		.cfi_offset 7, -8
 918              		.cfi_offset 14, -4
 919 0002 82B0     		sub	sp, sp, #8
 920              		.cfi_def_cfa_offset 16
 921 0004 00AF     		add	r7, sp, #0
 922              		.cfi_def_cfa_register 7
 923 0006 7860     		str	r0, [r7, #4]
 245:Src/nema_hal_freertos.c ****     nema_mutex_lock(MUTEX_MALLOC);
 924              		.loc 1 245 5
 925 0008 0120     		movs	r0, #1
 926 000a FFF7FEFF 		bl	nema_mutex_lock
 246:Src/nema_hal_freertos.c **** 
 247:Src/nema_hal_freertos.c ****     tsi_free(bo->base_virt);
 927              		.loc 1 247 5
 928 000e 7B68     		ldr	r3, [r7, #4]
 929 0010 9B68     		ldr	r3, [r3, #8]
 930 0012 1846     		mov	r0, r3
 931 0014 FFF7FEFF 		bl	tsi_free
 248:Src/nema_hal_freertos.c **** 
 249:Src/nema_hal_freertos.c ****     nema_mutex_unlock(MUTEX_MALLOC);
 932              		.loc 1 249 5
 933 0018 0120     		movs	r0, #1
 934 001a FFF7FEFF 		bl	nema_mutex_unlock
 250:Src/nema_hal_freertos.c **** }
 935              		.loc 1 250 1
 936 001e 00BF     		nop
ARM GAS  /tmp/ccKMUTYx.s 			page 22


 937 0020 0837     		adds	r7, r7, #8
 938              		.cfi_def_cfa_offset 8
 939 0022 BD46     		mov	sp, r7
 940              		.cfi_def_cfa_register 13
 941              		@ sp needed
 942 0024 80BD     		pop	{r7, pc}
 943              		.cfi_endproc
 944              	.LFE854:
 946              		.section	.text.nema_buffer_phys,"ax",%progbits
 947              		.align	1
 948              		.global	nema_buffer_phys
 949              		.syntax unified
 950              		.thumb
 951              		.thumb_func
 953              	nema_buffer_phys:
 954              	.LFB855:
 251:Src/nema_hal_freertos.c **** 
 252:Src/nema_hal_freertos.c **** uintptr_t nema_buffer_phys(nema_buffer_t *bo)
 253:Src/nema_hal_freertos.c **** {
 955              		.loc 1 253 1
 956              		.cfi_startproc
 957              		@ args = 0, pretend = 0, frame = 8
 958              		@ frame_needed = 1, uses_anonymous_args = 0
 959              		@ link register save eliminated.
 960 0000 80B4     		push	{r7}
 961              		.cfi_def_cfa_offset 4
 962              		.cfi_offset 7, -4
 963 0002 83B0     		sub	sp, sp, #12
 964              		.cfi_def_cfa_offset 16
 965 0004 00AF     		add	r7, sp, #0
 966              		.cfi_def_cfa_register 7
 967 0006 7860     		str	r0, [r7, #4]
 254:Src/nema_hal_freertos.c ****     return bo->base_phys;
 968              		.loc 1 254 14
 969 0008 7B68     		ldr	r3, [r7, #4]
 970 000a DB68     		ldr	r3, [r3, #12]
 255:Src/nema_hal_freertos.c **** }
 971              		.loc 1 255 1
 972 000c 1846     		mov	r0, r3
 973 000e 0C37     		adds	r7, r7, #12
 974              		.cfi_def_cfa_offset 4
 975 0010 BD46     		mov	sp, r7
 976              		.cfi_def_cfa_register 13
 977              		@ sp needed
 978 0012 5DF8047B 		ldr	r7, [sp], #4
 979              		.cfi_restore 7
 980              		.cfi_def_cfa_offset 0
 981 0016 7047     		bx	lr
 982              		.cfi_endproc
 983              	.LFE855:
 985              		.section	.text.nema_buffer_flush,"ax",%progbits
 986              		.align	1
 987              		.global	nema_buffer_flush
 988              		.syntax unified
 989              		.thumb
 990              		.thumb_func
 992              	nema_buffer_flush:
ARM GAS  /tmp/ccKMUTYx.s 			page 23


 993              	.LFB856:
 256:Src/nema_hal_freertos.c **** 
 257:Src/nema_hal_freertos.c **** void nema_buffer_flush(nema_buffer_t * bo)
 258:Src/nema_hal_freertos.c **** {
 994              		.loc 1 258 1
 995              		.cfi_startproc
 996              		@ args = 0, pretend = 0, frame = 24
 997              		@ frame_needed = 1, uses_anonymous_args = 0
 998 0000 80B5     		push	{r7, lr}
 999              		.cfi_def_cfa_offset 8
 1000              		.cfi_offset 7, -8
 1001              		.cfi_offset 14, -4
 1002 0002 86B0     		sub	sp, sp, #24
 1003              		.cfi_def_cfa_offset 32
 1004 0004 00AF     		add	r7, sp, #0
 1005              		.cfi_def_cfa_register 7
 1006 0006 7860     		str	r0, [r7, #4]
 259:Src/nema_hal_freertos.c **** #if defined(NEMA_CACHED_MEMORY)
 260:Src/nema_hal_freertos.c ****     nema_mutex_lock(MUTEX_FLUSH);
 1007              		.loc 1 260 5
 1008 0008 0220     		movs	r0, #2
 1009 000a FFF7FEFF 		bl	nema_mutex_lock
 261:Src/nema_hal_freertos.c ****     SCB_CleanInvalidateDCache_by_Addr((uint32_t *)bo->base_virt, bo->size);
 1010              		.loc 1 261 53
 1011 000e 7B68     		ldr	r3, [r7, #4]
 1012 0010 9A68     		ldr	r2, [r3, #8]
 1013              		.loc 1 261 68
 1014 0012 7B68     		ldr	r3, [r7, #4]
 1015 0014 1B68     		ldr	r3, [r3]
 1016 0016 7A61     		str	r2, [r7, #20]
 1017 0018 3B61     		str	r3, [r7, #16]
 1018              	.LBB19:
 1019              	.LBB20:
 1020              		.file 2 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h"
   1:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /******************************************************************************
   2:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * @file     cachel1_armv7.h
   3:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * @brief    CMSIS Level 1 Cache API for Armv7-M and later
   4:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * @version  V1.0.3
   5:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * @date     17. March 2023
   6:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  ******************************************************************************/
   7:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /*
   8:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * Copyright (c) 2020-2021 Arm Limited. All rights reserved.
   9:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  *
  10:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * SPDX-License-Identifier: Apache-2.0
  11:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  *
  12:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * not use this file except in compliance with the License.
  14:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * You may obtain a copy of the License at
  15:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  *
  16:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  *
  18:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * Unless required by applicable law or agreed to in writing, software
  19:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * See the License for the specific language governing permissions and
  22:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  * limitations under the License.
  23:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  */
ARM GAS  /tmp/ccKMUTYx.s 			page 24


  24:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  25:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #if   defined ( __ICCARM__ )
  26:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #elif defined (__clang__)
  28:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #pragma clang system_header    /* treat file as system include file */
  29:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #endif
  30:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  31:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #ifndef ARM_CACHEL1_ARMV7_H
  32:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #define ARM_CACHEL1_ARMV7_H
  33:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  34:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
  35:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \ingroup  CMSIS_Core_FunctionInterface
  36:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \defgroup CMSIS_Core_CacheFunctions Cache Functions
  37:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief    Functions that configure Instruction and Data cache.
  38:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   @{
  39:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****  */
  40:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  41:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /* Cache Size ID Register Macros */
  42:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #define CCSIDR_WAYS(x)         (((x) & SCB_CCSIDR_ASSOCIATIVITY_Msk) >> SCB_CCSIDR_ASSOCIATIVITY_Po
  43:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #define CCSIDR_SETS(x)         (((x) & SCB_CCSIDR_NUMSETS_Msk      ) >> SCB_CCSIDR_NUMSETS_Pos     
  44:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  45:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #ifndef __SCB_DCACHE_LINE_SIZE
  46:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #define __SCB_DCACHE_LINE_SIZE  32U /*!< Cortex-M7 cache line size is fixed to 32 bytes (8 words). 
  47:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #endif
  48:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  49:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #ifndef __SCB_ICACHE_LINE_SIZE
  50:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #define __SCB_ICACHE_LINE_SIZE  32U /*!< Cortex-M7 cache line size is fixed to 32 bytes (8 words). 
  51:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** #endif
  52:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  53:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
  54:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Enable I-Cache
  55:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Turns on I-Cache
  56:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
  57:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_EnableICache (void)
  58:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
  59:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
  60:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
  61:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  62:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
  63:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
  64:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  65:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
  66:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
  67:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  68:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
  69:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
  70:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
  71:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
  72:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  73:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  74:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
  75:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Disable I-Cache
  76:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Turns off I-Cache
  77:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
  78:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_DisableICache (void)
  79:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
  80:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
ARM GAS  /tmp/ccKMUTYx.s 			page 25


  81:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
  82:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
  83:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
  84:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  85:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
  86:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
  87:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
  88:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
  89:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  90:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
  91:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
  92:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Invalidate I-Cache
  93:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Invalidates I-Cache
  94:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
  95:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_InvalidateICache (void)
  96:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
  97:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
  98:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
  99:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 100:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->ICIALLU = 0UL;
 101:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 102:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 103:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 104:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 105:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 106:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 107:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 108:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   I-Cache Invalidate by address
 109:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Invalidates I-Cache for the given address.
 110:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            I-Cache is invalidated starting from a 32 byte aligned address in 32 byte granularity.
 111:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            I-Cache memory blocks which are part of given address + given size are invalidated.
 112:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   addr    address
 113:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   isize   size of memory block (in number of bytes)
 114:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** */
 115:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_InvalidateICache_by_Addr (volatile void *addr, int32_t isize)
 116:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 117:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
 118:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     if ( isize > 0 ) {
 119:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        int32_t op_size = isize + (((uint32_t)addr) & (__SCB_ICACHE_LINE_SIZE - 1U));
 120:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_ICACHE_LINE_SIZE - 1U) */;
 121:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 122:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 123:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 124:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 125:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->ICIMVAU = op_addr;             /* register accepts only 32byte aligned values, only bi
 126:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr += __SCB_ICACHE_LINE_SIZE;
 127:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_size -= __SCB_ICACHE_LINE_SIZE;
 128:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while ( op_size > 0 );
 129:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 130:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 131:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __ISB();
 132:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     }
 133:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 134:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 135:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 136:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 137:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
ARM GAS  /tmp/ccKMUTYx.s 			page 26


 138:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Enable D-Cache
 139:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Turns on D-Cache
 140:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
 141:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_EnableDCache (void)
 142:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 143:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 144:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ccsidr;
 145:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t sets;
 146:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ways;
 147:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 148:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 149:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 150:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 151:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 152:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 153:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     ccsidr = SCB->CCSIDR;
 154:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 155:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                                             /* invalidate D-Cache */
 156:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 157:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     do {
 158:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 159:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 160:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 161:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                       ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 162:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #if defined ( __CC_ARM )
 163:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****           __schedule_barrier();
 164:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #endif
 165:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while (ways-- != 0U);
 166:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     } while(sets-- != 0U);
 167:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 168:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 169:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 170:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 171:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 172:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 173:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 174:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 175:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 176:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 177:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 178:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Disable D-Cache
 179:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Turns off D-Cache
 180:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
 181:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_DisableDCache (void)
 182:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 183:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 184:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     struct {
 185:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ccsidr;
 186:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t sets;
 187:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ways;
 188:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     } locals
 189:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #if ((defined(__GNUC__) || defined(__clang__)) && !defined(__OPTIMIZE__))
 190:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        __ALIGNED(__SCB_DCACHE_LINE_SIZE)
 191:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #endif
 192:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     ;
 193:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 194:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CSSELR = 0U;                       /* select Level 1 data cache */
ARM GAS  /tmp/ccKMUTYx.s 			page 27


 195:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 196:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 197:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 198:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 199:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 200:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #if !defined(__OPTIMIZE__)
 201:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       /*
 202:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * For the endless loop issue with no optimization builds.
 203:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * More details, see https://github.com/ARM-software/CMSIS_5/issues/620
 204:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        *
 205:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * The issue only happens when local variables are in stack. If
 206:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * local variables are saved in general purpose register, then the function
 207:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * is OK.
 208:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        *
 209:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * When local variables are in stack, after disabling the cache, flush the
 210:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        * local variables cache line for data consistency.
 211:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        */
 212:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       /* Clean and invalidate the local variable cache. */
 213:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #if defined(__ICCARM__)
 214:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     /* As we can't align the stack to the cache line size, invalidate each of the variables */
 215:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       SCB->DCCIMVAC = (uint32_t)&locals.sets;
 216:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       SCB->DCCIMVAC = (uint32_t)&locals.ways;
 217:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       SCB->DCCIMVAC = (uint32_t)&locals.ccsidr;
 218:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #else
 219:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       SCB->DCCIMVAC = (uint32_t)&locals;
 220:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #endif
 221:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 222:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __ISB();
 223:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     #endif
 224:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 225:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     locals.ccsidr = SCB->CCSIDR;
 226:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                                             /* clean & invalidate D-Cache */
 227:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     locals.sets = (uint32_t)(CCSIDR_SETS(locals.ccsidr));
 228:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     do {
 229:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       locals.ways = (uint32_t)(CCSIDR_WAYS(locals.ccsidr));
 230:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 231:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCCISW = (((locals.sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 232:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                        ((locals.ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 233:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #if defined ( __CC_ARM )
 234:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****           __schedule_barrier();
 235:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #endif
 236:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while (locals.ways-- != 0U);
 237:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     } while(locals.sets-- != 0U);
 238:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 239:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 240:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 241:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 242:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 243:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 244:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 245:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 246:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Invalidate D-Cache
 247:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Invalidates D-Cache
 248:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
 249:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_InvalidateDCache (void)
 250:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 251:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
ARM GAS  /tmp/ccKMUTYx.s 			page 28


 252:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ccsidr;
 253:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t sets;
 254:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ways;
 255:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 256:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 257:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 258:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 259:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     ccsidr = SCB->CCSIDR;
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                                             /* invalidate D-Cache */
 262:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 263:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     do {
 264:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 265:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 266:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 267:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                       ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 268:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #if defined ( __CC_ARM )
 269:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****           __schedule_barrier();
 270:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #endif
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while (ways-- != 0U);
 272:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     } while(sets-- != 0U);
 273:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 274:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 275:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 276:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 277:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 278:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 279:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 280:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 281:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Clean D-Cache
 282:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Cleans D-Cache
 283:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
 284:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_CleanDCache (void)
 285:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 286:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 287:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ccsidr;
 288:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t sets;
 289:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ways;
 290:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 291:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 292:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 293:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 294:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     ccsidr = SCB->CCSIDR;
 295:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 296:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                                             /* clean D-Cache */
 297:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 298:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     do {
 299:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 300:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 301:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 302:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                       ((ways << SCB_DCCSW_WAY_Pos) & SCB_DCCSW_WAY_Msk)  );
 303:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #if defined ( __CC_ARM )
 304:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****           __schedule_barrier();
 305:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #endif
 306:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while (ways-- != 0U);
 307:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     } while(sets-- != 0U);
 308:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
ARM GAS  /tmp/ccKMUTYx.s 			page 29


 309:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 310:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 311:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 312:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 313:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 314:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 315:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 316:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   Clean & Invalidate D-Cache
 317:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Cleans and Invalidates D-Cache
 318:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   */
 319:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_CleanInvalidateDCache (void)
 320:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 321:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 322:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ccsidr;
 323:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t sets;
 324:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     uint32_t ways;
 325:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 326:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 327:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 328:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 329:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     ccsidr = SCB->CCSIDR;
 330:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 331:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                                             /* clean & invalidate D-Cache */
 332:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 333:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     do {
 334:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 335:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 336:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 337:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****                        ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 338:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #if defined ( __CC_ARM )
 339:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****           __schedule_barrier();
 340:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         #endif
 341:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while (ways-- != 0U);
 342:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     } while(sets-- != 0U);
 343:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 344:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __DSB();
 345:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     __ISB();
 346:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 347:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 348:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 349:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 350:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 351:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   D-Cache Invalidate by address
 352:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Invalidates D-Cache for the given address.
 353:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            D-Cache is invalidated starting from a 32 byte aligned address in 32 byte granularity.
 354:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            D-Cache memory blocks which are part of given address + given size are invalidated.
 355:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   addr    address
 356:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   dsize   size of memory block (in number of bytes)
 357:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** */
 358:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (volatile void *addr, int32_t dsize)
 359:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 360:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 361:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     if ( dsize > 0 ) {
 362:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 363:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 364:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 365:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
ARM GAS  /tmp/ccKMUTYx.s 			page 30


 366:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 367:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 368:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bi
 369:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr += __SCB_DCACHE_LINE_SIZE;
 370:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_size -= __SCB_DCACHE_LINE_SIZE;
 371:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while ( op_size > 0 );
 372:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 373:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 374:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __ISB();
 375:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     }
 376:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 377:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 378:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 379:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 380:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 381:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   D-Cache Clean by address
 382:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Cleans D-Cache for the given address
 383:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            D-Cache is cleaned starting from a 32 byte aligned address in 32 byte granularity.
 384:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            D-Cache memory blocks which are part of given address + given size are cleaned.
 385:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   addr    address
 386:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   dsize   size of memory block (in number of bytes)
 387:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** */
 388:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (volatile void *addr, int32_t dsize)
 389:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 390:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 391:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     if ( dsize > 0 ) {
 392:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 393:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 394:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 395:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 396:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 397:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 398:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bi
 399:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr += __SCB_DCACHE_LINE_SIZE;
 400:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_size -= __SCB_DCACHE_LINE_SIZE;
 401:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while ( op_size > 0 );
 402:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 403:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 404:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __ISB();
 405:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     }
 406:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 407:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 408:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 409:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 410:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** /**
 411:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \brief   D-Cache Clean and Invalidate by address
 412:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \details Cleans and invalidates D_Cache for the given address
 413:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            D-Cache is cleaned and invalidated starting from a 32 byte aligned address in 32 byte gr
 414:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****            D-Cache memory blocks which are part of given address + given size are cleaned and inval
 415:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   addr    address (aligned to 32-byte boundary)
 416:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   \param[in]   dsize   size of memory block (in number of bytes)
 417:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** */
 418:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** __STATIC_FORCEINLINE void SCB_CleanInvalidateDCache_by_Addr (volatile void *addr, int32_t dsize)
 419:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** {
 420:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
 421:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     if ( dsize > 0 ) {
 1021              		.loc 2 421 8
ARM GAS  /tmp/ccKMUTYx.s 			page 31


 1022 001a 3B69     		ldr	r3, [r7, #16]
 1023 001c 002B     		cmp	r3, #0
 1024 001e 1DDD     		ble	.L62
 1025              	.LBB21:
 422:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****        int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 1026              		.loc 2 422 36
 1027 0020 7B69     		ldr	r3, [r7, #20]
 1028              		.loc 2 422 52
 1029 0022 03F01F02 		and	r2, r3, #31
 1030              		.loc 2 422 32
 1031 0026 3B69     		ldr	r3, [r7, #16]
 1032 0028 1344     		add	r3, r3, r2
 1033              		.loc 2 422 16
 1034 002a FB60     		str	r3, [r7, #12]
 423:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 1035              		.loc 2 423 16
 1036 002c 7B69     		ldr	r3, [r7, #20]
 1037 002e BB60     		str	r3, [r7, #8]
 1038              	.LBB22:
 1039              	.LBB23:
 1040              		.file 3 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h"
   1:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
ARM GAS  /tmp/ccKMUTYx.s 			page 32


  37:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccKMUTYx.s 			page 33


  94:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccKMUTYx.s 			page 34


 151:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
ARM GAS  /tmp/ccKMUTYx.s 			page 35


 208:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccKMUTYx.s 			page 36


 265:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 1041              		.loc 3 271 3
 1042              		.syntax unified
 1043              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1044 0030 BFF34F8F 		dsb 0xF
 1045              	@ 0 "" 2
 272:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1046              		.loc 3 272 1
 1047              		.thumb
 1048              		.syntax unified
 1049 0034 00BF     		nop
 1050              	.L60:
 1051              	.LBE23:
 1052              	.LBE22:
 424:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 425:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 426:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 427:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       do {
 428:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bi
 1053              		.loc 2 428 12
 1054 0036 0D4A     		ldr	r2, .L63
 1055              		.loc 2 428 23
 1056 0038 BB68     		ldr	r3, [r7, #8]
 1057 003a C2F87032 		str	r3, [r2, #624]
 429:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_addr +=          __SCB_DCACHE_LINE_SIZE;
 1058              		.loc 2 429 17
 1059 003e BB68     		ldr	r3, [r7, #8]
 1060 0040 2033     		adds	r3, r3, #32
 1061 0042 BB60     		str	r3, [r7, #8]
 430:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****         op_size -=          __SCB_DCACHE_LINE_SIZE;
 1062              		.loc 2 430 17
 1063 0044 FB68     		ldr	r3, [r7, #12]
 1064 0046 203B     		subs	r3, r3, #32
 1065 0048 FB60     		str	r3, [r7, #12]
 431:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       } while ( op_size > 0 );
 1066              		.loc 2 431 25 discriminator 1
 1067 004a FB68     		ldr	r3, [r7, #12]
 1068 004c 002B     		cmp	r3, #0
 1069 004e F2DC     		bgt	.L60
 1070              	.LBB24:
 1071              	.LBB25:
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1072              		.loc 3 271 3
 1073              		.syntax unified
 1074              	@ 271 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1075 0050 BFF34F8F 		dsb 0xF
 1076              	@ 0 "" 2
 1077              		.loc 3 272 1
 1078              		.thumb
 1079              		.syntax unified
 1080 0054 00BF     		nop
ARM GAS  /tmp/ccKMUTYx.s 			page 37


 1081              	.LBE25:
 1082              	.LBE24:
 1083              	.LBB26:
 1084              	.LBB27:
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1085              		.loc 3 260 3
 1086              		.syntax unified
 1087              	@ 260 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1088 0056 BFF36F8F 		isb 0xF
 1089              	@ 0 "" 2
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 1090              		.loc 3 261 1
 1091              		.thumb
 1092              		.syntax unified
 1093 005a 00BF     		nop
 1094              	.L62:
 1095              	.LBE27:
 1096              	.LBE26:
 1097              	.LBE21:
 432:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** 
 433:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __DSB();
 434:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****       __ISB();
 435:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****     }
 436:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h ****   #endif
 437:STM32Cube_FW_N6/Drivers/CMSIS/Include/cachel1_armv7.h **** }
 1098              		.loc 2 437 1
 1099 005c 00BF     		nop
 1100              	.LBE20:
 1101              	.LBE19:
 262:Src/nema_hal_freertos.c ****     nema_mutex_unlock(MUTEX_FLUSH);
 1102              		.loc 1 262 5
 1103 005e 0220     		movs	r0, #2
 1104 0060 FFF7FEFF 		bl	nema_mutex_unlock
 263:Src/nema_hal_freertos.c **** #else /* !NEMA_CACHED_MEMORY */
 264:Src/nema_hal_freertos.c ****     UNUSED(bo);
 265:Src/nema_hal_freertos.c **** #endif /* NEMA_CACHED_MEMORY */
 266:Src/nema_hal_freertos.c **** }
 1105              		.loc 1 266 1
 1106 0064 00BF     		nop
 1107 0066 1837     		adds	r7, r7, #24
 1108              		.cfi_def_cfa_offset 8
 1109 0068 BD46     		mov	sp, r7
 1110              		.cfi_def_cfa_register 13
 1111              		@ sp needed
 1112 006a 80BD     		pop	{r7, pc}
 1113              	.L64:
 1114              		.align	2
 1115              	.L63:
 1116 006c 00ED00E0 		.word	-536810240
 1117              		.cfi_endproc
 1118              	.LFE856:
 1120              		.section	.text.nema_host_free,"ax",%progbits
 1121              		.align	1
 1122              		.global	nema_host_free
 1123              		.syntax unified
 1124              		.thumb
 1125              		.thumb_func
ARM GAS  /tmp/ccKMUTYx.s 			page 38


 1127              	nema_host_free:
 1128              	.LFB857:
 267:Src/nema_hal_freertos.c **** 
 268:Src/nema_hal_freertos.c **** void nema_host_free(void *ptr)
 269:Src/nema_hal_freertos.c **** {
 1129              		.loc 1 269 1
 1130              		.cfi_startproc
 1131              		@ args = 0, pretend = 0, frame = 8
 1132              		@ frame_needed = 1, uses_anonymous_args = 0
 1133 0000 80B5     		push	{r7, lr}
 1134              		.cfi_def_cfa_offset 8
 1135              		.cfi_offset 7, -8
 1136              		.cfi_offset 14, -4
 1137 0002 82B0     		sub	sp, sp, #8
 1138              		.cfi_def_cfa_offset 16
 1139 0004 00AF     		add	r7, sp, #0
 1140              		.cfi_def_cfa_register 7
 1141 0006 7860     		str	r0, [r7, #4]
 270:Src/nema_hal_freertos.c ****     if (ptr)
 1142              		.loc 1 270 8
 1143 0008 7B68     		ldr	r3, [r7, #4]
 1144 000a 002B     		cmp	r3, #0
 1145 000c 02D0     		beq	.L67
 271:Src/nema_hal_freertos.c ****     {
 272:Src/nema_hal_freertos.c ****         tsi_free(ptr);
 1146              		.loc 1 272 9
 1147 000e 7868     		ldr	r0, [r7, #4]
 1148 0010 FFF7FEFF 		bl	tsi_free
 1149              	.L67:
 273:Src/nema_hal_freertos.c ****     }
 274:Src/nema_hal_freertos.c **** }
 1150              		.loc 1 274 1
 1151 0014 00BF     		nop
 1152 0016 0837     		adds	r7, r7, #8
 1153              		.cfi_def_cfa_offset 8
 1154 0018 BD46     		mov	sp, r7
 1155              		.cfi_def_cfa_register 13
 1156              		@ sp needed
 1157 001a 80BD     		pop	{r7, pc}
 1158              		.cfi_endproc
 1159              	.LFE857:
 1161              		.section	.rodata
 1162 00c1 000000   		.align	2
 1163              	.LC8:
 1164 00c4 70747200 		.ascii	"ptr\000"
 1165              		.section	.text.nema_host_malloc,"ax",%progbits
 1166              		.align	1
 1167              		.global	nema_host_malloc
 1168              		.syntax unified
 1169              		.thumb
 1170              		.thumb_func
 1172              	nema_host_malloc:
 1173              	.LFB858:
 275:Src/nema_hal_freertos.c **** 
 276:Src/nema_hal_freertos.c **** void *nema_host_malloc(unsigned size)
 277:Src/nema_hal_freertos.c **** {
 1174              		.loc 1 277 1
ARM GAS  /tmp/ccKMUTYx.s 			page 39


 1175              		.cfi_startproc
 1176              		@ args = 0, pretend = 0, frame = 16
 1177              		@ frame_needed = 1, uses_anonymous_args = 0
 1178 0000 80B5     		push	{r7, lr}
 1179              		.cfi_def_cfa_offset 8
 1180              		.cfi_offset 7, -8
 1181              		.cfi_offset 14, -4
 1182 0002 84B0     		sub	sp, sp, #16
 1183              		.cfi_def_cfa_offset 24
 1184 0004 00AF     		add	r7, sp, #0
 1185              		.cfi_def_cfa_register 7
 1186 0006 7860     		str	r0, [r7, #4]
 278:Src/nema_hal_freertos.c ****     void *ptr = NULL;
 1187              		.loc 1 278 11
 1188 0008 0023     		movs	r3, #0
 1189 000a FB60     		str	r3, [r7, #12]
 279:Src/nema_hal_freertos.c **** 
 280:Src/nema_hal_freertos.c ****     ptr = tsi_malloc(size);
 1190              		.loc 1 280 11
 1191 000c 7B68     		ldr	r3, [r7, #4]
 1192 000e 1946     		mov	r1, r3
 1193 0010 0020     		movs	r0, #0
 1194 0012 FFF7FEFF 		bl	tsi_malloc_pool
 1195 0016 F860     		str	r0, [r7, #12]
 281:Src/nema_hal_freertos.c ****     assert(ptr);
 1196              		.loc 1 281 5
 1197 0018 FB68     		ldr	r3, [r7, #12]
 1198 001a 002B     		cmp	r3, #0
 1199 001c 06D1     		bne	.L69
 1200              		.loc 1 281 5 is_stmt 0 discriminator 1
 1201 001e 064B     		ldr	r3, .L71
 1202 0020 064A     		ldr	r2, .L71+4
 1203 0022 40F21911 		movw	r1, #281
 1204 0026 0648     		ldr	r0, .L71+8
 1205 0028 FFF7FEFF 		bl	__assert_func
 1206              	.L69:
 282:Src/nema_hal_freertos.c **** 
 283:Src/nema_hal_freertos.c ****     return ptr;
 1207              		.loc 1 283 12 is_stmt 1
 1208 002c FB68     		ldr	r3, [r7, #12]
 284:Src/nema_hal_freertos.c **** }
 1209              		.loc 1 284 1
 1210 002e 1846     		mov	r0, r3
 1211 0030 1037     		adds	r7, r7, #16
 1212              		.cfi_def_cfa_offset 8
 1213 0032 BD46     		mov	sp, r7
 1214              		.cfi_def_cfa_register 13
 1215              		@ sp needed
 1216 0034 80BD     		pop	{r7, pc}
 1217              	.L72:
 1218 0036 00BF     		.align	2
 1219              	.L71:
 1220 0038 C4000000 		.word	.LC8
 1221 003c 00000000 		.word	__func__.0
 1222 0040 10000000 		.word	.LC1
 1223              		.cfi_endproc
 1224              	.LFE858:
ARM GAS  /tmp/ccKMUTYx.s 			page 40


 1226              		.section	.text.nema_mutex_lock,"ax",%progbits
 1227              		.align	1
 1228              		.global	nema_mutex_lock
 1229              		.syntax unified
 1230              		.thumb
 1231              		.thumb_func
 1233              	nema_mutex_lock:
 1234              	.LFB859:
 285:Src/nema_hal_freertos.c **** 
 286:Src/nema_hal_freertos.c **** int nema_mutex_lock(int mutex_id)
 287:Src/nema_hal_freertos.c **** {
 1235              		.loc 1 287 1
 1236              		.cfi_startproc
 1237              		@ args = 0, pretend = 0, frame = 16
 1238              		@ frame_needed = 1, uses_anonymous_args = 0
 1239 0000 80B5     		push	{r7, lr}
 1240              		.cfi_def_cfa_offset 8
 1241              		.cfi_offset 7, -8
 1242              		.cfi_offset 14, -4
 1243 0002 84B0     		sub	sp, sp, #16
 1244              		.cfi_def_cfa_offset 24
 1245 0004 00AF     		add	r7, sp, #0
 1246              		.cfi_def_cfa_register 7
 1247 0006 7860     		str	r0, [r7, #4]
 288:Src/nema_hal_freertos.c ****     int ret = 0;
 1248              		.loc 1 288 9
 1249 0008 0023     		movs	r3, #0
 1250 000a FB60     		str	r3, [r7, #12]
 289:Src/nema_hal_freertos.c **** 
 290:Src/nema_hal_freertos.c **** #if (defined(NEMA_MULTI_PROCESS) || defined(NEMA_MULTI_THREAD))
 291:Src/nema_hal_freertos.c ****     if ((mutex_id >= 0) && (mutex_id <= MUTEX_MAX) && (NULL != nema_mutexes_ids[mutex_id]))
 1251              		.loc 1 291 8
 1252 000c 7B68     		ldr	r3, [r7, #4]
 1253 000e 002B     		cmp	r3, #0
 1254 0010 1ADB     		blt	.L74
 1255              		.loc 1 291 25 discriminator 1
 1256 0012 7B68     		ldr	r3, [r7, #4]
 1257 0014 022B     		cmp	r3, #2
 1258 0016 17DC     		bgt	.L74
 1259              		.loc 1 291 80 discriminator 2
 1260 0018 0E4A     		ldr	r2, .L78
 1261 001a 7B68     		ldr	r3, [r7, #4]
 1262 001c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1263              		.loc 1 291 52 discriminator 2
 1264 0020 002B     		cmp	r3, #0
 1265 0022 11D0     		beq	.L74
 292:Src/nema_hal_freertos.c ****     {
 293:Src/nema_hal_freertos.c ****         ret = xSemaphoreTake(nema_mutexes_ids[mutex_id], portMAX_DELAY);
 1266              		.loc 1 293 15
 1267 0024 0B4A     		ldr	r2, .L78
 1268 0026 7B68     		ldr	r3, [r7, #4]
 1269 0028 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1270 002c 4FF0FF31 		mov	r1, #-1
 1271 0030 1846     		mov	r0, r3
 1272 0032 FFF7FEFF 		bl	xQueueSemaphoreTake
 1273 0036 F860     		str	r0, [r7, #12]
 294:Src/nema_hal_freertos.c ****         ret = ret == pdTRUE ? 0 : -1;
ARM GAS  /tmp/ccKMUTYx.s 			page 41


 1274              		.loc 1 294 33
 1275 0038 FB68     		ldr	r3, [r7, #12]
 1276 003a 012B     		cmp	r3, #1
 1277 003c 01D1     		bne	.L75
 1278              		.loc 1 294 33 is_stmt 0 discriminator 1
 1279 003e 0023     		movs	r3, #0
 1280 0040 01E0     		b	.L76
 1281              	.L75:
 1282              		.loc 1 294 33 discriminator 2
 1283 0042 4FF0FF33 		mov	r3, #-1
 1284              	.L76:
 1285              		.loc 1 294 13 is_stmt 1 discriminator 4
 1286 0046 FB60     		str	r3, [r7, #12]
 1287              	.L74:
 295:Src/nema_hal_freertos.c ****     }
 296:Src/nema_hal_freertos.c **** #else /* !NEMA_MULTI_PROCESS & !NEMA_MULTI_THREAD */
 297:Src/nema_hal_freertos.c ****     UNUSED(mutex_id);
 298:Src/nema_hal_freertos.c **** #endif /* NEMA_MULTI_PROCESS | NEMA_MULTI_THREAD */
 299:Src/nema_hal_freertos.c **** 
 300:Src/nema_hal_freertos.c ****     return ret;
 1288              		.loc 1 300 12
 1289 0048 FB68     		ldr	r3, [r7, #12]
 301:Src/nema_hal_freertos.c **** }
 1290              		.loc 1 301 1
 1291 004a 1846     		mov	r0, r3
 1292 004c 1037     		adds	r7, r7, #16
 1293              		.cfi_def_cfa_offset 8
 1294 004e BD46     		mov	sp, r7
 1295              		.cfi_def_cfa_register 13
 1296              		@ sp needed
 1297 0050 80BD     		pop	{r7, pc}
 1298              	.L79:
 1299 0052 00BF     		.align	2
 1300              	.L78:
 1301 0054 00000000 		.word	nema_mutexes_ids
 1302              		.cfi_endproc
 1303              	.LFE859:
 1305              		.section	.text.nema_mutex_unlock,"ax",%progbits
 1306              		.align	1
 1307              		.global	nema_mutex_unlock
 1308              		.syntax unified
 1309              		.thumb
 1310              		.thumb_func
 1312              	nema_mutex_unlock:
 1313              	.LFB860:
 302:Src/nema_hal_freertos.c **** 
 303:Src/nema_hal_freertos.c **** int nema_mutex_unlock(int mutex_id)
 304:Src/nema_hal_freertos.c **** {
 1314              		.loc 1 304 1
 1315              		.cfi_startproc
 1316              		@ args = 0, pretend = 0, frame = 16
 1317              		@ frame_needed = 1, uses_anonymous_args = 0
 1318 0000 80B5     		push	{r7, lr}
 1319              		.cfi_def_cfa_offset 8
 1320              		.cfi_offset 7, -8
 1321              		.cfi_offset 14, -4
 1322 0002 84B0     		sub	sp, sp, #16
ARM GAS  /tmp/ccKMUTYx.s 			page 42


 1323              		.cfi_def_cfa_offset 24
 1324 0004 00AF     		add	r7, sp, #0
 1325              		.cfi_def_cfa_register 7
 1326 0006 7860     		str	r0, [r7, #4]
 305:Src/nema_hal_freertos.c ****     int ret = 0;
 1327              		.loc 1 305 9
 1328 0008 0023     		movs	r3, #0
 1329 000a FB60     		str	r3, [r7, #12]
 306:Src/nema_hal_freertos.c **** 
 307:Src/nema_hal_freertos.c **** #if (defined(NEMA_MULTI_PROCESS) || defined(NEMA_MULTI_THREAD))
 308:Src/nema_hal_freertos.c ****     if ((mutex_id >= 0) && (mutex_id <= MUTEX_MAX) && (NULL != nema_mutexes_ids[mutex_id]))
 1330              		.loc 1 308 8
 1331 000c 7B68     		ldr	r3, [r7, #4]
 1332 000e 002B     		cmp	r3, #0
 1333 0010 1ADB     		blt	.L81
 1334              		.loc 1 308 25 discriminator 1
 1335 0012 7B68     		ldr	r3, [r7, #4]
 1336 0014 022B     		cmp	r3, #2
 1337 0016 17DC     		bgt	.L81
 1338              		.loc 1 308 80 discriminator 2
 1339 0018 0E4A     		ldr	r2, .L85
 1340 001a 7B68     		ldr	r3, [r7, #4]
 1341 001c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1342              		.loc 1 308 52 discriminator 2
 1343 0020 002B     		cmp	r3, #0
 1344 0022 11D0     		beq	.L81
 309:Src/nema_hal_freertos.c ****     {
 310:Src/nema_hal_freertos.c ****         ret = xSemaphoreGive(nema_mutexes_ids[mutex_id]);
 1345              		.loc 1 310 15
 1346 0024 0B4A     		ldr	r2, .L85
 1347 0026 7B68     		ldr	r3, [r7, #4]
 1348 0028 52F82300 		ldr	r0, [r2, r3, lsl #2]
 1349 002c 0023     		movs	r3, #0
 1350 002e 0022     		movs	r2, #0
 1351 0030 0021     		movs	r1, #0
 1352 0032 FFF7FEFF 		bl	xQueueGenericSend
 1353 0036 F860     		str	r0, [r7, #12]
 311:Src/nema_hal_freertos.c ****         ret = ret == pdTRUE ? 0 : -1;
 1354              		.loc 1 311 33
 1355 0038 FB68     		ldr	r3, [r7, #12]
 1356 003a 012B     		cmp	r3, #1
 1357 003c 01D1     		bne	.L82
 1358              		.loc 1 311 33 is_stmt 0 discriminator 1
 1359 003e 0023     		movs	r3, #0
 1360 0040 01E0     		b	.L83
 1361              	.L82:
 1362              		.loc 1 311 33 discriminator 2
 1363 0042 4FF0FF33 		mov	r3, #-1
 1364              	.L83:
 1365              		.loc 1 311 13 is_stmt 1 discriminator 4
 1366 0046 FB60     		str	r3, [r7, #12]
 1367              	.L81:
 312:Src/nema_hal_freertos.c ****     }
 313:Src/nema_hal_freertos.c **** #else /* !NEMA_MULTI_PROCESS & !NEMA_MULTI_THREAD */
 314:Src/nema_hal_freertos.c ****     UNUSED(mutex_id);
 315:Src/nema_hal_freertos.c **** #endif /* NEMA_MULTI_PROCESS | NEMA_MULTI_THREAD */
 316:Src/nema_hal_freertos.c **** 
ARM GAS  /tmp/ccKMUTYx.s 			page 43


 317:Src/nema_hal_freertos.c ****     return ret;
 1368              		.loc 1 317 12
 1369 0048 FB68     		ldr	r3, [r7, #12]
 318:Src/nema_hal_freertos.c **** }
 1370              		.loc 1 318 1
 1371 004a 1846     		mov	r0, r3
 1372 004c 1037     		adds	r7, r7, #16
 1373              		.cfi_def_cfa_offset 8
 1374 004e BD46     		mov	sp, r7
 1375              		.cfi_def_cfa_register 13
 1376              		@ sp needed
 1377 0050 80BD     		pop	{r7, pc}
 1378              	.L86:
 1379 0052 00BF     		.align	2
 1380              	.L85:
 1381 0054 00000000 		.word	nema_mutexes_ids
 1382              		.cfi_endproc
 1383              	.LFE860:
 1385              		.section	.rodata.__func__.4,"a"
 1386              		.align	2
 1389              	__func__.4:
 1390 0000 48414C5F 		.ascii	"HAL_GPU2D_CommandListCpltCallback\000"
 1390      47505532 
 1390      445F436F 
 1390      6D6D616E 
 1390      644C6973 
 1391              		.section	.rodata.__func__.3,"a"
 1392              		.align	2
 1395              	__func__.3:
 1396 0000 6E656D61 		.ascii	"nema_sys_init\000"
 1396      5F737973 
 1396      5F696E69 
 1396      7400
 1397              		.section	.rodata.__func__.2,"a"
 1398              		.align	2
 1401              	__func__.2:
 1402 0000 6E656D61 		.ascii	"nema_buffer_create\000"
 1402      5F627566 
 1402      6665725F 
 1402      63726561 
 1402      746500
 1403              		.section	.rodata.__func__.1,"a"
 1404              		.align	2
 1407              	__func__.1:
 1408 0000 6E656D61 		.ascii	"nema_buffer_create_pool\000"
 1408      5F627566 
 1408      6665725F 
 1408      63726561 
 1408      74655F70 
 1409              		.section	.rodata.__func__.0,"a"
 1410              		.align	2
 1413              	__func__.0:
 1414 0000 6E656D61 		.ascii	"nema_host_malloc\000"
 1414      5F686F73 
 1414      745F6D61 
 1414      6C6C6F63 
 1414      00
ARM GAS  /tmp/ccKMUTYx.s 			page 44


 1415              		.text
 1416              	.Letext0:
 1417              		.file 4 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 1418              		.file 5 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 1419              		.file 6 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 1420              		.file 7 "Lib/NemaGFX/include/nema_hal.h"
 1421              		.file 8 "STM32Cube_FW_N6/Drivers/CMSIS/Include/core_cm55.h"
 1422              		.file 9 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_def.h"
 1423              		.file 10 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_gpu2d.h"
 1424              		.file 11 "Inc/platform_pool_config.h"
 1425              		.file 12 "Lib/FreeRTOS/Source/portable/GCC/ARM_CM55_NTZ/non_secure/portmacrocommon.h"
 1426              		.file 13 "Lib/FreeRTOS/Source/include/FreeRTOS.h"
 1427              		.file 14 "Lib/FreeRTOS/Source/include/queue.h"
 1428              		.file 15 "Lib/FreeRTOS/Source/include/semphr.h"
 1429              		.file 16 "Lib/NemaGFX/include/tsi_malloc.h"
 1430              		.file 17 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-
 1431              		.file 18 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-
ARM GAS  /tmp/ccKMUTYx.s 			page 45


DEFINED SYMBOLS
                            *ABS*:00000000 nema_hal_freertos.c
     /tmp/ccKMUTYx.s:26     .data.memPools:00000000 $d
     /tmp/ccKMUTYx.s:29     .data.memPools:00000000 memPools
     /tmp/ccKMUTYx.s:40     .bss.ring_buffer_str:00000000 $d
     /tmp/ccKMUTYx.s:43     .bss.ring_buffer_str:00000000 ring_buffer_str
     /tmp/ccKMUTYx.s:46     .data.last_cl_id:00000000 $d
     /tmp/ccKMUTYx.s:49     .data.last_cl_id:00000000 last_cl_id
     /tmp/ccKMUTYx.s:52     .bss.nema_mutexes_buffers:00000000 $d
     /tmp/ccKMUTYx.s:55     .bss.nema_mutexes_buffers:00000000 nema_mutexes_buffers
     /tmp/ccKMUTYx.s:58     .bss.nema_mutexes_ids:00000000 $d
     /tmp/ccKMUTYx.s:61     .bss.nema_mutexes_ids:00000000 nema_mutexes_ids
     /tmp/ccKMUTYx.s:64     .bss.nema_irq_sem_buffer:00000000 $d
     /tmp/ccKMUTYx.s:67     .bss.nema_irq_sem_buffer:00000000 nema_irq_sem_buffer
     /tmp/ccKMUTYx.s:70     .bss.nema_irq_sem:00000000 $d
     /tmp/ccKMUTYx.s:73     .bss.nema_irq_sem:00000000 nema_irq_sem
     /tmp/ccKMUTYx.s:76     .rodata:00000000 $d
     /tmp/ccKMUTYx.s:83     .text.HAL_GPU2D_CommandListCpltCallback:00000000 $t
     /tmp/ccKMUTYx.s:89     .text.HAL_GPU2D_CommandListCpltCallback:00000000 HAL_GPU2D_CommandListCpltCallback
     /tmp/ccKMUTYx.s:151    .text.HAL_GPU2D_CommandListCpltCallback:00000050 $d
     /tmp/ccKMUTYx.s:1389   .rodata.__func__.4:00000000 __func__.4
     /tmp/ccKMUTYx.s:177    .text.nema_sys_init:00000000 $t
     /tmp/ccKMUTYx.s:183    .text.nema_sys_init:00000000 nema_sys_init
     /tmp/ccKMUTYx.s:662    .text.nema_buffer_create:00000000 nema_buffer_create
     /tmp/ccKMUTYx.s:834    .text.nema_buffer_map:00000000 nema_buffer_map
     /tmp/ccKMUTYx.s:390    .text.nema_sys_init:0000013c $d
     /tmp/ccKMUTYx.s:1395   .rodata.__func__.3:00000000 __func__.3
     /tmp/ccKMUTYx.s:410    .text.nema_wait_irq:00000000 $t
     /tmp/ccKMUTYx.s:416    .text.nema_wait_irq:00000000 nema_wait_irq
     /tmp/ccKMUTYx.s:463    .text.nema_wait_irq:00000030 $d
     /tmp/ccKMUTYx.s:468    .text.nema_wait_irq_cl:00000000 $t
     /tmp/ccKMUTYx.s:474    .text.nema_wait_irq_cl:00000000 nema_wait_irq_cl
     /tmp/ccKMUTYx.s:514    .text.nema_wait_irq_cl:00000024 $d
     /tmp/ccKMUTYx.s:519    .text.nema_wait_irq_brk:00000000 $t
     /tmp/ccKMUTYx.s:525    .text.nema_wait_irq_brk:00000000 nema_wait_irq_brk
     /tmp/ccKMUTYx.s:573    .text.nema_reg_read:00000000 nema_reg_read
     /tmp/ccKMUTYx.s:567    .text.nema_reg_read:00000000 $t
     /tmp/ccKMUTYx.s:604    .text.nema_reg_read:0000001c $d
     /tmp/ccKMUTYx.s:609    .text.nema_reg_write:00000000 $t
     /tmp/ccKMUTYx.s:615    .text.nema_reg_write:00000000 nema_reg_write
     /tmp/ccKMUTYx.s:647    .text.nema_reg_write:0000001c $d
     /tmp/ccKMUTYx.s:656    .text.nema_buffer_create:00000000 $t
     /tmp/ccKMUTYx.s:1233   .text.nema_mutex_lock:00000000 nema_mutex_lock
     /tmp/ccKMUTYx.s:1312   .text.nema_mutex_unlock:00000000 nema_mutex_unlock
     /tmp/ccKMUTYx.s:733    .text.nema_buffer_create:00000060 $d
     /tmp/ccKMUTYx.s:1401   .rodata.__func__.2:00000000 __func__.2
     /tmp/ccKMUTYx.s:740    .text.nema_buffer_create_pool:00000000 $t
     /tmp/ccKMUTYx.s:746    .text.nema_buffer_create_pool:00000000 nema_buffer_create_pool
     /tmp/ccKMUTYx.s:821    .text.nema_buffer_create_pool:00000068 $d
     /tmp/ccKMUTYx.s:1407   .rodata.__func__.1:00000000 __func__.1
     /tmp/ccKMUTYx.s:828    .text.nema_buffer_map:00000000 $t
     /tmp/ccKMUTYx.s:867    .text.nema_buffer_unmap:00000000 $t
     /tmp/ccKMUTYx.s:873    .text.nema_buffer_unmap:00000000 nema_buffer_unmap
     /tmp/ccKMUTYx.s:903    .text.nema_buffer_destroy:00000000 $t
     /tmp/ccKMUTYx.s:909    .text.nema_buffer_destroy:00000000 nema_buffer_destroy
     /tmp/ccKMUTYx.s:947    .text.nema_buffer_phys:00000000 $t
     /tmp/ccKMUTYx.s:953    .text.nema_buffer_phys:00000000 nema_buffer_phys
ARM GAS  /tmp/ccKMUTYx.s 			page 46


     /tmp/ccKMUTYx.s:986    .text.nema_buffer_flush:00000000 $t
     /tmp/ccKMUTYx.s:992    .text.nema_buffer_flush:00000000 nema_buffer_flush
     /tmp/ccKMUTYx.s:1116   .text.nema_buffer_flush:0000006c $d
     /tmp/ccKMUTYx.s:1121   .text.nema_host_free:00000000 $t
     /tmp/ccKMUTYx.s:1127   .text.nema_host_free:00000000 nema_host_free
     /tmp/ccKMUTYx.s:1166   .text.nema_host_malloc:00000000 $t
     /tmp/ccKMUTYx.s:1172   .text.nema_host_malloc:00000000 nema_host_malloc
     /tmp/ccKMUTYx.s:1220   .text.nema_host_malloc:00000038 $d
     /tmp/ccKMUTYx.s:1413   .rodata.__func__.0:00000000 __func__.0
     /tmp/ccKMUTYx.s:1227   .text.nema_mutex_lock:00000000 $t
     /tmp/ccKMUTYx.s:1301   .text.nema_mutex_lock:00000054 $d
     /tmp/ccKMUTYx.s:1306   .text.nema_mutex_unlock:00000000 $t
     /tmp/ccKMUTYx.s:1381   .text.nema_mutex_unlock:00000054 $d
     /tmp/ccKMUTYx.s:1386   .rodata.__func__.4:00000000 $d
     /tmp/ccKMUTYx.s:1392   .rodata.__func__.3:00000000 $d
     /tmp/ccKMUTYx.s:1398   .rodata.__func__.2:00000000 $d
     /tmp/ccKMUTYx.s:1404   .rodata.__func__.1:00000000 $d
     /tmp/ccKMUTYx.s:1410   .rodata.__func__.0:00000000 $d
                           .group:00000000 wm4.0.2a10773746a5c5ebb5552f50e466f80b
                           .group:00000000 wm4._newlib_version.h.4.411db44ea2338a62eca2f0777f81481b
                           .group:00000000 wm4.features.h.33.e0c9f337c65cb9f22ed5f23d082bc78b
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.stdbool.h.29.c08aa3eec75cf5b9b5003883f43253f0
                           .group:00000000 wm4.ieeefp.h.77.bd5feb87d9990dd328793ced294f6a87
                           .group:00000000 wm4.newlib.h.7.591ac1bd65c1f5b34864757667a05252
                           .group:00000000 wm4.config.h.224.10ee1ad185d877c6e334e6581faab44d
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.185.882514a1a6169ceba9142f401cbe27c6
                           .group:00000000 wm4.stddef.h.39.794fa375de48dda278c4aebb5c74aa5b
                           .group:00000000 wm4.cdefs.h.49.70fc7af612f78ddcace70fdd90b5623b
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.158.6f8e08a347b1cff664332fa350bfceb3
                           .group:00000000 wm4._types.h.127.3bdfe3ff8ea2d0985b03d9cbe93480e3
                           .group:00000000 wm4.reent.h.18.25503cdc8b7e55dd0d6ea7b3e5af7a03
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.78.6b87466b04591b1f1cb88c14fdf2ba9e
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:00000000 wm4.stddef.h.158.eec8bf00b5213f43d095cb984c5f22e3
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.stdio.h.47.dc31ec4674d7bcb103c9f08809549f45
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.87.a1e20d2651f9bfb66e51bfbe849db00a
                           .group:00000000 wm4.nema_sys_defs.h.40.e9dd9a953c9c86f3f3b90dba3354a55a
                           .group:00000000 wm4.nema_hal.h.193.74a3b292db2bcbda0132dae40ae0f4e5
                           .group:00000000 wm4.nema_cmdlist.h.30.a652eb980f08f0ed22ad00119d504926
                           .group:00000000 wm4.nema_graphics.h.61.b3907f86eccb4e55a4b69e8aebdd3657
                           .group:00000000 wm4.nema_blender.h.30.fb13cc9231bd108bca212984b3a891e0
                           .group:00000000 wm4.nema_math.h.30.ef7265c89982f7dae18e3ec2d7f3d003
                           .group:00000000 wm4.nema_version.h.35.6aae27202c190348dff84b89d4c12df7
                           .group:00000000 wm4.assert.h.11.db24e541f16414db224bf986d21017e2
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
ARM GAS  /tmp/ccKMUTYx.s 			page 47


                           .group:00000000 wm4.stm32n6xx_hal_conf.h.21.004a06df6e15ac197e03f723792da58a
                           .group:00000000 wm4.arm_cmse.h.103.a0d15a79c4c9a67da8d5831704d7248e
                           .group:00000000 wm4.stm32n6xx.h.34.80585dd08aa426c932f6311fdb7386da
                           .group:00000000 wm4.stm32n657xx.h.26.acd272cb67318cc1a4791ce2f0720ca6
                           .group:00000000 wm4.cmsis_version.h.32.0ac195c83bb4537824e6ad1c47474b79
                           .group:00000000 wm4.core_cm55.h.68.832d5cf835639cc0d28219c3d2867330
                           .group:00000000 wm4.cmsis_gcc.h.26.7a5fd1a99dbedde687044a4433ab3e15
                           .group:00000000 wm4.core_cm55.h.196.52e437a270752da561676e507b35baeb
                           .group:00000000 wm4.mpu_armv8.h.32.9d72426c8e2b47753456dcb84802c5b3
                           .group:00000000 wm4.pmu_armv8.h.32.eaa95f88a71b29390b135fd81c071b6b
                           .group:00000000 wm4.core_cm55.h.4411.860dad8650880893dd57b815844f7186
                           .group:00000000 wm4.cachel1_armv7.h.32.abd77761a989e008b0c60891114a33c7
                           .group:00000000 wm4.stm32n657xx.h.575.1c2a5e6bedffc6f9083dcc857bc6d09d
                           .group:00000000 wm4.stm32n6xx.h.114.5cf793d8af485e14f110e3e24bde1aa5
                           .group:00000000 wm4.stm32_hal_legacy.h.22.87fb12bf5a1a1e00fc134f22bc9aa8c4
                           .group:00000000 wm4.math.h.13.47cfc34cae8a1153323939c4d32cf7c2
                           .group:00000000 wm4.stm32n6xx_hal_def.h.63.3a8f01490e8852464e9fcb69092e9c75
                           .group:00000000 wm4.stm32n6xx_ll_bus.h.38.2366a295ee4cdb04833997d3787fcd2d
                           .group:00000000 wm4.stm32n6xx_ll_rcc.h.21.002e22a16fd7f67dde6dce41e8ba9620
                           .group:00000000 wm4.stm32n6xx_hal_rcc.h.194.1cb1283e40f9bebcd3fba2a9a961838e
                           .group:00000000 wm4.stm32n6xx_hal_rcc_ex.h.21.79aa32178dfef625fbd20d362449acfa
                           .group:00000000 wm4.stm32n6xx_hal_rcc.h.4359.3f0b7ad33826d95438602c9aebc08af9
                           .group:00000000 wm4.stm32n6xx_hal_gpio.h.21.89d54af663b98eb8fc098192053f7eeb
                           .group:00000000 wm4.stm32n6xx_hal_gpio_ex.h.22.4acb2e3511a98bb48b81cfc8e09fd59e
                           .group:00000000 wm4.stm32n6xx_hal_rif.h.21.424d0bafb874a777dee3742a22e13037
                           .group:00000000 wm4.stm32n6xx_hal_dma.h.21.61e48c5c2e8d25d22177834b232fe45c
                           .group:00000000 wm4.stm32n6xx_hal_dma_ex.h.21.66e597beb090a165329d6ccf665e41bc
                           .group:00000000 wm4.stm32n6xx_hal_dma.h.1020.87e2180c009560b617c1f8208140c950
                           .group:00000000 wm4.stm32n6xx_hal_cortex.h.21.f493623cc58f9454ab4eae41e395c5cc
                           .group:00000000 wm4.stm32n6xx_hal_bsec.h.21.61b309e67dd810e28897a01b1b21a97f
                           .group:00000000 wm4.stm32n6xx_hal_dcmipp.h.21.f538bfd785c6469670251ac9bc7af55d
                           .group:00000000 wm4.stm32n6xx_hal_dma2d.h.21.75c8d46cdbb72970123b3f34ae2043d7
                           .group:00000000 wm4.stm32n6xx_hal_exti.h.21.fda87e715ea6b98239ec30171d1df594
                           .group:00000000 wm4.stm32n6xx_hal_gfxmmu.h.21.9784a9103143d48bd3c37389d0e0b8e6
                           .group:00000000 wm4.stm32n6xx_hal_i2c.h.21.3f483626ff64c5bf027265bb2e1d1331
                           .group:00000000 wm4.stm32n6xx_hal_i2c_ex.h.21.79e9196c22282cdaf6b4047893638c45
                           .group:00000000 wm4.stm32n6xx_hal_i2c.h.741.1084702632703acc669e4282b3043372
                           .group:00000000 wm4.stm32n6xx_hal_icache.h.21.194b4ec6e76f32b14f65c85616854850
                           .group:00000000 wm4.stm32n6xx_hal_ltdc.h.21.ae1eb09930e7e550e48e418ac5849e4d
                           .group:00000000 wm4.stm32n6xx_hal_ltdc.h.1002.b13ede7fc94ed5ad1c6768a157d2149a
                           .group:00000000 wm4.stm32n6xx_ll_usb.h.21.d518a5d97876c2ff49040c20a2c4a120
                           .group:00000000 wm4.stm32n6xx_hal_pcd.h.155.27040aac6844effe2af8c180caf1dd2e
                           .group:00000000 wm4.stm32n6xx_hal_pwr.h.21.cdb73e4869c3fed3fc84f901ec0e5f0a
                           .group:00000000 wm4.stm32n6xx_hal_pwr_ex.h.21.1a673224a58b0c1e5fad8eeda6514208
                           .group:00000000 wm4.stm32n6xx_hal_ramcfg.h.21.a62dfbb4d2c14e9a8c634a215e37bd3d
                           .group:00000000 wm4.stm32n6xx_hal_spi.h.21.9f810303326e2d91749800e9911f8e4d
                           .group:00000000 wm4.stm32n6xx_hal_spi.h.906.93ec0695066db4253cdbcb7d84358a0b
                           .group:00000000 wm4.stm32n6xx_hal_tim.h.21.839dd2b2a70382fb2c44f8f293a84d5f
                           .group:00000000 wm4.stm32n6xx_hal_tim_ex.h.21.e372d5ac63c13441211ea4ecbd353150
                           .group:00000000 wm4.stm32n6xx_hal_uart.h.21.230f549bfa0d5ebfd77bfb311b2aca15
                           .group:00000000 wm4.stm32n6xx_hal_uart_ex.h.21.a0d5511e1d0703b7b5278c8f5472b96d
                           .group:00000000 wm4.stm32n6xx_hal_xspi.h.21.e17898be2073b6b6b19faf30b4e304e9
                           .group:00000000 wm4.stm32n6xx_hal_cacheaxi.h.21.7c3375b7903ec42376e4883320997f74
                           .group:00000000 wm4.stm32n6xx_hal_gpu2d.h.21.48d0249122abad294a630c39cc4ebaed
                           .group:00000000 wm4.stm32n6xx_hal.h.81.5e59143eba07faca3e9aeaa5470826c8
                           .group:00000000 wm4.assert.h.11.d99a111e320bc5106fc4046225782672
                           .group:00000000 wm4.nema_display.h.18.a7ea37edc500f52f8edd143955a5b4f5
ARM GAS  /tmp/ccKMUTYx.s 			page 48


                           .group:00000000 wm4.platform_pool_config.h.55.9893eddd2f808b024f6f3dc8bc315b05
                           .group:00000000 wm4.tsi_malloc.h.29.8d287b6f4ac182efa834fa8a5d12b58f
                           .group:00000000 wm4.FreeRTOS.h.59.647b1b0da38e4e98108aae13c8abe9ee
                           .group:00000000 wm4.FreeRTOSConfig.h.59.0e97f89e6eb1b28c12ea610dd500bb25
                           .group:00000000 wm4.FreeRTOS.h.80.7742fabaf5accf3762dc12f7f259a8a0
                           .group:00000000 wm4.projdefs.h.30.55a824156f299c075c33148a9fdadb99
                           .group:00000000 wm4.portmacro.h.30.cbb4b2da41f551c2a9904f0d03a1ce3e
                           .group:00000000 wm4.portmacrocommon.h.30.d5cb67896ab50a95311be7e023da5c4f
                           .group:00000000 wm4.portmacro.h.68.4051ecf710d074fb55b16d91dfebeeaa
                           .group:00000000 wm4.portable.h.61.d557c57974d490f056246a26cdcddd6c
                           .group:00000000 wm4.mpu_wrappers.h.30.ccc5f1a6903f941a88c268f5f62af3fe
                           .group:00000000 wm4.portable.h.189.522b8bd52a171d3fd1432ef06d0caa63
                           .group:00000000 wm4.FreeRTOS.h.102.fb871f3e464d99c5a57b3115545a02ad
                           .group:00000000 wm4.list.h.59.bce6419520cd4f5f98779a1530bf2118
                           .group:00000000 wm4.task.h.56.84290139c73b47f5b9aac361361a2a31
                           .group:00000000 wm4.queue.h.68.219f47fba8b59640449b84d04c5bd6d8
                           .group:00000000 wm4.semphr.h.40.c1a9c6f5bf0feb4da0b6a45d234a79d0

UNDEFINED SYMBOLS
xQueueGiveFromISR
__assert_func
xQueueCreateMutexStatic
xQueueCreateCountingSemaphoreStatic
tsi_malloc_init_pool
nema_rb_init
xQueueSemaphoreTake
HAL_GPU2D_ReadRegister
hgpu2d
HAL_GPU2D_WriteRegister
memset
tsi_malloc_pool
tsi_free
xQueueGenericSend
