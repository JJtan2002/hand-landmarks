ARM GAS  /tmp/cclxoO08.s 			page 1


   1              		.arch armv8.1-m.main
   2              		.fpu fpv5-d16
   3              		.arch_extension dsp
   4              		.arch_extension fp
   5              		.arch_extension fp.dp
   6              		.arch_extension mve
   7              		.arch_extension mve.fp
   8              		.eabi_attribute 5, "cortex-m55"
   9              		.eabi_attribute 28, 1
  10              		.eabi_attribute 20, 1
  11              		.eabi_attribute 21, 1
  12              		.eabi_attribute 23, 3
  13              		.eabi_attribute 24, 1
  14              		.eabi_attribute 25, 1
  15              		.eabi_attribute 26, 1
  16              		.eabi_attribute 30, 6
  17              		.eabi_attribute 34, 1
  18              		.eabi_attribute 38, 1
  19              		.eabi_attribute 18, 4
  20              		.file	"scrl_lcd.c"
  21              		.text
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.file 1 "Lib/screenl/Src/scrl_lcd.c"
  25              		.section	.bss.current_layer,"aw",%nobits
  28              	current_layer:
  29 0000 00       		.space	1
  30              		.section	.bss.is_layer_rgb888,"aw",%nobits
  31              		.align	2
  34              	is_layer_rgb888:
  35 0000 00000000 		.space	8
  35      00000000 
  36              		.section	.bss.is_layer_argb8888,"aw",%nobits
  37              		.align	2
  40              	is_layer_argb8888:
  41 0000 00000000 		.space	8
  41      00000000 
  42              		.section	.text.SCRL_ConfigLayer_Layer_default,"ax",%progbits
  43              		.align	1
  44              		.syntax unified
  45              		.thumb
  46              		.thumb_func
  48              	SCRL_ConfigLayer_Layer_default:
  49              	.LFB835:
   1:Lib/screenl/Src/scrl_lcd.c **** #include "scrl.h"
   2:Lib/screenl/Src/scrl_lcd.c **** 
   3:Lib/screenl/Src/scrl_lcd.c **** #include <assert.h>
   4:Lib/screenl/Src/scrl_lcd.c **** 
   5:Lib/screenl/Src/scrl_lcd.c **** #include "stm32n6570_discovery_lcd.h"
   6:Lib/screenl/Src/scrl_lcd.c **** #include "stm32_lcd.h"
   7:Lib/screenl/Src/scrl_lcd.c **** 
   8:Lib/screenl/Src/scrl_lcd.c **** static SCRL_Layer current_layer;
   9:Lib/screenl/Src/scrl_lcd.c **** static int is_layer_rgb888[SCRL_LAYER_NB];
  10:Lib/screenl/Src/scrl_lcd.c **** static int is_layer_argb8888[SCRL_LAYER_NB];
  11:Lib/screenl/Src/scrl_lcd.c **** 
  12:Lib/screenl/Src/scrl_lcd.c **** static HAL_StatusTypeDef SCRL_ConfigLayer_Layer_default(LTDC_HandleTypeDef *hltdc, uint32_t LayerIn
  13:Lib/screenl/Src/scrl_lcd.c **** {
ARM GAS  /tmp/cclxoO08.s 			page 2


  50              		.loc 1 13 1
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 72
  53              		@ frame_needed = 1, uses_anonymous_args = 0
  54 0000 80B5     		push	{r7, lr}
  55              		.cfi_def_cfa_offset 8
  56              		.cfi_offset 7, -8
  57              		.cfi_offset 14, -4
  58 0002 92B0     		sub	sp, sp, #72
  59              		.cfi_def_cfa_offset 80
  60 0004 00AF     		add	r7, sp, #0
  61              		.cfi_def_cfa_register 7
  62 0006 F860     		str	r0, [r7, #12]
  63 0008 B960     		str	r1, [r7, #8]
  64 000a 7A60     		str	r2, [r7, #4]
  14:Lib/screenl/Src/scrl_lcd.c ****   LTDC_LayerCfgTypeDef pLayerCfg ={0};
  65              		.loc 1 14 24
  66 000c 07F11403 		add	r3, r7, #20
  67 0010 3422     		movs	r2, #52
  68 0012 0021     		movs	r1, #0
  69 0014 1846     		mov	r0, r3
  70 0016 FFF7FEFF 		bl	memset
  15:Lib/screenl/Src/scrl_lcd.c **** 
  16:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.WindowX0 = Config->X0;
  71              		.loc 1 16 30
  72 001a 7B68     		ldr	r3, [r7, #4]
  73 001c 1B68     		ldr	r3, [r3]
  74              		.loc 1 16 22
  75 001e 7B61     		str	r3, [r7, #20]
  17:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.WindowX1 = Config->X1;
  76              		.loc 1 17 30
  77 0020 7B68     		ldr	r3, [r7, #4]
  78 0022 5B68     		ldr	r3, [r3, #4]
  79              		.loc 1 17 22
  80 0024 BB61     		str	r3, [r7, #24]
  18:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.WindowY0 = Config->Y0;
  81              		.loc 1 18 30
  82 0026 7B68     		ldr	r3, [r7, #4]
  83 0028 9B68     		ldr	r3, [r3, #8]
  84              		.loc 1 18 22
  85 002a FB61     		str	r3, [r7, #28]
  19:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.WindowY1 = Config->Y1;
  86              		.loc 1 19 30
  87 002c 7B68     		ldr	r3, [r7, #4]
  88 002e DB68     		ldr	r3, [r3, #12]
  89              		.loc 1 19 22
  90 0030 3B62     		str	r3, [r7, #32]
  20:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.PixelFormat = Config->PixelFormat;
  91              		.loc 1 20 33
  92 0032 7B68     		ldr	r3, [r7, #4]
  93 0034 1B69     		ldr	r3, [r3, #16]
  94              		.loc 1 20 25
  95 0036 7B62     		str	r3, [r7, #36]
  21:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Alpha = LTDC_LxCACR_CONSTA;
  96              		.loc 1 21 19
  97 0038 FF23     		movs	r3, #255
  98 003a BB62     		str	r3, [r7, #40]
ARM GAS  /tmp/cclxoO08.s 			page 3


  22:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Alpha0 = 0;
  99              		.loc 1 22 20
 100 003c 0023     		movs	r3, #0
 101 003e FB62     		str	r3, [r7, #44]
  23:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 102              		.loc 1 23 29
 103 0040 4FF4C063 		mov	r3, #1536
 104 0044 3B63     		str	r3, [r7, #48]
  24:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 105              		.loc 1 24 29
 106 0046 0723     		movs	r3, #7
 107 0048 7B63     		str	r3, [r7, #52]
  25:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.FBStartAdress = Config->Address;
 108              		.loc 1 25 35
 109 004a 7B68     		ldr	r3, [r7, #4]
 110 004c 5B69     		ldr	r3, [r3, #20]
 111              		.loc 1 25 27
 112 004e BB63     		str	r3, [r7, #56]
  26:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 113              		.loc 1 26 33
 114 0050 7B68     		ldr	r3, [r7, #4]
 115 0052 5A68     		ldr	r2, [r3, #4]
 116              		.loc 1 26 46
 117 0054 7B68     		ldr	r3, [r7, #4]
 118 0056 1B68     		ldr	r3, [r3]
 119              		.loc 1 26 38
 120 0058 D31A     		subs	r3, r2, r3
 121              		.loc 1 26 24
 122 005a FB63     		str	r3, [r7, #60]
  27:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 123              		.loc 1 27 34
 124 005c 7B68     		ldr	r3, [r7, #4]
 125 005e DA68     		ldr	r2, [r3, #12]
 126              		.loc 1 27 47
 127 0060 7B68     		ldr	r3, [r7, #4]
 128 0062 9B68     		ldr	r3, [r3, #8]
 129              		.loc 1 27 39
 130 0064 D31A     		subs	r3, r2, r3
 131              		.loc 1 27 25
 132 0066 3B64     		str	r3, [r7, #64]
  28:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Backcolor.Blue = 0;
 133              		.loc 1 28 28
 134 0068 0023     		movs	r3, #0
 135 006a 87F84430 		strb	r3, [r7, #68]
  29:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Backcolor.Green = 0;
 136              		.loc 1 29 29
 137 006e 0023     		movs	r3, #0
 138 0070 87F84530 		strb	r3, [r7, #69]
  30:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Backcolor.Red = 0;
 139              		.loc 1 30 27
 140 0074 0023     		movs	r3, #0
 141 0076 87F84630 		strb	r3, [r7, #70]
  31:Lib/screenl/Src/scrl_lcd.c ****   return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 142              		.loc 1 31 10
 143 007a 07F11403 		add	r3, r7, #20
 144 007e BA68     		ldr	r2, [r7, #8]
 145 0080 1946     		mov	r1, r3
ARM GAS  /tmp/cclxoO08.s 			page 4


 146 0082 F868     		ldr	r0, [r7, #12]
 147 0084 FFF7FEFF 		bl	HAL_LTDC_ConfigLayer
 148 0088 0346     		mov	r3, r0
  32:Lib/screenl/Src/scrl_lcd.c **** }
 149              		.loc 1 32 1
 150 008a 1846     		mov	r0, r3
 151 008c 4837     		adds	r7, r7, #72
 152              		.cfi_def_cfa_offset 8
 153 008e BD46     		mov	sp, r7
 154              		.cfi_def_cfa_register 13
 155              		@ sp needed
 156 0090 80BD     		pop	{r7, pc}
 157              		.cfi_endproc
 158              	.LFE835:
 160              		.section	.text.SCRL_ConfigLayer_Layer_rgb888,"ax",%progbits
 161              		.align	1
 162              		.syntax unified
 163              		.thumb
 164              		.thumb_func
 166              	SCRL_ConfigLayer_Layer_rgb888:
 167              	.LFB836:
  33:Lib/screenl/Src/scrl_lcd.c **** 
  34:Lib/screenl/Src/scrl_lcd.c **** static HAL_StatusTypeDef SCRL_ConfigLayer_Layer_rgb888(LTDC_HandleTypeDef *hltdc, uint32_t LayerInd
  35:Lib/screenl/Src/scrl_lcd.c **** {
 168              		.loc 1 35 1
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 104
 171              		@ frame_needed = 1, uses_anonymous_args = 0
 172 0000 80B5     		push	{r7, lr}
 173              		.cfi_def_cfa_offset 8
 174              		.cfi_offset 7, -8
 175              		.cfi_offset 14, -4
 176 0002 9AB0     		sub	sp, sp, #104
 177              		.cfi_def_cfa_offset 112
 178 0004 00AF     		add	r7, sp, #0
 179              		.cfi_def_cfa_register 7
 180 0006 F860     		str	r0, [r7, #12]
 181 0008 B960     		str	r1, [r7, #8]
 182 000a 7A60     		str	r2, [r7, #4]
  36:Lib/screenl/Src/scrl_lcd.c ****   LTDC_LayerFlexARGBTypeDef pLayerCfg ={0};
 183              		.loc 1 36 29
 184 000c 07F11403 		add	r3, r7, #20
 185 0010 5422     		movs	r2, #84
 186 0012 0021     		movs	r1, #0
 187 0014 1846     		mov	r0, r3
 188 0016 FFF7FEFF 		bl	memset
  37:Lib/screenl/Src/scrl_lcd.c **** 
  38:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.WindowX0 = Config->X0;
 189              		.loc 1 38 36
 190 001a 7B68     		ldr	r3, [r7, #4]
 191 001c 1B68     		ldr	r3, [r3]
 192              		.loc 1 38 28
 193 001e 7B61     		str	r3, [r7, #20]
  39:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.WindowX1 = Config->X1;
 194              		.loc 1 39 36
 195 0020 7B68     		ldr	r3, [r7, #4]
 196 0022 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/cclxoO08.s 			page 5


 197              		.loc 1 39 28
 198 0024 BB61     		str	r3, [r7, #24]
  40:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.WindowY0 = Config->Y0;
 199              		.loc 1 40 36
 200 0026 7B68     		ldr	r3, [r7, #4]
 201 0028 9B68     		ldr	r3, [r3, #8]
 202              		.loc 1 40 28
 203 002a FB61     		str	r3, [r7, #28]
  41:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.WindowY1 = Config->Y1;
 204              		.loc 1 41 36
 205 002c 7B68     		ldr	r3, [r7, #4]
 206 002e DB68     		ldr	r3, [r3, #12]
 207              		.loc 1 41 28
 208 0030 3B62     		str	r3, [r7, #32]
  42:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.Alpha = LTDC_LxCACR_CONSTA;
 209              		.loc 1 42 25
 210 0032 FF23     		movs	r3, #255
 211 0034 7B62     		str	r3, [r7, #36]
  43:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.Alpha0 = 0;
 212              		.loc 1 43 26
 213 0036 0023     		movs	r3, #0
 214 0038 BB62     		str	r3, [r7, #40]
  44:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 215              		.loc 1 44 35
 216 003a 4FF4C063 		mov	r3, #1536
 217 003e FB62     		str	r3, [r7, #44]
  45:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 218              		.loc 1 45 35
 219 0040 0723     		movs	r3, #7
 220 0042 3B63     		str	r3, [r7, #48]
  46:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.ImageWidth = (Config->X1 - Config->X0);
 221              		.loc 1 46 39
 222 0044 7B68     		ldr	r3, [r7, #4]
 223 0046 5A68     		ldr	r2, [r3, #4]
 224              		.loc 1 46 52
 225 0048 7B68     		ldr	r3, [r7, #4]
 226 004a 1B68     		ldr	r3, [r3]
 227              		.loc 1 46 44
 228 004c D31A     		subs	r3, r2, r3
 229              		.loc 1 46 30
 230 004e 7B63     		str	r3, [r7, #52]
  47:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.ImageHeight = (Config->Y1 - Config->Y0);
 231              		.loc 1 47 40
 232 0050 7B68     		ldr	r3, [r7, #4]
 233 0052 DA68     		ldr	r2, [r3, #12]
 234              		.loc 1 47 53
 235 0054 7B68     		ldr	r3, [r7, #4]
 236 0056 9B68     		ldr	r3, [r3, #8]
 237              		.loc 1 47 45
 238 0058 D31A     		subs	r3, r2, r3
 239              		.loc 1 47 31
 240 005a BB63     		str	r3, [r7, #56]
  48:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.Backcolor.Blue = 0;
 241              		.loc 1 48 34
 242 005c 0023     		movs	r3, #0
 243 005e 87F83C30 		strb	r3, [r7, #60]
  49:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.Backcolor.Green = 0;
ARM GAS  /tmp/cclxoO08.s 			page 6


 244              		.loc 1 49 35
 245 0062 0023     		movs	r3, #0
 246 0064 87F83D30 		strb	r3, [r7, #61]
  50:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.Backcolor.Red = 0;
 247              		.loc 1 50 33
 248 0068 0023     		movs	r3, #0
 249 006a 87F83E30 		strb	r3, [r7, #62]
  51:Lib/screenl/Src/scrl_lcd.c **** 
  52:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.FlexARGB.PixelSize = 3;/*LTDC_ARGB_PIXEL_SIZE_3_BYTES;*/
 250              		.loc 1 52 32
 251 006e 0323     		movs	r3, #3
 252 0070 3B64     		str	r3, [r7, #64]
  53:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.FlexARGB.AlphaPos = 0;
 253              		.loc 1 53 31
 254 0072 0023     		movs	r3, #0
 255 0074 7B64     		str	r3, [r7, #68]
  54:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.FlexARGB.RedPos = 0;
 256              		.loc 1 54 29
 257 0076 0023     		movs	r3, #0
 258 0078 BB64     		str	r3, [r7, #72]
  55:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.FlexARGB.GreenPos = 8;
 259              		.loc 1 55 31
 260 007a 0823     		movs	r3, #8
 261 007c FB64     		str	r3, [r7, #76]
  56:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.FlexARGB.BluePos = 16;
 262              		.loc 1 56 30
 263 007e 1023     		movs	r3, #16
 264 0080 3B65     		str	r3, [r7, #80]
  57:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.FlexARGB.AlphaWidth = 0;
 265              		.loc 1 57 33
 266 0082 0023     		movs	r3, #0
 267 0084 7B65     		str	r3, [r7, #84]
  58:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.FlexARGB.RedWidth = 8;
 268              		.loc 1 58 31
 269 0086 0823     		movs	r3, #8
 270 0088 BB65     		str	r3, [r7, #88]
  59:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.FlexARGB.GreenWidth = 8;
 271              		.loc 1 59 33
 272 008a 0823     		movs	r3, #8
 273 008c FB65     		str	r3, [r7, #92]
  60:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.FlexARGB.BlueWidth = 8;
 274              		.loc 1 60 32
 275 008e 0823     		movs	r3, #8
 276 0090 3B66     		str	r3, [r7, #96]
  61:Lib/screenl/Src/scrl_lcd.c **** 
  62:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.ARGBAddress = Config->Address;
 277              		.loc 1 62 33
 278 0092 7B68     		ldr	r3, [r7, #4]
 279 0094 5B69     		ldr	r3, [r3, #20]
 280              		.loc 1 62 25
 281 0096 7B66     		str	r3, [r7, #100]
  63:Lib/screenl/Src/scrl_lcd.c **** 
  64:Lib/screenl/Src/scrl_lcd.c ****   return HAL_LTDC_ConfigLayerFlexARGB(hltdc, &pLayerCfg, LayerIndex);
 282              		.loc 1 64 10
 283 0098 07F11403 		add	r3, r7, #20
 284 009c BA68     		ldr	r2, [r7, #8]
 285 009e 1946     		mov	r1, r3
ARM GAS  /tmp/cclxoO08.s 			page 7


 286 00a0 F868     		ldr	r0, [r7, #12]
 287 00a2 FFF7FEFF 		bl	HAL_LTDC_ConfigLayerFlexARGB
 288 00a6 0346     		mov	r3, r0
  65:Lib/screenl/Src/scrl_lcd.c **** }
 289              		.loc 1 65 1
 290 00a8 1846     		mov	r0, r3
 291 00aa 6837     		adds	r7, r7, #104
 292              		.cfi_def_cfa_offset 8
 293 00ac BD46     		mov	sp, r7
 294              		.cfi_def_cfa_register 13
 295              		@ sp needed
 296 00ae 80BD     		pop	{r7, pc}
 297              		.cfi_endproc
 298              	.LFE836:
 300              		.section	.text.SCRL_ConfigLayer_Layer_argb888,"ax",%progbits
 301              		.align	1
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 306              	SCRL_ConfigLayer_Layer_argb888:
 307              	.LFB837:
  66:Lib/screenl/Src/scrl_lcd.c **** 
  67:Lib/screenl/Src/scrl_lcd.c **** static HAL_StatusTypeDef SCRL_ConfigLayer_Layer_argb888(LTDC_HandleTypeDef *hltdc, uint32_t LayerIn
  68:Lib/screenl/Src/scrl_lcd.c **** {
 308              		.loc 1 68 1
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 104
 311              		@ frame_needed = 1, uses_anonymous_args = 0
 312 0000 80B5     		push	{r7, lr}
 313              		.cfi_def_cfa_offset 8
 314              		.cfi_offset 7, -8
 315              		.cfi_offset 14, -4
 316 0002 9AB0     		sub	sp, sp, #104
 317              		.cfi_def_cfa_offset 112
 318 0004 00AF     		add	r7, sp, #0
 319              		.cfi_def_cfa_register 7
 320 0006 F860     		str	r0, [r7, #12]
 321 0008 B960     		str	r1, [r7, #8]
 322 000a 7A60     		str	r2, [r7, #4]
  69:Lib/screenl/Src/scrl_lcd.c ****   LTDC_LayerFlexARGBTypeDef pLayerCfg ={0};
 323              		.loc 1 69 29
 324 000c 07F11403 		add	r3, r7, #20
 325 0010 5422     		movs	r2, #84
 326 0012 0021     		movs	r1, #0
 327 0014 1846     		mov	r0, r3
 328 0016 FFF7FEFF 		bl	memset
  70:Lib/screenl/Src/scrl_lcd.c **** 
  71:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.WindowX0 = Config->X0;
 329              		.loc 1 71 36
 330 001a 7B68     		ldr	r3, [r7, #4]
 331 001c 1B68     		ldr	r3, [r3]
 332              		.loc 1 71 28
 333 001e 7B61     		str	r3, [r7, #20]
  72:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.WindowX1 = Config->X1;
 334              		.loc 1 72 36
 335 0020 7B68     		ldr	r3, [r7, #4]
 336 0022 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/cclxoO08.s 			page 8


 337              		.loc 1 72 28
 338 0024 BB61     		str	r3, [r7, #24]
  73:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.WindowY0 = Config->Y0;
 339              		.loc 1 73 36
 340 0026 7B68     		ldr	r3, [r7, #4]
 341 0028 9B68     		ldr	r3, [r3, #8]
 342              		.loc 1 73 28
 343 002a FB61     		str	r3, [r7, #28]
  74:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.WindowY1 = Config->Y1;
 344              		.loc 1 74 36
 345 002c 7B68     		ldr	r3, [r7, #4]
 346 002e DB68     		ldr	r3, [r3, #12]
 347              		.loc 1 74 28
 348 0030 3B62     		str	r3, [r7, #32]
  75:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.Alpha = LTDC_LxCACR_CONSTA;
 349              		.loc 1 75 25
 350 0032 FF23     		movs	r3, #255
 351 0034 7B62     		str	r3, [r7, #36]
  76:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.Alpha0 = 0;
 352              		.loc 1 76 26
 353 0036 0023     		movs	r3, #0
 354 0038 BB62     		str	r3, [r7, #40]
  77:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 355              		.loc 1 77 35
 356 003a 4FF4C063 		mov	r3, #1536
 357 003e FB62     		str	r3, [r7, #44]
  78:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 358              		.loc 1 78 35
 359 0040 0723     		movs	r3, #7
 360 0042 3B63     		str	r3, [r7, #48]
  79:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.ImageWidth = (Config->X1 - Config->X0);
 361              		.loc 1 79 39
 362 0044 7B68     		ldr	r3, [r7, #4]
 363 0046 5A68     		ldr	r2, [r3, #4]
 364              		.loc 1 79 52
 365 0048 7B68     		ldr	r3, [r7, #4]
 366 004a 1B68     		ldr	r3, [r3]
 367              		.loc 1 79 44
 368 004c D31A     		subs	r3, r2, r3
 369              		.loc 1 79 30
 370 004e 7B63     		str	r3, [r7, #52]
  80:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.ImageHeight = (Config->Y1 - Config->Y0);
 371              		.loc 1 80 40
 372 0050 7B68     		ldr	r3, [r7, #4]
 373 0052 DA68     		ldr	r2, [r3, #12]
 374              		.loc 1 80 53
 375 0054 7B68     		ldr	r3, [r7, #4]
 376 0056 9B68     		ldr	r3, [r3, #8]
 377              		.loc 1 80 45
 378 0058 D31A     		subs	r3, r2, r3
 379              		.loc 1 80 31
 380 005a BB63     		str	r3, [r7, #56]
  81:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.Backcolor.Blue = 0;
 381              		.loc 1 81 34
 382 005c 0023     		movs	r3, #0
 383 005e 87F83C30 		strb	r3, [r7, #60]
  82:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.Backcolor.Green = 0;
ARM GAS  /tmp/cclxoO08.s 			page 9


 384              		.loc 1 82 35
 385 0062 0023     		movs	r3, #0
 386 0064 87F83D30 		strb	r3, [r7, #61]
  83:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.Layer.Backcolor.Red = 0;
 387              		.loc 1 83 33
 388 0068 0023     		movs	r3, #0
 389 006a 87F83E30 		strb	r3, [r7, #62]
  84:Lib/screenl/Src/scrl_lcd.c **** 
  85:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.FlexARGB.PixelSize = 4;/*LTDC_ARGB_PIXEL_SIZE_4_BYTES;*/
 390              		.loc 1 85 32
 391 006e 0423     		movs	r3, #4
 392 0070 3B64     		str	r3, [r7, #64]
  86:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.FlexARGB.AlphaPos = 0;
 393              		.loc 1 86 31
 394 0072 0023     		movs	r3, #0
 395 0074 7B64     		str	r3, [r7, #68]
  87:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.FlexARGB.RedPos = 0;
 396              		.loc 1 87 29
 397 0076 0023     		movs	r3, #0
 398 0078 BB64     		str	r3, [r7, #72]
  88:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.FlexARGB.GreenPos = 8;
 399              		.loc 1 88 31
 400 007a 0823     		movs	r3, #8
 401 007c FB64     		str	r3, [r7, #76]
  89:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.FlexARGB.BluePos = 16;
 402              		.loc 1 89 30
 403 007e 1023     		movs	r3, #16
 404 0080 3B65     		str	r3, [r7, #80]
  90:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.FlexARGB.AlphaWidth = 0;
 405              		.loc 1 90 33
 406 0082 0023     		movs	r3, #0
 407 0084 7B65     		str	r3, [r7, #84]
  91:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.FlexARGB.RedWidth = 8;
 408              		.loc 1 91 31
 409 0086 0823     		movs	r3, #8
 410 0088 BB65     		str	r3, [r7, #88]
  92:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.FlexARGB.GreenWidth = 8;
 411              		.loc 1 92 33
 412 008a 0823     		movs	r3, #8
 413 008c FB65     		str	r3, [r7, #92]
  93:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.FlexARGB.BlueWidth = 8;
 414              		.loc 1 93 32
 415 008e 0823     		movs	r3, #8
 416 0090 3B66     		str	r3, [r7, #96]
  94:Lib/screenl/Src/scrl_lcd.c **** 
  95:Lib/screenl/Src/scrl_lcd.c ****   pLayerCfg.ARGBAddress = Config->Address;
 417              		.loc 1 95 33
 418 0092 7B68     		ldr	r3, [r7, #4]
 419 0094 5B69     		ldr	r3, [r3, #20]
 420              		.loc 1 95 25
 421 0096 7B66     		str	r3, [r7, #100]
  96:Lib/screenl/Src/scrl_lcd.c **** 
  97:Lib/screenl/Src/scrl_lcd.c ****   return HAL_LTDC_ConfigLayerFlexARGB(hltdc, &pLayerCfg, LayerIndex);
 422              		.loc 1 97 10
 423 0098 07F11403 		add	r3, r7, #20
 424 009c BA68     		ldr	r2, [r7, #8]
 425 009e 1946     		mov	r1, r3
ARM GAS  /tmp/cclxoO08.s 			page 10


 426 00a0 F868     		ldr	r0, [r7, #12]
 427 00a2 FFF7FEFF 		bl	HAL_LTDC_ConfigLayerFlexARGB
 428 00a6 0346     		mov	r3, r0
  98:Lib/screenl/Src/scrl_lcd.c **** }
 429              		.loc 1 98 1
 430 00a8 1846     		mov	r0, r3
 431 00aa 6837     		adds	r7, r7, #104
 432              		.cfi_def_cfa_offset 8
 433 00ac BD46     		mov	sp, r7
 434              		.cfi_def_cfa_register 13
 435              		@ sp needed
 436 00ae 80BD     		pop	{r7, pc}
 437              		.cfi_endproc
 438              	.LFE837:
 440              		.section	.rodata
 441              		.align	2
 442              	.LC0:
 443 0000 3000     		.ascii	"0\000"
 444 0002 0000     		.align	2
 445              	.LC1:
 446 0004 4C69622F 		.ascii	"Lib/screenl/Src/scrl_lcd.c\000"
 446      73637265 
 446      656E6C2F 
 446      5372632F 
 446      7363726C 
 447              		.section	.text.pixel_format_from_scrl_format,"ax",%progbits
 448              		.align	1
 449              		.syntax unified
 450              		.thumb
 451              		.thumb_func
 453              	pixel_format_from_scrl_format:
 454              	.LFB838:
  99:Lib/screenl/Src/scrl_lcd.c **** 
 100:Lib/screenl/Src/scrl_lcd.c **** static uint32_t pixel_format_from_scrl_format(SCRL_Format fmt)
 101:Lib/screenl/Src/scrl_lcd.c **** {
 455              		.loc 1 101 1
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 16
 458              		@ frame_needed = 1, uses_anonymous_args = 0
 459 0000 80B5     		push	{r7, lr}
 460              		.cfi_def_cfa_offset 8
 461              		.cfi_offset 7, -8
 462              		.cfi_offset 14, -4
 463 0002 84B0     		sub	sp, sp, #16
 464              		.cfi_def_cfa_offset 24
 465 0004 00AF     		add	r7, sp, #0
 466              		.cfi_def_cfa_register 7
 467 0006 0346     		mov	r3, r0
 468 0008 FB71     		strb	r3, [r7, #7]
 102:Lib/screenl/Src/scrl_lcd.c ****   uint32_t res = LCD_PIXEL_FORMAT_RGB565;
 469              		.loc 1 102 12
 470 000a 0223     		movs	r3, #2
 471 000c FB60     		str	r3, [r7, #12]
 103:Lib/screenl/Src/scrl_lcd.c **** 
 104:Lib/screenl/Src/scrl_lcd.c ****   switch (fmt) {
 472              		.loc 1 104 3
 473 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  /tmp/cclxoO08.s 			page 11


 474 0010 052B     		cmp	r3, #5
 475 0012 1ED8     		bhi	.L8
 476 0014 01A2     		adr	r2, .L10
 477 0016 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 478 001a 00BF     		.p2align 2
 479              	.L10:
 480 001c 35000000 		.word	.L14+1
 481 0020 3B000000 		.word	.L13+1
 482 0024 53000000 		.word	.L8+1
 483 0028 4D000000 		.word	.L12+1
 484 002c 47000000 		.word	.L11+1
 485 0030 41000000 		.word	.L9+1
 486              		.p2align 1
 487              	.L14:
 105:Lib/screenl/Src/scrl_lcd.c ****   case SCRL_RGB565:
 106:Lib/screenl/Src/scrl_lcd.c ****     res = LCD_PIXEL_FORMAT_RGB565;
 488              		.loc 1 106 9
 489 0034 0223     		movs	r3, #2
 490 0036 FB60     		str	r3, [r7, #12]
 107:Lib/screenl/Src/scrl_lcd.c ****     break;
 491              		.loc 1 107 5
 492 0038 11E0     		b	.L15
 493              	.L13:
 108:Lib/screenl/Src/scrl_lcd.c ****   case SCRL_ARGB4444:
 109:Lib/screenl/Src/scrl_lcd.c ****     res = LCD_PIXEL_FORMAT_ARGB4444;
 494              		.loc 1 109 9
 495 003a 0423     		movs	r3, #4
 496 003c FB60     		str	r3, [r7, #12]
 110:Lib/screenl/Src/scrl_lcd.c ****     break;
 497              		.loc 1 110 5
 498 003e 0EE0     		b	.L15
 499              	.L9:
 111:Lib/screenl/Src/scrl_lcd.c ****   case SCRL_BGR888:
 112:Lib/screenl/Src/scrl_lcd.c ****     res = LCD_PIXEL_FORMAT_RGB888;
 500              		.loc 1 112 9
 501 0040 0123     		movs	r3, #1
 502 0042 FB60     		str	r3, [r7, #12]
 113:Lib/screenl/Src/scrl_lcd.c ****     break;
 503              		.loc 1 113 5
 504 0044 0BE0     		b	.L15
 505              	.L11:
 114:Lib/screenl/Src/scrl_lcd.c ****   case SCRL_RGB888:
 115:Lib/screenl/Src/scrl_lcd.c ****     res = LCD_PIXEL_FORMAT_RGB888;
 506              		.loc 1 115 9
 507 0046 0123     		movs	r3, #1
 508 0048 FB60     		str	r3, [r7, #12]
 116:Lib/screenl/Src/scrl_lcd.c ****     break;
 509              		.loc 1 116 5
 510 004a 08E0     		b	.L15
 511              	.L12:
 117:Lib/screenl/Src/scrl_lcd.c ****   case SCRL_ARGB8888:
 118:Lib/screenl/Src/scrl_lcd.c ****     res = LCD_PIXEL_FORMAT_ARGB8888;
 512              		.loc 1 118 9
 513 004c 0023     		movs	r3, #0
 514 004e FB60     		str	r3, [r7, #12]
 119:Lib/screenl/Src/scrl_lcd.c ****     break;
 515              		.loc 1 119 5
ARM GAS  /tmp/cclxoO08.s 			page 12


 516 0050 05E0     		b	.L15
 517              	.L8:
 120:Lib/screenl/Src/scrl_lcd.c ****   default:
 121:Lib/screenl/Src/scrl_lcd.c ****     assert(0);
 518              		.loc 1 121 5
 519 0052 054B     		ldr	r3, .L17
 520 0054 054A     		ldr	r2, .L17+4
 521 0056 7921     		movs	r1, #121
 522 0058 0548     		ldr	r0, .L17+8
 523 005a FFF7FEFF 		bl	__assert_func
 524              	.L15:
 122:Lib/screenl/Src/scrl_lcd.c ****   }
 123:Lib/screenl/Src/scrl_lcd.c **** 
 124:Lib/screenl/Src/scrl_lcd.c ****   return res;
 525              		.loc 1 124 10
 526 005e FB68     		ldr	r3, [r7, #12]
 125:Lib/screenl/Src/scrl_lcd.c **** }
 527              		.loc 1 125 1
 528 0060 1846     		mov	r0, r3
 529 0062 1037     		adds	r7, r7, #16
 530              		.cfi_def_cfa_offset 8
 531 0064 BD46     		mov	sp, r7
 532              		.cfi_def_cfa_register 13
 533              		@ sp needed
 534 0066 80BD     		pop	{r7, pc}
 535              	.L18:
 536              		.align	2
 537              	.L17:
 538 0068 00000000 		.word	.LC0
 539 006c 00000000 		.word	__func__.1
 540 0070 04000000 		.word	.LC1
 541              		.cfi_endproc
 542              	.LFE838:
 544              		.section	.text.fill_lcd_layer_config_from_scrl_layer_config,"ax",%progbits
 545              		.align	1
 546              		.syntax unified
 547              		.thumb
 548              		.thumb_func
 550              	fill_lcd_layer_config_from_scrl_layer_config:
 551              	.LFB839:
 126:Lib/screenl/Src/scrl_lcd.c **** 
 127:Lib/screenl/Src/scrl_lcd.c **** static void fill_lcd_layer_config_from_scrl_layer_config(SCRL_LayerConfig *l, BSP_LCD_LayerConfig_t
 128:Lib/screenl/Src/scrl_lcd.c **** {
 552              		.loc 1 128 1
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 8
 555              		@ frame_needed = 1, uses_anonymous_args = 0
 556 0000 80B5     		push	{r7, lr}
 557              		.cfi_def_cfa_offset 8
 558              		.cfi_offset 7, -8
 559              		.cfi_offset 14, -4
 560 0002 82B0     		sub	sp, sp, #8
 561              		.cfi_def_cfa_offset 16
 562 0004 00AF     		add	r7, sp, #0
 563              		.cfi_def_cfa_register 7
 564 0006 7860     		str	r0, [r7, #4]
 565 0008 3960     		str	r1, [r7]
ARM GAS  /tmp/cclxoO08.s 			page 13


 129:Lib/screenl/Src/scrl_lcd.c ****   layer_config->X0 = l->origin.x;
 566              		.loc 1 129 31
 567 000a 7B68     		ldr	r3, [r7, #4]
 568 000c 1B88     		ldrh	r3, [r3]
 569 000e 1A46     		mov	r2, r3
 570              		.loc 1 129 20
 571 0010 3B68     		ldr	r3, [r7]
 572 0012 1A60     		str	r2, [r3]
 130:Lib/screenl/Src/scrl_lcd.c ****   layer_config->Y0 = l->origin.y;
 573              		.loc 1 130 31
 574 0014 7B68     		ldr	r3, [r7, #4]
 575 0016 5B88     		ldrh	r3, [r3, #2]
 576 0018 1A46     		mov	r2, r3
 577              		.loc 1 130 20
 578 001a 3B68     		ldr	r3, [r7]
 579 001c 9A60     		str	r2, [r3, #8]
 131:Lib/screenl/Src/scrl_lcd.c ****   layer_config->X1 = layer_config->X0 + l->size.width;
 580              		.loc 1 131 34
 581 001e 3B68     		ldr	r3, [r7]
 582 0020 1B68     		ldr	r3, [r3]
 583              		.loc 1 131 48
 584 0022 7A68     		ldr	r2, [r7, #4]
 585 0024 9288     		ldrh	r2, [r2, #4]
 586              		.loc 1 131 39
 587 0026 1A44     		add	r2, r2, r3
 588              		.loc 1 131 20
 589 0028 3B68     		ldr	r3, [r7]
 590 002a 5A60     		str	r2, [r3, #4]
 132:Lib/screenl/Src/scrl_lcd.c ****   layer_config->Y1 = layer_config->Y0 + l->size.height;
 591              		.loc 1 132 34
 592 002c 3B68     		ldr	r3, [r7]
 593 002e 9B68     		ldr	r3, [r3, #8]
 594              		.loc 1 132 48
 595 0030 7A68     		ldr	r2, [r7, #4]
 596 0032 D288     		ldrh	r2, [r2, #6]
 597              		.loc 1 132 39
 598 0034 1A44     		add	r2, r2, r3
 599              		.loc 1 132 20
 600 0036 3B68     		ldr	r3, [r7]
 601 0038 DA60     		str	r2, [r3, #12]
 133:Lib/screenl/Src/scrl_lcd.c ****   layer_config->PixelFormat = pixel_format_from_scrl_format(l->format);
 602              		.loc 1 133 31
 603 003a 7B68     		ldr	r3, [r7, #4]
 604 003c 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 605 003e 1846     		mov	r0, r3
 606 0040 FFF7FEFF 		bl	pixel_format_from_scrl_format
 607 0044 0246     		mov	r2, r0
 608              		.loc 1 133 29 discriminator 1
 609 0046 3B68     		ldr	r3, [r7]
 610 0048 1A61     		str	r2, [r3, #16]
 134:Lib/screenl/Src/scrl_lcd.c ****   layer_config->Address = (uint32_t) l->address;
 611              		.loc 1 134 39
 612 004a 7B68     		ldr	r3, [r7, #4]
 613 004c DB68     		ldr	r3, [r3, #12]
 614              		.loc 1 134 27
 615 004e 1A46     		mov	r2, r3
 616              		.loc 1 134 25
ARM GAS  /tmp/cclxoO08.s 			page 14


 617 0050 3B68     		ldr	r3, [r7]
 618 0052 5A61     		str	r2, [r3, #20]
 135:Lib/screenl/Src/scrl_lcd.c **** }
 619              		.loc 1 135 1
 620 0054 00BF     		nop
 621 0056 0837     		adds	r7, r7, #8
 622              		.cfi_def_cfa_offset 8
 623 0058 BD46     		mov	sp, r7
 624              		.cfi_def_cfa_register 13
 625              		@ sp needed
 626 005a 80BD     		pop	{r7, pc}
 627              		.cfi_endproc
 628              	.LFE839:
 630              		.section	.text.SCRL_validate_parameters,"ax",%progbits
 631              		.align	1
 632              		.syntax unified
 633              		.thumb
 634              		.thumb_func
 636              	SCRL_validate_parameters:
 637              	.LFB840:
 136:Lib/screenl/Src/scrl_lcd.c **** 
 137:Lib/screenl/Src/scrl_lcd.c **** static int SCRL_validate_parameters(SCRL_LayerConfig *layers_config[SCRL_LAYER_NB], SCRL_ScreenConf
 138:Lib/screenl/Src/scrl_lcd.c **** {
 638              		.loc 1 138 1
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 16
 641              		@ frame_needed = 1, uses_anonymous_args = 0
 642              		@ link register save eliminated.
 643 0000 80B4     		push	{r7}
 644              		.cfi_def_cfa_offset 4
 645              		.cfi_offset 7, -4
 646 0002 85B0     		sub	sp, sp, #20
 647              		.cfi_def_cfa_offset 24
 648 0004 00AF     		add	r7, sp, #0
 649              		.cfi_def_cfa_register 7
 650 0006 7860     		str	r0, [r7, #4]
 651 0008 3960     		str	r1, [r7]
 139:Lib/screenl/Src/scrl_lcd.c ****   int i;
 140:Lib/screenl/Src/scrl_lcd.c **** 
 141:Lib/screenl/Src/scrl_lcd.c ****   /* First check for null pointer */
 142:Lib/screenl/Src/scrl_lcd.c ****   for (i = 0; i < SCRL_LAYER_NB; i++)
 652              		.loc 1 142 10
 653 000a 0023     		movs	r3, #0
 654 000c FB60     		str	r3, [r7, #12]
 655              		.loc 1 142 3
 656 000e 0CE0     		b	.L21
 657              	.L24:
 143:Lib/screenl/Src/scrl_lcd.c ****     if (!layers_config[i])
 658              		.loc 1 143 23
 659 0010 FB68     		ldr	r3, [r7, #12]
 660 0012 9B00     		lsls	r3, r3, #2
 661 0014 7A68     		ldr	r2, [r7, #4]
 662 0016 1344     		add	r3, r3, r2
 663 0018 1B68     		ldr	r3, [r3]
 664              		.loc 1 143 8
 665 001a 002B     		cmp	r3, #0
 666 001c 02D1     		bne	.L22
ARM GAS  /tmp/cclxoO08.s 			page 15


 144:Lib/screenl/Src/scrl_lcd.c ****       return -1;
 667              		.loc 1 144 14
 668 001e 4FF0FF33 		mov	r3, #-1
 669 0022 2EE0     		b	.L23
 670              	.L22:
 142:Lib/screenl/Src/scrl_lcd.c ****     if (!layers_config[i])
 671              		.loc 1 142 35 discriminator 2
 672 0024 FB68     		ldr	r3, [r7, #12]
 673 0026 0133     		adds	r3, r3, #1
 674 0028 FB60     		str	r3, [r7, #12]
 675              	.L21:
 142:Lib/screenl/Src/scrl_lcd.c ****     if (!layers_config[i])
 676              		.loc 1 142 17 discriminator 1
 677 002a FB68     		ldr	r3, [r7, #12]
 678 002c 012B     		cmp	r3, #1
 679 002e EFDD     		ble	.L24
 145:Lib/screenl/Src/scrl_lcd.c **** 
 146:Lib/screenl/Src/scrl_lcd.c ****   /* Also for adresses */
 147:Lib/screenl/Src/scrl_lcd.c ****   for (i = 0; i < SCRL_LAYER_NB; i++)
 680              		.loc 1 147 10
 681 0030 0023     		movs	r3, #0
 682 0032 FB60     		str	r3, [r7, #12]
 683              		.loc 1 147 3
 684 0034 0DE0     		b	.L25
 685              	.L27:
 148:Lib/screenl/Src/scrl_lcd.c ****     if (!layers_config[i]->address)
 686              		.loc 1 148 23
 687 0036 FB68     		ldr	r3, [r7, #12]
 688 0038 9B00     		lsls	r3, r3, #2
 689 003a 7A68     		ldr	r2, [r7, #4]
 690 003c 1344     		add	r3, r3, r2
 691 003e 1B68     		ldr	r3, [r3]
 692              		.loc 1 148 26
 693 0040 DB68     		ldr	r3, [r3, #12]
 694              		.loc 1 148 8
 695 0042 002B     		cmp	r3, #0
 696 0044 02D1     		bne	.L26
 149:Lib/screenl/Src/scrl_lcd.c ****       return -1;
 697              		.loc 1 149 14
 698 0046 4FF0FF33 		mov	r3, #-1
 699 004a 1AE0     		b	.L23
 700              	.L26:
 147:Lib/screenl/Src/scrl_lcd.c ****     if (!layers_config[i]->address)
 701              		.loc 1 147 35 discriminator 2
 702 004c FB68     		ldr	r3, [r7, #12]
 703 004e 0133     		adds	r3, r3, #1
 704 0050 FB60     		str	r3, [r7, #12]
 705              	.L25:
 147:Lib/screenl/Src/scrl_lcd.c ****     if (!layers_config[i]->address)
 706              		.loc 1 147 17 discriminator 1
 707 0052 FB68     		ldr	r3, [r7, #12]
 708 0054 012B     		cmp	r3, #1
 709 0056 EEDD     		ble	.L27
 150:Lib/screenl/Src/scrl_lcd.c **** 
 151:Lib/screenl/Src/scrl_lcd.c ****   /* SCRL_YUV422 format is not supported */
 152:Lib/screenl/Src/scrl_lcd.c ****   for (i = 0; i < SCRL_LAYER_NB; i++)
 710              		.loc 1 152 10
ARM GAS  /tmp/cclxoO08.s 			page 16


 711 0058 0023     		movs	r3, #0
 712 005a FB60     		str	r3, [r7, #12]
 713              		.loc 1 152 3
 714 005c 0DE0     		b	.L28
 715              	.L30:
 153:Lib/screenl/Src/scrl_lcd.c ****     if (layers_config[i]->format == SCRL_YUV422)
 716              		.loc 1 153 22
 717 005e FB68     		ldr	r3, [r7, #12]
 718 0060 9B00     		lsls	r3, r3, #2
 719 0062 7A68     		ldr	r2, [r7, #4]
 720 0064 1344     		add	r3, r3, r2
 721 0066 1B68     		ldr	r3, [r3]
 722              		.loc 1 153 25
 723 0068 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 724              		.loc 1 153 8
 725 006a 022B     		cmp	r3, #2
 726 006c 02D1     		bne	.L29
 154:Lib/screenl/Src/scrl_lcd.c ****       return -1;
 727              		.loc 1 154 14
 728 006e 4FF0FF33 		mov	r3, #-1
 729 0072 06E0     		b	.L23
 730              	.L29:
 152:Lib/screenl/Src/scrl_lcd.c ****     if (layers_config[i]->format == SCRL_YUV422)
 731              		.loc 1 152 35 discriminator 2
 732 0074 FB68     		ldr	r3, [r7, #12]
 733 0076 0133     		adds	r3, r3, #1
 734 0078 FB60     		str	r3, [r7, #12]
 735              	.L28:
 152:Lib/screenl/Src/scrl_lcd.c ****     if (layers_config[i]->format == SCRL_YUV422)
 736              		.loc 1 152 17 discriminator 1
 737 007a FB68     		ldr	r3, [r7, #12]
 738 007c 012B     		cmp	r3, #1
 739 007e EEDD     		ble	.L30
 155:Lib/screenl/Src/scrl_lcd.c **** 
 156:Lib/screenl/Src/scrl_lcd.c ****   return 0;
 740              		.loc 1 156 10
 741 0080 0023     		movs	r3, #0
 742              	.L23:
 157:Lib/screenl/Src/scrl_lcd.c **** }
 743              		.loc 1 157 1
 744 0082 1846     		mov	r0, r3
 745 0084 1437     		adds	r7, r7, #20
 746              		.cfi_def_cfa_offset 4
 747 0086 BD46     		mov	sp, r7
 748              		.cfi_def_cfa_register 13
 749              		@ sp needed
 750 0088 5DF8047B 		ldr	r7, [sp], #4
 751              		.cfi_restore 7
 752              		.cfi_def_cfa_offset 0
 753 008c 7047     		bx	lr
 754              		.cfi_endproc
 755              	.LFE840:
 757              		.section	.text.LTDC_FillRGBRectRgb888,"ax",%progbits
 758              		.align	1
 759              		.syntax unified
 760              		.thumb
 761              		.thumb_func
ARM GAS  /tmp/cclxoO08.s 			page 17


 763              	LTDC_FillRGBRectRgb888:
 764              	.LFB841:
 158:Lib/screenl/Src/scrl_lcd.c **** 
 159:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_FillRGBRectRgb888(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pDa
 160:Lib/screenl/Src/scrl_lcd.c ****                                       uint32_t Height)
 161:Lib/screenl/Src/scrl_lcd.c **** {
 765              		.loc 1 161 1
 766              		.cfi_startproc
 767              		@ args = 8, pretend = 0, frame = 32
 768              		@ frame_needed = 1, uses_anonymous_args = 0
 769              		@ link register save eliminated.
 770 0000 80B4     		push	{r7}
 771              		.cfi_def_cfa_offset 4
 772              		.cfi_offset 7, -4
 773 0002 89B0     		sub	sp, sp, #36
 774              		.cfi_def_cfa_offset 40
 775 0004 00AF     		add	r7, sp, #0
 776              		.cfi_def_cfa_register 7
 777 0006 F860     		str	r0, [r7, #12]
 778 0008 B960     		str	r1, [r7, #8]
 779 000a 7A60     		str	r2, [r7, #4]
 780 000c 3B60     		str	r3, [r7]
 162:Lib/screenl/Src/scrl_lcd.c ****   int layer_width;
 163:Lib/screenl/Src/scrl_lcd.c ****   uint8_t *pel;
 164:Lib/screenl/Src/scrl_lcd.c ****   int w, h;
 165:Lib/screenl/Src/scrl_lcd.c **** 
 166:Lib/screenl/Src/scrl_lcd.c ****   layer_width = Lcd_Ctx[Instance].XSize;
 781              		.loc 1 166 34
 782 000e 324A     		ldr	r2, .L37
 783 0010 FB68     		ldr	r3, [r7, #12]
 784 0012 5B01     		lsls	r3, r3, #5
 785 0014 1344     		add	r3, r3, r2
 786 0016 1B68     		ldr	r3, [r3]
 787              		.loc 1 166 15
 788 0018 3B61     		str	r3, [r7, #16]
 167:Lib/screenl/Src/scrl_lcd.c ****   pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
 789              		.loc 1 167 58
 790 001a 2F4A     		ldr	r2, .L37
 791 001c FB68     		ldr	r3, [r7, #12]
 792 001e 5B01     		lsls	r3, r3, #5
 793 0020 1344     		add	r3, r3, r2
 794 0022 0833     		adds	r3, r3, #8
 795 0024 1B68     		ldr	r3, [r3]
 796              		.loc 1 167 71
 797 0026 2D4A     		ldr	r2, .L37+4
 798 0028 3421     		movs	r1, #52
 799 002a 01FB03F3 		mul	r3, r1, r3
 800 002e 1344     		add	r3, r3, r2
 801 0030 5C33     		adds	r3, r3, #92
 802 0032 1B68     		ldr	r3, [r3]
 803              		.loc 1 167 7
 804 0034 FB61     		str	r3, [r7, #28]
 168:Lib/screenl/Src/scrl_lcd.c ****   pel += (Ypos * layer_width * 3) + Xpos * 3;
 805              		.loc 1 168 16
 806 0036 3B69     		ldr	r3, [r7, #16]
 807 0038 7A68     		ldr	r2, [r7, #4]
 808 003a 03FB02F2 		mul	r2, r3, r2
ARM GAS  /tmp/cclxoO08.s 			page 18


 809              		.loc 1 168 35
 810 003e BB68     		ldr	r3, [r7, #8]
 811 0040 1A44     		add	r2, r2, r3
 812 0042 1346     		mov	r3, r2
 813 0044 5B00     		lsls	r3, r3, #1
 814 0046 1344     		add	r3, r3, r2
 815              		.loc 1 168 7
 816 0048 FA69     		ldr	r2, [r7, #28]
 817 004a 1344     		add	r3, r3, r2
 818 004c FB61     		str	r3, [r7, #28]
 169:Lib/screenl/Src/scrl_lcd.c ****   for (h = 0; h < Height; h++) {
 819              		.loc 1 169 10
 820 004e 0023     		movs	r3, #0
 821 0050 7B61     		str	r3, [r7, #20]
 822              		.loc 1 169 3
 823 0052 35E0     		b	.L32
 824              	.L35:
 170:Lib/screenl/Src/scrl_lcd.c ****     for (w = 0; w < Width; w++) {
 825              		.loc 1 170 12
 826 0054 0023     		movs	r3, #0
 827 0056 BB61     		str	r3, [r7, #24]
 828              		.loc 1 170 5
 829 0058 26E0     		b	.L33
 830              	.L34:
 171:Lib/screenl/Src/scrl_lcd.c ****       pel[3 * w + 0] = *pData++;
 831              		.loc 1 171 30
 832 005a 3A68     		ldr	r2, [r7]
 833 005c 531C     		adds	r3, r2, #1
 834 005e 3B60     		str	r3, [r7]
 835              		.loc 1 171 13
 836 0060 B969     		ldr	r1, [r7, #24]
 837 0062 0B46     		mov	r3, r1
 838 0064 5B00     		lsls	r3, r3, #1
 839 0066 0B44     		add	r3, r3, r1
 840 0068 1946     		mov	r1, r3
 841              		.loc 1 171 10
 842 006a FB69     		ldr	r3, [r7, #28]
 843 006c 0B44     		add	r3, r3, r1
 844              		.loc 1 171 24
 845 006e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 846              		.loc 1 171 22
 847 0070 1A70     		strb	r2, [r3]
 172:Lib/screenl/Src/scrl_lcd.c ****       pel[3 * w + 1] = *pData++;
 848              		.loc 1 172 30
 849 0072 3A68     		ldr	r2, [r7]
 850 0074 531C     		adds	r3, r2, #1
 851 0076 3B60     		str	r3, [r7]
 852              		.loc 1 172 13
 853 0078 B969     		ldr	r1, [r7, #24]
 854 007a 0B46     		mov	r3, r1
 855 007c 5B00     		lsls	r3, r3, #1
 856 007e 0B44     		add	r3, r3, r1
 857              		.loc 1 172 10
 858 0080 0133     		adds	r3, r3, #1
 859 0082 F969     		ldr	r1, [r7, #28]
 860 0084 0B44     		add	r3, r3, r1
 861              		.loc 1 172 24
ARM GAS  /tmp/cclxoO08.s 			page 19


 862 0086 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 863              		.loc 1 172 22
 864 0088 1A70     		strb	r2, [r3]
 173:Lib/screenl/Src/scrl_lcd.c ****       pel[3 * w + 2] = *pData++;
 865              		.loc 1 173 30
 866 008a 3A68     		ldr	r2, [r7]
 867 008c 531C     		adds	r3, r2, #1
 868 008e 3B60     		str	r3, [r7]
 869              		.loc 1 173 13
 870 0090 B969     		ldr	r1, [r7, #24]
 871 0092 0B46     		mov	r3, r1
 872 0094 5B00     		lsls	r3, r3, #1
 873 0096 0B44     		add	r3, r3, r1
 874              		.loc 1 173 10
 875 0098 0233     		adds	r3, r3, #2
 876 009a F969     		ldr	r1, [r7, #28]
 877 009c 0B44     		add	r3, r3, r1
 878              		.loc 1 173 24
 879 009e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 880              		.loc 1 173 22
 881 00a0 1A70     		strb	r2, [r3]
 170:Lib/screenl/Src/scrl_lcd.c ****       pel[3 * w + 0] = *pData++;
 882              		.loc 1 170 29 discriminator 3
 883 00a2 BB69     		ldr	r3, [r7, #24]
 884 00a4 0133     		adds	r3, r3, #1
 885 00a6 BB61     		str	r3, [r7, #24]
 886              	.L33:
 170:Lib/screenl/Src/scrl_lcd.c ****       pel[3 * w + 0] = *pData++;
 887              		.loc 1 170 19 discriminator 1
 888 00a8 BB69     		ldr	r3, [r7, #24]
 889 00aa BA6A     		ldr	r2, [r7, #40]
 890 00ac 9A42     		cmp	r2, r3
 891 00ae D4D8     		bhi	.L34
 174:Lib/screenl/Src/scrl_lcd.c ****     }
 175:Lib/screenl/Src/scrl_lcd.c ****     pel += layer_width + 3;
 892              		.loc 1 175 9
 893 00b0 3B69     		ldr	r3, [r7, #16]
 894 00b2 0333     		adds	r3, r3, #3
 895 00b4 FA69     		ldr	r2, [r7, #28]
 896 00b6 1344     		add	r3, r3, r2
 897 00b8 FB61     		str	r3, [r7, #28]
 169:Lib/screenl/Src/scrl_lcd.c ****     for (w = 0; w < Width; w++) {
 898              		.loc 1 169 28 discriminator 2
 899 00ba 7B69     		ldr	r3, [r7, #20]
 900 00bc 0133     		adds	r3, r3, #1
 901 00be 7B61     		str	r3, [r7, #20]
 902              	.L32:
 169:Lib/screenl/Src/scrl_lcd.c ****     for (w = 0; w < Width; w++) {
 903              		.loc 1 169 17 discriminator 1
 904 00c0 7B69     		ldr	r3, [r7, #20]
 905 00c2 FA6A     		ldr	r2, [r7, #44]
 906 00c4 9A42     		cmp	r2, r3
 907 00c6 C5D8     		bhi	.L35
 176:Lib/screenl/Src/scrl_lcd.c ****   }
 177:Lib/screenl/Src/scrl_lcd.c **** 
 178:Lib/screenl/Src/scrl_lcd.c ****   return 0;
 908              		.loc 1 178 10
ARM GAS  /tmp/cclxoO08.s 			page 20


 909 00c8 0023     		movs	r3, #0
 179:Lib/screenl/Src/scrl_lcd.c **** }
 910              		.loc 1 179 1
 911 00ca 1846     		mov	r0, r3
 912 00cc 2437     		adds	r7, r7, #36
 913              		.cfi_def_cfa_offset 4
 914 00ce BD46     		mov	sp, r7
 915              		.cfi_def_cfa_register 13
 916              		@ sp needed
 917 00d0 5DF8047B 		ldr	r7, [sp], #4
 918              		.cfi_restore 7
 919              		.cfi_def_cfa_offset 0
 920 00d4 7047     		bx	lr
 921              	.L38:
 922 00d6 00BF     		.align	2
 923              	.L37:
 924 00d8 00000000 		.word	Lcd_Ctx
 925 00dc 00000000 		.word	hlcd_ltdc
 926              		.cfi_endproc
 927              	.LFE841:
 929              		.section	.text.LTDC_FillRGBRectArgb8888,"ax",%progbits
 930              		.align	1
 931              		.syntax unified
 932              		.thumb
 933              		.thumb_func
 935              	LTDC_FillRGBRectArgb8888:
 936              	.LFB842:
 180:Lib/screenl/Src/scrl_lcd.c **** 
 181:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_FillRGBRectArgb8888(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *p
 182:Lib/screenl/Src/scrl_lcd.c ****                                       uint32_t Height)
 183:Lib/screenl/Src/scrl_lcd.c **** {
 937              		.loc 1 183 1
 938              		.cfi_startproc
 939              		@ args = 8, pretend = 0, frame = 32
 940              		@ frame_needed = 1, uses_anonymous_args = 0
 941              		@ link register save eliminated.
 942 0000 80B4     		push	{r7}
 943              		.cfi_def_cfa_offset 4
 944              		.cfi_offset 7, -4
 945 0002 89B0     		sub	sp, sp, #36
 946              		.cfi_def_cfa_offset 40
 947 0004 00AF     		add	r7, sp, #0
 948              		.cfi_def_cfa_register 7
 949 0006 F860     		str	r0, [r7, #12]
 950 0008 B960     		str	r1, [r7, #8]
 951 000a 7A60     		str	r2, [r7, #4]
 952 000c 3B60     		str	r3, [r7]
 184:Lib/screenl/Src/scrl_lcd.c ****   int layer_width;
 185:Lib/screenl/Src/scrl_lcd.c ****   uint8_t *pel;
 186:Lib/screenl/Src/scrl_lcd.c ****   int w, h;
 187:Lib/screenl/Src/scrl_lcd.c **** 
 188:Lib/screenl/Src/scrl_lcd.c ****   layer_width = Lcd_Ctx[Instance].XSize;
 953              		.loc 1 188 34
 954 000e 334A     		ldr	r2, .L45
 955 0010 FB68     		ldr	r3, [r7, #12]
 956 0012 5B01     		lsls	r3, r3, #5
 957 0014 1344     		add	r3, r3, r2
ARM GAS  /tmp/cclxoO08.s 			page 21


 958 0016 1B68     		ldr	r3, [r3]
 959              		.loc 1 188 15
 960 0018 3B61     		str	r3, [r7, #16]
 189:Lib/screenl/Src/scrl_lcd.c ****   pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
 961              		.loc 1 189 58
 962 001a 304A     		ldr	r2, .L45
 963 001c FB68     		ldr	r3, [r7, #12]
 964 001e 5B01     		lsls	r3, r3, #5
 965 0020 1344     		add	r3, r3, r2
 966 0022 0833     		adds	r3, r3, #8
 967 0024 1B68     		ldr	r3, [r3]
 968              		.loc 1 189 71
 969 0026 2E4A     		ldr	r2, .L45+4
 970 0028 3421     		movs	r1, #52
 971 002a 01FB03F3 		mul	r3, r1, r3
 972 002e 1344     		add	r3, r3, r2
 973 0030 5C33     		adds	r3, r3, #92
 974 0032 1B68     		ldr	r3, [r3]
 975              		.loc 1 189 7
 976 0034 FB61     		str	r3, [r7, #28]
 190:Lib/screenl/Src/scrl_lcd.c ****   pel += (Ypos * layer_width * 4) + Xpos * 4;
 977              		.loc 1 190 16
 978 0036 3B69     		ldr	r3, [r7, #16]
 979 0038 7A68     		ldr	r2, [r7, #4]
 980 003a 03FB02F2 		mul	r2, r3, r2
 981              		.loc 1 190 35
 982 003e BB68     		ldr	r3, [r7, #8]
 983 0040 1344     		add	r3, r3, r2
 984 0042 9B00     		lsls	r3, r3, #2
 985              		.loc 1 190 7
 986 0044 FA69     		ldr	r2, [r7, #28]
 987 0046 1344     		add	r3, r3, r2
 988 0048 FB61     		str	r3, [r7, #28]
 191:Lib/screenl/Src/scrl_lcd.c ****   for (h = 0; h < Height; h++) {
 989              		.loc 1 191 10
 990 004a 0023     		movs	r3, #0
 991 004c 7B61     		str	r3, [r7, #20]
 992              		.loc 1 191 3
 993 004e 39E0     		b	.L40
 994              	.L43:
 192:Lib/screenl/Src/scrl_lcd.c ****     for (w = 0; w < Width; w++) {
 995              		.loc 1 192 12
 996 0050 0023     		movs	r3, #0
 997 0052 BB61     		str	r3, [r7, #24]
 998              		.loc 1 192 5
 999 0054 2AE0     		b	.L41
 1000              	.L42:
 193:Lib/screenl/Src/scrl_lcd.c ****       pel[4 * w + 2] = *pData++;
 1001              		.loc 1 193 30
 1002 0056 3B68     		ldr	r3, [r7]
 1003 0058 5A1C     		adds	r2, r3, #1
 1004 005a 3A60     		str	r2, [r7]
 1005              		.loc 1 193 13
 1006 005c BA69     		ldr	r2, [r7, #24]
 1007 005e 9200     		lsls	r2, r2, #2
 1008              		.loc 1 193 10
 1009 0060 0232     		adds	r2, r2, #2
ARM GAS  /tmp/cclxoO08.s 			page 22


 1010 0062 F969     		ldr	r1, [r7, #28]
 1011 0064 0A44     		add	r2, r2, r1
 1012              		.loc 1 193 24
 1013 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1014              		.loc 1 193 22
 1015 0068 1370     		strb	r3, [r2]
 194:Lib/screenl/Src/scrl_lcd.c ****       pel[4 * w + 1] = *pData++;
 1016              		.loc 1 194 30
 1017 006a 3B68     		ldr	r3, [r7]
 1018 006c 5A1C     		adds	r2, r3, #1
 1019 006e 3A60     		str	r2, [r7]
 1020              		.loc 1 194 13
 1021 0070 BA69     		ldr	r2, [r7, #24]
 1022 0072 9200     		lsls	r2, r2, #2
 1023              		.loc 1 194 10
 1024 0074 0132     		adds	r2, r2, #1
 1025 0076 F969     		ldr	r1, [r7, #28]
 1026 0078 0A44     		add	r2, r2, r1
 1027              		.loc 1 194 24
 1028 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1029              		.loc 1 194 22
 1030 007c 1370     		strb	r3, [r2]
 195:Lib/screenl/Src/scrl_lcd.c ****       pel[4 * w + 0] = *pData++;
 1031              		.loc 1 195 30
 1032 007e 3B68     		ldr	r3, [r7]
 1033 0080 5A1C     		adds	r2, r3, #1
 1034 0082 3A60     		str	r2, [r7]
 1035              		.loc 1 195 13
 1036 0084 BA69     		ldr	r2, [r7, #24]
 1037 0086 9200     		lsls	r2, r2, #2
 1038 0088 1146     		mov	r1, r2
 1039              		.loc 1 195 10
 1040 008a FA69     		ldr	r2, [r7, #28]
 1041 008c 0A44     		add	r2, r2, r1
 1042              		.loc 1 195 24
 1043 008e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1044              		.loc 1 195 22
 1045 0090 1370     		strb	r3, [r2]
 196:Lib/screenl/Src/scrl_lcd.c ****       pel[4 * w + 3] = *pData++;
 1046              		.loc 1 196 30
 1047 0092 3B68     		ldr	r3, [r7]
 1048 0094 5A1C     		adds	r2, r3, #1
 1049 0096 3A60     		str	r2, [r7]
 1050              		.loc 1 196 13
 1051 0098 BA69     		ldr	r2, [r7, #24]
 1052 009a 9200     		lsls	r2, r2, #2
 1053              		.loc 1 196 10
 1054 009c 0332     		adds	r2, r2, #3
 1055 009e F969     		ldr	r1, [r7, #28]
 1056 00a0 0A44     		add	r2, r2, r1
 1057              		.loc 1 196 24
 1058 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1059              		.loc 1 196 22
 1060 00a4 1370     		strb	r3, [r2]
 192:Lib/screenl/Src/scrl_lcd.c ****       pel[4 * w + 2] = *pData++;
 1061              		.loc 1 192 29 discriminator 3
 1062 00a6 BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/cclxoO08.s 			page 23


 1063 00a8 0133     		adds	r3, r3, #1
 1064 00aa BB61     		str	r3, [r7, #24]
 1065              	.L41:
 192:Lib/screenl/Src/scrl_lcd.c ****       pel[4 * w + 2] = *pData++;
 1066              		.loc 1 192 19 discriminator 1
 1067 00ac BB69     		ldr	r3, [r7, #24]
 1068 00ae BA6A     		ldr	r2, [r7, #40]
 1069 00b0 9A42     		cmp	r2, r3
 1070 00b2 D0D8     		bhi	.L42
 197:Lib/screenl/Src/scrl_lcd.c ****     }
 198:Lib/screenl/Src/scrl_lcd.c ****     pel += layer_width + 4;
 1071              		.loc 1 198 9
 1072 00b4 3B69     		ldr	r3, [r7, #16]
 1073 00b6 0433     		adds	r3, r3, #4
 1074 00b8 FA69     		ldr	r2, [r7, #28]
 1075 00ba 1344     		add	r3, r3, r2
 1076 00bc FB61     		str	r3, [r7, #28]
 191:Lib/screenl/Src/scrl_lcd.c ****     for (w = 0; w < Width; w++) {
 1077              		.loc 1 191 28 discriminator 2
 1078 00be 7B69     		ldr	r3, [r7, #20]
 1079 00c0 0133     		adds	r3, r3, #1
 1080 00c2 7B61     		str	r3, [r7, #20]
 1081              	.L40:
 191:Lib/screenl/Src/scrl_lcd.c ****     for (w = 0; w < Width; w++) {
 1082              		.loc 1 191 17 discriminator 1
 1083 00c4 7B69     		ldr	r3, [r7, #20]
 1084 00c6 FA6A     		ldr	r2, [r7, #44]
 1085 00c8 9A42     		cmp	r2, r3
 1086 00ca C1D8     		bhi	.L43
 199:Lib/screenl/Src/scrl_lcd.c ****   }
 200:Lib/screenl/Src/scrl_lcd.c **** 
 201:Lib/screenl/Src/scrl_lcd.c ****   return 0;
 1087              		.loc 1 201 10
 1088 00cc 0023     		movs	r3, #0
 202:Lib/screenl/Src/scrl_lcd.c **** }
 1089              		.loc 1 202 1
 1090 00ce 1846     		mov	r0, r3
 1091 00d0 2437     		adds	r7, r7, #36
 1092              		.cfi_def_cfa_offset 4
 1093 00d2 BD46     		mov	sp, r7
 1094              		.cfi_def_cfa_register 13
 1095              		@ sp needed
 1096 00d4 5DF8047B 		ldr	r7, [sp], #4
 1097              		.cfi_restore 7
 1098              		.cfi_def_cfa_offset 0
 1099 00d8 7047     		bx	lr
 1100              	.L46:
 1101 00da 00BF     		.align	2
 1102              	.L45:
 1103 00dc 00000000 		.word	Lcd_Ctx
 1104 00e0 00000000 		.word	hlcd_ltdc
 1105              		.cfi_endproc
 1106              	.LFE842:
 1108              		.section	.text.LTDC_FillRectRgb888,"ax",%progbits
 1109              		.align	1
 1110              		.syntax unified
 1111              		.thumb
ARM GAS  /tmp/cclxoO08.s 			page 24


 1112              		.thumb_func
 1114              	LTDC_FillRectRgb888:
 1115              	.LFB843:
 203:Lib/screenl/Src/scrl_lcd.c **** 
 204:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_FillRectRgb888(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width,
 205:Lib/screenl/Src/scrl_lcd.c ****                                    uint32_t Color)
 206:Lib/screenl/Src/scrl_lcd.c **** {
 1116              		.loc 1 206 1
 1117              		.cfi_startproc
 1118              		@ args = 8, pretend = 0, frame = 40
 1119              		@ frame_needed = 1, uses_anonymous_args = 0
 1120              		@ link register save eliminated.
 1121 0000 80B4     		push	{r7}
 1122              		.cfi_def_cfa_offset 4
 1123              		.cfi_offset 7, -4
 1124 0002 8BB0     		sub	sp, sp, #44
 1125              		.cfi_def_cfa_offset 48
 1126 0004 00AF     		add	r7, sp, #0
 1127              		.cfi_def_cfa_register 7
 1128 0006 F860     		str	r0, [r7, #12]
 1129 0008 B960     		str	r1, [r7, #8]
 1130 000a 7A60     		str	r2, [r7, #4]
 1131 000c 3B60     		str	r3, [r7]
 207:Lib/screenl/Src/scrl_lcd.c ****   int layer_width;
 208:Lib/screenl/Src/scrl_lcd.c ****   uint8_t r, g, b;
 209:Lib/screenl/Src/scrl_lcd.c ****   uint8_t *pel;
 210:Lib/screenl/Src/scrl_lcd.c ****   int w, h;
 211:Lib/screenl/Src/scrl_lcd.c **** 
 212:Lib/screenl/Src/scrl_lcd.c ****   r = (Color >> 16) & 0xff;
 1132              		.loc 1 212 14
 1133 000e 7B6B     		ldr	r3, [r7, #52]
 1134 0010 1B0C     		lsrs	r3, r3, #16
 1135              		.loc 1 212 5
 1136 0012 FB76     		strb	r3, [r7, #27]
 213:Lib/screenl/Src/scrl_lcd.c ****   g = (Color >> 8) & 0xff;
 1137              		.loc 1 213 14
 1138 0014 7B6B     		ldr	r3, [r7, #52]
 1139 0016 1B0A     		lsrs	r3, r3, #8
 1140              		.loc 1 213 5
 1141 0018 BB76     		strb	r3, [r7, #26]
 214:Lib/screenl/Src/scrl_lcd.c ****   b = (Color >> 0) & 0xff;
 1142              		.loc 1 214 5
 1143 001a 7B6B     		ldr	r3, [r7, #52]
 1144 001c 7B76     		strb	r3, [r7, #25]
 215:Lib/screenl/Src/scrl_lcd.c **** 
 216:Lib/screenl/Src/scrl_lcd.c ****   layer_width = Lcd_Ctx[Instance].XSize;
 1145              		.loc 1 216 34
 1146 001e 2F4A     		ldr	r2, .L53
 1147 0020 FB68     		ldr	r3, [r7, #12]
 1148 0022 5B01     		lsls	r3, r3, #5
 1149 0024 1344     		add	r3, r3, r2
 1150 0026 1B68     		ldr	r3, [r3]
 1151              		.loc 1 216 15
 1152 0028 7B61     		str	r3, [r7, #20]
 217:Lib/screenl/Src/scrl_lcd.c ****   pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
 1153              		.loc 1 217 58
 1154 002a 2C4A     		ldr	r2, .L53
ARM GAS  /tmp/cclxoO08.s 			page 25


 1155 002c FB68     		ldr	r3, [r7, #12]
 1156 002e 5B01     		lsls	r3, r3, #5
 1157 0030 1344     		add	r3, r3, r2
 1158 0032 0833     		adds	r3, r3, #8
 1159 0034 1B68     		ldr	r3, [r3]
 1160              		.loc 1 217 71
 1161 0036 2A4A     		ldr	r2, .L53+4
 1162 0038 3421     		movs	r1, #52
 1163 003a 01FB03F3 		mul	r3, r1, r3
 1164 003e 1344     		add	r3, r3, r2
 1165 0040 5C33     		adds	r3, r3, #92
 1166 0042 1B68     		ldr	r3, [r3]
 1167              		.loc 1 217 7
 1168 0044 7B62     		str	r3, [r7, #36]
 218:Lib/screenl/Src/scrl_lcd.c ****   pel += (Ypos * layer_width * 3) + Xpos * 3;
 1169              		.loc 1 218 16
 1170 0046 7B69     		ldr	r3, [r7, #20]
 1171 0048 7A68     		ldr	r2, [r7, #4]
 1172 004a 03FB02F2 		mul	r2, r3, r2
 1173              		.loc 1 218 35
 1174 004e BB68     		ldr	r3, [r7, #8]
 1175 0050 1A44     		add	r2, r2, r3
 1176 0052 1346     		mov	r3, r2
 1177 0054 5B00     		lsls	r3, r3, #1
 1178 0056 1344     		add	r3, r3, r2
 1179              		.loc 1 218 7
 1180 0058 7A6A     		ldr	r2, [r7, #36]
 1181 005a 1344     		add	r3, r3, r2
 1182 005c 7B62     		str	r3, [r7, #36]
 219:Lib/screenl/Src/scrl_lcd.c ****   for (h = 0; h < Height; h++) {
 1183              		.loc 1 219 10
 1184 005e 0023     		movs	r3, #0
 1185 0060 FB61     		str	r3, [r7, #28]
 1186              		.loc 1 219 3
 1187 0062 2FE0     		b	.L48
 1188              	.L51:
 220:Lib/screenl/Src/scrl_lcd.c ****     for (w = 0; w < Width; w++) {
 1189              		.loc 1 220 12
 1190 0064 0023     		movs	r3, #0
 1191 0066 3B62     		str	r3, [r7, #32]
 1192              		.loc 1 220 5
 1193 0068 1DE0     		b	.L49
 1194              	.L50:
 221:Lib/screenl/Src/scrl_lcd.c ****       /* FIXME */
 222:Lib/screenl/Src/scrl_lcd.c ****       pel[3 * w + 0] = b;
 1195              		.loc 1 222 13
 1196 006a 3A6A     		ldr	r2, [r7, #32]
 1197 006c 1346     		mov	r3, r2
 1198 006e 5B00     		lsls	r3, r3, #1
 1199 0070 1344     		add	r3, r3, r2
 1200 0072 1A46     		mov	r2, r3
 1201              		.loc 1 222 10
 1202 0074 7B6A     		ldr	r3, [r7, #36]
 1203 0076 1344     		add	r3, r3, r2
 1204              		.loc 1 222 22
 1205 0078 7A7E     		ldrb	r2, [r7, #25]
 1206 007a 1A70     		strb	r2, [r3]
ARM GAS  /tmp/cclxoO08.s 			page 26


 223:Lib/screenl/Src/scrl_lcd.c ****       pel[3 * w + 1] = g;
 1207              		.loc 1 223 13
 1208 007c 3A6A     		ldr	r2, [r7, #32]
 1209 007e 1346     		mov	r3, r2
 1210 0080 5B00     		lsls	r3, r3, #1
 1211 0082 1344     		add	r3, r3, r2
 1212              		.loc 1 223 10
 1213 0084 0133     		adds	r3, r3, #1
 1214 0086 7A6A     		ldr	r2, [r7, #36]
 1215 0088 1344     		add	r3, r3, r2
 1216              		.loc 1 223 22
 1217 008a BA7E     		ldrb	r2, [r7, #26]
 1218 008c 1A70     		strb	r2, [r3]
 224:Lib/screenl/Src/scrl_lcd.c ****       pel[3 * w + 2] = r;
 1219              		.loc 1 224 13
 1220 008e 3A6A     		ldr	r2, [r7, #32]
 1221 0090 1346     		mov	r3, r2
 1222 0092 5B00     		lsls	r3, r3, #1
 1223 0094 1344     		add	r3, r3, r2
 1224              		.loc 1 224 10
 1225 0096 0233     		adds	r3, r3, #2
 1226 0098 7A6A     		ldr	r2, [r7, #36]
 1227 009a 1344     		add	r3, r3, r2
 1228              		.loc 1 224 22
 1229 009c FA7E     		ldrb	r2, [r7, #27]
 1230 009e 1A70     		strb	r2, [r3]
 220:Lib/screenl/Src/scrl_lcd.c ****       /* FIXME */
 1231              		.loc 1 220 29 discriminator 3
 1232 00a0 3B6A     		ldr	r3, [r7, #32]
 1233 00a2 0133     		adds	r3, r3, #1
 1234 00a4 3B62     		str	r3, [r7, #32]
 1235              	.L49:
 220:Lib/screenl/Src/scrl_lcd.c ****       /* FIXME */
 1236              		.loc 1 220 19 discriminator 1
 1237 00a6 3B6A     		ldr	r3, [r7, #32]
 1238 00a8 3A68     		ldr	r2, [r7]
 1239 00aa 9A42     		cmp	r2, r3
 1240 00ac DDD8     		bhi	.L50
 225:Lib/screenl/Src/scrl_lcd.c ****     }
 226:Lib/screenl/Src/scrl_lcd.c ****     pel += layer_width * 3;
 1241              		.loc 1 226 24
 1242 00ae 7A69     		ldr	r2, [r7, #20]
 1243 00b0 1346     		mov	r3, r2
 1244 00b2 5B00     		lsls	r3, r3, #1
 1245 00b4 1344     		add	r3, r3, r2
 1246 00b6 1A46     		mov	r2, r3
 1247              		.loc 1 226 9
 1248 00b8 7B6A     		ldr	r3, [r7, #36]
 1249 00ba 1344     		add	r3, r3, r2
 1250 00bc 7B62     		str	r3, [r7, #36]
 219:Lib/screenl/Src/scrl_lcd.c ****     for (w = 0; w < Width; w++) {
 1251              		.loc 1 219 28 discriminator 2
 1252 00be FB69     		ldr	r3, [r7, #28]
 1253 00c0 0133     		adds	r3, r3, #1
 1254 00c2 FB61     		str	r3, [r7, #28]
 1255              	.L48:
 219:Lib/screenl/Src/scrl_lcd.c ****     for (w = 0; w < Width; w++) {
ARM GAS  /tmp/cclxoO08.s 			page 27


 1256              		.loc 1 219 17 discriminator 1
 1257 00c4 FB69     		ldr	r3, [r7, #28]
 1258 00c6 3A6B     		ldr	r2, [r7, #48]
 1259 00c8 9A42     		cmp	r2, r3
 1260 00ca CBD8     		bhi	.L51
 227:Lib/screenl/Src/scrl_lcd.c ****   }
 228:Lib/screenl/Src/scrl_lcd.c **** 
 229:Lib/screenl/Src/scrl_lcd.c ****   return 0;
 1261              		.loc 1 229 10
 1262 00cc 0023     		movs	r3, #0
 230:Lib/screenl/Src/scrl_lcd.c **** }
 1263              		.loc 1 230 1
 1264 00ce 1846     		mov	r0, r3
 1265 00d0 2C37     		adds	r7, r7, #44
 1266              		.cfi_def_cfa_offset 4
 1267 00d2 BD46     		mov	sp, r7
 1268              		.cfi_def_cfa_register 13
 1269              		@ sp needed
 1270 00d4 5DF8047B 		ldr	r7, [sp], #4
 1271              		.cfi_restore 7
 1272              		.cfi_def_cfa_offset 0
 1273 00d8 7047     		bx	lr
 1274              	.L54:
 1275 00da 00BF     		.align	2
 1276              	.L53:
 1277 00dc 00000000 		.word	Lcd_Ctx
 1278 00e0 00000000 		.word	hlcd_ltdc
 1279              		.cfi_endproc
 1280              	.LFE843:
 1282              		.section	.text.LTDC_FillRectArgb8888,"ax",%progbits
 1283              		.align	1
 1284              		.syntax unified
 1285              		.thumb
 1286              		.thumb_func
 1288              	LTDC_FillRectArgb8888:
 1289              	.LFB844:
 231:Lib/screenl/Src/scrl_lcd.c **** 
 232:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_FillRectArgb8888(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Widt
 233:Lib/screenl/Src/scrl_lcd.c ****                                      uint32_t Color)
 234:Lib/screenl/Src/scrl_lcd.c **** {
 1290              		.loc 1 234 1
 1291              		.cfi_startproc
 1292              		@ args = 8, pretend = 0, frame = 40
 1293              		@ frame_needed = 1, uses_anonymous_args = 0
 1294              		@ link register save eliminated.
 1295 0000 80B4     		push	{r7}
 1296              		.cfi_def_cfa_offset 4
 1297              		.cfi_offset 7, -4
 1298 0002 8BB0     		sub	sp, sp, #44
 1299              		.cfi_def_cfa_offset 48
 1300 0004 00AF     		add	r7, sp, #0
 1301              		.cfi_def_cfa_register 7
 1302 0006 F860     		str	r0, [r7, #12]
 1303 0008 B960     		str	r1, [r7, #8]
 1304 000a 7A60     		str	r2, [r7, #4]
 1305 000c 3B60     		str	r3, [r7]
 235:Lib/screenl/Src/scrl_lcd.c ****   int layer_width;
ARM GAS  /tmp/cclxoO08.s 			page 28


 236:Lib/screenl/Src/scrl_lcd.c ****   uint8_t r, g, b;
 237:Lib/screenl/Src/scrl_lcd.c ****   uint8_t *pel;
 238:Lib/screenl/Src/scrl_lcd.c ****   int w, h;
 239:Lib/screenl/Src/scrl_lcd.c **** 
 240:Lib/screenl/Src/scrl_lcd.c ****   r = (Color >> 16) & 0xff;
 1306              		.loc 1 240 14
 1307 000e 7B6B     		ldr	r3, [r7, #52]
 1308 0010 1B0C     		lsrs	r3, r3, #16
 1309              		.loc 1 240 5
 1310 0012 FB76     		strb	r3, [r7, #27]
 241:Lib/screenl/Src/scrl_lcd.c ****   g = (Color >> 8) & 0xff;
 1311              		.loc 1 241 14
 1312 0014 7B6B     		ldr	r3, [r7, #52]
 1313 0016 1B0A     		lsrs	r3, r3, #8
 1314              		.loc 1 241 5
 1315 0018 BB76     		strb	r3, [r7, #26]
 242:Lib/screenl/Src/scrl_lcd.c ****   b = (Color >> 0) & 0xff;
 1316              		.loc 1 242 5
 1317 001a 7B6B     		ldr	r3, [r7, #52]
 1318 001c 7B76     		strb	r3, [r7, #25]
 243:Lib/screenl/Src/scrl_lcd.c **** 
 244:Lib/screenl/Src/scrl_lcd.c ****   layer_width = Lcd_Ctx[Instance].XSize;
 1319              		.loc 1 244 34
 1320 001e 2D4A     		ldr	r2, .L61
 1321 0020 FB68     		ldr	r3, [r7, #12]
 1322 0022 5B01     		lsls	r3, r3, #5
 1323 0024 1344     		add	r3, r3, r2
 1324 0026 1B68     		ldr	r3, [r3]
 1325              		.loc 1 244 15
 1326 0028 7B61     		str	r3, [r7, #20]
 245:Lib/screenl/Src/scrl_lcd.c ****   pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
 1327              		.loc 1 245 58
 1328 002a 2A4A     		ldr	r2, .L61
 1329 002c FB68     		ldr	r3, [r7, #12]
 1330 002e 5B01     		lsls	r3, r3, #5
 1331 0030 1344     		add	r3, r3, r2
 1332 0032 0833     		adds	r3, r3, #8
 1333 0034 1B68     		ldr	r3, [r3]
 1334              		.loc 1 245 71
 1335 0036 284A     		ldr	r2, .L61+4
 1336 0038 3421     		movs	r1, #52
 1337 003a 01FB03F3 		mul	r3, r1, r3
 1338 003e 1344     		add	r3, r3, r2
 1339 0040 5C33     		adds	r3, r3, #92
 1340 0042 1B68     		ldr	r3, [r3]
 1341              		.loc 1 245 7
 1342 0044 7B62     		str	r3, [r7, #36]
 246:Lib/screenl/Src/scrl_lcd.c ****   pel += (Ypos * layer_width * 4) + Xpos * 4;
 1343              		.loc 1 246 16
 1344 0046 7B69     		ldr	r3, [r7, #20]
 1345 0048 7A68     		ldr	r2, [r7, #4]
 1346 004a 03FB02F2 		mul	r2, r3, r2
 1347              		.loc 1 246 35
 1348 004e BB68     		ldr	r3, [r7, #8]
 1349 0050 1344     		add	r3, r3, r2
 1350 0052 9B00     		lsls	r3, r3, #2
 1351              		.loc 1 246 7
ARM GAS  /tmp/cclxoO08.s 			page 29


 1352 0054 7A6A     		ldr	r2, [r7, #36]
 1353 0056 1344     		add	r3, r3, r2
 1354 0058 7B62     		str	r3, [r7, #36]
 247:Lib/screenl/Src/scrl_lcd.c ****   for (h = 0; h < Height; h++) {
 1355              		.loc 1 247 10
 1356 005a 0023     		movs	r3, #0
 1357 005c FB61     		str	r3, [r7, #28]
 1358              		.loc 1 247 3
 1359 005e 2EE0     		b	.L56
 1360              	.L59:
 248:Lib/screenl/Src/scrl_lcd.c ****     for (w = 0; w < Width; w++) {
 1361              		.loc 1 248 12
 1362 0060 0023     		movs	r3, #0
 1363 0062 3B62     		str	r3, [r7, #32]
 1364              		.loc 1 248 5
 1365 0064 1EE0     		b	.L57
 1366              	.L58:
 249:Lib/screenl/Src/scrl_lcd.c ****       /* FIXME */
 250:Lib/screenl/Src/scrl_lcd.c ****       pel[4 * w + 0] = r;
 1367              		.loc 1 250 13
 1368 0066 3B6A     		ldr	r3, [r7, #32]
 1369 0068 9B00     		lsls	r3, r3, #2
 1370 006a 1A46     		mov	r2, r3
 1371              		.loc 1 250 10
 1372 006c 7B6A     		ldr	r3, [r7, #36]
 1373 006e 1344     		add	r3, r3, r2
 1374              		.loc 1 250 22
 1375 0070 FA7E     		ldrb	r2, [r7, #27]
 1376 0072 1A70     		strb	r2, [r3]
 251:Lib/screenl/Src/scrl_lcd.c ****       pel[4 * w + 1] = g;
 1377              		.loc 1 251 13
 1378 0074 3B6A     		ldr	r3, [r7, #32]
 1379 0076 9B00     		lsls	r3, r3, #2
 1380              		.loc 1 251 10
 1381 0078 0133     		adds	r3, r3, #1
 1382 007a 7A6A     		ldr	r2, [r7, #36]
 1383 007c 1344     		add	r3, r3, r2
 1384              		.loc 1 251 22
 1385 007e BA7E     		ldrb	r2, [r7, #26]
 1386 0080 1A70     		strb	r2, [r3]
 252:Lib/screenl/Src/scrl_lcd.c ****       pel[4 * w + 2] = b;
 1387              		.loc 1 252 13
 1388 0082 3B6A     		ldr	r3, [r7, #32]
 1389 0084 9B00     		lsls	r3, r3, #2
 1390              		.loc 1 252 10
 1391 0086 0233     		adds	r3, r3, #2
 1392 0088 7A6A     		ldr	r2, [r7, #36]
 1393 008a 1344     		add	r3, r3, r2
 1394              		.loc 1 252 22
 1395 008c 7A7E     		ldrb	r2, [r7, #25]
 1396 008e 1A70     		strb	r2, [r3]
 253:Lib/screenl/Src/scrl_lcd.c ****       pel[4 * w + 3] = 0xff;
 1397              		.loc 1 253 13
 1398 0090 3B6A     		ldr	r3, [r7, #32]
 1399 0092 9B00     		lsls	r3, r3, #2
 1400              		.loc 1 253 10
 1401 0094 0333     		adds	r3, r3, #3
ARM GAS  /tmp/cclxoO08.s 			page 30


 1402 0096 7A6A     		ldr	r2, [r7, #36]
 1403 0098 1344     		add	r3, r3, r2
 1404              		.loc 1 253 22
 1405 009a FF22     		movs	r2, #255
 1406 009c 1A70     		strb	r2, [r3]
 248:Lib/screenl/Src/scrl_lcd.c ****       /* FIXME */
 1407              		.loc 1 248 29 discriminator 3
 1408 009e 3B6A     		ldr	r3, [r7, #32]
 1409 00a0 0133     		adds	r3, r3, #1
 1410 00a2 3B62     		str	r3, [r7, #32]
 1411              	.L57:
 248:Lib/screenl/Src/scrl_lcd.c ****       /* FIXME */
 1412              		.loc 1 248 19 discriminator 1
 1413 00a4 3B6A     		ldr	r3, [r7, #32]
 1414 00a6 3A68     		ldr	r2, [r7]
 1415 00a8 9A42     		cmp	r2, r3
 1416 00aa DCD8     		bhi	.L58
 254:Lib/screenl/Src/scrl_lcd.c ****     }
 255:Lib/screenl/Src/scrl_lcd.c ****     pel += layer_width * 4;
 1417              		.loc 1 255 24
 1418 00ac 7B69     		ldr	r3, [r7, #20]
 1419 00ae 9B00     		lsls	r3, r3, #2
 1420 00b0 1A46     		mov	r2, r3
 1421              		.loc 1 255 9
 1422 00b2 7B6A     		ldr	r3, [r7, #36]
 1423 00b4 1344     		add	r3, r3, r2
 1424 00b6 7B62     		str	r3, [r7, #36]
 247:Lib/screenl/Src/scrl_lcd.c ****     for (w = 0; w < Width; w++) {
 1425              		.loc 1 247 28 discriminator 2
 1426 00b8 FB69     		ldr	r3, [r7, #28]
 1427 00ba 0133     		adds	r3, r3, #1
 1428 00bc FB61     		str	r3, [r7, #28]
 1429              	.L56:
 247:Lib/screenl/Src/scrl_lcd.c ****     for (w = 0; w < Width; w++) {
 1430              		.loc 1 247 17 discriminator 1
 1431 00be FB69     		ldr	r3, [r7, #28]
 1432 00c0 3A6B     		ldr	r2, [r7, #48]
 1433 00c2 9A42     		cmp	r2, r3
 1434 00c4 CCD8     		bhi	.L59
 256:Lib/screenl/Src/scrl_lcd.c ****   }
 257:Lib/screenl/Src/scrl_lcd.c **** 
 258:Lib/screenl/Src/scrl_lcd.c ****   return 0;
 1435              		.loc 1 258 10
 1436 00c6 0023     		movs	r3, #0
 259:Lib/screenl/Src/scrl_lcd.c **** }
 1437              		.loc 1 259 1
 1438 00c8 1846     		mov	r0, r3
 1439 00ca 2C37     		adds	r7, r7, #44
 1440              		.cfi_def_cfa_offset 4
 1441 00cc BD46     		mov	sp, r7
 1442              		.cfi_def_cfa_register 13
 1443              		@ sp needed
 1444 00ce 5DF8047B 		ldr	r7, [sp], #4
 1445              		.cfi_restore 7
 1446              		.cfi_def_cfa_offset 0
 1447 00d2 7047     		bx	lr
 1448              	.L62:
ARM GAS  /tmp/cclxoO08.s 			page 31


 1449              		.align	2
 1450              	.L61:
 1451 00d4 00000000 		.word	Lcd_Ctx
 1452 00d8 00000000 		.word	hlcd_ltdc
 1453              		.cfi_endproc
 1454              	.LFE844:
 1456              		.section	.text.LTDC_DrawHLineRgb888,"ax",%progbits
 1457              		.align	1
 1458              		.syntax unified
 1459              		.thumb
 1460              		.thumb_func
 1462              	LTDC_DrawHLineRgb888:
 1463              	.LFB845:
 260:Lib/screenl/Src/scrl_lcd.c **** 
 261:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_DrawHLineRgb888(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Lengt
 262:Lib/screenl/Src/scrl_lcd.c **** {
 1464              		.loc 1 262 1
 1465              		.cfi_startproc
 1466              		@ args = 4, pretend = 0, frame = 16
 1467              		@ frame_needed = 1, uses_anonymous_args = 0
 1468 0000 80B5     		push	{r7, lr}
 1469              		.cfi_def_cfa_offset 8
 1470              		.cfi_offset 7, -8
 1471              		.cfi_offset 14, -4
 1472 0002 86B0     		sub	sp, sp, #24
 1473              		.cfi_def_cfa_offset 32
 1474 0004 02AF     		add	r7, sp, #8
 1475              		.cfi_def_cfa 7, 24
 1476 0006 F860     		str	r0, [r7, #12]
 1477 0008 B960     		str	r1, [r7, #8]
 1478 000a 7A60     		str	r2, [r7, #4]
 1479 000c 3B60     		str	r3, [r7]
 263:Lib/screenl/Src/scrl_lcd.c ****   return LTDC_FillRectRgb888(0, Xpos, Ypos, Length , 1, Color);
 1480              		.loc 1 263 10
 1481 000e BB69     		ldr	r3, [r7, #24]
 1482 0010 0193     		str	r3, [sp, #4]
 1483 0012 0123     		movs	r3, #1
 1484 0014 0093     		str	r3, [sp]
 1485 0016 3B68     		ldr	r3, [r7]
 1486 0018 7A68     		ldr	r2, [r7, #4]
 1487 001a B968     		ldr	r1, [r7, #8]
 1488 001c 0020     		movs	r0, #0
 1489 001e FFF7FEFF 		bl	LTDC_FillRectRgb888
 1490 0022 0346     		mov	r3, r0
 264:Lib/screenl/Src/scrl_lcd.c **** }
 1491              		.loc 1 264 1
 1492 0024 1846     		mov	r0, r3
 1493 0026 1037     		adds	r7, r7, #16
 1494              		.cfi_def_cfa_offset 8
 1495 0028 BD46     		mov	sp, r7
 1496              		.cfi_def_cfa_register 13
 1497              		@ sp needed
 1498 002a 80BD     		pop	{r7, pc}
 1499              		.cfi_endproc
 1500              	.LFE845:
 1502              		.section	.text.LTDC_DrawHLineArgb8888,"ax",%progbits
 1503              		.align	1
ARM GAS  /tmp/cclxoO08.s 			page 32


 1504              		.syntax unified
 1505              		.thumb
 1506              		.thumb_func
 1508              	LTDC_DrawHLineArgb8888:
 1509              	.LFB846:
 265:Lib/screenl/Src/scrl_lcd.c **** 
 266:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_DrawHLineArgb8888(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Len
 267:Lib/screenl/Src/scrl_lcd.c **** {
 1510              		.loc 1 267 1
 1511              		.cfi_startproc
 1512              		@ args = 4, pretend = 0, frame = 16
 1513              		@ frame_needed = 1, uses_anonymous_args = 0
 1514 0000 80B5     		push	{r7, lr}
 1515              		.cfi_def_cfa_offset 8
 1516              		.cfi_offset 7, -8
 1517              		.cfi_offset 14, -4
 1518 0002 86B0     		sub	sp, sp, #24
 1519              		.cfi_def_cfa_offset 32
 1520 0004 02AF     		add	r7, sp, #8
 1521              		.cfi_def_cfa 7, 24
 1522 0006 F860     		str	r0, [r7, #12]
 1523 0008 B960     		str	r1, [r7, #8]
 1524 000a 7A60     		str	r2, [r7, #4]
 1525 000c 3B60     		str	r3, [r7]
 268:Lib/screenl/Src/scrl_lcd.c ****   return LTDC_FillRectArgb8888(0, Xpos, Ypos, Length , 1, Color);
 1526              		.loc 1 268 10
 1527 000e BB69     		ldr	r3, [r7, #24]
 1528 0010 0193     		str	r3, [sp, #4]
 1529 0012 0123     		movs	r3, #1
 1530 0014 0093     		str	r3, [sp]
 1531 0016 3B68     		ldr	r3, [r7]
 1532 0018 7A68     		ldr	r2, [r7, #4]
 1533 001a B968     		ldr	r1, [r7, #8]
 1534 001c 0020     		movs	r0, #0
 1535 001e FFF7FEFF 		bl	LTDC_FillRectArgb8888
 1536 0022 0346     		mov	r3, r0
 269:Lib/screenl/Src/scrl_lcd.c **** }
 1537              		.loc 1 269 1
 1538 0024 1846     		mov	r0, r3
 1539 0026 1037     		adds	r7, r7, #16
 1540              		.cfi_def_cfa_offset 8
 1541 0028 BD46     		mov	sp, r7
 1542              		.cfi_def_cfa_register 13
 1543              		@ sp needed
 1544 002a 80BD     		pop	{r7, pc}
 1545              		.cfi_endproc
 1546              	.LFE846:
 1548              		.section	.text.LTDC_DrawVLineRgb888,"ax",%progbits
 1549              		.align	1
 1550              		.syntax unified
 1551              		.thumb
 1552              		.thumb_func
 1554              	LTDC_DrawVLineRgb888:
 1555              	.LFB847:
 270:Lib/screenl/Src/scrl_lcd.c **** 
 271:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_DrawVLineRgb888(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Lengt
 272:Lib/screenl/Src/scrl_lcd.c **** {
ARM GAS  /tmp/cclxoO08.s 			page 33


 1556              		.loc 1 272 1
 1557              		.cfi_startproc
 1558              		@ args = 4, pretend = 0, frame = 16
 1559              		@ frame_needed = 1, uses_anonymous_args = 0
 1560 0000 80B5     		push	{r7, lr}
 1561              		.cfi_def_cfa_offset 8
 1562              		.cfi_offset 7, -8
 1563              		.cfi_offset 14, -4
 1564 0002 86B0     		sub	sp, sp, #24
 1565              		.cfi_def_cfa_offset 32
 1566 0004 02AF     		add	r7, sp, #8
 1567              		.cfi_def_cfa 7, 24
 1568 0006 F860     		str	r0, [r7, #12]
 1569 0008 B960     		str	r1, [r7, #8]
 1570 000a 7A60     		str	r2, [r7, #4]
 1571 000c 3B60     		str	r3, [r7]
 273:Lib/screenl/Src/scrl_lcd.c ****   return LTDC_FillRectRgb888(0, Xpos, Ypos, 1 , Length, Color);
 1572              		.loc 1 273 10
 1573 000e BB69     		ldr	r3, [r7, #24]
 1574 0010 0193     		str	r3, [sp, #4]
 1575 0012 3B68     		ldr	r3, [r7]
 1576 0014 0093     		str	r3, [sp]
 1577 0016 0123     		movs	r3, #1
 1578 0018 7A68     		ldr	r2, [r7, #4]
 1579 001a B968     		ldr	r1, [r7, #8]
 1580 001c 0020     		movs	r0, #0
 1581 001e FFF7FEFF 		bl	LTDC_FillRectRgb888
 1582 0022 0346     		mov	r3, r0
 274:Lib/screenl/Src/scrl_lcd.c **** }
 1583              		.loc 1 274 1
 1584 0024 1846     		mov	r0, r3
 1585 0026 1037     		adds	r7, r7, #16
 1586              		.cfi_def_cfa_offset 8
 1587 0028 BD46     		mov	sp, r7
 1588              		.cfi_def_cfa_register 13
 1589              		@ sp needed
 1590 002a 80BD     		pop	{r7, pc}
 1591              		.cfi_endproc
 1592              	.LFE847:
 1594              		.section	.text.LTDC_DrawVLineArgb8888,"ax",%progbits
 1595              		.align	1
 1596              		.syntax unified
 1597              		.thumb
 1598              		.thumb_func
 1600              	LTDC_DrawVLineArgb8888:
 1601              	.LFB848:
 275:Lib/screenl/Src/scrl_lcd.c **** 
 276:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_DrawVLineArgb8888(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Len
 277:Lib/screenl/Src/scrl_lcd.c **** {
 1602              		.loc 1 277 1
 1603              		.cfi_startproc
 1604              		@ args = 4, pretend = 0, frame = 16
 1605              		@ frame_needed = 1, uses_anonymous_args = 0
 1606 0000 80B5     		push	{r7, lr}
 1607              		.cfi_def_cfa_offset 8
 1608              		.cfi_offset 7, -8
 1609              		.cfi_offset 14, -4
ARM GAS  /tmp/cclxoO08.s 			page 34


 1610 0002 86B0     		sub	sp, sp, #24
 1611              		.cfi_def_cfa_offset 32
 1612 0004 02AF     		add	r7, sp, #8
 1613              		.cfi_def_cfa 7, 24
 1614 0006 F860     		str	r0, [r7, #12]
 1615 0008 B960     		str	r1, [r7, #8]
 1616 000a 7A60     		str	r2, [r7, #4]
 1617 000c 3B60     		str	r3, [r7]
 278:Lib/screenl/Src/scrl_lcd.c ****   return LTDC_FillRectArgb8888(0, Xpos, Ypos, 1 , Length, Color);
 1618              		.loc 1 278 10
 1619 000e BB69     		ldr	r3, [r7, #24]
 1620 0010 0193     		str	r3, [sp, #4]
 1621 0012 3B68     		ldr	r3, [r7]
 1622 0014 0093     		str	r3, [sp]
 1623 0016 0123     		movs	r3, #1
 1624 0018 7A68     		ldr	r2, [r7, #4]
 1625 001a B968     		ldr	r1, [r7, #8]
 1626 001c 0020     		movs	r0, #0
 1627 001e FFF7FEFF 		bl	LTDC_FillRectArgb8888
 1628 0022 0346     		mov	r3, r0
 279:Lib/screenl/Src/scrl_lcd.c **** }
 1629              		.loc 1 279 1
 1630 0024 1846     		mov	r0, r3
 1631 0026 1037     		adds	r7, r7, #16
 1632              		.cfi_def_cfa_offset 8
 1633 0028 BD46     		mov	sp, r7
 1634              		.cfi_def_cfa_register 13
 1635              		@ sp needed
 1636 002a 80BD     		pop	{r7, pc}
 1637              		.cfi_endproc
 1638              	.LFE848:
 1640              		.section	.text.LTDC_SetPixelRgb888,"ax",%progbits
 1641              		.align	1
 1642              		.syntax unified
 1643              		.thumb
 1644              		.thumb_func
 1646              	LTDC_SetPixelRgb888:
 1647              	.LFB849:
 280:Lib/screenl/Src/scrl_lcd.c **** 
 281:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_SetPixelRgb888(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
 282:Lib/screenl/Src/scrl_lcd.c **** {
 1648              		.loc 1 282 1
 1649              		.cfi_startproc
 1650              		@ args = 0, pretend = 0, frame = 16
 1651              		@ frame_needed = 1, uses_anonymous_args = 0
 1652 0000 80B5     		push	{r7, lr}
 1653              		.cfi_def_cfa_offset 8
 1654              		.cfi_offset 7, -8
 1655              		.cfi_offset 14, -4
 1656 0002 86B0     		sub	sp, sp, #24
 1657              		.cfi_def_cfa_offset 32
 1658 0004 02AF     		add	r7, sp, #8
 1659              		.cfi_def_cfa 7, 24
 1660 0006 F860     		str	r0, [r7, #12]
 1661 0008 B960     		str	r1, [r7, #8]
 1662 000a 7A60     		str	r2, [r7, #4]
 1663 000c 3B60     		str	r3, [r7]
ARM GAS  /tmp/cclxoO08.s 			page 35


 283:Lib/screenl/Src/scrl_lcd.c ****   return LTDC_FillRectRgb888(0, Xpos, Ypos, 1 , 1, Color);
 1664              		.loc 1 283 10
 1665 000e 3B68     		ldr	r3, [r7]
 1666 0010 0193     		str	r3, [sp, #4]
 1667 0012 0123     		movs	r3, #1
 1668 0014 0093     		str	r3, [sp]
 1669 0016 0123     		movs	r3, #1
 1670 0018 7A68     		ldr	r2, [r7, #4]
 1671 001a B968     		ldr	r1, [r7, #8]
 1672 001c 0020     		movs	r0, #0
 1673 001e FFF7FEFF 		bl	LTDC_FillRectRgb888
 1674 0022 0346     		mov	r3, r0
 284:Lib/screenl/Src/scrl_lcd.c **** }
 1675              		.loc 1 284 1
 1676 0024 1846     		mov	r0, r3
 1677 0026 1037     		adds	r7, r7, #16
 1678              		.cfi_def_cfa_offset 8
 1679 0028 BD46     		mov	sp, r7
 1680              		.cfi_def_cfa_register 13
 1681              		@ sp needed
 1682 002a 80BD     		pop	{r7, pc}
 1683              		.cfi_endproc
 1684              	.LFE849:
 1686              		.section	.text.LTDC_SetPixelArgb8888,"ax",%progbits
 1687              		.align	1
 1688              		.syntax unified
 1689              		.thumb
 1690              		.thumb_func
 1692              	LTDC_SetPixelArgb8888:
 1693              	.LFB850:
 285:Lib/screenl/Src/scrl_lcd.c **** 
 286:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_SetPixelArgb8888(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Colo
 287:Lib/screenl/Src/scrl_lcd.c **** {
 1694              		.loc 1 287 1
 1695              		.cfi_startproc
 1696              		@ args = 0, pretend = 0, frame = 16
 1697              		@ frame_needed = 1, uses_anonymous_args = 0
 1698 0000 80B5     		push	{r7, lr}
 1699              		.cfi_def_cfa_offset 8
 1700              		.cfi_offset 7, -8
 1701              		.cfi_offset 14, -4
 1702 0002 86B0     		sub	sp, sp, #24
 1703              		.cfi_def_cfa_offset 32
 1704 0004 02AF     		add	r7, sp, #8
 1705              		.cfi_def_cfa 7, 24
 1706 0006 F860     		str	r0, [r7, #12]
 1707 0008 B960     		str	r1, [r7, #8]
 1708 000a 7A60     		str	r2, [r7, #4]
 1709 000c 3B60     		str	r3, [r7]
 288:Lib/screenl/Src/scrl_lcd.c ****   return LTDC_FillRectArgb8888(0, Xpos, Ypos, 1 , 1, Color);
 1710              		.loc 1 288 10
 1711 000e 3B68     		ldr	r3, [r7]
 1712 0010 0193     		str	r3, [sp, #4]
 1713 0012 0123     		movs	r3, #1
 1714 0014 0093     		str	r3, [sp]
 1715 0016 0123     		movs	r3, #1
 1716 0018 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/cclxoO08.s 			page 36


 1717 001a B968     		ldr	r1, [r7, #8]
 1718 001c 0020     		movs	r0, #0
 1719 001e FFF7FEFF 		bl	LTDC_FillRectArgb8888
 1720 0022 0346     		mov	r3, r0
 289:Lib/screenl/Src/scrl_lcd.c **** }
 1721              		.loc 1 289 1
 1722 0024 1846     		mov	r0, r3
 1723 0026 1037     		adds	r7, r7, #16
 1724              		.cfi_def_cfa_offset 8
 1725 0028 BD46     		mov	sp, r7
 1726              		.cfi_def_cfa_register 13
 1727              		@ sp needed
 1728 002a 80BD     		pop	{r7, pc}
 1729              		.cfi_endproc
 1730              	.LFE850:
 1732              		.section	.text.LTDC_DrawBitmap,"ax",%progbits
 1733              		.align	1
 1734              		.syntax unified
 1735              		.thumb
 1736              		.thumb_func
 1738              	LTDC_DrawBitmap:
 1739              	.LFB851:
 290:Lib/screenl/Src/scrl_lcd.c **** 
 291:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
 292:Lib/screenl/Src/scrl_lcd.c **** {
 1740              		.loc 1 292 1
 1741              		.cfi_startproc
 1742              		@ args = 0, pretend = 0, frame = 16
 1743              		@ frame_needed = 1, uses_anonymous_args = 0
 1744 0000 80B5     		push	{r7, lr}
 1745              		.cfi_def_cfa_offset 8
 1746              		.cfi_offset 7, -8
 1747              		.cfi_offset 14, -4
 1748 0002 84B0     		sub	sp, sp, #16
 1749              		.cfi_def_cfa_offset 24
 1750 0004 00AF     		add	r7, sp, #0
 1751              		.cfi_def_cfa_register 7
 1752 0006 F860     		str	r0, [r7, #12]
 1753 0008 B960     		str	r1, [r7, #8]
 1754 000a 7A60     		str	r2, [r7, #4]
 1755 000c 3B60     		str	r3, [r7]
 293:Lib/screenl/Src/scrl_lcd.c ****   return BSP_LCD_DrawBitmap(Instance, Xpos, Ypos, pBmp);
 1756              		.loc 1 293 10
 1757 000e 3B68     		ldr	r3, [r7]
 1758 0010 7A68     		ldr	r2, [r7, #4]
 1759 0012 B968     		ldr	r1, [r7, #8]
 1760 0014 F868     		ldr	r0, [r7, #12]
 1761 0016 FFF7FEFF 		bl	BSP_LCD_DrawBitmap
 1762 001a 0346     		mov	r3, r0
 294:Lib/screenl/Src/scrl_lcd.c **** }
 1763              		.loc 1 294 1
 1764 001c 1846     		mov	r0, r3
 1765 001e 1037     		adds	r7, r7, #16
 1766              		.cfi_def_cfa_offset 8
 1767 0020 BD46     		mov	sp, r7
 1768              		.cfi_def_cfa_register 13
 1769              		@ sp needed
ARM GAS  /tmp/cclxoO08.s 			page 37


 1770 0022 80BD     		pop	{r7, pc}
 1771              		.cfi_endproc
 1772              	.LFE851:
 1774              		.section	.text.LTDC_FillRGBRect,"ax",%progbits
 1775              		.align	1
 1776              		.syntax unified
 1777              		.thumb
 1778              		.thumb_func
 1780              	LTDC_FillRGBRect:
 1781              	.LFB852:
 295:Lib/screenl/Src/scrl_lcd.c **** 
 296:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, ui
 297:Lib/screenl/Src/scrl_lcd.c ****                                 uint32_t Height)
 298:Lib/screenl/Src/scrl_lcd.c **** {
 1782              		.loc 1 298 1
 1783              		.cfi_startproc
 1784              		@ args = 8, pretend = 0, frame = 16
 1785              		@ frame_needed = 1, uses_anonymous_args = 0
 1786 0000 80B5     		push	{r7, lr}
 1787              		.cfi_def_cfa_offset 8
 1788              		.cfi_offset 7, -8
 1789              		.cfi_offset 14, -4
 1790 0002 86B0     		sub	sp, sp, #24
 1791              		.cfi_def_cfa_offset 32
 1792 0004 02AF     		add	r7, sp, #8
 1793              		.cfi_def_cfa 7, 24
 1794 0006 F860     		str	r0, [r7, #12]
 1795 0008 B960     		str	r1, [r7, #8]
 1796 000a 7A60     		str	r2, [r7, #4]
 1797 000c 3B60     		str	r3, [r7]
 299:Lib/screenl/Src/scrl_lcd.c ****   if (is_layer_rgb888[current_layer])
 1798              		.loc 1 299 22
 1799 000e 1B4B     		ldr	r3, .L81
 1800 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1801 0012 1A46     		mov	r2, r3
 1802 0014 1A4B     		ldr	r3, .L81+4
 1803 0016 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1804              		.loc 1 299 6
 1805 001a 002B     		cmp	r3, #0
 1806 001c 0BD0     		beq	.L78
 300:Lib/screenl/Src/scrl_lcd.c ****     return LTDC_FillRGBRectRgb888(Instance, Xpos, Ypos, pData, Width, Height);
 1807              		.loc 1 300 12
 1808 001e FB69     		ldr	r3, [r7, #28]
 1809 0020 0193     		str	r3, [sp, #4]
 1810 0022 BB69     		ldr	r3, [r7, #24]
 1811 0024 0093     		str	r3, [sp]
 1812 0026 3B68     		ldr	r3, [r7]
 1813 0028 7A68     		ldr	r2, [r7, #4]
 1814 002a B968     		ldr	r1, [r7, #8]
 1815 002c F868     		ldr	r0, [r7, #12]
 1816 002e FFF7FEFF 		bl	LTDC_FillRGBRectRgb888
 1817 0032 0346     		mov	r3, r0
 1818 0034 1EE0     		b	.L79
 1819              	.L78:
 301:Lib/screenl/Src/scrl_lcd.c ****   if (is_layer_argb8888[current_layer])
 1820              		.loc 1 301 24
 1821 0036 114B     		ldr	r3, .L81
ARM GAS  /tmp/cclxoO08.s 			page 38


 1822 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1823 003a 1A46     		mov	r2, r3
 1824 003c 114B     		ldr	r3, .L81+8
 1825 003e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1826              		.loc 1 301 6
 1827 0042 002B     		cmp	r3, #0
 1828 0044 0BD0     		beq	.L80
 302:Lib/screenl/Src/scrl_lcd.c ****     return LTDC_FillRGBRectArgb8888(Instance, Xpos, Ypos, pData, Width, Height);
 1829              		.loc 1 302 12
 1830 0046 FB69     		ldr	r3, [r7, #28]
 1831 0048 0193     		str	r3, [sp, #4]
 1832 004a BB69     		ldr	r3, [r7, #24]
 1833 004c 0093     		str	r3, [sp]
 1834 004e 3B68     		ldr	r3, [r7]
 1835 0050 7A68     		ldr	r2, [r7, #4]
 1836 0052 B968     		ldr	r1, [r7, #8]
 1837 0054 F868     		ldr	r0, [r7, #12]
 1838 0056 FFF7FEFF 		bl	LTDC_FillRGBRectArgb8888
 1839 005a 0346     		mov	r3, r0
 1840 005c 0AE0     		b	.L79
 1841              	.L80:
 303:Lib/screenl/Src/scrl_lcd.c **** 
 304:Lib/screenl/Src/scrl_lcd.c ****   return BSP_LCD_FillRGBRect(Instance, Xpos, Ypos, pData, Width, Height);
 1842              		.loc 1 304 10
 1843 005e FB69     		ldr	r3, [r7, #28]
 1844 0060 0193     		str	r3, [sp, #4]
 1845 0062 BB69     		ldr	r3, [r7, #24]
 1846 0064 0093     		str	r3, [sp]
 1847 0066 3B68     		ldr	r3, [r7]
 1848 0068 7A68     		ldr	r2, [r7, #4]
 1849 006a B968     		ldr	r1, [r7, #8]
 1850 006c F868     		ldr	r0, [r7, #12]
 1851 006e FFF7FEFF 		bl	BSP_LCD_FillRGBRect
 1852 0072 0346     		mov	r3, r0
 1853              	.L79:
 305:Lib/screenl/Src/scrl_lcd.c **** }
 1854              		.loc 1 305 1
 1855 0074 1846     		mov	r0, r3
 1856 0076 1037     		adds	r7, r7, #16
 1857              		.cfi_def_cfa_offset 8
 1858 0078 BD46     		mov	sp, r7
 1859              		.cfi_def_cfa_register 13
 1860              		@ sp needed
 1861 007a 80BD     		pop	{r7, pc}
 1862              	.L82:
 1863              		.align	2
 1864              	.L81:
 1865 007c 00000000 		.word	current_layer
 1866 0080 00000000 		.word	is_layer_rgb888
 1867 0084 00000000 		.word	is_layer_argb8888
 1868              		.cfi_endproc
 1869              	.LFE852:
 1871              		.section	.text.LTDC_DrawHLine,"ax",%progbits
 1872              		.align	1
 1873              		.syntax unified
 1874              		.thumb
 1875              		.thumb_func
ARM GAS  /tmp/cclxoO08.s 			page 39


 1877              	LTDC_DrawHLine:
 1878              	.LFB853:
 306:Lib/screenl/Src/scrl_lcd.c **** 
 307:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uin
 308:Lib/screenl/Src/scrl_lcd.c **** {
 1879              		.loc 1 308 1
 1880              		.cfi_startproc
 1881              		@ args = 4, pretend = 0, frame = 16
 1882              		@ frame_needed = 1, uses_anonymous_args = 0
 1883 0000 80B5     		push	{r7, lr}
 1884              		.cfi_def_cfa_offset 8
 1885              		.cfi_offset 7, -8
 1886              		.cfi_offset 14, -4
 1887 0002 86B0     		sub	sp, sp, #24
 1888              		.cfi_def_cfa_offset 32
 1889 0004 02AF     		add	r7, sp, #8
 1890              		.cfi_def_cfa 7, 24
 1891 0006 F860     		str	r0, [r7, #12]
 1892 0008 B960     		str	r1, [r7, #8]
 1893 000a 7A60     		str	r2, [r7, #4]
 1894 000c 3B60     		str	r3, [r7]
 309:Lib/screenl/Src/scrl_lcd.c ****   if (is_layer_rgb888[current_layer])
 1895              		.loc 1 309 22
 1896 000e 184B     		ldr	r3, .L87
 1897 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1898 0012 1A46     		mov	r2, r3
 1899 0014 174B     		ldr	r3, .L87+4
 1900 0016 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1901              		.loc 1 309 6
 1902 001a 002B     		cmp	r3, #0
 1903 001c 09D0     		beq	.L84
 310:Lib/screenl/Src/scrl_lcd.c ****     return LTDC_DrawHLineRgb888(Instance, Xpos, Ypos, Length, Color);
 1904              		.loc 1 310 12
 1905 001e BB69     		ldr	r3, [r7, #24]
 1906 0020 0093     		str	r3, [sp]
 1907 0022 3B68     		ldr	r3, [r7]
 1908 0024 7A68     		ldr	r2, [r7, #4]
 1909 0026 B968     		ldr	r1, [r7, #8]
 1910 0028 F868     		ldr	r0, [r7, #12]
 1911 002a FFF7FEFF 		bl	LTDC_DrawHLineRgb888
 1912 002e 0346     		mov	r3, r0
 1913 0030 1AE0     		b	.L85
 1914              	.L84:
 311:Lib/screenl/Src/scrl_lcd.c ****   if (is_layer_argb8888[current_layer])
 1915              		.loc 1 311 24
 1916 0032 0F4B     		ldr	r3, .L87
 1917 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1918 0036 1A46     		mov	r2, r3
 1919 0038 0F4B     		ldr	r3, .L87+8
 1920 003a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1921              		.loc 1 311 6
 1922 003e 002B     		cmp	r3, #0
 1923 0040 09D0     		beq	.L86
 312:Lib/screenl/Src/scrl_lcd.c ****     return LTDC_DrawHLineArgb8888(Instance, Xpos, Ypos, Length, Color);
 1924              		.loc 1 312 12
 1925 0042 BB69     		ldr	r3, [r7, #24]
 1926 0044 0093     		str	r3, [sp]
ARM GAS  /tmp/cclxoO08.s 			page 40


 1927 0046 3B68     		ldr	r3, [r7]
 1928 0048 7A68     		ldr	r2, [r7, #4]
 1929 004a B968     		ldr	r1, [r7, #8]
 1930 004c F868     		ldr	r0, [r7, #12]
 1931 004e FFF7FEFF 		bl	LTDC_DrawHLineArgb8888
 1932 0052 0346     		mov	r3, r0
 1933 0054 08E0     		b	.L85
 1934              	.L86:
 313:Lib/screenl/Src/scrl_lcd.c **** 
 314:Lib/screenl/Src/scrl_lcd.c ****   return BSP_LCD_DrawHLine(Instance, Xpos, Ypos, Length, Color);
 1935              		.loc 1 314 10
 1936 0056 BB69     		ldr	r3, [r7, #24]
 1937 0058 0093     		str	r3, [sp]
 1938 005a 3B68     		ldr	r3, [r7]
 1939 005c 7A68     		ldr	r2, [r7, #4]
 1940 005e B968     		ldr	r1, [r7, #8]
 1941 0060 F868     		ldr	r0, [r7, #12]
 1942 0062 FFF7FEFF 		bl	BSP_LCD_DrawHLine
 1943 0066 0346     		mov	r3, r0
 1944              	.L85:
 315:Lib/screenl/Src/scrl_lcd.c **** }
 1945              		.loc 1 315 1
 1946 0068 1846     		mov	r0, r3
 1947 006a 1037     		adds	r7, r7, #16
 1948              		.cfi_def_cfa_offset 8
 1949 006c BD46     		mov	sp, r7
 1950              		.cfi_def_cfa_register 13
 1951              		@ sp needed
 1952 006e 80BD     		pop	{r7, pc}
 1953              	.L88:
 1954              		.align	2
 1955              	.L87:
 1956 0070 00000000 		.word	current_layer
 1957 0074 00000000 		.word	is_layer_rgb888
 1958 0078 00000000 		.word	is_layer_argb8888
 1959              		.cfi_endproc
 1960              	.LFE853:
 1962              		.section	.text.LTDC_DrawVLine,"ax",%progbits
 1963              		.align	1
 1964              		.syntax unified
 1965              		.thumb
 1966              		.thumb_func
 1968              	LTDC_DrawVLine:
 1969              	.LFB854:
 316:Lib/screenl/Src/scrl_lcd.c **** 
 317:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uin
 318:Lib/screenl/Src/scrl_lcd.c **** {
 1970              		.loc 1 318 1
 1971              		.cfi_startproc
 1972              		@ args = 4, pretend = 0, frame = 16
 1973              		@ frame_needed = 1, uses_anonymous_args = 0
 1974 0000 80B5     		push	{r7, lr}
 1975              		.cfi_def_cfa_offset 8
 1976              		.cfi_offset 7, -8
 1977              		.cfi_offset 14, -4
 1978 0002 86B0     		sub	sp, sp, #24
 1979              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/cclxoO08.s 			page 41


 1980 0004 02AF     		add	r7, sp, #8
 1981              		.cfi_def_cfa 7, 24
 1982 0006 F860     		str	r0, [r7, #12]
 1983 0008 B960     		str	r1, [r7, #8]
 1984 000a 7A60     		str	r2, [r7, #4]
 1985 000c 3B60     		str	r3, [r7]
 319:Lib/screenl/Src/scrl_lcd.c ****   if (is_layer_rgb888[current_layer])
 1986              		.loc 1 319 22
 1987 000e 184B     		ldr	r3, .L93
 1988 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1989 0012 1A46     		mov	r2, r3
 1990 0014 174B     		ldr	r3, .L93+4
 1991 0016 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1992              		.loc 1 319 6
 1993 001a 002B     		cmp	r3, #0
 1994 001c 09D0     		beq	.L90
 320:Lib/screenl/Src/scrl_lcd.c ****     return LTDC_DrawVLineRgb888(Instance, Xpos, Ypos, Length, Color);
 1995              		.loc 1 320 12
 1996 001e BB69     		ldr	r3, [r7, #24]
 1997 0020 0093     		str	r3, [sp]
 1998 0022 3B68     		ldr	r3, [r7]
 1999 0024 7A68     		ldr	r2, [r7, #4]
 2000 0026 B968     		ldr	r1, [r7, #8]
 2001 0028 F868     		ldr	r0, [r7, #12]
 2002 002a FFF7FEFF 		bl	LTDC_DrawVLineRgb888
 2003 002e 0346     		mov	r3, r0
 2004 0030 1AE0     		b	.L91
 2005              	.L90:
 321:Lib/screenl/Src/scrl_lcd.c ****   if (is_layer_argb8888[current_layer])
 2006              		.loc 1 321 24
 2007 0032 0F4B     		ldr	r3, .L93
 2008 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2009 0036 1A46     		mov	r2, r3
 2010 0038 0F4B     		ldr	r3, .L93+8
 2011 003a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2012              		.loc 1 321 6
 2013 003e 002B     		cmp	r3, #0
 2014 0040 09D0     		beq	.L92
 322:Lib/screenl/Src/scrl_lcd.c ****     return LTDC_DrawVLineArgb8888(Instance, Xpos, Ypos, Length, Color);
 2015              		.loc 1 322 12
 2016 0042 BB69     		ldr	r3, [r7, #24]
 2017 0044 0093     		str	r3, [sp]
 2018 0046 3B68     		ldr	r3, [r7]
 2019 0048 7A68     		ldr	r2, [r7, #4]
 2020 004a B968     		ldr	r1, [r7, #8]
 2021 004c F868     		ldr	r0, [r7, #12]
 2022 004e FFF7FEFF 		bl	LTDC_DrawVLineArgb8888
 2023 0052 0346     		mov	r3, r0
 2024 0054 08E0     		b	.L91
 2025              	.L92:
 323:Lib/screenl/Src/scrl_lcd.c **** 
 324:Lib/screenl/Src/scrl_lcd.c ****   return BSP_LCD_DrawVLine(Instance, Xpos, Ypos, Length, Color);
 2026              		.loc 1 324 10
 2027 0056 BB69     		ldr	r3, [r7, #24]
 2028 0058 0093     		str	r3, [sp]
 2029 005a 3B68     		ldr	r3, [r7]
 2030 005c 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/cclxoO08.s 			page 42


 2031 005e B968     		ldr	r1, [r7, #8]
 2032 0060 F868     		ldr	r0, [r7, #12]
 2033 0062 FFF7FEFF 		bl	BSP_LCD_DrawVLine
 2034 0066 0346     		mov	r3, r0
 2035              	.L91:
 325:Lib/screenl/Src/scrl_lcd.c **** }
 2036              		.loc 1 325 1
 2037 0068 1846     		mov	r0, r3
 2038 006a 1037     		adds	r7, r7, #16
 2039              		.cfi_def_cfa_offset 8
 2040 006c BD46     		mov	sp, r7
 2041              		.cfi_def_cfa_register 13
 2042              		@ sp needed
 2043 006e 80BD     		pop	{r7, pc}
 2044              	.L94:
 2045              		.align	2
 2046              	.L93:
 2047 0070 00000000 		.word	current_layer
 2048 0074 00000000 		.word	is_layer_rgb888
 2049 0078 00000000 		.word	is_layer_argb8888
 2050              		.cfi_endproc
 2051              	.LFE854:
 2053              		.section	.text.LTDC_FillRect,"ax",%progbits
 2054              		.align	1
 2055              		.syntax unified
 2056              		.thumb
 2057              		.thumb_func
 2059              	LTDC_FillRect:
 2060              	.LFB855:
 326:Lib/screenl/Src/scrl_lcd.c **** 
 327:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint3
 328:Lib/screenl/Src/scrl_lcd.c ****                             uint32_t Color)
 329:Lib/screenl/Src/scrl_lcd.c **** {
 2061              		.loc 1 329 1
 2062              		.cfi_startproc
 2063              		@ args = 8, pretend = 0, frame = 16
 2064              		@ frame_needed = 1, uses_anonymous_args = 0
 2065 0000 80B5     		push	{r7, lr}
 2066              		.cfi_def_cfa_offset 8
 2067              		.cfi_offset 7, -8
 2068              		.cfi_offset 14, -4
 2069 0002 86B0     		sub	sp, sp, #24
 2070              		.cfi_def_cfa_offset 32
 2071 0004 02AF     		add	r7, sp, #8
 2072              		.cfi_def_cfa 7, 24
 2073 0006 F860     		str	r0, [r7, #12]
 2074 0008 B960     		str	r1, [r7, #8]
 2075 000a 7A60     		str	r2, [r7, #4]
 2076 000c 3B60     		str	r3, [r7]
 330:Lib/screenl/Src/scrl_lcd.c ****   if (is_layer_rgb888[current_layer])
 2077              		.loc 1 330 22
 2078 000e 1B4B     		ldr	r3, .L99
 2079 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2080 0012 1A46     		mov	r2, r3
 2081 0014 1A4B     		ldr	r3, .L99+4
 2082 0016 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2083              		.loc 1 330 6
ARM GAS  /tmp/cclxoO08.s 			page 43


 2084 001a 002B     		cmp	r3, #0
 2085 001c 0BD0     		beq	.L96
 331:Lib/screenl/Src/scrl_lcd.c ****     return LTDC_FillRectRgb888(Instance, Xpos, Ypos, Width, Height, Color);
 2086              		.loc 1 331 12
 2087 001e FB69     		ldr	r3, [r7, #28]
 2088 0020 0193     		str	r3, [sp, #4]
 2089 0022 BB69     		ldr	r3, [r7, #24]
 2090 0024 0093     		str	r3, [sp]
 2091 0026 3B68     		ldr	r3, [r7]
 2092 0028 7A68     		ldr	r2, [r7, #4]
 2093 002a B968     		ldr	r1, [r7, #8]
 2094 002c F868     		ldr	r0, [r7, #12]
 2095 002e FFF7FEFF 		bl	LTDC_FillRectRgb888
 2096 0032 0346     		mov	r3, r0
 2097 0034 1EE0     		b	.L97
 2098              	.L96:
 332:Lib/screenl/Src/scrl_lcd.c ****   if (is_layer_argb8888[current_layer])
 2099              		.loc 1 332 24
 2100 0036 114B     		ldr	r3, .L99
 2101 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2102 003a 1A46     		mov	r2, r3
 2103 003c 114B     		ldr	r3, .L99+8
 2104 003e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2105              		.loc 1 332 6
 2106 0042 002B     		cmp	r3, #0
 2107 0044 0BD0     		beq	.L98
 333:Lib/screenl/Src/scrl_lcd.c ****     return LTDC_FillRectArgb8888(Instance, Xpos, Ypos, Width, Height, Color);
 2108              		.loc 1 333 12
 2109 0046 FB69     		ldr	r3, [r7, #28]
 2110 0048 0193     		str	r3, [sp, #4]
 2111 004a BB69     		ldr	r3, [r7, #24]
 2112 004c 0093     		str	r3, [sp]
 2113 004e 3B68     		ldr	r3, [r7]
 2114 0050 7A68     		ldr	r2, [r7, #4]
 2115 0052 B968     		ldr	r1, [r7, #8]
 2116 0054 F868     		ldr	r0, [r7, #12]
 2117 0056 FFF7FEFF 		bl	LTDC_FillRectArgb8888
 2118 005a 0346     		mov	r3, r0
 2119 005c 0AE0     		b	.L97
 2120              	.L98:
 334:Lib/screenl/Src/scrl_lcd.c **** 
 335:Lib/screenl/Src/scrl_lcd.c ****   return BSP_LCD_FillRect(Instance, Xpos, Ypos, Width, Height, Color);
 2121              		.loc 1 335 10
 2122 005e FB69     		ldr	r3, [r7, #28]
 2123 0060 0193     		str	r3, [sp, #4]
 2124 0062 BB69     		ldr	r3, [r7, #24]
 2125 0064 0093     		str	r3, [sp]
 2126 0066 3B68     		ldr	r3, [r7]
 2127 0068 7A68     		ldr	r2, [r7, #4]
 2128 006a B968     		ldr	r1, [r7, #8]
 2129 006c F868     		ldr	r0, [r7, #12]
 2130 006e FFF7FEFF 		bl	BSP_LCD_FillRect
 2131 0072 0346     		mov	r3, r0
 2132              	.L97:
 336:Lib/screenl/Src/scrl_lcd.c **** }
 2133              		.loc 1 336 1
 2134 0074 1846     		mov	r0, r3
ARM GAS  /tmp/cclxoO08.s 			page 44


 2135 0076 1037     		adds	r7, r7, #16
 2136              		.cfi_def_cfa_offset 8
 2137 0078 BD46     		mov	sp, r7
 2138              		.cfi_def_cfa_register 13
 2139              		@ sp needed
 2140 007a 80BD     		pop	{r7, pc}
 2141              	.L100:
 2142              		.align	2
 2143              	.L99:
 2144 007c 00000000 		.word	current_layer
 2145 0080 00000000 		.word	is_layer_rgb888
 2146 0084 00000000 		.word	is_layer_argb8888
 2147              		.cfi_endproc
 2148              	.LFE855:
 2150              		.section	.text.LTDC_GetPixel,"ax",%progbits
 2151              		.align	1
 2152              		.syntax unified
 2153              		.thumb
 2154              		.thumb_func
 2156              	LTDC_GetPixel:
 2157              	.LFB856:
 337:Lib/screenl/Src/scrl_lcd.c **** 
 338:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_GetPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
 339:Lib/screenl/Src/scrl_lcd.c **** {
 2158              		.loc 1 339 1
 2159              		.cfi_startproc
 2160              		@ args = 0, pretend = 0, frame = 16
 2161              		@ frame_needed = 1, uses_anonymous_args = 0
 2162 0000 80B5     		push	{r7, lr}
 2163              		.cfi_def_cfa_offset 8
 2164              		.cfi_offset 7, -8
 2165              		.cfi_offset 14, -4
 2166 0002 84B0     		sub	sp, sp, #16
 2167              		.cfi_def_cfa_offset 24
 2168 0004 00AF     		add	r7, sp, #0
 2169              		.cfi_def_cfa_register 7
 2170 0006 F860     		str	r0, [r7, #12]
 2171 0008 B960     		str	r1, [r7, #8]
 2172 000a 7A60     		str	r2, [r7, #4]
 2173 000c 3B60     		str	r3, [r7]
 340:Lib/screenl/Src/scrl_lcd.c ****   return BSP_LCD_ReadPixel(Instance, Xpos, Ypos, Color);
 2174              		.loc 1 340 10
 2175 000e 3B68     		ldr	r3, [r7]
 2176 0010 7A68     		ldr	r2, [r7, #4]
 2177 0012 B968     		ldr	r1, [r7, #8]
 2178 0014 F868     		ldr	r0, [r7, #12]
 2179 0016 FFF7FEFF 		bl	BSP_LCD_ReadPixel
 2180 001a 0346     		mov	r3, r0
 341:Lib/screenl/Src/scrl_lcd.c **** }
 2181              		.loc 1 341 1
 2182 001c 1846     		mov	r0, r3
 2183 001e 1037     		adds	r7, r7, #16
 2184              		.cfi_def_cfa_offset 8
 2185 0020 BD46     		mov	sp, r7
 2186              		.cfi_def_cfa_register 13
 2187              		@ sp needed
 2188 0022 80BD     		pop	{r7, pc}
ARM GAS  /tmp/cclxoO08.s 			page 45


 2189              		.cfi_endproc
 2190              	.LFE856:
 2192              		.section	.text.LTDC_SetPixel,"ax",%progbits
 2193              		.align	1
 2194              		.syntax unified
 2195              		.thumb
 2196              		.thumb_func
 2198              	LTDC_SetPixel:
 2199              	.LFB857:
 342:Lib/screenl/Src/scrl_lcd.c **** 
 343:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_SetPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
 344:Lib/screenl/Src/scrl_lcd.c **** {
 2200              		.loc 1 344 1
 2201              		.cfi_startproc
 2202              		@ args = 0, pretend = 0, frame = 16
 2203              		@ frame_needed = 1, uses_anonymous_args = 0
 2204 0000 80B5     		push	{r7, lr}
 2205              		.cfi_def_cfa_offset 8
 2206              		.cfi_offset 7, -8
 2207              		.cfi_offset 14, -4
 2208 0002 84B0     		sub	sp, sp, #16
 2209              		.cfi_def_cfa_offset 24
 2210 0004 00AF     		add	r7, sp, #0
 2211              		.cfi_def_cfa_register 7
 2212 0006 F860     		str	r0, [r7, #12]
 2213 0008 B960     		str	r1, [r7, #8]
 2214 000a 7A60     		str	r2, [r7, #4]
 2215 000c 3B60     		str	r3, [r7]
 345:Lib/screenl/Src/scrl_lcd.c ****   if (is_layer_rgb888[current_layer])
 2216              		.loc 1 345 22
 2217 000e 154B     		ldr	r3, .L107
 2218 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2219 0012 1A46     		mov	r2, r3
 2220 0014 144B     		ldr	r3, .L107+4
 2221 0016 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2222              		.loc 1 345 6
 2223 001a 002B     		cmp	r3, #0
 2224 001c 07D0     		beq	.L104
 346:Lib/screenl/Src/scrl_lcd.c ****     return LTDC_SetPixelRgb888(Instance, Xpos, Ypos, Color);
 2225              		.loc 1 346 12
 2226 001e 3B68     		ldr	r3, [r7]
 2227 0020 7A68     		ldr	r2, [r7, #4]
 2228 0022 B968     		ldr	r1, [r7, #8]
 2229 0024 F868     		ldr	r0, [r7, #12]
 2230 0026 FFF7FEFF 		bl	LTDC_SetPixelRgb888
 2231 002a 0346     		mov	r3, r0
 2232 002c 16E0     		b	.L105
 2233              	.L104:
 347:Lib/screenl/Src/scrl_lcd.c ****   if (is_layer_argb8888[current_layer])
 2234              		.loc 1 347 24
 2235 002e 0D4B     		ldr	r3, .L107
 2236 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2237 0032 1A46     		mov	r2, r3
 2238 0034 0D4B     		ldr	r3, .L107+8
 2239 0036 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2240              		.loc 1 347 6
 2241 003a 002B     		cmp	r3, #0
ARM GAS  /tmp/cclxoO08.s 			page 46


 2242 003c 07D0     		beq	.L106
 348:Lib/screenl/Src/scrl_lcd.c ****     return LTDC_SetPixelArgb8888(Instance, Xpos, Ypos, Color);
 2243              		.loc 1 348 12
 2244 003e 3B68     		ldr	r3, [r7]
 2245 0040 7A68     		ldr	r2, [r7, #4]
 2246 0042 B968     		ldr	r1, [r7, #8]
 2247 0044 F868     		ldr	r0, [r7, #12]
 2248 0046 FFF7FEFF 		bl	LTDC_SetPixelArgb8888
 2249 004a 0346     		mov	r3, r0
 2250 004c 06E0     		b	.L105
 2251              	.L106:
 349:Lib/screenl/Src/scrl_lcd.c **** 
 350:Lib/screenl/Src/scrl_lcd.c ****   return BSP_LCD_WritePixel(Instance, Xpos, Ypos, Color);
 2252              		.loc 1 350 10
 2253 004e 3B68     		ldr	r3, [r7]
 2254 0050 7A68     		ldr	r2, [r7, #4]
 2255 0052 B968     		ldr	r1, [r7, #8]
 2256 0054 F868     		ldr	r0, [r7, #12]
 2257 0056 FFF7FEFF 		bl	BSP_LCD_WritePixel
 2258 005a 0346     		mov	r3, r0
 2259              	.L105:
 351:Lib/screenl/Src/scrl_lcd.c **** }
 2260              		.loc 1 351 1
 2261 005c 1846     		mov	r0, r3
 2262 005e 1037     		adds	r7, r7, #16
 2263              		.cfi_def_cfa_offset 8
 2264 0060 BD46     		mov	sp, r7
 2265              		.cfi_def_cfa_register 13
 2266              		@ sp needed
 2267 0062 80BD     		pop	{r7, pc}
 2268              	.L108:
 2269              		.align	2
 2270              	.L107:
 2271 0064 00000000 		.word	current_layer
 2272 0068 00000000 		.word	is_layer_rgb888
 2273 006c 00000000 		.word	is_layer_argb8888
 2274              		.cfi_endproc
 2275              	.LFE857:
 2277              		.section	.text.LTDC_GetXSize,"ax",%progbits
 2278              		.align	1
 2279              		.syntax unified
 2280              		.thumb
 2281              		.thumb_func
 2283              	LTDC_GetXSize:
 2284              	.LFB858:
 352:Lib/screenl/Src/scrl_lcd.c **** 
 353:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_GetXSize(uint32_t Instance, uint32_t *YSize)
 354:Lib/screenl/Src/scrl_lcd.c **** {
 2285              		.loc 1 354 1
 2286              		.cfi_startproc
 2287              		@ args = 0, pretend = 0, frame = 8
 2288              		@ frame_needed = 1, uses_anonymous_args = 0
 2289 0000 80B5     		push	{r7, lr}
 2290              		.cfi_def_cfa_offset 8
 2291              		.cfi_offset 7, -8
 2292              		.cfi_offset 14, -4
 2293 0002 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/cclxoO08.s 			page 47


 2294              		.cfi_def_cfa_offset 16
 2295 0004 00AF     		add	r7, sp, #0
 2296              		.cfi_def_cfa_register 7
 2297 0006 7860     		str	r0, [r7, #4]
 2298 0008 3960     		str	r1, [r7]
 355:Lib/screenl/Src/scrl_lcd.c ****   return BSP_LCD_GetXSize(Instance, YSize);
 2299              		.loc 1 355 10
 2300 000a 3968     		ldr	r1, [r7]
 2301 000c 7868     		ldr	r0, [r7, #4]
 2302 000e FFF7FEFF 		bl	BSP_LCD_GetXSize
 2303 0012 0346     		mov	r3, r0
 356:Lib/screenl/Src/scrl_lcd.c **** }
 2304              		.loc 1 356 1
 2305 0014 1846     		mov	r0, r3
 2306 0016 0837     		adds	r7, r7, #8
 2307              		.cfi_def_cfa_offset 8
 2308 0018 BD46     		mov	sp, r7
 2309              		.cfi_def_cfa_register 13
 2310              		@ sp needed
 2311 001a 80BD     		pop	{r7, pc}
 2312              		.cfi_endproc
 2313              	.LFE858:
 2315              		.section	.text.LTDC_GetYSize,"ax",%progbits
 2316              		.align	1
 2317              		.syntax unified
 2318              		.thumb
 2319              		.thumb_func
 2321              	LTDC_GetYSize:
 2322              	.LFB859:
 357:Lib/screenl/Src/scrl_lcd.c **** 
 358:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_GetYSize(uint32_t Instance, uint32_t *YSize)
 359:Lib/screenl/Src/scrl_lcd.c **** {
 2323              		.loc 1 359 1
 2324              		.cfi_startproc
 2325              		@ args = 0, pretend = 0, frame = 8
 2326              		@ frame_needed = 1, uses_anonymous_args = 0
 2327 0000 80B5     		push	{r7, lr}
 2328              		.cfi_def_cfa_offset 8
 2329              		.cfi_offset 7, -8
 2330              		.cfi_offset 14, -4
 2331 0002 82B0     		sub	sp, sp, #8
 2332              		.cfi_def_cfa_offset 16
 2333 0004 00AF     		add	r7, sp, #0
 2334              		.cfi_def_cfa_register 7
 2335 0006 7860     		str	r0, [r7, #4]
 2336 0008 3960     		str	r1, [r7]
 360:Lib/screenl/Src/scrl_lcd.c ****   return BSP_LCD_GetYSize(Instance, YSize);
 2337              		.loc 1 360 10
 2338 000a 3968     		ldr	r1, [r7]
 2339 000c 7868     		ldr	r0, [r7, #4]
 2340 000e FFF7FEFF 		bl	BSP_LCD_GetYSize
 2341 0012 0346     		mov	r3, r0
 361:Lib/screenl/Src/scrl_lcd.c **** }
 2342              		.loc 1 361 1
 2343 0014 1846     		mov	r0, r3
 2344 0016 0837     		adds	r7, r7, #8
 2345              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cclxoO08.s 			page 48


 2346 0018 BD46     		mov	sp, r7
 2347              		.cfi_def_cfa_register 13
 2348              		@ sp needed
 2349 001a 80BD     		pop	{r7, pc}
 2350              		.cfi_endproc
 2351              	.LFE859:
 2353              		.section	.text.LTDC_SetLayer,"ax",%progbits
 2354              		.align	1
 2355              		.syntax unified
 2356              		.thumb
 2357              		.thumb_func
 2359              	LTDC_SetLayer:
 2360              	.LFB860:
 362:Lib/screenl/Src/scrl_lcd.c **** 
 363:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_SetLayer(uint32_t Instance, uint32_t LayerIndex)
 364:Lib/screenl/Src/scrl_lcd.c **** {
 2361              		.loc 1 364 1
 2362              		.cfi_startproc
 2363              		@ args = 0, pretend = 0, frame = 16
 2364              		@ frame_needed = 1, uses_anonymous_args = 0
 2365 0000 80B5     		push	{r7, lr}
 2366              		.cfi_def_cfa_offset 8
 2367              		.cfi_offset 7, -8
 2368              		.cfi_offset 14, -4
 2369 0002 84B0     		sub	sp, sp, #16
 2370              		.cfi_def_cfa_offset 24
 2371 0004 00AF     		add	r7, sp, #0
 2372              		.cfi_def_cfa_register 7
 2373 0006 7860     		str	r0, [r7, #4]
 2374 0008 3960     		str	r1, [r7]
 365:Lib/screenl/Src/scrl_lcd.c ****   int32_t res;
 366:Lib/screenl/Src/scrl_lcd.c **** 
 367:Lib/screenl/Src/scrl_lcd.c ****   current_layer = LayerIndex;
 2375              		.loc 1 367 17
 2376 000a 3B68     		ldr	r3, [r7]
 2377 000c DAB2     		uxtb	r2, r3
 2378 000e 104B     		ldr	r3, .L116
 2379 0010 1A70     		strb	r2, [r3]
 368:Lib/screenl/Src/scrl_lcd.c ****   res = BSP_LCD_SetActiveLayer(Instance, LayerIndex);
 2380              		.loc 1 368 9
 2381 0012 3968     		ldr	r1, [r7]
 2382 0014 7868     		ldr	r0, [r7, #4]
 2383 0016 FFF7FEFF 		bl	BSP_LCD_SetActiveLayer
 2384 001a F860     		str	r0, [r7, #12]
 369:Lib/screenl/Src/scrl_lcd.c **** 
 370:Lib/screenl/Src/scrl_lcd.c ****   /* Fix wrong BppFactor/PixelFormat decision when in flexible format */
 371:Lib/screenl/Src/scrl_lcd.c ****   if (is_layer_rgb888[LayerIndex]) {
 2385              		.loc 1 371 22
 2386 001c 0D4A     		ldr	r2, .L116+4
 2387 001e 3B68     		ldr	r3, [r7]
 2388 0020 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2389              		.loc 1 371 6
 2390 0024 002B     		cmp	r3, #0
 2391 0026 0DD0     		beq	.L114
 372:Lib/screenl/Src/scrl_lcd.c ****     Lcd_Ctx[Instance].BppFactor = 3;
 2392              		.loc 1 372 33
 2393 0028 0B4A     		ldr	r2, .L116+8
ARM GAS  /tmp/cclxoO08.s 			page 49


 2394 002a 7B68     		ldr	r3, [r7, #4]
 2395 002c 5B01     		lsls	r3, r3, #5
 2396 002e 1344     		add	r3, r3, r2
 2397 0030 1033     		adds	r3, r3, #16
 2398 0032 0322     		movs	r2, #3
 2399 0034 1A60     		str	r2, [r3]
 373:Lib/screenl/Src/scrl_lcd.c ****     Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_RGB888;
 2400              		.loc 1 373 35
 2401 0036 084A     		ldr	r2, .L116+8
 2402 0038 7B68     		ldr	r3, [r7, #4]
 2403 003a 5B01     		lsls	r3, r3, #5
 2404 003c 1344     		add	r3, r3, r2
 2405 003e 0C33     		adds	r3, r3, #12
 2406 0040 0122     		movs	r2, #1
 2407 0042 1A60     		str	r2, [r3]
 2408              	.L114:
 374:Lib/screenl/Src/scrl_lcd.c ****   }
 375:Lib/screenl/Src/scrl_lcd.c **** 
 376:Lib/screenl/Src/scrl_lcd.c ****   return res;
 2409              		.loc 1 376 10
 2410 0044 FB68     		ldr	r3, [r7, #12]
 377:Lib/screenl/Src/scrl_lcd.c **** }
 2411              		.loc 1 377 1
 2412 0046 1846     		mov	r0, r3
 2413 0048 1037     		adds	r7, r7, #16
 2414              		.cfi_def_cfa_offset 8
 2415 004a BD46     		mov	sp, r7
 2416              		.cfi_def_cfa_register 13
 2417              		@ sp needed
 2418 004c 80BD     		pop	{r7, pc}
 2419              	.L117:
 2420 004e 00BF     		.align	2
 2421              	.L116:
 2422 0050 00000000 		.word	current_layer
 2423 0054 00000000 		.word	is_layer_rgb888
 2424 0058 00000000 		.word	Lcd_Ctx
 2425              		.cfi_endproc
 2426              	.LFE860:
 2428              		.section	.text.LTDC_GetFormat,"ax",%progbits
 2429              		.align	1
 2430              		.syntax unified
 2431              		.thumb
 2432              		.thumb_func
 2434              	LTDC_GetFormat:
 2435              	.LFB861:
 378:Lib/screenl/Src/scrl_lcd.c **** 
 379:Lib/screenl/Src/scrl_lcd.c **** static int32_t LTDC_GetFormat(uint32_t Instance, uint32_t *PixelFormat)
 380:Lib/screenl/Src/scrl_lcd.c **** {
 2436              		.loc 1 380 1
 2437              		.cfi_startproc
 2438              		@ args = 0, pretend = 0, frame = 8
 2439              		@ frame_needed = 1, uses_anonymous_args = 0
 2440 0000 80B5     		push	{r7, lr}
 2441              		.cfi_def_cfa_offset 8
 2442              		.cfi_offset 7, -8
 2443              		.cfi_offset 14, -4
 2444 0002 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/cclxoO08.s 			page 50


 2445              		.cfi_def_cfa_offset 16
 2446 0004 00AF     		add	r7, sp, #0
 2447              		.cfi_def_cfa_register 7
 2448 0006 7860     		str	r0, [r7, #4]
 2449 0008 3960     		str	r1, [r7]
 381:Lib/screenl/Src/scrl_lcd.c ****   return BSP_LCD_GetPixelFormat(Instance, PixelFormat);
 2450              		.loc 1 381 10
 2451 000a 3968     		ldr	r1, [r7]
 2452 000c 7868     		ldr	r0, [r7, #4]
 2453 000e FFF7FEFF 		bl	BSP_LCD_GetPixelFormat
 2454 0012 0346     		mov	r3, r0
 382:Lib/screenl/Src/scrl_lcd.c **** }
 2455              		.loc 1 382 1
 2456 0014 1846     		mov	r0, r3
 2457 0016 0837     		adds	r7, r7, #8
 2458              		.cfi_def_cfa_offset 8
 2459 0018 BD46     		mov	sp, r7
 2460              		.cfi_def_cfa_register 13
 2461              		@ sp needed
 2462 001a 80BD     		pop	{r7, pc}
 2463              		.cfi_endproc
 2464              	.LFE861:
 2466              		.section	.rodata.Dummy_Driver,"a"
 2467              		.align	2
 2470              	Dummy_Driver:
 2471 0000 00000000 		.word	LTDC_DrawBitmap
 2472 0004 00000000 		.word	LTDC_FillRGBRect
 2473 0008 00000000 		.word	LTDC_DrawHLine
 2474 000c 00000000 		.word	LTDC_DrawVLine
 2475 0010 00000000 		.word	LTDC_FillRect
 2476 0014 00000000 		.word	LTDC_GetPixel
 2477 0018 00000000 		.word	LTDC_SetPixel
 2478 001c 00000000 		.word	LTDC_GetXSize
 2479 0020 00000000 		.word	LTDC_GetYSize
 2480 0024 00000000 		.word	LTDC_SetLayer
 2481 0028 00000000 		.word	LTDC_GetFormat
 2482              		.section	.text.SCRL_Init,"ax",%progbits
 2483              		.align	1
 2484              		.global	SCRL_Init
 2485              		.syntax unified
 2486              		.thumb
 2487              		.thumb_func
 2489              	SCRL_Init:
 2490              	.LFB862:
 383:Lib/screenl/Src/scrl_lcd.c **** 
 384:Lib/screenl/Src/scrl_lcd.c **** static const LCD_UTILS_Drv_t Dummy_Driver = {
 385:Lib/screenl/Src/scrl_lcd.c ****   .DrawBitmap = LTDC_DrawBitmap,
 386:Lib/screenl/Src/scrl_lcd.c ****   .FillRGBRect = LTDC_FillRGBRect,
 387:Lib/screenl/Src/scrl_lcd.c ****   .DrawHLine = LTDC_DrawHLine,
 388:Lib/screenl/Src/scrl_lcd.c ****   .DrawVLine = LTDC_DrawVLine,
 389:Lib/screenl/Src/scrl_lcd.c ****   .FillRect = LTDC_FillRect,
 390:Lib/screenl/Src/scrl_lcd.c ****   .GetPixel = LTDC_GetPixel,
 391:Lib/screenl/Src/scrl_lcd.c ****   .SetPixel = LTDC_SetPixel,
 392:Lib/screenl/Src/scrl_lcd.c ****   .GetXSize = LTDC_GetXSize,
 393:Lib/screenl/Src/scrl_lcd.c ****   .GetYSize = LTDC_GetYSize,
 394:Lib/screenl/Src/scrl_lcd.c ****   .SetLayer = LTDC_SetLayer,
 395:Lib/screenl/Src/scrl_lcd.c ****   .GetFormat = LTDC_GetFormat,
ARM GAS  /tmp/cclxoO08.s 			page 51


 396:Lib/screenl/Src/scrl_lcd.c **** };
 397:Lib/screenl/Src/scrl_lcd.c **** 
 398:Lib/screenl/Src/scrl_lcd.c **** int SCRL_Init(SCRL_LayerConfig *layers_config[SCRL_LAYER_NB], SCRL_ScreenConfig *screen_config)
 399:Lib/screenl/Src/scrl_lcd.c **** {
 2491              		.loc 1 399 1
 2492              		.cfi_startproc
 2493              		@ args = 0, pretend = 0, frame = 40
 2494              		@ frame_needed = 1, uses_anonymous_args = 0
 2495 0000 80B5     		push	{r7, lr}
 2496              		.cfi_def_cfa_offset 8
 2497              		.cfi_offset 7, -8
 2498              		.cfi_offset 14, -4
 2499 0002 8AB0     		sub	sp, sp, #40
 2500              		.cfi_def_cfa_offset 48
 2501 0004 00AF     		add	r7, sp, #0
 2502              		.cfi_def_cfa_register 7
 2503 0006 7860     		str	r0, [r7, #4]
 2504 0008 3960     		str	r1, [r7]
 400:Lib/screenl/Src/scrl_lcd.c ****   BSP_LCD_LayerConfig_t LayerConfig = {0};
 2505              		.loc 1 400 25
 2506 000a 07F10C03 		add	r3, r7, #12
 2507 000e 0022     		movs	r2, #0
 2508 0010 1A60     		str	r2, [r3]
 2509 0012 5A60     		str	r2, [r3, #4]
 2510 0014 9A60     		str	r2, [r3, #8]
 2511 0016 DA60     		str	r2, [r3, #12]
 2512 0018 1A61     		str	r2, [r3, #16]
 2513 001a 5A61     		str	r2, [r3, #20]
 401:Lib/screenl/Src/scrl_lcd.c ****   int ret;
 402:Lib/screenl/Src/scrl_lcd.c **** 
 403:Lib/screenl/Src/scrl_lcd.c ****   ret = SCRL_validate_parameters(layers_config, screen_config);
 2514              		.loc 1 403 9
 2515 001c 3968     		ldr	r1, [r7]
 2516 001e 7868     		ldr	r0, [r7, #4]
 2517 0020 FFF7FEFF 		bl	SCRL_validate_parameters
 2518 0024 7862     		str	r0, [r7, #36]
 404:Lib/screenl/Src/scrl_lcd.c ****   if (ret)
 2519              		.loc 1 404 6
 2520 0026 7B6A     		ldr	r3, [r7, #36]
 2521 0028 002B     		cmp	r3, #0
 2522 002a 01D0     		beq	.L121
 405:Lib/screenl/Src/scrl_lcd.c ****     return ret;
 2523              		.loc 1 405 12
 2524 002c 7B6A     		ldr	r3, [r7, #36]
 2525 002e 57E0     		b	.L123
 2526              	.L121:
 406:Lib/screenl/Src/scrl_lcd.c **** 
 407:Lib/screenl/Src/scrl_lcd.c ****   current_layer = SCRL_LAYER_0;
 2527              		.loc 1 407 17
 2528 0030 2D4B     		ldr	r3, .L124
 2529 0032 0022     		movs	r2, #0
 2530 0034 1A70     		strb	r2, [r3]
 408:Lib/screenl/Src/scrl_lcd.c **** 
 409:Lib/screenl/Src/scrl_lcd.c ****   BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 2531              		.loc 1 409 3
 2532 0036 0121     		movs	r1, #1
 2533 0038 0020     		movs	r0, #0
ARM GAS  /tmp/cclxoO08.s 			page 52


 2534 003a FFF7FEFF 		bl	BSP_LCD_Init
 410:Lib/screenl/Src/scrl_lcd.c **** 
 411:Lib/screenl/Src/scrl_lcd.c ****   fill_lcd_layer_config_from_scrl_layer_config(layers_config[SCRL_LAYER_0], &LayerConfig);
 2535              		.loc 1 411 3
 2536 003e 7B68     		ldr	r3, [r7, #4]
 2537 0040 1B68     		ldr	r3, [r3]
 2538 0042 07F10C02 		add	r2, r7, #12
 2539 0046 1146     		mov	r1, r2
 2540 0048 1846     		mov	r0, r3
 2541 004a FFF7FEFF 		bl	fill_lcd_layer_config_from_scrl_layer_config
 412:Lib/screenl/Src/scrl_lcd.c ****   is_layer_rgb888[SCRL_LAYER_0] = layers_config[SCRL_LAYER_0]->format == SCRL_RGB888;
 2542              		.loc 1 412 48
 2543 004e 7B68     		ldr	r3, [r7, #4]
 2544 0050 1B68     		ldr	r3, [r3]
 2545              		.loc 1 412 62
 2546 0052 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 2547              		.loc 1 412 71
 2548 0054 042B     		cmp	r3, #4
 2549 0056 0CBF     		ite	eq
 2550 0058 0123     		moveq	r3, #1
 2551 005a 0023     		movne	r3, #0
 2552 005c DBB2     		uxtb	r3, r3
 2553 005e 1A46     		mov	r2, r3
 2554              		.loc 1 412 33
 2555 0060 224B     		ldr	r3, .L124+4
 2556 0062 1A60     		str	r2, [r3]
 413:Lib/screenl/Src/scrl_lcd.c ****   is_layer_argb8888[SCRL_LAYER_0] = layers_config[SCRL_LAYER_0]->format == SCRL_ARGB8888;
 2557              		.loc 1 413 50
 2558 0064 7B68     		ldr	r3, [r7, #4]
 2559 0066 1B68     		ldr	r3, [r3]
 2560              		.loc 1 413 64
 2561 0068 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 2562              		.loc 1 413 73
 2563 006a 032B     		cmp	r3, #3
 2564 006c 0CBF     		ite	eq
 2565 006e 0123     		moveq	r3, #1
 2566 0070 0023     		movne	r3, #0
 2567 0072 DBB2     		uxtb	r3, r3
 2568 0074 1A46     		mov	r2, r3
 2569              		.loc 1 413 35
 2570 0076 1E4B     		ldr	r3, .L124+8
 2571 0078 1A60     		str	r2, [r3]
 414:Lib/screenl/Src/scrl_lcd.c ****   BSP_LCD_ConfigLayer(0, LTDC_LAYER_1, &LayerConfig);
 2572              		.loc 1 414 3
 2573 007a 07F10C03 		add	r3, r7, #12
 2574 007e 1A46     		mov	r2, r3
 2575 0080 0021     		movs	r1, #0
 2576 0082 0020     		movs	r0, #0
 2577 0084 FFF7FEFF 		bl	BSP_LCD_ConfigLayer
 415:Lib/screenl/Src/scrl_lcd.c **** 
 416:Lib/screenl/Src/scrl_lcd.c ****   fill_lcd_layer_config_from_scrl_layer_config(layers_config[SCRL_LAYER_1], &LayerConfig);
 2578              		.loc 1 416 61
 2579 0088 7B68     		ldr	r3, [r7, #4]
 2580 008a 0433     		adds	r3, r3, #4
 2581              		.loc 1 416 3
 2582 008c 1B68     		ldr	r3, [r3]
 2583 008e 07F10C02 		add	r2, r7, #12
ARM GAS  /tmp/cclxoO08.s 			page 53


 2584 0092 1146     		mov	r1, r2
 2585 0094 1846     		mov	r0, r3
 2586 0096 FFF7FEFF 		bl	fill_lcd_layer_config_from_scrl_layer_config
 417:Lib/screenl/Src/scrl_lcd.c ****   is_layer_rgb888[SCRL_LAYER_1] = layers_config[SCRL_LAYER_1]->format == SCRL_RGB888;
 2587              		.loc 1 417 48
 2588 009a 7B68     		ldr	r3, [r7, #4]
 2589 009c 0433     		adds	r3, r3, #4
 2590 009e 1B68     		ldr	r3, [r3]
 2591              		.loc 1 417 62
 2592 00a0 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 2593              		.loc 1 417 71
 2594 00a2 042B     		cmp	r3, #4
 2595 00a4 0CBF     		ite	eq
 2596 00a6 0123     		moveq	r3, #1
 2597 00a8 0023     		movne	r3, #0
 2598 00aa DBB2     		uxtb	r3, r3
 2599 00ac 1A46     		mov	r2, r3
 2600              		.loc 1 417 33
 2601 00ae 0F4B     		ldr	r3, .L124+4
 2602 00b0 5A60     		str	r2, [r3, #4]
 418:Lib/screenl/Src/scrl_lcd.c ****   is_layer_argb8888[SCRL_LAYER_1] = layers_config[SCRL_LAYER_1]->format == SCRL_ARGB8888;
 2603              		.loc 1 418 50
 2604 00b2 7B68     		ldr	r3, [r7, #4]
 2605 00b4 0433     		adds	r3, r3, #4
 2606 00b6 1B68     		ldr	r3, [r3]
 2607              		.loc 1 418 64
 2608 00b8 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 2609              		.loc 1 418 73
 2610 00ba 032B     		cmp	r3, #3
 2611 00bc 0CBF     		ite	eq
 2612 00be 0123     		moveq	r3, #1
 2613 00c0 0023     		movne	r3, #0
 2614 00c2 DBB2     		uxtb	r3, r3
 2615 00c4 1A46     		mov	r2, r3
 2616              		.loc 1 418 35
 2617 00c6 0A4B     		ldr	r3, .L124+8
 2618 00c8 5A60     		str	r2, [r3, #4]
 419:Lib/screenl/Src/scrl_lcd.c ****   BSP_LCD_ConfigLayer(0, LTDC_LAYER_2, &LayerConfig);
 2619              		.loc 1 419 3
 2620 00ca 07F10C03 		add	r3, r7, #12
 2621 00ce 1A46     		mov	r2, r3
 2622 00d0 0121     		movs	r1, #1
 2623 00d2 0020     		movs	r0, #0
 2624 00d4 FFF7FEFF 		bl	BSP_LCD_ConfigLayer
 420:Lib/screenl/Src/scrl_lcd.c **** 
 421:Lib/screenl/Src/scrl_lcd.c ****   UTIL_LCD_SetFuncDriver(&Dummy_Driver);
 2625              		.loc 1 421 3
 2626 00d8 0648     		ldr	r0, .L124+12
 2627 00da FFF7FEFF 		bl	UTIL_LCD_SetFuncDriver
 422:Lib/screenl/Src/scrl_lcd.c **** 
 423:Lib/screenl/Src/scrl_lcd.c ****   return 0;
 2628              		.loc 1 423 10
 2629 00de 0023     		movs	r3, #0
 2630              	.L123:
 424:Lib/screenl/Src/scrl_lcd.c **** }
 2631              		.loc 1 424 1
 2632 00e0 1846     		mov	r0, r3
ARM GAS  /tmp/cclxoO08.s 			page 54


 2633 00e2 2837     		adds	r7, r7, #40
 2634              		.cfi_def_cfa_offset 8
 2635 00e4 BD46     		mov	sp, r7
 2636              		.cfi_def_cfa_register 13
 2637              		@ sp needed
 2638 00e6 80BD     		pop	{r7, pc}
 2639              	.L125:
 2640              		.align	2
 2641              	.L124:
 2642 00e8 00000000 		.word	current_layer
 2643 00ec 00000000 		.word	is_layer_rgb888
 2644 00f0 00000000 		.word	is_layer_argb8888
 2645 00f4 00000000 		.word	Dummy_Driver
 2646              		.cfi_endproc
 2647              	.LFE862:
 2649              		.section	.text.SCRL_SetAddress_NoReload,"ax",%progbits
 2650              		.align	1
 2651              		.global	SCRL_SetAddress_NoReload
 2652              		.syntax unified
 2653              		.thumb
 2654              		.thumb_func
 2656              	SCRL_SetAddress_NoReload:
 2657              	.LFB863:
 425:Lib/screenl/Src/scrl_lcd.c **** 
 426:Lib/screenl/Src/scrl_lcd.c **** int SCRL_SetAddress_NoReload(void *address, SCRL_Layer layer)
 427:Lib/screenl/Src/scrl_lcd.c **** {
 2658              		.loc 1 427 1
 2659              		.cfi_startproc
 2660              		@ args = 0, pretend = 0, frame = 8
 2661              		@ frame_needed = 1, uses_anonymous_args = 0
 2662 0000 80B5     		push	{r7, lr}
 2663              		.cfi_def_cfa_offset 8
 2664              		.cfi_offset 7, -8
 2665              		.cfi_offset 14, -4
 2666 0002 82B0     		sub	sp, sp, #8
 2667              		.cfi_def_cfa_offset 16
 2668 0004 00AF     		add	r7, sp, #0
 2669              		.cfi_def_cfa_register 7
 2670 0006 7860     		str	r0, [r7, #4]
 2671 0008 0B46     		mov	r3, r1
 2672 000a FB70     		strb	r3, [r7, #3]
 428:Lib/screenl/Src/scrl_lcd.c ****   return HAL_LTDC_SetAddress_NoReload(&hlcd_ltdc, (uint32_t) address, layer);
 2673              		.loc 1 428 10
 2674 000c 7B68     		ldr	r3, [r7, #4]
 2675 000e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2676 0010 1946     		mov	r1, r3
 2677 0012 0448     		ldr	r0, .L128
 2678 0014 FFF7FEFF 		bl	HAL_LTDC_SetAddress_NoReload
 2679 0018 0346     		mov	r3, r0
 429:Lib/screenl/Src/scrl_lcd.c **** }
 2680              		.loc 1 429 1
 2681 001a 1846     		mov	r0, r3
 2682 001c 0837     		adds	r7, r7, #8
 2683              		.cfi_def_cfa_offset 8
 2684 001e BD46     		mov	sp, r7
 2685              		.cfi_def_cfa_register 13
 2686              		@ sp needed
ARM GAS  /tmp/cclxoO08.s 			page 55


 2687 0020 80BD     		pop	{r7, pc}
 2688              	.L129:
 2689 0022 00BF     		.align	2
 2690              	.L128:
 2691 0024 00000000 		.word	hlcd_ltdc
 2692              		.cfi_endproc
 2693              	.LFE863:
 2695              		.section	.text.SCRL_ReloadLayer,"ax",%progbits
 2696              		.align	1
 2697              		.global	SCRL_ReloadLayer
 2698              		.syntax unified
 2699              		.thumb
 2700              		.thumb_func
 2702              	SCRL_ReloadLayer:
 2703              	.LFB864:
 430:Lib/screenl/Src/scrl_lcd.c **** 
 431:Lib/screenl/Src/scrl_lcd.c **** int SCRL_ReloadLayer(SCRL_Layer layer)
 432:Lib/screenl/Src/scrl_lcd.c **** {
 2704              		.loc 1 432 1
 2705              		.cfi_startproc
 2706              		@ args = 0, pretend = 0, frame = 8
 2707              		@ frame_needed = 1, uses_anonymous_args = 0
 2708 0000 80B5     		push	{r7, lr}
 2709              		.cfi_def_cfa_offset 8
 2710              		.cfi_offset 7, -8
 2711              		.cfi_offset 14, -4
 2712 0002 82B0     		sub	sp, sp, #8
 2713              		.cfi_def_cfa_offset 16
 2714 0004 00AF     		add	r7, sp, #0
 2715              		.cfi_def_cfa_register 7
 2716 0006 0346     		mov	r3, r0
 2717 0008 FB71     		strb	r3, [r7, #7]
 433:Lib/screenl/Src/scrl_lcd.c ****   return HAL_LTDC_ReloadLayer(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING, layer);
 2718              		.loc 1 433 10
 2719 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2720 000c 1A46     		mov	r2, r3
 2721 000e 0221     		movs	r1, #2
 2722 0010 0348     		ldr	r0, .L132
 2723 0012 FFF7FEFF 		bl	HAL_LTDC_ReloadLayer
 2724 0016 0346     		mov	r3, r0
 434:Lib/screenl/Src/scrl_lcd.c **** }
 2725              		.loc 1 434 1
 2726 0018 1846     		mov	r0, r3
 2727 001a 0837     		adds	r7, r7, #8
 2728              		.cfi_def_cfa_offset 8
 2729 001c BD46     		mov	sp, r7
 2730              		.cfi_def_cfa_register 13
 2731              		@ sp needed
 2732 001e 80BD     		pop	{r7, pc}
 2733              	.L133:
 2734              		.align	2
 2735              	.L132:
 2736 0020 00000000 		.word	hlcd_ltdc
 2737              		.cfi_endproc
 2738              	.LFE864:
 2740              		.section	.text.SRCL_Update,"ax",%progbits
 2741              		.align	1
ARM GAS  /tmp/cclxoO08.s 			page 56


 2742              		.global	SRCL_Update
 2743              		.syntax unified
 2744              		.thumb
 2745              		.thumb_func
 2747              	SRCL_Update:
 2748              	.LFB865:
 435:Lib/screenl/Src/scrl_lcd.c **** 
 436:Lib/screenl/Src/scrl_lcd.c **** int SRCL_Update(void)
 437:Lib/screenl/Src/scrl_lcd.c **** {
 2749              		.loc 1 437 1
 2750              		.cfi_startproc
 2751              		@ args = 0, pretend = 0, frame = 0
 2752              		@ frame_needed = 1, uses_anonymous_args = 0
 2753              		@ link register save eliminated.
 2754 0000 80B4     		push	{r7}
 2755              		.cfi_def_cfa_offset 4
 2756              		.cfi_offset 7, -4
 2757 0002 00AF     		add	r7, sp, #0
 2758              		.cfi_def_cfa_register 7
 438:Lib/screenl/Src/scrl_lcd.c ****   /* Nothing to do */
 439:Lib/screenl/Src/scrl_lcd.c ****   return 0;
 2759              		.loc 1 439 10
 2760 0004 0023     		movs	r3, #0
 440:Lib/screenl/Src/scrl_lcd.c **** }
 2761              		.loc 1 440 1
 2762 0006 1846     		mov	r0, r3
 2763 0008 BD46     		mov	sp, r7
 2764              		.cfi_def_cfa_register 13
 2765              		@ sp needed
 2766 000a 5DF8047B 		ldr	r7, [sp], #4
 2767              		.cfi_restore 7
 2768              		.cfi_def_cfa_offset 0
 2769 000e 7047     		bx	lr
 2770              		.cfi_endproc
 2771              	.LFE865:
 2773              		.section	.rodata
 2774 001f 00       		.align	2
 2775              	.LC2:
 2776 0020 4C617965 		.ascii	"LayerIndex < SCRL_LAYER_NB\000"
 2776      72496E64 
 2776      6578203C 
 2776      20534352 
 2776      4C5F4C41 
 2777              		.section	.text.MX_LTDC_ConfigLayer,"ax",%progbits
 2778              		.align	1
 2779              		.global	MX_LTDC_ConfigLayer
 2780              		.syntax unified
 2781              		.thumb
 2782              		.thumb_func
 2784              	MX_LTDC_ConfigLayer:
 2785              	.LFB866:
 441:Lib/screenl/Src/scrl_lcd.c **** 
 442:Lib/screenl/Src/scrl_lcd.c **** HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_Layer
 443:Lib/screenl/Src/scrl_lcd.c **** {
 2786              		.loc 1 443 1
 2787              		.cfi_startproc
 2788              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/cclxoO08.s 			page 57


 2789              		@ frame_needed = 1, uses_anonymous_args = 0
 2790 0000 80B5     		push	{r7, lr}
 2791              		.cfi_def_cfa_offset 8
 2792              		.cfi_offset 7, -8
 2793              		.cfi_offset 14, -4
 2794 0002 84B0     		sub	sp, sp, #16
 2795              		.cfi_def_cfa_offset 24
 2796 0004 00AF     		add	r7, sp, #0
 2797              		.cfi_def_cfa_register 7
 2798 0006 F860     		str	r0, [r7, #12]
 2799 0008 B960     		str	r1, [r7, #8]
 2800 000a 7A60     		str	r2, [r7, #4]
 444:Lib/screenl/Src/scrl_lcd.c ****   assert(LayerIndex < SCRL_LAYER_NB);
 2801              		.loc 1 444 3
 2802 000c BB68     		ldr	r3, [r7, #8]
 2803 000e 012B     		cmp	r3, #1
 2804 0010 06D9     		bls	.L137
 2805              		.loc 1 444 3 is_stmt 0 discriminator 1
 2806 0012 154B     		ldr	r3, .L141
 2807 0014 154A     		ldr	r2, .L141+4
 2808 0016 4FF4DE71 		mov	r1, #444
 2809 001a 1548     		ldr	r0, .L141+8
 2810 001c FFF7FEFF 		bl	__assert_func
 2811              	.L137:
 445:Lib/screenl/Src/scrl_lcd.c **** 
 446:Lib/screenl/Src/scrl_lcd.c ****   if (is_layer_rgb888[LayerIndex])
 2812              		.loc 1 446 22 is_stmt 1
 2813 0020 144A     		ldr	r2, .L141+12
 2814 0022 BB68     		ldr	r3, [r7, #8]
 2815 0024 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2816              		.loc 1 446 6
 2817 0028 002B     		cmp	r3, #0
 2818 002a 06D0     		beq	.L138
 447:Lib/screenl/Src/scrl_lcd.c ****     return SCRL_ConfigLayer_Layer_rgb888(hltdc, LayerIndex, Config);
 2819              		.loc 1 447 12
 2820 002c 7A68     		ldr	r2, [r7, #4]
 2821 002e B968     		ldr	r1, [r7, #8]
 2822 0030 F868     		ldr	r0, [r7, #12]
 2823 0032 FFF7FEFF 		bl	SCRL_ConfigLayer_Layer_rgb888
 2824 0036 0346     		mov	r3, r0
 2825 0038 12E0     		b	.L139
 2826              	.L138:
 448:Lib/screenl/Src/scrl_lcd.c ****   else if (is_layer_argb8888[LayerIndex])
 2827              		.loc 1 448 29
 2828 003a 0F4A     		ldr	r2, .L141+16
 2829 003c BB68     		ldr	r3, [r7, #8]
 2830 003e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2831              		.loc 1 448 11
 2832 0042 002B     		cmp	r3, #0
 2833 0044 06D0     		beq	.L140
 449:Lib/screenl/Src/scrl_lcd.c ****     return SCRL_ConfigLayer_Layer_argb888(hltdc, LayerIndex, Config);
 2834              		.loc 1 449 12
 2835 0046 7A68     		ldr	r2, [r7, #4]
 2836 0048 B968     		ldr	r1, [r7, #8]
 2837 004a F868     		ldr	r0, [r7, #12]
 2838 004c FFF7FEFF 		bl	SCRL_ConfigLayer_Layer_argb888
 2839 0050 0346     		mov	r3, r0
ARM GAS  /tmp/cclxoO08.s 			page 58


 2840 0052 05E0     		b	.L139
 2841              	.L140:
 450:Lib/screenl/Src/scrl_lcd.c ****   else
 451:Lib/screenl/Src/scrl_lcd.c ****     return SCRL_ConfigLayer_Layer_default(hltdc, LayerIndex, Config);
 2842              		.loc 1 451 12
 2843 0054 7A68     		ldr	r2, [r7, #4]
 2844 0056 B968     		ldr	r1, [r7, #8]
 2845 0058 F868     		ldr	r0, [r7, #12]
 2846 005a FFF7FEFF 		bl	SCRL_ConfigLayer_Layer_default
 2847 005e 0346     		mov	r3, r0
 2848              	.L139:
 452:Lib/screenl/Src/scrl_lcd.c **** }
 2849              		.loc 1 452 1
 2850 0060 1846     		mov	r0, r3
 2851 0062 1037     		adds	r7, r7, #16
 2852              		.cfi_def_cfa_offset 8
 2853 0064 BD46     		mov	sp, r7
 2854              		.cfi_def_cfa_register 13
 2855              		@ sp needed
 2856 0066 80BD     		pop	{r7, pc}
 2857              	.L142:
 2858              		.align	2
 2859              	.L141:
 2860 0068 20000000 		.word	.LC2
 2861 006c 00000000 		.word	__func__.0
 2862 0070 04000000 		.word	.LC1
 2863 0074 00000000 		.word	is_layer_rgb888
 2864 0078 00000000 		.word	is_layer_argb8888
 2865              		.cfi_endproc
 2866              	.LFE866:
 2868              		.section	.rodata.__func__.1,"a"
 2869              		.align	2
 2872              	__func__.1:
 2873 0000 70697865 		.ascii	"pixel_format_from_scrl_format\000"
 2873      6C5F666F 
 2873      726D6174 
 2873      5F66726F 
 2873      6D5F7363 
 2874              		.section	.rodata.__func__.0,"a"
 2875              		.align	2
 2878              	__func__.0:
 2879 0000 4D585F4C 		.ascii	"MX_LTDC_ConfigLayer\000"
 2879      5444435F 
 2879      436F6E66 
 2879      69674C61 
 2879      79657200 
 2880              		.text
 2881              	.Letext0:
 2882              		.file 2 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 2883              		.file 3 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 2884              		.file 4 "Lib/screenl/Inc/scrl.h"
 2885              		.file 5 "STM32Cube_FW_N6/Drivers/CMSIS/Device/ST/STM32N6xx/Include/stm32n657xx.h"
 2886              		.file 6 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_def.h"
 2887              		.file 7 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_ltdc.h"
 2888              		.file 8 "STM32Cube_FW_N6/Drivers/BSP/Components/Common/lcd.h"
 2889              		.file 9 "STM32Cube_FW_N6/Drivers/BSP/STM32N6570-DK/stm32n6570_discovery_lcd.h"
 2890              		.file 10 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-
ARM GAS  /tmp/cclxoO08.s 			page 59


 2891              		.file 11 "STM32Cube_FW_N6/Utilities/lcd/stm32_lcd.h"
ARM GAS  /tmp/cclxoO08.s 			page 60


DEFINED SYMBOLS
                            *ABS*:00000000 scrl_lcd.c
     /tmp/cclxoO08.s:28     .bss.current_layer:00000000 current_layer
     /tmp/cclxoO08.s:29     .bss.current_layer:00000000 $d
     /tmp/cclxoO08.s:31     .bss.is_layer_rgb888:00000000 $d
     /tmp/cclxoO08.s:34     .bss.is_layer_rgb888:00000000 is_layer_rgb888
     /tmp/cclxoO08.s:37     .bss.is_layer_argb8888:00000000 $d
     /tmp/cclxoO08.s:40     .bss.is_layer_argb8888:00000000 is_layer_argb8888
     /tmp/cclxoO08.s:43     .text.SCRL_ConfigLayer_Layer_default:00000000 $t
     /tmp/cclxoO08.s:48     .text.SCRL_ConfigLayer_Layer_default:00000000 SCRL_ConfigLayer_Layer_default
     /tmp/cclxoO08.s:161    .text.SCRL_ConfigLayer_Layer_rgb888:00000000 $t
     /tmp/cclxoO08.s:166    .text.SCRL_ConfigLayer_Layer_rgb888:00000000 SCRL_ConfigLayer_Layer_rgb888
     /tmp/cclxoO08.s:301    .text.SCRL_ConfigLayer_Layer_argb888:00000000 $t
     /tmp/cclxoO08.s:306    .text.SCRL_ConfigLayer_Layer_argb888:00000000 SCRL_ConfigLayer_Layer_argb888
     /tmp/cclxoO08.s:441    .rodata:00000000 $d
     /tmp/cclxoO08.s:448    .text.pixel_format_from_scrl_format:00000000 $t
     /tmp/cclxoO08.s:453    .text.pixel_format_from_scrl_format:00000000 pixel_format_from_scrl_format
     /tmp/cclxoO08.s:480    .text.pixel_format_from_scrl_format:0000001c $d
     /tmp/cclxoO08.s:486    .text.pixel_format_from_scrl_format:00000034 $t
     /tmp/cclxoO08.s:538    .text.pixel_format_from_scrl_format:00000068 $d
     /tmp/cclxoO08.s:2872   .rodata.__func__.1:00000000 __func__.1
     /tmp/cclxoO08.s:545    .text.fill_lcd_layer_config_from_scrl_layer_config:00000000 $t
     /tmp/cclxoO08.s:550    .text.fill_lcd_layer_config_from_scrl_layer_config:00000000 fill_lcd_layer_config_from_scrl_layer_config
     /tmp/cclxoO08.s:631    .text.SCRL_validate_parameters:00000000 $t
     /tmp/cclxoO08.s:636    .text.SCRL_validate_parameters:00000000 SCRL_validate_parameters
     /tmp/cclxoO08.s:758    .text.LTDC_FillRGBRectRgb888:00000000 $t
     /tmp/cclxoO08.s:763    .text.LTDC_FillRGBRectRgb888:00000000 LTDC_FillRGBRectRgb888
     /tmp/cclxoO08.s:924    .text.LTDC_FillRGBRectRgb888:000000d8 $d
     /tmp/cclxoO08.s:930    .text.LTDC_FillRGBRectArgb8888:00000000 $t
     /tmp/cclxoO08.s:935    .text.LTDC_FillRGBRectArgb8888:00000000 LTDC_FillRGBRectArgb8888
     /tmp/cclxoO08.s:1103   .text.LTDC_FillRGBRectArgb8888:000000dc $d
     /tmp/cclxoO08.s:1109   .text.LTDC_FillRectRgb888:00000000 $t
     /tmp/cclxoO08.s:1114   .text.LTDC_FillRectRgb888:00000000 LTDC_FillRectRgb888
     /tmp/cclxoO08.s:1277   .text.LTDC_FillRectRgb888:000000dc $d
     /tmp/cclxoO08.s:1283   .text.LTDC_FillRectArgb8888:00000000 $t
     /tmp/cclxoO08.s:1288   .text.LTDC_FillRectArgb8888:00000000 LTDC_FillRectArgb8888
     /tmp/cclxoO08.s:1451   .text.LTDC_FillRectArgb8888:000000d4 $d
     /tmp/cclxoO08.s:1457   .text.LTDC_DrawHLineRgb888:00000000 $t
     /tmp/cclxoO08.s:1462   .text.LTDC_DrawHLineRgb888:00000000 LTDC_DrawHLineRgb888
     /tmp/cclxoO08.s:1503   .text.LTDC_DrawHLineArgb8888:00000000 $t
     /tmp/cclxoO08.s:1508   .text.LTDC_DrawHLineArgb8888:00000000 LTDC_DrawHLineArgb8888
     /tmp/cclxoO08.s:1549   .text.LTDC_DrawVLineRgb888:00000000 $t
     /tmp/cclxoO08.s:1554   .text.LTDC_DrawVLineRgb888:00000000 LTDC_DrawVLineRgb888
     /tmp/cclxoO08.s:1595   .text.LTDC_DrawVLineArgb8888:00000000 $t
     /tmp/cclxoO08.s:1600   .text.LTDC_DrawVLineArgb8888:00000000 LTDC_DrawVLineArgb8888
     /tmp/cclxoO08.s:1641   .text.LTDC_SetPixelRgb888:00000000 $t
     /tmp/cclxoO08.s:1646   .text.LTDC_SetPixelRgb888:00000000 LTDC_SetPixelRgb888
     /tmp/cclxoO08.s:1687   .text.LTDC_SetPixelArgb8888:00000000 $t
     /tmp/cclxoO08.s:1692   .text.LTDC_SetPixelArgb8888:00000000 LTDC_SetPixelArgb8888
     /tmp/cclxoO08.s:1733   .text.LTDC_DrawBitmap:00000000 $t
     /tmp/cclxoO08.s:1738   .text.LTDC_DrawBitmap:00000000 LTDC_DrawBitmap
     /tmp/cclxoO08.s:1775   .text.LTDC_FillRGBRect:00000000 $t
     /tmp/cclxoO08.s:1780   .text.LTDC_FillRGBRect:00000000 LTDC_FillRGBRect
     /tmp/cclxoO08.s:1865   .text.LTDC_FillRGBRect:0000007c $d
     /tmp/cclxoO08.s:1872   .text.LTDC_DrawHLine:00000000 $t
     /tmp/cclxoO08.s:1877   .text.LTDC_DrawHLine:00000000 LTDC_DrawHLine
     /tmp/cclxoO08.s:1956   .text.LTDC_DrawHLine:00000070 $d
ARM GAS  /tmp/cclxoO08.s 			page 61


     /tmp/cclxoO08.s:1963   .text.LTDC_DrawVLine:00000000 $t
     /tmp/cclxoO08.s:1968   .text.LTDC_DrawVLine:00000000 LTDC_DrawVLine
     /tmp/cclxoO08.s:2047   .text.LTDC_DrawVLine:00000070 $d
     /tmp/cclxoO08.s:2054   .text.LTDC_FillRect:00000000 $t
     /tmp/cclxoO08.s:2059   .text.LTDC_FillRect:00000000 LTDC_FillRect
     /tmp/cclxoO08.s:2144   .text.LTDC_FillRect:0000007c $d
     /tmp/cclxoO08.s:2151   .text.LTDC_GetPixel:00000000 $t
     /tmp/cclxoO08.s:2156   .text.LTDC_GetPixel:00000000 LTDC_GetPixel
     /tmp/cclxoO08.s:2193   .text.LTDC_SetPixel:00000000 $t
     /tmp/cclxoO08.s:2198   .text.LTDC_SetPixel:00000000 LTDC_SetPixel
     /tmp/cclxoO08.s:2271   .text.LTDC_SetPixel:00000064 $d
     /tmp/cclxoO08.s:2278   .text.LTDC_GetXSize:00000000 $t
     /tmp/cclxoO08.s:2283   .text.LTDC_GetXSize:00000000 LTDC_GetXSize
     /tmp/cclxoO08.s:2316   .text.LTDC_GetYSize:00000000 $t
     /tmp/cclxoO08.s:2321   .text.LTDC_GetYSize:00000000 LTDC_GetYSize
     /tmp/cclxoO08.s:2354   .text.LTDC_SetLayer:00000000 $t
     /tmp/cclxoO08.s:2359   .text.LTDC_SetLayer:00000000 LTDC_SetLayer
     /tmp/cclxoO08.s:2422   .text.LTDC_SetLayer:00000050 $d
     /tmp/cclxoO08.s:2429   .text.LTDC_GetFormat:00000000 $t
     /tmp/cclxoO08.s:2434   .text.LTDC_GetFormat:00000000 LTDC_GetFormat
     /tmp/cclxoO08.s:2467   .rodata.Dummy_Driver:00000000 $d
     /tmp/cclxoO08.s:2470   .rodata.Dummy_Driver:00000000 Dummy_Driver
     /tmp/cclxoO08.s:2483   .text.SCRL_Init:00000000 $t
     /tmp/cclxoO08.s:2489   .text.SCRL_Init:00000000 SCRL_Init
     /tmp/cclxoO08.s:2642   .text.SCRL_Init:000000e8 $d
     /tmp/cclxoO08.s:2650   .text.SCRL_SetAddress_NoReload:00000000 $t
     /tmp/cclxoO08.s:2656   .text.SCRL_SetAddress_NoReload:00000000 SCRL_SetAddress_NoReload
     /tmp/cclxoO08.s:2691   .text.SCRL_SetAddress_NoReload:00000024 $d
     /tmp/cclxoO08.s:2696   .text.SCRL_ReloadLayer:00000000 $t
     /tmp/cclxoO08.s:2702   .text.SCRL_ReloadLayer:00000000 SCRL_ReloadLayer
     /tmp/cclxoO08.s:2736   .text.SCRL_ReloadLayer:00000020 $d
     /tmp/cclxoO08.s:2741   .text.SRCL_Update:00000000 $t
     /tmp/cclxoO08.s:2747   .text.SRCL_Update:00000000 SRCL_Update
     /tmp/cclxoO08.s:2778   .text.MX_LTDC_ConfigLayer:00000000 $t
     /tmp/cclxoO08.s:2784   .text.MX_LTDC_ConfigLayer:00000000 MX_LTDC_ConfigLayer
     /tmp/cclxoO08.s:2860   .text.MX_LTDC_ConfigLayer:00000068 $d
     /tmp/cclxoO08.s:2878   .rodata.__func__.0:00000000 __func__.0
     /tmp/cclxoO08.s:2869   .rodata.__func__.1:00000000 $d
     /tmp/cclxoO08.s:2875   .rodata.__func__.0:00000000 $d
                           .group:00000000 wm4.0.2a10773746a5c5ebb5552f50e466f80b
                           .group:00000000 wm4._newlib_version.h.4.411db44ea2338a62eca2f0777f81481b
                           .group:00000000 wm4.features.h.33.e0c9f337c65cb9f22ed5f23d082bc78b
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.newlib.h.7.591ac1bd65c1f5b34864757667a05252
                           .group:00000000 wm4.ieeefp.h.77.bd5feb87d9990dd328793ced294f6a87
                           .group:00000000 wm4.config.h.224.10ee1ad185d877c6e334e6581faab44d
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.assert.h.11.db24e541f16414db224bf986d21017e2
                           .group:00000000 wm4.stm32n6xx_hal_conf.h.21.004a06df6e15ac197e03f723792da58a
                           .group:00000000 wm4.stddef.h.39.0dc9006b34572d4d9cae4c8b422c4971
                           .group:00000000 wm4.arm_cmse.h.103.a0d15a79c4c9a67da8d5831704d7248e
                           .group:00000000 wm4.stm32n6xx.h.34.80585dd08aa426c932f6311fdb7386da
                           .group:00000000 wm4.stm32n657xx.h.26.acd272cb67318cc1a4791ce2f0720ca6
                           .group:00000000 wm4.cmsis_version.h.32.0ac195c83bb4537824e6ad1c47474b79
ARM GAS  /tmp/cclxoO08.s 			page 62


                           .group:00000000 wm4.core_cm55.h.68.832d5cf835639cc0d28219c3d2867330
                           .group:00000000 wm4.cmsis_gcc.h.26.7a5fd1a99dbedde687044a4433ab3e15
                           .group:00000000 wm4.core_cm55.h.196.52e437a270752da561676e507b35baeb
                           .group:00000000 wm4.mpu_armv8.h.32.9d72426c8e2b47753456dcb84802c5b3
                           .group:00000000 wm4.pmu_armv8.h.32.eaa95f88a71b29390b135fd81c071b6b
                           .group:00000000 wm4.core_cm55.h.4411.860dad8650880893dd57b815844f7186
                           .group:00000000 wm4.cachel1_armv7.h.32.abd77761a989e008b0c60891114a33c7
                           .group:00000000 wm4.stm32n657xx.h.575.1c2a5e6bedffc6f9083dcc857bc6d09d
                           .group:00000000 wm4.stm32n6xx.h.114.5cf793d8af485e14f110e3e24bde1aa5
                           .group:00000000 wm4.stm32_hal_legacy.h.22.87fb12bf5a1a1e00fc134f22bc9aa8c4
                           .group:00000000 wm4.cdefs.h.49.70fc7af612f78ddcace70fdd90b5623b
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.158.6f8e08a347b1cff664332fa350bfceb3
                           .group:00000000 wm4._types.h.127.3bdfe3ff8ea2d0985b03d9cbe93480e3
                           .group:00000000 wm4.reent.h.18.25503cdc8b7e55dd0d6ea7b3e5af7a03
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.78.6b87466b04591b1f1cb88c14fdf2ba9e
                           .group:00000000 wm4.math.h.13.47cfc34cae8a1153323939c4d32cf7c2
                           .group:00000000 wm4.stm32n6xx_hal_def.h.63.3a8f01490e8852464e9fcb69092e9c75
                           .group:00000000 wm4.stm32n6xx_ll_bus.h.38.2366a295ee4cdb04833997d3787fcd2d
                           .group:00000000 wm4.stm32n6xx_ll_rcc.h.21.002e22a16fd7f67dde6dce41e8ba9620
                           .group:00000000 wm4.stm32n6xx_hal_rcc.h.194.1cb1283e40f9bebcd3fba2a9a961838e
                           .group:00000000 wm4.stm32n6xx_hal_rcc_ex.h.21.79aa32178dfef625fbd20d362449acfa
                           .group:00000000 wm4.stm32n6xx_hal_rcc.h.4359.3f0b7ad33826d95438602c9aebc08af9
                           .group:00000000 wm4.stm32n6xx_hal_gpio.h.21.89d54af663b98eb8fc098192053f7eeb
                           .group:00000000 wm4.stm32n6xx_hal_gpio_ex.h.22.4acb2e3511a98bb48b81cfc8e09fd59e
                           .group:00000000 wm4.stm32n6xx_hal_rif.h.21.424d0bafb874a777dee3742a22e13037
                           .group:00000000 wm4.stm32n6xx_hal_dma.h.21.61e48c5c2e8d25d22177834b232fe45c
                           .group:00000000 wm4.stm32n6xx_hal_dma_ex.h.21.66e597beb090a165329d6ccf665e41bc
                           .group:00000000 wm4.stm32n6xx_hal_dma.h.1020.87e2180c009560b617c1f8208140c950
                           .group:00000000 wm4.stm32n6xx_hal_cortex.h.21.f493623cc58f9454ab4eae41e395c5cc
                           .group:00000000 wm4.stm32n6xx_hal_bsec.h.21.61b309e67dd810e28897a01b1b21a97f
                           .group:00000000 wm4.stm32n6xx_hal_dcmipp.h.21.f538bfd785c6469670251ac9bc7af55d
                           .group:00000000 wm4.stm32n6xx_hal_dma2d.h.21.75c8d46cdbb72970123b3f34ae2043d7
                           .group:00000000 wm4.stm32n6xx_hal_exti.h.21.fda87e715ea6b98239ec30171d1df594
                           .group:00000000 wm4.stm32n6xx_hal_gfxmmu.h.21.9784a9103143d48bd3c37389d0e0b8e6
                           .group:00000000 wm4.stm32n6xx_hal_i2c.h.21.3f483626ff64c5bf027265bb2e1d1331
                           .group:00000000 wm4.stm32n6xx_hal_i2c_ex.h.21.79e9196c22282cdaf6b4047893638c45
                           .group:00000000 wm4.stm32n6xx_hal_i2c.h.741.1084702632703acc669e4282b3043372
                           .group:00000000 wm4.stm32n6xx_hal_icache.h.21.194b4ec6e76f32b14f65c85616854850
                           .group:00000000 wm4.stm32n6xx_hal_ltdc.h.21.ae1eb09930e7e550e48e418ac5849e4d
                           .group:00000000 wm4.stm32n6xx_hal_ltdc.h.1002.b13ede7fc94ed5ad1c6768a157d2149a
                           .group:00000000 wm4.stm32n6xx_ll_usb.h.21.d518a5d97876c2ff49040c20a2c4a120
                           .group:00000000 wm4.stm32n6xx_hal_pcd.h.155.27040aac6844effe2af8c180caf1dd2e
                           .group:00000000 wm4.stm32n6xx_hal_pwr.h.21.cdb73e4869c3fed3fc84f901ec0e5f0a
                           .group:00000000 wm4.stm32n6xx_hal_pwr_ex.h.21.1a673224a58b0c1e5fad8eeda6514208
                           .group:00000000 wm4.stm32n6xx_hal_ramcfg.h.21.a62dfbb4d2c14e9a8c634a215e37bd3d
                           .group:00000000 wm4.stm32n6xx_hal_spi.h.21.9f810303326e2d91749800e9911f8e4d
                           .group:00000000 wm4.stm32n6xx_hal_spi.h.906.93ec0695066db4253cdbcb7d84358a0b
                           .group:00000000 wm4.stm32n6xx_hal_tim.h.21.839dd2b2a70382fb2c44f8f293a84d5f
                           .group:00000000 wm4.stm32n6xx_hal_tim_ex.h.21.e372d5ac63c13441211ea4ecbd353150
                           .group:00000000 wm4.stm32n6xx_hal_uart.h.21.230f549bfa0d5ebfd77bfb311b2aca15
                           .group:00000000 wm4.stm32n6xx_hal_uart_ex.h.21.a0d5511e1d0703b7b5278c8f5472b96d
                           .group:00000000 wm4.stm32n6xx_hal_xspi.h.21.e17898be2073b6b6b19faf30b4e304e9
                           .group:00000000 wm4.stm32n6xx_hal_cacheaxi.h.21.7c3375b7903ec42376e4883320997f74
                           .group:00000000 wm4.stm32n6xx_hal_gpu2d.h.21.48d0249122abad294a630c39cc4ebaed
                           .group:00000000 wm4.stm32n6xx_hal.h.81.5e59143eba07faca3e9aeaa5470826c8
ARM GAS  /tmp/cclxoO08.s 			page 63


                           .group:00000000 wm4.stm32n6570_discovery_conf.h.30.6a134136ef3ab5cd3294c32587074c68
                           .group:00000000 wm4.stm32n6570_discovery_errno.h.22.80e523b09444a11ebe4b6e24ae914f0e
                           .group:00000000 wm4.rk050hr18.h.22.144f33c0bcd7d0505e68bc8528efe870
                           .group:00000000 wm4.lcd.h.21.98701c105e66fef2e089854e5bc0fe32
                           .group:00000000 wm4.stm32n6570_discovery_lcd.h.57.e266983512ca4d9da59336b85522ef19
                           .group:00000000 wm4.stm32_lcd.h.55.1a04e503950bf34ef3721d2ebb9542fc

UNDEFINED SYMBOLS
memset
HAL_LTDC_ConfigLayer
HAL_LTDC_ConfigLayerFlexARGB
__assert_func
Lcd_Ctx
hlcd_ltdc
BSP_LCD_DrawBitmap
BSP_LCD_FillRGBRect
BSP_LCD_DrawHLine
BSP_LCD_DrawVLine
BSP_LCD_FillRect
BSP_LCD_ReadPixel
BSP_LCD_WritePixel
BSP_LCD_GetXSize
BSP_LCD_GetYSize
BSP_LCD_SetActiveLayer
BSP_LCD_GetPixelFormat
BSP_LCD_Init
BSP_LCD_ConfigLayer
UTIL_LCD_SetFuncDriver
HAL_LTDC_SetAddress_NoReload
HAL_LTDC_ReloadLayer
